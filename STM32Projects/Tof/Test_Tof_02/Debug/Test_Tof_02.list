
Test_Tof_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0801a8f8  0801a8f8  0002a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ad60  0801ad60  0002ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ad68  0801ad68  0002ad68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ad6c  0801ad6c  0002ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000008  0801ad70  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008584  200000e0  0801ae44  000300e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20008664  0801ae44  00038664  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064d45  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006d42  00000000  00000000  00094e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003300  00000000  00000000  0009bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003008  00000000  00000000  0009ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f572  00000000  00000000  000a1ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b618  00000000  00000000  000d1412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011a9d1  00000000  00000000  0010ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002273fb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e474  00000000  00000000  0022744c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a8e0 	.word	0x0801a8e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0801a8e0 	.word	0x0801a8e0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 80005c8:	f000 f82e 	bl	8000628 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 80005cc:	f000 f848 	bl	8000660 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 80005d0:	f000 f862 	bl	8000698 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n\n");
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <VL_TOF_Process+0x38>)
 80005de:	f019 f9a5 	bl	801992c <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 80005e2:	f000 f875 	bl	80006d0 <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n\n");
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <VL_TOF_Process+0x3c>)
 80005e8:	f019 f9a0 	bl	801992c <puts>

  printf("\n ---- start TOF Right ---- \n\n");
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <VL_TOF_Process+0x40>)
 80005ee:	f019 f99d 	bl	801992c <puts>
  VL_53L1A2_SimpleRanging_Process_R();
 80005f2:	f000 f8cb 	bl	800078c <VL_53L1A2_SimpleRanging_Process_R>
  printf("\n ---- end TOF Right ---- \n\n");
 80005f6:	4809      	ldr	r0, [pc, #36]	; (800061c <VL_TOF_Process+0x44>)
 80005f8:	f019 f998 	bl	801992c <puts>

  printf("\n ---- start TOF Left ---- \n\n");
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <VL_TOF_Process+0x48>)
 80005fe:	f019 f995 	bl	801992c <puts>
  VL_53L1A2_SimpleRanging_Process_L();
 8000602:	f000 f921 	bl	8000848 <VL_53L1A2_SimpleRanging_Process_L>
  printf("\n ---- end TOF Left ---- \n\n");
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <VL_TOF_Process+0x4c>)
 8000608:	f019 f990 	bl	801992c <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	0801a8f8 	.word	0x0801a8f8
 8000614:	0801a918 	.word	0x0801a918
 8000618:	0801a938 	.word	0x0801a938
 800061c:	0801a958 	.word	0x0801a958
 8000620:	0801a974 	.word	0x0801a974
 8000624:	0801a994 	.word	0x0801a994

08000628 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 fa01 	bl	8001a34 <VL53L1A2_RANGING_SENSOR_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8000636:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 8000642:	f019 f973 	bl	801992c <puts>
    while(1);
 8000646:	e7fe      	b.n	8000646 <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  printf(" ****** Initialization TOF CENTER OK ****** \n");
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 800064a:	f019 f96f 	bl	801992c <puts>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000138 	.word	0x20000138
 8000658:	0801a9b0 	.word	0x0801a9b0
 800065c:	0801a9d4 	.word	0x0801a9d4

08000660 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 8000664:	2002      	movs	r0, #2
 8000666:	f001 f9e5 	bl	8001a34 <VL53L1A2_RANGING_SENSOR_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 800066e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d003      	beq.n	8000680 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <VL_53L1A2_SimpleRanging_Init_R+0x30>)
 800067a:	f019 f957 	bl	801992c <puts>
    while(1);
 800067e:	e7fe      	b.n	800067e <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }
  printf(" ****** Initialization TOF RIGHT OK ****** \n");
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <VL_53L1A2_SimpleRanging_Init_R+0x34>)
 8000682:	f019 f953 	bl	801992c <puts>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000013c 	.word	0x2000013c
 8000690:	0801a9b0 	.word	0x0801a9b0
 8000694:	0801aa04 	.word	0x0801aa04

08000698 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 800069c:	2000      	movs	r0, #0
 800069e:	f001 f9c9 	bl	8001a34 <VL53L1A2_RANGING_SENSOR_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80006a6:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <VL_53L1A2_SimpleRanging_Init_L+0x30>)
 80006b2:	f019 f93b 	bl	801992c <puts>
    while(1);
 80006b6:	e7fe      	b.n	80006b6 <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }
  printf(" ****** Initialization TOF LEFT OK ****** \n");
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <VL_53L1A2_SimpleRanging_Init_L+0x34>)
 80006ba:	f019 f937 	bl	801992c <puts>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000140 	.word	0x20000140
 80006c8:	0801a9b0 	.word	0x0801a9b0
 80006cc:	0801aa30 	.word	0x0801aa30

080006d0 <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 80006d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006da:	4619      	mov	r1, r3
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 f9cf 	bl	8001a80 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006ea:	221e      	movs	r2, #30
 80006ec:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8000700:	491e      	ldr	r1, [pc, #120]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 8000702:	2001      	movs	r0, #1
 8000704:	f001 f9e4 	bl	8001ad0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000708:	2101      	movs	r1, #1
 800070a:	2001      	movs	r0, #1
 800070c:	f001 fa30 	bl	8001b70 <VL53L1A2_RANGING_SENSOR_Start>
 8000710:	4603      	mov	r3, r0
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000714:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 800071e:	4819      	ldr	r0, [pc, #100]	; (8000784 <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8000720:	f019 f904 	bl	801992c <puts>
    while(1);
 8000724:	e7fe      	b.n	8000724 <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 8000726:	2301      	movs	r3, #1
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800072a:	e01a      	b.n	8000762 <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	2001      	movs	r0, #1
 8000732:	f001 f9f5 	bl	8001b20 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8000736:	4603      	mov	r3, r0
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800073a:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d107      	bne.n	8000754 <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 8000744:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000746:	4810      	ldr	r0, [pc, #64]	; (8000788 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8000748:	f019 f854 	bl	80197f4 <iprintf>
      print_result(&Result_Center);
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f8d8 	bl	8000904 <print_result>
    }

    HAL_Delay(1500);
 8000754:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000758:	f014 ff7a 	bl	8015650 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 800075c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075e:	3301      	adds	r3, #1
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000764:	2b05      	cmp	r3, #5
 8000766:	dde1      	ble.n	800072c <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8000768:	2001      	movs	r0, #1
 800076a:	f001 fa29 	bl	8001bc0 <VL53L1A2_RANGING_SENSOR_Stop>
 800076e:	4603      	mov	r3, r0
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000fc 	.word	0x200000fc
 8000780:	20000138 	.word	0x20000138
 8000784:	0801aa5c 	.word	0x0801aa5c
 8000788:	0801aa88 	.word	0x0801aa88

0800078c <VL_53L1A2_SimpleRanging_Process_R>:

static void VL_53L1A2_SimpleRanging_Process_R(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  uint32_t Id_Right;
  RANGING_SENSOR_Result_t Result_Right;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_RIGHT, &Id_Right);
 8000792:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000796:	4619      	mov	r1, r3
 8000798:	2002      	movs	r0, #2
 800079a:	f001 f971 	bl	8001a80 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileRight.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  ProfileRight.TimingBudget = TIMING_BUDGET;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007a6:	221e      	movs	r2, #30
 80007a8:	605a      	str	r2, [r3, #4]
  ProfileRight.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  ProfileRight.EnableAmbient = 0; // Enable: 1, Disable: 0
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  ProfileRight.EnableSignal = 0; // Enable: 1, Disable: 0
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_RIGHT, &ProfileRight);
 80007bc:	491e      	ldr	r1, [pc, #120]	; (8000838 <VL_53L1A2_SimpleRanging_Process_R+0xac>)
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f986 	bl	8001ad0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusRight = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_RIGHT, RS_MODE_BLOCKING_CONTINUOUS);
 80007c4:	2101      	movs	r1, #1
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f9d2 	bl	8001b70 <VL53L1A2_RANGING_SENSOR_Start>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007d0:	6013      	str	r3, [r2, #0]

  if (statusRight != BSP_ERROR_NONE)
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <VL_53L1A2_SimpleRanging_Process_R+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Right failed\n");
 80007da:	4819      	ldr	r0, [pc, #100]	; (8000840 <VL_53L1A2_SimpleRanging_Process_R+0xb4>)
 80007dc:	f019 f8a6 	bl	801992c <puts>
    while(1);
 80007e0:	e7fe      	b.n	80007e0 <VL_53L1A2_SimpleRanging_Process_R+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 80007e2:	2301      	movs	r3, #1
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007e6:	e01a      	b.n	800081e <VL_53L1A2_SimpleRanging_Process_R+0x92>
    /* repetition mode */
    statusRight = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_RIGHT, &Result_Right);
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	2002      	movs	r0, #2
 80007ee:	f001 f997 	bl	8001b20 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a11      	ldr	r2, [pc, #68]	; (800083c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007f6:	6013      	str	r3, [r2, #0]

    if (statusRight == BSP_ERROR_NONE)
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d107      	bne.n	8000810 <VL_53L1A2_SimpleRanging_Process_R+0x84>
    {
      printf("\n RIGHT %d\n",i);
 8000800:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000802:	4810      	ldr	r0, [pc, #64]	; (8000844 <VL_53L1A2_SimpleRanging_Process_R+0xb8>)
 8000804:	f018 fff6 	bl	80197f4 <iprintf>
      print_result(&Result_Right);
 8000808:	463b      	mov	r3, r7
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f87a 	bl	8000904 <print_result>
    }

    HAL_Delay(1500);
 8000810:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000814:	f014 ff1c 	bl	8015650 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8000818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800081a:	3301      	adds	r3, #1
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800081e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000820:	2b05      	cmp	r3, #5
 8000822:	dde1      	ble.n	80007e8 <VL_53L1A2_SimpleRanging_Process_R+0x5c>

  }
  statusRight = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_RIGHT);
 8000824:	2002      	movs	r0, #2
 8000826:	f001 f9cb 	bl	8001bc0 <VL53L1A2_RANGING_SENSOR_Stop>
 800082a:	4603      	mov	r3, r0
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <VL_53L1A2_SimpleRanging_Process_R+0xb0>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000110 	.word	0x20000110
 800083c:	2000013c 	.word	0x2000013c
 8000840:	0801aa98 	.word	0x0801aa98
 8000844:	0801aac4 	.word	0x0801aac4

08000848 <VL_53L1A2_SimpleRanging_Process_L>:
static void VL_53L1A2_SimpleRanging_Process_L(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  uint32_t Id_Left;
  RANGING_SENSOR_Result_t Result_Left;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_LEFT, &Id_Left);
 800084e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000852:	4619      	mov	r1, r3
 8000854:	2000      	movs	r0, #0
 8000856:	f001 f913 	bl	8001a80 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileLeft.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
  ProfileLeft.TimingBudget = TIMING_BUDGET;
 8000860:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000862:	221e      	movs	r2, #30
 8000864:	605a      	str	r2, [r3, #4]
  ProfileLeft.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  ProfileLeft.EnableAmbient = 0; // Enable: 1, Disable: 0
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  ProfileLeft.EnableSignal = 0; // Enable: 1, Disable: 0
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_LEFT, &ProfileLeft);
 8000878:	491e      	ldr	r1, [pc, #120]	; (80008f4 <VL_53L1A2_SimpleRanging_Process_L+0xac>)
 800087a:	2000      	movs	r0, #0
 800087c:	f001 f928 	bl	8001ad0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusLeft = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_LEFT, RS_MODE_BLOCKING_CONTINUOUS);
 8000880:	2101      	movs	r1, #1
 8000882:	2000      	movs	r0, #0
 8000884:	f001 f974 	bl	8001b70 <VL53L1A2_RANGING_SENSOR_Start>
 8000888:	4603      	mov	r3, r0
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 800088c:	6013      	str	r3, [r2, #0]

  if (statusLeft != BSP_ERROR_NONE)
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <VL_53L1A2_SimpleRanging_Process_L+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Left failed\n");
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <VL_53L1A2_SimpleRanging_Process_L+0xb4>)
 8000898:	f019 f848 	bl	801992c <puts>
    while(1);
 800089c:	e7fe      	b.n	800089c <VL_53L1A2_SimpleRanging_Process_L+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800089e:	2301      	movs	r3, #1
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008a2:	e01a      	b.n	80008da <VL_53L1A2_SimpleRanging_Process_L+0x92>
    /* repetition mode */
    statusLeft = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_LEFT, &Result_Left);
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 f939 	bl	8001b20 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80008b2:	6013      	str	r3, [r2, #0]

    if (statusLeft == BSP_ERROR_NONE)
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d107      	bne.n	80008cc <VL_53L1A2_SimpleRanging_Process_L+0x84>
    {
      printf("\n LEFT %d\n",i);
 80008bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008be:	4810      	ldr	r0, [pc, #64]	; (8000900 <VL_53L1A2_SimpleRanging_Process_L+0xb8>)
 80008c0:	f018 ff98 	bl	80197f4 <iprintf>
      print_result(&Result_Left);
 80008c4:	463b      	mov	r3, r7
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f81c 	bl	8000904 <print_result>
    }

    HAL_Delay(1500);
 80008cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008d0:	f014 febe 	bl	8015650 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 80008d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008d6:	3301      	adds	r3, #1
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80008da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008dc:	2b05      	cmp	r3, #5
 80008de:	dde1      	ble.n	80008a4 <VL_53L1A2_SimpleRanging_Process_L+0x5c>

  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f96d 	bl	8001bc0 <VL53L1A2_RANGING_SENSOR_Stop>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <VL_53L1A2_SimpleRanging_Process_L+0xb0>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	3750      	adds	r7, #80	; 0x50
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000124 	.word	0x20000124
 80008f8:	20000140 	.word	0x20000140
 80008fc:	0801aad0 	.word	0x0801aad0
 8000900:	0801aafc 	.word	0x0801aafc

08000904 <print_result>:

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e03f      	b.n	8000992 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	4613      	mov	r3, r2
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	4413      	add	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <print_result+0xa4>)
 8000928:	f018 ff64 	bl	80197f4 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800092c:	2300      	movs	r3, #0
 800092e:	73bb      	strb	r3, [r7, #14]
 8000930:	e020      	b.n	8000974 <print_result+0x70>
    {
      printf("\n |---> ");
 8000932:	481e      	ldr	r0, [pc, #120]	; (80009ac <print_result+0xa8>)
 8000934:	f018 ff5e 	bl	80197f4 <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 8000938:	7bfa      	ldrb	r2, [r7, #15]
 800093a:	7bb8      	ldrb	r0, [r7, #14]
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	4413      	add	r3, r2
 8000944:	4403      	add	r3, r0
 8000946:	3304      	adds	r3, #4
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 800094e:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	7bb8      	ldrb	r0, [r7, #14]
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	4413      	add	r3, r2
 800095c:	4403      	add	r3, r0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	440b      	add	r3, r1
 8000962:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 8000964:	461a      	mov	r2, r3
 8000966:	4621      	mov	r1, r4
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <print_result+0xac>)
 800096a:	f018 ff43 	bl	80197f4 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	3301      	adds	r3, #1
 8000972:	73bb      	strb	r3, [r7, #14]
 8000974:	7bb9      	ldrb	r1, [r7, #14]
 8000976:	7bfa      	ldrb	r2, [r7, #15]
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	4413      	add	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4403      	add	r3, r0
 8000984:	3304      	adds	r3, #4
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4299      	cmp	r1, r3
 800098a:	d3d2      	bcc.n	8000932 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3301      	adds	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0bc      	beq.n	8000912 <print_result+0xe>
    }
  }
  printf ("\n");
 8000998:	200a      	movs	r0, #10
 800099a:	f018 ff43 	bl	8019824 <putchar>
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0801ab08 	.word	0x0801ab08
 80009ac:	0801ab18 	.word	0x0801ab18
 80009b0:	0801ab24 	.word	0x0801ab24

080009b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	2004      	movs	r0, #4
 80009fe:	f7ff ffd9 	bl	80009b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2002      	movs	r0, #2
 8000a04:	f7ff ffd6 	bl	80009b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff ffd3 	bl	80009b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2008      	movs	r0, #8
 8000a10:	f7ff ffd0 	bl	80009b4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2123      	movs	r1, #35	; 0x23
 8000a18:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_GPIO_Init+0x84>)
 8000a1a:	f015 f983 	bl	8015d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4810      	ldr	r0, [pc, #64]	; (8000a70 <MX_GPIO_Init+0x88>)
 8000a30:	f014 ff12 	bl	8015858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a34:	2323      	movs	r3, #35	; 0x23
 8000a36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0x84>)
 8000a4a:	f014 ff05 	bl	8015858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0x8c>)
 8000a60:	f014 fefa 	bl	8015858 <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800
 8000a74:	48000c00 	.word	0x48000c00

08000a78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d013      	beq.n	8000ab8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00b      	beq.n	8000ab8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000aa0:	e000      	b.n	8000aa4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000aa2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000aa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f9      	beq.n	8000aa2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000aae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ad6:	f023 0218 	bic.w	r2, r3, #24
 8000ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	e009      	b.n	8000b18 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffb3 	bl	8000a78 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf1      	blt.n	8000b04 <_write+0x12>
}
return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b30:	f014 fd42 	bl	80155b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b34:	f000 f818 	bl	8000b68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b38:	f000 f88c 	bl	8000c54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f7ff ff54 	bl	80009e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b40:	f000 fc14 	bl	800136c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000b44:	f000 fcd8 	bl	80014f8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  //Tof Initialization
  VL_TOF_Init();
 8000b48:	f7ff fd3c 	bl	80005c4 <VL_TOF_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("\n\n ****** Start TOF Test ****** \n\n");
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <main+0x34>)
 8000b4e:	f018 feed 	bl	801992c <puts>
	  VL_TOF_Process();
 8000b52:	f7ff fd41 	bl	80005d8 <VL_TOF_Process>
	  printf("\n\n ****** End TOF Test ****** \n\n");
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <main+0x38>)
 8000b58:	f018 fee8 	bl	801992c <puts>
	  printf("\n\n ****** Start TOF Test ****** \n\n");
 8000b5c:	e7f6      	b.n	8000b4c <main+0x20>
 8000b5e:	bf00      	nop
 8000b60:	0801ab48 	.word	0x0801ab48
 8000b64:	0801ab6c 	.word	0x0801ab6c

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b09a      	sub	sp, #104	; 0x68
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2248      	movs	r2, #72	; 0x48
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f018 fe34 	bl	80197e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b9c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	f023 0303 	bic.w	r3, r3, #3
 8000ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bb2:	f015 ffb7 	bl	8016b24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff ff85 	bl	8000ac6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SystemClock_Config+0xe8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <SystemClock_Config+0xe8>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <SystemClock_Config+0xe8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000bd8:	2327      	movs	r3, #39	; 0x27
 8000bda:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf8:	2360      	movs	r3, #96	; 0x60
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f016 fb2d 	bl	8017264 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c10:	f000 f850 	bl	8000cb4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c14:	236f      	movs	r3, #111	; 0x6f
 8000c16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f016 fe89 	bl	801794c <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000c40:	f000 f838 	bl	8000cb4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c44:	f017 fc76 	bl	8018534 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c48:	bf00      	nop
 8000c4a:	3768      	adds	r7, #104	; 0x68
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58000400 	.word	0x58000400

08000c54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2250      	movs	r2, #80	; 0x50
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f018 fdbf 	bl	80197e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4618      	mov	r0, r3
 8000c78:	f017 fae6 	bl	8018248 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000c82:	f000 f817 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	; 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca2:	f014 fca9 	bl	80155f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40014800 	.word	0x40014800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>

08000cbe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	201a      	movs	r0, #26
 8000d16:	f014 fd77 	bl	8015808 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000d1a:	201a      	movs	r0, #26
 8000d1c:	f014 fd8e 	bl	801583c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000d20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d24:	f7ff ffd2 	bl	8000ccc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d28:	f107 0208 	add.w	r2, r7, #8
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f016 fff6 	bl	8017d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d38:	f016 ffde 	bl	8017cf8 <HAL_RCC_GetPCLK2Freq>
 8000d3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <HAL_InitTick+0x8c>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	0c9b      	lsrs	r3, r3, #18
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_InitTick+0x90>)
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <HAL_InitTick+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_InitTick+0x90>)
 8000d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d58:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_InitTick+0x90>)
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_InitTick+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_InitTick+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_InitTick+0x90>)
 8000d6e:	f017 fcf8 	bl	8018762 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_InitTick+0x90>)
 8000d7a:	f017 fd53 	bl	8018824 <HAL_TIM_Base_Start_IT>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3730      	adds	r7, #48	; 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	20000144 	.word	0x20000144
 8000d94:	40014800 	.word	0x40014800

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000df6:	f017 fd63 	bl	80188c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000144 	.word	0x20000144

08000e04 <LL_AHB2_GRP1_EnableClock>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e28:	68fb      	ldr	r3, [r7, #12]
}
 8000e2a:	bf00      	nop
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_APB1_GRP1_EnableClock>:
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4013      	ands	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_APB1_GRP1_DisableClock>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e7e:	4013      	ands	r3, r2
 8000e80:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <BSP_I2C1_Init+0x70>)
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <BSP_I2C1_Init+0x74>)
 8000e9e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <BSP_I2C1_Init+0x78>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	4918      	ldr	r1, [pc, #96]	; (8000f08 <BSP_I2C1_Init+0x78>)
 8000ea8:	600a      	str	r2, [r1, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d122      	bne.n	8000ef4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <BSP_I2C1_Init+0x70>)
 8000eb0:	f015 fa0c 	bl	80162cc <HAL_I2C_GetState>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d11c      	bne.n	8000ef4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000eba:	4811      	ldr	r0, [pc, #68]	; (8000f00 <BSP_I2C1_Init+0x70>)
 8000ebc:	f000 f8ee 	bl	800109c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d116      	bne.n	8000ef4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <BSP_I2C1_Init+0x70>)
 8000ec8:	f000 f8a4 	bl	8001014 <MX_I2C1_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ed2:	f06f 0307 	mvn.w	r3, #7
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	e00c      	b.n	8000ef4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <BSP_I2C1_Init+0x70>)
 8000ede:	f015 fc87 	bl	80167f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ee8:	f06f 0307 	mvn.w	r3, #7
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e001      	b.n	8000ef4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000190 	.word	0x20000190
 8000f04:	40005400 	.word	0x40005400
 8000f08:	200001e4 	.word	0x200001e4

08000f0c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <BSP_I2C1_DeInit+0x48>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d014      	beq.n	8000f48 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <BSP_I2C1_DeInit+0x48>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <BSP_I2C1_DeInit+0x48>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <BSP_I2C1_DeInit+0x48>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10b      	bne.n	8000f48 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <BSP_I2C1_DeInit+0x4c>)
 8000f32:	f000 f8f7 	bl	8001124 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <BSP_I2C1_DeInit+0x4c>)
 8000f38:	f014 ff9b 	bl	8015e72 <HAL_I2C_DeInit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000f42:	f06f 0307 	mvn.w	r3, #7
 8000f46:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001e4 	.word	0x200001e4
 8000f58:	20000190 	.word	0x20000190

08000f5c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	80fb      	strh	r3, [r7, #6]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	88f9      	ldrh	r1, [r7, #6]
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	9200      	str	r2, [sp, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <BSP_I2C1_Send+0x50>)
 8000f7e:	f014 ffbb 	bl	8015ef8 <HAL_I2C_Master_Transmit>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00c      	beq.n	8000fa2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <BSP_I2C1_Send+0x50>)
 8000f8a:	f015 f9ad 	bl	80162e8 <HAL_I2C_GetError>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d003      	beq.n	8000f9c <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000f94:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e002      	b.n	8000fa2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000f9c:	f06f 0303 	mvn.w	r3, #3
 8000fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000190 	.word	0x20000190

08000fb0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	88f9      	ldrh	r1, [r7, #6]
 8000fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fcc:	9200      	str	r2, [sp, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <BSP_I2C1_Recv+0x50>)
 8000fd2:	f015 f885 	bl	80160e0 <HAL_I2C_Master_Receive>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00c      	beq.n	8000ff6 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <BSP_I2C1_Recv+0x50>)
 8000fde:	f015 f983 	bl	80162e8 <HAL_I2C_GetError>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d003      	beq.n	8000ff0 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000fe8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e002      	b.n	8000ff6 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ff0:	f06f 0303 	mvn.w	r3, #3
 8000ff4:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000190 	.word	0x20000190

08001004 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001008:	f014 fb0a 	bl	8015620 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <MX_I2C1_Init+0x80>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <MX_I2C1_Init+0x84>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f014 fe7c 	bl	8015d54 <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f015 fbc1 	bl	80167f0 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f015 fc03 	bl	8016886 <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40005400 	.word	0x40005400
 8001098:	00707cbb 	.word	0x00707cbb

0800109c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b09c      	sub	sp, #112	; 0x70
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2250      	movs	r2, #80	; 0x50
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f018 fb99 	bl	80197e4 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b2:	2304      	movs	r3, #4
 80010b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f017 f8c1 	bl	8018248 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff fe9c 	bl	8000e04 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80010cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d2:	2312      	movs	r3, #18
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80010de:	2304      	movs	r3, #4
 80010e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80010e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010e6:	4619      	mov	r1, r3
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <I2C1_MspInit+0x84>)
 80010ea:	f014 fbb5 	bl	8015858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80010ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f4:	2312      	movs	r3, #18
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001100:	2304      	movs	r3, #4
 8001102:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001104:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <I2C1_MspInit+0x84>)
 800110c:	f014 fba4 	bl	8015858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001110:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001114:	f7ff fe8f 	bl	8000e36 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3770      	adds	r7, #112	; 0x70
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	48000400 	.word	0x48000400

08001124 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800112c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001130:	f7ff fe9a 	bl	8000e68 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <I2C1_MspDeInit+0x2c>)
 800113a:	f014 fcfd 	bl	8015b38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <I2C1_MspDeInit+0x2c>)
 8001144:	f014 fcf8 	bl	8015b38 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00a      	b.n	800117c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001166:	f3af 8000 	nop.w
 800116a:	4601      	mov	r1, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf0      	blt.n	8001166 <_read+0x12>
  }

  return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:
  }
  return len;
}

int _close(int file)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b6:	605a      	str	r2, [r3, #4]
  return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_isatty>:

int _isatty(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f018 faa4 	bl	8019774 <__errno>
 800122c:	4603      	mov	r3, r0
 800122e:	220c      	movs	r2, #12
 8001230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20030000 	.word	0x20030000
 8001258:	00000400 	.word	0x00000400
 800125c:	200001e8 	.word	0x200001e8
 8001260:	20008668 	.word	0x20008668

08001264 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <SystemInit+0x98>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <SystemInit+0x98>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001290:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <SystemInit+0x9c>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ae:	f023 0305 	bic.w	r3, r3, #5
 80012b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <SystemInit+0xa0>)
 80012d0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <SystemInit+0xa0>)
 80012d8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00
 8001300:	faf6fefb 	.word	0xfaf6fefb
 8001304:	22041000 	.word	0x22041000

08001308 <LL_AHB2_GRP1_EnableClock>:
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_APB2_GRP1_EnableClock>:
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4313      	orrs	r3, r2
 8001350:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4013      	ands	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_USART1_UART_Init+0x94>)
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <MX_USART1_UART_Init+0x98>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <MX_USART1_UART_Init+0x94>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_USART1_UART_Init+0x94>)
 8001380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001384:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_USART1_UART_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_USART1_UART_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_USART1_UART_Init+0x94>)
 8001394:	220c      	movs	r2, #12
 8001396:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_USART1_UART_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013b8:	f017 fc6c 	bl	8018c94 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80013c2:	f7ff fc77 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013ca:	f018 f8cc 	bl	8019566 <HAL_UARTEx_SetTxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80013d4:	f7ff fc6e 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013dc:	f018 f901 	bl	80195e2 <HAL_UARTEx_SetRxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80013e6:	f7ff fc65 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART1_UART_Init+0x94>)
 80013ec:	f018 f882 	bl	80194f4 <HAL_UARTEx_DisableFifoMode>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80013f6:	f7ff fc5d 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001ec 	.word	0x200001ec
 8001404:	40013800 	.word	0x40013800

08001408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b09c      	sub	sp, #112	; 0x70
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2250      	movs	r2, #80	; 0x50
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f018 f9db 	bl	80197e4 <memset>
  if(uartHandle->Instance==USART1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_UART_MspInit+0x84>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d124      	bne.n	8001482 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	4618      	mov	r0, r3
 8001446:	f016 feff 	bl	8018248 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001450:	f7ff fc30 	bl	8000cb4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001454:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001458:	f7ff ff6f 	bl	800133a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	2002      	movs	r0, #2
 800145e:	f7ff ff53 	bl	8001308 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001472:	2307      	movs	r3, #7
 8001474:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <HAL_UART_MspInit+0x88>)
 800147e:	f014 f9eb 	bl	8015858 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3770      	adds	r7, #112	; 0x70
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40013800 	.word	0x40013800
 8001490:	48000400 	.word	0x48000400

08001494 <LL_AHB2_GRP1_EnableClock>:
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800149c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014b8:	68fb      	ldr	r3, [r7, #12]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_APB1_GRP1_EnableClock>:
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4313      	orrs	r3, r2
 80014dc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USB_PCD_Init+0x48>)
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <MX_USB_PCD_Init+0x4c>)
 8001500:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_USB_PCD_Init+0x48>)
 8001504:	2208      	movs	r2, #8
 8001506:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <MX_USB_PCD_Init+0x48>)
 800150a:	2202      	movs	r2, #2
 800150c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USB_PCD_Init+0x48>)
 8001510:	2202      	movs	r2, #2
 8001512:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <MX_USB_PCD_Init+0x48>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USB_PCD_Init+0x48>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <MX_USB_PCD_Init+0x48>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USB_PCD_Init+0x48>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <MX_USB_PCD_Init+0x48>)
 800152e:	f015 f9f6 	bl	801691e <HAL_PCD_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001538:	f7ff fbbc 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000280 	.word	0x20000280
 8001544:	40006800 	.word	0x40006800

08001548 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09c      	sub	sp, #112	; 0x70
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2250      	movs	r2, #80	; 0x50
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f018 f93b 	bl	80197e4 <memset>
  if(pcdHandle->Instance==USB)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_PCD_MspInit+0xa8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d136      	bne.n	80015e6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800157e:	2318      	movs	r3, #24
 8001580:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001586:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800158e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001592:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001598:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800159a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800159e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4618      	mov	r0, r3
 80015a6:	f016 fe4f 	bl	8018248 <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80015b0:	f7ff fb80 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff ff6d 	bl	8001494 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80015cc:	230a      	movs	r3, #10
 80015ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f014 f93d 	bl	8015858 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015e2:	f7ff ff70 	bl	80014c6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80015e6:	bf00      	nop
 80015e8:	3770      	adds	r7, #112	; 0x70
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40006800 	.word	0x40006800

080015f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f8:	3304      	adds	r3, #4

080015fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015fe:	d3f9      	bcc.n	80015f4 <CopyDataInit>
  bx lr
 8001600:	4770      	bx	lr

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001602:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001604:	3004      	adds	r0, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001606:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>
  bx lr
 800160a:	4770      	bx	lr

0800160c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001610:	f7ff fe28 	bl	8001264 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <LoopForever+0x6>)
 8001616:	490c      	ldr	r1, [pc, #48]	; (8001648 <LoopForever+0xa>)
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <LoopForever+0xe>)
 800161a:	2300      	movs	r3, #0
 800161c:	f7ff ffed 	bl	80015fa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <LoopForever+0x12>)
 8001622:	490c      	ldr	r1, [pc, #48]	; (8001654 <LoopForever+0x16>)
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <LoopForever+0x1a>)
 8001626:	2300      	movs	r3, #0
 8001628:	f7ff ffe7 	bl	80015fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <LoopForever+0x1e>)
 800162e:	490c      	ldr	r1, [pc, #48]	; (8001660 <LoopForever+0x22>)
 8001630:	2300      	movs	r3, #0
 8001632:	f7ff ffe8 	bl	8001606 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001636:	f018 f8a3 	bl	8019780 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800163a:	f7ff fa77 	bl	8000b2c <main>

0800163e <LoopForever>:

LoopForever:
  b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   r0, =_estack
 8001640:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001644:	20000008 	.word	0x20000008
 8001648:	200000dc 	.word	0x200000dc
 800164c:	0801ad70 	.word	0x0801ad70
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001650:	20030000 	.word	0x20030000
 8001654:	20030000 	.word	0x20030000
 8001658:	0801ae44 	.word	0x0801ae44
  INIT_BSS _sbss, _ebss
 800165c:	200000e0 	.word	0x200000e0
 8001660:	20008664 	.word	0x20008664

08001664 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_IRQHandler>

08001666 <LL_AHB2_GRP1_EnableClock>:
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <VL53L1A2_Init+0xe4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4934      	ldr	r1, [pc, #208]	; (800177c <VL53L1A2_Init+0xe4>)
 80016aa:	600a      	str	r2, [r1, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d154      	bne.n	800175a <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80016b0:	f000 f8d4 	bl	800185c <_I2cFailRecover>
 80016b4:	4602      	mov	r2, r0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 80016bc:	f7ff fbe8 	bl	8000e90 <BSP_I2C1_Init>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d147      	bne.n	800175e <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80016ce:	463a      	mov	r2, r7
 80016d0:	2302      	movs	r3, #2
 80016d2:	2100      	movs	r1, #0
 80016d4:	2086      	movs	r0, #134	; 0x86
 80016d6:	f000 f953 	bl	8001980 <_ExpanderRd>
 80016da:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13f      	bne.n	8001762 <VL53L1A2_Init+0xca>
 80016e2:	783b      	ldrb	r3, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d13c      	bne.n	8001762 <VL53L1A2_Init+0xca>
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b16      	cmp	r3, #22
 80016ec:	d139      	bne.n	8001762 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80016ee:	463a      	mov	r2, r7
 80016f0:	2302      	movs	r3, #2
 80016f2:	2100      	movs	r1, #0
 80016f4:	2084      	movs	r0, #132	; 0x84
 80016f6:	f000 f943 	bl	8001980 <_ExpanderRd>
 80016fa:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d131      	bne.n	8001766 <VL53L1A2_Init+0xce>
 8001702:	783b      	ldrb	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12e      	bne.n	8001766 <VL53L1A2_Init+0xce>
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b16      	cmp	r3, #22
 800170c:	d12b      	bne.n	8001766 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <VL53L1A2_Init+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001714:	23ff      	movs	r3, #255	; 0xff
 8001716:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001718:	23ff      	movs	r3, #255	; 0xff
 800171a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800171c:	463a      	mov	r2, r7
 800171e:	2302      	movs	r3, #2
 8001720:	2114      	movs	r1, #20
 8001722:	2086      	movs	r0, #134	; 0x86
 8001724:	f000 f95e 	bl	80019e4 <_ExpanderWR>
 8001728:	6078      	str	r0, [r7, #4]

	  if (status)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d11c      	bne.n	800176a <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001730:	23ff      	movs	r3, #255	; 0xff
 8001732:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001734:	23bf      	movs	r3, #191	; 0xbf
 8001736:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001738:	463a      	mov	r2, r7
 800173a:	2302      	movs	r3, #2
 800173c:	2114      	movs	r1, #20
 800173e:	2084      	movs	r0, #132	; 0x84
 8001740:	f000 f950 	bl	80019e4 <_ExpanderWR>
 8001744:	6078      	str	r0, [r7, #4]

	  if (status)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d110      	bne.n	800176e <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <VL53L1A2_Init+0xe8>)
 800174e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001752:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001754:	f000 f8f4 	bl	8001940 <_ExpandersSetAllIO>
 8001758:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800175a:	bf00      	nop
 800175c:	e008      	b.n	8001770 <VL53L1A2_Init+0xd8>
      goto done_err;
 800175e:	bf00      	nop
 8001760:	e006      	b.n	8001770 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001762:	bf00      	nop
 8001764:	e004      	b.n	8001770 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8001766:	bf00      	nop
 8001768:	e002      	b.n	8001770 <VL53L1A2_Init+0xd8>
		goto done_err;
 800176a:	bf00      	nop
 800176c:	e000      	b.n	8001770 <VL53L1A2_Init+0xd8>
		goto done_err;
 800176e:	bf00      	nop
  return status;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000574 	.word	0x20000574
 8001780:	20000578 	.word	0x20000578

08001784 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	460a      	mov	r2, r1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d037      	beq.n	800180a <VL53L1A2_ResetId+0x86>
 800179a:	2b02      	cmp	r3, #2
 800179c:	dc4e      	bgt.n	800183c <VL53L1A2_ResetId+0xb8>
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01a      	beq.n	80017d8 <VL53L1A2_ResetId+0x54>
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d14a      	bne.n	800183c <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017b2:	70da      	strb	r2, [r3, #3]

      if (state)
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017bc:	78db      	ldrb	r3, [r3, #3]
 80017be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017c6:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80017c8:	2301      	movs	r3, #1
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <VL53L1A2_ResetId+0xd0>)
 80017cc:	2113      	movs	r1, #19
 80017ce:	2084      	movs	r0, #132	; 0x84
 80017d0:	f000 f908 	bl	80019e4 <_ExpanderWR>
 80017d4:	60f8      	str	r0, [r7, #12]
      break;
 80017d6:	e035      	b.n	8001844 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017e4:	705a      	strb	r2, [r3, #1]

      if (state)
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 80017f8:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80017fa:	2301      	movs	r3, #1
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <VL53L1A2_ResetId+0xd4>)
 80017fe:	2113      	movs	r1, #19
 8001800:	2086      	movs	r0, #134	; 0x86
 8001802:	f000 f8ef 	bl	80019e4 <_ExpanderWR>
 8001806:	60f8      	str	r0, [r7, #12]
      break;
 8001808:	e01c      	b.n	8001844 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 8001816:	705a      	strb	r2, [r3, #1]

      if (state)
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 8001820:	785b      	ldrb	r3, [r3, #1]
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2da      	uxtb	r2, r3
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <VL53L1A2_ResetId+0xcc>)
 800182a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800182c:	2301      	movs	r3, #1
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <VL53L1A2_ResetId+0xd4>)
 8001830:	2113      	movs	r1, #19
 8001832:	2086      	movs	r0, #134	; 0x86
 8001834:	f000 f8d6 	bl	80019e4 <_ExpanderWR>
 8001838:	60f8      	str	r0, [r7, #12]
      break;
 800183a:	e003      	b.n	8001844 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	60fb      	str	r3, [r7, #12]
      goto done;
 8001842:	e000      	b.n	8001846 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001844:	bf00      	nop
  return status;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000578 	.word	0x20000578
 8001854:	2000057b 	.word	0x2000057b
 8001858:	20000579 	.word	0x20000579

0800185c <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <_I2cFailRecover+0xdc>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 800186e:	2300      	movs	r3, #0
 8001870:	e05e      	b.n	8001930 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	2002      	movs	r0, #2
 8001874:	f7ff fef7 	bl	8001666 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8001878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800187e:	2311      	movs	r3, #17
 8001880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001882:	2301      	movs	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <_I2cFailRecover+0xe0>)
 800188c:	f013 ffe4 	bl	8015858 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8001890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001894:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001896:	2311      	movs	r3, #17
 8001898:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189a:	2301      	movs	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <_I2cFailRecover+0xe0>)
 80018a4:	f013 ffd8 	bl	8015858 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ae:	4823      	ldr	r0, [pc, #140]	; (800193c <_I2cFailRecover+0xe0>)
 80018b0:	f014 fa38 	bl	8015d24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ba:	4820      	ldr	r0, [pc, #128]	; (800193c <_I2cFailRecover+0xe0>)
 80018bc:	f014 fa32 	bl	8015d24 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	e014      	b.n	80018f0 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	481b      	ldr	r0, [pc, #108]	; (800193c <_I2cFailRecover+0xe0>)
 80018ce:	f014 fa29 	bl	8015d24 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f013 febc 	bl	8015650 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <_I2cFailRecover+0xe0>)
 80018e0:	f014 fa20 	bl	8015d24 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f013 feb3 	bl	8015650 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	3301      	adds	r3, #1
 80018ee:	75fb      	strb	r3, [r7, #23]
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	d9e7      	bls.n	80018c6 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80018f6:	7dbb      	ldrb	r3, [r7, #22]
 80018f8:	3301      	adds	r3, #1
 80018fa:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80018fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001900:	480e      	ldr	r0, [pc, #56]	; (800193c <_I2cFailRecover+0xe0>)
 8001902:	f014 f9f7 	bl	8015cf4 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_I2cFailRecover+0xb6>
 800190c:	7dbb      	ldrb	r3, [r7, #22]
 800190e:	2b06      	cmp	r3, #6
 8001910:	d9d6      	bls.n	80018c0 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <_I2cFailRecover+0xe0>)
 8001918:	f014 f9ec 	bl	8015cf4 <HAL_GPIO_ReadPin>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001922:	f06f 0304 	mvn.w	r3, #4
 8001926:	e003      	b.n	8001930 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <_I2cFailRecover+0xdc>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000057c 	.word	0x2000057c
 800193c:	48000400 	.word	0x48000400

08001940 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001946:	2302      	movs	r3, #2
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <_ExpandersSetAllIO+0x38>)
 800194a:	2112      	movs	r1, #18
 800194c:	2086      	movs	r0, #134	; 0x86
 800194e:	f000 f849 	bl	80019e4 <_ExpanderWR>
 8001952:	6078      	str	r0, [r7, #4]

  if (status)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800195a:	2302      	movs	r3, #2
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <_ExpandersSetAllIO+0x3c>)
 800195e:	2112      	movs	r1, #18
 8001960:	2084      	movs	r0, #132	; 0x84
 8001962:	f000 f83f 	bl	80019e4 <_ExpanderWR>
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	e000      	b.n	800196c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800196a:	bf00      	nop

done_err:
  return status;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000578 	.word	0x20000578
 800197c:	2000057a 	.word	0x2000057a

08001980 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	b299      	uxth	r1, r3
 8001998:	f107 0213 	add.w	r2, r7, #19
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2301      	movs	r3, #1
 80019a2:	480f      	ldr	r0, [pc, #60]	; (80019e0 <_ExpanderRd+0x60>)
 80019a4:	f014 faa8 	bl	8015ef8 <HAL_I2C_Master_Transmit>
 80019a8:	4603      	mov	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]

    if (status)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d110      	bne.n	80019d4 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	b299      	uxth	r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	fb00 f303 	mul.w	r3, r0, r3
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <_ExpanderRd+0x60>)
 80019ca:	f014 fb89 	bl	80160e0 <HAL_I2C_Master_Receive>
 80019ce:	4603      	mov	r3, r0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e000      	b.n	80019d6 <_ExpanderRd+0x56>
      break;
 80019d4:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80019d6:	697b      	ldr	r3, [r7, #20]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000190 	.word	0x20000190

080019e4 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	3301      	adds	r3, #1
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f017 fee0 	bl	80197c8 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f107 0214 	add.w	r2, r7, #20
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	9000      	str	r0, [sp, #0]
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <_ExpanderWR+0x4c>)
 8001a1e:	f014 fa6b 	bl	8015ef8 <HAL_I2C_Master_Transmit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000190 	.word	0x20000190

08001a34 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d903      	bls.n	8001a4a <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a42:	f06f 0301 	mvn.w	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	e014      	b.n	8001a74 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 8001a4a:	f7ff fe25 	bl	8001698 <VL53L1A2_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001a54:	f06f 0303 	mvn.w	r3, #3
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e00b      	b.n	8001a74 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8d4 	bl	8001c0c <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001a64:	2100      	movs	r1, #0
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8d0 	bl	8001c0c <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f90d 	bl	8001c8c <VL53L1CB_Probe>
 8001a72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d903      	bls.n	8001a98 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a90:	f06f 0301 	mvn.w	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e012      	b.n	8001abe <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	490b      	ldr	r1, [pc, #44]	; (8001acc <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4798      	blx	r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da03      	bge.n	8001aba <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ab2:	f06f 0304 	mvn.w	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	e001      	b.n	8001abe <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000058c 	.word	0x2000058c
 8001acc:	20000580 	.word	0x20000580

08001ad0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d903      	bls.n	8001ae8 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ae0:	f06f 0301 	mvn.w	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e012      	b.n	8001b0e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	490b      	ldr	r1, [pc, #44]	; (8001b1c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001af6:	6839      	ldr	r1, [r7, #0]
 8001af8:	4610      	mov	r0, r2
 8001afa:	4798      	blx	r3
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da03      	bge.n	8001b0a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b02:	f06f 0304 	mvn.w	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e001      	b.n	8001b0e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000058c 	.word	0x2000058c
 8001b1c:	20000580 	.word	0x20000580

08001b20 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d903      	bls.n	8001b38 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b30:	f06f 0301 	mvn.w	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e012      	b.n	8001b5e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4798      	blx	r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	da03      	bge.n	8001b5a <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b52:	f06f 0304 	mvn.w	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e001      	b.n	8001b5e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000058c 	.word	0x2000058c
 8001b6c:	20000580 	.word	0x20000580

08001b70 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d903      	bls.n	8001b88 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b80:	f06f 0301 	mvn.w	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e012      	b.n	8001bae <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	490b      	ldr	r1, [pc, #44]	; (8001bbc <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4798      	blx	r3
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da03      	bge.n	8001baa <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ba2:	f06f 0304 	mvn.w	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e001      	b.n	8001bae <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	2000058c 	.word	0x2000058c
 8001bbc:	20000580 	.word	0x20000580

08001bc0 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d903      	bls.n	8001bd6 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bce:	f06f 0301 	mvn.w	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e011      	b.n	8001bfa <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	490a      	ldr	r1, [pc, #40]	; (8001c08 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001be4:	4610      	mov	r0, r2
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da03      	bge.n	8001bf6 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bee:	f06f 0304 	mvn.w	r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e001      	b.n	8001bfa <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000058c 	.word	0x2000058c
 8001c08:	20000580 	.word	0x20000580

08001c0c <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d903      	bls.n	8001c24 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c1c:	f06f 0301 	mvn.w	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e02e      	b.n	8001c82 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d112      	bne.n	8001c50 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fda7 	bl	8001784 <VL53L1A2_ResetId>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da03      	bge.n	8001c44 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c3c:	f06f 0303 	mvn.w	r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e01e      	b.n	8001c82 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f013 fd03 	bl	8015650 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e018      	b.n	8001c82 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d112      	bne.n	8001c7c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fd91 	bl	8001784 <VL53L1A2_ResetId>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da03      	bge.n	8001c70 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c68:	f06f 0303 	mvn.w	r3, #3
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	e008      	b.n	8001c82 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001c70:	2002      	movs	r0, #2
 8001c72:	f013 fced 	bl	8015650 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e002      	b.n	8001c82 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c7c:	f06f 0301 	mvn.w	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001c94:	2352      	movs	r3, #82	; 0x52
 8001c96:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <VL53L1CB_Probe+0xf0>)
 8001c9a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <VL53L1CB_Probe+0xf4>)
 8001c9e:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <VL53L1CB_Probe+0xf8>)
 8001ca2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001ca4:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <VL53L1CB_Probe+0xfc>)
 8001ca6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <VL53L1CB_Probe+0x100>)
 8001caa:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	4a36      	ldr	r2, [pc, #216]	; (8001d90 <VL53L1CB_Probe+0x104>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f013 f824 	bl	8014d0e <VL53L1CB_RegisterBusIO>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ccc:	f06f 0304 	mvn.w	r3, #4
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd2:	e04d      	b.n	8001d70 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <VL53L1CB_Probe+0x104>)
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f107 0208 	add.w	r2, r7, #8
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f013 f8cc 	bl	8014e86 <VL53L1CB_ReadID>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cf4:	f06f 0304 	mvn.w	r3, #4
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	e039      	b.n	8001d70 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d003      	beq.n	8001d0e <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001d06:	f06f 0306 	mvn.w	r3, #6
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e030      	b.n	8001d70 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <VL53L1CB_Probe+0x108>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <VL53L1CB_Probe+0x10c>)
 8001d12:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <VL53L1CB_Probe+0x104>)
 8001d20:	441a      	add	r2, r3
 8001d22:	491e      	ldr	r1, [pc, #120]	; (8001d9c <VL53L1CB_Probe+0x110>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <VL53L1CB_Probe+0x108>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	491a      	ldr	r1, [pc, #104]	; (8001d9c <VL53L1CB_Probe+0x110>)
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4798      	blx	r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d42:	f06f 0304 	mvn.w	r3, #4
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	e012      	b.n	8001d70 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <VL53L1CB_Probe+0x108>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4912      	ldr	r1, [pc, #72]	; (8001d9c <VL53L1CB_Probe+0x110>)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d58:	4911      	ldr	r1, [pc, #68]	; (8001da0 <VL53L1CB_Probe+0x114>)
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4798      	blx	r3
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d64:	f06f 0304 	mvn.w	r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e001      	b.n	8001d70 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	08000e91 	.word	0x08000e91
 8001d80:	08000f0d 	.word	0x08000f0d
 8001d84:	08000f5d 	.word	0x08000f5d
 8001d88:	08000fb1 	.word	0x08000fb1
 8001d8c:	08001005 	.word	0x08001005
 8001d90:	200005a0 	.word	0x200005a0
 8001d94:	2000058c 	.word	0x2000058c
 8001d98:	20000038 	.word	0x20000038
 8001d9c:	20000580 	.word	0x20000580
 8001da0:	20000590 	.word	0x20000590

08001da4 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001db0:	793b      	ldrb	r3, [r7, #4]
 8001db2:	2b0f      	cmp	r3, #15
 8001db4:	d808      	bhi.n	8001dc8 <CheckValidRectRoi+0x24>
 8001db6:	797b      	ldrb	r3, [r7, #5]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d805      	bhi.n	8001dc8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	d802      	bhi.n	8001dc8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d901      	bls.n	8001dcc <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001dc8:	23fc      	movs	r3, #252	; 0xfc
 8001dca:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001dcc:	793a      	ldrb	r2, [r7, #4]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d803      	bhi.n	8001ddc <CheckValidRectRoi+0x38>
 8001dd4:	797a      	ldrb	r2, [r7, #5]
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d201      	bcs.n	8001de0 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ddc:	23fc      	movs	r3, #252	; 0xfc
 8001dde:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3318      	adds	r3, #24
 8001e04:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001e0c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	2101      	movs	r1, #1
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f012 fd7d 	bl	8014918 <VL53L1_WrByte>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001e52:	2101      	movs	r1, #1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f002 fc56 	bl	8004706 <VL53L1_data_init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3318      	adds	r3, #24
 8001e6a:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001e72:	3308      	adds	r3, #8
 8001e74:	220c      	movs	r2, #12
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f017 fcb3 	bl	80197e4 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	73bb      	strb	r3, [r7, #14]
 8001e96:	e012      	b.n	8001ebe <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d112      	bne.n	8001ec6 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fc90 	bl	80027ce <VL53L1_SetLimitCheckEnable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	73bb      	strb	r3, [r7, #14]
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d9e9      	bls.n	8001e98 <VL53L1_DataInit+0x5a>
 8001ec4:	e000      	b.n	8001ec8 <VL53L1_DataInit+0x8a>
		else
			break;
 8001ec6:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f005 faef 	bl	80074b6 <VL53L1_set_dmax_mode>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001efa:	2203      	movs	r2, #3
 8001efc:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001f00:	2320      	movs	r3, #32
 8001f02:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7bba      	ldrb	r2, [r7, #14]
 8001f08:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f947 	bl	80021a0 <VL53L1_SetPresetMode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001f16:	2102      	movs	r1, #2
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f98b 	bl	8002234 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 fe69 	bl	8003c04 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001f4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f011 ffa1 	bl	8013e96 <VL53L1_poll_for_boot_completion>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	603a      	str	r2, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	460b      	mov	r3, r1
 8001f72:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <ComputeDevicePresetMode+0x138>)
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	8019      	strh	r1, [r3, #0]
 8001f84:	3302      	adds	r3, #2
 8001f86:	0c12      	lsrs	r2, r2, #16
 8001f88:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001f8a:	4a45      	ldr	r2, [pc, #276]	; (80020a0 <ComputeDevicePresetMode+0x13c>)
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4611      	mov	r1, r2
 8001f94:	8019      	strh	r1, [r3, #0]
 8001f96:	3302      	adds	r3, #2
 8001f98:	0c12      	lsrs	r2, r2, #16
 8001f9a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <ComputeDevicePresetMode+0x140>)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	8019      	strh	r1, [r3, #0]
 8001fa8:	3302      	adds	r3, #2
 8001faa:	0c12      	lsrs	r2, r2, #16
 8001fac:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <ComputeDevicePresetMode+0x144>)
 8001fb0:	f107 030c 	add.w	r3, r7, #12
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	8019      	strh	r1, [r3, #0]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	0c12      	lsrs	r2, r2, #16
 8001fbe:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <ComputeDevicePresetMode+0x148>)
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	8019      	strh	r1, [r3, #0]
 8001fcc:	3302      	adds	r3, #2
 8001fce:	0c12      	lsrs	r2, r2, #16
 8001fd0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001fd8:	79bb      	ldrb	r3, [r7, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d002      	beq.n	8001fe4 <ComputeDevicePresetMode+0x80>
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <ComputeDevicePresetMode+0x86>
 8001fe2:	e005      	b.n	8001ff0 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77bb      	strb	r3, [r7, #30]
		break;
 8001fe8:	e004      	b.n	8001ff4 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	77bb      	strb	r3, [r7, #30]
		break;
 8001fee:	e001      	b.n	8001ff4 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d845      	bhi.n	8002088 <ComputeDevicePresetMode+0x124>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <ComputeDevicePresetMode+0xa0>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002039 	.word	0x08002039
 8002008:	08002049 	.word	0x08002049
 800200c:	08002059 	.word	0x08002059
 8002010:	08002029 	.word	0x08002029
 8002014:	08002089 	.word	0x08002089
 8002018:	08002089 	.word	0x08002089
 800201c:	08002079 	.word	0x08002079
 8002020:	08002069 	.word	0x08002069
 8002024:	08002081 	.word	0x08002081
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8002028:	7fbb      	ldrb	r3, [r7, #30]
 800202a:	3320      	adds	r3, #32
 800202c:	443b      	add	r3, r7
 800202e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	701a      	strb	r2, [r3, #0]
		break;
 8002036:	e029      	b.n	800208c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8002038:	7fbb      	ldrb	r3, [r7, #30]
 800203a:	3320      	adds	r3, #32
 800203c:	443b      	add	r3, r7
 800203e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	701a      	strb	r2, [r3, #0]
		break;
 8002046:	e021      	b.n	800208c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8002048:	7fbb      	ldrb	r3, [r7, #30]
 800204a:	3320      	adds	r3, #32
 800204c:	443b      	add	r3, r7
 800204e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	701a      	strb	r2, [r3, #0]
		break;
 8002056:	e019      	b.n	800208c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8002058:	7fbb      	ldrb	r3, [r7, #30]
 800205a:	3320      	adds	r3, #32
 800205c:	443b      	add	r3, r7
 800205e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	701a      	strb	r2, [r3, #0]
		break;
 8002066:	e011      	b.n	800208c <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8002068:	7fbb      	ldrb	r3, [r7, #30]
 800206a:	3320      	adds	r3, #32
 800206c:	443b      	add	r3, r7
 800206e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	701a      	strb	r2, [r3, #0]
		break;
 8002076:	e009      	b.n	800208c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2211      	movs	r2, #17
 800207c:	701a      	strb	r2, [r3, #0]
		break;
 800207e:	e005      	b.n	800208c <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2227      	movs	r2, #39	; 0x27
 8002084:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8002086:	e001      	b.n	800208c <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002088:	23f8      	movs	r3, #248	; 0xf8
 800208a:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 800208c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3724      	adds	r7, #36	; 0x24
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	0801abb8 	.word	0x0801abb8
 80020a0:	0801abbc 	.word	0x0801abbc
 80020a4:	0801abc0 	.word	0x0801abc0
 80020a8:	0801abc4 	.word	0x0801abc4
 80020ac:	0801abc8 	.word	0x0801abc8

080020b0 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b08e      	sub	sp, #56	; 0x38
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	72fb      	strb	r3, [r7, #11]
 80020be:	4613      	mov	r3, r2
 80020c0:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d002      	beq.n	80020e4 <SetPresetMode+0x34>
 80020de:	7afb      	ldrb	r3, [r7, #11]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d103      	bne.n	80020ec <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80020e4:	2340      	movs	r3, #64	; 0x40
 80020e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ea:	e002      	b.n	80020f2 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80020ec:	2320      	movs	r3, #32
 80020ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80020f2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80020f6:	7ab9      	ldrb	r1, [r7, #10]
 80020f8:	7afb      	ldrb	r3, [r7, #11]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff32 	bl	8001f64 <ComputeDevicePresetMode>
 8002100:	4603      	mov	r3, r0
 8002102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8002106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800210a:	2b00      	cmp	r3, #0
 800210c:	d112      	bne.n	8002134 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800210e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002112:	f107 001c 	add.w	r0, r7, #28
 8002116:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f107 0318 	add.w	r3, r7, #24
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4603      	mov	r3, r0
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f002 ffaf 	bl	800508c <VL53L1_get_preset_mode_timing_cfg>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8002134:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002138:	2b00      	cmp	r3, #0
 800213a:	d112      	bne.n	8002162 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800213c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002140:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8002142:	69fd      	ldr	r5, [r7, #28]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	9102      	str	r1, [sp, #8]
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	462b      	mov	r3, r5
 8002152:	4622      	mov	r2, r4
 8002154:	4601      	mov	r1, r0
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f003 f8ee 	bl	8005338 <VL53L1_set_preset_mode>
 800215c:	4603      	mov	r3, r0
 800215e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8002162:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002170:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8002172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002180:	461a      	mov	r2, r3
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8002194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002198:	4618      	mov	r0, r3
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bdb0      	pop	{r4, r5, r7, pc}

080021a0 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80021b0:	2303      	movs	r3, #3
 80021b2:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f00c f94a 	bl	800e44e <VL53L1_low_power_auto_data_init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d101      	bne.n	80021c8 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 80021c8:	7bba      	ldrb	r2, [r7, #14]
 80021ca:	78f9      	ldrb	r1, [r7, #3]
 80021cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff6d 	bl	80020b0 <SetPresetMode>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d117      	bne.n	8002212 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d005      	beq.n	80021f4 <VL53L1_SetPresetMode+0x54>
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d002      	beq.n	80021f4 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d107      	bne.n	8002204 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80021f4:	f24a 0128 	movw	r1, #41000	; 0xa028
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8a9 	bl	8002350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80021fe:	4603      	mov	r3, r0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e006      	b.n	8002212 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002204:	f248 2135 	movw	r1, #33333	; 0x8235
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f8a1 	bl	8002350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800220e:	4603      	mov	r3, r0
 8002210:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800221a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fa68 	bl	80026f4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002224:	4603      	mov	r3, r0
 8002226:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0a2      	sub	sp, #136	; 0x88
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002258:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800225c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8002260:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002264:	2b09      	cmp	r3, #9
 8002266:	d105      	bne.n	8002274 <VL53L1_SetDistanceMode+0x40>
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d002      	beq.n	8002274 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 800226e:	f06f 0303 	mvn.w	r3, #3
 8002272:	e069      	b.n	8002348 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d008      	beq.n	800228c <VL53L1_SetDistanceMode+0x58>
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d005      	beq.n	800228c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d002      	beq.n	800228c <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8002286:	f06f 0303 	mvn.w	r3, #3
 800228a:	e05d      	b.n	8002348 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 800228c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	4619      	mov	r1, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f002 fede 	bl	800505c <VL53L1_get_zone_config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80022ae:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80022b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80022be:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f002 fd8a 	bl	8004ddc <VL53L1_get_timeouts_us>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80022ce:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10a      	bne.n	80022ec <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80022dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fee5 	bl	80020b0 <SetPresetMode>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80022ec:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022fa:	461a      	mov	r2, r3
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002302:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800230a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800230c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800230e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f002 fd2a 	bl	8004d6a <VL53L1_set_timeouts_us>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800231c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002324:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800232a:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800232e:	2b00      	cmp	r3, #0
 8002330:	d108      	bne.n	8002344 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f002 fe4c 	bl	8004fd6 <VL53L1_set_zone_config>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8002344:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8002348:	4618      	mov	r0, r3
 800234a:	3788      	adds	r7, #136	; 0x88
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002374:	4b75      	ldr	r3, [pc, #468]	; (800254c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8002376:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d902      	bls.n	8002386 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002380:	23fc      	movs	r3, #252	; 0xfc
 8002382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8002386:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800238e:	f107 031a 	add.w	r3, r7, #26
 8002392:	461a      	mov	r2, r3
 8002394:	2105      	movs	r1, #5
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fb9a 	bl	8002ad0 <VL53L1_GetSequenceStepEnable>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80023a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80023aa:	f107 0319 	add.w	r3, r7, #25
 80023ae:	461a      	mov	r2, r3
 80023b0:	2106      	movs	r1, #6
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fb8c 	bl	8002ad0 <VL53L1_GetSequenceStepEnable>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80023be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	f107 0210 	add.w	r2, r7, #16
 80023ce:	f107 010c 	add.w	r1, r7, #12
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f002 fd02 	bl	8004ddc <VL53L1_get_timeouts_us>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80023de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 80a0 	bne.w	8002528 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023ee:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80023f2:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 80023fc:	7efb      	ldrb	r3, [r7, #27]
 80023fe:	3b01      	subs	r3, #1
 8002400:	2b08      	cmp	r3, #8
 8002402:	d861      	bhi.n	80024c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8002404:	a201      	add	r2, pc, #4	; (adr r2, 800240c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	080024b1 	.word	0x080024b1
 8002410:	080024b1 	.word	0x080024b1
 8002414:	0800244d 	.word	0x0800244d
 8002418:	08002431 	.word	0x08002431
 800241c:	080024c9 	.word	0x080024c9
 8002420:	080024c9 	.word	0x080024c9
 8002424:	080024bd 	.word	0x080024bd
 8002428:	08002473 	.word	0x08002473
 800242c:	080024b1 	.word	0x080024b1
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002430:	7ebb      	ldrb	r3, [r7, #26]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d002      	beq.n	800243c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8002436:	7e7b      	ldrb	r3, [r7, #25]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d103      	bne.n	8002444 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 800243c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8002442:	e044      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8002444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800244a:	e040      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002452:	7ebb      	ldrb	r3, [r7, #26]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d002      	beq.n	800245e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8002458:	7e7b      	ldrb	r3, [r7, #25]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d103      	bne.n	8002466 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 800245e:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
 8002464:	e002      	b.n	800246c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8002466:	f245 4360 	movw	r3, #21600	; 0x5460
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800246c:	2302      	movs	r3, #2
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002470:	e02d      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002478:	23f5      	movs	r3, #245	; 0xf5
 800247a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	461a      	mov	r2, r3
 8002482:	f248 0188 	movw	r1, #32904	; 0x8088
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f005 f88c 	bl	80075a4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	dd07      	ble.n	80024a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	22f5      	movs	r2, #245	; 0xf5
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	4413      	add	r3, r2
 80024a0:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80024aa:	2302      	movs	r3, #2
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80024ae:	e00e      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80024b0:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80024b6:	2306      	movs	r3, #6
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80024ba:	e008      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80024c2:	3308      	adds	r3, #8
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024c6:	e002      	b.n	80024ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80024c8:	23f8      	movs	r3, #248	; 0xf8
 80024ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d803      	bhi.n	80024de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80024d6:	23fc      	movs	r3, #252	; 0xfc
 80024d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024dc:	e003      	b.n	80024e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80024e4:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80024e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11c      	bne.n	8002528 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d203      	bcs.n	80024fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80024f6:	23fc      	movs	r3, #252	; 0xfc
 80024f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024fc:	e00d      	b.n	800251a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f002 fc2b 	bl	8004d6a <VL53L1_set_timeouts_us>
 8002514:	4603      	mov	r3, r0
 8002516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800251a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8002528:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002536:	461a      	mov	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800253e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002542:	4618      	mov	r0, r3
 8002544:	3730      	adds	r7, #48	; 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	00086470 	.word	0x00086470
 8002550:	00989680 	.word	0x00989680

08002554 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08c      	sub	sp, #48	; 0x30
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8002582:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800258a:	f107 031b 	add.w	r3, r7, #27
 800258e:	461a      	mov	r2, r3
 8002590:	2105      	movs	r1, #5
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa9c 	bl	8002ad0 <VL53L1_GetSequenceStepEnable>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 800259e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80025a6:	f107 031a 	add.w	r3, r7, #26
 80025aa:	461a      	mov	r2, r3
 80025ac:	2106      	movs	r1, #6
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa8e 	bl	8002ad0 <VL53L1_GetSequenceStepEnable>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80025ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	f107 0214 	add.w	r2, r7, #20
 80025ca:	f107 010c 	add.w	r1, r7, #12
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f002 fc04 	bl	8004ddc <VL53L1_get_timeouts_us>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80025da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d179      	bne.n	80026d6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025e8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80025ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80025f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025f4:	3b01      	subs	r3, #1
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d869      	bhi.n	80026ce <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	080026ad 	.word	0x080026ad
 8002604:	080026ad 	.word	0x080026ad
 8002608:	08002647 	.word	0x08002647
 800260c:	08002625 	.word	0x08002625
 8002610:	080026cf 	.word	0x080026cf
 8002614:	080026cf 	.word	0x080026cf
 8002618:	080026bf 	.word	0x080026bf
 800261c:	0800266f 	.word	0x0800266f
 8002620:	080026ad 	.word	0x080026ad
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002624:	7efb      	ldrb	r3, [r7, #27]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d002      	beq.n	8002630 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 800262a:	7ebb      	ldrb	r3, [r7, #26]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002636:	3308      	adds	r3, #8
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800263a:	e04d      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002644:	e048      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d002      	beq.n	8002652 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 800264c:	7ebb      	ldrb	r3, [r7, #26]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d106      	bne.n	8002660 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002658:	3334      	adds	r3, #52	; 0x34
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800265e:	e03b      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8002666:	3330      	adds	r3, #48	; 0x30
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800266c:	e034      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800266e:	23f5      	movs	r3, #245	; 0xf5
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	461a      	mov	r2, r3
 8002678:	f248 0188 	movw	r1, #32904	; 0x8088
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 ff91 	bl	80075a4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	dd07      	ble.n	8002698 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	22f5      	movs	r2, #245	; 0xf5
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	461a      	mov	r2, r3
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	4413      	add	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 800269e:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80026aa:	e015      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80026bc:	e00c      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80026c8:	3308      	adds	r3, #8
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80026cc:	e004      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80026ce:	23f8      	movs	r3, #248	; 0xf8
 80026d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80026d4:	e000      	b.n	80026d8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80026d6:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80026d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80026e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3730      	adds	r7, #48	; 0x30
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop

080026f4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	4a09      	ldr	r2, [pc, #36]	; (8002730 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4413      	add	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f002 facc 	bl	8004cb8 <VL53L1_set_inter_measurement_period_ms>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	4619      	mov	r1, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f002 fae3 	bl	8004d14 <VL53L1_get_inter_measurement_period_ms>
 800274e:	4603      	mov	r3, r0
 8002750:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	019b      	lsls	r3, r3, #6
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800275a:	fba1 1303 	umull	r1, r3, r1, r3
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	460b      	mov	r3, r1
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <SetLimitValue+0x1e>
 8002794:	2b01      	cmp	r3, #1
 8002796:	d009      	beq.n	80027ac <SetLimitValue+0x30>
 8002798:	e011      	b.n	80027be <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0b9b      	lsrs	r3, r3, #14
 800279e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80027a0:	8abb      	ldrh	r3, [r7, #20]
 80027a2:	4619      	mov	r1, r3
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f003 f988 	bl	8005aba <VL53L1_set_lite_sigma_threshold>
		break;
 80027aa:	e00a      	b.n	80027c2 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0a5b      	lsrs	r3, r3, #9
 80027b0:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80027b2:	8abb      	ldrh	r3, [r7, #20]
 80027b4:	4619      	mov	r1, r3
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f003 f9ad 	bl	8005b16 <VL53L1_set_lite_min_count_rate>
		break;
 80027bc:	e001      	b.n	80027c2 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027be:	23fc      	movs	r3, #252	; 0xfc
 80027c0:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	807b      	strh	r3, [r7, #2]
 80027da:	4613      	mov	r3, r2
 80027dc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d902      	bls.n	80027f2 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027ec:	23fc      	movs	r3, #252	; 0xfc
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e015      	b.n	800281e <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 80027f2:	787b      	ldrb	r3, [r7, #1]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e007      	b.n	800280e <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffb1 	bl	800277c <SetLimitValue>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10e      	bne.n	8002844 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002826:	787b      	ldrb	r3, [r7, #1]
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2da      	uxtb	r2, r3
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	4611      	mov	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800283e:	3334      	adds	r3, #52	; 0x34
 8002840:	460a      	mov	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	460b      	mov	r3, r1
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002862:	897b      	ldrh	r3, [r7, #10]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d905      	bls.n	8002874 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002868:	23fc      	movs	r3, #252	; 0xfc
 800286a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e00a      	b.n	800288a <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002874:	897b      	ldrh	r3, [r7, #10]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800287e:	3334      	adds	r3, #52	; 0x34
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7dba      	ldrb	r2, [r7, #22]
 8002888:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800288a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800288e:	4618      	mov	r0, r3
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	460b      	mov	r3, r1
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <VL53L1_GetLimitCheckValue+0x22>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d00c      	beq.n	80028d4 <VL53L1_GetLimitCheckValue+0x3a>
 80028ba:	e017      	b.n	80028ec <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f003 f8e2 	bl	8005a8c <VL53L1_get_lite_sigma_threshold>
 80028c8:	4603      	mov	r3, r0
 80028ca:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80028cc:	8abb      	ldrh	r3, [r7, #20]
 80028ce:	039b      	lsls	r3, r3, #14
 80028d0:	61bb      	str	r3, [r7, #24]
		break;
 80028d2:	e00d      	b.n	80028f0 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80028d4:	f107 0316 	add.w	r3, r7, #22
 80028d8:	4619      	mov	r1, r3
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f003 f904 	bl	8005ae8 <VL53L1_get_lite_min_count_rate>
 80028e0:	4603      	mov	r3, r0
 80028e2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80028e4:	8afb      	ldrh	r3, [r7, #22]
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	61bb      	str	r3, [r7, #24]
		break;
 80028ea:	e001      	b.n	80028f0 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80028ec:	23fc      	movs	r3, #252	; 0xfc
 80028ee:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80028f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d129      	bne.n	800294c <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800291e:	3334      	adds	r3, #52	; 0x34
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e012      	b.n	800294c <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800293c:	897b      	ldrh	r3, [r7, #10]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002946:	3334      	adds	r3, #52	; 0x34
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800294c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0a0      	sub	sp, #128	; 0x80
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002974:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002978:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 800297c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8002980:	2b02      	cmp	r3, #2
 8002982:	d102      	bne.n	800298a <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 8002984:	2310      	movs	r3, #16
 8002986:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002992:	429a      	cmp	r2, r3
 8002994:	d303      	bcc.n	800299e <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800299e:	23fc      	movs	r3, #252	; 0xfc
 80029a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80029a4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d17e      	bne.n	8002aaa <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80029ac:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80029b0:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80029c2:	e06a      	b.n	8002a9a <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80029c4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	f107 0208 	add.w	r2, r7, #8
 80029d2:	3301      	adds	r3, #1
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	f7ff f9e3 	bl	8001da4 <CheckValidRectRoi>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 80029e4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d15d      	bne.n	8002aa8 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80029ec:	7abb      	ldrb	r3, [r7, #10]
 80029ee:	461a      	mov	r2, r3
 80029f0:	7a3b      	ldrb	r3, [r7, #8]
 80029f2:	4413      	add	r3, r2
 80029f4:	3301      	adds	r3, #1
					/ 2;
 80029f6:	0fda      	lsrs	r2, r3, #31
 80029f8:	4413      	add	r3, r2
 80029fa:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 80029fc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	461a      	mov	r2, r3
 8002a04:	7afb      	ldrb	r3, [r7, #11]
 8002a06:	4413      	add	r3, r2
 8002a08:	3301      	adds	r3, #1
					/ 2;
 8002a0a:	0fda      	lsrs	r2, r3, #31
 8002a0c:	4413      	add	r3, r2
 8002a0e:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002a10:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002a14:	7aba      	ldrb	r2, [r7, #10]
 8002a16:	7a3b      	ldrb	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002a1e:	7a7a      	ldrb	r2, [r7, #9]
 8002a20:	7afb      	ldrb	r3, [r7, #11]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8002a28:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d903      	bls.n	8002a38 <VL53L1_SetROI+0xe0>
 8002a30:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d803      	bhi.n	8002a40 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002a38:	23fc      	movs	r3, #252	; 0xfc
 8002a3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002a3e:	e034      	b.n	8002aaa <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002a40:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a44:	3306      	adds	r3, #6
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	3380      	adds	r3, #128	; 0x80
 8002a4a:	443b      	add	r3, r7
 8002a4c:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002a50:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002a54:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a58:	3306      	adds	r3, #6
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	3380      	adds	r3, #128	; 0x80
 8002a5e:	443b      	add	r3, r7
 8002a60:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002a64:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8002a68:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a6c:	3306      	adds	r3, #6
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	3380      	adds	r3, #128	; 0x80
 8002a72:	443b      	add	r3, r7
 8002a74:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8002a78:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 8002a7c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a80:	3306      	adds	r3, #6
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	3380      	adds	r3, #128	; 0x80
 8002a86:	443b      	add	r3, r7
 8002a88:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 8002a8c:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002a90:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002a94:	3301      	adds	r3, #1
 8002a96:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d38e      	bcc.n	80029c4 <VL53L1_SetROI+0x6c>
 8002aa6:	e000      	b.n	8002aaa <VL53L1_SetROI+0x152>
				break;
 8002aa8:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 8002aaa:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8002ab2:	f107 030c 	add.w	r3, r7, #12
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f002 fa8c 	bl	8004fd6 <VL53L1_set_zone_config>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8002ac4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3780      	adds	r7, #128	; 0x80
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f002 f9e3 	bl	8004eb4 <VL53L1_get_sequence_config_bit>
 8002aee:	4603      	mov	r3, r0
 8002af0:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7edb      	ldrb	r3, [r3, #27]
 8002b16:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d002      	beq.n	8002b24 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f001 fc8e 	bl	8004440 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002b24:	2300      	movs	r3, #0
 8002b26:	77bb      	strb	r3, [r7, #30]
 8002b28:	e01a      	b.n	8002b60 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002b2a:	7fbb      	ldrb	r3, [r7, #30]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002b32:	330c      	adds	r3, #12
 8002b34:	2100      	movs	r1, #0
 8002b36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002b3a:	7fbb      	ldrb	r3, [r7, #30]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002b44:	3320      	adds	r3, #32
 8002b46:	22ff      	movs	r2, #255	; 0xff
 8002b48:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002b4a:	7fbb      	ldrb	r3, [r7, #30]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002b54:	3324      	adds	r3, #36	; 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002b5a:	7fbb      	ldrb	r3, [r7, #30]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	77bb      	strb	r3, [r7, #30]
 8002b60:	7fbb      	ldrb	r3, [r7, #30]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d9e1      	bls.n	8002b2a <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b84:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8002b88:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002b8a:	7dbb      	ldrb	r3, [r7, #22]
 8002b8c:	2b63      	cmp	r3, #99	; 0x63
 8002b8e:	dc12      	bgt.n	8002bb6 <VL53L1_StartMeasurement+0xb6>
 8002b90:	2b62      	cmp	r3, #98	; 0x62
 8002b92:	da0d      	bge.n	8002bb0 <VL53L1_StartMeasurement+0xb0>
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	dc0e      	bgt.n	8002bb6 <VL53L1_StartMeasurement+0xb6>
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	da09      	bge.n	8002bb0 <VL53L1_StartMeasurement+0xb0>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	dc02      	bgt.n	8002ba6 <VL53L1_StartMeasurement+0xa6>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	da05      	bge.n	8002bb0 <VL53L1_StartMeasurement+0xb0>
 8002ba4:	e007      	b.n	8002bb6 <VL53L1_StartMeasurement+0xb6>
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d105      	bne.n	8002bb6 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	77fb      	strb	r3, [r7, #31]
		break;
 8002bae:	e004      	b.n	8002bba <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8002bb0:	23f2      	movs	r3, #242	; 0xf2
 8002bb2:	77fb      	strb	r3, [r7, #31]
		break;
 8002bb4:	e001      	b.n	8002bba <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8002bb6:	23fd      	movs	r3, #253	; 0xfd
 8002bb8:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8002bba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11f      	bne.n	8002c02 <VL53L1_StartMeasurement+0x102>
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d11c      	bne.n	8002c02 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fcc0 	bl	8002554 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <VL53L1_StartMeasurement+0x13c>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002be4:	f107 030c 	add.w	r3, r7, #12
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fda2 	bl	8002734 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d901      	bls.n	8002c02 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002bfe:	23fc      	movs	r3, #252	; 0xfc
 8002c00:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002c02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f002 ff97 	bl	8005b44 <VL53L1_init_and_start_range>
 8002c16:	4603      	mov	r3, r0
 8002c18:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d105      	bne.n	8002c2e <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c28:	2204      	movs	r2, #4
 8002c2a:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	10624dd3 	.word	0x10624dd3

08002c40 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f003 fa47 	bl	80060e0 <VL53L1_stop_range>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7edb      	ldrb	r3, [r3, #27]
 8002c5a:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002c5c:	7bbb      	ldrb	r3, [r7, #14]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d002      	beq.n	8002c68 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 fd1a 	bl	800469c <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c76:	2203      	movs	r2, #3
 8002c78:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7edb      	ldrb	r3, [r3, #27]
 8002c98:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002c9a:	7bbb      	ldrb	r3, [r7, #14]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f003 ff4b 	bl	8006b3a <VL53L1_clear_interrupt_and_enable_next_range>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002cc2:	6839      	ldr	r1, [r7, #0]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f011 f8ac 	bl	8013e22 <VL53L1_is_new_data_ready>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	603a      	str	r2, [r7, #0]
 8002ce4:	80fb      	strh	r3, [r7, #6]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8002cea:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002cee:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002cf0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002cf4:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8002cf6:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002cfa:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002cfc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002d00:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002d02:	797b      	ldrb	r3, [r7, #5]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <GenNewPresetMode+0x34>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d012      	beq.n	8002d32 <GenNewPresetMode+0x58>
 8002d0c:	e023      	b.n	8002d56 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002d0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dd03      	ble.n	8002d20 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002d1e:	e02c      	b.n	8002d7a <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002d20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d24:	89bb      	ldrh	r3, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	dd27      	ble.n	8002d7a <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
		break;
 8002d30:	e023      	b.n	8002d7a <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	dd03      	ble.n	8002d44 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002d42:	e01c      	b.n	8002d7e <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002d44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	da17      	bge.n	8002d7e <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
		break;
 8002d54:	e013      	b.n	8002d7e <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002d56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d5a:	89fb      	ldrh	r3, [r7, #14]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	da03      	bge.n	8002d68 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002d66:	e00c      	b.n	8002d82 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002d68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	da07      	bge.n	8002d82 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
		break;
 8002d78:	e003      	b.n	8002d82 <GenNewPresetMode+0xa8>
		break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <GenNewPresetMode+0xaa>
		break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <GenNewPresetMode+0xaa>
		break;
 8002d82:	bf00      	nop
	}
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	7ddb      	ldrb	r3, [r3, #23]
 8002da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002da8:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <CheckAndChangeDistanceMode+0xbc>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3318      	adds	r3, #24
 8002db2:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002db8:	2bff      	cmp	r3, #255	; 0xff
 8002dba:	d042      	beq.n	8002e42 <CheckAndChangeDistanceMode+0xb2>
 8002dbc:	2bff      	cmp	r3, #255	; 0xff
 8002dbe:	dc07      	bgt.n	8002dd0 <CheckAndChangeDistanceMode+0x40>
 8002dc0:	2b07      	cmp	r3, #7
 8002dc2:	dc02      	bgt.n	8002dca <CheckAndChangeDistanceMode+0x3a>
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	da3c      	bge.n	8002e42 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002dc8:	e002      	b.n	8002dd0 <CheckAndChangeDistanceMode+0x40>
 8002dca:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d938      	bls.n	8002e42 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002dd0:	bf00      	nop
	}

	DmaxValid = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002dde:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	db03      	blt.n	8002df0 <CheckAndChangeDistanceMode+0x60>
 8002de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002dfc:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002e00:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	7dfa      	ldrb	r2, [r7, #23]
 8002e06:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002e08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002e16:	7df9      	ldrb	r1, [r7, #23]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff5d 	bl	8002cda <GenNewPresetMode>
 8002e20:	e010      	b.n	8002e44 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002e2a:	7df9      	ldrb	r1, [r7, #23]
 8002e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff51 	bl	8002cda <GenNewPresetMode>
 8002e38:	e004      	b.n	8002e44 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e000      	b.n	8002e44 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002e42:	bf00      	nop
	}
}
 8002e44:	3728      	adds	r7, #40	; 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	2000000c 	.word	0x2000000c

08002e50 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08d      	sub	sp, #52	; 0x34
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	603a      	str	r2, [r7, #0]
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002e60:	2396      	movs	r3, #150	; 0x96
 8002e62:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002e64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002e68:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002e6a:	231e      	movs	r3, #30
 8002e6c:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <ComputeRQL+0x104>)
 8002e70:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <ComputeRQL+0x108>)
 8002e74:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002e76:	f641 139a 	movw	r3, #6554	; 0x199a
 8002e7a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <ComputeRQL+0x3a>
		returnvalue = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e88:	e05b      	b.n	8002f42 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002e90:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002e98:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002e9a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	da02      	bge.n	8002ea8 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	2b07      	cmp	r3, #7
 8002ea6:	d103      	bne.n	8002eb0 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002ea8:	2332      	movs	r3, #50	; 0x32
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eae:	e048      	b.n	8002f42 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002eb6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dd03      	ble.n	8002ec6 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002ebe:	8c3b      	ldrh	r3, [r7, #32]
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec4:	e007      	b.n	8002ed6 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002ecc:	461a      	mov	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d804      	bhi.n	8002f16 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f14:	e006      	b.n	8002f24 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002f16:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1c:	e002      	b.n	8002f24 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002f1e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b32      	cmp	r3, #50	; 0x32
 8002f2e:	d905      	bls.n	8002f3c <ComputeRQL+0xec>
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	bf28      	it	cs
 8002f36:	2364      	movcs	r3, #100	; 0x64
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	e000      	b.n	8002f3e <ComputeRQL+0xee>
 8002f3c:	2332      	movs	r3, #50	; 0x32
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3734      	adds	r7, #52	; 0x34
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	0075b333 	.word	0x0075b333
 8002f58:	0030cccd 	.word	0x0030cccd

08002f5c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	3b04      	subs	r3, #4
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d83d      	bhi.n	8002fea <ConvertStatusLite+0x8e>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <ConvertStatusLite+0x18>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fc7 	.word	0x08002fc7
 8002f78:	08002fc1 	.word	0x08002fc1
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08002fd3 	.word	0x08002fd3
 8002f84:	08002fdf 	.word	0x08002fdf
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08002feb 	.word	0x08002feb
 8002f90:	08002feb 	.word	0x08002feb
 8002f94:	08002fd9 	.word	0x08002fd9
 8002f98:	08002feb 	.word	0x08002feb
 8002f9c:	08002feb 	.word	0x08002feb
 8002fa0:	08002feb 	.word	0x08002feb
 8002fa4:	08002feb 	.word	0x08002feb
 8002fa8:	08002feb 	.word	0x08002feb
 8002fac:	08002fb5 	.word	0x08002fb5
 8002fb0:	08002fbb 	.word	0x08002fbb
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	73fb      	strb	r3, [r7, #15]
		break;
 8002fb8:	e019      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002fba:	2306      	movs	r3, #6
 8002fbc:	73fb      	strb	r3, [r7, #15]
		break;
 8002fbe:	e016      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fc4:	e013      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	73fb      	strb	r3, [r7, #15]
		break;
 8002fca:	e010      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
		break;
 8002fd0:	e00d      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002fd2:	2307      	movs	r3, #7
 8002fd4:	73fb      	strb	r3, [r7, #15]
		break;
 8002fd6:	e00a      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002fd8:	2309      	movs	r3, #9
 8002fda:	73fb      	strb	r3, [r7, #15]
		break;
 8002fdc:	e007      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
		break;
 8002fe2:	e004      	b.n	8002fee <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
		break;
 8002fe8:	e001      	b.n	8002fee <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002fea:	23ff      	movs	r3, #255	; 0xff
 8002fec:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	3b05      	subs	r3, #5
 800300a:	2b12      	cmp	r3, #18
 800300c:	d840      	bhi.n	8003090 <ConvertStatusHisto+0x94>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <ConvertStatusHisto+0x18>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003061 	.word	0x08003061
 8003018:	08003067 	.word	0x08003067
 800301c:	08003073 	.word	0x08003073
 8003020:	08003091 	.word	0x08003091
 8003024:	0800308b 	.word	0x0800308b
 8003028:	08003091 	.word	0x08003091
 800302c:	08003091 	.word	0x08003091
 8003030:	08003091 	.word	0x08003091
 8003034:	08003091 	.word	0x08003091
 8003038:	08003091 	.word	0x08003091
 800303c:	08003091 	.word	0x08003091
 8003040:	08003091 	.word	0x08003091
 8003044:	08003091 	.word	0x08003091
 8003048:	08003091 	.word	0x08003091
 800304c:	0800306d 	.word	0x0800306d
 8003050:	0800307f 	.word	0x0800307f
 8003054:	08003091 	.word	0x08003091
 8003058:	08003085 	.word	0x08003085
 800305c:	08003079 	.word	0x08003079
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8003060:	2304      	movs	r3, #4
 8003062:	73fb      	strb	r3, [r7, #15]
		break;
 8003064:	e016      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
		break;
 800306a:	e013      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800306c:	2306      	movs	r3, #6
 800306e:	73fb      	strb	r3, [r7, #15]
		break;
 8003070:	e010      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8003072:	2307      	movs	r3, #7
 8003074:	73fb      	strb	r3, [r7, #15]
		break;
 8003076:	e00d      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8003078:	230c      	movs	r3, #12
 800307a:	73fb      	strb	r3, [r7, #15]
		break;
 800307c:	e00a      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 800307e:	2307      	movs	r3, #7
 8003080:	73fb      	strb	r3, [r7, #15]
		break;
 8003082:	e007      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8003084:	230b      	movs	r3, #11
 8003086:	73fb      	strb	r3, [r7, #15]
		break;
 8003088:	e004      	b.n	8003094 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
		break;
 800308e:	e001      	b.n	8003094 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003090:	23ff      	movs	r3, #255	; 0xff
 8003092:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b092      	sub	sp, #72	; 0x48
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	70fb      	strb	r3, [r7, #3]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70bb      	strb	r3, [r7, #2]
 80030ba:	4613      	mov	r3, r2
 80030bc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3318      	adds	r3, #24
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80030d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 80030e4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff feaf 	bl	8002e50 <ComputeRQL>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f8:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80030fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80030fe:	025b      	lsls	r3, r3, #9
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8003102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003106:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800310c:	025b      	lsls	r3, r3, #9
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003114:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003118:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800311a:	025b      	lsls	r3, r3, #9
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800311e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003122:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 800312e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003130:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8003134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003136:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	2200      	movs	r2, #0
 8003146:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8003148:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800314c:	2b11      	cmp	r3, #17
 800314e:	d009      	beq.n	8003164 <SetTargetData+0xc0>
 8003150:	2b11      	cmp	r3, #17
 8003152:	dc0f      	bgt.n	8003174 <SetTargetData+0xd0>
 8003154:	2b03      	cmp	r3, #3
 8003156:	dc02      	bgt.n	800315e <SetTargetData+0xba>
 8003158:	2b00      	cmp	r3, #0
 800315a:	dc03      	bgt.n	8003164 <SetTargetData+0xc0>
 800315c:	e00a      	b.n	8003174 <SetTargetData+0xd0>
 800315e:	2b0d      	cmp	r3, #13
 8003160:	d004      	beq.n	800316c <SetTargetData+0xc8>
 8003162:	e007      	b.n	8003174 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8003164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003166:	2205      	movs	r2, #5
 8003168:	75da      	strb	r2, [r3, #23]
		break;
 800316a:	e006      	b.n	800317a <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800316c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800316e:	220d      	movs	r2, #13
 8003170:	75da      	strb	r2, [r3, #23]
		break;
 8003172:	e002      	b.n	800317a <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8003174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003176:	2200      	movs	r2, #0
 8003178:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800317a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317c:	7ddb      	ldrb	r3, [r3, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d117      	bne.n	80031b2 <SetTargetData+0x10e>
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d114      	bne.n	80031b2 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 800318e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8003194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 800319a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800319c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80031a0:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 80031a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80031a8:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 80031aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ac:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80031b0:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80031b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b4:	7ddb      	ldrb	r3, [r3, #23]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d125      	bne.n	8003206 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031c0:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d007      	beq.n	80031e0 <SetTargetData+0x13c>
 80031d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d003      	beq.n	80031e0 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d109      	bne.n	80031f4 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 80031e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff09 	bl	8002ffc <ConvertStatusHisto>
 80031ea:	4603      	mov	r3, r0
 80031ec:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80031ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f0:	75da      	strb	r2, [r3, #23]
 80031f2:	e008      	b.n	8003206 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80031f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff feaf 	bl	8002f5c <ConvertStatusLite>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003204:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003208:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800320a:	025b      	lsls	r3, r3, #9
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003214:	461a      	mov	r2, r3
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800321c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003220:	025b      	lsls	r3, r3, #9
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800322a:	461a      	mov	r2, r3
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	461a      	mov	r2, r3
 8003238:	2100      	movs	r1, #0
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff fb2d 	bl	800289a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8003240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003244:	2b06      	cmp	r3, #6
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800324e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8003252:	f107 0315 	add.w	r3, r7, #21
 8003256:	461a      	mov	r2, r3
 8003258:	2100      	movs	r1, #0
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff faf8 	bl	8002850 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8003260:	7d7b      	ldrb	r3, [r7, #21]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <SetTargetData+0x1ce>
 8003266:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <SetTargetData+0x1ce>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <SetTargetData+0x1d0>
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800327e:	461a      	mov	r2, r3
 8003280:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003284:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	461a      	mov	r2, r3
 800328e:	2101      	movs	r1, #1
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fb02 	bl	800289a <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8003296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80032a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 80032a8:	f107 0315 	add.w	r3, r7, #21
 80032ac:	461a      	mov	r2, r3
 80032ae:	2101      	movs	r1, #1
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff facd 	bl	8002850 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80032b6:	7d7b      	ldrb	r3, [r7, #21]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <SetTargetData+0x224>
 80032bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <SetTargetData+0x224>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <SetTargetData+0x226>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032d4:	461a      	mov	r2, r3
 80032d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032da:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80032de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e0:	8a9b      	ldrh	r3, [r3, #20]
 80032e2:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80032e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e6:	7ddb      	ldrb	r3, [r3, #23]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d110      	bne.n	800330e <SetTargetData+0x26a>
 80032ec:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da0c      	bge.n	800330e <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80032f4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80032f8:	4ba3      	ldr	r3, [pc, #652]	; (8003588 <SetTargetData+0x4e4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	da03      	bge.n	8003308 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8003300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003302:	220e      	movs	r2, #14
 8003304:	75da      	strb	r2, [r3, #23]
 8003306:	e002      	b.n	800330e <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800330a:	2200      	movs	r2, #0
 800330c:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	461a      	mov	r2, r3
 8003314:	f248 01be 	movw	r1, #32958	; 0x80be
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f004 f943 	bl	80075a4 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8003322:	787b      	ldrb	r3, [r7, #1]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332a:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003332:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	220c      	movs	r2, #12
 800333e:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	461a      	mov	r2, r3
 8003346:	f248 0191 	movw	r1, #32913	; 0x8091
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f004 f92a 	bl	80075a4 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003350:	78bb      	ldrb	r3, [r7, #2]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 800335e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003360:	8a9b      	ldrh	r3, [r3, #20]
 8003362:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800336a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336c:	2200      	movs	r2, #0
 800336e:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d106      	bne.n	8003384 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800337c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8250 	beq.w	8003830 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8003390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003392:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8003394:	2b07      	cmp	r3, #7
 8003396:	d004      	beq.n	80033a2 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8003398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339a:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 800339c:	2b04      	cmp	r3, #4
 800339e:	f040 8247 	bne.w	8003830 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80033a2:	787b      	ldrb	r3, [r7, #1]
 80033a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033ac:	3320      	adds	r3, #32
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	d01c      	beq.n	80033ee <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033be:	3320      	adds	r3, #32
 80033c0:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d013      	beq.n	80033ee <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80033c6:	787b      	ldrb	r3, [r7, #1]
 80033c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033d0:	3320      	adds	r3, #32
 80033d2:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 822b 	bne.w	8003830 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80033da:	787b      	ldrb	r3, [r7, #1]
 80033dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033de:	4413      	add	r3, r2
 80033e0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80033e4:	3324      	adds	r3, #36	; 0x24
 80033e6:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	f040 8221 	bne.w	8003830 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 80033ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80033f4:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80033f8:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003400:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003402:	429a      	cmp	r2, r3
 8003404:	d00c      	beq.n	8003420 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800340c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003410:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003418:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800341a:	429a      	cmp	r2, r3
 800341c:	f040 81dc 	bne.w	80037d8 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003422:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003426:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800342c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003430:	330c      	adds	r3, #12
 8003432:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003436:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b21      	cmp	r3, #33	; 0x21
 800344a:	d008      	beq.n	800345e <SetTargetData+0x3ba>
 800344c:	2b21      	cmp	r3, #33	; 0x21
 800344e:	f300 81bf 	bgt.w	80037d0 <SetTargetData+0x72c>
 8003452:	2b1b      	cmp	r3, #27
 8003454:	f000 8113 	beq.w	800367e <SetTargetData+0x5da>
 8003458:	2b1e      	cmp	r3, #30
 800345a:	d004      	beq.n	8003466 <SetTargetData+0x3c2>
 800345c:	e1b8      	b.n	80037d0 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003464:	e1b9      	b.n	80037da <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800346c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003470:	429a      	cmp	r2, r3
 8003472:	dd0f      	ble.n	8003494 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800347a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800347e:	429a      	cmp	r2, r3
 8003480:	da08      	bge.n	8003494 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003482:	7efb      	ldrb	r3, [r7, #27]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800348e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003492:	e0f3      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8003494:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800349e:	425b      	negs	r3, r3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	da10      	bge.n	80034c6 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80034a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80034ae:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dd08      	ble.n	80034c6 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80034b4:	7efb      	ldrb	r3, [r7, #27]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80034c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034c4:	e0da      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80034cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	dd0f      	ble.n	80034f4 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80034da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034de:	429a      	cmp	r2, r3
 80034e0:	da08      	bge.n	80034f4 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80034e2:	7efb      	ldrb	r3, [r7, #27]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80034ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034f2:	e0c3      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 80034f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fa:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80034fe:	425b      	negs	r3, r3
 8003500:	429a      	cmp	r2, r3
 8003502:	da10      	bge.n	8003526 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003504:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 800350e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003510:	429a      	cmp	r2, r3
 8003512:	dd08      	ble.n	8003526 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800351a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003520:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003524:	e0aa      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 800352c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003530:	429a      	cmp	r2, r3
 8003532:	dd0f      	ble.n	8003554 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800353a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800353e:	429a      	cmp	r2, r3
 8003540:	da08      	bge.n	8003554 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003542:	7efb      	ldrb	r3, [r7, #27]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800354e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003552:	e093      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003554:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 800355e:	425b      	negs	r3, r3
 8003560:	429a      	cmp	r2, r3
 8003562:	da13      	bge.n	800358c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800356e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003570:	429a      	cmp	r2, r3
 8003572:	dd0b      	ble.n	800358c <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003574:	7efb      	ldrb	r3, [r7, #27]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8003580:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003584:	e07a      	b.n	800367c <SetTargetData+0x5d8>
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003596:	429a      	cmp	r2, r3
 8003598:	dd0f      	ble.n	80035ba <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80035a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	da08      	bge.n	80035ba <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80035a8:	7efb      	ldrb	r3, [r7, #27]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80035b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035b8:	e060      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80035ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80035c4:	425b      	negs	r3, r3
 80035c6:	429a      	cmp	r2, r3
 80035c8:	da10      	bge.n	80035ec <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80035ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80035d4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dd08      	ble.n	80035ec <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80035da:	7efb      	ldrb	r3, [r7, #27]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80035e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035ea:	e047      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 80035f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	da0c      	bge.n	8003614 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003600:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003604:	429a      	cmp	r2, r3
 8003606:	dd05      	ble.n	8003614 <SetTargetData+0x570>
					AddOffset =
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800360e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003612:	e033      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800361a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800361e:	429a      	cmp	r2, r3
 8003620:	dd0f      	ble.n	8003642 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800362c:	429a      	cmp	r2, r3
 800362e:	da08      	bge.n	8003642 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003630:	7efb      	ldrb	r3, [r7, #27]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d105      	bne.n	8003642 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800363c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003640:	e01c      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003642:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800364c:	425b      	negs	r3, r3
 800364e:	429a      	cmp	r2, r3
 8003650:	da10      	bge.n	8003674 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800365c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800365e:	429a      	cmp	r2, r3
 8003660:	dd08      	ble.n	8003674 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003662:	7efb      	ldrb	r3, [r7, #27]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800366e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003672:	e003      	b.n	800367c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800367a:	e0ae      	b.n	80037da <SetTargetData+0x736>
 800367c:	e0ad      	b.n	80037da <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8003684:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003688:	429a      	cmp	r2, r3
 800368a:	dd0f      	ble.n	80036ac <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8003692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003696:	429a      	cmp	r2, r3
 8003698:	da08      	bge.n	80036ac <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800369a:	7efb      	ldrb	r3, [r7, #27]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80036a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036aa:	e090      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80036ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80036b6:	425b      	negs	r3, r3
 80036b8:	429a      	cmp	r2, r3
 80036ba:	da10      	bge.n	80036de <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80036bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80036c6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dd08      	ble.n	80036de <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80036cc:	7efb      	ldrb	r3, [r7, #27]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80036d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036dc:	e077      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 80036e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dd0f      	ble.n	800370c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80036f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	da08      	bge.n	800370c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8003706:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800370a:	e060      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800370c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003716:	425b      	negs	r3, r3
 8003718:	429a      	cmp	r2, r3
 800371a:	da10      	bge.n	800373e <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800371c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8003726:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003728:	429a      	cmp	r2, r3
 800372a:	dd08      	ble.n	800373e <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800372c:	7efb      	ldrb	r3, [r7, #27]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8003738:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800373c:	e047      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8003744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003748:	429a      	cmp	r2, r3
 800374a:	da0c      	bge.n	8003766 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003756:	429a      	cmp	r2, r3
 8003758:	dd05      	ble.n	8003766 <SetTargetData+0x6c2>
					AddOffset =
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003760:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003764:	e033      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800376c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003770:	429a      	cmp	r2, r3
 8003772:	dd0f      	ble.n	8003794 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800377a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800377e:	429a      	cmp	r2, r3
 8003780:	da08      	bge.n	8003794 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003782:	7efb      	ldrb	r3, [r7, #27]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800378e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003792:	e01c      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379a:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800379e:	425b      	negs	r3, r3
 80037a0:	429a      	cmp	r2, r3
 80037a2:	da10      	bge.n	80037c6 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80037a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80037ae:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80037b0:	429a      	cmp	r2, r3
 80037b2:	dd08      	ble.n	80037c6 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80037b4:	7efb      	ldrb	r3, [r7, #27]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80037c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037c4:	e003      	b.n	80037ce <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80037cc:	e005      	b.n	80037da <SetTargetData+0x736>
 80037ce:	e004      	b.n	80037da <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80037d6:	e000      	b.n	80037da <SetTargetData+0x736>
			}
		}
 80037d8:	bf00      	nop

		if (uwr_status) {
 80037da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d026      	beq.n	8003830 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 80037e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ee:	4413      	add	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f6:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80037f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003804:	4413      	add	r3, r2
 8003806:	b29b      	uxth	r3, r3
 8003808:	b21a      	sxth	r2, r3
 800380a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380c:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800380e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003810:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003814:	b29a      	uxth	r2, r3
 8003816:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800381a:	4413      	add	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	b21a      	sxth	r2, r3
 8003820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003822:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003826:	2201      	movs	r2, #1
 8003828:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800382a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382c:	2200      	movs	r2, #0
 800382e:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003834:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003838:	330c      	adds	r3, #12
 800383a:	8b39      	ldrh	r1, [r7, #24]
 800383c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003844:	7dd1      	ldrb	r1, [r2, #23]
 8003846:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003848:	4413      	add	r3, r2
 800384a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800384e:	3320      	adds	r3, #32
 8003850:	460a      	mov	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003858:	7e11      	ldrb	r1, [r2, #24]
 800385a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800385c:	4413      	add	r3, r2
 800385e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	460a      	mov	r2, r1
 8003866:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800386e:	461a      	mov	r2, r3
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 8003876:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800387a:	4618      	mov	r0, r3
 800387c:	3748      	adds	r7, #72	; 0x48
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b091      	sub	sp, #68	; 0x44
 8003888:	af04      	add	r7, sp, #16
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3318      	adds	r3, #24
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	7c9a      	ldrb	r2, [r3, #18]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	789a      	ldrb	r2, [r3, #2]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bfa8      	it	ge
 80038d2:	4613      	movge	r3, r2
 80038d4:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80038da:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	78da      	ldrb	r2, [r3, #3]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038f2:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	7c9b      	ldrb	r3, [r3, #18]
 8003900:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003904:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <SetMeasurementData+0x90>

		iteration = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003912:	e003      	b.n	800391c <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003914:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003918:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 800391c:	2300      	movs	r3, #0
 800391e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003922:	e048      	b.n	80039b6 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003924:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3308      	adds	r3, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8003938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800393c:	224c      	movs	r2, #76	; 0x4c
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	3310      	adds	r3, #16
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	4413      	add	r3, r2
 8003948:	3304      	adds	r3, #4
 800394a:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 800394c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003950:	2b00      	cmp	r3, #0
 8003952:	d114      	bne.n	800397e <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7918      	ldrb	r0, [r3, #4]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	7c1b      	ldrb	r3, [r3, #16]
 800395c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003960:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	9202      	str	r2, [sp, #8]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	4623      	mov	r3, r4
 8003970:	4602      	mov	r2, r0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff fb96 	bl	80030a4 <SetTargetData>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	7ddb      	ldrb	r3, [r3, #23]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10d      	bne.n	80039ac <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003996:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800399a:	429a      	cmp	r2, r3
 800399c:	da06      	bge.n	80039ac <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	8a9b      	ldrh	r3, [r3, #20]
 80039a2:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80039a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80039ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039b0:	3301      	adds	r3, #1
 80039b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80039ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3b0      	bcc.n	8003924 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039ce:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80039d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80039da:	e01f      	b.n	8003a1c <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80039dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80039e6:	330c      	adds	r3, #12
 80039e8:	2100      	movs	r1, #0
 80039ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80039ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80039fa:	3320      	adds	r3, #32
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003a0c:	3324      	adds	r3, #36	; 0x24
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a16:	3301      	adds	r3, #1
 8003a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d9db      	bls.n	80039dc <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003a24:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11b      	bne.n	8003a64 <SetMeasurementData+0x1e0>
 8003a2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d017      	beq.n	8003a64 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003a34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	3308      	adds	r3, #8
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8003a48:	2304      	movs	r3, #4
 8003a4a:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003a4c:	7efb      	ldrb	r3, [r7, #27]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	337e      	adds	r3, #126	; 0x7e
 8003a5c:	69f9      	ldr	r1, [r7, #28]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff f996 	bl	8002d90 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8003a64:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3734      	adds	r7, #52	; 0x34
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd90      	pop	{r4, r7, pc}

08003a70 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3318      	adds	r3, #24
 8003a82:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	21ff      	movs	r1, #255	; 0xff
 8003a92:	6838      	ldr	r0, [r7, #0]
 8003a94:	f015 fea6 	bl	80197e4 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f002 fc2e 	bl	80062fe <VL53L1_get_device_results>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 8003aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	d002      	beq.n	8003abc <VL53L1_GetMultiRangingData+0x4c>
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d004      	beq.n	8003ac4 <VL53L1_GetMultiRangingData+0x54>
 8003aba:	e007      	b.n	8003acc <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8003ac2:	e006      	b.n	8003ad2 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8003aca:	e002      	b.n	8003ad2 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fed4 	bl	8003884 <SetMeasurementData>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	; 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8003afa:	f240 3305 	movw	r3, #773	; 0x305
 8003afe:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3318      	adds	r3, #24
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	3348      	adds	r3, #72	; 0x48
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003b0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11c      	bne.n	8003b4e <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b1a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003b22:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8e3 	bl	8003cf4 <VL53L1_run_ref_spad_char>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003b34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe fb2c 	bl	80021a0 <VL53L1_SetPresetMode>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003b4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b52:	f113 0f1d 	cmn.w	r3, #29
 8003b56:	d14e      	bne.n	8003bf6 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8003b58:	f107 0310 	add.w	r3, r7, #16
 8003b5c:	2206      	movs	r2, #6
 8003b5e:	2128      	movs	r1, #40	; 0x28
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f00e fbf6 	bl	8012352 <VL53L1_read_nvm_raw_data>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003b6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003b74:	f107 020c 	add.w	r2, r7, #12
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2114      	movs	r1, #20
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f010 fe5f 	bl	8014840 <VL53L1_WriteMulti>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8003b88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003b90:	7b3a      	ldrb	r2, [r7, #12]
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8003b96:	7b7a      	ldrb	r2, [r7, #13]
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003b9c:	f107 0310 	add.w	r3, r7, #16
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8003ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8003bac:	2306      	movs	r3, #6
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	210d      	movs	r1, #13
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f010 fe44 	bl	8014840 <VL53L1_WriteMulti>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8003bbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d117      	bne.n	8003bf6 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	785a      	ldrb	r2, [r3, #1]
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	789a      	ldrb	r2, [r3, #2]
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	78da      	ldrb	r2, [r3, #3]
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	791a      	ldrb	r2, [r3, #4]
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	795a      	ldrb	r2, [r3, #5]
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf4:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8003bf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3740      	adds	r7, #64	; 0x40
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d84a      	bhi.n	8003cbc <VL53L1_SmudgeCorrectionEnable+0xb8>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c7d 	.word	0x08003c7d
 8003c38:	08003c9d 	.word	0x08003c9d
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f004 fbee 	bl	800841e <VL53L1_dynamic_xtalk_correction_disable>
 8003c42:	4603      	mov	r3, r0
 8003c44:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f004 fc17 	bl	800847a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f004 fc40 	bl	80084d6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003c56:	4603      	mov	r3, r0
 8003c58:	733b      	strb	r3, [r7, #12]
		break;
 8003c5a:	e032      	b.n	8003cc2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f004 fbc7 	bl	80083f0 <VL53L1_dynamic_xtalk_correction_enable>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f004 fbf0 	bl	800844c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f004 fc30 	bl	80084d6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003c76:	4603      	mov	r3, r0
 8003c78:	733b      	strb	r3, [r7, #12]
		break;
 8003c7a:	e022      	b.n	8003cc2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f004 fbb7 	bl	80083f0 <VL53L1_dynamic_xtalk_correction_enable>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f004 fbe0 	bl	800844c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f004 fc09 	bl	80084a8 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8003c96:	4603      	mov	r3, r0
 8003c98:	733b      	strb	r3, [r7, #12]
		break;
 8003c9a:	e012      	b.n	8003cc2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 fba7 	bl	80083f0 <VL53L1_dynamic_xtalk_correction_enable>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f004 fbe7 	bl	800847a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003cac:	4603      	mov	r3, r0
 8003cae:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f004 fc10 	bl	80084d6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	733b      	strb	r3, [r7, #12]
		break;
 8003cba:	e002      	b.n	8003cc2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cbc:	23fc      	movs	r3, #252	; 0xfc
 8003cbe:	73fb      	strb	r3, [r7, #15]
		break;
 8003cc0:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003cca:	7bbb      	ldrb	r3, [r7, #14]
 8003ccc:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003cd6:	7b7b      	ldrb	r3, [r7, #13]
 8003cd8:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003ce2:	7b3b      	ldrb	r3, [r7, #12]
 8003ce4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop

08003cf4 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b08c      	sub	sp, #48	; 0x30
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3318      	adds	r3, #24
 8003d06:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003d0e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003d10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f007 fc99 	bl	800b650 <VL53L1_enable_powerforce>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d117      	bne.n	8003d5a <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	7858      	ldrb	r0, [r3, #1]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	685c      	ldr	r4, [r3, #4]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	891d      	ldrh	r5, [r3, #8]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	899b      	ldrh	r3, [r3, #12]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	8952      	ldrh	r2, [r2, #10]
 8003d3e:	69b9      	ldr	r1, [r7, #24]
 8003d40:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003d44:	9102      	str	r1, [sp, #8]
 8003d46:	9201      	str	r2, [sp, #4]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	462b      	mov	r3, r5
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f009 fbda 	bl	800d50a <VL53L1_set_ref_spad_char_config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f891 	bl	8003e90 <VL53L1_run_device_test>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	2302      	movs	r3, #2
 8003d80:	21d9      	movs	r1, #217	; 0xd9
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f010 fd92 	bl	80148ac <VL53L1_ReadMulti>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003d8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003d94:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9c:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003da0:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003dac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d108      	bne.n	8003dc6 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003db4:	f107 020c 	add.w	r2, r7, #12
 8003db8:	2302      	movs	r3, #2
 8003dba:	2114      	movs	r1, #20
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f010 fd3f 	bl	8014840 <VL53L1_WriteMulti>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003dc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003dce:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003dd6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003de6:	f107 020c 	add.w	r2, r7, #12
 8003dea:	2306      	movs	r3, #6
 8003dec:	21ac      	movs	r1, #172	; 0xac
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f010 fd5c 	bl	80148ac <VL53L1_ReadMulti>
 8003df4:	4603      	mov	r3, r0
 8003df6:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003df8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003e00:	f107 020c 	add.w	r2, r7, #12
 8003e04:	2306      	movs	r3, #6
 8003e06:	210d      	movs	r1, #13
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f010 fd19 	bl	8014840 <VL53L1_WriteMulti>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d117      	bne.n	8003e4a <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003e1a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003e22:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003e2a:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003e3a:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003e42:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003e4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d00c      	beq.n	8003e76 <VL53L1_run_ref_spad_char+0x182>
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	dc0e      	bgt.n	8003e7e <VL53L1_run_ref_spad_char+0x18a>
 8003e60:	2b0e      	cmp	r3, #14
 8003e62:	d002      	beq.n	8003e6a <VL53L1_run_ref_spad_char+0x176>
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d003      	beq.n	8003e70 <VL53L1_run_ref_spad_char+0x17c>
 8003e68:	e009      	b.n	8003e7e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003e6a:	23e4      	movs	r3, #228	; 0xe4
 8003e6c:	77fb      	strb	r3, [r7, #31]
			break;
 8003e6e:	e006      	b.n	8003e7e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003e70:	23e3      	movs	r3, #227	; 0xe3
 8003e72:	77fb      	strb	r3, [r7, #31]
			break;
 8003e74:	e003      	b.n	8003e7e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003e76:	23e2      	movs	r3, #226	; 0xe2
 8003e78:	77fb      	strb	r3, [r7, #31]
			break;
 8003e7a:	e000      	b.n	8003e7e <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003e7c:	bf00      	nop



	*pcal_status = status;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7ffa      	ldrb	r2, [r7, #31]
 8003e82:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3318      	adds	r3, #24
 8003ea4:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003eb2:	f107 030b 	add.w	r3, r7, #11
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2130      	movs	r1, #48	; 0x30
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f010 fd88 	bl	80149d0 <VL53L1_RdByte>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003ecc:	7afa      	ldrb	r2, [r7, #11]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f007 fb39 	bl	800b558 <VL53L1_start_test>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f00f ff5c 	bl	8013db0 <VL53L1_wait_for_test_completion>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003f04:	f107 020c 	add.w	r2, r7, #12
 8003f08:	2302      	movs	r3, #2
 8003f0a:	2189      	movs	r1, #137	; 0x89
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f010 fccd 	bl	80148ac <VL53L1_ReadMulti>
 8003f12:	4603      	mov	r3, r0
 8003f14:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003f1e:	7b3a      	ldrb	r2, [r7, #12]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003f26:	7b7a      	ldrb	r2, [r7, #13]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d108      	bne.n	8003f5a <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f007 fba1 	bl	800b698 <VL53L1_clear_interrupt>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003f62:	2100      	movs	r1, #0
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f007 faf7 	bl	800b558 <VL53L1_start_test>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b21      	cmp	r3, #33	; 0x21
 8003f8e:	d006      	beq.n	8003f9e <select_offset_per_vcsel+0x24>
 8003f90:	2b21      	cmp	r3, #33	; 0x21
 8003f92:	dc2b      	bgt.n	8003fec <select_offset_per_vcsel+0x72>
 8003f94:	2b1b      	cmp	r3, #27
 8003f96:	d01c      	beq.n	8003fd2 <select_offset_per_vcsel+0x58>
 8003f98:	2b1e      	cmp	r3, #30
 8003f9a:	d00d      	beq.n	8003fb8 <select_offset_per_vcsel+0x3e>
 8003f9c:	e026      	b.n	8003fec <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003fa8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb0:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003fb4:	817b      	strh	r3, [r7, #10]
		break;
 8003fb6:	e02b      	b.n	8004010 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbe:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003fc2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fca:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003fce:	817b      	strh	r3, [r7, #10]
		break;
 8003fd0:	e01e      	b.n	8004010 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003fdc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003fe8:	817b      	strh	r3, [r7, #10]
		break;
 8003fea:	e011      	b.n	8004010 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003ff6:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffe:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8004002:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004004:	23fc      	movs	r3, #252	; 0xfc
 8004006:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	801a      	strh	r2, [r3, #0]
		break;
 800400e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004016:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8004018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8004020:	7a7b      	ldrb	r3, [r7, #9]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <select_offset_per_vcsel+0xb6>
 800402a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800402e:	e001      	b.n	8004034 <select_offset_per_vcsel+0xba>
 8004030:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	8013      	strh	r3, [r2, #0]

	return status;
 8004038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8004048:	b490      	push	{r4, r7}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	460b      	mov	r3, r1
 8004058:	71fb      	strb	r3, [r7, #7]
 800405a:	4613      	mov	r3, r2
 800405c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	b29b      	uxth	r3, r3
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	84fb      	strh	r3, [r7, #38]	; 0x26
 800407a:	e021      	b.n	80040c0 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 800407c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	0052      	lsls	r2, r2, #1
 800408a:	441a      	add	r2, r3
 800408c:	00d3      	lsls	r3, r2, #3
 800408e:	461a      	mov	r2, r3
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4413      	add	r3, r2
 800409a:	4423      	add	r3, r4
 800409c:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80040a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	4413      	add	r3, r2
 80040a8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80040aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	3206      	adds	r2, #6
 80040b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80040ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040bc:	3301      	adds	r3, #1
 80040be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040c0:	79bb      	ldrb	r3, [r7, #6]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3d8      	bcc.n	800407c <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d047      	beq.n	8004160 <vl53l1_diff_histo_stddev+0x118>
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040de:	e03a      	b.n	8004156 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80040e0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	461a      	mov	r2, r3
 80040ec:	0052      	lsls	r2, r2, #1
 80040ee:	441a      	add	r2, r3
 80040f0:	00d3      	lsls	r3, r2, #3
 80040f2:	461a      	mov	r2, r3
 80040f4:	460b      	mov	r3, r1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	440b      	add	r3, r1
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	4413      	add	r3, r2
 80040fe:	4423      	add	r3, r4
 8004100:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004104:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004108:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004110:	fb03 f202 	mul.w	r2, r3, r2
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	fb92 f3f3 	sdiv	r3, r2, r3
 800411a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800411c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3206      	adds	r2, #6
 8004122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800412a:	fb03 f202 	mul.w	r2, r3, r2
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fb92 f3f3 	sdiv	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	441a      	add	r2, r3
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004152:	3301      	adds	r3, #1
 8004154:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004156:	79bb      	ldrb	r3, [r7, #6]
 8004158:	b29b      	uxth	r3, r3
 800415a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800415c:	429a      	cmp	r2, r3
 800415e:	d3bf      	bcc.n	80040e0 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8004160:	bf00      	nop
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bc90      	pop	{r4, r7}
 8004168:	4770      	bx	lr

0800416a <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 800416a:	b5b0      	push	{r4, r5, r7, lr}
 800416c:	b08c      	sub	sp, #48	; 0x30
 800416e:	af02      	add	r7, sp, #8
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3318      	adds	r3, #24
 8004178:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 800418e:	2300      	movs	r3, #0
 8004190:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800419a:	2318      	movs	r3, #24
 800419c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800419e:	f107 0314 	add.w	r3, r7, #20
 80041a2:	461a      	mov	r2, r3
 80041a4:	f248 018f 	movw	r1, #32911	; 0x808f
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f003 f9fb 	bl	80075a4 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80041ae:	f107 0310 	add.w	r3, r7, #16
 80041b2:	461a      	mov	r2, r3
 80041b4:	f248 018e 	movw	r1, #32910	; 0x808e
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f003 f9f3 	bl	80075a4 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c4:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 811b 	bne.w	8004404 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80041e8:	7efb      	ldrb	r3, [r7, #27]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	7eba      	ldrb	r2, [r7, #26]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fa:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800420c:	3b01      	subs	r3, #1
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e004      	b.n	800421e <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800421e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8004222:	7efb      	ldrb	r3, [r7, #27]
 8004224:	69f8      	ldr	r0, [r7, #28]
 8004226:	461a      	mov	r2, r3
 8004228:	0052      	lsls	r2, r2, #1
 800422a:	441a      	add	r2, r3
 800422c:	0153      	lsls	r3, r2, #5
 800422e:	461a      	mov	r2, r3
 8004230:	460b      	mov	r3, r1
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	440b      	add	r3, r1
 8004236:	019b      	lsls	r3, r3, #6
 8004238:	4413      	add	r3, r2
 800423a:	4403      	add	r3, r0
 800423c:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8004240:	3308      	adds	r3, #8
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	dd0c      	ble.n	8004262 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8004248:	7e79      	ldrb	r1, [r7, #25]
 800424a:	7efa      	ldrb	r2, [r7, #27]
 800424c:	f107 030c 	add.w	r3, r7, #12
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	460b      	mov	r3, r1
 800425a:	6839      	ldr	r1, [r7, #0]
 800425c:	69f8      	ldr	r0, [r7, #28]
 800425e:	f7ff fef3 	bl	8004048 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	429a      	cmp	r2, r3
 8004268:	db23      	blt.n	80042b2 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004270:	3318      	adds	r3, #24
 8004272:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f015 fab3 	bl	80197e4 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8004290:	7efb      	ldrb	r3, [r7, #27]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429c:	2206      	movs	r2, #6
 800429e:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80042a2:	e034      	b.n	800430e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	2207      	movs	r2, #7
 80042ac:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80042b0:	e02d      	b.n	800430e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80042bc:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042c4:	e01e      	b.n	8004304 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80042c6:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80042ca:	7e39      	ldrb	r1, [r7, #24]
 80042cc:	7efb      	ldrb	r3, [r7, #27]
 80042ce:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	3006      	adds	r0, #6
 80042d6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80042da:	69f8      	ldr	r0, [r7, #28]
 80042dc:	461a      	mov	r2, r3
 80042de:	0052      	lsls	r2, r2, #1
 80042e0:	441a      	add	r2, r3
 80042e2:	00d3      	lsls	r3, r2, #3
 80042e4:	461a      	mov	r2, r3
 80042e6:	460b      	mov	r3, r1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	440b      	add	r3, r1
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	442b      	add	r3, r5
 80042f2:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80042f6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80042fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80042fe:	3301      	adds	r3, #1
 8004300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004304:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004308:	7ebb      	ldrb	r3, [r7, #26]
 800430a:	429a      	cmp	r2, r3
 800430c:	d3db      	bcc.n	80042c6 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004314:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004318:	461a      	mov	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3b01      	subs	r3, #1
 800431e:	429a      	cmp	r2, r3
 8004320:	d109      	bne.n	8004336 <vl53l1_histo_merge+0x1cc>
 8004322:	7efb      	ldrb	r3, [r7, #27]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d106      	bne.n	8004336 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8004334:	e00e      	b.n	8004354 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8004336:	7efb      	ldrb	r3, [r7, #27]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10b      	bne.n	8004354 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004342:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004346:	3301      	adds	r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004350:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004354:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <vl53l1_histo_merge+0x1f8>
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d069      	beq.n	8004436 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004368:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800436c:	2b00      	cmp	r3, #0
 800436e:	d162      	bne.n	8004436 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8004370:	2300      	movs	r3, #0
 8004372:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004374:	e008      	b.n	8004388 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8004376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	3206      	adds	r2, #6
 800437c:	2100      	movs	r1, #0
 800437e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8004382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004384:	3301      	adds	r3, #1
 8004386:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004388:	7ebb      	ldrb	r3, [r7, #26]
 800438a:	b29b      	uxth	r3, r3
 800438c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800438e:	429a      	cmp	r2, r3
 8004390:	d3f1      	bcc.n	8004376 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8004392:	2300      	movs	r3, #0
 8004394:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004396:	e02f      	b.n	80043f8 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800439e:	e023      	b.n	80043e8 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 80043a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	3206      	adds	r2, #6
 80043a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80043aa:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80043ae:	7efb      	ldrb	r3, [r7, #27]
 80043b0:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80043b2:	69fc      	ldr	r4, [r7, #28]
 80043b4:	461a      	mov	r2, r3
 80043b6:	0052      	lsls	r2, r2, #1
 80043b8:	441a      	add	r2, r3
 80043ba:	00d3      	lsls	r3, r2, #3
 80043bc:	461a      	mov	r2, r3
 80043be:	460b      	mov	r3, r1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	440b      	add	r3, r1
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	442b      	add	r3, r5
 80043ca:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80043ce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80043d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043d4:	18c1      	adds	r1, r0, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	3206      	adds	r2, #6
 80043da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80043de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043e2:	3301      	adds	r3, #1
 80043e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043e8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	dbd6      	blt.n	80043a0 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 80043f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043f4:	3301      	adds	r3, #1
 80043f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043f8:	7ebb      	ldrb	r3, [r7, #26]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3ca      	bcc.n	8004398 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004402:	e018      	b.n	8004436 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800440e:	3b01      	subs	r3, #1
 8004410:	b2da      	uxtb	r2, r3
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004426:	2bff      	cmp	r3, #255	; 0xff
 8004428:	d105      	bne.n	8004436 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8004436:	bf00      	nop
 8004438:	3728      	adds	r7, #40	; 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004440 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b0c6      	sub	sp, #280	; 0x118
 8004444:	af00      	add	r7, sp, #0
 8004446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800444a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800444e:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800445c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8004464:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004468:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800446c:	2200      	movs	r2, #0
 800446e:	2185      	movs	r1, #133	; 0x85
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f010 fa51 	bl	8014918 <VL53L1_WrByte>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800447c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8004484:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004488:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	f007 f8df 	bl	800b650 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8004492:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8004496:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800449a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800449e:	f248 018c 	movw	r1, #32908	; 0x808c
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	f003 f87e 	bl	80075a4 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80044a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d81b      	bhi.n	80044e8 <VL53L1_load_patch+0xa8>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <VL53L1_load_patch+0x78>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044d1 	.word	0x080044d1
 80044c0:	080044d9 	.word	0x080044d9
 80044c4:	080044e1 	.word	0x080044e1
	case 0:
		patch_power = 0x00;
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044ce:	e00e      	b.n	80044ee <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80044d0:	2310      	movs	r3, #16
 80044d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044d6:	e00a      	b.n	80044ee <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80044d8:	2320      	movs	r3, #32
 80044da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044de:	e006      	b.n	80044ee <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 80044e0:	2340      	movs	r3, #64	; 0x40
 80044e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80044e6:	e002      	b.n	80044ee <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 80044ee:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d134      	bne.n	8004560 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 80044f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044fe:	2229      	movs	r2, #41	; 0x29
 8004500:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004506:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800450a:	22c9      	movs	r2, #201	; 0xc9
 800450c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800450e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004516:	220e      	movs	r2, #14
 8004518:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800451a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800451e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004522:	2240      	movs	r2, #64	; 0x40
 8004524:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8004526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800452a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800452e:	2228      	movs	r2, #40	; 0x28
 8004530:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004532:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004536:	b2da      	uxtb	r2, r3
 8004538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800453c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004540:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8004542:	f107 020c 	add.w	r2, r7, #12
 8004546:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800454a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800454e:	2306      	movs	r3, #6
 8004550:	f240 4176 	movw	r1, #1142	; 0x476
 8004554:	6800      	ldr	r0, [r0, #0]
 8004556:	f010 f973 	bl	8014840 <VL53L1_WriteMulti>
 800455a:	4603      	mov	r3, r0
 800455c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004560:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004564:	2b00      	cmp	r3, #0
 8004566:	d132      	bne.n	80045ce <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004568:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800456c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004570:	2203      	movs	r2, #3
 8004572:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004578:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800457c:	226d      	movs	r2, #109	; 0x6d
 800457e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004588:	2203      	movs	r2, #3
 800458a:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800458c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004594:	226f      	movs	r2, #111	; 0x6f
 8004596:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800459c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045a0:	2207      	movs	r2, #7
 80045a2:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80045a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045ac:	2229      	movs	r2, #41	; 0x29
 80045ae:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80045b0:	f107 020c 	add.w	r2, r7, #12
 80045b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045b8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80045bc:	2306      	movs	r3, #6
 80045be:	f240 4196 	movw	r1, #1174	; 0x496
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	f010 f93c 	bl	8014840 <VL53L1_WriteMulti>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80045ce:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11a      	bne.n	800460c <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80045d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80045e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045ea:	2207      	movs	r2, #7
 80045ec:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 80045ee:	f107 020c 	add.w	r2, r7, #12
 80045f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045f6:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80045fa:	2302      	movs	r3, #2
 80045fc:	f240 4172 	movw	r1, #1138	; 0x472
 8004600:	6800      	ldr	r0, [r0, #0]
 8004602:	f010 f91d 	bl	8014840 <VL53L1_WriteMulti>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 800460c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11a      	bne.n	800464a <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004614:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004620:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004624:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004628:	2207      	movs	r2, #7
 800462a:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800462c:	f107 020c 	add.w	r2, r7, #12
 8004630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004634:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004638:	2302      	movs	r3, #2
 800463a:	f240 4174 	movw	r1, #1140	; 0x474
 800463e:	6800      	ldr	r0, [r0, #0]
 8004640:	f010 f8fe 	bl	8014840 <VL53L1_WriteMulti>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 800464a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10c      	bne.n	800466c <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8004652:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004656:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800465a:	2201      	movs	r2, #1
 800465c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	f010 f959 	bl	8014918 <VL53L1_WrByte>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 800466c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8004674:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004678:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800467c:	2201      	movs	r2, #1
 800467e:	2185      	movs	r1, #133	; 0x85
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	f010 f949 	bl	8014918 <VL53L1_WrByte>
 8004686:	4603      	mov	r3, r0
 8004688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800468c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004690:	4618      	mov	r0, r3
 8004692:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80046a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80046b0:	2200      	movs	r2, #0
 80046b2:	2185      	movs	r1, #133	; 0x85
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f010 f92f 	bl	8014918 <VL53L1_WrByte>
 80046ba:	4603      	mov	r3, r0
 80046bc:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f006 ffd4 	bl	800b674 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80046cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f010 f91c 	bl	8014918 <VL53L1_WrByte>
 80046e0:	4603      	mov	r3, r0
 80046e2:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80046e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 80046ec:	2201      	movs	r2, #1
 80046ee:	2185      	movs	r1, #133	; 0x85
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f010 f911 	bl	8014918 <VL53L1_WrByte>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004706:	b5b0      	push	{r4, r5, r7, lr}
 8004708:	b08a      	sub	sp, #40	; 0x28
 800470a:	af04      	add	r7, sp, #16
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	460b      	mov	r3, r1
 8004710:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3318      	adds	r3, #24
 800471a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004722:	3308      	adds	r3, #8
 8004724:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800472a:	2162      	movs	r1, #98	; 0x62
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f006 f810 	bl	800a752 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2204      	movs	r2, #4
 8004736:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2210      	movs	r2, #16
 8004742:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800474e:	2300      	movs	r3, #0
 8004750:	75bb      	strb	r3, [r7, #22]
 8004752:	e01b      	b.n	800478c <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8004754:	7dba      	ldrb	r2, [r7, #22]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	3308      	adds	r3, #8
 8004768:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2200      	movs	r2, #0
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	3301      	adds	r3, #1
 800478a:	75bb      	strb	r3, [r7, #22]
 800478c:	7dbb      	ldrb	r3, [r7, #22]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	d9e0      	bls.n	8004754 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2210      	movs	r2, #16
 8004796:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2210      	movs	r2, #16
 80047a6:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80047b2:	2300      	movs	r3, #0
 80047b4:	75bb      	strb	r3, [r7, #22]
 80047b6:	e039      	b.n	800482c <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80047b8:	7dba      	ldrb	r2, [r7, #22]
 80047ba:	68f9      	ldr	r1, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80047ce:	7dba      	ldrb	r2, [r7, #22]
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 80047e4:	7dba      	ldrb	r2, [r7, #22]
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 80047fa:	7dba      	ldrb	r2, [r7, #22]
 80047fc:	68f9      	ldr	r1, [r7, #12]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004810:	7dba      	ldrb	r2, [r7, #22]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004826:	7dbb      	ldrb	r3, [r7, #22]
 8004828:	3301      	adds	r3, #1
 800482a:	75bb      	strb	r3, [r7, #22]
 800482c:	7dbb      	ldrb	r3, [r7, #22]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d9c2      	bls.n	80047b8 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2201      	movs	r2, #1
 800483c:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2200      	movs	r2, #0
 8004842:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2200      	movs	r2, #0
 8004848:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2201      	movs	r2, #1
 800484e:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2201      	movs	r2, #1
 8004854:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2201      	movs	r2, #1
 800485a:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004862:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800486a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004872:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2264      	movs	r2, #100	; 0x64
 8004878:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004880:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004890:	2203      	movs	r2, #3
 8004892:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f240 72db 	movw	r2, #2011	; 0x7db
 80048a8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80048b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f005 ff2e 	bl	800a718 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80048c2:	3318      	adds	r3, #24
 80048c4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f014 ff8a 	bl	80197e4 <memset>
	pdev->bin_rec_pos = 0;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <VL53L1_data_init+0x1fa>
 80048ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8b8 	bl	8004a6c <VL53L1_read_p2p_data>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fdf8 	bl	8008504 <VL53L1_init_refspadchar_config_struct>
 8004914:	4603      	mov	r3, r0
 8004916:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8004918:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d107      	bne.n	8004930 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004926:	4618      	mov	r0, r3
 8004928:	f003 fe10 	bl	800854c <VL53L1_init_ssc_config_struct>
 800492c:	4603      	mov	r3, r0
 800492e:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f003 fe21 	bl	800858e <VL53L1_init_xtalk_config_struct>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fe89 	bl	8008676 <VL53L1_init_xtalk_extract_config_struct>
 8004964:	4603      	mov	r3, r0
 8004966:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8004976:	4618      	mov	r0, r3
 8004978:	f003 feac 	bl	80086d4 <VL53L1_init_offset_cal_config_struct>
 800497c:	4603      	mov	r3, r0
 800497e:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800498e:	4618      	mov	r0, r3
 8004990:	f003 fec7 	bl	8008722 <VL53L1_init_zone_cal_config_struct>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f003 fedb 	bl	800876a <VL53L1_init_hist_post_process_config_struct>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80049b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 f8f6 	bl	8008bb8 <VL53L1_init_hist_gen3_dmax_config_struct>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80049d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80049de:	4618      	mov	r0, r3
 80049e0:	f003 ff32 	bl	8008848 <VL53L1_init_tuning_parm_storage_struct>
 80049e4:	4603      	mov	r3, r0
 80049e6:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 80049e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	7858      	ldrb	r0, [r3, #1]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	8b1c      	ldrh	r4, [r3, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	689d      	ldr	r5, [r3, #8]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	6912      	ldr	r2, [r2, #16]
 8004a04:	6939      	ldr	r1, [r7, #16]
 8004a06:	6949      	ldr	r1, [r1, #20]
 8004a08:	9102      	str	r1, [sp, #8]
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	462b      	mov	r3, r5
 8004a10:	4622      	mov	r2, r4
 8004a12:	4601      	mov	r1, r0
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fc8f 	bl	8005338 <VL53L1_set_preset_mode>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a24:	461a      	mov	r2, r3
 8004a26:	2118      	movs	r1, #24
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f00a fa90 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004a34:	461a      	mov	r2, r3
 8004a36:	2118      	movs	r1, #24
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f00a fa88 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004a44:	461a      	mov	r2, r3
 8004a46:	210c      	movs	r1, #12
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f006 fc26 	bl	800b29a <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f009 fcd2 	bl	800e3f8 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f009 fbd1 	bl	800e1fc <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f009 fcf7 	bl	800e44e <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004a60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bdb0      	pop	{r4, r5, r7, pc}

08004a6c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b091      	sub	sp, #68	; 0x44
 8004a70:	af04      	add	r7, sp, #16
 8004a72:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	3348      	adds	r3, #72	; 0x48
 8004a8c:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	339c      	adds	r3, #156	; 0x9c
 8004a92:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004a94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f00d fdd1 	bl	801264c <VL53L1_get_static_nvm_managed>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004ab0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d108      	bne.n	8004aca <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	3348      	adds	r3, #72	; 0x48
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f00d ff02 	bl	80128c8 <VL53L1_get_customer_nvm_managed>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004aca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d117      	bne.n	8004b02 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f00e fdda 	bl	8013694 <VL53L1_get_nvm_copy_data>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8004ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f006 f921 	bl	800ad44 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	895b      	ldrh	r3, [r3, #10]
 8004b0e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8004b28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d108      	bne.n	8004b42 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	33c0      	adds	r3, #192	; 0xc0
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f00d fc3c 	bl	80123b4 <VL53L1_read_nvm_optical_centre>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004b42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	3360      	adds	r3, #96	; 0x60
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f00d fc52 	bl	80123fa <VL53L1_read_nvm_cal_peak_rate_map>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004b5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d12d      	bne.n	8004bc0 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	339c      	adds	r3, #156	; 0x9c
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f00d fc6b 	bl	8012446 <VL53L1_read_nvm_additional_offset_cal_data>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	889b      	ldrh	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d120      	bne.n	8004bc0 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11c      	bne.n	8004bc0 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2280      	movs	r2, #128	; 0x80
 8004b8a:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004b92:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	69f9      	ldr	r1, [r7, #28]
 8004baa:	3102      	adds	r1, #2
 8004bac:	9103      	str	r1, [sp, #12]
 8004bae:	9202      	str	r2, [sp, #8]
 8004bb0:	2238      	movs	r2, #56	; 0x38
 8004bb2:	9201      	str	r2, [sp, #4]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	23ff      	movs	r3, #255	; 0xff
 8004bb8:	22c7      	movs	r2, #199	; 0xc7
 8004bba:	4621      	mov	r1, r4
 8004bbc:	f008 f934 	bl	800ce28 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8004bc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d12f      	bne.n	8004c28 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f00d fc5a 	bl	801248c <VL53L1_read_nvm_fmt_range_results_data>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8004bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d120      	bne.n	8004c28 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004be6:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004bee:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004bf6:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004c14:	e003      	b.n	8004c1e <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2214      	movs	r2, #20
 8004c1a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c24:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8004c36:	3308      	adds	r3, #8
 8004c38:	461a      	mov	r2, r3
 8004c3a:	21de      	movs	r1, #222	; 0xde
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f00f fefb 	bl	8014a38 <VL53L1_RdWord>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d204      	bcs.n	8004c5e <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004c5a:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004c5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	33bc      	adds	r3, #188	; 0xbc
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f97d 	bl	8004f6c <VL53L1_get_mode_mitigation_roi>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d114      	bne.n	8004cac <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10f      	bne.n	8004cac <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004cac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3734      	adds	r7, #52	; 0x34
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd90      	pop	{r4, r7, pc}

08004cb8 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3318      	adds	r3, #24
 8004cca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd2:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004cda:	23f1      	movs	r3, #241	; 0xf1
 8004cdc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf2:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004cf6:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3318      	adds	r3, #24
 8004d26:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2e:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d36:	23f1      	movs	r3, #241	; 0xf1
 8004d38:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d4e:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004d52:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af02      	add	r7, sp, #8
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3318      	adds	r3, #24
 8004d80:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d8c:	23f1      	movs	r3, #241	; 0xf1
 8004d8e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d11b      	bne.n	8004dd0 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004dbc:	9201      	str	r2, [sp, #4]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	68b8      	ldr	r0, [r7, #8]
 8004dc8:	f006 fe0b 	bl	800b9e2 <VL53L1_calc_timeout_register_values>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3318      	adds	r3, #24
 8004df2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004e06:	23f1      	movs	r3, #241	; 0xf1
 8004e08:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004e0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d14a      	bne.n	8004ea8 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f006 fc56 	bl	800b6d2 <VL53L1_calc_macro_period_us>
 8004e26:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004e2e:	6979      	ldr	r1, [r7, #20]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f006 fd14 	bl	800b85e <VL53L1_calc_timeout_us>
 8004e36:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004e42:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004e44:	8a7b      	ldrh	r3, [r7, #18]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004e50:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004e52:	4413      	add	r3, r2
 8004e54:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004e56:	8a7b      	ldrh	r3, [r7, #18]
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f006 fd66 	bl	800b92c <VL53L1_calc_decoded_timeout_us>
 8004e60:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004e6c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004e6e:	8a7b      	ldrh	r3, [r7, #18]
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004e7a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004e7c:	4413      	add	r3, r2
 8004e7e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004e80:	8a7b      	ldrh	r3, [r7, #18]
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f006 fd51 	bl	800b92c <VL53L1_calc_decoded_timeout_us>
 8004e8a:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004ea8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3318      	adds	r3, #24
 8004eca:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004ed0:	7afb      	ldrb	r3, [r7, #11]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	d81c      	bhi.n	8004f10 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004edc:	7afb      	ldrb	r3, [r7, #11]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004eec:	7dbb      	ldrb	r3, [r7, #22]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	fa42 f303 	asr.w	r3, r2, r3
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e001      	b.n	8004f14 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004f10:	23fc      	movs	r3, #252	; 0xfc
 8004f12:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3318      	adds	r3, #24
 8004f36:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	7858      	ldrb	r0, [r3, #1]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	7819      	ldrb	r1, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004f46:	461a      	mov	r2, r3
 8004f48:	f007 fdeb 	bl	800cb22 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	7898      	ldrb	r0, [r3, #2]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	78d9      	ldrb	r1, [r3, #3]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f007 fe20 	bl	800cba0 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3318      	adds	r3, #24
 8004f7e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004f92:	f107 020e 	add.w	r2, r7, #14
 8004f96:	f107 010d 	add.w	r1, r7, #13
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f00a f880 	bl	800f0a0 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004fa0:	7bba      	ldrb	r2, [r7, #14]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004fa6:	7b7a      	ldrb	r2, [r7, #13]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004fb2:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	331c      	adds	r3, #28
 8004ff4:	2240      	movs	r2, #64	; 0x40
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f014 fbe6 	bl	80197c8 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	785a      	ldrb	r2, [r3, #1]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	33c2      	adds	r3, #194	; 0xc2
 8005014:	4618      	mov	r0, r3
 8005016:	f00f fbce 	bl	80147b6 <VL53L1_init_zone_config_histogram_bins>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	785b      	ldrb	r3, [r3, #1]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800502e:	e00f      	b.n	8005050 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b0f      	cmp	r3, #15
 8005036:	d807      	bhi.n	8005048 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	3301      	adds	r3, #1
 800503e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8005046:	e003      	b.n	8005050 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2211      	movs	r2, #17
 800504c:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8005050:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3318      	adds	r3, #24
 800506e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	33c2      	adds	r3, #194	; 0xc2
 8005074:	226c      	movs	r2, #108	; 0x6c
 8005076:	4619      	mov	r1, r3
 8005078:	6838      	ldr	r0, [r7, #0]
 800507a:	f014 fba5 	bl	80197c8 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 800507e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	460b      	mov	r3, r1
 800509a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3318      	adds	r3, #24
 80050a4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80050a6:	7afb      	ldrb	r3, [r7, #11]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	2b26      	cmp	r3, #38	; 0x26
 80050ac:	f200 8139 	bhi.w	8005322 <VL53L1_get_preset_mode_timing_cfg+0x296>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	08005155 	.word	0x08005155
 80050bc:	08005155 	.word	0x08005155
 80050c0:	08005155 	.word	0x08005155
 80050c4:	08005155 	.word	0x08005155
 80050c8:	08005155 	.word	0x08005155
 80050cc:	0800517f 	.word	0x0800517f
 80050d0:	0800517f 	.word	0x0800517f
 80050d4:	0800517f 	.word	0x0800517f
 80050d8:	08005323 	.word	0x08005323
 80050dc:	08005323 	.word	0x08005323
 80050e0:	080051d3 	.word	0x080051d3
 80050e4:	0800527b 	.word	0x0800527b
 80050e8:	080051d3 	.word	0x080051d3
 80050ec:	08005323 	.word	0x08005323
 80050f0:	08005323 	.word	0x08005323
 80050f4:	08005323 	.word	0x08005323
 80050f8:	08005155 	.word	0x08005155
 80050fc:	0800517f 	.word	0x0800517f
 8005100:	080051d3 	.word	0x080051d3
 8005104:	080051d3 	.word	0x080051d3
 8005108:	080051d3 	.word	0x080051d3
 800510c:	080051d3 	.word	0x080051d3
 8005110:	080051d3 	.word	0x080051d3
 8005114:	080051fd 	.word	0x080051fd
 8005118:	08005227 	.word	0x08005227
 800511c:	08005251 	.word	0x08005251
 8005120:	080051d3 	.word	0x080051d3
 8005124:	080051d3 	.word	0x080051d3
 8005128:	080051d3 	.word	0x080051d3
 800512c:	080052a5 	.word	0x080052a5
 8005130:	080052a5 	.word	0x080052a5
 8005134:	080052a5 	.word	0x080052a5
 8005138:	080052cf 	.word	0x080052cf
 800513c:	080052cf 	.word	0x080052cf
 8005140:	080052cf 	.word	0x080052cf
 8005144:	080051a9 	.word	0x080051a9
 8005148:	080051a9 	.word	0x080051a9
 800514c:	080051a9 	.word	0x080051a9
 8005150:	080052f9 	.word	0x080052f9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	601a      	str	r2, [r3, #0]
	break;
 800517c:	e0d4      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	601a      	str	r2, [r3, #0]
	break;
 80051a6:	e0bf      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	601a      	str	r2, [r3, #0]
	break;
 80051d0:	e0aa      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	601a      	str	r2, [r3, #0]

	break;
 80051fa:	e095      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	601a      	str	r2, [r3, #0]
	break;
 8005224:	e080      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	601a      	str	r2, [r3, #0]
	break;
 800524e:	e06b      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	601a      	str	r2, [r3, #0]
	break;
 8005278:	e056      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	601a      	str	r2, [r3, #0]
	break;
 80052a2:	e041      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	601a      	str	r2, [r3, #0]
	break;
 80052cc:	e02c      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	601a      	str	r2, [r3, #0]
	break;
 80052f6:	e017      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	601a      	str	r2, [r3, #0]
	break;
 8005320:	e002      	b.n	8005328 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005322:	23fc      	movs	r3, #252	; 0xfc
 8005324:	75fb      	strb	r3, [r7, #23]
		break;
 8005326:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005328:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b098      	sub	sp, #96	; 0x60
 800533c:	af06      	add	r7, sp, #24
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	72fb      	strb	r3, [r7, #11]
 8005346:	4613      	mov	r3, r2
 8005348:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3318      	adds	r3, #24
 8005354:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800535c:	3308      	adds	r3, #8
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536a:	f203 3342 	addw	r3, r3, #834	; 0x342
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8005370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005372:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537a:	f203 3362 	addw	r3, r3, #866	; 0x362
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005382:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005392:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005396:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8005398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539a:	33c2      	adds	r3, #194	; 0xc2
 800539c:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80053a4:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80053ac:	3318      	adds	r3, #24
 80053ae:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	7afa      	ldrb	r2, [r7, #11]
 80053b4:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053ba:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053c0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80053c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053c6:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80053c8:	2103      	movs	r1, #3
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f005 f9c1 	bl	800a752 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2b26      	cmp	r3, #38	; 0x26
 80053d6:	f200 8321 	bhi.w	8005a1c <VL53L1_set_preset_mode+0x6e4>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <VL53L1_set_preset_mode+0xa8>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	0800547d 	.word	0x0800547d
 80053e4:	080054a1 	.word	0x080054a1
 80053e8:	080054c5 	.word	0x080054c5
 80053ec:	080054e9 	.word	0x080054e9
 80053f0:	0800550d 	.word	0x0800550d
 80053f4:	08005531 	.word	0x08005531
 80053f8:	08005555 	.word	0x08005555
 80053fc:	08005579 	.word	0x08005579
 8005400:	08005a1d 	.word	0x08005a1d
 8005404:	08005a1d 	.word	0x08005a1d
 8005408:	0800559d 	.word	0x0800559d
 800540c:	08005705 	.word	0x08005705
 8005410:	08005895 	.word	0x08005895
 8005414:	080058bd 	.word	0x080058bd
 8005418:	080058e5 	.word	0x080058e5
 800541c:	0800590d 	.word	0x0800590d
 8005420:	08005935 	.word	0x08005935
 8005424:	08005959 	.word	0x08005959
 8005428:	080056dd 	.word	0x080056dd
 800542c:	080055c5 	.word	0x080055c5
 8005430:	080055ed 	.word	0x080055ed
 8005434:	08005615 	.word	0x08005615
 8005438:	0800563d 	.word	0x0800563d
 800543c:	08005665 	.word	0x08005665
 8005440:	0800568d 	.word	0x0800568d
 8005444:	080056b5 	.word	0x080056b5
 8005448:	0800572d 	.word	0x0800572d
 800544c:	08005755 	.word	0x08005755
 8005450:	0800577d 	.word	0x0800577d
 8005454:	080057a5 	.word	0x080057a5
 8005458:	080057cd 	.word	0x080057cd
 800545c:	080057f5 	.word	0x080057f5
 8005460:	0800581d 	.word	0x0800581d
 8005464:	08005845 	.word	0x08005845
 8005468:	0800586d 	.word	0x0800586d
 800546c:	0800597d 	.word	0x0800597d
 8005470:	080059a5 	.word	0x080059a5
 8005474:	080059cd 	.word	0x080059cd
 8005478:	080059f5 	.word	0x080059f5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005492:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005494:	f003 fbc6 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800549e:	e2c1      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	9303      	str	r3, [sp, #12]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054b8:	f003 fd2d 	bl	8008f16 <VL53L1_preset_mode_standard_ranging_short_range>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054c2:	e2af      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054dc:	f003 fd60 	bl	8008fa0 <VL53L1_preset_mode_standard_ranging_long_range>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054e6:	e29d      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9303      	str	r3, [sp, #12]
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	9302      	str	r3, [sp, #8]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005500:	f003 fd93 	bl	800902a <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800550a:	e28b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005522:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005524:	f003 fdaa 	bl	800907c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800552e:	e279      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	9301      	str	r3, [sp, #4]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005546:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005548:	f003 fdc1 	bl	80090ce <VL53L1_preset_mode_timed_ranging>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005552:	e267      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	9303      	str	r3, [sp, #12]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	9302      	str	r3, [sp, #8]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800556a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800556c:	f003 fded 	bl	800914a <VL53L1_preset_mode_timed_ranging_short_range>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005576:	e255      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800558e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005590:	f003 fe19 	bl	80091c6 <VL53L1_preset_mode_timed_ranging_long_range>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800559a:	e243      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	9303      	str	r3, [sp, #12]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055b8:	f003 fefb 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055c2:	e22f      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055e0:	f003 ff7c 	bl	80094dc <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055ea:	e21b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005608:	f003 ffcc 	bl	80095a4 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005612:	e207      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800562e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005630:	f003 ffe0 	bl	80095f4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800563a:	e1f3      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	9303      	str	r3, [sp, #12]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	9302      	str	r3, [sp, #8]
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005658:	f004 f830 	bl	80096bc <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005662:	e1df      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800567e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005680:	f004 fe25 	bl	800a2ce <VL53L1_preset_mode_histogram_multizone>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800568a:	e1cb      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a8:	f004 fe63 	bl	800a372 <VL53L1_preset_mode_histogram_multizone_short_range>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056b2:	e1b7      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056d0:	f004 fea1 	bl	800a416 <VL53L1_preset_mode_histogram_multizone_long_range>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056da:	e1a3      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	9303      	str	r3, [sp, #12]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056f8:	f004 ffde 	bl	800a6b8 <VL53L1_preset_mode_histogram_ranging_ref>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005702:	e18f      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800571e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005720:	f003 fff4 	bl	800970c <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800572a:	e17b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	9303      	str	r3, [sp, #12]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	9302      	str	r3, [sp, #8]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005744:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005748:	f004 f86c 	bl	8009824 <VL53L1_preset_mode_histogram_long_range>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005752:	e167      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	9303      	str	r3, [sp, #12]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	9302      	str	r3, [sp, #8]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800576e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005770:	f004 f8f6 	bl	8009960 <VL53L1_preset_mode_histogram_long_range_mm1>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800577a:	e153      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	9304      	str	r3, [sp, #16]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005798:	f004 f943 	bl	8009a22 <VL53L1_preset_mode_histogram_long_range_mm2>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057a2:	e13f      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	9303      	str	r3, [sp, #12]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057c0:	f004 f957 	bl	8009a72 <VL53L1_preset_mode_histogram_medium_range>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057ca:	e12b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	9304      	str	r3, [sp, #16]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057e8:	f004 f9e1 	bl	8009bae <VL53L1_preset_mode_histogram_medium_range_mm1>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057f2:	e117      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	9303      	str	r3, [sp, #12]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	9302      	str	r3, [sp, #8]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800580e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005810:	f004 fa2e 	bl	8009c70 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800581a:	e103      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	9302      	str	r3, [sp, #8]
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005836:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005838:	f004 fa42 	bl	8009cc0 <VL53L1_preset_mode_histogram_short_range>
 800583c:	4603      	mov	r3, r0
 800583e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005842:	e0ef      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	9302      	str	r3, [sp, #8]
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	9301      	str	r3, [sp, #4]
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800585e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005860:	f004 fb4c 	bl	8009efc <VL53L1_preset_mode_histogram_short_range_mm1>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800586a:	e0db      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	9304      	str	r3, [sp, #16]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	9303      	str	r3, [sp, #12]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005886:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005888:	f004 fb99 	bl	8009fbe <VL53L1_preset_mode_histogram_short_range_mm2>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005892:	e0c7      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	9303      	str	r3, [sp, #12]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	9302      	str	r3, [sp, #8]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058b0:	f004 fbad 	bl	800a00e <VL53L1_preset_mode_histogram_characterisation>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058ba:	e0b3      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	9302      	str	r3, [sp, #8]
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058d8:	f004 fbca 	bl	800a070 <VL53L1_preset_mode_histogram_xtalk_planar>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058e2:	e09f      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	9303      	str	r3, [sp, #12]
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	9302      	str	r3, [sp, #8]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005900:	f004 fc2d 	bl	800a15e <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800590a:	e08b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	9303      	str	r3, [sp, #12]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005924:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005928:	f004 fcad 	bl	800a286 <VL53L1_preset_mode_histogram_xtalk_mm2>
 800592c:	4603      	mov	r3, r0
 800592e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005932:	e077      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800594a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800594c:	f004 fdb5 	bl	800a4ba <VL53L1_preset_mode_olt>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005956:	e065      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	9303      	str	r3, [sp, #12]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	9302      	str	r3, [sp, #8]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800596e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005970:	f003 fce5 	bl	800933e <VL53L1_preset_mode_singleshot_ranging>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800597a:	e053      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	9303      	str	r3, [sp, #12]
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005998:	f003 fc7d 	bl	8009296 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80059a2:	e03f      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	9303      	str	r3, [sp, #12]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	9302      	str	r3, [sp, #8]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059c0:	f003 fc3f 	bl	8009242 <VL53L1_preset_mode_low_power_auto_ranging>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80059ca:	e02b      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059e8:	f003 fc7f 	bl	80092ea <VL53L1_preset_mode_low_power_auto_long_ranging>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80059f2:	e017      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	9303      	str	r3, [sp, #12]
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a10:	f004 f9f4 	bl	8009dfc <VL53L1_preset_mode_special_histogram_short_range>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 8005a1a:	e003      	b.n	8005a24 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005a1c:	23fc      	movs	r3, #252	; 0xfc
 8005a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005a22:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005a24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	893a      	ldrh	r2, [r7, #8]
 8005a30:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a34:	893a      	ldrh	r2, [r7, #8]
 8005a36:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8005a38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d108      	bne.n	8005a52 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff f98f 	bl	8004d6a <VL53L1_set_timeouts_us>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005a52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff f92b 	bl	8004cb8 <VL53L1_set_inter_measurement_period_ms>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f005 fa82 	bl	800af84 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8005a80:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3748      	adds	r7, #72	; 0x48
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3318      	adds	r3, #24
 8005ace:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	887a      	ldrh	r2, [r7, #2]
 8005ad4:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8005ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3318      	adds	r3, #24
 8005afa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005b06:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3318      	adds	r3, #24
 8005b2a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005b34:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0d2      	sub	sp, #328	; 0x148
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b4e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b52:	6018      	str	r0, [r3, #0]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b5c:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005b60:	4602      	mov	r2, r0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b68:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3318      	adds	r3, #24
 8005b82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8005b86:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005b94:	3308      	adds	r3, #8
 8005b96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005b9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b9e:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005ba2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005ba6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005baa:	3348      	adds	r3, #72	; 0x48
 8005bac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005bb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bb4:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005bbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bc0:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bcc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005bd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005bd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bd8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005be0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005be4:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005be8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005bec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bf0:	332c      	adds	r3, #44	; 0x2c
 8005bf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005bf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bfa:	3348      	adds	r3, #72	; 0x48
 8005bfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005c20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005c28:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005c30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c34:	791b      	ldrb	r3, [r3, #4]
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005c3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c42:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005c46:	f993 3000 	ldrsb.w	r3, [r3]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b25b      	sxtb	r3, r3
 8005c4e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005c50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c54:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005c56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005c5e:	3336      	adds	r3, #54	; 0x36
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005c66:	4413      	add	r3, r2
 8005c68:	1d9a      	adds	r2, r3, #6
 8005c6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005c72:	4611      	mov	r1, r2
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f7ff f955 	bl	8004f24 <VL53L1_set_user_zone>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c84:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d019      	beq.n	8005cc0 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005c8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c94:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005ca2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005ca6:	4413      	add	r3, r2
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	f001 fbd7 	bl	8007468 <VL53L1_set_zone_dss_config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005cc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cc4:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005cd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cd4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005cdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce0:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005ce4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce8:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005cec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf4:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8005cf8:	2bff      	cmp	r3, #255	; 0xff
 8005cfa:	d106      	bne.n	8005d0a <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005cfc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d139      	bne.n	8005d8e <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005d1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d22:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d131      	bne.n	8005d8e <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005d2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d2e:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005d3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005d48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d4c:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005d58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d5c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005d60:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005d62:	b21a      	sxth	r2, r3
 8005d64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d68:	825a      	strh	r2, [r3, #18]
 8005d6a:	e003      	b.n	8005d74 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d70:	2200      	movs	r2, #0
 8005d72:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005d74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d78:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d805      	bhi.n	8005d8e <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d86:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d8a:	2205      	movs	r2, #5
 8005d8c:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005d8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d96:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d117      	bne.n	8005dce <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005d9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10f      	bne.n	8005dce <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005dae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db6:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005dba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005dbe:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005dc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dc6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005dca:	2206      	movs	r2, #6
 8005dcc:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005dce:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005dd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	f007 f98c 	bl	800d0fc <VL53L1_save_cfg_data>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005dea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dee:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d826      	bhi.n	8005e48 <VL53L1_init_and_start_range+0x304>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <VL53L1_init_and_start_range+0x2bc>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e19 	.word	0x08005e19
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e1e:	e017      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005e20:	230d      	movs	r3, #13
 8005e22:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e26:	e013      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005e28:	2324      	movs	r3, #36	; 0x24
 8005e2a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e2e:	e00f      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005e30:	2344      	movs	r3, #68	; 0x44
 8005e32:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e36:	e00b      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005e38:	235a      	movs	r3, #90	; 0x5a
 8005e3a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e3e:	e007      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005e40:	2371      	movs	r3, #113	; 0x71
 8005e42:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e46:	e003      	b.n	8005e50 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005e48:	2383      	movs	r3, #131	; 0x83
 8005e4a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005e4e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005e50:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e54:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005e58:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005e6a:	e00b      	b.n	8005e84 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005e6c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005e7a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005e84:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005e88:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d3ed      	bcc.n	8005e6c <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e94:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d917      	bls.n	8005ece <VL53L1_init_and_start_range+0x38a>
 8005e9e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d113      	bne.n	8005ece <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ea6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005eaa:	f1c3 0301 	rsb	r3, r3, #1
 8005eae:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005eb2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005eb6:	f107 020c 	add.w	r2, r7, #12
 8005eba:	4413      	add	r3, r2
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	210b      	movs	r1, #11
 8005ec0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005ec4:	f00c fb0d 	bl	80124e2 <VL53L1_i2c_encode_static_nvm_managed>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005ece:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ed2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d917      	bls.n	8005f0c <VL53L1_init_and_start_range+0x3c8>
 8005edc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d113      	bne.n	8005f0c <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ee4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ee8:	f1c3 030d 	rsb	r3, r3, #13
 8005eec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005ef0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005ef4:	f107 020c 	add.w	r2, r7, #12
 8005ef8:	4413      	add	r3, r2
 8005efa:	461a      	mov	r2, r3
 8005efc:	2117      	movs	r1, #23
 8005efe:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005f02:	f00c fbca 	bl	801269a <VL53L1_i2c_encode_customer_nvm_managed>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005f0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f10:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d917      	bls.n	8005f4a <VL53L1_init_and_start_range+0x406>
 8005f1a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d113      	bne.n	8005f4a <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f22:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f26:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005f2a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f2e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005f32:	f107 020c 	add.w	r2, r7, #12
 8005f36:	4413      	add	r3, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2120      	movs	r1, #32
 8005f3c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005f40:	f00c fce9 	bl	8012916 <VL53L1_i2c_encode_static_config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005f4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f4e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d917      	bls.n	8005f88 <VL53L1_init_and_start_range+0x444>
 8005f58:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d113      	bne.n	8005f88 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f60:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f64:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005f68:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f6c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005f70:	f107 020c 	add.w	r2, r7, #12
 8005f74:	4413      	add	r3, r2
 8005f76:	461a      	mov	r2, r3
 8005f78:	2116      	movs	r1, #22
 8005f7a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005f7e:	f00c fdad 	bl	8012adc <VL53L1_i2c_encode_general_config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005f88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f8c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d917      	bls.n	8005fc6 <VL53L1_init_and_start_range+0x482>
 8005f96:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d113      	bne.n	8005fc6 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f9e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005fa2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005fa6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005faa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005fae:	f107 020c 	add.w	r2, r7, #12
 8005fb2:	4413      	add	r3, r2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2117      	movs	r1, #23
 8005fb8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005fbc:	f00c fe12 	bl	8012be4 <VL53L1_i2c_encode_timing_config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005fc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fca:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d036      	beq.n	8006042 <VL53L1_init_and_start_range+0x4fe>
 8005fd4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d132      	bne.n	8006042 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005fdc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005fe0:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005fe4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005fe8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d017      	beq.n	8006026 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffa:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	b2da      	uxtb	r2, r3
 8006002:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006006:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006018:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800601e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8006020:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006024:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006026:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800602a:	f107 020c 	add.w	r2, r7, #12
 800602e:	4413      	add	r3, r2
 8006030:	461a      	mov	r2, r3
 8006032:	2112      	movs	r1, #18
 8006034:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006038:	f00c fe56 	bl	8012ce8 <VL53L1_i2c_encode_dynamic_config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8006042:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006046:	2b00      	cmp	r3, #0
 8006048:	d113      	bne.n	8006072 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 800604a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800604e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8006052:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8006056:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800605a:	f107 020c 	add.w	r2, r7, #12
 800605e:	4413      	add	r3, r2
 8006060:	461a      	mov	r2, r3
 8006062:	2105      	movs	r1, #5
 8006064:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8006068:	f00c fec3 	bl	8012df2 <VL53L1_i2c_encode_system_control>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8006072:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 800607a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800607e:	f107 020c 	add.w	r2, r7, #12
 8006082:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8006086:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800608a:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	f00e fbd6 	bl	8014840 <VL53L1_WriteMulti>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 800609a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80060a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	f004 fb82 	bl	800a7b4 <VL53L1_update_ll_driver_rd_state>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 80060b6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80060be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80060c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	f004 fd15 	bl	800aaf6 <VL53L1_update_ll_driver_cfg_state>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 80060d2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3318      	adds	r3, #24
 80060f0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80060f8:	3308      	adds	r3, #8
 80060fa:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006102:	b25b      	sxtb	r3, r3
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800610a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800610e:	b25b      	sxtb	r3, r3
 8006110:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f00c fea1 	bl	8012e68 <VL53L1_set_system_control>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 800613c:	2103      	movs	r1, #3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f004 fb07 	bl	800a752 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800614a:	3301      	adds	r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f004 ff14 	bl	800af84 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f004 ff46 	bl	800afee <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006168:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800616c:	2b01      	cmp	r3, #1
 800616e:	d102      	bne.n	8006176 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f008 f9b4 	bl	800e4de <VL53L1_low_power_auto_data_stop_range>

	return status;
 8006176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b0c8      	sub	sp, #288	; 0x120
 8006186:	af00      	add	r7, sp, #0
 8006188:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800618c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006190:	6018      	str	r0, [r3, #0]
 8006192:	460a      	mov	r2, r1
 8006194:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006198:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800619c:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80061a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80061a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3318      	adds	r3, #24
 80061b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80061b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061b8:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 80061bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80061c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061c4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80061c8:	331c      	adds	r3, #28
 80061ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80061ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80061d2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80061d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 80061da:	2388      	movs	r3, #136	; 0x88
 80061dc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 80061ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80061f0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d008      	beq.n	800620c <VL53L1_get_measurement_results+0x8a>
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d10d      	bne.n	800621a <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 80061fe:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006202:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8006206:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800620a:	e00a      	b.n	8006222 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800620c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006210:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8006214:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006218:	e003      	b.n	8006222 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800621a:	232c      	movs	r3, #44	; 0x2c
 800621c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006220:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8006222:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 800622a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800622e:	f107 0208 	add.w	r2, r7, #8
 8006232:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8006236:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800623a:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	f00e fb34 	bl	80148ac <VL53L1_ReadMulti>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800624a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800624e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d917      	bls.n	8006288 <VL53L1_get_measurement_results+0x106>
 8006258:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800625c:	2b00      	cmp	r3, #0
 800625e:	d113      	bne.n	8006288 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006260:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006264:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8006268:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800626c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8006270:	f107 0208 	add.w	r2, r7, #8
 8006274:	4413      	add	r3, r2
 8006276:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800627a:	4619      	mov	r1, r3
 800627c:	2038      	movs	r0, #56	; 0x38
 800627e:	f00c ff71 	bl	8013164 <VL53L1_i2c_decode_debug_results>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8006288:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800628c:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d017      	beq.n	80062c6 <VL53L1_get_measurement_results+0x144>
 8006296:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d113      	bne.n	80062c6 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800629e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80062a2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80062a6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80062aa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80062ae:	f107 0208 	add.w	r2, r7, #8
 80062b2:	4413      	add	r3, r2
 80062b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80062b8:	4619      	mov	r1, r3
 80062ba:	2021      	movs	r0, #33	; 0x21
 80062bc:	f00c fef1 	bl	80130a2 <VL53L1_i2c_decode_core_results>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80062c6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d110      	bne.n	80062f0 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80062d4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 80062d8:	f107 0208 	add.w	r2, r7, #8
 80062dc:	4413      	add	r3, r2
 80062de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80062e2:	4619      	mov	r1, r3
 80062e4:	202c      	movs	r0, #44	; 0x2c
 80062e6:	f00c fde6 	bl	8012eb6 <VL53L1_i2c_decode_system_results>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80062f0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 80062fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006302:	b0a0      	sub	sp, #128	; 0x80
 8006304:	af06      	add	r7, sp, #24
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	460b      	mov	r3, r1
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800630e:	2300      	movs	r3, #0
 8006310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3318      	adds	r3, #24
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006320:	3308      	adds	r3, #8
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8006324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006326:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8006328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800632a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800632e:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006332:	332c      	adds	r3, #44	; 0x2c
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8006336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006338:	33c2      	adds	r3, #194	; 0xc2
 800633a:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 800633c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800633e:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8006342:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800634a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800634c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006350:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8006352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006354:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800635a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800635c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006360:	3318      	adds	r3, #24
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8006364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006366:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800636c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636e:	3348      	adds	r3, #72	; 0x48
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800637a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800637c:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8006382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006384:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8006388:	2b01      	cmp	r3, #1
 800638a:	d108      	bne.n	800639e <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006392:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <VL53L1_get_device_results+0xa0>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <VL53L1_get_device_results+0xa2>
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 80063a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 82a9 	beq.w	8006906 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 80063b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80063ba:	4619      	mov	r1, r3
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fbd7 	bl	8006b70 <VL53L1_get_histogram_bin_data>
 80063c2:	4603      	mov	r3, r0
 80063c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 80063c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d118      	bne.n	8006402 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d114      	bne.n	8006402 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 80063d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 80063e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ea:	4413      	add	r3, r2
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f005 fb6c 	bl	800bad4 <VL53L1_hist_copy_and_scale_ambient_info>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8006402:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 8220 	bne.w	800684c <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800640c:	f107 0313 	add.w	r3, r7, #19
 8006410:	4619      	mov	r1, r3
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f008 f91a 	bl	800e64c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 800641e:	2301      	movs	r3, #1
 8006420:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8006422:	7cfb      	ldrb	r3, [r7, #19]
 8006424:	3b01      	subs	r3, #1
 8006426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 800642a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8006432:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	3202      	adds	r2, #2
 800643a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8006442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006444:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8006448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644a:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 800644c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f005 fa41 	bl	800b8e0 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 800645e:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006466:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800646e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006470:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800647c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647e:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8006482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006484:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8006486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006488:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800648c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800648e:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8006490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006492:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8006496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006498:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800649c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649e:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80064a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a4:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80064a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064aa:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80064b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ba:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80064c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c4:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80064c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c8:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80064ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064cc:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80064ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d0:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 80064d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d4:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80064d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064da:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f004 fc2f 	bl	800ad44 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	795b      	ldrb	r3, [r3, #5]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d048      	beq.n	8006580 <VL53L1_get_device_results+0x282>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	dc56      	bgt.n	80065a0 <VL53L1_get_device_results+0x2a2>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d002      	beq.n	80064fc <VL53L1_get_device_results+0x1fe>
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d02e      	beq.n	8006558 <VL53L1_get_device_results+0x25a>
 80064fa:	e051      	b.n	80065a0 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80064fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064fe:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8006502:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8006512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006514:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8006518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800651a:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006526:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 800652a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800652c:	319c      	adds	r1, #156	; 0x9c
 800652e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006530:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8006534:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8006538:	b2a4      	uxth	r4, r4
 800653a:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800653c:	351c      	adds	r5, #28
 800653e:	9505      	str	r5, [sp, #20]
 8006540:	9404      	str	r4, [sp, #16]
 8006542:	9003      	str	r0, [sp, #12]
 8006544:	9102      	str	r1, [sp, #8]
 8006546:	9201      	str	r2, [sp, #4]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4643      	mov	r3, r8
 800654c:	4672      	mov	r2, lr
 800654e:	4661      	mov	r1, ip
 8006550:	4630      	mov	r0, r6
 8006552:	f006 fa36 	bl	800c9c2 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8006556:	e027      	b.n	80065a8 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8006558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800655e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8006562:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006566:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006576:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8006578:	b21a      	sxth	r2, r3
 800657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657c:	839a      	strh	r2, [r3, #28]
		break;
 800657e:	e013      	b.n	80065a8 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	331c      	adds	r3, #28
 8006584:	4619      	mov	r1, r3
 8006586:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006588:	f7fd fcf7 	bl	8003f7a <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8006592:	b29b      	uxth	r3, r3
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	b29b      	uxth	r3, r3
 8006598:	b21a      	sxth	r2, r3
 800659a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800659c:	839a      	strh	r2, [r3, #28]
		break;
 800659e:	e003      	b.n	80065a8 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	2200      	movs	r2, #0
 80065a4:	839a      	strh	r2, [r3, #28]
		break;
 80065a6:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 80065a8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f040 814f 	bne.w	8006850 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 80065be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c0:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80065c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c6:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 80065ca:	b29c      	uxth	r4, r3
 80065cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ce:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	4623      	mov	r3, r4
 80065d6:	f006 fb99 	bl	800cd0c <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 80065da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065dc:	7999      	ldrb	r1, [r3, #6]
 80065de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80065e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 ff7b 	bl	80074e2 <VL53L1_get_dmax_calibration_data>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 80065f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 812c 	bne.w	8006854 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 80065fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fe:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8006602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006604:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8006608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800660a:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800660e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006610:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8006614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006616:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800661a:	3308      	adds	r3, #8
				pdev->wArea2,
 800661c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800661e:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8006622:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8006624:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006626:	9405      	str	r4, [sp, #20]
 8006628:	f107 0413 	add.w	r4, r7, #19
 800662c:	9404      	str	r4, [sp, #16]
 800662e:	9203      	str	r2, [sp, #12]
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	9001      	str	r0, [sp, #4]
 8006634:	9100      	str	r1, [sp, #0]
 8006636:	4633      	mov	r3, r6
 8006638:	462a      	mov	r2, r5
 800663a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f00e fb45 	bl	8014ccc <VL53L1_ipp_hist_process_data>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d050      	beq.n	80066f2 <VL53L1_get_device_results+0x3f4>
 8006650:	7cfb      	ldrb	r3, [r7, #19]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d94d      	bls.n	80066f2 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006656:	2300      	movs	r3, #0
 8006658:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800665c:	e045      	b.n	80066ea <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 800665e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006662:	224c      	movs	r2, #76	; 0x4c
 8006664:	fb02 f303 	mul.w	r3, r2, r3
 8006668:	3310      	adds	r3, #16
 800666a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800666c:	4413      	add	r3, r2
 800666e:	3304      	adds	r3, #4
 8006670:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	7cfa      	ldrb	r2, [r7, #19]
 8006678:	fbb3 f2f2 	udiv	r2, r3, r2
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	7cfa      	ldrb	r2, [r7, #19]
 8006686:	fbb3 f2f2 	udiv	r2, r3, r2
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	7cfa      	ldrb	r2, [r7, #19]
 8006694:	fb93 f2f2 	sdiv	r2, r3, r2
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80066a0:	461a      	mov	r2, r3
 80066a2:	7cfb      	ldrb	r3, [r7, #19]
 80066a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066b2:	461a      	mov	r2, r3
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80066c4:	461a      	mov	r2, r3
 80066c6:	7cfb      	ldrb	r3, [r7, #19]
 80066c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	7cfa      	ldrb	r2, [r7, #19]
 80066d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80066e0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066e4:	3301      	adds	r3, #1
 80066e6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80066ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d9b5      	bls.n	800665e <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 80066f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 80ae 	bne.w	8006858 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 80066fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066fe:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006704:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800670a:	330e      	adds	r3, #14
 800670c:	461a      	mov	r2, r3
 800670e:	f006 f922 	bl	800c956 <VL53L1_hist_wrap_dmax>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8006718:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 809d 	bne.w	800685c <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006724:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 800672c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006734:	4413      	add	r3, r2
 8006736:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006738:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 800673c:	4613      	mov	r3, r2
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800674a:	4413      	add	r3, r2
 800674c:	f103 0208 	add.w	r2, r3, #8
 8006750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f005 fc1d 	bl	800bf92 <VL53L1_hist_phase_consistency_check>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 800675e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006762:	2b00      	cmp	r3, #0
 8006764:	d17c      	bne.n	8006860 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800676c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006778:	4413      	add	r3, r2
 800677a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800677c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006780:	4613      	mov	r3, r2
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800678c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800678e:	4413      	add	r3, r2
 8006790:	f103 0208 	add.w	r2, r3, #8
 8006794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f006 f883 	bl	800c8a6 <VL53L1_hist_xmonitor_consistency_check>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 80067a6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d15a      	bne.n	8006864 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80067ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	2210      	movs	r2, #16
 80067bc:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80067be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80067c4:	3301      	adds	r3, #1
 80067c6:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067d2:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80067d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d6:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80067da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067de:	429a      	cmp	r2, r3
 80067e0:	d222      	bcs.n	8006828 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 80067e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 80067f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f6:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 80067fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fe:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8006806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006808:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006812:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800681a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681c:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800681e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006820:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006826:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8006828:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11b      	bne.n	8006868 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006832:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 800683c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006842:	331c      	adds	r3, #28
 8006844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006846:	f006 fbbe 	bl	800cfc6 <VL53L1_hist_copy_results_to_sys_and_core>
 800684a:	e00e      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800684c:	bf00      	nop
 800684e:	e00c      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006850:	bf00      	nop
 8006852:	e00a      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006854:	bf00      	nop
 8006856:	e008      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006858:	bf00      	nop
 800685a:	e006      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006868:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800686a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d036      	beq.n	80068e0 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8006872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006874:	79db      	ldrb	r3, [r3, #7]
 8006876:	2b06      	cmp	r3, #6
 8006878:	d00a      	beq.n	8006890 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800687a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 8006882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f006 fc73 	bl	800d170 <VL53L1_dynamic_zone_update>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8006890:	2300      	movs	r3, #0
 8006892:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006896:	e015      	b.n	80068c4 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8006898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800689e:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <VL53L1_get_device_results+0x5ac>
 80068a6:	2103      	movs	r1, #3
 80068a8:	e000      	b.n	80068ac <VL53L1_get_device_results+0x5ae>
 80068aa:	2101      	movs	r1, #1
 80068ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068b2:	4413      	add	r3, r2
 80068b4:	460a      	mov	r2, r1
 80068b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80068ba:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068be:	3301      	adds	r3, #1
 80068c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80068c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	d9e5      	bls.n	8006898 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80068cc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f006 fcc6 	bl	800d266 <VL53L1_multizone_hist_bins_update>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 80068e0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f007 f9d3 	bl	800dc94 <VL53L1_dynamic_xtalk_correction_corrector>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 80068f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d043      	beq.n	8006984 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	e03e      	b.n	8006984 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8006906:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800690a:	2b00      	cmp	r3, #0
 800690c:	d107      	bne.n	800691e <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	4619      	mov	r1, r3
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fc35 	bl	8006182 <VL53L1_get_measurement_results>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 800691e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8006926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006928:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 800692c:	4618      	mov	r0, r3
 800692e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006930:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006936:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800693a:	321c      	adds	r2, #28
 800693c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800693e:	f000 fc1f 	bl	8007180 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d11c      	bne.n	8006984 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800694a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10d      	bne.n	800696e <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f007 fe24 	bl	800e5a8 <VL53L1_low_power_auto_setup_manual_calibration>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2201      	movs	r2, #1
 800696a:	709a      	strb	r2, [r3, #2]
 800696c:	e00a      	b.n	8006984 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 800696e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800697a:	2b01      	cmp	r3, #1
 800697c:	d102      	bne.n	8006984 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2202      	movs	r2, #2
 8006982:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006986:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800698a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800698c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800698e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006990:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006996:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8006998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800699e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a0:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80069a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80b0 	bne.w	8006b0c <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80069ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ae:	2210      	movs	r2, #16
 80069b0:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80069b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069b6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c0:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80069c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80069ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d0:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80069d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80069d8:	429a      	cmp	r2, r3
 80069da:	f080 8097 	bcs.w	8006b0c <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80069de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 80069e2:	4613      	mov	r3, r2
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80069ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069f0:	4413      	add	r3, r2
 80069f2:	3308      	adds	r3, #8
 80069f4:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 80069f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f8:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 80069fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069fc:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	785a      	ldrb	r2, [r3, #1]
 8006a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a04:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8006a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a08:	789a      	ldrb	r2, [r3, #2]
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0c:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a10:	78da      	ldrb	r2, [r3, #3]
 8006a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a14:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 8006a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a18:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006a20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a22:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 8006a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a28:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 8006a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a2c:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8006a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a38:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a44:	7c5a      	ldrb	r2, [r3, #17]
 8006a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a48:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	7c9a      	ldrb	r2, [r3, #18]
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a50:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006a52:	2300      	movs	r3, #0
 8006a54:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006a58:	e052      	b.n	8006b00 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006a5a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006a5e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a64:	204c      	movs	r0, #76	; 0x4c
 8006a66:	fb00 f303 	mul.w	r3, r0, r3
 8006a6a:	440b      	add	r3, r1
 8006a6c:	3338      	adds	r3, #56	; 0x38
 8006a6e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006a70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006a72:	4613      	mov	r3, r2
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4403      	add	r3, r0
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006a80:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006a84:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 8006a88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a8a:	204c      	movs	r0, #76	; 0x4c
 8006a8c:	fb00 f303 	mul.w	r3, r0, r3
 8006a90:	440b      	add	r3, r1
 8006a92:	333c      	adds	r3, #60	; 0x3c
 8006a94:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 8006a96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006a98:	4613      	mov	r3, r2
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4403      	add	r3, r0
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006aa6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006aaa:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006aae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab0:	204c      	movs	r0, #76	; 0x4c
 8006ab2:	fb00 f303 	mul.w	r3, r0, r3
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3354      	adds	r3, #84	; 0x54
 8006aba:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3310      	adds	r3, #16
 8006aca:	4602      	mov	r2, r0
 8006acc:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8006ace:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8006ad2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8006ad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ad8:	204c      	movs	r0, #76	; 0x4c
 8006ada:	fb00 f303 	mul.w	r3, r0, r3
 8006ade:	440b      	add	r3, r1
 8006ae0:	335e      	adds	r3, #94	; 0x5e
 8006ae2:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	3312      	adds	r3, #18
 8006af2:	4602      	mov	r2, r0
 8006af4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8006af6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006afa:	3301      	adds	r3, #1
 8006afc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b02:	7c9b      	ldrb	r3, [r3, #18]
 8006b04:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d3a6      	bcc.n	8006a5a <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006b0c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006b10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f012 fe58 	bl	80197c8 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006b18:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f003 ff35 	bl	800a990 <VL53L1_check_ll_driver_rd_state>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006b2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3768      	adds	r7, #104	; 0x68
 8006b34:	46bd      	mov	sp, r7
 8006b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b3a <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8006b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	2203      	movs	r2, #3
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fe fff3 	bl	8005b44 <VL53L1_init_and_start_range>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b0d2      	sub	sp, #328	; 0x148
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b7e:	6018      	str	r0, [r3, #0]
 8006b80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b88:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006b90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006ba0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ba4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006bae:	3308      	adds	r3, #8
 8006bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bb8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006bbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006bc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bc4:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006bcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bd0:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006bd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8006bd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bdc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006be0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006be4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006be8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006bec:	f107 030c 	add.w	r3, r7, #12
 8006bf0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006c1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c22:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006c2a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10d      	bne.n	8006c4e <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006c32:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c36:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006c3a:	2353      	movs	r3, #83	; 0x53
 8006c3c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006c40:	2188      	movs	r1, #136	; 0x88
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	f00d fe32 	bl	80148ac <VL53L1_ReadMulti>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006c4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c52:	781a      	ldrb	r2, [r3, #0]
 8006c54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006c62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c66:	785a      	ldrb	r2, [r3, #1]
 8006c68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006c76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c7a:	789a      	ldrb	r2, [r3, #2]
 8006c7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006c8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c8e:	78da      	ldrb	r2, [r3, #3]
 8006c90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006c9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	2002      	movs	r0, #2
 8006ca8:	f004 fb75 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006cb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006cbe:	234e      	movs	r3, #78	; 0x4e
 8006cc0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006cc4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006cc8:	f107 020c 	add.w	r2, r7, #12
 8006ccc:	4413      	add	r3, r2
 8006cce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006cd2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006cd6:	2002      	movs	r0, #2
 8006cd8:	f004 fb5d 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006ce0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ce4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006cee:	2350      	movs	r3, #80	; 0x50
 8006cf0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006cf4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006cf8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006cfc:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d00:	5cd2      	ldrb	r2, [r2, r3]
 8006d02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d06:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006d10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006d1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006d2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d2e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006d38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d40:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006d44:	2351      	movs	r3, #81	; 0x51
 8006d46:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006d4a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d4e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d52:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d56:	5cd3      	ldrb	r3, [r2, r3]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006d5e:	2352      	movs	r3, #82	; 0x52
 8006d60:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006d64:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d68:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d6c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d70:	5cd2      	ldrb	r2, [r2, r3]
 8006d72:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006d76:	4413      	add	r3, r2
 8006d78:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006d7c:	234d      	movs	r3, #77	; 0x4d
 8006d7e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006d82:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d86:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006d8a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006d8e:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006d92:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006d94:	2306      	movs	r3, #6
 8006d96:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006d9a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006d9e:	f107 020c 	add.w	r2, r7, #12
 8006da2:	4413      	add	r3, r2
 8006da4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006dae:	e01a      	b.n	8006de6 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006db0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006db4:	2003      	movs	r0, #3
 8006db6:	f004 fb8d 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 8006dba:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006dbc:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006dc0:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006dc2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dc6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3206      	adds	r2, #6
 8006dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006dd2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006dd6:	3303      	adds	r3, #3
 8006dd8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006ddc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006de0:	3301      	adds	r3, #1
 8006de2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006de6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006dea:	2b17      	cmp	r3, #23
 8006dec:	d9e0      	bls.n	8006db0 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006dee:	f107 0208 	add.w	r2, r7, #8
 8006df2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006df6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006dfa:	f248 018d 	movw	r1, #32909	; 0x808d
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	f000 fbd0 	bl	80075a4 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006e04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d118      	bne.n	8006e48 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e1a:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006e1e:	3318      	adds	r3, #24
 8006e20:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f012 fcdc 	bl	80197e4 <memset>
		pdev->bin_rec_pos = 0;
 8006e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d10b      	bne.n	8006e6e <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006e56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e5a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006e5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e66:	6811      	ldr	r1, [r2, #0]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	f7fd f97e 	bl	800416a <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006e6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e72:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006e76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e7a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006e82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e86:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006e90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2218      	movs	r2, #24
 8006e9c:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006e9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ea2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2218      	movs	r2, #24
 8006eaa:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006eac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006eb0:	78da      	ldrb	r2, [r3, #3]
 8006eb2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006eb6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006ec0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ec4:	799b      	ldrb	r3, [r3, #6]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	011b      	lsls	r3, r3, #4
 8006eca:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006ecc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ed0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006eda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ede:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eec:	7c1b      	ldrb	r3, [r3, #16]
 8006eee:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006ef0:	4413      	add	r3, r2
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ef8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f06:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006f08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006f16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f1a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006f1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006f26:	6811      	ldr	r1, [r2, #0]
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	f004 fed4 	bl	800bcd6 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d117      	bne.n	8006f6a <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006f3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006f46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f4a:	795b      	ldrb	r3, [r3, #5]
 8006f4c:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006f4e:	4413      	add	r3, r2
 8006f50:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006f54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f58:	799a      	ldrb	r2, [r3, #6]
 8006f5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f5e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006f68:	e016      	b.n	8006f98 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006f6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f6e:	79db      	ldrb	r3, [r3, #7]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006f76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f7a:	7a1b      	ldrb	r3, [r3, #8]
 8006f7c:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006f7e:	4413      	add	r3, r2
 8006f80:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f88:	7a5a      	ldrb	r2, [r3, #9]
 8006f8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f8e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006f98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006fac:	e01f      	b.n	8006fee <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006fae:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006fb2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006fb6:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d10d      	bne.n	8006fe4 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006fc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	7adb      	ldrb	r3, [r3, #11]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006fd8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006fe4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006fe8:	3301      	adds	r3, #1
 8006fea:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006fee:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	d9db      	bls.n	8006fae <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006ff6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f004 fcdb 	bl	800b9b6 <VL53L1_decode_timeout>
 8007000:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8007002:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007006:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8007010:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007014:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800701e:	4618      	mov	r0, r3
 8007020:	f007 fb54 	bl	800e6cc <VL53L1_calc_pll_period_us>
 8007024:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8007028:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800702c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	3301      	adds	r3, #1
 8007038:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 800703c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007040:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 800704a:	4619      	mov	r1, r3
 800704c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007054:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8007058:	f007 fb4f 	bl	800e6fa <VL53L1_duration_maths>
 800705c:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800705e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007062:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800706c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007070:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 800707c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007080:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f007 fc5e 	bl	800e946 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 800708a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800708e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	f008 f875 	bl	800f182 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8007098:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800709c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80070ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070b0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80070b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 80070c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	461a      	mov	r2, r3
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80070da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80070de:	4413      	add	r3, r2
 80070e0:	3302      	adds	r3, #2
 80070e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80070e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ea:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80070ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80070f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80070fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070fe:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8007100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007104:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800710e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007112:	2200      	movs	r2, #0
 8007114:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8007116:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800711a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007124:	f003 031f 	and.w	r3, r3, #31
 8007128:	2b11      	cmp	r3, #17
 800712a:	bf8c      	ite	hi
 800712c:	2201      	movhi	r2, #1
 800712e:	2200      	movls	r2, #0
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	2a00      	cmp	r2, #0
 8007134:	d11b      	bne.n	800716e <VL53L1_get_histogram_bin_data+0x5fe>
 8007136:	2201      	movs	r2, #1
 8007138:	409a      	lsls	r2, r3
 800713a:	4b10      	ldr	r3, [pc, #64]	; (800717c <VL53L1_get_histogram_bin_data+0x60c>)
 800713c:	4013      	ands	r3, r2
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf14      	ite	ne
 8007142:	2301      	movne	r3, #1
 8007144:	2300      	moveq	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d010      	beq.n	800716e <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800714c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007150:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	b2da      	uxtb	r2, r3
 8007160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007164:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8007166:	23fa      	movs	r3, #250	; 0xfa
 8007168:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 800716c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800716e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8007172:	4618      	mov	r0, r3
 8007174:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	0002200e 	.word	0x0002200e

08007180 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8007180:	b480      	push	{r7}
 8007182:	b08b      	sub	sp, #44	; 0x2c
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	78da      	ldrb	r2, [r3, #3]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2200      	movs	r2, #0
 80071ae:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2204      	movs	r2, #4
 80071b4:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2201      	movs	r2, #1
 80071ba:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	8a1b      	ldrh	r3, [r3, #16]
 80071c0:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	8a9b      	ldrh	r3, [r3, #20]
 80071c6:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	8a5b      	ldrh	r3, [r3, #18]
 80071cc:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071d4:	e00b      	b.n	80071ee <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 80071d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	2200      	movs	r2, #0
 80071e2:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 80071e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071e8:	3301      	adds	r3, #1
 80071ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d9ef      	bls.n	80071d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	3314      	adds	r3, #20
 80071fa:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007202:	e0fe      	b.n	8007402 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800720a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	2200      	movs	r2, #0
 8007210:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	78db      	ldrb	r3, [r3, #3]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8007222:	2b09      	cmp	r3, #9
 8007224:	d104      	bne.n	8007230 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	2213      	movs	r2, #19
 800722a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800722e:	e007      	b.n	8007240 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	2200      	movs	r2, #0
 8007244:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	2200      	movs	r2, #0
 800724a:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2200      	movs	r2, #0
 8007250:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	2200      	movs	r2, #0
 8007256:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	2200      	movs	r2, #0
 800725c:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	2200      	movs	r2, #0
 8007262:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8007264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d05c      	beq.n	800732a <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8007270:	e0a8      	b.n	80073c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	789b      	ldrb	r3, [r3, #2]
 8007276:	2b07      	cmp	r3, #7
 8007278:	d103      	bne.n	8007282 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	8a7a      	ldrh	r2, [r7, #18]
 800727e:	82da      	strh	r2, [r3, #22]
 8007280:	e00b      	b.n	800729a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	789b      	ldrb	r3, [r3, #2]
 8007286:	2b08      	cmp	r3, #8
 8007288:	d103      	bne.n	8007292 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	8aba      	ldrh	r2, [r7, #20]
 800728e:	82da      	strh	r2, [r3, #22]
 8007290:	e003      	b.n	800729a <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	8afa      	ldrh	r2, [r7, #22]
 800729e:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	895b      	ldrh	r3, [r3, #10]
 80072b4:	015b      	lsls	r3, r3, #5
 80072b6:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072be:	d302      	bcc.n	80072c6 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80072c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072c4:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80072dc:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ee:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	da01      	bge.n	80072fa <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 80072f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80072fa:	12db      	asrs	r3, r3, #11
 80072fc:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	b21a      	sxth	r2, r3
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007328:	e04c      	b.n	80073c4 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007340:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	8bdb      	ldrh	r3, [r3, #30]
 800734e:	015b      	lsls	r3, r3, #5
 8007350:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007358:	d302      	bcc.n	8007360 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800735a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800735e:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	b29a      	uxth	r2, r3
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8007376:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007388:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	da01      	bge.n	8007394 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8007390:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8007394:	12db      	asrs	r3, r3, #11
 8007396:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	b21a      	sxth	r2, r3
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80073c2:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073ca:	6a3b      	ldr	r3, [r7, #32]
 80073cc:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	334c      	adds	r3, #76	; 0x4c
 80073f6:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80073f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073fc:	3301      	adds	r3, #1
 80073fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007406:	2b01      	cmp	r3, #1
 8007408:	f67f aefc 	bls.w	8007204 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2b11      	cmp	r3, #17
 800741c:	bf8c      	ite	hi
 800741e:	2201      	movhi	r2, #1
 8007420:	2200      	movls	r2, #0
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	2a00      	cmp	r2, #0
 8007426:	d116      	bne.n	8007456 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf14      	ite	ne
 8007434:	2301      	movne	r3, #1
 8007436:	2300      	moveq	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	b2da      	uxtb	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8007454:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8007456:	bf00      	nop
 8007458:	372c      	adds	r7, #44	; 0x2c
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	0002200e 	.word	0x0002200e

08007468 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3318      	adds	r3, #24
 800747a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	332c      	adds	r3, #44	; 0x2c
 8007480:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b05      	cmp	r3, #5
 8007488:	d109      	bne.n	800749e <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 800749c:	e003      	b.n	80074a6 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80074a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3318      	adds	r3, #24
 80074ca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80074d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b088      	sub	sp, #32
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	607b      	str	r3, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	72fb      	strb	r3, [r7, #11]
 80074f0:	4613      	mov	r3, r2
 80074f2:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3318      	adds	r3, #24
 80074fc:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007504:	3308      	adds	r3, #8
 8007506:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d006      	beq.n	800751c <VL53L1_get_dmax_calibration_data+0x3a>
 800750e:	2b03      	cmp	r3, #3
 8007510:	dc3e      	bgt.n	8007590 <VL53L1_get_dmax_calibration_data+0xae>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d034      	beq.n	8007580 <VL53L1_get_dmax_calibration_data+0x9e>
 8007516:	2b02      	cmp	r3, #2
 8007518:	d02a      	beq.n	8007570 <VL53L1_get_dmax_calibration_data+0x8e>
 800751a:	e039      	b.n	8007590 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 800751c:	7aba      	ldrb	r2, [r7, #10]
 800751e:	6979      	ldr	r1, [r7, #20]
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	440b      	add	r3, r1
 800752a:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8007536:	7aba      	ldrb	r2, [r7, #10]
 8007538:	6979      	ldr	r1, [r7, #20]
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	1a9b      	subs	r3, r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8007556:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800756c:	811a      	strh	r2, [r3, #8]
	break;
 800756e:	e012      	b.n	8007596 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8007574:	220a      	movs	r2, #10
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f012 f925 	bl	80197c8 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800757e:	e00a      	b.n	8007596 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8007584:	220a      	movs	r2, #10
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f012 f91d 	bl	80197c8 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800758e:	e002      	b.n	8007596 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007590:	23fc      	movs	r3, #252	; 0xfc
 8007592:	77fb      	strb	r3, [r7, #31]
	break;
 8007594:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007596:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	; 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	460b      	mov	r3, r1
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3318      	adds	r3, #24
 80075ba:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80075c2:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80075ca:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80075cc:	897b      	ldrh	r3, [r7, #10]
 80075ce:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80075d2:	2bbe      	cmp	r3, #190	; 0xbe
 80075d4:	f200 86fc 	bhi.w	80083d0 <VL53L1_get_tuning_parm+0xe2c>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <VL53L1_get_tuning_parm+0x3c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	080078dd 	.word	0x080078dd
 80075e4:	080078ed 	.word	0x080078ed
 80075e8:	080078fd 	.word	0x080078fd
 80075ec:	0800790d 	.word	0x0800790d
 80075f0:	0800791b 	.word	0x0800791b
 80075f4:	08007929 	.word	0x08007929
 80075f8:	08007937 	.word	0x08007937
 80075fc:	08007945 	.word	0x08007945
 8007600:	08007953 	.word	0x08007953
 8007604:	08007961 	.word	0x08007961
 8007608:	0800796f 	.word	0x0800796f
 800760c:	0800797b 	.word	0x0800797b
 8007610:	08007989 	.word	0x08007989
 8007614:	08007997 	.word	0x08007997
 8007618:	080079a3 	.word	0x080079a3
 800761c:	080079b1 	.word	0x080079b1
 8007620:	080079bf 	.word	0x080079bf
 8007624:	080079cf 	.word	0x080079cf
 8007628:	080079df 	.word	0x080079df
 800762c:	080079ed 	.word	0x080079ed
 8007630:	080079fd 	.word	0x080079fd
 8007634:	08007a0b 	.word	0x08007a0b
 8007638:	08007a1b 	.word	0x08007a1b
 800763c:	08007a2b 	.word	0x08007a2b
 8007640:	08007a3b 	.word	0x08007a3b
 8007644:	08007a4b 	.word	0x08007a4b
 8007648:	08007a5b 	.word	0x08007a5b
 800764c:	08007a6b 	.word	0x08007a6b
 8007650:	08007a7b 	.word	0x08007a7b
 8007654:	08007a8b 	.word	0x08007a8b
 8007658:	08007a9b 	.word	0x08007a9b
 800765c:	08007aa9 	.word	0x08007aa9
 8007660:	08007ab9 	.word	0x08007ab9
 8007664:	08007ac9 	.word	0x08007ac9
 8007668:	08007ad9 	.word	0x08007ad9
 800766c:	08007ae9 	.word	0x08007ae9
 8007670:	08007af9 	.word	0x08007af9
 8007674:	08007b09 	.word	0x08007b09
 8007678:	08007b19 	.word	0x08007b19
 800767c:	08007b29 	.word	0x08007b29
 8007680:	08007b39 	.word	0x08007b39
 8007684:	08007b49 	.word	0x08007b49
 8007688:	08007b59 	.word	0x08007b59
 800768c:	08007b69 	.word	0x08007b69
 8007690:	08007b79 	.word	0x08007b79
 8007694:	08007b89 	.word	0x08007b89
 8007698:	08007b99 	.word	0x08007b99
 800769c:	08007ba9 	.word	0x08007ba9
 80076a0:	08007bb9 	.word	0x08007bb9
 80076a4:	08007bc9 	.word	0x08007bc9
 80076a8:	08007bd9 	.word	0x08007bd9
 80076ac:	08007be7 	.word	0x08007be7
 80076b0:	08007bf5 	.word	0x08007bf5
 80076b4:	08007c03 	.word	0x08007c03
 80076b8:	08007c11 	.word	0x08007c11
 80076bc:	08007c1f 	.word	0x08007c1f
 80076c0:	08007c2d 	.word	0x08007c2d
 80076c4:	08007c3b 	.word	0x08007c3b
 80076c8:	08007c49 	.word	0x08007c49
 80076cc:	08007c57 	.word	0x08007c57
 80076d0:	08007c65 	.word	0x08007c65
 80076d4:	08007c73 	.word	0x08007c73
 80076d8:	08007c81 	.word	0x08007c81
 80076dc:	08007c8f 	.word	0x08007c8f
 80076e0:	08007c9d 	.word	0x08007c9d
 80076e4:	08007cab 	.word	0x08007cab
 80076e8:	08007cb9 	.word	0x08007cb9
 80076ec:	08007cc7 	.word	0x08007cc7
 80076f0:	08007cd5 	.word	0x08007cd5
 80076f4:	08007ce3 	.word	0x08007ce3
 80076f8:	08007cf1 	.word	0x08007cf1
 80076fc:	08007cff 	.word	0x08007cff
 8007700:	08007d0d 	.word	0x08007d0d
 8007704:	08007d1b 	.word	0x08007d1b
 8007708:	08007d27 	.word	0x08007d27
 800770c:	08007d35 	.word	0x08007d35
 8007710:	08007d43 	.word	0x08007d43
 8007714:	08007d4f 	.word	0x08007d4f
 8007718:	08007d5b 	.word	0x08007d5b
 800771c:	08007d67 	.word	0x08007d67
 8007720:	08007d73 	.word	0x08007d73
 8007724:	08007d7f 	.word	0x08007d7f
 8007728:	08007d8b 	.word	0x08007d8b
 800772c:	08007d99 	.word	0x08007d99
 8007730:	08007da7 	.word	0x08007da7
 8007734:	08007db5 	.word	0x08007db5
 8007738:	08007dc3 	.word	0x08007dc3
 800773c:	08007dd1 	.word	0x08007dd1
 8007740:	08007ddf 	.word	0x08007ddf
 8007744:	08007ded 	.word	0x08007ded
 8007748:	08007dfb 	.word	0x08007dfb
 800774c:	08007e09 	.word	0x08007e09
 8007750:	08007e17 	.word	0x08007e17
 8007754:	08007e25 	.word	0x08007e25
 8007758:	08007e33 	.word	0x08007e33
 800775c:	08007e41 	.word	0x08007e41
 8007760:	08007e4f 	.word	0x08007e4f
 8007764:	08007e5d 	.word	0x08007e5d
 8007768:	08007e6b 	.word	0x08007e6b
 800776c:	08007e79 	.word	0x08007e79
 8007770:	08007e87 	.word	0x08007e87
 8007774:	08007e95 	.word	0x08007e95
 8007778:	08007ea3 	.word	0x08007ea3
 800777c:	08007eb1 	.word	0x08007eb1
 8007780:	08007ebf 	.word	0x08007ebf
 8007784:	08007ecd 	.word	0x08007ecd
 8007788:	08007edb 	.word	0x08007edb
 800778c:	08007ee9 	.word	0x08007ee9
 8007790:	08007ef7 	.word	0x08007ef7
 8007794:	08007f05 	.word	0x08007f05
 8007798:	08007f13 	.word	0x08007f13
 800779c:	08007f21 	.word	0x08007f21
 80077a0:	08007f2f 	.word	0x08007f2f
 80077a4:	08007f3d 	.word	0x08007f3d
 80077a8:	08007f4b 	.word	0x08007f4b
 80077ac:	08007f59 	.word	0x08007f59
 80077b0:	08007f67 	.word	0x08007f67
 80077b4:	08007f75 	.word	0x08007f75
 80077b8:	08007f83 	.word	0x08007f83
 80077bc:	08007f95 	.word	0x08007f95
 80077c0:	08007fa7 	.word	0x08007fa7
 80077c4:	08007fb9 	.word	0x08007fb9
 80077c8:	08007fcb 	.word	0x08007fcb
 80077cc:	08007fdd 	.word	0x08007fdd
 80077d0:	08007fef 	.word	0x08007fef
 80077d4:	08008001 	.word	0x08008001
 80077d8:	08008013 	.word	0x08008013
 80077dc:	08008025 	.word	0x08008025
 80077e0:	08008037 	.word	0x08008037
 80077e4:	08008049 	.word	0x08008049
 80077e8:	0800805b 	.word	0x0800805b
 80077ec:	0800806d 	.word	0x0800806d
 80077f0:	0800807f 	.word	0x0800807f
 80077f4:	08008091 	.word	0x08008091
 80077f8:	080080a3 	.word	0x080080a3
 80077fc:	080080b5 	.word	0x080080b5
 8007800:	080080c7 	.word	0x080080c7
 8007804:	080080d9 	.word	0x080080d9
 8007808:	080080e7 	.word	0x080080e7
 800780c:	080080f5 	.word	0x080080f5
 8007810:	08008103 	.word	0x08008103
 8007814:	08008111 	.word	0x08008111
 8007818:	0800811f 	.word	0x0800811f
 800781c:	0800812d 	.word	0x0800812d
 8007820:	0800813b 	.word	0x0800813b
 8007824:	0800814d 	.word	0x0800814d
 8007828:	0800815b 	.word	0x0800815b
 800782c:	08008169 	.word	0x08008169
 8007830:	08008177 	.word	0x08008177
 8007834:	08008185 	.word	0x08008185
 8007838:	08008193 	.word	0x08008193
 800783c:	080081a1 	.word	0x080081a1
 8007840:	080081af 	.word	0x080081af
 8007844:	080081bd 	.word	0x080081bd
 8007848:	080081cb 	.word	0x080081cb
 800784c:	080081d9 	.word	0x080081d9
 8007850:	080081e7 	.word	0x080081e7
 8007854:	080081f5 	.word	0x080081f5
 8007858:	08008203 	.word	0x08008203
 800785c:	08008211 	.word	0x08008211
 8007860:	0800821f 	.word	0x0800821f
 8007864:	0800822d 	.word	0x0800822d
 8007868:	0800823b 	.word	0x0800823b
 800786c:	08008249 	.word	0x08008249
 8007870:	08008257 	.word	0x08008257
 8007874:	08008265 	.word	0x08008265
 8007878:	08008273 	.word	0x08008273
 800787c:	08008281 	.word	0x08008281
 8007880:	0800828f 	.word	0x0800828f
 8007884:	0800829d 	.word	0x0800829d
 8007888:	080082ab 	.word	0x080082ab
 800788c:	080082b9 	.word	0x080082b9
 8007890:	080082c7 	.word	0x080082c7
 8007894:	080082d5 	.word	0x080082d5
 8007898:	080082e3 	.word	0x080082e3
 800789c:	080082f1 	.word	0x080082f1
 80078a0:	080082ff 	.word	0x080082ff
 80078a4:	0800830d 	.word	0x0800830d
 80078a8:	0800831b 	.word	0x0800831b
 80078ac:	08008329 	.word	0x08008329
 80078b0:	08008337 	.word	0x08008337
 80078b4:	08008345 	.word	0x08008345
 80078b8:	08008353 	.word	0x08008353
 80078bc:	08008361 	.word	0x08008361
 80078c0:	0800836f 	.word	0x0800836f
 80078c4:	0800837d 	.word	0x0800837d
 80078c8:	0800838b 	.word	0x0800838b
 80078cc:	08008399 	.word	0x08008399
 80078d0:	080083a7 	.word	0x080083a7
 80078d4:	080083b5 	.word	0x080083b5
 80078d8:	080083c3 	.word	0x080083c3

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80078e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
	break;
 80078e8:	f000 bd79 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 80078f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
	break;
 80078f8:	f000 bd71 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007902:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	break;
 8007908:	f000 bd69 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	break;
 8007916:	f000 bd62 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	break;
 8007924:	f000 bd5b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	789b      	ldrb	r3, [r3, #2]
 800792c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	601a      	str	r2, [r3, #0]
	break;
 8007932:	f000 bd54 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
	break;
 8007940:	f000 bd4d 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	791b      	ldrb	r3, [r3, #4]
 8007948:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
	break;
 800794e:	f000 bd46 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]
	break;
 800795c:	f000 bd3f 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	799b      	ldrb	r3, [r3, #6]
 8007964:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
	break;
 800796a:	f000 bd38 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	601a      	str	r2, [r3, #0]
	break;
 8007976:	f000 bd32 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	891b      	ldrh	r3, [r3, #8]
 800797e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	break;
 8007984:	f000 bd2b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	8a1b      	ldrh	r3, [r3, #16]
 800798c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
	break;
 8007992:	f000 bd24 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
	break;
 800799e:	f000 bd1e 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	7e1b      	ldrb	r3, [r3, #24]
 80079a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
	break;
 80079ac:	f000 bd17 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	8b5b      	ldrh	r3, [r3, #26]
 80079b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
	break;
 80079ba:	f000 bd10 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80079c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
	break;
 80079ca:	f000 bd08 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80079d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
	break;
 80079da:	f000 bd00 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
	break;
 80079e8:	f000 bcf9 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80079f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
	break;
 80079f8:	f000 bcf1 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
	break;
 8007a06:	f000 bcea 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007a10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
	break;
 8007a16:	f000 bce2 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007a20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
	break;
 8007a26:	f000 bcda 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007a30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
	break;
 8007a36:	f000 bcd2 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007a40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	break;
 8007a46:	f000 bcca 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
	break;
 8007a56:	f000 bcc2 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007a60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
	break;
 8007a66:	f000 bcba 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007a70:	461a      	mov	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	601a      	str	r2, [r3, #0]
	break;
 8007a76:	f000 bcb2 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	601a      	str	r2, [r3, #0]
	break;
 8007a86:	f000 bcaa 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8007a90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	601a      	str	r2, [r3, #0]
	break;
 8007a96:	f000 bca2 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]
	break;
 8007aa4:	f000 bc9b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
	break;
 8007ab4:	f000 bc93 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007abe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	601a      	str	r2, [r3, #0]
	break;
 8007ac4:	f000 bc8b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8007ace:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
	break;
 8007ad4:	f000 bc83 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
	break;
 8007ae4:	f000 bc7b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
	break;
 8007af4:	f000 bc73 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007afe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	601a      	str	r2, [r3, #0]
	break;
 8007b04:	f000 bc6b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007b0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]
	break;
 8007b14:	f000 bc63 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007b1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
	break;
 8007b24:	f000 bc5b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
	break;
 8007b34:	f000 bc53 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	break;
 8007b44:	f000 bc4b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]
	break;
 8007b54:	f000 bc43 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	break;
 8007b64:	f000 bc3b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007b6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
	break;
 8007b74:	f000 bc33 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007b7e:	461a      	mov	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
	break;
 8007b84:	f000 bc2b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007b8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
	break;
 8007b94:	f000 bc23 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007b9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	break;
 8007ba4:	f000 bc1b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8007bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]
	break;
 8007bb4:	f000 bc13 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8007bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	break;
 8007bc4:	f000 bc0b 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8007bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
	break;
 8007bd4:	f000 bc03 	b.w	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007bde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]
	break;
 8007be4:	e3fb      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007bec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
	break;
 8007bf2:	e3f4      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8007bfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
	break;
 8007c00:	e3ed      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007c08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
	break;
 8007c0e:	e3e6      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8007c16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	601a      	str	r2, [r3, #0]
	break;
 8007c1c:	e3df      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007c24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	601a      	str	r2, [r3, #0]
	break;
 8007c2a:	e3d8      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007c32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]
	break;
 8007c38:	e3d1      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007c40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	601a      	str	r2, [r3, #0]
	break;
 8007c46:	e3ca      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007c4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	601a      	str	r2, [r3, #0]
	break;
 8007c54:	e3c3      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007c5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
	break;
 8007c62:	e3bc      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007c6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
	break;
 8007c70:	e3b5      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007c78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
	break;
 8007c7e:	e3ae      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8007c86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]
	break;
 8007c8c:	e3a7      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007c94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
	break;
 8007c9a:	e3a0      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007ca2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
	break;
 8007ca8:	e399      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007cb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
	break;
 8007cb6:	e392      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007cbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	601a      	str	r2, [r3, #0]
	break;
 8007cc4:	e38b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007ccc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	601a      	str	r2, [r3, #0]
	break;
 8007cd2:	e384      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007cda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
	break;
 8007ce0:	e37d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8007ce8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	601a      	str	r2, [r3, #0]
	break;
 8007cee:	e376      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8007cf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	601a      	str	r2, [r3, #0]
	break;
 8007cfc:	e36f      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007d04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	601a      	str	r2, [r3, #0]
	break;
 8007d0a:	e368      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007d12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
	break;
 8007d18:	e361      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
	break;
 8007d24:	e35b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007d2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
	break;
 8007d32:	e354      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	601a      	str	r2, [r3, #0]
	break;
 8007d40:	e34d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	881b      	ldrh	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
	break;
 8007d4c:	e347      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
	break;
 8007d58:	e341      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	8adb      	ldrh	r3, [r3, #22]
 8007d5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
	break;
 8007d64:	e33b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	8b1b      	ldrh	r3, [r3, #24]
 8007d6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
	break;
 8007d70:	e335      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	break;
 8007d7c:	e32f      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]
	break;
 8007d88:	e329      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007d90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
	break;
 8007d96:	e322      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007d9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
	break;
 8007da4:	e31b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
	break;
 8007db2:	e314      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007dba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
	break;
 8007dc0:	e30d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007dc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
	break;
 8007dce:	e306      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007dd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
	break;
 8007ddc:	e2ff      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
	break;
 8007dea:	e2f8      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007df2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
	break;
 8007df8:	e2f1      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007e00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	break;
 8007e06:	e2ea      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007e0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
	break;
 8007e14:	e2e3      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007e1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	601a      	str	r2, [r3, #0]
	break;
 8007e22:	e2dc      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	601a      	str	r2, [r3, #0]
	break;
 8007e30:	e2d5      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007e38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
	break;
 8007e3e:	e2ce      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007e46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
	break;
 8007e4c:	e2c7      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007e54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	601a      	str	r2, [r3, #0]
	break;
 8007e5a:	e2c0      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]
	break;
 8007e68:	e2b9      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007e70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	break;
 8007e76:	e2b2      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007e7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	601a      	str	r2, [r3, #0]
	break;
 8007e84:	e2ab      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007e8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
	break;
 8007e92:	e2a4      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007e9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
	break;
 8007ea0:	e29d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
	break;
 8007eae:	e296      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007eb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
	break;
 8007ebc:	e28f      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007ec4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
	break;
 8007eca:	e288      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
	break;
 8007ed8:	e281      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007ee0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	break;
 8007ee6:	e27a      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007eee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
	break;
 8007ef4:	e273      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007efc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
	break;
 8007f02:	e26c      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007f0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
	break;
 8007f10:	e265      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
	break;
 8007f1e:	e25e      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007f26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
	break;
 8007f2c:	e257      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007f34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
	break;
 8007f3a:	e250      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]
	break;
 8007f48:	e249      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	break;
 8007f56:	e242      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
	break;
 8007f64:	e23b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
	break;
 8007f72:	e234      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007f7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
	break;
 8007f80:	e22d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
	break;
 8007f92:	e224      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
	break;
 8007fa4:	e21b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fac:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007fb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
	break;
 8007fb6:	e212      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fbe:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007fc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]
	break;
 8007fc8:	e209      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
	break;
 8007fda:	e200      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe2:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007fe6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	601a      	str	r2, [r3, #0]
	break;
 8007fec:	e1f7      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	601a      	str	r2, [r3, #0]
	break;
 8007ffe:	e1ee      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008006:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800800a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
	break;
 8008010:	e1e5      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008018:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800801c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]
	break;
 8008022:	e1dc      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802a:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 800802e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	601a      	str	r2, [r3, #0]
	break;
 8008034:	e1d3      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8008040:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
	break;
 8008046:	e1ca      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8008052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
	break;
 8008058:	e1c1      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008060:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8008064:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	601a      	str	r2, [r3, #0]
	break;
 800806a:	e1b8      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008072:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	601a      	str	r2, [r3, #0]
	break;
 800807c:	e1af      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008084:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
	break;
 800808e:	e1a6      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008096:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800809a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	601a      	str	r2, [r3, #0]
	break;
 80080a0:	e19d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80080ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	601a      	str	r2, [r3, #0]
	break;
 80080b2:	e194      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ba:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 80080be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
	break;
 80080c4:	e18b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080cc:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80080d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	break;
 80080d6:	e182      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80080de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
	break;
 80080e4:	e17b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80080ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
	break;
 80080f2:	e174      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80080fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
	break;
 8008100:	e16d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008108:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
	break;
 800810e:	e166      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8008116:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	601a      	str	r2, [r3, #0]
	break;
 800811c:	e15f      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008124:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	601a      	str	r2, [r3, #0]
	break;
 800812a:	e158      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8008132:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
	break;
 8008138:	e151      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008140:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008144:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
	break;
 800814a:	e148      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8008152:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
	break;
 8008158:	e141      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8008160:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
	break;
 8008166:	e13a      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 800816e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	601a      	str	r2, [r3, #0]
	break;
 8008174:	e133      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800817c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	601a      	str	r2, [r3, #0]
	break;
 8008182:	e12c      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800818a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
	break;
 8008190:	e125      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8008198:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
	break;
 800819e:	e11e      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80081a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	601a      	str	r2, [r3, #0]
	break;
 80081ac:	e117      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80081b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
	break;
 80081ba:	e110      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80081c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	601a      	str	r2, [r3, #0]
	break;
 80081c8:	e109      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80081d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
	break;
 80081d6:	e102      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80081de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]
	break;
 80081e4:	e0fb      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80081ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
	break;
 80081f2:	e0f4      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80081fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]
	break;
 8008200:	e0ed      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8008208:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
	break;
 800820e:	e0e6      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8008216:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	601a      	str	r2, [r3, #0]
	break;
 800821c:	e0df      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8008224:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
	break;
 800822a:	e0d8      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8008232:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]
	break;
 8008238:	e0d1      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8008240:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
	break;
 8008246:	e0ca      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800824e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
	break;
 8008254:	e0c3      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800825c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	601a      	str	r2, [r3, #0]
	break;
 8008262:	e0bc      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800826a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	601a      	str	r2, [r3, #0]
	break;
 8008270:	e0b5      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8008278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
	break;
 800827e:	e0ae      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8008286:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	601a      	str	r2, [r3, #0]
	break;
 800828c:	e0a7      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8008294:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	601a      	str	r2, [r3, #0]
	break;
 800829a:	e0a0      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 80082a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
	break;
 80082a8:	e099      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 80082b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	break;
 80082b6:	e092      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80082be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	601a      	str	r2, [r3, #0]
	break;
 80082c4:	e08b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 80082cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	601a      	str	r2, [r3, #0]
	break;
 80082d2:	e084      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 80082da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	601a      	str	r2, [r3, #0]
	break;
 80082e0:	e07d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 80082e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
	break;
 80082ee:	e076      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 80082f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
	break;
 80082fc:	e06f      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8008304:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
	break;
 800830a:	e068      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8008312:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
	break;
 8008318:	e061      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008320:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	601a      	str	r2, [r3, #0]
	break;
 8008326:	e05a      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800832e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
	break;
 8008334:	e053      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800833c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
	break;
 8008342:	e04c      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800834a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	601a      	str	r2, [r3, #0]
	break;
 8008350:	e045      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8008358:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	601a      	str	r2, [r3, #0]
	break;
 800835e:	e03e      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8008366:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	601a      	str	r2, [r3, #0]
	break;
 800836c:	e037      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8008374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	601a      	str	r2, [r3, #0]
	break;
 800837a:	e030      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8008382:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	break;
 8008388:	e029      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8008390:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	601a      	str	r2, [r3, #0]
	break;
 8008396:	e022      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 800839e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
	break;
 80083a4:	e01b      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 80083ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
	break;
 80083b2:	e014      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80083ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	601a      	str	r2, [r3, #0]
	break;
 80083c0:	e00d      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80083c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
	break;
 80083ce:	e006      	b.n	80083de <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80083d6:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80083d8:	23fc      	movs	r3, #252	; 0xfc
 80083da:	77fb      	strb	r3, [r7, #31]
	break;
 80083dc:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80083de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3724      	adds	r7, #36	; 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop

080083f0 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3318      	adds	r3, #24
 8008400:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008408:	2201      	movs	r2, #1
 800840a:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800840e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3318      	adds	r3, #24
 800842e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008436:	2200      	movs	r2, #0
 8008438:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800843c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	3318      	adds	r3, #24
 800845c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008464:	2201      	movs	r2, #1
 8008466:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800846a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800847a:	b480      	push	{r7}
 800847c:	b085      	sub	sp, #20
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3318      	adds	r3, #24
 800848a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008492:	2200      	movs	r2, #0
 8008494:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8008498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3318      	adds	r3, #24
 80084b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80084c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3318      	adds	r3, #24
 80084e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80084f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2208      	movs	r2, #8
 8008514:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	220b      	movs	r2, #11
 800851a:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008522:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800852a:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008532:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800853a:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2212      	movs	r2, #18
 8008562:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220f      	movs	r2, #15
 8008568:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2202      	movs	r2, #2
 800856e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8008576:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220c      	movs	r2, #12
 800857c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800857e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	895b      	ldrh	r3, [r3, #10]
 80085a0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	895b      	ldrh	r3, [r3, #10]
 80085be:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085de:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2240      	movs	r2, #64	; 0x40
 80085ea:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d108      	bne.n	8008610 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d103      	bne.n	8008610 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	741a      	strb	r2, [r3, #16]
 800860e:	e002      	b.n	8008616 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2201      	movs	r2, #1
 8008614:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8008616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d114      	bne.n	8008648 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8008622:	2b01      	cmp	r3, #1
 8008624:	d110      	bne.n	8008648 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	7d9b      	ldrb	r3, [r3, #22]
 800863a:	f003 f879 	bl	800b730 <VL53L1_calc_range_ignore_threshold>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	831a      	strh	r2, [r3, #24]
 8008646:	e002      	b.n	800864e <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008654:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2232      	movs	r2, #50	; 0x32
 800865a:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008662:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	228c      	movs	r2, #140	; 0x8c
 8008668:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800866a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008688:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008690:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2207      	movs	r2, #7
 8008696:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800869e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80086a6:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80086ae:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2246      	movs	r2, #70	; 0x46
 80086b4:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80086bc:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	228c      	movs	r2, #140	; 0x8c
 80086c2:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80086c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80086e6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f643 2298 	movw	r2, #15000	; 0x3a98
 80086ee:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086f6:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80086fe:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2208      	movs	r2, #8
 8008704:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2228      	movs	r2, #40	; 0x28
 800870a:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2209      	movs	r2, #9
 8008710:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008734:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f643 2298 	movw	r2, #15000	; 0x3a98
 800873c:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008744:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800874c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2210      	movs	r2, #16
 8008752:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2208      	movs	r2, #8
 8008758:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800875a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	4603      	mov	r3, r0
 8008772:	6039      	str	r1, [r7, #0]
 8008774:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2204      	movs	r2, #4
 800877e:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2201      	movs	r2, #1
 8008784:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2201      	movs	r2, #1
 800878a:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2202      	movs	r2, #2
 8008790:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2201      	movs	r2, #1
 8008796:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2250      	movs	r2, #80	; 0x50
 800879c:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2270      	movs	r2, #112	; 0x70
 80087a2:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f241 023d 	movw	r2, #4157	; 0x103d
 80087aa:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2210      	movs	r2, #16
 80087b0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2232      	movs	r2, #50	; 0x32
 80087b6:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2264      	movs	r2, #100	; 0x64
 80087bc:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2201      	movs	r2, #1
 80087c2:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	22a0      	movs	r2, #160	; 0xa0
 80087c8:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80087d6:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2208      	movs	r2, #8
 80087dc:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2288      	movs	r2, #136	; 0x88
 80087e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2208      	movs	r2, #8
 80087ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087fe:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	22fa      	movs	r2, #250	; 0xfa
 8008804:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	79fa      	ldrb	r2, [r7, #7]
 800880a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008814:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2232      	movs	r2, #50	; 0x32
 800881a:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008822:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	228c      	movs	r2, #140	; 0x8c
 8008828:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2250      	movs	r2, #80	; 0x50
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2232      	movs	r2, #50	; 0x32
 8008836:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8008838:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	220e      	movs	r2, #14
 800885e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f642 7294 	movw	r2, #12180	; 0x2f94
 8008866:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	220e      	movs	r2, #14
 800886c:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	220a      	movs	r2, #10
 8008872:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2206      	movs	r2, #6
 8008878:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	220e      	movs	r2, #14
 800887e:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	220a      	movs	r2, #10
 8008884:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2206      	movs	r2, #6
 800888a:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2209      	movs	r2, #9
 8008890:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2205      	movs	r2, #5
 8008896:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2203      	movs	r2, #3
 800889c:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2206      	movs	r2, #6
 80088a2:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2206      	movs	r2, #6
 80088a8:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2206      	movs	r2, #6
 80088ae:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2221      	movs	r2, #33	; 0x21
 80088ba:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	223c      	movs	r2, #60	; 0x3c
 80088cc:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	223c      	movs	r2, #60	; 0x3c
 80088d2:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	223c      	movs	r2, #60	; 0x3c
 80088d8:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2280      	movs	r2, #128	; 0x80
 80088de:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2280      	movs	r2, #128	; 0x80
 80088e4:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2280      	movs	r2, #128	; 0x80
 80088ea:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2208      	movs	r2, #8
 80088f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2210      	movs	r2, #16
 80088f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800892a:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008932:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800893a:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008942:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008952:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f242 3228 	movw	r2, #9000	; 0x2328
 800895a:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f241 7270 	movw	r2, #6000	; 0x1770
 8008962:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f643 2298 	movw	r2, #15000	; 0x3a98
 800896a:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008972:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f241 7270 	movw	r2, #6000	; 0x1770
 800897a:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800898a:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008992:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800899a:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80089a2:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f24f 6218 	movw	r2, #63000	; 0xf618
 80089aa:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80089b2:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80089ba:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80089c2:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80089d0:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80089d8:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80089f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2206      	movs	r2, #6
 80089f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008a0a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f640 22be 	movw	r2, #2750	; 0xabe
 8008a14:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	22fa      	movs	r2, #250	; 0xfa
 8008a1c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a26:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a30:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008a3a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a44:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008a4e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008a58:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	22c8      	movs	r2, #200	; 0xc8
 8008a60:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	22fa      	movs	r2, #250	; 0xfa
 8008a68:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a72:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f640 1206 	movw	r2, #2310	; 0x906
 8008a7c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f640 1206 	movw	r2, #2310	; 0x906
 8008a8e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008a98:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008aa2:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008aac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008ab6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f641 022e 	movw	r2, #6190	; 0x182e
 8008ac0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f641 3230 	movw	r2, #6960	; 0x1b30
 8008ada:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f641 022e 	movw	r2, #6190	; 0x182e
 8008ae4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	22fa      	movs	r2, #250	; 0xfa
 8008aec:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008af6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008b00:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f241 1294 	movw	r2, #4500	; 0x1194
 8008b0a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008b14:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	22c8      	movs	r2, #200	; 0xc8
 8008b1c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f640 3222 	movw	r2, #2850	; 0xb22
 8008b26:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008b30:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f640 721e 	movw	r2, #3870	; 0xf1e
 8008b4a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f241 222a 	movw	r2, #4650	; 0x122a
 8008b54:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008b5e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008b80:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008b8a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f641 1288 	movw	r2, #6536	; 0x1988
 8008ba4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8008ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008bca:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2238      	movs	r2, #56	; 0x38
 8008bd0:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2270      	movs	r2, #112	; 0x70
 8008bdc:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2264      	movs	r2, #100	; 0x64
 8008be8:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bf0:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	220f      	movs	r2, #15
 8008bf6:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2234      	movs	r2, #52	; 0x34
 8008bfc:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	22c8      	movs	r2, #200	; 0xc8
 8008c02:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008c0a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008c12:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008c3c:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2211      	movs	r2, #17
 8008c7e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2202      	movs	r2, #2
 8008c84:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2208      	movs	r2, #8
 8008c96:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	22ff      	movs	r2, #255	; 0xff
 8008cd8:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	220b      	movs	r2, #11
 8008d12:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	220d      	movs	r2, #13
 8008d26:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2a:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008d4e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2238      	movs	r2, #56	; 0x38
 8008d5a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	22ff      	movs	r2, #255	; 0xff
 8008d60:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	221a      	movs	r2, #26
 8008d72:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2200      	movs	r2, #0
 8008d78:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	22cc      	movs	r2, #204	; 0xcc
 8008d8a:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	220b      	movs	r2, #11
 8008d90:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	22f5      	movs	r2, #245	; 0xf5
 8008d9c:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2209      	movs	r2, #9
 8008da2:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2208      	movs	r2, #8
 8008db8:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2278      	movs	r2, #120	; 0x78
 8008dbe:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2207      	movs	r2, #7
 8008dd0:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2221      	movs	r2, #33	; 0x21
 8008dd6:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2243      	movs	r2, #67	; 0x43
 8008ddc:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2210      	movs	r2, #16
 8008de2:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2232      	movs	r2, #50	; 0x32
 8008de8:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2254      	movs	r2, #84	; 0x54
 8008dee:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2207      	movs	r2, #7
 8008df4:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2221      	movs	r2, #33	; 0x21
 8008dfa:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2243      	movs	r2, #67	; 0x43
 8008e00:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2210      	movs	r2, #16
 8008e06:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2243      	movs	r2, #67	; 0x43
 8008e12:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2205      	movs	r2, #5
 8008e18:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2207      	movs	r2, #7
 8008e24:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2221      	movs	r2, #33	; 0x21
 8008e2a:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2243      	movs	r2, #67	; 0x43
 8008e30:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2210      	movs	r2, #16
 8008e36:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2232      	movs	r2, #50	; 0x32
 8008e3c:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2254      	movs	r2, #84	; 0x54
 8008e42:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e4a:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e52:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2210      	movs	r2, #16
 8008e5e:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	2200      	movs	r2, #0
 8008e64:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	220f      	movs	r2, #15
 8008e6a:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	220f      	movs	r2, #15
 8008e70:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2208      	movs	r2, #8
 8008e76:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	2208      	movs	r2, #8
 8008e7c:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	2200      	movs	r2, #0
 8008e88:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	2200      	movs	r2, #0
 8008e94:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e98:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	220b      	movs	r2, #11
 8008ea4:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	2209      	movs	r2, #9
 8008eaa:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008ec8:	6a3b      	ldr	r3, [r7, #32]
 8008eca:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	22c7      	movs	r2, #199	; 0xc7
 8008eda:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	22ff      	movs	r2, #255	; 0xff
 8008ee0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	22db      	movs	r2, #219	; 0xdb
 8008ee6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	2202      	movs	r2, #2
 8008eec:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	2201      	movs	r2, #1
 8008efe:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	2221      	movs	r2, #33	; 0x21
 8008f04:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b08a      	sub	sp, #40	; 0x28
 8008f1a:	af04      	add	r7, sp, #16
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	9302      	str	r3, [sp, #8]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff fe70 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 8008f44:	4603      	mov	r3, r0
 8008f46:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d121      	bne.n	8008f94 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2207      	movs	r2, #7
 8008f54:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2205      	movs	r2, #5
 8008f5a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2208      	movs	r2, #8
 8008f70:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2238      	movs	r2, #56	; 0x38
 8008f76:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	2207      	movs	r2, #7
 8008f7c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	2205      	movs	r2, #5
 8008f82:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08a      	sub	sp, #40	; 0x28
 8008fa4:	af04      	add	r7, sp, #16
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	9303      	str	r3, [sp, #12]
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	9302      	str	r3, [sp, #8]
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7ff fe2b 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d121      	bne.n	800901e <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	220f      	movs	r2, #15
 8008fde:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	220d      	movs	r2, #13
 8008fe4:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	22b8      	movs	r2, #184	; 0xb8
 8009000:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	220f      	movs	r2, #15
 8009006:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	220d      	movs	r2, #13
 800900c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800901e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08a      	sub	sp, #40	; 0x28
 800902e:	af04      	add	r7, sp, #16
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009038:	2300      	movs	r3, #0
 800903a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	9303      	str	r3, [sp, #12]
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	9302      	str	r3, [sp, #8]
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f7ff fde6 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 8009058:	4603      	mov	r3, r0
 800905a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800905c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	223b      	movs	r2, #59	; 0x3b
 800906e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	; 0x28
 8009080:	af04      	add	r7, sp, #16
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	9303      	str	r3, [sp, #12]
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	9302      	str	r3, [sp, #8]
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	9301      	str	r3, [sp, #4]
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fdbd 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 80090aa:	4603      	mov	r3, r0
 80090ac:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2202      	movs	r2, #2
 80090ba:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	225b      	movs	r2, #91	; 0x5b
 80090c0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80090c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b08a      	sub	sp, #40	; 0x28
 80090d2:	af04      	add	r7, sp, #16
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090dc:	2300      	movs	r3, #0
 80090de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	9302      	str	r3, [sp, #8]
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f7ff fd94 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d11a      	bne.n	800913e <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	2200      	movs	r2, #0
 800910c:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	22b1      	movs	r2, #177	; 0xb1
 8009118:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2200      	movs	r2, #0
 800911e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	22d4      	movs	r2, #212	; 0xd4
 8009124:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800912c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	2240      	movs	r2, #64	; 0x40
 800913c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800913e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b08a      	sub	sp, #40	; 0x28
 800914e:	af04      	add	r7, sp, #16
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	9303      	str	r3, [sp, #12]
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	9302      	str	r3, [sp, #8]
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff fecf 	bl	8008f16 <VL53L1_preset_mode_standard_ranging_short_range>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800917c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d11a      	bne.n	80091ba <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	2200      	movs	r2, #0
 8009188:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2201      	movs	r2, #1
 800918e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2284      	movs	r2, #132	; 0x84
 8009194:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2201      	movs	r2, #1
 800919a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	22b1      	movs	r2, #177	; 0xb1
 80091a0:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80091a8:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80091b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b6:	2240      	movs	r2, #64	; 0x40
 80091b8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80091ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b08a      	sub	sp, #40	; 0x28
 80091ca:	af04      	add	r7, sp, #16
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
 80091d2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 80091d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f7ff fed6 	bl	8008fa0 <VL53L1_preset_mode_standard_ranging_long_range>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d11a      	bne.n	8009236 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2200      	movs	r2, #0
 8009204:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2200      	movs	r2, #0
 800920a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2297      	movs	r2, #151	; 0x97
 8009210:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	2200      	movs	r2, #0
 8009216:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	22b1      	movs	r2, #177	; 0xb1
 800921c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009224:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	2240      	movs	r2, #64	; 0x40
 8009234:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b08a      	sub	sp, #40	; 0x28
 8009246:	af04      	add	r7, sp, #16
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	9302      	str	r3, [sp, #8]
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	9301      	str	r3, [sp, #4]
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff ff2f 	bl	80090ce <VL53L1_preset_mode_timed_ranging>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800927c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927e:	6a39      	ldr	r1, [r7, #32]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f005 f978 	bl	800e576 <VL53L1_config_low_power_auto_mode>
 8009286:	4603      	mov	r3, r0
 8009288:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800928a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b08a      	sub	sp, #40	; 0x28
 800929a:	af04      	add	r7, sp, #16
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	68b9      	ldr	r1, [r7, #8]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f7ff ff43 	bl	800914a <VL53L1_preset_mode_timed_ranging_short_range>
 80092c4:	4603      	mov	r3, r0
 80092c6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d106      	bne.n	80092de <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80092d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d2:	6a39      	ldr	r1, [r7, #32]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f005 f94e 	bl	800e576 <VL53L1_config_low_power_auto_mode>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80092de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b08a      	sub	sp, #40	; 0x28
 80092ee:	af04      	add	r7, sp, #16
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	9303      	str	r3, [sp, #12]
 8009300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009302:	9302      	str	r3, [sp, #8]
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68b9      	ldr	r1, [r7, #8]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff ff57 	bl	80091c6 <VL53L1_preset_mode_timed_ranging_long_range>
 8009318:	4603      	mov	r3, r0
 800931a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800931c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009326:	6a39      	ldr	r1, [r7, #32]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f005 f924 	bl	800e576 <VL53L1_config_low_power_auto_mode>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009332:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b08a      	sub	sp, #40	; 0x28
 8009342:	af04      	add	r7, sp, #16
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	60b9      	str	r1, [r7, #8]
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800934c:	2300      	movs	r3, #0
 800934e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	68b9      	ldr	r1, [r7, #8]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fc5c 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 800936c:	4603      	mov	r3, r0
 800936e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d116      	bne.n	80093a6 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	2200      	movs	r2, #0
 800937c:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	2200      	movs	r2, #0
 8009382:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	22b1      	movs	r2, #177	; 0xb1
 8009388:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2200      	movs	r2, #0
 800938e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	22d4      	movs	r2, #212	; 0xd4
 8009394:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	2210      	movs	r2, #16
 80093a4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80093a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b090      	sub	sp, #64	; 0x40
 80093b6:	af0a      	add	r7, sp, #40	; 0x28
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	60b9      	str	r1, [r7, #8]
 80093bc:	607a      	str	r2, [r7, #4]
 80093be:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093c0:	2300      	movs	r3, #0
 80093c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	68b8      	ldr	r0, [r7, #8]
 80093dc:	f7ff fc22 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80093e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d171      	bne.n	80094d0 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80093f2:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	9308      	str	r3, [sp, #32]
 80093f8:	2305      	movs	r3, #5
 80093fa:	9307      	str	r3, [sp, #28]
 80093fc:	2304      	movs	r3, #4
 80093fe:	9306      	str	r3, [sp, #24]
 8009400:	2303      	movs	r3, #3
 8009402:	9305      	str	r3, [sp, #20]
 8009404:	2302      	movs	r3, #2
 8009406:	9304      	str	r3, [sp, #16]
 8009408:	2301      	movs	r3, #1
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	2300      	movs	r3, #0
 800940e:	9302      	str	r3, [sp, #8]
 8009410:	2304      	movs	r3, #4
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	2303      	movs	r3, #3
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2302      	movs	r3, #2
 800941a:	2201      	movs	r2, #1
 800941c:	2100      	movs	r1, #0
 800941e:	2007      	movs	r0, #7
 8009420:	f001 fe1b 	bl	800b05a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	3302      	adds	r3, #2
 8009428:	9308      	str	r3, [sp, #32]
 800942a:	2305      	movs	r3, #5
 800942c:	9307      	str	r3, [sp, #28]
 800942e:	2304      	movs	r3, #4
 8009430:	9306      	str	r3, [sp, #24]
 8009432:	2303      	movs	r3, #3
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	2302      	movs	r3, #2
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	2301      	movs	r3, #1
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	2300      	movs	r3, #0
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	2304      	movs	r3, #4
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	2303      	movs	r3, #3
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	2302      	movs	r3, #2
 800944c:	2201      	movs	r2, #1
 800944e:	2100      	movs	r1, #0
 8009450:	2007      	movs	r0, #7
 8009452:	f001 fe92 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	2209      	movs	r2, #9
 800945a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	220b      	movs	r2, #11
 8009460:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	2209      	movs	r2, #9
 8009466:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	220b      	movs	r2, #11
 800946c:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2220      	movs	r2, #32
 8009478:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2200      	movs	r2, #0
 800947e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	221a      	movs	r2, #26
 8009484:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2200      	movs	r2, #0
 800948a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2228      	movs	r2, #40	; 0x28
 8009490:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2200      	movs	r2, #0
 8009496:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2221      	movs	r2, #33	; 0x21
 800949c:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	22f5      	movs	r2, #245	; 0xf5
 80094a2:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2208      	movs	r2, #8
 80094a8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2288      	movs	r2, #136	; 0x88
 80094b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 f821 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	229b      	movs	r2, #155	; 0x9b
 80094c8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	2226      	movs	r2, #38	; 0x26
 80094ce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80094d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b090      	sub	sp, #64	; 0x40
 80094e0:	af0a      	add	r7, sp, #40	; 0x28
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	9302      	str	r3, [sp, #8]
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ff52 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d13e      	bne.n	8009598 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	9308      	str	r3, [sp, #32]
 800951e:	2305      	movs	r3, #5
 8009520:	9307      	str	r3, [sp, #28]
 8009522:	2304      	movs	r3, #4
 8009524:	9306      	str	r3, [sp, #24]
 8009526:	2303      	movs	r3, #3
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	230a      	movs	r3, #10
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	2309      	movs	r3, #9
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	2308      	movs	r3, #8
 8009534:	9302      	str	r3, [sp, #8]
 8009536:	2304      	movs	r3, #4
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	2303      	movs	r3, #3
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	2302      	movs	r3, #2
 8009540:	2201      	movs	r2, #1
 8009542:	2100      	movs	r1, #0
 8009544:	2007      	movs	r0, #7
 8009546:	f001 fd88 	bl	800b05a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	3302      	adds	r3, #2
 800954e:	9308      	str	r3, [sp, #32]
 8009550:	2305      	movs	r3, #5
 8009552:	9307      	str	r3, [sp, #28]
 8009554:	2304      	movs	r3, #4
 8009556:	9306      	str	r3, [sp, #24]
 8009558:	2303      	movs	r3, #3
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	230a      	movs	r3, #10
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	2309      	movs	r3, #9
 8009562:	9303      	str	r3, [sp, #12]
 8009564:	2308      	movs	r3, #8
 8009566:	9302      	str	r3, [sp, #8]
 8009568:	2304      	movs	r3, #4
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	2303      	movs	r3, #3
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	2302      	movs	r3, #2
 8009572:	2201      	movs	r2, #1
 8009574:	2100      	movs	r1, #0
 8009576:	2007      	movs	r0, #7
 8009578:	f001 fdff 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 ffbd 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	22bb      	movs	r2, #187	; 0xbb
 8009590:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	2226      	movs	r2, #38	; 0x26
 8009596:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08c      	sub	sp, #48	; 0x30
 80095a8:	af06      	add	r7, sp, #24
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	9303      	str	r3, [sp, #12]
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	9302      	str	r3, [sp, #8]
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	9301      	str	r3, [sp, #4]
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff ff83 	bl	80094dc <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80095d6:	4603      	mov	r3, r0
 80095d8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80095da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	22db      	movs	r2, #219	; 0xdb
 80095e6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80095e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b090      	sub	sp, #64	; 0x40
 80095f8:	af0a      	add	r7, sp, #40	; 0x28
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
 8009604:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	9304      	str	r3, [sp, #16]
 800960a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	9302      	str	r3, [sp, #8]
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fec6 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800962a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d13e      	bne.n	80096b0 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	9308      	str	r3, [sp, #32]
 8009636:	230d      	movs	r3, #13
 8009638:	9307      	str	r3, [sp, #28]
 800963a:	230c      	movs	r3, #12
 800963c:	9306      	str	r3, [sp, #24]
 800963e:	230b      	movs	r3, #11
 8009640:	9305      	str	r3, [sp, #20]
 8009642:	230a      	movs	r3, #10
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	2309      	movs	r3, #9
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	2308      	movs	r3, #8
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	230c      	movs	r3, #12
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	230b      	movs	r3, #11
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	230a      	movs	r3, #10
 8009658:	2209      	movs	r2, #9
 800965a:	2108      	movs	r1, #8
 800965c:	2007      	movs	r0, #7
 800965e:	f001 fcfc 	bl	800b05a <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	3302      	adds	r3, #2
 8009666:	9308      	str	r3, [sp, #32]
 8009668:	230d      	movs	r3, #13
 800966a:	9307      	str	r3, [sp, #28]
 800966c:	230c      	movs	r3, #12
 800966e:	9306      	str	r3, [sp, #24]
 8009670:	230b      	movs	r3, #11
 8009672:	9305      	str	r3, [sp, #20]
 8009674:	230a      	movs	r3, #10
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	2309      	movs	r3, #9
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	2308      	movs	r3, #8
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	230c      	movs	r3, #12
 8009682:	9301      	str	r3, [sp, #4]
 8009684:	230b      	movs	r3, #11
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	230a      	movs	r3, #10
 800968a:	2209      	movs	r2, #9
 800968c:	2108      	movs	r1, #8
 800968e:	2007      	movs	r0, #7
 8009690:	f001 fd73 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 ff31 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2202      	movs	r2, #2
 80096a8:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	22bb      	movs	r2, #187	; 0xbb
 80096ae:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80096b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08c      	sub	sp, #48	; 0x30
 80096c0:	af06      	add	r7, sp, #24
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	9302      	str	r3, [sp, #8]
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff ff83 	bl	80095f4 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 80096f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	22db      	movs	r2, #219	; 0xdb
 80096fe:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b090      	sub	sp, #64	; 0x40
 8009710:	af0a      	add	r7, sp, #40	; 0x28
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	9304      	str	r3, [sp, #16]
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	9302      	str	r3, [sp, #8]
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fe3a 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d166      	bne.n	8009818 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009750:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	9308      	str	r3, [sp, #32]
 8009756:	2304      	movs	r3, #4
 8009758:	9307      	str	r3, [sp, #28]
 800975a:	2303      	movs	r3, #3
 800975c:	9306      	str	r3, [sp, #24]
 800975e:	2302      	movs	r3, #2
 8009760:	9305      	str	r3, [sp, #20]
 8009762:	2301      	movs	r3, #1
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	2300      	movs	r3, #0
 8009768:	9303      	str	r3, [sp, #12]
 800976a:	2307      	movs	r3, #7
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	2304      	movs	r3, #4
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	2303      	movs	r3, #3
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	2302      	movs	r3, #2
 8009778:	2201      	movs	r2, #1
 800977a:	2100      	movs	r1, #0
 800977c:	2007      	movs	r0, #7
 800977e:	f001 fc6c 	bl	800b05a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	3302      	adds	r3, #2
 8009786:	9308      	str	r3, [sp, #32]
 8009788:	2304      	movs	r3, #4
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	2303      	movs	r3, #3
 800978e:	9306      	str	r3, [sp, #24]
 8009790:	2302      	movs	r3, #2
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	2301      	movs	r3, #1
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	2300      	movs	r3, #0
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	2307      	movs	r3, #7
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	2304      	movs	r3, #4
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	2303      	movs	r3, #3
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2302      	movs	r3, #2
 80097aa:	2201      	movs	r2, #1
 80097ac:	2100      	movs	r1, #0
 80097ae:	2007      	movs	r0, #7
 80097b0:	f001 fce3 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fea1 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	2204      	movs	r2, #4
 80097c8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	2203      	movs	r2, #3
 80097ce:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80097d0:	6a3b      	ldr	r3, [r7, #32]
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	2242      	movs	r2, #66	; 0x42
 80097da:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	2200      	movs	r2, #0
 80097e0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	2242      	movs	r2, #66	; 0x42
 80097e6:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2200      	movs	r2, #0
 80097ec:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	2252      	movs	r2, #82	; 0x52
 80097f2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	2200      	movs	r2, #0
 80097f8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	2266      	movs	r2, #102	; 0x66
 80097fe:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2204      	movs	r2, #4
 8009804:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	22a4      	movs	r2, #164	; 0xa4
 800980a:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	229b      	movs	r2, #155	; 0x9b
 8009810:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	2226      	movs	r2, #38	; 0x26
 8009816:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009818:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b090      	sub	sp, #64	; 0x40
 8009828:	af0a      	add	r7, sp, #40	; 0x28
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fdae 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 8009856:	4603      	mov	r3, r0
 8009858:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800985a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d178      	bne.n	8009954 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	9308      	str	r3, [sp, #32]
 8009866:	2305      	movs	r3, #5
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	2304      	movs	r3, #4
 800986c:	9306      	str	r3, [sp, #24]
 800986e:	2303      	movs	r3, #3
 8009870:	9305      	str	r3, [sp, #20]
 8009872:	2302      	movs	r3, #2
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	2301      	movs	r3, #1
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	2300      	movs	r3, #0
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	2304      	movs	r3, #4
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	2303      	movs	r3, #3
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	2302      	movs	r3, #2
 8009888:	2201      	movs	r2, #1
 800988a:	2100      	movs	r1, #0
 800988c:	2007      	movs	r0, #7
 800988e:	f001 fbe4 	bl	800b05a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	3302      	adds	r3, #2
 8009896:	9308      	str	r3, [sp, #32]
 8009898:	2305      	movs	r3, #5
 800989a:	9307      	str	r3, [sp, #28]
 800989c:	2304      	movs	r3, #4
 800989e:	9306      	str	r3, [sp, #24]
 80098a0:	2303      	movs	r3, #3
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	2302      	movs	r3, #2
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	2301      	movs	r3, #1
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	2300      	movs	r3, #0
 80098ae:	9302      	str	r3, [sp, #8]
 80098b0:	2304      	movs	r3, #4
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	2303      	movs	r3, #3
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2302      	movs	r3, #2
 80098ba:	2201      	movs	r2, #1
 80098bc:	2100      	movs	r1, #0
 80098be:	2007      	movs	r0, #7
 80098c0:	f001 fc5b 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fe19 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	2209      	movs	r2, #9
 80098d8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	220b      	movs	r2, #11
 80098de:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	2221      	movs	r2, #33	; 0x21
 80098ea:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	2200      	movs	r2, #0
 80098f0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	221b      	movs	r2, #27
 80098f6:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	2200      	movs	r2, #0
 80098fc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	2229      	movs	r2, #41	; 0x29
 8009902:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	2200      	movs	r2, #0
 8009908:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	2222      	movs	r2, #34	; 0x22
 800990e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2209      	movs	r2, #9
 8009914:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	22f5      	movs	r2, #245	; 0xf5
 800991a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	2209      	movs	r2, #9
 8009920:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	220b      	movs	r2, #11
 8009926:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2208      	movs	r2, #8
 800993c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2288      	movs	r2, #136	; 0x88
 8009944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	229b      	movs	r2, #155	; 0x9b
 800994c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	2226      	movs	r2, #38	; 0x26
 8009952:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009954:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b090      	sub	sp, #64	; 0x40
 8009964:	af0a      	add	r7, sp, #40	; 0x28
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	9302      	str	r3, [sp, #8]
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7ff ff49 	bl	8009824 <VL53L1_preset_mode_histogram_long_range>
 8009992:	4603      	mov	r3, r0
 8009994:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d13b      	bne.n	8009a16 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	9308      	str	r3, [sp, #32]
 80099a2:	2305      	movs	r3, #5
 80099a4:	9307      	str	r3, [sp, #28]
 80099a6:	2304      	movs	r3, #4
 80099a8:	9306      	str	r3, [sp, #24]
 80099aa:	2303      	movs	r3, #3
 80099ac:	9305      	str	r3, [sp, #20]
 80099ae:	230a      	movs	r3, #10
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	2309      	movs	r3, #9
 80099b4:	9303      	str	r3, [sp, #12]
 80099b6:	2308      	movs	r3, #8
 80099b8:	9302      	str	r3, [sp, #8]
 80099ba:	2304      	movs	r3, #4
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	2303      	movs	r3, #3
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	2302      	movs	r3, #2
 80099c4:	2201      	movs	r2, #1
 80099c6:	2100      	movs	r1, #0
 80099c8:	2007      	movs	r0, #7
 80099ca:	f001 fb46 	bl	800b05a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	3302      	adds	r3, #2
 80099d2:	9308      	str	r3, [sp, #32]
 80099d4:	2305      	movs	r3, #5
 80099d6:	9307      	str	r3, [sp, #28]
 80099d8:	2304      	movs	r3, #4
 80099da:	9306      	str	r3, [sp, #24]
 80099dc:	2303      	movs	r3, #3
 80099de:	9305      	str	r3, [sp, #20]
 80099e0:	230a      	movs	r3, #10
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	2309      	movs	r3, #9
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	2308      	movs	r3, #8
 80099ea:	9302      	str	r3, [sp, #8]
 80099ec:	2304      	movs	r3, #4
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	2303      	movs	r3, #3
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	2302      	movs	r3, #2
 80099f6:	2201      	movs	r2, #1
 80099f8:	2100      	movs	r1, #0
 80099fa:	2007      	movs	r0, #7
 80099fc:	f001 fbbd 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fd7b 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	22bb      	movs	r2, #187	; 0xbb
 8009a14:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009a16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b08c      	sub	sp, #48	; 0x30
 8009a26:	af06      	add	r7, sp, #24
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a30:	2300      	movs	r3, #0
 8009a32:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7ff ff86 	bl	8009960 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	22db      	movs	r2, #219	; 0xdb
 8009a64:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b090      	sub	sp, #64	; 0x40
 8009a76:	af0a      	add	r7, sp, #40	; 0x28
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a80:	2300      	movs	r3, #0
 8009a82:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	9304      	str	r3, [sp, #16]
 8009a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8a:	9303      	str	r3, [sp, #12]
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	9302      	str	r3, [sp, #8]
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f7ff fc87 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d178      	bne.n	8009ba2 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	9306      	str	r3, [sp, #24]
 8009abc:	2301      	movs	r3, #1
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	9303      	str	r3, [sp, #12]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	2302      	movs	r3, #2
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	2100      	movs	r1, #0
 8009ada:	2007      	movs	r0, #7
 8009adc:	f001 fabd 	bl	800b05a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	9308      	str	r3, [sp, #32]
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	9307      	str	r3, [sp, #28]
 8009aea:	2302      	movs	r3, #2
 8009aec:	9306      	str	r3, [sp, #24]
 8009aee:	2301      	movs	r3, #1
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	2302      	movs	r3, #2
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	2301      	movs	r3, #1
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	2300      	movs	r3, #0
 8009afc:	9302      	str	r3, [sp, #8]
 8009afe:	2302      	movs	r3, #2
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	2302      	movs	r3, #2
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	2301      	movs	r3, #1
 8009b08:	2201      	movs	r2, #1
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2007      	movs	r0, #7
 8009b0e:	f001 fb34 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fcf2 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2205      	movs	r2, #5
 8009b26:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	2207      	movs	r2, #7
 8009b2c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	2236      	movs	r2, #54	; 0x36
 8009b38:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2228      	movs	r2, #40	; 0x28
 8009b44:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	2244      	movs	r2, #68	; 0x44
 8009b50:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	2200      	movs	r2, #0
 8009b56:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	2233      	movs	r2, #51	; 0x33
 8009b5c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2205      	movs	r2, #5
 8009b62:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	22f5      	movs	r2, #245	; 0xf5
 8009b68:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	2205      	movs	r2, #5
 8009b6e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	2207      	movs	r2, #7
 8009b74:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2208      	movs	r2, #8
 8009b8a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2248      	movs	r2, #72	; 0x48
 8009b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	229b      	movs	r2, #155	; 0x9b
 8009b9a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	2226      	movs	r2, #38	; 0x26
 8009ba0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b090      	sub	sp, #64	; 0x40
 8009bb2:	af0a      	add	r7, sp, #40	; 0x28
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
 8009bba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	9302      	str	r3, [sp, #8]
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	68b9      	ldr	r1, [r7, #8]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff ff49 	bl	8009a72 <VL53L1_preset_mode_histogram_medium_range>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d13b      	bne.n	8009c64 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	9308      	str	r3, [sp, #32]
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	9307      	str	r3, [sp, #28]
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	9306      	str	r3, [sp, #24]
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	9305      	str	r3, [sp, #20]
 8009bfc:	230a      	movs	r3, #10
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	2309      	movs	r3, #9
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	2308      	movs	r3, #8
 8009c06:	9302      	str	r3, [sp, #8]
 8009c08:	2302      	movs	r3, #2
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	2301      	movs	r3, #1
 8009c12:	2201      	movs	r2, #1
 8009c14:	2100      	movs	r1, #0
 8009c16:	2007      	movs	r0, #7
 8009c18:	f001 fa1f 	bl	800b05a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	3302      	adds	r3, #2
 8009c20:	9308      	str	r3, [sp, #32]
 8009c22:	2303      	movs	r3, #3
 8009c24:	9307      	str	r3, [sp, #28]
 8009c26:	2302      	movs	r3, #2
 8009c28:	9306      	str	r3, [sp, #24]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	230a      	movs	r3, #10
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	2309      	movs	r3, #9
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	2308      	movs	r3, #8
 8009c38:	9302      	str	r3, [sp, #8]
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	2302      	movs	r3, #2
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	2301      	movs	r3, #1
 8009c44:	2201      	movs	r2, #1
 8009c46:	2100      	movs	r1, #0
 8009c48:	2007      	movs	r0, #7
 8009c4a:	f001 fa96 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fc54 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	22bb      	movs	r2, #187	; 0xbb
 8009c62:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08c      	sub	sp, #48	; 0x30
 8009c74:	af06      	add	r7, sp, #24
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	9302      	str	r3, [sp, #8]
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff ff86 	bl	8009bae <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d102      	bne.n	8009cb4 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	22db      	movs	r2, #219	; 0xdb
 8009cb2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b090      	sub	sp, #64	; 0x40
 8009cc4:	af0a      	add	r7, sp, #40	; 0x28
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	9302      	str	r3, [sp, #8]
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff fb60 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d178      	bne.n	8009df0 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	2302      	movs	r3, #2
 8009d04:	9307      	str	r3, [sp, #28]
 8009d06:	2302      	movs	r3, #2
 8009d08:	9306      	str	r3, [sp, #24]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	2301      	movs	r3, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	2301      	movs	r3, #1
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	2301      	movs	r3, #1
 8009d24:	2200      	movs	r2, #0
 8009d26:	2107      	movs	r1, #7
 8009d28:	2007      	movs	r0, #7
 8009d2a:	f001 f996 	bl	800b05a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	3302      	adds	r3, #2
 8009d32:	9308      	str	r3, [sp, #32]
 8009d34:	2302      	movs	r3, #2
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	2302      	movs	r3, #2
 8009d3a:	9306      	str	r3, [sp, #24]
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	2301      	movs	r3, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	2301      	movs	r3, #1
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9302      	str	r3, [sp, #8]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	2301      	movs	r3, #1
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	2301      	movs	r3, #1
 8009d56:	2200      	movs	r2, #0
 8009d58:	2107      	movs	r1, #7
 8009d5a:	2007      	movs	r0, #7
 8009d5c:	f001 fa0d 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fbcb 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	2203      	movs	r2, #3
 8009d74:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	2205      	movs	r2, #5
 8009d7a:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2252      	movs	r2, #82	; 0x52
 8009d86:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	2237      	movs	r2, #55	; 0x37
 8009d92:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	2200      	movs	r2, #0
 8009d98:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	2266      	movs	r2, #102	; 0x66
 8009d9e:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	2200      	movs	r2, #0
 8009da4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	2244      	movs	r2, #68	; 0x44
 8009daa:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	2203      	movs	r2, #3
 8009db0:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	22f5      	movs	r2, #245	; 0xf5
 8009db6:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	2203      	movs	r2, #3
 8009dbc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2208      	movs	r2, #8
 8009dd8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2228      	movs	r2, #40	; 0x28
 8009de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	22bb      	movs	r2, #187	; 0xbb
 8009de8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	2226      	movs	r2, #38	; 0x26
 8009dee:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b090      	sub	sp, #64	; 0x40
 8009e00:	af0a      	add	r7, sp, #40	; 0x28
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	9303      	str	r3, [sp, #12]
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff ff49 	bl	8009cc0 <VL53L1_preset_mode_histogram_short_range>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d15a      	bne.n	8009ef0 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	9308      	str	r3, [sp, #32]
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9307      	str	r3, [sp, #28]
 8009e42:	2301      	movs	r3, #1
 8009e44:	9306      	str	r3, [sp, #24]
 8009e46:	2301      	movs	r3, #1
 8009e48:	9305      	str	r3, [sp, #20]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	2300      	movs	r3, #0
 8009e54:	9302      	str	r3, [sp, #8]
 8009e56:	2301      	movs	r3, #1
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2200      	movs	r2, #0
 8009e62:	2107      	movs	r1, #7
 8009e64:	2007      	movs	r0, #7
 8009e66:	f001 f8f8 	bl	800b05a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	9308      	str	r3, [sp, #32]
 8009e70:	2301      	movs	r3, #1
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	2301      	movs	r3, #1
 8009e76:	9306      	str	r3, [sp, #24]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	9305      	str	r3, [sp, #20]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	2300      	movs	r3, #0
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	2300      	movs	r3, #0
 8009e86:	9302      	str	r3, [sp, #8]
 8009e88:	2301      	movs	r3, #1
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	2200      	movs	r2, #0
 8009e94:	2107      	movs	r1, #7
 8009e96:	2007      	movs	r0, #7
 8009e98:	f001 f96f 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fb2d 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2231      	movs	r2, #49	; 0x31
 8009ec2:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	2203      	movs	r2, #3
 8009ece:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed2:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2210      	movs	r2, #16
 8009ee4:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2218      	movs	r2, #24
 8009eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b090      	sub	sp, #64	; 0x40
 8009f00:	af0a      	add	r7, sp, #40	; 0x28
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	9304      	str	r3, [sp, #16]
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f7ff fec9 	bl	8009cc0 <VL53L1_preset_mode_histogram_short_range>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d13b      	bne.n	8009fb2 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	9308      	str	r3, [sp, #32]
 8009f3e:	2302      	movs	r3, #2
 8009f40:	9307      	str	r3, [sp, #28]
 8009f42:	2302      	movs	r3, #2
 8009f44:	9306      	str	r3, [sp, #24]
 8009f46:	2301      	movs	r3, #1
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	2309      	movs	r3, #9
 8009f50:	9303      	str	r3, [sp, #12]
 8009f52:	2308      	movs	r3, #8
 8009f54:	9302      	str	r3, [sp, #8]
 8009f56:	2301      	movs	r3, #1
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	2301      	movs	r3, #1
 8009f60:	2200      	movs	r2, #0
 8009f62:	2107      	movs	r1, #7
 8009f64:	2007      	movs	r0, #7
 8009f66:	f001 f878 	bl	800b05a <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	9308      	str	r3, [sp, #32]
 8009f70:	2302      	movs	r3, #2
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	2302      	movs	r3, #2
 8009f76:	9306      	str	r3, [sp, #24]
 8009f78:	2301      	movs	r3, #1
 8009f7a:	9305      	str	r3, [sp, #20]
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	2309      	movs	r3, #9
 8009f82:	9303      	str	r3, [sp, #12]
 8009f84:	2308      	movs	r3, #8
 8009f86:	9302      	str	r3, [sp, #8]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2301      	movs	r3, #1
 8009f92:	2200      	movs	r2, #0
 8009f94:	2107      	movs	r1, #7
 8009f96:	2007      	movs	r0, #7
 8009f98:	f001 f8ef 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 faad 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fae:	22bb      	movs	r2, #187	; 0xbb
 8009fb0:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b08c      	sub	sp, #48	; 0x30
 8009fc2:	af06      	add	r7, sp, #24
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	9302      	str	r3, [sp, #8]
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	9301      	str	r3, [sp, #4]
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7ff ff86 	bl	8009efc <VL53L1_preset_mode_histogram_short_range_mm1>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	22db      	movs	r2, #219	; 0xdb
 800a000:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b08c      	sub	sp, #48	; 0x30
 800a012:	af06      	add	r7, sp, #24
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	9303      	str	r3, [sp, #12]
 800a028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02a:	9302      	str	r3, [sp, #8]
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	68b9      	ldr	r1, [r7, #8]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff f9b9 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10b      	bne.n	800a064 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2201      	movs	r2, #1
 800a050:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	2201      	movs	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	2283      	movs	r2, #131	; 0x83
 800a05c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	222e      	movs	r2, #46	; 0x2e
 800a062:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b090      	sub	sp, #64	; 0x40
 800a074:	af0a      	add	r7, sp, #40	; 0x28
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 f9ba 	bl	800a416 <VL53L1_preset_mode_histogram_multizone_long_range>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a0a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d151      	bne.n	800a152 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 800a0ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0b0:	6838      	ldr	r0, [r7, #0]
 800a0b2:	f00a fb1c 	bl	80146ee <VL53L1_zone_preset_xtalk_planar>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	2209      	movs	r2, #9
 800a0be:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	2209      	movs	r2, #9
 800a0c4:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	9308      	str	r3, [sp, #32]
 800a0ca:	2304      	movs	r3, #4
 800a0cc:	9307      	str	r3, [sp, #28]
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	9306      	str	r3, [sp, #24]
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9303      	str	r3, [sp, #12]
 800a0de:	2307      	movs	r3, #7
 800a0e0:	9302      	str	r3, [sp, #8]
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	2007      	movs	r0, #7
 800a0f2:	f000 ffb2 	bl	800b05a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	9308      	str	r3, [sp, #32]
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	2303      	movs	r3, #3
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	2302      	movs	r3, #2
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	2301      	movs	r3, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	2300      	movs	r3, #0
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	2307      	movs	r3, #7
 800a112:	9302      	str	r3, [sp, #8]
 800a114:	2304      	movs	r3, #4
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	2303      	movs	r3, #3
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2302      	movs	r3, #2
 800a11e:	2201      	movs	r2, #1
 800a120:	2100      	movs	r1, #0
 800a122:	2007      	movs	r0, #7
 800a124:	f001 f829 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800a128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d108      	bne.n	800a142 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	3302      	adds	r3, #2
 800a134:	461a      	mov	r2, r3
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a13a:	f003 f97d 	bl	800d438 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a13e:	4603      	mov	r3, r0
 800a140:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f9da 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800a152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b090      	sub	sp, #64	; 0x40
 800a162:	af0a      	add	r7, sp, #40	; 0x28
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	9303      	str	r3, [sp, #12]
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	9302      	str	r3, [sp, #8]
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	9301      	str	r3, [sp, #4]
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68b9      	ldr	r1, [r7, #8]
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff f911 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 800a190:	4603      	mov	r3, r0
 800a192:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800a194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d16e      	bne.n	800a27a <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	9308      	str	r3, [sp, #32]
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	9307      	str	r3, [sp, #28]
 800a1a4:	230b      	movs	r3, #11
 800a1a6:	9306      	str	r3, [sp, #24]
 800a1a8:	230a      	movs	r3, #10
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	2309      	movs	r3, #9
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	2308      	movs	r3, #8
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	230f      	movs	r3, #15
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	230b      	movs	r3, #11
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	230a      	movs	r3, #10
 800a1c2:	2209      	movs	r2, #9
 800a1c4:	2108      	movs	r1, #8
 800a1c6:	200f      	movs	r0, #15
 800a1c8:	f000 ff47 	bl	800b05a <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	3302      	adds	r3, #2
 800a1d0:	9308      	str	r3, [sp, #32]
 800a1d2:	230c      	movs	r3, #12
 800a1d4:	9307      	str	r3, [sp, #28]
 800a1d6:	230b      	movs	r3, #11
 800a1d8:	9306      	str	r3, [sp, #24]
 800a1da:	230a      	movs	r3, #10
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	2309      	movs	r3, #9
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	2308      	movs	r3, #8
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	230f      	movs	r3, #15
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	230c      	movs	r3, #12
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	230b      	movs	r3, #11
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	230a      	movs	r3, #10
 800a1f4:	2209      	movs	r2, #9
 800a1f6:	2108      	movs	r1, #8
 800a1f8:	200f      	movs	r0, #15
 800a1fa:	f000 ffbe 	bl	800b17a <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f97c 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	2209      	movs	r2, #9
 800a212:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	2209      	movs	r2, #9
 800a218:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	2221      	movs	r2, #33	; 0x21
 800a224:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	2200      	movs	r2, #0
 800a22a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2221      	movs	r2, #33	; 0x21
 800a230:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	2200      	movs	r2, #0
 800a236:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	2229      	movs	r2, #41	; 0x29
 800a23c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	2200      	movs	r2, #0
 800a242:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800a244:	6a3b      	ldr	r3, [r7, #32]
 800a246:	2229      	movs	r2, #41	; 0x29
 800a248:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2209      	movs	r2, #9
 800a24e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	22f5      	movs	r2, #245	; 0xf5
 800a254:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	2209      	movs	r2, #9
 800a25a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	2209      	movs	r2, #9
 800a260:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	2209      	movs	r2, #9
 800a266:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	2206      	movs	r2, #6
 800a26c:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	22bb      	movs	r2, #187	; 0xbb
 800a272:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	2226      	movs	r2, #38	; 0x26
 800a278:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a27a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b08c      	sub	sp, #48	; 0x30
 800a28a:	af06      	add	r7, sp, #24
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a294:	2300      	movs	r3, #0
 800a296:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	9303      	str	r3, [sp, #12]
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	9302      	str	r3, [sp, #8]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f7ff ff53 	bl	800a15e <VL53L1_preset_mode_histogram_xtalk_mm1>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	22db      	movs	r2, #219	; 0xdb
 800a2c0:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800a2c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b08c      	sub	sp, #48	; 0x30
 800a2d2:	af06      	add	r7, sp, #24
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
 800a2da:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	9302      	str	r3, [sp, #8]
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7ff fbb9 	bl	8009a72 <VL53L1_preset_mode_histogram_medium_range>
 800a300:	4603      	mov	r3, r0
 800a302:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d12c      	bne.n	800a366 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	9304      	str	r3, [sp, #16]
 800a310:	2307      	movs	r3, #7
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	2307      	movs	r3, #7
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	2302      	movs	r3, #2
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	2308      	movs	r3, #8
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	2304      	movs	r3, #4
 800a322:	2202      	movs	r2, #2
 800a324:	2108      	movs	r1, #8
 800a326:	2004      	movs	r0, #4
 800a328:	f00a f96c 	bl	8014604 <VL53L1_init_zone_config_structure>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	3301      	adds	r3, #1
 800a336:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a33c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d108      	bne.n	800a356 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	3302      	adds	r3, #2
 800a348:	461a      	mov	r2, r3
 800a34a:	6879      	ldr	r1, [r7, #4]
 800a34c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a34e:	f003 f873 	bl	800d438 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	68b9      	ldr	r1, [r7, #8]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f8d0 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b08c      	sub	sp, #48	; 0x30
 800a376:	af06      	add	r7, sp, #24
 800a378:	60f8      	str	r0, [r7, #12]
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a380:	2300      	movs	r3, #0
 800a382:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	6a3b      	ldr	r3, [r7, #32]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff fc8e 	bl	8009cc0 <VL53L1_preset_mode_histogram_short_range>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a3a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d12c      	bne.n	800a40a <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	2307      	movs	r3, #7
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	2307      	movs	r3, #7
 800a3ba:	9302      	str	r3, [sp, #8]
 800a3bc:	2302      	movs	r3, #2
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	2108      	movs	r1, #8
 800a3ca:	2004      	movs	r0, #4
 800a3cc:	f00a f91a 	bl	8014604 <VL53L1_init_zone_config_structure>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	785b      	ldrb	r3, [r3, #1]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d108      	bne.n	800a3fa <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	3302      	adds	r3, #2
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f2:	f003 f821 	bl	800d438 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 f87e 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a40a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b08c      	sub	sp, #48	; 0x30
 800a41a:	af06      	add	r7, sp, #24
 800a41c:	60f8      	str	r0, [r7, #12]
 800a41e:	60b9      	str	r1, [r7, #8]
 800a420:	607a      	str	r2, [r7, #4]
 800a422:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	9303      	str	r3, [sp, #12]
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	9302      	str	r3, [sp, #8]
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff f9ee 	bl	8009824 <VL53L1_preset_mode_histogram_long_range>
 800a448:	4603      	mov	r3, r0
 800a44a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a44c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d12c      	bne.n	800a4ae <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	2307      	movs	r3, #7
 800a45a:	9303      	str	r3, [sp, #12]
 800a45c:	2307      	movs	r3, #7
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	2302      	movs	r3, #2
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	2308      	movs	r3, #8
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	2304      	movs	r3, #4
 800a46a:	2202      	movs	r2, #2
 800a46c:	2108      	movs	r1, #8
 800a46e:	2004      	movs	r0, #4
 800a470:	f00a f8c8 	bl	8014604 <VL53L1_init_zone_config_structure>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	3301      	adds	r3, #1
 800a47e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d108      	bne.n	800a49e <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	3302      	adds	r3, #2
 800a490:	461a      	mov	r2, r3
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a496:	f002 ffcf 	bl	800d438 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f82c 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b08a      	sub	sp, #40	; 0x28
 800a4be:	af04      	add	r7, sp, #16
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	9302      	str	r3, [sp, #8]
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7fe fb9e 	bl	8008c24 <VL53L1_preset_mode_standard_ranging>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a4fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	79db      	ldrb	r3, [r3, #7]
 800a548:	b29b      	uxth	r3, r3
				<< 8)
 800a54a:	021b      	lsls	r3, r3, #8
 800a54c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	7a1b      	ldrb	r3, [r3, #8]
 800a552:	b29b      	uxth	r3, r3
 800a554:	4413      	add	r3, r2
 800a556:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	b29b      	uxth	r3, r3
				<< 8)
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	789b      	ldrb	r3, [r3, #2]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4413      	add	r3, r2
 800a59e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	b29b      	uxth	r3, r3
				<< 8)
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	79db      	ldrb	r3, [r3, #7]
 800a630:	b29b      	uxth	r3, r3
				<< 8)
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	7a1b      	ldrb	r3, [r3, #8]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4413      	add	r3, r2
 800a63e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	785b      	ldrb	r3, [r3, #1]
 800a670:	b29b      	uxth	r3, r3
				<< 8)
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	789b      	ldrb	r3, [r3, #2]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	78db      	ldrb	r3, [r3, #3]
 800a688:	b29b      	uxth	r3, r3
				<< 8)
 800a68a:	021b      	lsls	r3, r3, #8
 800a68c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	791b      	ldrb	r3, [r3, #4]
 800a692:	b29b      	uxth	r3, r3
 800a694:	4413      	add	r3, r2
 800a696:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a6ac:	bf00      	nop
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08c      	sub	sp, #48	; 0x30
 800a6bc:	af06      	add	r7, sp, #24
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	9304      	str	r3, [sp, #16]
 800a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	9302      	str	r3, [sp, #8]
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7fe fe64 	bl	80093b2 <VL53L1_preset_mode_histogram_ranging>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10a      	bne.n	800a70c <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff fefd 	bl	800a506 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3318      	adds	r3, #24
 800a724:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2230      	movs	r2, #48	; 0x30
 800a73a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a744:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3318      	adds	r3, #24
 800a762:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	332c      	adds	r3, #44	; 0x2c
 800a768:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	78fa      	ldrb	r2, [r7, #3]
 800a76e:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	2200      	movs	r2, #0
 800a774:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2202      	movs	r2, #2
 800a77a:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2200      	movs	r2, #0
 800a780:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2200      	movs	r2, #0
 800a786:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	78fa      	ldrb	r2, [r7, #3]
 800a78c:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2200      	movs	r2, #0
 800a792:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2202      	movs	r2, #2
 800a798:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	2200      	movs	r2, #0
 800a79e:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	735a      	strb	r2, [r3, #13]

}
 800a7a6:	bf00      	nop
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3318      	adds	r3, #24
 800a7c4:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	332c      	adds	r3, #44	; 0x2c
 800a7ca:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a7d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d115      	bne.n	800a806 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2203      	movs	r2, #3
 800a7de:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	735a      	strb	r2, [r3, #13]
 800a804:	e0be      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	7a1b      	ldrb	r3, [r3, #8]
 800a80a:	2bff      	cmp	r3, #255	; 0xff
 800a80c:	d103      	bne.n	800a816 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2280      	movs	r2, #128	; 0x80
 800a812:	721a      	strb	r2, [r3, #8]
 800a814:	e005      	b.n	800a822 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	7a1b      	ldrb	r3, [r3, #8]
 800a81a:	3301      	adds	r3, #1
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	7a19      	ldrb	r1, [r3, #8]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f103 0209 	add.w	r2, r3, #9
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	330a      	adds	r3, #10
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 fdc2 	bl	800d3ba <VL53L1_update_internal_stream_counters>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	7adb      	ldrb	r3, [r3, #11]
 800a83e:	f083 0302 	eor.w	r3, r3, #2
 800a842:	b2da      	uxtb	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	79db      	ldrb	r3, [r3, #7]
 800a84c:	3b03      	subs	r3, #3
 800a84e:	2b05      	cmp	r3, #5
 800a850:	f200 8082 	bhi.w	800a958 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a854:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a875 	.word	0x0800a875
 800a860:	0800a959 	.word	0x0800a959
 800a864:	0800a959 	.word	0x0800a959
 800a868:	0800a8c7 	.word	0x0800a8c7
 800a86c:	0800a8fd 	.word	0x0800a8fd
 800a870:	0800a927 	.word	0x0800a927

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dd03      	ble.n	800a88a <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2206      	movs	r2, #6
 800a886:	71da      	strb	r2, [r3, #7]
 800a888:	e00d      	b.n	800a8a6 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a894:	429a      	cmp	r2, r3
 800a896:	d303      	bcc.n	800a8a0 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2208      	movs	r2, #8
 800a89c:	71da      	strb	r2, [r3, #7]
 800a89e:	e002      	b.n	800a8a6 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2207      	movs	r2, #7
 800a8a4:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	735a      	strb	r2, [r3, #13]

			break;
 800a8c4:	e05e      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d303      	bcc.n	800a8f4 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2208      	movs	r2, #8
 800a8f0:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a8f2:	e047      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2207      	movs	r2, #7
 800a8f8:	71da      	strb	r2, [r3, #7]
			break;
 800a8fa:	e043      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	7b5b      	ldrb	r3, [r3, #13]
 800a900:	3301      	adds	r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a912:	429a      	cmp	r2, r3
 800a914:	d303      	bcc.n	800a91e <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2208      	movs	r2, #8
 800a91a:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a91c:	e032      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2207      	movs	r2, #7
 800a922:	71da      	strb	r2, [r3, #7]
			break;
 800a924:	e02e      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	7b1b      	ldrb	r3, [r3, #12]
 800a930:	f083 0301 	eor.w	r3, r3, #1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a944:	429a      	cmp	r2, r3
 800a946:	d303      	bcc.n	800a950 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2208      	movs	r2, #8
 800a94c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a94e:	e019      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2207      	movs	r2, #7
 800a954:	71da      	strb	r2, [r3, #7]
			break;
 800a956:	e015      	b.n	800a984 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2203      	movs	r2, #3
 800a95c:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2202      	movs	r2, #2
 800a974:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	735a      	strb	r2, [r3, #13]
			break;
 800a982:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a990:	b480      	push	{r7}
 800a992:	b08d      	sub	sp, #52	; 0x34
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a998:	2300      	movs	r3, #0
 800a99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3318      	adds	r3, #24
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	332c      	adds	r3, #44	; 0x2c
 800a9b2:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a9ba:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a9c2:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a9ca:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a9ea:	f003 031f 	and.w	r3, r3, #31
 800a9ee:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	78db      	ldrb	r3, [r3, #3]
 800a9f4:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a9fc:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bf14      	ite	ne
 800aa04:	2301      	movne	r3, #1
 800aa06:	2300      	moveq	r3, #0
 800aa08:	b2db      	uxtb	r3, r3
	histogram_mode =
 800aa0a:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800aa10:	111b      	asrs	r3, r3, #4
 800aa12:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800aa1c:	7c7b      	ldrb	r3, [r7, #17]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d008      	beq.n	800aa34 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800aa28:	111b      	asrs	r3, r3, #4
 800aa2a:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d04e      	beq.n	800aae0 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800aa42:	6a3b      	ldr	r3, [r7, #32]
 800aa44:	79db      	ldrb	r3, [r3, #7]
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d109      	bne.n	800aa5e <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800aa4a:	7c7b      	ldrb	r3, [r7, #17]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d14a      	bne.n	800aae6 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800aa50:	7cfb      	ldrb	r3, [r7, #19]
 800aa52:	2b12      	cmp	r3, #18
 800aa54:	d047      	beq.n	800aae6 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800aa56:	23ef      	movs	r3, #239	; 0xef
 800aa58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa5c:	e043      	b.n	800aae6 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	7a1b      	ldrb	r3, [r3, #8]
 800aa62:	7cba      	ldrb	r2, [r7, #18]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d002      	beq.n	800aa6e <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800aa68:	23ee      	movs	r3, #238	; 0xee
 800aa6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	7adb      	ldrb	r3, [r3, #11]
 800aa72:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d002      	beq.n	800aa80 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800aa7a:	23ed      	movs	r3, #237	; 0xed
 800aa7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	7b5b      	ldrb	r3, [r3, #13]
 800aa84:	4619      	mov	r1, r3
		expected_stream_count =
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	4413      	add	r3, r2
 800aa92:	3302      	adds	r3, #2
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	7b5b      	ldrb	r3, [r3, #13]
 800aa9c:	4619      	mov	r1, r3
		expected_gph_id =
 800aa9e:	697a      	ldr	r2, [r7, #20]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	440b      	add	r3, r1
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3303      	adds	r3, #3
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800aab0:	7c3a      	ldrb	r2, [r7, #16]
 800aab2:	7cbb      	ldrb	r3, [r7, #18]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d00a      	beq.n	800aace <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <VL53L1_check_ll_driver_rd_state+0x138>
 800aac2:	7cbb      	ldrb	r3, [r7, #18]
 800aac4:	2bff      	cmp	r3, #255	; 0xff
 800aac6:	d002      	beq.n	800aace <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800aac8:	23ec      	movs	r3, #236	; 0xec
 800aaca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800aace:	7bfa      	ldrb	r2, [r7, #15]
 800aad0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d005      	beq.n	800aae4 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800aad8:	23eb      	movs	r3, #235	; 0xeb
 800aada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aade:	e002      	b.n	800aae6 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800aae4:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800aae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3734      	adds	r7, #52	; 0x34
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b088      	sub	sp, #32
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800aafe:	2300      	movs	r3, #0
 800ab00:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3318      	adds	r3, #24
 800ab06:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ab0e:	3308      	adds	r3, #8
 800ab10:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	332c      	adds	r3, #44	; 0x2c
 800ab16:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ab1e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800ab26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d11b      	bne.n	800ab66 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2203      	movs	r2, #3
 800ab32:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2200      	movs	r2, #0
 800ab38:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	2200      	movs	r2, #0
 800ab44:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2202      	movs	r2, #2
 800ab4a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	2200      	movs	r2, #0
 800ab56:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	773b      	strb	r3, [r7, #28]
 800ab64:	e0b1      	b.n	800acca <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	791b      	ldrb	r3, [r3, #4]
 800ab6a:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	799b      	ldrb	r3, [r3, #6]
 800ab70:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	785b      	ldrb	r3, [r3, #1]
 800ab76:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	785b      	ldrb	r3, [r3, #1]
 800ab7c:	2bff      	cmp	r3, #255	; 0xff
 800ab7e:	d103      	bne.n	800ab88 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2280      	movs	r2, #128	; 0x80
 800ab84:	705a      	strb	r2, [r3, #1]
 800ab86:	e005      	b.n	800ab94 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	785b      	ldrb	r3, [r3, #1]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	7859      	ldrb	r1, [r3, #1]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	1c9a      	adds	r2, r3, #2
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	3303      	adds	r3, #3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f002 fc0a 	bl	800d3ba <VL53L1_update_internal_stream_counters>
 800aba6:	4603      	mov	r3, r0
 800aba8:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	f083 0302 	eor.w	r3, r3, #2
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d053      	beq.n	800ac68 <VL53L1_update_ll_driver_cfg_state+0x172>
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	dc69      	bgt.n	800ac98 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d002      	beq.n	800abce <VL53L1_update_ll_driver_cfg_state+0xd8>
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d02d      	beq.n	800ac28 <VL53L1_update_ll_driver_cfg_state+0x132>
 800abcc:	e064      	b.n	800ac98 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2201      	movs	r2, #1
 800abd2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800abde:	429a      	cmp	r2, r3
 800abe0:	d909      	bls.n	800abf6 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2200      	movs	r2, #0
 800abe6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	795b      	ldrb	r3, [r3, #5]
 800abec:	f083 0301 	eor.w	r3, r3, #1
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2201      	movs	r2, #1
 800abfa:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	70da      	strb	r2, [r3, #3]
 800ac12:	e005      	b.n	800ac20 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2200      	movs	r2, #0
 800ac18:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2204      	movs	r2, #4
 800ac24:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800ac26:	e050      	b.n	800acca <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	799b      	ldrb	r3, [r3, #6]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d940      	bls.n	800acc4 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2200      	movs	r2, #0
 800ac46:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	795b      	ldrb	r3, [r3, #5]
 800ac4c:	f083 0301 	eor.w	r3, r3, #1
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d031      	beq.n	800acc4 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2205      	movs	r2, #5
 800ac64:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800ac66:	e02d      	b.n	800acc4 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	799b      	ldrb	r3, [r3, #6]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d922      	bls.n	800acc8 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2200      	movs	r2, #0
 800ac86:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	795b      	ldrb	r3, [r3, #5]
 800ac8c:	f083 0301 	eor.w	r3, r3, #1
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	715a      	strb	r2, [r3, #5]
			}
			break;
 800ac96:	e017      	b.n	800acc8 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2203      	movs	r2, #3
 800ac9c:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2200      	movs	r2, #0
 800aca2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	2200      	movs	r2, #0
 800aca8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	2200      	movs	r2, #0
 800acae:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2202      	movs	r2, #2
 800acb4:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2200      	movs	r2, #0
 800acba:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2200      	movs	r2, #0
 800acc0:	719a      	strb	r2, [r3, #6]
			break;
 800acc2:	e002      	b.n	800acca <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800acc4:	bf00      	nop
 800acc6:	e000      	b.n	800acca <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800acc8:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d11d      	bne.n	800ad10 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800acd4:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800acd6:	7f3b      	ldrb	r3, [r7, #28]
 800acd8:	3b01      	subs	r3, #1
 800acda:	b2d8      	uxtb	r0, r3
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	440b      	add	r3, r1
 800ace8:	3302      	adds	r3, #2
 800acea:	4602      	mov	r2, r0
 800acec:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	7b5b      	ldrb	r3, [r3, #13]
 800acf2:	4619      	mov	r1, r3
 800acf4:	7f7b      	ldrb	r3, [r7, #29]
 800acf6:	f083 0302 	eor.w	r3, r3, #2
 800acfa:	b2d8      	uxtb	r0, r3
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	460b      	mov	r3, r1
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	440b      	add	r3, r1
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	3303      	adds	r3, #3
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	701a      	strb	r2, [r3, #0]
 800ad0e:	e013      	b.n	800ad38 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ad10:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3302      	adds	r3, #2
 800ad20:	7f3a      	ldrb	r2, [r7, #28]
 800ad22:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800ad24:	7fba      	ldrb	r2, [r7, #30]
 800ad26:	68f9      	ldr	r1, [r7, #12]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	440b      	add	r3, r1
 800ad32:	3303      	adds	r3, #3
 800ad34:	7f7a      	ldrb	r2, [r7, #29]
 800ad36:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800ad38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7c1a      	ldrb	r2, [r3, #16]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	7c52      	ldrb	r2, [r2, #17]
 800ad5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	3302      	adds	r3, #2
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c92      	ldrb	r2, [r2, #18]
 800ad68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	3303      	adds	r3, #3
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	7cd2      	ldrb	r2, [r2, #19]
 800ad72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	3304      	adds	r3, #4
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7d12      	ldrb	r2, [r2, #20]
 800ad7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	3305      	adds	r3, #5
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	7d52      	ldrb	r2, [r2, #21]
 800ad86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	3306      	adds	r3, #6
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7d92      	ldrb	r2, [r2, #22]
 800ad90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	3307      	adds	r3, #7
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	7dd2      	ldrb	r2, [r2, #23]
 800ad9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3308      	adds	r3, #8
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	7e12      	ldrb	r2, [r2, #24]
 800ada4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	3309      	adds	r3, #9
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	7e52      	ldrb	r2, [r2, #25]
 800adae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	330a      	adds	r3, #10
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	7e92      	ldrb	r2, [r2, #26]
 800adb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	330b      	adds	r3, #11
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	7ed2      	ldrb	r2, [r2, #27]
 800adc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	330c      	adds	r3, #12
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	7f12      	ldrb	r2, [r2, #28]
 800adcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	330d      	adds	r3, #13
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	7f52      	ldrb	r2, [r2, #29]
 800add6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	330e      	adds	r3, #14
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7f92      	ldrb	r2, [r2, #30]
 800ade0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	330f      	adds	r3, #15
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	7fd2      	ldrb	r2, [r2, #31]
 800adea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	3310      	adds	r3, #16
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800adf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	3311      	adds	r3, #17
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ae02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	3312      	adds	r3, #18
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ae0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	3313      	adds	r3, #19
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ae1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3314      	adds	r3, #20
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ae26:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	3315      	adds	r3, #21
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ae32:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	3316      	adds	r3, #22
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ae3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	3317      	adds	r3, #23
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ae4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	3318      	adds	r3, #24
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ae56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	3319      	adds	r3, #25
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ae62:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	331a      	adds	r3, #26
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ae6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	331b      	adds	r3, #27
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ae7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	331c      	adds	r3, #28
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800ae86:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	331d      	adds	r3, #29
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800ae92:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	331e      	adds	r3, #30
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ae9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	331f      	adds	r3, #31
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800aeaa:	701a      	strb	r2, [r3, #0]
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	; 0xff
 800aec4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	22ff      	movs	r2, #255	; 0xff
 800aeca:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	22ff      	movs	r2, #255	; 0xff
 800aed0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	22ff      	movs	r2, #255	; 0xff
 800aed6:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aede:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeee:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef6:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aefe:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af06:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af0e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af16:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af1e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af26:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af2e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af36:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af3e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af46:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af4e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af56:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af5e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af66:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af6e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	6039      	str	r1, [r7, #0]
 800af8e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2210      	movs	r2, #16
 800af98:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	79fa      	ldrb	r2, [r7, #7]
 800af9e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
 800afa4:	e017      	b.n	800afd6 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800afa6:	7bfa      	ldrb	r2, [r7, #15]
 800afa8:	4613      	mov	r3, r2
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	4413      	add	r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	4413      	add	r3, r2
 800afb4:	3304      	adds	r3, #4
 800afb6:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2203      	movs	r2, #3
 800afbc:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2203      	movs	r2, #3
 800afc2:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2204      	movs	r2, #4
 800afc8:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2200      	movs	r2, #0
 800afce:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	3301      	adds	r3, #1
 800afd4:	73fb      	strb	r3, [r7, #15]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	7bfa      	ldrb	r2, [r7, #15]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3e2      	bcc.n	800afa6 <V53L1_init_zone_results_structure+0x22>
	}
}
 800afe0:	bf00      	nop
 800afe2:	bf00      	nop
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800afee:	b480      	push	{r7}
 800aff0:	b087      	sub	sp, #28
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800affc:	3308      	adds	r3, #8
 800affe:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800b004:	2310      	movs	r3, #16
 800b006:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b00e:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800b010:	2300      	movs	r3, #0
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	e016      	b.n	800b044 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800b016:	7dfa      	ldrb	r2, [r7, #23]
 800b018:	68b9      	ldr	r1, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	440b      	add	r3, r1
 800b024:	3304      	adds	r3, #4
 800b026:	2201      	movs	r2, #1
 800b028:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800b02a:	7dfa      	ldrb	r2, [r7, #23]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4413      	add	r3, r2
 800b034:	005b      	lsls	r3, r3, #1
 800b036:	440b      	add	r3, r1
 800b038:	3306      	adds	r3, #6
 800b03a:	2200      	movs	r2, #0
 800b03c:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	3301      	adds	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]
 800b044:	7dfa      	ldrb	r2, [r7, #23]
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d3e4      	bcc.n	800b016 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	371c      	adds	r7, #28
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800b05a:	b490      	push	{r4, r7}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
 800b060:	4604      	mov	r4, r0
 800b062:	4608      	mov	r0, r1
 800b064:	4611      	mov	r1, r2
 800b066:	461a      	mov	r2, r3
 800b068:	4623      	mov	r3, r4
 800b06a:	71fb      	strb	r3, [r7, #7]
 800b06c:	4603      	mov	r3, r0
 800b06e:	71bb      	strb	r3, [r7, #6]
 800b070:	460b      	mov	r3, r1
 800b072:	717b      	strb	r3, [r7, #5]
 800b074:	4613      	mov	r3, r2
 800b076:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b078:	79bb      	ldrb	r3, [r7, #6]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	4413      	add	r3, r2
 800b082:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b088:	793b      	ldrb	r3, [r7, #4]
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	797b      	ldrb	r3, [r7, #5]
 800b090:	4413      	add	r3, r2
 800b092:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b098:	7d3b      	ldrb	r3, [r7, #20]
 800b09a:	011b      	lsls	r3, r3, #4
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	7c3b      	ldrb	r3, [r7, #16]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800b0a8:	7f3b      	ldrb	r3, [r7, #28]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	7e3b      	ldrb	r3, [r7, #24]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800b0b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800b0cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0d8:	4413      	add	r3, r2
 800b0da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e6:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b106:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b10c:	011b      	lsls	r3, r3, #4
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b114:	4413      	add	r3, r2
 800b116:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b122:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2200      	movs	r2, #0
 800b128:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b160:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b168:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]

}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bc90      	pop	{r4, r7}
 800b178:	4770      	bx	lr

0800b17a <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800b17a:	b490      	push	{r4, r7}
 800b17c:	b082      	sub	sp, #8
 800b17e:	af00      	add	r7, sp, #0
 800b180:	4604      	mov	r4, r0
 800b182:	4608      	mov	r0, r1
 800b184:	4611      	mov	r1, r2
 800b186:	461a      	mov	r2, r3
 800b188:	4623      	mov	r3, r4
 800b18a:	71fb      	strb	r3, [r7, #7]
 800b18c:	4603      	mov	r3, r0
 800b18e:	71bb      	strb	r3, [r7, #6]
 800b190:	460b      	mov	r3, r1
 800b192:	717b      	strb	r3, [r7, #5]
 800b194:	4613      	mov	r3, r2
 800b196:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b198:	79bb      	ldrb	r3, [r7, #6]
 800b19a:	011b      	lsls	r3, r3, #4
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b1a8:	793b      	ldrb	r3, [r7, #4]
 800b1aa:	011b      	lsls	r3, r3, #4
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	797b      	ldrb	r3, [r7, #5]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b6:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b1b8:	7d3b      	ldrb	r3, [r7, #20]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	7c3b      	ldrb	r3, [r7, #16]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	789a      	ldrb	r2, [r3, #2]
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	78da      	ldrb	r2, [r3, #3]
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	789a      	ldrb	r2, [r3, #2]
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f2:	78da      	ldrb	r2, [r3, #3]
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f6:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	791a      	ldrb	r2, [r3, #4]
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b202:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b206:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b208:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b20c:	011b      	lsls	r3, r3, #4
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b214:	4413      	add	r3, r2
 800b216:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b222:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	2200      	movs	r2, #0
 800b228:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800b22a:	7f3b      	ldrb	r3, [r7, #28]
 800b22c:	011b      	lsls	r3, r3, #4
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	7e3b      	ldrb	r3, [r7, #24]
 800b232:	4413      	add	r3, r2
 800b234:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800b23a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b23e:	011b      	lsls	r3, r3, #4
 800b240:	b2da      	uxtb	r2, r3
 800b242:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b246:	4413      	add	r3, r2
 800b248:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800b24e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b252:	011b      	lsls	r3, r3, #4
 800b254:	b2da      	uxtb	r2, r3
 800b256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b25a:	4413      	add	r3, r2
 800b25c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	7bda      	ldrb	r2, [r3, #15]
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	7c1a      	ldrb	r2, [r3, #16]
 800b26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b270:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	7c5a      	ldrb	r2, [r3, #17]
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b280:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b288:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	2200      	movs	r2, #0
 800b28e:	701a      	strb	r2, [r3, #0]
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bc90      	pop	{r4, r7}
 800b298:	4770      	bx	lr

0800b29a <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b087      	sub	sp, #28
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	607a      	str	r2, [r7, #4]
 800b2a6:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	220c      	movs	r2, #12
 800b2c2:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b2c4:	897b      	ldrh	r3, [r7, #10]
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	82fb      	strh	r3, [r7, #22]
 800b2fe:	e015      	b.n	800b32c <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b300:	8afa      	ldrh	r2, [r7, #22]
 800b302:	897b      	ldrh	r3, [r7, #10]
 800b304:	429a      	cmp	r2, r3
 800b306:	d207      	bcs.n	800b318 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b308:	8afb      	ldrh	r3, [r7, #22]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	3302      	adds	r3, #2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	605a      	str	r2, [r3, #4]
 800b316:	e006      	b.n	800b326 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b318:	8afb      	ldrh	r3, [r7, #22]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	3302      	adds	r3, #2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	2200      	movs	r2, #0
 800b324:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b326:	8afb      	ldrh	r3, [r7, #22]
 800b328:	3301      	adds	r3, #1
 800b32a:	82fb      	strh	r3, [r7, #22]
 800b32c:	8afb      	ldrh	r3, [r7, #22]
 800b32e:	2b0b      	cmp	r3, #11
 800b330:	d9e6      	bls.n	800b300 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	603a      	str	r2, [r7, #0]
 800b34a:	80fb      	strh	r3, [r7, #6]
 800b34c:	460b      	mov	r3, r1
 800b34e:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b35c:	2300      	movs	r3, #0
 800b35e:	81fb      	strh	r3, [r7, #14]
 800b360:	e00e      	b.n	800b380 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b362:	88ba      	ldrh	r2, [r7, #4]
 800b364:	89fb      	ldrh	r3, [r7, #14]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	4413      	add	r3, r2
 800b36e:	89ba      	ldrh	r2, [r7, #12]
 800b370:	b2d2      	uxtb	r2, r2
 800b372:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b374:	89bb      	ldrh	r3, [r7, #12]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b37a:	89fb      	ldrh	r3, [r7, #14]
 800b37c:	3301      	adds	r3, #1
 800b37e:	81fb      	strh	r3, [r7, #14]
 800b380:	89fa      	ldrh	r2, [r7, #14]
 800b382:	88bb      	ldrh	r3, [r7, #4]
 800b384:	429a      	cmp	r2, r3
 800b386:	d3ec      	bcc.n	800b362 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b396:	b480      	push	{r7}
 800b398:	b085      	sub	sp, #20
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	4603      	mov	r3, r0
 800b39e:	6039      	str	r1, [r7, #0]
 800b3a0:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b3a6:	e00a      	b.n	800b3be <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b3a8:	89fb      	ldrh	r3, [r7, #14]
 800b3aa:	021b      	lsls	r3, r3, #8
 800b3ac:	b21a      	sxth	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	1c59      	adds	r1, r3, #1
 800b3b2:	6039      	str	r1, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b21b      	sxth	r3, r3
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	b21b      	sxth	r3, r3
 800b3bc:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b3be:	88fb      	ldrh	r3, [r7, #6]
 800b3c0:	1e5a      	subs	r2, r3, #1
 800b3c2:	80fa      	strh	r2, [r7, #6]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1ef      	bne.n	800b3a8 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b3c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	4603      	mov	r3, r0
 800b3de:	603a      	str	r2, [r7, #0]
 800b3e0:	80fb      	strh	r3, [r7, #6]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	81fb      	strh	r3, [r7, #14]
 800b3f6:	e00f      	b.n	800b418 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b3f8:	88ba      	ldrh	r2, [r7, #4]
 800b3fa:	89fb      	ldrh	r3, [r7, #14]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	4413      	add	r3, r2
 800b404:	89ba      	ldrh	r2, [r7, #12]
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b40a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b40e:	121b      	asrs	r3, r3, #8
 800b410:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b412:	89fb      	ldrh	r3, [r7, #14]
 800b414:	3301      	adds	r3, #1
 800b416:	81fb      	strh	r3, [r7, #14]
 800b418:	89fa      	ldrh	r2, [r7, #14]
 800b41a:	88bb      	ldrh	r3, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d3eb      	bcc.n	800b3f8 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b420:	bf00      	nop
 800b422:	bf00      	nop
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	4603      	mov	r3, r0
 800b436:	6039      	str	r1, [r7, #0]
 800b438:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b43a:	2300      	movs	r3, #0
 800b43c:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b25b      	sxtb	r3, r3
 800b444:	2b00      	cmp	r3, #0
 800b446:	da0e      	bge.n	800b466 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b44c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b44e:	e00a      	b.n	800b466 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	b21a      	sxth	r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	1c59      	adds	r1, r3, #1
 800b45c:	6039      	str	r1, [r7, #0]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	b21b      	sxth	r3, r3
 800b462:	4313      	orrs	r3, r2
 800b464:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	1e5a      	subs	r2, r3, #1
 800b46a:	80fa      	strh	r2, [r7, #6]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1ef      	bne.n	800b450 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	460b      	mov	r3, r1
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b49a:	2300      	movs	r3, #0
 800b49c:	82fb      	strh	r3, [r7, #22]
 800b49e:	e00e      	b.n	800b4be <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b4a0:	897a      	ldrh	r2, [r7, #10]
 800b4a2:	8afb      	ldrh	r3, [r7, #22]
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	b2d2      	uxtb	r2, r2
 800b4b0:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	0a1b      	lsrs	r3, r3, #8
 800b4b6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b4b8:	8afb      	ldrh	r3, [r7, #22]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	82fb      	strh	r3, [r7, #22]
 800b4be:	8afa      	ldrh	r2, [r7, #22]
 800b4c0:	897b      	ldrh	r3, [r7, #10]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d3ec      	bcc.n	800b4a0 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	371c      	adds	r7, #28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	6039      	str	r1, [r7, #0]
 800b4de:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b4e4:	e007      	b.n	800b4f6 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	021a      	lsls	r2, r3, #8
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	1c59      	adds	r1, r3, #1
 800b4ee:	6039      	str	r1, [r7, #0]
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b4f6:	88fb      	ldrh	r3, [r7, #6]
 800b4f8:	1e5a      	subs	r2, r3, #1
 800b4fa:	80fa      	strh	r2, [r7, #6]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1f2      	bne.n	800b4e6 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b500:	68fb      	ldr	r3, [r7, #12]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b50e:	b480      	push	{r7}
 800b510:	b085      	sub	sp, #20
 800b512:	af00      	add	r7, sp, #0
 800b514:	4603      	mov	r3, r0
 800b516:	6039      	str	r1, [r7, #0]
 800b518:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b25b      	sxtb	r3, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	da0b      	bge.n	800b540 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b52e:	e007      	b.n	800b540 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	021a      	lsls	r2, r3, #8
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	1c59      	adds	r1, r3, #1
 800b538:	6039      	str	r1, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b540:	88fb      	ldrh	r3, [r7, #6]
 800b542:	1e5a      	subs	r2, r3, #1
 800b544:	80fa      	strh	r2, [r7, #6]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1f2      	bne.n	800b530 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b54a:	68fb      	ldr	r3, [r7, #12]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	460b      	mov	r3, r1
 800b562:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b564:	2300      	movs	r3, #0
 800b566:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d107      	bne.n	800b580 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	461a      	mov	r2, r3
 800b574:	2127      	movs	r1, #39	; 0x27
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f009 f9ce 	bl	8014918 <VL53L1_WrByte>
 800b57c:	4603      	mov	r3, r0
 800b57e:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3318      	adds	r3, #24
 800b5a0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	78fa      	ldrb	r2, [r7, #3]
 800b5a6:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	2185      	movs	r1, #133	; 0x85
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f009 f9af 	bl	8014918 <VL53L1_WrByte>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b5be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ffd7 	bl	800b58c <VL53L1_set_firmware_enable_register>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff ffc5 	bl	800b58c <VL53L1_set_firmware_enable_register>
 800b602:	4603      	mov	r3, r0
 800b604:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	460b      	mov	r3, r1
 800b61c:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b61e:	2300      	movs	r3, #0
 800b620:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3318      	adds	r3, #24
 800b626:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	78fa      	ldrb	r2, [r7, #3]
 800b62c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b636:	461a      	mov	r2, r3
 800b638:	2183      	movs	r1, #131	; 0x83
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f009 f96c 	bl	8014918 <VL53L1_WrByte>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b65c:	2101      	movs	r1, #1
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff ffd7 	bl	800b612 <VL53L1_set_powerforce_register>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b67c:	2300      	movs	r3, #0
 800b67e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ffc5 	bl	800b612 <VL53L1_set_powerforce_register>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	2186      	movs	r1, #134	; 0x86
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f009 f92b 	bl	8014918 <VL53L1_WrByte>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	4603      	mov	r3, r0
 800b6da:	460a      	mov	r2, r1
 800b6dc:	80fb      	strh	r3, [r7, #6]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f002 ffeb 	bl	800e6cc <VL53L1_calc_pll_period_us>
 800b6f6:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b6f8:	797b      	ldrb	r3, [r7, #5]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f003 fbd6 	bl	800eeac <VL53L1_decode_vcsel_period>
 800b700:	4603      	mov	r3, r0
 800b702:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4613      	mov	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4413      	add	r3, r2
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	099b      	lsrs	r3, r3, #6
 800b714:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b716:	7cfa      	ldrb	r2, [r7, #19]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	fb02 f303 	mul.w	r3, r2, r3
 800b71e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	099b      	lsrs	r3, r3, #6
 800b724:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b726:	68fb      	ldr	r3, [r7, #12]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b730:	b480      	push	{r7}
 800b732:	b089      	sub	sp, #36	; 0x24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4603      	mov	r3, r0
 800b740:	817b      	strh	r3, [r7, #10]
 800b742:	460b      	mov	r3, r1
 800b744:	813b      	strh	r3, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	011b      	lsls	r3, r3, #4
 800b762:	4a23      	ldr	r2, [pc, #140]	; (800b7f0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b764:	fb82 1203 	smull	r1, r2, r2, r3
 800b768:	1192      	asrs	r2, r2, #6
 800b76a:	17db      	asrs	r3, r3, #31
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b770:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b774:	2b00      	cmp	r3, #0
 800b776:	da03      	bge.n	800b780 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b778:	897b      	ldrh	r3, [r7, #10]
 800b77a:	425b      	negs	r3, r3
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b780:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	da03      	bge.n	800b790 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b788:	893b      	ldrh	r3, [r7, #8]
 800b78a:	425b      	negs	r3, r3
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b790:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b794:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b798:	4413      	add	r3, r2
 800b79a:	015b      	lsls	r3, r3, #5
 800b79c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	4a13      	ldr	r2, [pc, #76]	; (800b7f0 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b7a2:	fb82 1203 	smull	r1, r2, r2, r3
 800b7a6:	1192      	asrs	r2, r2, #6
 800b7a8:	17db      	asrs	r3, r3, #31
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b7b6:	79fa      	ldrb	r2, [r7, #7]
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	fb02 f303 	mul.w	r3, r2, r3
 800b7be:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	3310      	adds	r3, #16
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	da00      	bge.n	800b7ca <VL53L1_calc_range_ignore_threshold+0x9a>
 800b7c8:	331f      	adds	r3, #31
 800b7ca:	115b      	asrs	r3, r3, #5
 800b7cc:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d4:	db03      	blt.n	800b7de <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7da:	83fb      	strh	r3, [r7, #30]
 800b7dc:	e001      	b.n	800b7e2 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b7e2:	8bfb      	ldrh	r3, [r7, #30]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3724      	adds	r7, #36	; 0x24
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	10624dd3 	.word	0x10624dd3

0800b7f4 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	60fb      	str	r3, [r7, #12]
 800b80c:	e008      	b.n	800b820 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	031a      	lsls	r2, r3, #12
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	441a      	add	r2, r3
		timeout_mclks =
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b820:	68fb      	ldr	r3, [r7, #12]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ffd6 	bl	800b7f4 <VL53L1_calc_timeout_mclks>
 800b848:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 f887 	bl	800b95e <VL53L1_encode_timeout>
 800b850:	4603      	mov	r3, r0
 800b852:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b854:	897b      	ldrh	r3, [r7, #10]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b85e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b86a:	2100      	movs	r1, #0
 800b86c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b86e:	f04f 0000 	mov.w	r0, #0
 800b872:	f04f 0100 	mov.w	r1, #0
 800b876:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b87a:	6879      	ldr	r1, [r7, #4]
 800b87c:	2000      	movs	r0, #0
 800b87e:	4688      	mov	r8, r1
 800b880:	4681      	mov	r9, r0
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	2000      	movs	r0, #0
 800b886:	460c      	mov	r4, r1
 800b888:	4605      	mov	r5, r0
 800b88a:	fb04 f009 	mul.w	r0, r4, r9
 800b88e:	fb08 f105 	mul.w	r1, r8, r5
 800b892:	4401      	add	r1, r0
 800b894:	fba8 2304 	umull	r2, r3, r8, r4
 800b898:	4419      	add	r1, r3
 800b89a:	460b      	mov	r3, r1
 800b89c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b8a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b8a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8a8:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b8ac:	f143 0b00 	adc.w	fp, r3, #0
 800b8b0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b8b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	0b02      	lsrs	r2, r0, #12
 800b8c2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b8c6:	0b0b      	lsrs	r3, r1, #12
 800b8c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b8d0:	697b      	ldr	r3, [r7, #20]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b8f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b8f8:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b8fa:	4413      	add	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	da02      	bge.n	800b90a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	e005      	b.n	800b916 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b910:	db01      	blt.n	800b916 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b912:	4b05      	ldr	r3, [pc, #20]	; (800b928 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b914:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b91a:	68bb      	ldr	r3, [r7, #8]

}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	0003ffff 	.word	0x0003ffff

0800b92c <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	6039      	str	r1, [r7, #0]
 800b936:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b940:	88fb      	ldrh	r3, [r7, #6]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f837 	bl	800b9b6 <VL53L1_decode_timeout>
 800b948:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f7ff ff86 	bl	800b85e <VL53L1_calc_timeout_us>
 800b952:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b954:	68bb      	ldr	r3, [r7, #8]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b95e:	b480      	push	{r7}
 800b960:	b087      	sub	sp, #28
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d017      	beq.n	800b9a8 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b97e:	e005      	b.n	800b98c <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	085b      	lsrs	r3, r3, #1
 800b984:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b986:	89fb      	ldrh	r3, [r7, #14]
 800b988:	3301      	adds	r3, #1
 800b98a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1f4      	bne.n	800b980 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b996:	89fb      	ldrh	r3, [r7, #14]
 800b998:	021b      	lsls	r3, r3, #8
 800b99a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b9a8:	8afb      	ldrh	r3, [r7, #22]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	371c      	adds	r7, #28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b085      	sub	sp, #20
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	4603      	mov	r3, r0
 800b9be:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b9c4:	88fb      	ldrh	r3, [r7, #6]
 800b9c6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b9c8:	88fa      	ldrh	r2, [r7, #6]
 800b9ca:	0a12      	lsrs	r2, r2, #8
 800b9cc:	b292      	uxth	r2, r2
 800b9ce:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b088      	sub	sp, #32
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
 800b9ee:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800ba00:	887b      	ldrh	r3, [r7, #2]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ba06:	23f1      	movs	r3, #241	; 0xf1
 800ba08:	77fb      	strb	r3, [r7, #31]
 800ba0a:	e05d      	b.n	800bac8 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	799a      	ldrb	r2, [r3, #6]
 800ba10:	887b      	ldrh	r3, [r7, #2]
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fe5c 	bl	800b6d2 <VL53L1_calc_macro_period_us>
 800ba1a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fee8 	bl	800b7f4 <VL53L1_calc_timeout_mclks>
 800ba24:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2bff      	cmp	r3, #255	; 0xff
 800ba2a:	d901      	bls.n	800ba30 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800ba2c:	23ff      	movs	r3, #255	; 0xff
 800ba2e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba36:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ba38:	6979      	ldr	r1, [r7, #20]
 800ba3a:	68b8      	ldr	r0, [r7, #8]
 800ba3c:	f7ff fef7 	bl	800b82e <VL53L1_calc_encoded_timeout>
 800ba40:	4603      	mov	r3, r0
 800ba42:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba44:	8a7b      	ldrh	r3, [r7, #18]
 800ba46:	0a1b      	lsrs	r3, r3, #8
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba50:	8a7b      	ldrh	r3, [r7, #18]
 800ba52:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800ba58:	6979      	ldr	r1, [r7, #20]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fee7 	bl	800b82e <VL53L1_calc_encoded_timeout>
 800ba60:	4603      	mov	r3, r0
 800ba62:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba64:	8a7b      	ldrh	r3, [r7, #18]
 800ba66:	0a1b      	lsrs	r3, r3, #8
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba70:	8a7b      	ldrh	r3, [r7, #18]
 800ba72:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	7a5a      	ldrb	r2, [r3, #9]
 800ba7c:	887b      	ldrh	r3, [r7, #2]
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fe26 	bl	800b6d2 <VL53L1_calc_macro_period_us>
 800ba86:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800ba88:	6979      	ldr	r1, [r7, #20]
 800ba8a:	68b8      	ldr	r0, [r7, #8]
 800ba8c:	f7ff fecf 	bl	800b82e <VL53L1_calc_encoded_timeout>
 800ba90:	4603      	mov	r3, r0
 800ba92:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800ba94:	8a7b      	ldrh	r3, [r7, #18]
 800ba96:	0a1b      	lsrs	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800baa0:	8a7b      	ldrh	r3, [r7, #18]
 800baa2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800baa8:	6979      	ldr	r1, [r7, #20]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff febf 	bl	800b82e <VL53L1_calc_encoded_timeout>
 800bab0:	4603      	mov	r3, r0
 800bab2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800bab4:	8a7b      	ldrh	r3, [r7, #18]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800bac0:	8a7b      	ldrh	r3, [r7, #18]
 800bac2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800bac8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800bad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bad8:	b09e      	sub	sp, #120	; 0x78
 800bada:	af00      	add	r7, sp, #0
 800badc:	6578      	str	r0, [r7, #84]	; 0x54
 800bade:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800bae0:	2300      	movs	r3, #0
 800bae2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800bae6:	f04f 0200 	mov.w	r2, #0
 800baea:	f04f 0300 	mov.w	r3, #0
 800baee:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800baf2:	f04f 0200 	mov.w	r2, #0
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800bafe:	f04f 0200 	mov.w	r2, #0
 800bb02:	f04f 0300 	mov.w	r3, #0
 800bb06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800bb0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb0c:	885b      	ldrh	r3, [r3, #2]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d103      	bne.n	800bb1a <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800bb12:	23f1      	movs	r3, #241	; 0xf1
 800bb14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800bb18:	e0d6      	b.n	800bcc8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800bb1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f000 80d2 	beq.w	800bcc8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800bb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb26:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f040 80cd 	bne.w	800bcc8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb34:	2200      	movs	r2, #0
 800bb36:	643b      	str	r3, [r7, #64]	; 0x40
 800bb38:	647a      	str	r2, [r7, #68]	; 0x44
 800bb3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb3e:	460b      	mov	r3, r1
 800bb40:	3301      	adds	r3, #1
 800bb42:	623b      	str	r3, [r7, #32]
 800bb44:	4613      	mov	r3, r2
 800bb46:	f143 0300 	adc.w	r3, r3, #0
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800bb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb56:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb60:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800bb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb64:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bb68:	4602      	mov	r2, r0
 800bb6a:	fb02 f203 	mul.w	r2, r2, r3
 800bb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb70:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800bb74:	fb01 f303 	mul.w	r3, r1, r3
 800bb78:	441a      	add	r2, r3
 800bb7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb7c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb7e:	fba3 4501 	umull	r4, r5, r3, r1
 800bb82:	1953      	adds	r3, r2, r5
 800bb84:	461d      	mov	r5, r3
 800bb86:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800bb8a:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	2200      	movs	r2, #0
 800bb94:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb96:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bb98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	3301      	adds	r3, #1
 800bba0:	61bb      	str	r3, [r7, #24]
 800bba2:	4613      	mov	r3, r2
 800bba4:	f143 0300 	adc.w	r3, r3, #0
 800bba8:	61fb      	str	r3, [r7, #28]
 800bbaa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800bbae:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800bbb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbb4:	885b      	ldrh	r3, [r3, #2]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	2200      	movs	r2, #0
 800bbba:	633b      	str	r3, [r7, #48]	; 0x30
 800bbbc:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800bbbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	fb02 f203 	mul.w	r2, r2, r3
 800bbca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbcc:	4629      	mov	r1, r5
 800bbce:	fb01 f303 	mul.w	r3, r1, r3
 800bbd2:	441a      	add	r2, r3
 800bbd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	fba3 ab01 	umull	sl, fp, r3, r1
 800bbdc:	eb02 030b 	add.w	r3, r2, fp
 800bbe0:	469b      	mov	fp, r3
 800bbe2:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800bbe6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800bbea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	17da      	asrs	r2, r3, #31
 800bbf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbf2:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800bbf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800bbfa:	4622      	mov	r2, r4
 800bbfc:	fb02 f203 	mul.w	r2, r2, r3
 800bc00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc02:	4629      	mov	r1, r5
 800bc04:	fb01 f303 	mul.w	r3, r1, r3
 800bc08:	4413      	add	r3, r2
 800bc0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	fba2 8901 	umull	r8, r9, r2, r1
 800bc12:	444b      	add	r3, r9
 800bc14:	4699      	mov	r9, r3
 800bc16:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800bc1a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800bc1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc22:	0fd9      	lsrs	r1, r3, #31
 800bc24:	2000      	movs	r0, #0
 800bc26:	6139      	str	r1, [r7, #16]
 800bc28:	6178      	str	r0, [r7, #20]
 800bc2a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bc2e:	4621      	mov	r1, r4
 800bc30:	1889      	adds	r1, r1, r2
 800bc32:	60b9      	str	r1, [r7, #8]
 800bc34:	4629      	mov	r1, r5
 800bc36:	eb43 0101 	adc.w	r1, r3, r1
 800bc3a:	60f9      	str	r1, [r7, #12]
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bc48:	4621      	mov	r1, r4
 800bc4a:	084a      	lsrs	r2, r1, #1
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bc52:	4629      	mov	r1, r5
 800bc54:	104b      	asrs	r3, r1, #1
 800bc56:	4610      	mov	r0, r2
 800bc58:	4619      	mov	r1, r3
 800bc5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bc5e:	1814      	adds	r4, r2, r0
 800bc60:	603c      	str	r4, [r7, #0]
 800bc62:	414b      	adcs	r3, r1
 800bc64:	607b      	str	r3, [r7, #4]
 800bc66:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bc6a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800bc6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc72:	4313      	orrs	r3, r2
 800bc74:	d009      	beq.n	800bc8a <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800bc76:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bc7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc7e:	f7f4 facf 	bl	8000220 <__aeabi_ldivmod>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800bc8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800bc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800bc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800bc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800bca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bca6:	7852      	ldrb	r2, [r2, #1]
 800bca8:	0852      	lsrs	r2, r2, #1
 800bcaa:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800bcac:	441a      	add	r2, r3
 800bcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800bcb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800bcba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcbc:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800bcbe:	fb93 f2f2 	sdiv	r2, r3, r2
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800bcc8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3778      	adds	r7, #120	; 0x78
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bcd6 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b087      	sub	sp, #28
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3318      	adds	r3, #24
 800bce4:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800bcf8:	029b      	lsls	r3, r3, #10
 800bcfa:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800bd02:	029b      	lsls	r3, r3, #10
 800bd04:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f040 8095 	bne.w	800be40 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800bd1c:	091b      	lsrs	r3, r3, #4
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800bd2a:	f003 030f 	and.w	r3, r3, #15
 800bd2e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800bd3a:	091b      	lsrs	r3, r3, #4
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800bd48:	f003 030f 	and.w	r3, r3, #15
 800bd4c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800bd58:	091b      	lsrs	r3, r3, #4
 800bd5a:	b2da      	uxtb	r2, r3
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800bd66:	f003 030f 	and.w	r3, r3, #15
 800bd6a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	da2c      	bge.n	800bdd6 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800bd82:	091b      	lsrs	r3, r3, #4
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800bda0:	091b      	lsrs	r3, r3, #4
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bdae:	f003 030f 	and.w	r3, r3, #15
 800bdb2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bdbe:	091b      	lsrs	r3, r3, #4
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	f340 80c2 	ble.w	800bf68 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bdea:	091b      	lsrs	r3, r3, #4
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800be08:	091b      	lsrs	r3, r3, #4
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800be26:	091b      	lsrs	r3, r3, #4
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800be34:	f003 030f 	and.w	r3, r3, #15
 800be38:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	731a      	strb	r2, [r3, #12]
 800be3e:	e093      	b.n	800bf68 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800be46:	f003 030f 	and.w	r3, r3, #15
 800be4a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800be66:	091b      	lsrs	r3, r3, #4
 800be68:	b2da      	uxtb	r2, r3
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800be74:	f003 030f 	and.w	r3, r3, #15
 800be78:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800be84:	091b      	lsrs	r3, r3, #4
 800be86:	b2da      	uxtb	r2, r3
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800be92:	f003 030f 	and.w	r3, r3, #15
 800be96:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	da2c      	bge.n	800bf02 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800beae:	091b      	lsrs	r3, r3, #4
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bebc:	f003 030f 	and.w	r3, r3, #15
 800bec0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800becc:	091b      	lsrs	r3, r3, #4
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800beda:	f003 030f 	and.w	r3, r3, #15
 800bede:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800beea:	091b      	lsrs	r3, r3, #4
 800beec:	b2da      	uxtb	r2, r3
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bef8:	f003 030f 	and.w	r3, r3, #15
 800befc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	dd2c      	ble.n	800bf68 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800bf14:	091b      	lsrs	r3, r3, #4
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bf32:	091b      	lsrs	r3, r3, #4
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bf40:	f003 030f 	and.w	r3, r3, #15
 800bf44:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bf50:	091b      	lsrs	r3, r3, #4
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bf5e:	f003 030f 	and.w	r3, r3, #15
 800bf62:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf68:	2300      	movs	r3, #0
 800bf6a:	75fb      	strb	r3, [r7, #23]
 800bf6c:	e007      	b.n	800bf7e <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	4413      	add	r3, r2
 800bf74:	2201      	movs	r2, #1
 800bf76:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	75fb      	strb	r3, [r7, #23]
 800bf7e:	7dfb      	ldrb	r3, [r7, #23]
 800bf80:	2b05      	cmp	r3, #5
 800bf82:	d9f4      	bls.n	800bf6e <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bf84:	bf00      	nop
 800bf86:	bf00      	nop
 800bf88:	371c      	adds	r7, #28
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bf92:	b590      	push	{r4, r7, lr}
 800bf94:	b093      	sub	sp, #76	; 0x4c
 800bf96:	af04      	add	r7, sp, #16
 800bf98:	60f8      	str	r0, [r7, #12]
 800bf9a:	60b9      	str	r1, [r7, #8]
 800bf9c:	607a      	str	r2, [r7, #4]
 800bf9e:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3318      	adds	r3, #24
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bfd2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bfdc:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800bfe4:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800bfec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800bff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bff4:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800bff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	2b07      	cmp	r3, #7
 800c002:	d006      	beq.n	800c012 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800c008:	2b08      	cmp	r3, #8
 800c00a:	d002      	beq.n	800c012 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800c00c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c010:	e0ec      	b.n	800c1ec <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800c012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800c018:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c01c:	e0e6      	b.n	800c1ec <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c01e:	2300      	movs	r3, #0
 800c020:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c024:	e0d9      	b.n	800c1da <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800c026:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	214c      	movs	r1, #76	; 0x4c
 800c02e:	fb01 f303 	mul.w	r3, r1, r3
 800c032:	4413      	add	r3, r2
 800c034:	335e      	adds	r3, #94	; 0x5e
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b09      	cmp	r3, #9
 800c03a:	d00b      	beq.n	800c054 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800c03c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	214c      	movs	r1, #76	; 0x4c
 800c044:	fb01 f303 	mul.w	r3, r1, r3
 800c048:	4413      	add	r3, r2
 800c04a:	335e      	adds	r3, #94	; 0x5e
 800c04c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800c04e:	2b13      	cmp	r3, #19
 800c050:	f040 80bd 	bne.w	800c1ce <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	795b      	ldrb	r3, [r3, #5]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10a      	bne.n	800c072 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800c05c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	214c      	movs	r1, #76	; 0x4c
 800c064:	fb01 f303 	mul.w	r3, r1, r3
 800c068:	4413      	add	r3, r2
 800c06a:	335e      	adds	r3, #94	; 0x5e
 800c06c:	2217      	movs	r2, #23
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	e009      	b.n	800c086 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800c072:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	214c      	movs	r1, #76	; 0x4c
 800c07a:	fb01 f303 	mul.w	r3, r1, r3
 800c07e:	4413      	add	r3, r2
 800c080:	335e      	adds	r3, #94	; 0x5e
 800c082:	2207      	movs	r2, #7
 800c084:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800c086:	2300      	movs	r3, #0
 800c088:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c08c:	e097      	b.n	800c1be <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800c08e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	214c      	movs	r1, #76	; 0x4c
 800c096:	fb01 f303 	mul.w	r3, r1, r3
 800c09a:	4413      	add	r3, r2
 800c09c:	3354      	adds	r3, #84	; 0x54
 800c09e:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800c0a0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4403      	add	r3, r0
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800c0b4:	4299      	cmp	r1, r3
 800c0b6:	d915      	bls.n	800c0e4 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800c0b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	214c      	movs	r1, #76	; 0x4c
 800c0c0:	fb01 f303 	mul.w	r3, r1, r3
 800c0c4:	4413      	add	r3, r2
 800c0c6:	3354      	adds	r3, #84	; 0x54
 800c0c8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800c0ca:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4403      	add	r3, r0
 800c0da:	3310      	adds	r3, #16
 800c0dc:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c0de:	1acb      	subs	r3, r1, r3
 800c0e0:	867b      	strh	r3, [r7, #50]	; 0x32
 800c0e2:	e014      	b.n	800c10e <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800c0e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3310      	adds	r3, #16
 800c0f6:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800c0f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	204c      	movs	r0, #76	; 0x4c
 800c100:	fb00 f303 	mul.w	r3, r0, r3
 800c104:	440b      	add	r3, r1
 800c106:	3354      	adds	r3, #84	; 0x54
 800c108:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800c10e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c112:	429a      	cmp	r2, r3
 800c114:	d24e      	bcs.n	800c1b4 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800c116:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d125      	bne.n	800c16a <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800c11e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800c122:	4613      	mov	r3, r2
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	3308      	adds	r3, #8
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800c130:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800c134:	224c      	movs	r2, #76	; 0x4c
 800c136:	fb02 f303 	mul.w	r3, r2, r3
 800c13a:	3310      	adds	r3, #16
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	4413      	add	r3, r2
 800c140:	3304      	adds	r3, #4
 800c142:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800c144:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800c148:	f107 0217 	add.w	r2, r7, #23
 800c14c:	9203      	str	r2, [sp, #12]
 800c14e:	f107 021c 	add.w	r2, r7, #28
 800c152:	9202      	str	r2, [sp, #8]
 800c154:	f107 0218 	add.w	r2, r7, #24
 800c158:	9201      	str	r2, [sp, #4]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4623      	mov	r3, r4
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	f000 f848 	bl	800c1f4 <VL53L1_hist_events_consistency_check>
 800c164:	4603      	mov	r3, r0
 800c166:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800c16a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d115      	bne.n	800c19e <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800c172:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800c174:	2b09      	cmp	r3, #9
 800c176:	d112      	bne.n	800c19e <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800c178:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800c17c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800c180:	224c      	movs	r2, #76	; 0x4c
 800c182:	fb02 f303 	mul.w	r3, r2, r3
 800c186:	3310      	adds	r3, #16
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	4413      	add	r3, r2
 800c18c:	3304      	adds	r3, #4
 800c18e:	f107 0217 	add.w	r2, r7, #23
 800c192:	4619      	mov	r1, r3
 800c194:	f000 fb44 	bl	800c820 <VL53L1_hist_merged_pulse_check>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800c19e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c1a2:	7df8      	ldrb	r0, [r7, #23]
 800c1a4:	683a      	ldr	r2, [r7, #0]
 800c1a6:	214c      	movs	r1, #76	; 0x4c
 800c1a8:	fb01 f303 	mul.w	r3, r1, r3
 800c1ac:	4413      	add	r3, r2
 800c1ae:	335e      	adds	r3, #94	; 0x5e
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800c1b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	795b      	ldrb	r3, [r3, #5]
 800c1c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	f4ff af61 	bcc.w	800c08e <VL53L1_hist_phase_consistency_check+0xfc>
 800c1cc:	e000      	b.n	800c1d0 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800c1ce:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c1d0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	7c9b      	ldrb	r3, [r3, #18]
 800c1de:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	f4ff af1f 	bcc.w	800c026 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c1e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	373c      	adds	r7, #60	; 0x3c
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd90      	pop	{r4, r7, pc}

0800c1f4 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800c1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1f8:	b0d4      	sub	sp, #336	; 0x150
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c200:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c204:	4603      	mov	r3, r0
 800c206:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800c20a:	460b      	mov	r3, r1
 800c20c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c210:	2300      	movs	r3, #0
 800c212:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800c216:	f04f 0200 	mov.w	r2, #0
 800c21a:	f04f 0300 	mov.w	r3, #0
 800c21e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800c222:	f04f 0200 	mov.w	r2, #0
 800c226:	f04f 0300 	mov.w	r3, #0
 800c22a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800c22e:	f04f 0200 	mov.w	r2, #0
 800c232:	f04f 0300 	mov.w	r3, #0
 800c236:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800c23a:	f04f 0200 	mov.w	r2, #0
 800c23e:	f04f 0300 	mov.w	r3, #0
 800c242:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800c246:	f04f 0200 	mov.w	r2, #0
 800c24a:	f04f 0300 	mov.w	r3, #0
 800c24e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800c25e:	f04f 0200 	mov.w	r2, #0
 800c262:	f04f 0300 	mov.w	r3, #0
 800c266:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800c26a:	f04f 0200 	mov.w	r2, #0
 800c26e:	f04f 0300 	mov.w	r3, #0
 800c272:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800c282:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c28a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c28e:	2209      	movs	r2, #9
 800c290:	701a      	strb	r2, [r3, #0]
		return status;
 800c292:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800c296:	e2bd      	b.n	800c814 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800c298:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2a4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c2a8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2b4:	4613      	mov	r3, r2
 800c2b6:	f143 0300 	adc.w	r3, r3, #0
 800c2ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c2c2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800c2c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2ca:	885b      	ldrh	r3, [r3, #2]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	469a      	mov	sl, r3
 800c2d2:	4693      	mov	fp, r2
 800c2d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c2d8:	fb0a f203 	mul.w	r2, sl, r3
 800c2dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c2e0:	fb0b f303 	mul.w	r3, fp, r3
 800c2e4:	441a      	add	r2, r3
 800c2e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c2ea:	fba3 450a 	umull	r4, r5, r3, sl
 800c2ee:	1953      	adds	r3, r2, r5
 800c2f0:	461d      	mov	r5, r3
 800c2f2:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800c2f6:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800c2fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	2200      	movs	r2, #0
 800c302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c306:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c30a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c30e:	460b      	mov	r3, r1
 800c310:	3301      	adds	r3, #1
 800c312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c316:	4613      	mov	r3, r2
 800c318:	f143 0300 	adc.w	r3, r3, #0
 800c31c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c320:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c324:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c328:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c32c:	8adb      	ldrh	r3, [r3, #22]
 800c32e:	b29b      	uxth	r3, r3
 800c330:	2200      	movs	r2, #0
 800c332:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c336:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c33a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c33e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c342:	4622      	mov	r2, r4
 800c344:	fb02 f203 	mul.w	r2, r2, r3
 800c348:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c34c:	4629      	mov	r1, r5
 800c34e:	fb01 f303 	mul.w	r3, r1, r3
 800c352:	441a      	add	r2, r3
 800c354:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c358:	4621      	mov	r1, r4
 800c35a:	fba3 8901 	umull	r8, r9, r3, r1
 800c35e:	eb02 0309 	add.w	r3, r2, r9
 800c362:	4699      	mov	r9, r3
 800c364:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c368:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c36c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c370:	f04f 0000 	mov.w	r0, #0
 800c374:	f04f 0100 	mov.w	r1, #0
 800c378:	0319      	lsls	r1, r3, #12
 800c37a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c37e:	0310      	lsls	r0, r2, #12
 800c380:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c384:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c388:	0fd9      	lsrs	r1, r3, #31
 800c38a:	2000      	movs	r0, #0
 800c38c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c390:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c394:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c398:	4621      	mov	r1, r4
 800c39a:	1889      	adds	r1, r1, r2
 800c39c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	eb43 0101 	adc.w	r1, r3, r1
 800c3a6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c3aa:	f04f 0200 	mov.w	r2, #0
 800c3ae:	f04f 0300 	mov.w	r3, #0
 800c3b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	084a      	lsrs	r2, r1, #1
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	104b      	asrs	r3, r1, #1
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c3cc:	1814      	adds	r4, r2, r0
 800c3ce:	67bc      	str	r4, [r7, #120]	; 0x78
 800c3d0:	414b      	adcs	r3, r1
 800c3d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3d4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c3d8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c3dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	d009      	beq.n	800c3f8 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c3e4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c3e8:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c3ec:	f7f3 ff18 	bl	8000220 <__aeabi_ldivmod>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c3f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c3fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c400:	fb03 f102 	mul.w	r1, r3, r2
 800c404:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c408:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c40c:	fb02 f303 	mul.w	r3, r2, r3
 800c410:	18ca      	adds	r2, r1, r3
 800c412:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c416:	fba3 1303 	umull	r1, r3, r3, r3
 800c41a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c41e:	460b      	mov	r3, r1
 800c420:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c428:	18d3      	adds	r3, r2, r3
 800c42a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c42e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c432:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c436:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c43a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c43e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c442:	6739      	str	r1, [r7, #112]	; 0x70
 800c444:	f143 0300 	adc.w	r3, r3, #0
 800c448:	677b      	str	r3, [r7, #116]	; 0x74
 800c44a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c44e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c452:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c456:	2b00      	cmp	r3, #0
 800c458:	da08      	bge.n	800c46c <VL53L1_hist_events_consistency_check+0x278>
 800c45a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c45e:	1851      	adds	r1, r2, r1
 800c460:	66b9      	str	r1, [r7, #104]	; 0x68
 800c462:	f143 0300 	adc.w	r3, r3, #0
 800c466:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c468:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c46c:	f04f 0000 	mov.w	r0, #0
 800c470:	f04f 0100 	mov.w	r1, #0
 800c474:	0b10      	lsrs	r0, r2, #12
 800c476:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c47a:	1319      	asrs	r1, r3, #12
 800c47c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c480:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c486:	2200      	movs	r2, #0
 800c488:	663b      	str	r3, [r7, #96]	; 0x60
 800c48a:	667a      	str	r2, [r7, #100]	; 0x64
 800c48c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c490:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c494:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	2200      	movs	r2, #0
 800c49c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4a0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c4a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c4a8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	1a51      	subs	r1, r2, r1
 800c4b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	eb63 0301 	sbc.w	r3, r3, r1
 800c4b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4ba:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c4be:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c4c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c4c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4ca:	fb03 f102 	mul.w	r1, r3, r2
 800c4ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c4d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c4d6:	fb02 f303 	mul.w	r3, r2, r3
 800c4da:	4419      	add	r1, r3
 800c4dc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c4e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f6:	18cb      	adds	r3, r1, r3
 800c4f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c4fc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c500:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c504:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c508:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c50c:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c510:	6539      	str	r1, [r7, #80]	; 0x50
 800c512:	f143 0300 	adc.w	r3, r3, #0
 800c516:	657b      	str	r3, [r7, #84]	; 0x54
 800c518:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c51c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c520:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c524:	2b00      	cmp	r3, #0
 800c526:	da08      	bge.n	800c53a <VL53L1_hist_events_consistency_check+0x346>
 800c528:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c52c:	1851      	adds	r1, r2, r1
 800c52e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c530:	f143 0300 	adc.w	r3, r3, #0
 800c534:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c536:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c53a:	f04f 0000 	mov.w	r0, #0
 800c53e:	f04f 0100 	mov.w	r1, #0
 800c542:	0b10      	lsrs	r0, r2, #12
 800c544:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c548:	1319      	asrs	r1, r3, #12
 800c54a:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c54e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c552:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c556:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c562:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c56a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c56e:	4622      	mov	r2, r4
 800c570:	fb02 f203 	mul.w	r2, r2, r3
 800c574:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c578:	4629      	mov	r1, r5
 800c57a:	fb01 f303 	mul.w	r3, r1, r3
 800c57e:	441a      	add	r2, r3
 800c580:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c584:	4621      	mov	r1, r4
 800c586:	fba3 1301 	umull	r1, r3, r3, r1
 800c58a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c58e:	460b      	mov	r3, r1
 800c590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c598:	18d3      	adds	r3, r2, r3
 800c59a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c59e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c5a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c5a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c5aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c5ae:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c5b2:	6439      	str	r1, [r7, #64]	; 0x40
 800c5b4:	f143 0300 	adc.w	r3, r3, #0
 800c5b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c5ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c5be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c5c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	da08      	bge.n	800c5dc <VL53L1_hist_events_consistency_check+0x3e8>
 800c5ca:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c5ce:	1851      	adds	r1, r2, r1
 800c5d0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5d2:	f143 0300 	adc.w	r3, r3, #0
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c5dc:	f04f 0000 	mov.w	r0, #0
 800c5e0:	f04f 0100 	mov.w	r1, #0
 800c5e4:	0b10      	lsrs	r0, r2, #12
 800c5e6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c5ea:	1319      	asrs	r1, r3, #12
 800c5ec:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c5f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c5f4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c5f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c604:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c60c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c610:	4622      	mov	r2, r4
 800c612:	fb02 f203 	mul.w	r2, r2, r3
 800c616:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c61a:	4629      	mov	r1, r5
 800c61c:	fb01 f303 	mul.w	r3, r1, r3
 800c620:	441a      	add	r2, r3
 800c622:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c626:	4621      	mov	r1, r4
 800c628:	fba3 1301 	umull	r1, r3, r3, r1
 800c62c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c630:	460b      	mov	r3, r1
 800c632:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c63a:	18d3      	adds	r3, r2, r3
 800c63c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c640:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c644:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c648:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c64c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c650:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c654:	6339      	str	r1, [r7, #48]	; 0x30
 800c656:	f143 0300 	adc.w	r3, r3, #0
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34
 800c65c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c660:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c664:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c668:	4610      	mov	r0, r2
 800c66a:	4619      	mov	r1, r3
 800c66c:	2900      	cmp	r1, #0
 800c66e:	da08      	bge.n	800c682 <VL53L1_hist_events_consistency_check+0x48e>
 800c670:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c674:	18c3      	adds	r3, r0, r3
 800c676:	62bb      	str	r3, [r7, #40]	; 0x28
 800c678:	f141 0300 	adc.w	r3, r1, #0
 800c67c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c67e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	0b02      	lsrs	r2, r0, #12
 800c68c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c690:	130b      	asrs	r3, r1, #12
 800c692:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c696:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c69a:	1c91      	adds	r1, r2, #2
 800c69c:	6239      	str	r1, [r7, #32]
 800c69e:	f143 0300 	adc.w	r3, r3, #0
 800c6a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c6a8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c6ac:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da06      	bge.n	800c6c2 <VL53L1_hist_events_consistency_check+0x4ce>
 800c6b4:	1cd1      	adds	r1, r2, #3
 800c6b6:	61b9      	str	r1, [r7, #24]
 800c6b8:	f143 0300 	adc.w	r3, r3, #0
 800c6bc:	61fb      	str	r3, [r7, #28]
 800c6be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6c2:	f04f 0000 	mov.w	r0, #0
 800c6c6:	f04f 0100 	mov.w	r1, #0
 800c6ca:	0890      	lsrs	r0, r2, #2
 800c6cc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c6d0:	1099      	asrs	r1, r3, #2
 800c6d2:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6da:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c6dc:	2200      	movs	r2, #0
 800c6de:	613b      	str	r3, [r7, #16]
 800c6e0:	617a      	str	r2, [r7, #20]
 800c6e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c6e6:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c6ea:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c6ee:	1c91      	adds	r1, r2, #2
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	f143 0300 	adc.w	r3, r3, #0
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c6fc:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c700:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c704:	2b00      	cmp	r3, #0
 800c706:	da06      	bge.n	800c716 <VL53L1_hist_events_consistency_check+0x522>
 800c708:	1cd1      	adds	r1, r2, #3
 800c70a:	6039      	str	r1, [r7, #0]
 800c70c:	f143 0300 	adc.w	r3, r3, #0
 800c710:	607b      	str	r3, [r7, #4]
 800c712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c716:	f04f 0000 	mov.w	r0, #0
 800c71a:	f04f 0100 	mov.w	r1, #0
 800c71e:	0890      	lsrs	r0, r2, #2
 800c720:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c724:	1099      	asrs	r1, r3, #2
 800c726:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72e:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c730:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c734:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c73a:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c73c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c740:	4413      	add	r3, r2
 800c742:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c746:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c74a:	011b      	lsls	r3, r3, #4
 800c74c:	4618      	mov	r0, r3
 800c74e:	f002 f8c6 	bl	800e8de <VL53L1_isqrt>
 800c752:	4603      	mov	r3, r0
 800c754:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c756:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c75a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c75c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c766:	fb03 f202 	mul.w	r2, r3, r2
 800c76a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c76e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c770:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f103 0220 	add.w	r2, r3, #32
 800c77a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c77e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c780:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	da00      	bge.n	800c78c <VL53L1_hist_events_consistency_check+0x598>
 800c78a:	333f      	adds	r3, #63	; 0x3f
 800c78c:	119b      	asrs	r3, r3, #6
 800c78e:	461a      	mov	r2, r3
 800c790:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c794:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ac:	1a9b      	subs	r3, r3, r2
 800c7ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c7b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c7b6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	da08      	bge.n	800c7d0 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c7be:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7c6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c7c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	e007      	b.n	800c7e0 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c7d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c7d4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c7d8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c7da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7de:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c7e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	dd0b      	ble.n	800c808 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c7f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c7f4:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c7f6:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d204      	bcs.n	800c808 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c7fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c802:	2214      	movs	r2, #20
 800c804:	701a      	strb	r2, [r3, #0]
 800c806:	e003      	b.n	800c810 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c808:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c80c:	2209      	movs	r2, #9
 800c80e:	701a      	strb	r2, [r3, #0]





	return status;
 800c810:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c814:	4618      	mov	r0, r3
 800c816:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c81a:	46bd      	mov	sp, r7
 800c81c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c820 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c82e:	2300      	movs	r3, #0
 800c830:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c842:	429a      	cmp	r2, r3
 800c844:	dd0b      	ble.n	800c85e <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c854:	b29b      	uxth	r3, r3
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	b29b      	uxth	r3, r3
		delta_mm =
 800c85a:	82fb      	strh	r3, [r7, #22]
 800c85c:	e00a      	b.n	800c874 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c864:	b29a      	uxth	r2, r3
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	b29b      	uxth	r3, r3
		delta_mm =
 800c872:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c874:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	dd09      	ble.n	800c890 <VL53L1_hist_merged_pulse_check+0x70>
 800c87c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c884:	429a      	cmp	r2, r3
 800c886:	dd03      	ble.n	800c890 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2216      	movs	r2, #22
 800c88c:	701a      	strb	r2, [r3, #0]
 800c88e:	e002      	b.n	800c896 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2209      	movs	r2, #9
 800c894:	701a      	strb	r2, [r3, #0]

	return status;
 800c896:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	371c      	adds	r7, #28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b08e      	sub	sp, #56	; 0x38
 800c8aa:	af04      	add	r7, sp, #16
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3318      	adds	r3, #24
 800c8be:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c8ce:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c8d6:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c8de:	2b09      	cmp	r3, #9
 800c8e0:	d009      	beq.n	800c8f6 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c8e8:	2b13      	cmp	r3, #19
 800c8ea:	d004      	beq.n	800c8f6 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c8f2:	2b14      	cmp	r3, #20
 800c8f4:	d129      	bne.n	800c94a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8fc:	2b09      	cmp	r3, #9
 800c8fe:	d009      	beq.n	800c914 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c906:	2b13      	cmp	r3, #19
 800c908:	d004      	beq.n	800c914 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c910:	2b14      	cmp	r3, #20
 800c912:	d11a      	bne.n	800c94a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2209      	movs	r2, #9
 800c918:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c926:	8bb9      	ldrh	r1, [r7, #28]
 800c928:	7ff8      	ldrb	r0, [r7, #31]
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	f107 0318 	add.w	r3, r7, #24
 800c930:	9302      	str	r3, [sp, #8]
 800c932:	f107 0314 	add.w	r3, r7, #20
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	4613      	mov	r3, r2
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	f7ff fc58 	bl	800c1f4 <VL53L1_hist_events_consistency_check>
 800c944:	4603      	mov	r3, r0
 800c946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c94a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3728      	adds	r7, #40	; 0x28
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b088      	sub	sp, #32
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	60f8      	str	r0, [r7, #12]
 800c95e:	60b9      	str	r1, [r7, #8]
 800c960:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c962:	2300      	movs	r3, #0
 800c964:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d019      	beq.n	800c9b6 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c988:	4618      	mov	r0, r3
 800c98a:	f002 f90f 	bl	800ebac <VL53L1_calc_pll_period_mm>
 800c98e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c996:	021b      	lsls	r3, r3, #8
 800c998:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	69ba      	ldr	r2, [r7, #24]
 800c99e:	fb02 f303 	mul.w	r3, r2, r3
 800c9a2:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c9aa:	0bdb      	lsrs	r3, r3, #15
 800c9ac:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	b21a      	sxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c9b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3720      	adds	r7, #32
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c9c2:	b590      	push	{r4, r7, lr}
 800c9c4:	b08d      	sub	sp, #52	; 0x34
 800c9c6:	af04      	add	r7, sp, #16
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	4608      	mov	r0, r1
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4623      	mov	r3, r4
 800c9d2:	80fb      	strh	r3, [r7, #6]
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	80bb      	strh	r3, [r7, #4]
 800c9d8:	460b      	mov	r3, r1
 800c9da:	70fb      	strb	r3, [r7, #3]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800ca00:	78b9      	ldrb	r1, [r7, #2]
 800ca02:	78f8      	ldrb	r0, [r7, #3]
 800ca04:	f107 030c 	add.w	r3, r7, #12
 800ca08:	9303      	str	r3, [sp, #12]
 800ca0a:	f107 030e 	add.w	r3, r7, #14
 800ca0e:	9302      	str	r3, [sp, #8]
 800ca10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca18:	9300      	str	r3, [sp, #0]
 800ca1a:	23ff      	movs	r3, #255	; 0xff
 800ca1c:	22c7      	movs	r2, #199	; 0xc7
 800ca1e:	f000 fa03 	bl	800ce28 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800ca22:	89fb      	ldrh	r3, [r7, #14]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d050      	beq.n	800caca <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800ca28:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d04d      	beq.n	800caca <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800ca2e:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800ca32:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ca36:	78b9      	ldrb	r1, [r7, #2]
 800ca38:	78f8      	ldrb	r0, [r7, #3]
 800ca3a:	f107 0308 	add.w	r3, r7, #8
 800ca3e:	9303      	str	r3, [sp, #12]
 800ca40:	f107 030a 	add.w	r3, r7, #10
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	4623      	mov	r3, r4
 800ca52:	f000 f9e9 	bl	800ce28 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800ca5a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800ca5c:	897b      	ldrh	r3, [r7, #10]
 800ca5e:	461a      	mov	r2, r3
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	fb02 f303 	mul.w	r3, r2, r3
 800ca66:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800ca68:	89fb      	ldrh	r3, [r7, #14]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca72:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800ca78:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800ca7a:	893b      	ldrh	r3, [r7, #8]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	fb02 f303 	mul.w	r3, r2, r3
 800ca84:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800ca86:	89bb      	ldrh	r3, [r7, #12]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca90:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800ca92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	fb02 f303 	mul.w	r3, r2, r3
 800ca9c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800ca9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	fb02 f303 	mul.w	r3, r2, r3
 800caa8:	69fa      	ldr	r2, [r7, #28]
 800caaa:	4413      	add	r3, r2
 800caac:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800caae:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800cab0:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800cab2:	4413      	add	r3, r2
 800cab4:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d008      	beq.n	800cace <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	009a      	lsls	r2, r3, #2
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	fb92 f3f3 	sdiv	r3, r2, r3
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	e002      	b.n	800cad0 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800caca:	bf00      	nop
 800cacc:	e000      	b.n	800cad0 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800cace:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	b21a      	sxth	r2, r3
 800cad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cad6:	801a      	strh	r2, [r3, #0]

}
 800cad8:	bf00      	nop
 800cada:	3724      	adds	r7, #36	; 0x24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd90      	pop	{r4, r7, pc}

0800cae0 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	607a      	str	r2, [r7, #4]
 800caea:	603b      	str	r3, [r7, #0]
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	08db      	lsrs	r3, r3, #3
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	f003 0307 	and.w	r3, r3, #7
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	4093      	lsls	r3, r2
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	701a      	strb	r2, [r3, #0]

}
 800cb16:	bf00      	nop
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	4603      	mov	r3, r0
 800cb2a:	603a      	str	r2, [r7, #0]
 800cb2c:	71fb      	strb	r3, [r7, #7]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	2b07      	cmp	r3, #7
 800cb36:	d90a      	bls.n	800cb4e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800cb38:	79bb      	ldrb	r3, [r7, #6]
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	3b71      	subs	r3, #113	; 0x71
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800cb4c:	e00a      	b.n	800cb64 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800cb4e:	79bb      	ldrb	r3, [r7, #6]
 800cb50:	f1c3 030f 	rsb	r3, r3, #15
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	00db      	lsls	r3, r3, #3
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	701a      	strb	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	4603      	mov	r3, r0
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	091b      	lsrs	r3, r3, #4
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
 800cb8a:	f003 030f 	and.w	r3, r3, #15
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	701a      	strb	r2, [r3, #0]

}
 800cb94:	bf00      	nop
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	603a      	str	r2, [r7, #0]
 800cbaa:	71fb      	strb	r3, [r7, #7]
 800cbac:	460b      	mov	r3, r1
 800cbae:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800cbb0:	79bb      	ldrb	r3, [r7, #6]
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	701a      	strb	r2, [r3, #0]

}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60ba      	str	r2, [r7, #8]
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	73fb      	strb	r3, [r7, #15]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800cbee:	f107 0217 	add.w	r2, r7, #23
 800cbf2:	f107 0116 	add.w	r1, r7, #22
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f002 fa51 	bl	800f0a0 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800cbfe:	f107 0214 	add.w	r2, r7, #20
 800cc02:	f107 0115 	add.w	r1, r7, #21
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ffb1 	bl	800cb70 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	7d7b      	ldrb	r3, [r7, #21]
 800cc14:	3301      	adds	r3, #1
 800cc16:	0fd9      	lsrs	r1, r3, #31
 800cc18:	440b      	add	r3, r1
 800cc1a:	105b      	asrs	r3, r3, #1
 800cc1c:	425b      	negs	r3, r3
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	4413      	add	r3, r2
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	da02      	bge.n	800cc3a <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2200      	movs	r2, #0
 800cc38:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	7d7b      	ldrb	r3, [r7, #21]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4413      	add	r3, r2
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	b21a      	sxth	r2, r3
 800cc4c:	6a3b      	ldr	r3, [r7, #32]
 800cc4e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc56:	2b0f      	cmp	r3, #15
 800cc58:	dd02      	ble.n	800cc60 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800cc5a:	6a3b      	ldr	r3, [r7, #32]
 800cc5c:	220f      	movs	r2, #15
 800cc5e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800cc60:	7dbb      	ldrb	r3, [r7, #22]
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	7d3b      	ldrb	r3, [r7, #20]
 800cc66:	3301      	adds	r3, #1
 800cc68:	0fd9      	lsrs	r1, r3, #31
 800cc6a:	440b      	add	r3, r1
 800cc6c:	105b      	asrs	r3, r3, #1
 800cc6e:	425b      	negs	r3, r3
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	4413      	add	r3, r2
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	b21a      	sxth	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	da02      	bge.n	800cc8c <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	7d3b      	ldrb	r3, [r7, #20]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	4413      	add	r3, r2
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	b21a      	sxth	r2, r3
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cca8:	2b0f      	cmp	r3, #15
 800ccaa:	dd02      	ble.n	800ccb2 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	220f      	movs	r2, #15
 800ccb0:	801a      	strh	r2, [r3, #0]
}
 800ccb2:	bf00      	nop
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b085      	sub	sp, #20
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	460a      	mov	r2, r1
 800ccc4:	71fb      	strb	r3, [r7, #7]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	f003 0303 	and.w	r3, r3, #3
 800ccd4:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800ccd6:	79bb      	ldrb	r3, [r7, #6]
 800ccd8:	f003 0303 	and.w	r3, r3, #3
 800ccdc:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800ccde:	7bbb      	ldrb	r3, [r7, #14]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d104      	bne.n	800ccee <VL53L1_is_aperture_location+0x34>
 800cce4:	7b7b      	ldrb	r3, [r7, #13]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d101      	bne.n	800ccee <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800ccea:	2301      	movs	r3, #1
 800ccec:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800ccee:	7bbb      	ldrb	r3, [r7, #14]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d104      	bne.n	800ccfe <VL53L1_is_aperture_location+0x44>
 800ccf4:	7b7b      	ldrb	r3, [r7, #13]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800cd0c:	b590      	push	{r4, r7, lr}
 800cd0e:	b08b      	sub	sp, #44	; 0x2c
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	603a      	str	r2, [r7, #0]
 800cd14:	461a      	mov	r2, r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	71fb      	strb	r3, [r7, #7]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	71bb      	strb	r3, [r7, #6]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800cd4e:	f107 0416 	add.w	r4, r7, #22
 800cd52:	f107 0218 	add.w	r2, r7, #24
 800cd56:	79b9      	ldrb	r1, [r7, #6]
 800cd58:	79f8      	ldrb	r0, [r7, #7]
 800cd5a:	f107 0312 	add.w	r3, r7, #18
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	f107 0314 	add.w	r3, r7, #20
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	4623      	mov	r3, r4
 800cd68:	f7ff ff30 	bl	800cbcc <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	2200      	movs	r2, #0
 800cd70:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cd72:	8afb      	ldrh	r3, [r7, #22]
 800cd74:	83bb      	strh	r3, [r7, #28]
 800cd76:	e04c      	b.n	800ce12 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cd78:	8b3b      	ldrh	r3, [r7, #24]
 800cd7a:	83fb      	strh	r3, [r7, #30]
 800cd7c:	e03d      	b.n	800cdfa <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800cd7e:	8bbb      	ldrh	r3, [r7, #28]
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	8bfa      	ldrh	r2, [r7, #30]
 800cd84:	b2d1      	uxtb	r1, r2
 800cd86:	f107 0211 	add.w	r2, r7, #17
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fec9 	bl	800cb22 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cd90:	7c78      	ldrb	r0, [r7, #17]
 800cd92:	f107 030e 	add.w	r3, r7, #14
 800cd96:	f107 020f 	add.w	r2, r7, #15
 800cd9a:	f107 0110 	add.w	r1, r7, #16
 800cd9e:	f7ff fe9f 	bl	800cae0 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cda2:	7c3b      	ldrb	r3, [r7, #16]
 800cda4:	461a      	mov	r2, r3
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	4413      	add	r3, r2
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	7bbb      	ldrb	r3, [r7, #14]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d01b      	beq.n	800cdee <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800cdb6:	8bbb      	ldrh	r3, [r7, #28]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	8bfa      	ldrh	r2, [r7, #30]
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff ff7a 	bl	800ccba <VL53L1_is_aperture_location>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cdca:	7efb      	ldrb	r3, [r7, #27]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d007      	beq.n	800cde0 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd2:	881a      	ldrh	r2, [r3, #0]
 800cdd4:	88bb      	ldrh	r3, [r7, #4]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	801a      	strh	r2, [r3, #0]
 800cdde:	e006      	b.n	800cdee <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cdee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	83fb      	strh	r3, [r7, #30]
 800cdfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cdfe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	ddbb      	ble.n	800cd7e <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ce06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	83bb      	strh	r3, [r7, #28]
 800ce12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce16:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	ddac      	ble.n	800cd78 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	3724      	adds	r7, #36	; 0x24
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd90      	pop	{r4, r7, pc}

0800ce28 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b08d      	sub	sp, #52	; 0x34
 800ce2c:	af02      	add	r7, sp, #8
 800ce2e:	4604      	mov	r4, r0
 800ce30:	4608      	mov	r0, r1
 800ce32:	4611      	mov	r1, r2
 800ce34:	461a      	mov	r2, r3
 800ce36:	4623      	mov	r3, r4
 800ce38:	71fb      	strb	r3, [r7, #7]
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71bb      	strb	r3, [r7, #6]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	717b      	strb	r3, [r7, #5]
 800ce42:	4613      	mov	r3, r2
 800ce44:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800ce88:	f107 041c 	add.w	r4, r7, #28
 800ce8c:	f107 021e 	add.w	r2, r7, #30
 800ce90:	79b9      	ldrb	r1, [r7, #6]
 800ce92:	79f8      	ldrb	r0, [r7, #7]
 800ce94:	f107 0318 	add.w	r3, r7, #24
 800ce98:	9301      	str	r3, [sp, #4]
 800ce9a:	f107 031a 	add.w	r3, r7, #26
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4623      	mov	r3, r4
 800cea2:	f7ff fe93 	bl	800cbcc <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800cea6:	f107 0414 	add.w	r4, r7, #20
 800ceaa:	f107 0216 	add.w	r2, r7, #22
 800ceae:	7939      	ldrb	r1, [r7, #4]
 800ceb0:	7978      	ldrb	r0, [r7, #5]
 800ceb2:	f107 0310 	add.w	r3, r7, #16
 800ceb6:	9301      	str	r3, [sp, #4]
 800ceb8:	f107 0312 	add.w	r3, r7, #18
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	4623      	mov	r3, r4
 800cec0:	f7ff fe84 	bl	800cbcc <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800cec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec6:	2200      	movs	r2, #0
 800cec8:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800ceca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cecc:	2200      	movs	r2, #0
 800cece:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ced0:	8abb      	ldrh	r3, [r7, #20]
 800ced2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ced4:	e06c      	b.n	800cfb0 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ced6:	8afb      	ldrh	r3, [r7, #22]
 800ced8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ceda:	e05d      	b.n	800cf98 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800cedc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cee2:	b2d1      	uxtb	r1, r2
 800cee4:	f107 020f 	add.w	r2, r7, #15
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff fe1a 	bl	800cb22 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ceee:	7bf8      	ldrb	r0, [r7, #15]
 800cef0:	f107 030c 	add.w	r3, r7, #12
 800cef4:	f107 020d 	add.w	r2, r7, #13
 800cef8:	f107 010e 	add.w	r1, r7, #14
 800cefc:	f7ff fdf0 	bl	800cae0 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	461a      	mov	r2, r3
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	4413      	add	r3, r2
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	7b3b      	ldrb	r3, [r7, #12]
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d03b      	beq.n	800cf8c <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cf14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fecb 	bl	800ccba <VL53L1_is_aperture_location>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cf2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cf32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cf34:	847b      	strh	r3, [r7, #34]	; 0x22
 800cf36:	e002      	b.n	800cf3e <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cf38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf3c:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cf3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf42:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cf46:	429a      	cmp	r2, r3
 800cf48:	db19      	blt.n	800cf7e <VL53L1_calc_mm_effective_spads+0x156>
 800cf4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cf4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cf52:	429a      	cmp	r2, r3
 800cf54:	dc13      	bgt.n	800cf7e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cf56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cf5a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	db0d      	blt.n	800cf7e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cf62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cf66:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	dc07      	bgt.n	800cf7e <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cf6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf70:	881a      	ldrh	r2, [r3, #0]
 800cf72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf74:	4413      	add	r3, r2
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7a:	801a      	strh	r2, [r3, #0]
 800cf7c:	e006      	b.n	800cf8c <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cf7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf80:	881a      	ldrh	r2, [r3, #0]
 800cf82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf84:	4413      	add	r3, r2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf8a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cf8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	3301      	adds	r3, #1
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cf98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf9c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	dd9b      	ble.n	800cedc <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cfa4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3301      	adds	r3, #1
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cfb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cfb4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	dd8c      	ble.n	800ced6 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	372c      	adds	r7, #44	; 0x2c
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd90      	pop	{r4, r7, pc}

0800cfc6 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b086      	sub	sp, #24
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	60f8      	str	r0, [r7, #12]
 800cfce:	60b9      	str	r1, [r7, #8]
 800cfd0:	607a      	str	r2, [r7, #4]
 800cfd2:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7fd ff6d 	bl	800aeb8 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	7c9a      	ldrb	r2, [r3, #18]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3314      	adds	r3, #20
 800d008:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]
 800d00e:	e06b      	b.n	800d0e8 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800d010:	7dfb      	ldrb	r3, [r7, #23]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800d016:	2b01      	cmp	r3, #1
 800d018:	d034      	beq.n	800d084 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800d01a:	e05f      	b.n	800d0dc <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d054:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	8a9a      	ldrh	r2, [r3, #20]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	601a      	str	r2, [r3, #0]

			break;
 800d082:	e02b      	b.n	800d0dc <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d0b4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	611a      	str	r2, [r3, #16]
			break;
 800d0da:	bf00      	nop
		}

		pdata++;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	334c      	adds	r3, #76	; 0x4c
 800d0e0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	75fb      	strb	r3, [r7, #23]
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	7c9b      	ldrb	r3, [r3, #18]
 800d0ec:	7dfa      	ldrb	r2, [r7, #23]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d38e      	bcc.n	800d010 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	3718      	adds	r7, #24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b089      	sub	sp, #36	; 0x24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d104:	2300      	movs	r3, #0
 800d106:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3318      	adds	r3, #24
 800d10c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d114:	3308      	adds	r3, #8
 800d116:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800d11e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d126:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	005b      	lsls	r3, r3, #1
 800d130:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	4413      	add	r3, r2
 800d138:	3302      	adds	r3, #2
 800d13a:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800d160:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3724      	adds	r7, #36	; 0x24
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800d170:	b480      	push	{r7}
 800d172:	b08b      	sub	sp, #44	; 0x2c
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d17a:	2300      	movs	r3, #0
 800d17c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	3318      	adds	r3, #24
 800d182:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d18a:	3308      	adds	r3, #8
 800d18c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d194:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d19c:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800d1a4:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800d1a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1aa:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800d1ac:	7bfa      	ldrb	r2, [r7, #15]
 800d1ae:	6939      	ldr	r1, [r7, #16]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	440b      	add	r3, r1
 800d1ba:	3306      	adds	r3, #6
 800d1bc:	2200      	movs	r2, #0
 800d1be:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d1c6:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1ce:	e01a      	b.n	800d206 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	214c      	movs	r1, #76	; 0x4c
 800d1d8:	fb01 f303 	mul.w	r3, r1, r3
 800d1dc:	4413      	add	r3, r2
 800d1de:	334a      	adds	r3, #74	; 0x4a
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d209      	bcs.n	800d1fc <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800d1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	214c      	movs	r1, #76	; 0x4c
 800d1f0:	fb01 f303 	mul.w	r3, r1, r3
 800d1f4:	4413      	add	r3, r2
 800d1f6:	334a      	adds	r3, #74	; 0x4a
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800d1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d200:	3301      	adds	r3, #1
 800d202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	7c9b      	ldrb	r3, [r3, #18]
 800d20a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d20e:	429a      	cmp	r2, r3
 800d210:	d3de      	bcc.n	800d1d0 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800d212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d214:	2b00      	cmp	r3, #0
 800d216:	d103      	bne.n	800d220 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800d218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d21c:	623b      	str	r3, [r7, #32]
 800d21e:	e00e      	b.n	800d23e <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800d220:	89bb      	ldrh	r3, [r7, #12]
 800d222:	039b      	lsls	r3, r3, #14
 800d224:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800d226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d228:	6a3a      	ldr	r2, [r7, #32]
 800d22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22e:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d236:	d302      	bcc.n	800d23e <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800d238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d23c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d23e:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d244:	6939      	ldr	r1, [r7, #16]
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	440b      	add	r3, r1
 800d250:	3306      	adds	r3, #6
 800d252:	4602      	mov	r2, r0
 800d254:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800d256:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	372c      	adds	r7, #44	; 0x2c
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b08a      	sub	sp, #40	; 0x28
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d26e:	2300      	movs	r3, #0
 800d270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3318      	adds	r3, #24
 800d278:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	332c      	adds	r3, #44	; 0x2c
 800d27e:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800d280:	6a3b      	ldr	r3, [r7, #32]
 800d282:	33c2      	adds	r3, #194	; 0xc2
 800d284:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d28c:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	3302      	adds	r3, #2
 800d292:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	785b      	ldrb	r3, [r3, #1]
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d11e      	bne.n	800d2f0 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800d2b2:	7bfb      	ldrb	r3, [r7, #15]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10b      	bne.n	800d2d0 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d05d      	beq.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	719a      	strb	r2, [r3, #6]
 800d2ee:	e050      	b.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d2f0:	6a3b      	ldr	r3, [r7, #32]
 800d2f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d300:	2b02      	cmp	r3, #2
 800d302:	d11e      	bne.n	800d342 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10b      	bne.n	800d322 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d034      	beq.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	719a      	strb	r2, [r3, #6]
 800d340:	e027      	b.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d342:	6a3b      	ldr	r3, [r7, #32]
 800d344:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d348:	461a      	mov	r2, r3
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	4413      	add	r3, r2
 800d34e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d352:	2b03      	cmp	r3, #3
 800d354:	d11d      	bne.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10b      	bne.n	800d374 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d374:	7bfb      	ldrb	r3, [r7, #15]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00b      	beq.n	800d392 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d392:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d396:	2b00      	cmp	r3, #0
 800d398:	d109      	bne.n	800d3ae <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d39a:	6a3b      	ldr	r3, [r7, #32]
 800d39c:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	6978      	ldr	r0, [r7, #20]
 800d3aa:	f7fd f921 	bl	800a5f0 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d3ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3728      	adds	r7, #40	; 0x28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b089      	sub	sp, #36	; 0x24
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3318      	adds	r3, #24
 800d3d2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d3da:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d103      	bne.n	800d3ea <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	7afa      	ldrb	r2, [r7, #11]
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e01e      	b.n	800d428 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	3b01      	subs	r3, #1
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d111      	bne.n	800d41c <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2bff      	cmp	r3, #255	; 0xff
 800d3fe:	d103      	bne.n	800d408 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2280      	movs	r2, #128	; 0x80
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	e005      	b.n	800d414 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	b2da      	uxtb	r2, r3
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2200      	movs	r2, #0
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	e005      	b.n	800d428 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	3301      	adds	r3, #1
 800d422:	b2da      	uxtb	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d428:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3724      	adds	r7, #36	; 0x24
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d444:	2300      	movs	r3, #0
 800d446:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d118      	bne.n	800d484 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	719a      	strb	r2, [r3, #6]
 800d482:	e03a      	b.n	800d4fa <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d118      	bne.n	800d4c0 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	719a      	strb	r2, [r3, #6]
 800d4be:	e01c      	b.n	800d4fa <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d117      	bne.n	800d4fa <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d4fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b08a      	sub	sp, #40	; 0x28
 800d50e:	af00      	add	r7, sp, #0
 800d510:	60f8      	str	r0, [r7, #12]
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	461a      	mov	r2, r3
 800d516:	460b      	mov	r3, r1
 800d518:	72fb      	strb	r3, [r7, #11]
 800d51a:	4613      	mov	r3, r2
 800d51c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d51e:	2300      	movs	r3, #0
 800d520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	3318      	adds	r3, #24
 800d528:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d52a:	2300      	movs	r3, #0
 800d52c:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d532:	7afa      	ldrb	r2, [r7, #11]
 800d534:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d536:	4611      	mov	r1, r2
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe f8ca 	bl	800b6d2 <VL53L1_calc_macro_period_us>
 800d53e:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d546:	2301      	movs	r3, #1
 800d548:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	031b      	lsls	r3, r3, #12
 800d54e:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d550:	6a3b      	ldr	r3, [r7, #32]
 800d552:	085b      	lsrs	r3, r3, #1
 800d554:	69ba      	ldr	r2, [r7, #24]
 800d556:	4413      	add	r3, r2
 800d558:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d562:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	2bff      	cmp	r3, #255	; 0xff
 800d568:	d904      	bls.n	800d574 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	22ff      	movs	r2, #255	; 0xff
 800d56e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d572:	e004      	b.n	800d57e <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	7afa      	ldrb	r2, [r7, #11]
 800d582:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10a      	bne.n	800d5a4 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d594:	461a      	mov	r2, r3
 800d596:	214b      	movs	r1, #75	; 0x4b
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f007 f9bd 	bl	8014918 <VL53L1_WrByte>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d5a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10a      	bne.n	800d5c2 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	2160      	movs	r1, #96	; 0x60
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f007 f9ae 	bl	8014918 <VL53L1_WrByte>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d5c8:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d5d0:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d5d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d109      	bne.n	800d5ee <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d5da:	f107 0214 	add.w	r2, r7, #20
 800d5de:	2302      	movs	r3, #2
 800d5e0:	2178      	movs	r1, #120	; 0x78
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f007 f92c 	bl	8014840 <VL53L1_WriteMulti>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	893a      	ldrh	r2, [r7, #8]
 800d5f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d5f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d108      	bne.n	800d610 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d5fe:	893b      	ldrh	r3, [r7, #8]
 800d600:	461a      	mov	r2, r3
 800d602:	211c      	movs	r1, #28
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f007 f9b1 	bl	801496c <VL53L1_WrWord>
 800d60a:	4603      	mov	r3, r0
 800d60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d614:	2b00      	cmp	r3, #0
 800d616:	d108      	bne.n	800d62a <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d618:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d61a:	461a      	mov	r2, r3
 800d61c:	2164      	movs	r1, #100	; 0x64
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f007 f9a4 	bl	801496c <VL53L1_WrWord>
 800d624:	4603      	mov	r3, r0
 800d626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d62a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d632:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d634:	461a      	mov	r2, r3
 800d636:	2166      	movs	r1, #102	; 0x66
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f007 f997 	bl	801496c <VL53L1_WrWord>
 800d63e:	4603      	mov	r3, r0
 800d640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d644:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3728      	adds	r7, #40	; 0x28
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d654:	b0a2      	sub	sp, #136	; 0x88
 800d656:	af00      	add	r7, sp, #0
 800d658:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d65a:	2300      	movs	r3, #0
 800d65c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d662:	3318      	adds	r3, #24
 800d664:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d668:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d66c:	3308      	adds	r3, #8
 800d66e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d672:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d676:	3318      	adds	r3, #24
 800d678:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d67a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d67c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d680:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d684:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d688:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d68c:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d103      	bne.n	800d6a6 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d69e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d6a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d6ae:	4413      	add	r3, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	461c      	mov	r4, r3
 800d6b4:	4615      	mov	r5, r2
 800d6b6:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d6ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d6be:	4622      	mov	r2, r4
 800d6c0:	462b      	mov	r3, r5
 800d6c2:	f04f 0000 	mov.w	r0, #0
 800d6c6:	f04f 0100 	mov.w	r1, #0
 800d6ca:	0159      	lsls	r1, r3, #5
 800d6cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d6d0:	0150      	lsls	r0, r2, #5
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	ebb2 0804 	subs.w	r8, r2, r4
 800d6da:	eb63 0905 	sbc.w	r9, r3, r5
 800d6de:	f04f 0200 	mov.w	r2, #0
 800d6e2:	f04f 0300 	mov.w	r3, #0
 800d6e6:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d6ea:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d6ee:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d6f2:	4690      	mov	r8, r2
 800d6f4:	4699      	mov	r9, r3
 800d6f6:	eb18 0304 	adds.w	r3, r8, r4
 800d6fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d6fc:	eb49 0305 	adc.w	r3, r9, r5
 800d700:	637b      	str	r3, [r7, #52]	; 0x34
 800d702:	f04f 0200 	mov.w	r2, #0
 800d706:	f04f 0300 	mov.w	r3, #0
 800d70a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d70e:	4629      	mov	r1, r5
 800d710:	00cb      	lsls	r3, r1, #3
 800d712:	4621      	mov	r1, r4
 800d714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d718:	4621      	mov	r1, r4
 800d71a:	00ca      	lsls	r2, r1, #3
 800d71c:	4610      	mov	r0, r2
 800d71e:	4619      	mov	r1, r3
 800d720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d724:	2200      	movs	r2, #0
 800d726:	643b      	str	r3, [r7, #64]	; 0x40
 800d728:	647a      	str	r2, [r7, #68]	; 0x44
 800d72a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d72e:	f7f2 fdc7 	bl	80002c0 <__aeabi_uldivmod>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d73a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d73e:	4622      	mov	r2, r4
 800d740:	462b      	mov	r3, r5
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f04f 0100 	mov.w	r1, #0
 800d74a:	0159      	lsls	r1, r3, #5
 800d74c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d750:	0150      	lsls	r0, r2, #5
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	ebb2 0a04 	subs.w	sl, r2, r4
 800d75a:	eb63 0b05 	sbc.w	fp, r3, r5
 800d75e:	f04f 0200 	mov.w	r2, #0
 800d762:	f04f 0300 	mov.w	r3, #0
 800d766:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d76a:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d76e:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d772:	4692      	mov	sl, r2
 800d774:	469b      	mov	fp, r3
 800d776:	eb1a 0304 	adds.w	r3, sl, r4
 800d77a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d77c:	eb4b 0305 	adc.w	r3, fp, r5
 800d780:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d782:	f04f 0200 	mov.w	r2, #0
 800d786:	f04f 0300 	mov.w	r3, #0
 800d78a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d78e:	4629      	mov	r1, r5
 800d790:	00cb      	lsls	r3, r1, #3
 800d792:	4621      	mov	r1, r4
 800d794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d798:	4621      	mov	r1, r4
 800d79a:	00ca      	lsls	r2, r1, #3
 800d79c:	4610      	mov	r0, r2
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d7aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d7ae:	f7f2 fd87 	bl	80002c0 <__aeabi_uldivmod>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d7ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7c0:	8ad2      	ldrh	r2, [r2, #22]
 800d7c2:	fb02 f303 	mul.w	r3, r2, r3
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	623b      	str	r3, [r7, #32]
 800d7ca:	627a      	str	r2, [r7, #36]	; 0x24
 800d7cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d7d0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d7d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	d105      	bne.n	800d7e8 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d7dc:	f04f 0201 	mov.w	r2, #1
 800d7e0:	f04f 0300 	mov.w	r3, #0
 800d7e4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d7e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	f04f 0400 	mov.w	r4, #0
 800d7f4:	f04f 0500 	mov.w	r5, #0
 800d7f8:	015d      	lsls	r5, r3, #5
 800d7fa:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d7fe:	0154      	lsls	r4, r2, #5
 800d800:	4622      	mov	r2, r4
 800d802:	462b      	mov	r3, r5
 800d804:	1a14      	subs	r4, r2, r0
 800d806:	61bc      	str	r4, [r7, #24]
 800d808:	eb63 0301 	sbc.w	r3, r3, r1
 800d80c:	61fb      	str	r3, [r7, #28]
 800d80e:	f04f 0200 	mov.w	r2, #0
 800d812:	f04f 0300 	mov.w	r3, #0
 800d816:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d81a:	464c      	mov	r4, r9
 800d81c:	00a3      	lsls	r3, r4, #2
 800d81e:	4644      	mov	r4, r8
 800d820:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d824:	4644      	mov	r4, r8
 800d826:	00a2      	lsls	r2, r4, #2
 800d828:	4614      	mov	r4, r2
 800d82a:	461d      	mov	r5, r3
 800d82c:	4623      	mov	r3, r4
 800d82e:	181b      	adds	r3, r3, r0
 800d830:	613b      	str	r3, [r7, #16]
 800d832:	462b      	mov	r3, r5
 800d834:	eb41 0303 	adc.w	r3, r1, r3
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	f04f 0200 	mov.w	r2, #0
 800d83e:	f04f 0300 	mov.w	r3, #0
 800d842:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d846:	4629      	mov	r1, r5
 800d848:	02cb      	lsls	r3, r1, #11
 800d84a:	4621      	mov	r1, r4
 800d84c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d850:	4621      	mov	r1, r4
 800d852:	02ca      	lsls	r2, r1, #11
 800d854:	461c      	mov	r4, r3
 800d856:	4613      	mov	r3, r2
 800d858:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d85c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d860:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d864:	f7f2 fd2c 	bl	80002c0 <__aeabi_uldivmod>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d870:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d874:	4602      	mov	r2, r0
 800d876:	460b      	mov	r3, r1
 800d878:	f04f 0400 	mov.w	r4, #0
 800d87c:	f04f 0500 	mov.w	r5, #0
 800d880:	015d      	lsls	r5, r3, #5
 800d882:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d886:	0154      	lsls	r4, r2, #5
 800d888:	4622      	mov	r2, r4
 800d88a:	462b      	mov	r3, r5
 800d88c:	1a14      	subs	r4, r2, r0
 800d88e:	60bc      	str	r4, [r7, #8]
 800d890:	eb63 0301 	sbc.w	r3, r3, r1
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	f04f 0200 	mov.w	r2, #0
 800d89a:	f04f 0300 	mov.w	r3, #0
 800d89e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d8a2:	464c      	mov	r4, r9
 800d8a4:	00a3      	lsls	r3, r4, #2
 800d8a6:	4644      	mov	r4, r8
 800d8a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d8ac:	4644      	mov	r4, r8
 800d8ae:	00a2      	lsls	r2, r4, #2
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	461d      	mov	r5, r3
 800d8b4:	4623      	mov	r3, r4
 800d8b6:	181b      	adds	r3, r3, r0
 800d8b8:	603b      	str	r3, [r7, #0]
 800d8ba:	462b      	mov	r3, r5
 800d8bc:	eb41 0303 	adc.w	r3, r1, r3
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	f04f 0200 	mov.w	r2, #0
 800d8c6:	f04f 0300 	mov.w	r3, #0
 800d8ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	02cb      	lsls	r3, r1, #11
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d8d8:	4621      	mov	r1, r4
 800d8da:	02ca      	lsls	r2, r1, #11
 800d8dc:	461c      	mov	r4, r3
 800d8de:	4613      	mov	r3, r2
 800d8e0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d8e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d8e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d8ec:	f7f2 fce8 	bl	80002c0 <__aeabi_uldivmod>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d8f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d8fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8fc:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d8fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d802      	bhi.n	800d90c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d908:	2202      	movs	r2, #2
 800d90a:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d90c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d910:	4618      	mov	r0, r3
 800d912:	3788      	adds	r7, #136	; 0x88
 800d914:	46bd      	mov	sp, r7
 800d916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b096      	sub	sp, #88	; 0x58
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3318      	adds	r3, #24
 800d934:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d938:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d93c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d940:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d944:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d948:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d108      	bne.n	800d962 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d956:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d101      	bne.n	800d962 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d95e:	2301      	movs	r3, #1
 800d960:	e000      	b.n	800d964 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d962:	2300      	movs	r3, #0
 800d964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d968:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d107      	bne.n	800d980 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	889b      	ldrh	r3, [r3, #4]
 800d974:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	609a      	str	r2, [r3, #8]
 800d97e:	e002      	b.n	800d986 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98e:	899b      	ldrh	r3, [r3, #12]
 800d990:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	89db      	ldrh	r3, [r3, #14]
 800d998:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d125      	bne.n	800d9fc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d021      	beq.n	800d9fc <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d9b8:	f107 0313 	add.w	r3, r7, #19
 800d9bc:	4619      	mov	r1, r3
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f000 fe44 	bl	800e64c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d9c4:	7cfb      	ldrb	r3, [r7, #19]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d101      	bne.n	800d9ce <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d9ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d103      	bne.n	800d9de <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	653b      	str	r3, [r7, #80]	; 0x50
 800d9dc:	e006      	b.n	800d9ec <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d9de:	7cfb      	ldrb	r3, [r7, #19]
 800d9e0:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	3202      	adds	r2, #2
 800d9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ea:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ee:	889b      	ldrh	r3, [r3, #4]
 800d9f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	88db      	ldrh	r3, [r3, #6]
 800d9f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10a      	bne.n	800da1c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800da06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	795b      	ldrb	r3, [r3, #5]
 800da12:	f043 0301 	orr.w	r3, r3, #1
 800da16:	b2da      	uxtb	r2, r3
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da22:	2b00      	cmp	r3, #0
 800da24:	d10a      	bne.n	800da3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800da26:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	795b      	ldrb	r3, [r3, #5]
 800da32:	f043 0302 	orr.w	r3, r3, #2
 800da36:	b2da      	uxtb	r2, r3
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800da3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d101      	bne.n	800da46 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800da42:	2301      	movs	r3, #1
 800da44:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d108      	bne.n	800da62 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800da5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800da60:	e019      	b.n	800da96 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800da62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800da66:	019b      	lsls	r3, r3, #6
 800da68:	461a      	mov	r2, r3
 800da6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800da7a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800da7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800da80:	019b      	lsls	r3, r3, #6
 800da82:	461a      	mov	r2, r3
 800da84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da86:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800da94:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d12a      	bne.n	800daf6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800daa8:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800daac:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800daae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab0:	119b      	asrs	r3, r3, #6
 800dab2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800dab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daba:	db02      	blt.n	800dac2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800dabc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dac0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800dac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800dad2:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800dad6:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800dad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dada:	119b      	asrs	r3, r3, #6
 800dadc:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800dade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dae4:	db02      	blt.n	800daec <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800dae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daea:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800daec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daee:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	81da      	strh	r2, [r3, #14]
 800daf4:	e042      	b.n	800db7c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d13d      	bne.n	800db7c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800db04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800db0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	da00      	bge.n	800db12 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800db10:	330f      	adds	r3, #15
 800db12:	111b      	asrs	r3, r3, #4
 800db14:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800db16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800db1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800db20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db22:	4413      	add	r3, r2
 800db24:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800db26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db2c:	db02      	blt.n	800db34 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800db2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db32:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800db34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db36:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800db40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800db46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db48:	4a51      	ldr	r2, [pc, #324]	; (800dc90 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800db4a:	fb82 1203 	smull	r1, r2, r2, r3
 800db4e:	1152      	asrs	r2, r2, #5
 800db50:	17db      	asrs	r3, r3, #31
 800db52:	1ad3      	subs	r3, r2, r3
 800db54:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800db56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800db5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800db60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db62:	4413      	add	r3, r2
 800db64:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800db66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db6c:	db02      	blt.n	800db74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800db6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db72:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800db74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db76:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	785b      	ldrb	r3, [r3, #1]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d177      	bne.n	800dc74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800db84:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d073      	beq.n	800dc74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	2201      	movs	r2, #1
 800db90:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800db98:	f107 0313 	add.w	r3, r7, #19
 800db9c:	4619      	mov	r1, r3
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 fd54 	bl	800e64c <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800dba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba6:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800dbaa:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	3308      	adds	r3, #8
 800dbb0:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800dbb2:	7cfb      	ldrb	r3, [r7, #19]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d041      	beq.n	800dc3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800dbb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d03d      	beq.n	800dc3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d03a      	beq.n	800dc3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dbd2:	fb03 f202 	mul.w	r2, r3, r2
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbdc:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800dbe8:	69ba      	ldr	r2, [r7, #24]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d303      	bcc.n	800dbf6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	719a      	strb	r2, [r3, #6]
 800dbf4:	e022      	b.n	800dc3c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800dbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbfe:	617b      	str	r3, [r7, #20]
				cval = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800dc04:	2300      	movs	r3, #0
 800dc06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800dc0a:	e00e      	b.n	800dc2a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800dc0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	4413      	add	r3, r2
 800dc12:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800dc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc18:	601a      	str	r2, [r3, #0]
					pcpo++;
 800dc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800dc20:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800dc24:	3301      	adds	r3, #1
 800dc26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800dc2a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d3ea      	bcc.n	800dc0c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800dc36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc3a:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	799b      	ldrb	r3, [r3, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d017      	beq.n	800dc74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800dc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc54:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	789b      	ldrb	r3, [r3, #2]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d105      	bne.n	800dc74 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800dc74:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d002      	beq.n	800dc82 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800dc82:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3758      	adds	r7, #88	; 0x58
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	66666667 	.word	0x66666667

0800dc94 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800dc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc98:	b0a2      	sub	sp, #136	; 0x88
 800dc9a:	af02      	add	r7, sp, #8
 800dc9c:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca6:	3318      	adds	r3, #24
 800dca8:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800dcb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcb6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800dcba:	3318      	adds	r3, #24
 800dcbc:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800dcbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcc0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dcc4:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800dcc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcc8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dccc:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800dcce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcd0:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800dcd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dcd4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dcd8:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800dcec:	2300      	movs	r3, #0
 800dcee:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800dcf6:	f04f 0200 	mov.w	r2, #0
 800dcfa:	f04f 0300 	mov.w	r3, #0
 800dcfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800dd02:	2300      	movs	r3, #0
 800dd04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dd24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd26:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d108      	bne.n	800dd40 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd34:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d101      	bne.n	800dd40 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e000      	b.n	800dd42 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800dd46:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd4e:	f000 fc7d 	bl	800e64c <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800dd52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d003      	beq.n	800dd62 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800dd5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d102      	bne.n	800dd68 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dd68:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dd6a:	f000 fb15 	bl	800e398 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dd6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00a      	beq.n	800dd8c <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800dd76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd7e:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800dd82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd84:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d901      	bls.n	800dd90 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e000      	b.n	800dd92 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800dd96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d006      	beq.n	800ddac <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800dd9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dda0:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800dda4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d101      	bne.n	800ddb0 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800ddac:	2301      	movs	r3, #1
 800ddae:	e000      	b.n	800ddb2 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ddb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddb8:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d10e      	bne.n	800dddc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800ddbe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00a      	beq.n	800dddc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800ddc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddc8:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ddcc:	2b09      	cmp	r3, #9
 800ddce:	d105      	bne.n	800dddc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ddd0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e000      	b.n	800ddde <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dddc:	2300      	movs	r3, #0
	run_smudge_detection =
 800ddde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dde2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dde4:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800dde8:	2b09      	cmp	r3, #9
 800ddea:	f000 80a6 	beq.w	800df3a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ddee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddf0:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	f040 80a1 	bne.w	800df3a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800ddfe:	2300      	movs	r3, #0
 800de00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800de04:	e02d      	b.n	800de62 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800de06:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800de0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de0c:	234c      	movs	r3, #76	; 0x4c
 800de0e:	fb01 f303 	mul.w	r3, r1, r3
 800de12:	4413      	add	r3, r2
 800de14:	335e      	adds	r3, #94	; 0x5e
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b09      	cmp	r3, #9
 800de1a:	d11d      	bne.n	800de58 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800de1c:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800de20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de22:	234c      	movs	r3, #76	; 0x4c
 800de24:	fb01 f303 	mul.w	r3, r1, r3
 800de28:	4413      	add	r3, r2
 800de2a:	335a      	adds	r3, #90	; 0x5a
 800de2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de30:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800de32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800de36:	429a      	cmp	r2, r3
 800de38:	dc03      	bgt.n	800de42 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800de3a:	2300      	movs	r3, #0
 800de3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800de40:	e00a      	b.n	800de58 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800de42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de46:	2b02      	cmp	r3, #2
 800de48:	d106      	bne.n	800de58 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800de4a:	2301      	movs	r3, #1
 800de4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800de50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de54:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800de58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de5c:	3301      	adds	r3, #1
 800de5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800de62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de64:	7c9a      	ldrb	r2, [r3, #18]
 800de66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d3cb      	bcc.n	800de06 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800de6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de72:	2b02      	cmp	r3, #2
 800de74:	d102      	bne.n	800de7c <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800de7c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800de80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800de82:	234c      	movs	r3, #76	; 0x4c
 800de84:	fb01 f303 	mul.w	r3, r1, r3
 800de88:	4413      	add	r3, r2
 800de8a:	3348      	adds	r3, #72	; 0x48
 800de8c:	881b      	ldrh	r3, [r3, #0]
 800de8e:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800de90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800de94:	2b01      	cmp	r3, #1
 800de96:	d150      	bne.n	800df3a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800de98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de9a:	2200      	movs	r2, #0
 800de9c:	469a      	mov	sl, r3
 800de9e:	4693      	mov	fp, r2
 800dea0:	4652      	mov	r2, sl
 800dea2:	465b      	mov	r3, fp
 800dea4:	f04f 0000 	mov.w	r0, #0
 800dea8:	f04f 0100 	mov.w	r1, #0
 800deac:	0159      	lsls	r1, r3, #5
 800deae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800deb2:	0150      	lsls	r0, r2, #5
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	ebb2 040a 	subs.w	r4, r2, sl
 800debc:	eb63 050b 	sbc.w	r5, r3, fp
 800dec0:	f04f 0200 	mov.w	r2, #0
 800dec4:	f04f 0300 	mov.w	r3, #0
 800dec8:	00ab      	lsls	r3, r5, #2
 800deca:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dece:	00a2      	lsls	r2, r4, #2
 800ded0:	4614      	mov	r4, r2
 800ded2:	461d      	mov	r5, r3
 800ded4:	eb14 080a 	adds.w	r8, r4, sl
 800ded8:	eb45 090b 	adc.w	r9, r5, fp
 800dedc:	f04f 0200 	mov.w	r2, #0
 800dee0:	f04f 0300 	mov.w	r3, #0
 800dee4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dee8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800deec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800def0:	4690      	mov	r8, r2
 800def2:	4699      	mov	r9, r3
 800def4:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800def8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800defc:	f04f 0200 	mov.w	r2, #0
 800df00:	f04f 0300 	mov.w	r3, #0
 800df04:	024b      	lsls	r3, r1, #9
 800df06:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800df0a:	0242      	lsls	r2, r0, #9
 800df0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800df10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df14:	2200      	movs	r2, #0
 800df16:	61bb      	str	r3, [r7, #24]
 800df18:	61fa      	str	r2, [r7, #28]
 800df1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df1e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800df22:	4621      	mov	r1, r4
 800df24:	428a      	cmp	r2, r1
 800df26:	4629      	mov	r1, r5
 800df28:	418b      	sbcs	r3, r1
 800df2a:	d203      	bcs.n	800df34 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800df2c:	2301      	movs	r3, #1
 800df2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800df32:	e002      	b.n	800df3a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800df34:	2300      	movs	r3, #0
 800df36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800df3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 810b 	beq.w	800e15a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800df44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df46:	2200      	movs	r2, #0
 800df48:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800df4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df4c:	f7ff fb80 	bl	800d650 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800df50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df52:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800df56:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800df58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800df64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df66:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800df6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df70:	1ad2      	subs	r2, r2, r3
 800df72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df74:	4413      	add	r3, r2
 800df76:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800df78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da02      	bge.n	800df84 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800df7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df80:	425b      	negs	r3, r3
 800df82:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800df84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	461a      	mov	r2, r3
 800df8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df8c:	4293      	cmp	r3, r2
 800df8e:	dd0c      	ble.n	800dfaa <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800df90:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800df92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800df94:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800df96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df98:	429a      	cmp	r2, r3
 800df9a:	da03      	bge.n	800dfa4 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800df9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df9e:	2201      	movs	r2, #1
 800dfa0:	709a      	strb	r2, [r3, #2]
 800dfa2:	e002      	b.n	800dfaa <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800dfa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800dfaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	1c5a      	adds	r2, r3, #1
 800dfb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfb2:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800dfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfba:	695b      	ldr	r3, [r3, #20]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d906      	bls.n	800dfce <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800dfc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dfcc:	e014      	b.n	800dff8 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800dfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dfd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	6139      	str	r1, [r7, #16]
 800dfda:	6178      	str	r0, [r7, #20]
 800dfdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	1851      	adds	r1, r2, r1
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	eb43 0101 	adc.w	r1, r3, r1
 800dfec:	60f9      	str	r1, [r7, #12]
 800dfee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dff0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dff4:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800dff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	429a      	cmp	r2, r3
 800e002:	d202      	bcs.n	800e00a <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800e004:	2301      	movs	r3, #1
 800e006:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800e00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e00c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2200      	movs	r2, #0
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	607a      	str	r2, [r7, #4]
 800e01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e01e:	f7f2 f94f 	bl	80002c0 <__aeabi_uldivmod>
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
		xtalk_offset_out =
 800e026:	4613      	mov	r3, r2
 800e028:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800e02a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e032:	4413      	add	r3, r2
 800e034:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800e036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e038:	2b00      	cmp	r3, #0
 800e03a:	da02      	bge.n	800e042 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800e03c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e03e:	425b      	negs	r3, r3
 800e040:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800e042:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e046:	2b00      	cmp	r3, #0
 800e048:	d112      	bne.n	800e070 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800e04a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800e050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e052:	4293      	cmp	r3, r2
 800e054:	db0c      	blt.n	800e070 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800e056:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800e058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800e05a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800e05c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e05e:	429a      	cmp	r2, r3
 800e060:	da03      	bge.n	800e06a <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800e062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e064:	2201      	movs	r2, #1
 800e066:	70da      	strb	r2, [r3, #3]
 800e068:	e002      	b.n	800e070 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800e06a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e06c:	2202      	movs	r2, #2
 800e06e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800e070:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e074:	2b00      	cmp	r3, #0
 800e076:	d108      	bne.n	800e08a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800e078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e07a:	69db      	ldr	r3, [r3, #28]
 800e07c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800e07e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e080:	4293      	cmp	r3, r2
 800e082:	da02      	bge.n	800e08a <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800e084:	2302      	movs	r3, #2
 800e086:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800e08a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e08c:	2200      	movs	r2, #0
 800e08e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800e090:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e094:	2b00      	cmp	r3, #0
 800e096:	d112      	bne.n	800e0be <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800e098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e09a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00e      	beq.n	800e0be <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800e0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e0a8:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800e0ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d905      	bls.n	800e0be <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800e0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800e0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c0:	7c1b      	ldrb	r3, [r3, #16]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d007      	beq.n	800e0d6 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800e0c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0c8:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800e0ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d902      	bls.n	800e0d6 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800e0d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e0d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0d8:	7c1b      	ldrb	r3, [r3, #16]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d107      	bne.n	800e0ee <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800e0de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0e0:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e0e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d202      	bcs.n	800e0ee <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800e0e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800e0ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0f0:	089b      	lsrs	r3, r3, #2
 800e0f2:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800e0f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0fa:	d301      	bcc.n	800e100 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800e0fc:	4b3e      	ldr	r3, [pc, #248]	; (800e1f8 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800e0fe:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800e100:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10d      	bne.n	800e124 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e108:	2300      	movs	r3, #0
 800e10a:	9301      	str	r3, [sp, #4]
 800e10c:	2301      	movs	r3, #1
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e114:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e118:	f7ff fc00 	bl	800d91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800e11c:	2302      	movs	r3, #2
 800e11e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e122:	e009      	b.n	800e138 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e124:	2301      	movs	r3, #1
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	2301      	movs	r3, #1
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e12e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e130:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e134:	f7ff fbf2 	bl	800d91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e138:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d10c      	bne.n	800e15a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800e140:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e142:	f04f 0200 	mov.w	r2, #0
 800e146:	f04f 0300 	mov.w	r3, #0
 800e14a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e156:	2200      	movs	r2, #0
 800e158:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800e160:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e164:	2b01      	cmp	r3, #1
 800e166:	d140      	bne.n	800e1ea <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800e168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e16a:	691b      	ldr	r3, [r3, #16]
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e170:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800e172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e174:	691a      	ldr	r2, [r3, #16]
 800e176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d202      	bcs.n	800e184 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800e17e:	2301      	movs	r3, #1
 800e180:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800e184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e188:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800e18a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d110      	bne.n	800e1b4 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e192:	2300      	movs	r3, #0
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	2300      	movs	r3, #0
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e19c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e19e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1a2:	f7ff fbbb 	bl	800d91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800e1a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e1b2:	e009      	b.n	800e1c8 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	9301      	str	r3, [sp, #4]
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	9300      	str	r3, [sp, #0]
 800e1bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e1c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1c4:	f7ff fbaa 	bl	800d91c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e1c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d10c      	bne.n	800e1ea <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800e1d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e1d2:	f04f 0200 	mov.w	r2, #0
 800e1d6:	f04f 0300 	mov.w	r3, #0
 800e1da:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e1e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e1ea:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3780      	adds	r7, #128	; 0x80
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1f8:	0003ffff 	.word	0x0003ffff

0800e1fc <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e204:	2300      	movs	r3, #0
 800e206:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3318      	adds	r3, #24
 800e20c:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e214:	3308      	adds	r3, #8
 800e216:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e236:	2200      	movs	r2, #0
 800e238:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e242:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e246:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e250:	461a      	mov	r2, r3
 800e252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e256:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e260:	461a      	mov	r2, r3
 800e262:	2300      	movs	r3, #0
 800e264:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e26e:	2200      	movs	r2, #0
 800e270:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27a:	461a      	mov	r2, r3
 800e27c:	23c8      	movs	r3, #200	; 0xc8
 800e27e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e288:	461a      	mov	r2, r3
 800e28a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e28e:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e298:	461a      	mov	r2, r3
 800e29a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e29e:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4b3a      	ldr	r3, [pc, #232]	; (800e394 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800e2ac:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e2bc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2d6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2e4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e300:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e30a:	461a      	mov	r2, r3
 800e30c:	230a      	movs	r3, #10
 800e30e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e318:	461a      	mov	r2, r3
 800e31a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e31e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e328:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e32c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e336:	461a      	mov	r2, r3
 800e338:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e33c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e346:	461a      	mov	r2, r3
 800e348:	2300      	movs	r3, #0
 800e34a:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e354:	461a      	mov	r2, r3
 800e356:	2300      	movs	r3, #0
 800e358:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e362:	3310      	adds	r3, #16
 800e364:	4619      	mov	r1, r3
 800e366:	f04f 0200 	mov.w	r2, #0
 800e36a:	f04f 0300 	mov.w	r3, #0
 800e36e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e378:	461a      	mov	r2, r3
 800e37a:	2300      	movs	r3, #0
 800e37c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f000 f809 	bl	800e398 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3718      	adds	r7, #24
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	000ff800 	.word	0x000ff800

0800e398 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e3aa:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3714      	adds	r7, #20
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e400:	2300      	movs	r3, #0
 800e402:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3318      	adds	r3, #24
 800e408:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e410:	461a      	mov	r2, r3
 800e412:	2300      	movs	r3, #0
 800e414:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e41e:	2200      	movs	r2, #0
 800e420:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e42a:	2200      	movs	r2, #0
 800e42c:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e436:	3308      	adds	r3, #8
 800e438:	2218      	movs	r2, #24
 800e43a:	2100      	movs	r1, #0
 800e43c:	4618      	mov	r0, r3
 800e43e:	f00b f9d1 	bl	80197e4 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e44e:	b480      	push	{r7}
 800e450:	b085      	sub	sp, #20
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e456:	2300      	movs	r3, #0
 800e458:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3318      	adds	r3, #24
 800e45e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e466:	2203      	movs	r2, #3
 800e468:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47e:	2200      	movs	r2, #0
 800e480:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e496:	2200      	movs	r2, #0
 800e498:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3714      	adds	r7, #20
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr

0800e4de <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e4de:	b480      	push	{r7}
 800e4e0:	b085      	sub	sp, #20
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3318      	adds	r3, #24
 800e4ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e4f6:	22ff      	movs	r2, #255	; 0xff
 800e4f8:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e502:	2200      	movs	r2, #0
 800e504:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e50e:	461a      	mov	r2, r3
 800e510:	2300      	movs	r3, #0
 800e512:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e528:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d007      	beq.n	800e540 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e536:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e546:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d007      	beq.n	800e55e <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e554:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e566:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e576:	b480      	push	{r7}
 800e578:	b087      	sub	sp, #28
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	60f8      	str	r0, [r7, #12]
 800e57e:	60b9      	str	r1, [r7, #8]
 800e580:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e582:	2300      	movs	r3, #0
 800e584:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2201      	movs	r2, #1
 800e58a:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	229b      	movs	r2, #155	; 0x9b
 800e596:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	371c      	adds	r7, #28
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3318      	adds	r3, #24
 800e5b4:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5c6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5d6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e5f2:	f003 0303 	and.w	r3, r3, #3
 800e5f6:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e5fe:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e606:	4413      	add	r3, r2
 800e608:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e61e:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e628:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e632:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e63c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b087      	sub	sp, #28
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3318      	adds	r3, #24
 800e65a:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e660:	2300      	movs	r3, #0
 800e662:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e66a:	2b07      	cmp	r3, #7
 800e66c:	bf0c      	ite	eq
 800e66e:	2301      	moveq	r3, #1
 800e670:	2300      	movne	r3, #0
 800e672:	b2db      	uxtb	r3, r3
 800e674:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e676:	2300      	movs	r3, #0
 800e678:	75fb      	strb	r3, [r7, #23]
 800e67a:	e019      	b.n	800e6b0 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e67c:	7df9      	ldrb	r1, [r7, #23]
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	6938      	ldr	r0, [r7, #16]
 800e682:	461a      	mov	r2, r3
 800e684:	0052      	lsls	r2, r2, #1
 800e686:	441a      	add	r2, r3
 800e688:	0153      	lsls	r3, r2, #5
 800e68a:	461a      	mov	r2, r3
 800e68c:	460b      	mov	r3, r1
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	440b      	add	r3, r1
 800e692:	019b      	lsls	r3, r3, #6
 800e694:	4413      	add	r3, r2
 800e696:	4403      	add	r3, r0
 800e698:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e69c:	3314      	adds	r3, #20
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dd02      	ble.n	800e6aa <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e6a4:	7dbb      	ldrb	r3, [r7, #22]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e6aa:	7dfb      	ldrb	r3, [r7, #23]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	75fb      	strb	r3, [r7, #23]
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	d9e2      	bls.n	800e67c <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	7dba      	ldrb	r2, [r7, #22]
 800e6ba:	701a      	strb	r2, [r3, #0]

	return status;
 800e6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	371c      	adds	r7, #28
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e6da:	88fb      	ldrh	r3, [r7, #6]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e6e0:	88fb      	ldrh	r3, [r7, #6]
 800e6e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e6e6:	fb92 f3f3 	sdiv	r3, r2, r3
 800e6ea:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3714      	adds	r7, #20
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e6fa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e6fe:	b089      	sub	sp, #36	; 0x24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e70a:	f04f 0200 	mov.w	r2, #0
 800e70e:	f04f 0300 	mov.w	r3, #0
 800e712:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e716:	2300      	movs	r3, #0
 800e718:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	fb02 f303 	mul.w	r3, r2, r3
 800e722:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	0b1b      	lsrs	r3, r3, #12
 800e728:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2200      	movs	r2, #0
 800e72e:	469a      	mov	sl, r3
 800e730:	4693      	mov	fp, r2
 800e732:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	fb02 f303 	mul.w	r3, r2, r3
 800e73e:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	091b      	lsrs	r3, r3, #4
 800e744:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2200      	movs	r2, #0
 800e74a:	4698      	mov	r8, r3
 800e74c:	4691      	mov	r9, r2
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	fb08 f203 	mul.w	r2, r8, r3
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	fb09 f303 	mul.w	r3, r9, r3
 800e75a:	4413      	add	r3, r2
 800e75c:	69ba      	ldr	r2, [r7, #24]
 800e75e:	fba2 4508 	umull	r4, r5, r2, r8
 800e762:	442b      	add	r3, r5
 800e764:	461d      	mov	r5, r3
 800e766:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e76a:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e76e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e772:	f04f 0200 	mov.w	r2, #0
 800e776:	f04f 0300 	mov.w	r3, #0
 800e77a:	0b02      	lsrs	r2, r0, #12
 800e77c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e780:	0b0b      	lsrs	r3, r1, #12
 800e782:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d305      	bcc.n	800e79a <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295
 800e792:	f04f 0300 	mov.w	r3, #0
 800e796:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e79e:	697b      	ldr	r3, [r7, #20]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3724      	adds	r7, #36	; 0x24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e7aa:	4770      	bx	lr

0800e7ac <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e7ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7b0:	b096      	sub	sp, #88	; 0x58
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	627a      	str	r2, [r7, #36]	; 0x24
 800e7ba:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e7bc:	f04f 0200 	mov.w	r2, #0
 800e7c0:	f04f 0300 	mov.w	r3, #0
 800e7c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e7c8:	f04f 0200 	mov.w	r2, #0
 800e7cc:	f04f 0300 	mov.w	r3, #0
 800e7d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7da:	17da      	asrs	r2, r3, #31
 800e7dc:	469a      	mov	sl, r3
 800e7de:	4693      	mov	fp, r2
 800e7e0:	4652      	mov	r2, sl
 800e7e2:	465b      	mov	r3, fp
 800e7e4:	f04f 0000 	mov.w	r0, #0
 800e7e8:	f04f 0100 	mov.w	r1, #0
 800e7ec:	0159      	lsls	r1, r3, #5
 800e7ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e7f2:	0150      	lsls	r0, r2, #5
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	ebb2 040a 	subs.w	r4, r2, sl
 800e7fc:	eb63 050b 	sbc.w	r5, r3, fp
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	00ab      	lsls	r3, r5, #2
 800e80a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e80e:	00a2      	lsls	r2, r4, #2
 800e810:	4614      	mov	r4, r2
 800e812:	461d      	mov	r5, r3
 800e814:	eb14 080a 	adds.w	r8, r4, sl
 800e818:	eb45 090b 	adc.w	r9, r5, fp
 800e81c:	f04f 0200 	mov.w	r2, #0
 800e820:	f04f 0300 	mov.w	r3, #0
 800e824:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e828:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e82c:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e830:	4690      	mov	r8, r2
 800e832:	4699      	mov	r9, r3
 800e834:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e838:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00d      	beq.n	800e85a <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e83e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e840:	2200      	movs	r2, #0
 800e842:	61bb      	str	r3, [r7, #24]
 800e844:	61fa      	str	r2, [r7, #28]
 800e846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e84a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e84e:	f7f1 fd37 	bl	80002c0 <__aeabi_uldivmod>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d02a      	beq.n	800e8b6 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e860:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e864:	f04f 0200 	mov.w	r2, #0
 800e868:	f04f 0300 	mov.w	r3, #0
 800e86c:	02cb      	lsls	r3, r1, #11
 800e86e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e872:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e876:	0849      	lsrs	r1, r1, #1
 800e878:	2000      	movs	r0, #0
 800e87a:	6139      	str	r1, [r7, #16]
 800e87c:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e87e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e882:	4621      	mov	r1, r4
 800e884:	1851      	adds	r1, r2, r1
 800e886:	6039      	str	r1, [r7, #0]
 800e888:	4629      	mov	r1, r5
 800e88a:	eb43 0101 	adc.w	r1, r3, r1
 800e88e:	6079      	str	r1, [r7, #4]
 800e890:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e894:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	2200      	movs	r2, #0
 800e89c:	60bb      	str	r3, [r7, #8]
 800e89e:	60fa      	str	r2, [r7, #12]
 800e8a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e8a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e8a8:	f7f1 fd0a 	bl	80002c0 <__aeabi_uldivmod>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e8b4:	e00b      	b.n	800e8ce <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e8b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e8ba:	f04f 0200 	mov.w	r2, #0
 800e8be:	f04f 0300 	mov.w	r3, #0
 800e8c2:	02cb      	lsls	r3, r1, #11
 800e8c4:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e8c8:	02c2      	lsls	r2, r0, #11
 800e8ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8d0:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3758      	adds	r7, #88	; 0x58
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e8de <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b085      	sub	sp, #20
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e8ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8ee:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e8f0:	e002      	b.n	800e8f8 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	089b      	lsrs	r3, r3, #2
 800e8f6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d8f8      	bhi.n	800e8f2 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e900:	e017      	b.n	800e932 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	4413      	add	r3, r2
 800e908:	687a      	ldr	r2, [r7, #4]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d30b      	bcc.n	800e926 <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	4413      	add	r3, r2
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	085b      	lsrs	r3, r3, #1
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	4413      	add	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]
 800e924:	e002      	b.n	800e92c <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	085b      	lsrs	r3, r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	089b      	lsrs	r3, r3, #2
 800e930:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e4      	bne.n	800e902 <VL53L1_isqrt+0x24>
	}

	return res;
 800e938:	68fb      	ldr	r3, [r7, #12]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b084      	sub	sp, #16
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e952:	2300      	movs	r3, #0
 800e954:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 faa5 	bl	800eeac <VL53L1_decode_vcsel_period>
 800e962:	4603      	mov	r3, r0
	period = 2048 *
 800e964:	02db      	lsls	r3, r3, #11
 800e966:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e972:	461a      	mov	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e980:	02db      	lsls	r3, r3, #11
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	4413      	add	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e98e:	02db      	lsls	r3, r3, #11
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d009      	beq.n	800e9b0 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	fb01 f202 	mul.w	r2, r1, r2
 800e9aa:	1a9b      	subs	r3, r3, r2
 800e9ac:	60fb      	str	r3, [r7, #12]
 800e9ae:	e001      	b.n	800e9b4 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e9be:	bf00      	nop
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b084      	sub	sp, #16
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e9d8:	6838      	ldr	r0, [r7, #0]
 800e9da:	f000 fb90 	bl	800f0fe <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff ff7a 	bl	800e8de <VL53L1_isqrt>
 800e9ea:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e9ec:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	fb02 f303 	mul.w	r3, r2, r3
 800e9f6:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	3307      	adds	r3, #7
 800e9fc:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	111b      	asrs	r3, r3, #4
 800ea02:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
 800ea24:	e01e      	b.n	800ea64 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800ea26:	7bfa      	ldrb	r2, [r7, #15]
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	3206      	adds	r2, #6
 800ea2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	dd13      	ble.n	800ea5e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800ea3c:	7bf9      	ldrb	r1, [r7, #15]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	3106      	adds	r1, #6
 800ea42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea46:	441a      	add	r2, r3
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ea54:	3301      	adds	r3, #1
 800ea56:	b2da      	uxtb	r2, r3
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	3301      	adds	r3, #1
 800ea62:	73fb      	strb	r3, [r7, #15]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	7a9b      	ldrb	r3, [r3, #10]
 800ea68:	7bfa      	ldrb	r2, [r7, #15]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d3db      	bcc.n	800ea26 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01c      	beq.n	800eab2 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800ea90:	0852      	lsrs	r2, r2, #1
 800ea92:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800ea94:	441a      	add	r2, r3
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800eaa2:	683a      	ldr	r2, [r7, #0]
 800eaa4:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800eaa8:	fb93 f2f2 	sdiv	r2, r3, r2
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800eab2:	bf00      	nop
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b085      	sub	sp, #20
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7b1b      	ldrb	r3, [r3, #12]
 800ead2:	f003 0307 	and.w	r3, r3, #7
 800ead6:	2b07      	cmp	r3, #7
 800ead8:	d13a      	bne.n	800eb50 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eade:	2300      	movs	r3, #0
 800eae0:	73bb      	strb	r3, [r7, #14]
 800eae2:	e01f      	b.n	800eb24 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800eae4:	7bbb      	ldrb	r3, [r7, #14]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	4413      	add	r3, r2
 800eaea:	7b1b      	ldrb	r3, [r3, #12]
 800eaec:	f003 0307 	and.w	r3, r3, #7
 800eaf0:	2b07      	cmp	r3, #7
 800eaf2:	d014      	beq.n	800eb1e <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800eaf4:	7bba      	ldrb	r2, [r7, #14]
 800eaf6:	7b7b      	ldrb	r3, [r7, #13]
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	440a      	add	r2, r1
 800eafc:	7b11      	ldrb	r1, [r2, #12]
 800eafe:	687a      	ldr	r2, [r7, #4]
 800eb00:	4413      	add	r3, r2
 800eb02:	460a      	mov	r2, r1
 800eb04:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800eb06:	7bba      	ldrb	r2, [r7, #14]
 800eb08:	7b7b      	ldrb	r3, [r7, #13]
 800eb0a:	6879      	ldr	r1, [r7, #4]
 800eb0c:	440a      	add	r2, r1
 800eb0e:	7c91      	ldrb	r1, [r2, #18]
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	4413      	add	r3, r2
 800eb14:	460a      	mov	r2, r1
 800eb16:	749a      	strb	r2, [r3, #18]
				i++;
 800eb18:	7b7b      	ldrb	r3, [r7, #13]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb1e:	7bbb      	ldrb	r3, [r7, #14]
 800eb20:	3301      	adds	r3, #1
 800eb22:	73bb      	strb	r3, [r7, #14]
 800eb24:	7bbb      	ldrb	r3, [r7, #14]
 800eb26:	2b05      	cmp	r3, #5
 800eb28:	d9dc      	bls.n	800eae4 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb2a:	7b7b      	ldrb	r3, [r7, #13]
 800eb2c:	73bb      	strb	r3, [r7, #14]
 800eb2e:	e00c      	b.n	800eb4a <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800eb30:	7bbb      	ldrb	r3, [r7, #14]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	4413      	add	r3, r2
 800eb36:	2210      	movs	r2, #16
 800eb38:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800eb3a:	7bbb      	ldrb	r3, [r7, #14]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	4413      	add	r3, r2
 800eb40:	2200      	movs	r2, #0
 800eb42:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
 800eb46:	3301      	adds	r3, #1
 800eb48:	73bb      	strb	r3, [r7, #14]
 800eb4a:	7bbb      	ldrb	r3, [r7, #14]
 800eb4c:	2b05      	cmp	r3, #5
 800eb4e:	d9ef      	bls.n	800eb30 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7adb      	ldrb	r3, [r3, #11]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d023      	beq.n	800eba0 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	7adb      	ldrb	r3, [r3, #11]
 800eb5c:	73fb      	strb	r3, [r7, #15]
 800eb5e:	e00f      	b.n	800eb80 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800eb60:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	7ad2      	ldrb	r2, [r2, #11]
 800eb68:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	3106      	adds	r1, #6
 800eb6e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	3206      	adds	r2, #6
 800eb76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800eb84:	7bfa      	ldrb	r2, [r7, #15]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d3ea      	bcc.n	800eb60 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	72da      	strb	r2, [r3, #11]
	}
}
 800eba0:	bf00      	nop
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff fd83 	bl	800e6cc <VL53L1_calc_pll_period_us>
 800ebc6:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ebcc:	f249 2257 	movw	r2, #37463	; 0x9257
 800ebd0:	fb02 f303 	mul.w	r3, r2, r3
 800ebd4:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ebdc:	0c1b      	lsrs	r3, r3, #16
 800ebde:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ebe0:	68bb      	ldr	r3, [r7, #8]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b087      	sub	sp, #28
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ebf8:	2307      	movs	r3, #7
 800ebfa:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec06:	db03      	blt.n	800ec10 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800ec08:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	e004      	b.n	800ec1a <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	dd01      	ble.n	800ec1a <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec20:	dd02      	ble.n	800ec28 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800ec22:	2303      	movs	r3, #3
 800ec24:	613b      	str	r3, [r7, #16]
 800ec26:	e001      	b.n	800ec2c <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800ec28:	2307      	movs	r3, #7
 800ec2a:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d009      	beq.n	800ec46 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800ec32:	697a      	ldr	r2, [r7, #20]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	409a      	lsls	r2, r3
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	085b      	lsrs	r3, r3, #1
 800ec3c:	441a      	add	r2, r3
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec44:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec4c:	dd02      	ble.n	800ec54 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	011b      	lsls	r3, r3, #4
 800ec52:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec5a:	d302      	bcc.n	800ec62 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ec5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec60:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ec66:	89fb      	ldrh	r3, [r7, #14]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	371c      	adds	r7, #28
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	603b      	str	r3, [r7, #0]
 800ec80:	4613      	mov	r3, r2
 800ec82:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ec8c:	88fb      	ldrh	r3, [r7, #6]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d010      	beq.n	800ecb4 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	021a      	lsls	r2, r3, #8
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	085b      	lsrs	r3, r3, #1
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ecaa:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ecac:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb0:	617b      	str	r3, [r7, #20]
 800ecb2:	e004      	b.n	800ecbe <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecbc:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d901      	bls.n	800ecca <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ecce:	8a7b      	ldrh	r3, [r7, #18]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	371c      	adds	r7, #28
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ecdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece0:	b093      	sub	sp, #76	; 0x4c
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	461e      	mov	r6, r3
 800ece6:	4603      	mov	r3, r0
 800ece8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ecea:	460b      	mov	r3, r1
 800ecec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ecee:	4613      	mov	r3, r2
 800ecf0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ecf2:	4633      	mov	r3, r6
 800ecf4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800ecfc:	f04f 0200 	mov.w	r2, #0
 800ed00:	f04f 0300 	mov.w	r3, #0
 800ed04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ed10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff fcda 	bl	800e6cc <VL53L1_calc_pll_period_us>
 800ed18:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800ed1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	623b      	str	r3, [r7, #32]
 800ed20:	627a      	str	r2, [r7, #36]	; 0x24
 800ed22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed24:	2200      	movs	r2, #0
 800ed26:	61bb      	str	r3, [r7, #24]
 800ed28:	61fa      	str	r2, [r7, #28]
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ed30:	4602      	mov	r2, r0
 800ed32:	1a9b      	subs	r3, r3, r2
 800ed34:	613b      	str	r3, [r7, #16]
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	460a      	mov	r2, r1
 800ed3a:	eb63 0302 	sbc.w	r3, r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]
 800ed40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ed48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	469a      	mov	sl, r3
 800ed4e:	4693      	mov	fp, r2
 800ed50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed52:	fb0a f203 	mul.w	r2, sl, r3
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	fb0b f303 	mul.w	r3, fp, r3
 800ed5c:	4413      	add	r3, r2
 800ed5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed60:	fba2 890a 	umull	r8, r9, r2, sl
 800ed64:	444b      	add	r3, r9
 800ed66:	4699      	mov	r9, r3
 800ed68:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ed6c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ed70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	da08      	bge.n	800ed8a <VL53L1_range_maths+0xae>
 800ed78:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ed7c:	1851      	adds	r1, r2, r1
 800ed7e:	60b9      	str	r1, [r7, #8]
 800ed80:	f143 0300 	adc.w	r3, r3, #0
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed8a:	f04f 0000 	mov.w	r0, #0
 800ed8e:	f04f 0100 	mov.w	r1, #0
 800ed92:	0a50      	lsrs	r0, r2, #9
 800ed94:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ed98:	1259      	asrs	r1, r3, #9
 800ed9a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ed9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda0:	f249 2257 	movw	r2, #37463	; 0x9257
 800eda4:	fb03 f202 	mul.w	r2, r3, r2
 800eda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edaa:	2100      	movs	r1, #0
 800edac:	fb01 f303 	mul.w	r3, r1, r3
 800edb0:	4413      	add	r3, r2
 800edb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edb4:	f249 2157 	movw	r1, #37463	; 0x9257
 800edb8:	fba2 4501 	umull	r4, r5, r2, r1
 800edbc:	442b      	add	r3, r5
 800edbe:	461d      	mov	r5, r3
 800edc0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800edc4:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800edc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800edcc:	2b00      	cmp	r3, #0
 800edce:	da07      	bge.n	800ede0 <VL53L1_range_maths+0x104>
 800edd0:	4934      	ldr	r1, [pc, #208]	; (800eea4 <VL53L1_range_maths+0x1c8>)
 800edd2:	1851      	adds	r1, r2, r1
 800edd4:	6039      	str	r1, [r7, #0]
 800edd6:	f143 0300 	adc.w	r3, r3, #0
 800edda:	607b      	str	r3, [r7, #4]
 800eddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ede0:	f04f 0000 	mov.w	r0, #0
 800ede4:	f04f 0100 	mov.w	r1, #0
 800ede8:	0d90      	lsrs	r0, r2, #22
 800edea:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800edee:	1599      	asrs	r1, r3, #22
 800edf0:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800edf8:	4413      	add	r3, r2
 800edfa:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800edfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee00:	fb02 f303 	mul.w	r3, r2, r3
 800ee04:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800ee06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee0c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800ee0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da01      	bge.n	800ee18 <VL53L1_range_maths+0x13c>
 800ee14:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ee18:	12db      	asrs	r3, r3, #11
 800ee1a:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ee1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d130      	bne.n	800ee86 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800ee24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee26:	4613      	mov	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4413      	add	r3, r2
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ee30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	da00      	bge.n	800ee38 <VL53L1_range_maths+0x15c>
 800ee36:	3303      	adds	r3, #3
 800ee38:	109b      	asrs	r3, r3, #2
 800ee3a:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ee3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee3e:	4b1a      	ldr	r3, [pc, #104]	; (800eea8 <VL53L1_range_maths+0x1cc>)
 800ee40:	fb83 2301 	smull	r2, r3, r3, r1
 800ee44:	109a      	asrs	r2, r3, #2
 800ee46:	17cb      	asrs	r3, r1, #31
 800ee48:	1ad2      	subs	r2, r2, r3
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	4413      	add	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	1aca      	subs	r2, r1, r3
 800ee54:	2a04      	cmp	r2, #4
 800ee56:	dc09      	bgt.n	800ee6c <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ee58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee5a:	4a13      	ldr	r2, [pc, #76]	; (800eea8 <VL53L1_range_maths+0x1cc>)
 800ee5c:	fb82 1203 	smull	r1, r2, r2, r3
 800ee60:	1092      	asrs	r2, r2, #2
 800ee62:	17db      	asrs	r3, r3, #31
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	b21b      	sxth	r3, r3
 800ee68:	647b      	str	r3, [r7, #68]	; 0x44
 800ee6a:	e015      	b.n	800ee98 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ee6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee6e:	4a0e      	ldr	r2, [pc, #56]	; (800eea8 <VL53L1_range_maths+0x1cc>)
 800ee70:	fb82 1203 	smull	r1, r2, r2, r3
 800ee74:	1092      	asrs	r2, r2, #2
 800ee76:	17db      	asrs	r3, r3, #31
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	b21b      	sxth	r3, r3
 800ee82:	647b      	str	r3, [r7, #68]	; 0x44
 800ee84:	e008      	b.n	800ee98 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800ee86:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d104      	bne.n	800ee98 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ee8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee90:	0fda      	lsrs	r2, r3, #31
 800ee92:	4413      	add	r3, r2
 800ee94:	105b      	asrs	r3, r3, #1
 800ee96:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800ee98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	374c      	adds	r7, #76	; 0x4c
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea4:	003fffff 	.word	0x003fffff
 800eea8:	66666667 	.word	0x66666667

0800eeac <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	3301      	adds	r3, #1
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	781a      	ldrb	r2, [r3, #0]
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7a5a      	ldrb	r2, [r3, #9]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	685a      	ldr	r2, [r3, #4]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	605a      	str	r2, [r3, #4]
}
 800ef42:	bf00      	nop
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b087      	sub	sp, #28
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	460b      	mov	r3, r1
 800ef58:	607a      	str	r2, [r7, #4]
 800ef5a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2203      	movs	r2, #3
 800ef64:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2203      	movs	r2, #3
 800ef6a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2218      	movs	r2, #24
 800ef82:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ef84:	897b      	ldrh	r3, [r7, #10]
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f022:	2300      	movs	r3, #0
 800f024:	82fb      	strh	r3, [r7, #22]
 800f026:	e009      	b.n	800f03c <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800f028:	8afb      	ldrh	r3, [r7, #22]
 800f02a:	8afa      	ldrh	r2, [r7, #22]
 800f02c:	b2d1      	uxtb	r1, r2
 800f02e:	687a      	ldr	r2, [r7, #4]
 800f030:	4413      	add	r3, r2
 800f032:	460a      	mov	r2, r1
 800f034:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f036:	8afb      	ldrh	r3, [r7, #22]
 800f038:	3301      	adds	r3, #1
 800f03a:	82fb      	strh	r3, [r7, #22]
 800f03c:	8afb      	ldrh	r3, [r7, #22]
 800f03e:	2b05      	cmp	r3, #5
 800f040:	d9f2      	bls.n	800f028 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f042:	2300      	movs	r3, #0
 800f044:	82fb      	strh	r3, [r7, #22]
 800f046:	e007      	b.n	800f058 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800f048:	8afb      	ldrh	r3, [r7, #22]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	4413      	add	r3, r2
 800f04e:	2201      	movs	r2, #1
 800f050:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800f052:	8afb      	ldrh	r3, [r7, #22]
 800f054:	3301      	adds	r3, #1
 800f056:	82fb      	strh	r3, [r7, #22]
 800f058:	8afb      	ldrh	r3, [r7, #22]
 800f05a:	2b05      	cmp	r3, #5
 800f05c:	d9f4      	bls.n	800f048 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800f05e:	2300      	movs	r3, #0
 800f060:	82fb      	strh	r3, [r7, #22]
 800f062:	e013      	b.n	800f08c <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800f064:	8afa      	ldrh	r2, [r7, #22]
 800f066:	897b      	ldrh	r3, [r7, #10]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d206      	bcs.n	800f07a <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800f06c:	8afa      	ldrh	r2, [r7, #22]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3206      	adds	r2, #6
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f078:	e005      	b.n	800f086 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800f07a:	8afa      	ldrh	r2, [r7, #22]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	3206      	adds	r2, #6
 800f080:	2100      	movs	r1, #0
 800f082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800f086:	8afb      	ldrh	r3, [r7, #22]
 800f088:	3301      	adds	r3, #1
 800f08a:	82fb      	strh	r3, [r7, #22]
 800f08c:	8afb      	ldrh	r3, [r7, #22]
 800f08e:	2b17      	cmp	r3, #23
 800f090:	d9e8      	bls.n	800f064 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800f092:	bf00      	nop
 800f094:	bf00      	nop
 800f096:	371c      	adds	r7, #28
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800f0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	da10      	bge.n	800f0d8 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	43db      	mvns	r3, r3
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	f003 0307 	and.w	r3, r3, #7
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800f0ca:	7bfb      	ldrb	r3, [r7, #15]
 800f0cc:	3b80      	subs	r3, #128	; 0x80
 800f0ce:	10db      	asrs	r3, r3, #3
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800f0d6:	e00c      	b.n	800f0f2 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	f003 0307 	and.w	r3, r3, #7
 800f0de:	b2da      	uxtb	r2, r3
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f0ea:	10db      	asrs	r3, r3, #3
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	701a      	strb	r2, [r3, #0]
}
 800f0f2:	bf00      	nop
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b085      	sub	sp, #20
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f10a:	2300      	movs	r3, #0
 800f10c:	73fb      	strb	r3, [r7, #15]
 800f10e:	e02c      	b.n	800f16a <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d009      	beq.n	800f12a <VL53L1_hist_find_min_max_bin_values+0x2c>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f11c:	7bf9      	ldrb	r1, [r7, #15]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	3106      	adds	r1, #6
 800f122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f126:	429a      	cmp	r2, r3
 800f128:	db07      	blt.n	800f13a <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800f12a:	7bfa      	ldrb	r2, [r7, #15]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3206      	adds	r2, #6
 800f130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d009      	beq.n	800f154 <VL53L1_hist_find_min_max_bin_values+0x56>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f146:	7bf9      	ldrb	r1, [r7, #15]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3106      	adds	r1, #6
 800f14c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f150:	429a      	cmp	r2, r3
 800f152:	dc07      	bgt.n	800f164 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800f154:	7bfa      	ldrb	r2, [r7, #15]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3206      	adds	r2, #6
 800f15a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f164:	7bfb      	ldrb	r3, [r7, #15]
 800f166:	3301      	adds	r3, #1
 800f168:	73fb      	strb	r3, [r7, #15]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	7a9b      	ldrb	r3, [r3, #10]
 800f16e:	7bfa      	ldrb	r2, [r7, #15]
 800f170:	429a      	cmp	r2, r3
 800f172:	d3cd      	bcc.n	800f110 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800f174:	bf00      	nop
 800f176:	bf00      	nop
 800f178:	3714      	adds	r7, #20
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f182:	b480      	push	{r7}
 800f184:	b085      	sub	sp, #20
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7adb      	ldrb	r3, [r3, #11]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d03a      	beq.n	800f20c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	73fb      	strb	r3, [r7, #15]
 800f1ac:	e00e      	b.n	800f1cc <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f1b4:	7bf9      	ldrb	r1, [r7, #15]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	3106      	adds	r1, #6
 800f1ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1be:	441a      	add	r2, r3
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	73fb      	strb	r3, [r7, #15]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	7adb      	ldrb	r3, [r3, #11]
 800f1d0:	7bfa      	ldrb	r2, [r7, #15]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d3eb      	bcc.n	800f1ae <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	7ad2      	ldrb	r2, [r2, #11]
 800f1ec:	0852      	lsrs	r2, r2, #1
 800f1ee:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f1f0:	441a      	add	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800f202:	fb93 f2f2 	sdiv	r2, r3, r2
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800f20c:	bf00      	nop
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800f218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f21c:	b0ca      	sub	sp, #296	; 0x128
 800f21e:	af00      	add	r7, sp, #0
 800f220:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f224:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f22c:	4603      	mov	r3, r0
 800f22e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f232:	2300      	movs	r3, #0
 800f234:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800f24a:	f04f 0200 	mov.w	r2, #0
 800f24e:	f04f 0300 	mov.w	r3, #0
 800f252:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800f25c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f260:	2300      	movs	r3, #0
 800f262:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800f264:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f268:	2300      	movs	r3, #0
 800f26a:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800f26c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f270:	2300      	movs	r3, #0
 800f272:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800f274:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f278:	2300      	movs	r3, #0
 800f27a:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800f27c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f280:	2300      	movs	r3, #0
 800f282:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800f284:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f288:	2300      	movs	r3, #0
 800f28a:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800f28c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f290:	2300      	movs	r3, #0
 800f292:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800f294:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f298:	2300      	movs	r3, #0
 800f29a:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800f29c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800f2a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 80e1 	beq.w	800f474 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800f2b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f000 80da 	beq.w	800f474 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800f2c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2c4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7ff f9ff 	bl	800e6cc <VL53L1_calc_pll_period_us>
 800f2ce:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800f2d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2da:	3301      	adds	r3, #1
 800f2dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800f2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f2e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2e8:	2110      	movs	r1, #16
 800f2ea:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f2ee:	f7ff fa04 	bl	800e6fa <VL53L1_duration_maths>
 800f2f2:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800f2f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2f8:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800f2fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f302:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	f7ff fc6d 	bl	800ebea <VL53L1_rate_maths>
 800f310:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f312:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f316:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f31c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f320:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f324:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f328:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	f7ff fa3c 	bl	800e7ac <VL53L1_events_per_spad_maths>
 800f334:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f336:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f33a:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f33c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f340:	8adb      	ldrh	r3, [r3, #22]
 800f342:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f346:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f34c:	8adb      	ldrh	r3, [r3, #22]
 800f34e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f352:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f354:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 808a 	beq.w	800f474 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f364:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f366:	b29b      	uxth	r3, r3
 800f368:	2200      	movs	r2, #0
 800f36a:	461c      	mov	r4, r3
 800f36c:	4615      	mov	r5, r2
 800f36e:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f372:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f376:	4622      	mov	r2, r4
 800f378:	462b      	mov	r3, r5
 800f37a:	f04f 0000 	mov.w	r0, #0
 800f37e:	f04f 0100 	mov.w	r1, #0
 800f382:	0159      	lsls	r1, r3, #5
 800f384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f388:	0150      	lsls	r0, r2, #5
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	ebb2 0804 	subs.w	r8, r2, r4
 800f392:	eb63 0905 	sbc.w	r9, r3, r5
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f3a2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f3a6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f3aa:	4690      	mov	r8, r2
 800f3ac:	4699      	mov	r9, r3
 800f3ae:	eb18 0a04 	adds.w	sl, r8, r4
 800f3b2:	eb49 0b05 	adc.w	fp, r9, r5
 800f3b6:	f04f 0200 	mov.w	r2, #0
 800f3ba:	f04f 0300 	mov.w	r3, #0
 800f3be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f3c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f3c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f3ca:	4692      	mov	sl, r2
 800f3cc:	469b      	mov	fp, r3
 800f3ce:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f3d2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3d6:	f04f 0000 	mov.w	r0, #0
 800f3da:	f04f 0100 	mov.w	r1, #0
 800f3de:	0319      	lsls	r1, r3, #12
 800f3e0:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f3e4:	0310      	lsls	r0, r2, #12
 800f3e6:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f3ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3ee:	695b      	ldr	r3, [r3, #20]
 800f3f0:	085b      	lsrs	r3, r3, #1
 800f3f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f3f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f400:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f404:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f408:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f40c:	4621      	mov	r1, r4
 800f40e:	1851      	adds	r1, r2, r1
 800f410:	65b9      	str	r1, [r7, #88]	; 0x58
 800f412:	4629      	mov	r1, r5
 800f414:	eb43 0101 	adc.w	r1, r3, r1
 800f418:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f41a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f41e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f422:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f426:	695b      	ldr	r3, [r3, #20]
 800f428:	2200      	movs	r2, #0
 800f42a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f42e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f432:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f436:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f43a:	f7f0 ff41 	bl	80002c0 <__aeabi_uldivmod>
 800f43e:	4602      	mov	r2, r0
 800f440:	460b      	mov	r3, r1
 800f442:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f44a:	8adb      	ldrh	r3, [r3, #22]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	2200      	movs	r2, #0
 800f450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f454:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f458:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f45c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f460:	4621      	mov	r1, r4
 800f462:	428a      	cmp	r2, r1
 800f464:	4629      	mov	r1, r5
 800f466:	418b      	sbcs	r3, r1
 800f468:	d204      	bcs.n	800f474 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f46a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f46e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f472:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f474:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 82e9 	beq.w	800fa52 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f484:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 82e2 	beq.w	800fa52 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f48e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f492:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 82dc 	beq.w	800fa52 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f49a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 82d5 	beq.w	800fa52 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f4a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f4ac:	885b      	ldrh	r3, [r3, #2]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	653b      	str	r3, [r7, #80]	; 0x50
 800f4b4:	657a      	str	r2, [r7, #84]	; 0x54
 800f4b6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f4ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f4be:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f4c2:	4622      	mov	r2, r4
 800f4c4:	462b      	mov	r3, r5
 800f4c6:	f04f 0000 	mov.w	r0, #0
 800f4ca:	f04f 0100 	mov.w	r1, #0
 800f4ce:	0159      	lsls	r1, r3, #5
 800f4d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f4d4:	0150      	lsls	r0, r2, #5
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	1b11      	subs	r1, r2, r4
 800f4dc:	64b9      	str	r1, [r7, #72]	; 0x48
 800f4de:	eb63 0305 	sbc.w	r3, r3, r5
 800f4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4e4:	f04f 0200 	mov.w	r2, #0
 800f4e8:	f04f 0300 	mov.w	r3, #0
 800f4ec:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	008b      	lsls	r3, r1, #2
 800f4f4:	4641      	mov	r1, r8
 800f4f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f4fa:	4641      	mov	r1, r8
 800f4fc:	008a      	lsls	r2, r1, #2
 800f4fe:	4611      	mov	r1, r2
 800f500:	461a      	mov	r2, r3
 800f502:	460b      	mov	r3, r1
 800f504:	191b      	adds	r3, r3, r4
 800f506:	643b      	str	r3, [r7, #64]	; 0x40
 800f508:	4613      	mov	r3, r2
 800f50a:	eb45 0303 	adc.w	r3, r5, r3
 800f50e:	647b      	str	r3, [r7, #68]	; 0x44
 800f510:	f04f 0200 	mov.w	r2, #0
 800f514:	f04f 0300 	mov.w	r3, #0
 800f518:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f51c:	4629      	mov	r1, r5
 800f51e:	02cb      	lsls	r3, r1, #11
 800f520:	4621      	mov	r1, r4
 800f522:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f526:	4621      	mov	r1, r4
 800f528:	02ca      	lsls	r2, r1, #11
 800f52a:	461c      	mov	r4, r3
 800f52c:	4613      	mov	r3, r2
 800f52e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f536:	881b      	ldrh	r3, [r3, #0]
 800f538:	085b      	lsrs	r3, r3, #1
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f540:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f544:	2200      	movs	r2, #0
 800f546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f54a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f54e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f552:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f556:	4621      	mov	r1, r4
 800f558:	1851      	adds	r1, r2, r1
 800f55a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f55c:	4629      	mov	r1, r5
 800f55e:	eb43 0101 	adc.w	r1, r3, r1
 800f562:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f564:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f568:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f56c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	b29b      	uxth	r3, r3
 800f574:	2200      	movs	r2, #0
 800f576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f57a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f57e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f582:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f586:	f7f0 fe9b 	bl	80002c0 <__aeabi_uldivmod>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f592:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f596:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f59a:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f59c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5a0:	691b      	ldr	r3, [r3, #16]
 800f5a2:	011a      	lsls	r2, r3, #4
 800f5a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5a8:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f5aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800f5b4:	637a      	str	r2, [r7, #52]	; 0x34
 800f5b6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f5ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f5be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f5ca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f5ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f5d2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	fb02 f203 	mul.w	r2, r2, r3
 800f5dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	fb01 f303 	mul.w	r3, r1, r3
 800f5e6:	441a      	add	r2, r3
 800f5e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	fba3 1301 	umull	r1, r3, r3, r1
 800f5f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f5fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f600:	18d3      	adds	r3, r2, r3
 800f602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f606:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f60a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f60e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f612:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f616:	8b5b      	ldrh	r3, [r3, #26]
 800f618:	b29b      	uxth	r3, r3
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f620:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f624:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f628:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f62c:	4622      	mov	r2, r4
 800f62e:	fb02 f203 	mul.w	r2, r2, r3
 800f632:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f636:	4629      	mov	r1, r5
 800f638:	fb01 f303 	mul.w	r3, r1, r3
 800f63c:	441a      	add	r2, r3
 800f63e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f642:	4621      	mov	r1, r4
 800f644:	fba3 1301 	umull	r1, r3, r3, r1
 800f648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f64c:	460b      	mov	r3, r1
 800f64e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f656:	18d3      	adds	r3, r2, r3
 800f658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f65c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f660:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f664:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f668:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f66c:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f670:	62b9      	str	r1, [r7, #40]	; 0x28
 800f672:	f143 0300 	adc.w	r3, r3, #0
 800f676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f678:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f67c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f680:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f684:	f04f 0000 	mov.w	r0, #0
 800f688:	f04f 0100 	mov.w	r1, #0
 800f68c:	0cd0      	lsrs	r0, r2, #19
 800f68e:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f692:	0cd9      	lsrs	r1, r3, #19
 800f694:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f698:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f69c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f6a0:	6239      	str	r1, [r7, #32]
 800f6a2:	f143 0300 	adc.w	r3, r3, #0
 800f6a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f6a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f6ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f6b0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f6b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f6b8:	f04f 0300 	mov.w	r3, #0
 800f6bc:	f7f0 fe00 	bl	80002c0 <__aeabi_uldivmod>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f6c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f6cc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f6d0:	f173 0300 	sbcs.w	r3, r3, #0
 800f6d4:	d305      	bcc.n	800f6e2 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f6d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f6da:	f04f 0300 	mov.w	r3, #0
 800f6de:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f6e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f6e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6ea:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f6ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	61bb      	str	r3, [r7, #24]
 800f6f6:	61fa      	str	r2, [r7, #28]
 800f6f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f6fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f700:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	2200      	movs	r2, #0
 800f708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f70c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f710:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f714:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f718:	4622      	mov	r2, r4
 800f71a:	fb02 f203 	mul.w	r2, r2, r3
 800f71e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f722:	4629      	mov	r1, r5
 800f724:	fb01 f303 	mul.w	r3, r1, r3
 800f728:	441a      	add	r2, r3
 800f72a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f72e:	4621      	mov	r1, r4
 800f730:	fba3 1301 	umull	r1, r3, r3, r1
 800f734:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f738:	460b      	mov	r3, r1
 800f73a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f742:	18d3      	adds	r3, r2, r3
 800f744:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f748:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f74c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f750:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f754:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f758:	8b5b      	ldrh	r3, [r3, #26]
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	2200      	movs	r2, #0
 800f75e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f762:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f76a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f76e:	4622      	mov	r2, r4
 800f770:	fb02 f203 	mul.w	r2, r2, r3
 800f774:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f778:	4629      	mov	r1, r5
 800f77a:	fb01 f303 	mul.w	r3, r1, r3
 800f77e:	441a      	add	r2, r3
 800f780:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f784:	4621      	mov	r1, r4
 800f786:	fba3 1301 	umull	r1, r3, r3, r1
 800f78a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f78e:	460b      	mov	r3, r1
 800f790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f798:	18d3      	adds	r3, r2, r3
 800f79a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f79e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f7a2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f7a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f7aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f7ae:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f7b2:	6139      	str	r1, [r7, #16]
 800f7b4:	f143 0300 	adc.w	r3, r3, #0
 800f7b8:	617b      	str	r3, [r7, #20]
 800f7ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f7be:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f7c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f7c6:	f04f 0000 	mov.w	r0, #0
 800f7ca:	f04f 0100 	mov.w	r1, #0
 800f7ce:	0cd0      	lsrs	r0, r2, #19
 800f7d0:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f7d4:	0cd9      	lsrs	r1, r3, #19
 800f7d6:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f7da:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f7de:	2200      	movs	r2, #0
 800f7e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7e2:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f7e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7e8:	891b      	ldrh	r3, [r3, #8]
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	673b      	str	r3, [r7, #112]	; 0x70
 800f7f0:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f7f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f7f6:	462b      	mov	r3, r5
 800f7f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f7fc:	4642      	mov	r2, r8
 800f7fe:	fb02 f203 	mul.w	r2, r2, r3
 800f802:	464b      	mov	r3, r9
 800f804:	4621      	mov	r1, r4
 800f806:	fb01 f303 	mul.w	r3, r1, r3
 800f80a:	4413      	add	r3, r2
 800f80c:	4622      	mov	r2, r4
 800f80e:	4641      	mov	r1, r8
 800f810:	fba2 1201 	umull	r1, r2, r2, r1
 800f814:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f818:	460a      	mov	r2, r1
 800f81a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f81e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f822:	4413      	add	r3, r2
 800f824:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f82c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f830:	4622      	mov	r2, r4
 800f832:	fb02 f203 	mul.w	r2, r2, r3
 800f836:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f83a:	4629      	mov	r1, r5
 800f83c:	fb01 f303 	mul.w	r3, r1, r3
 800f840:	4413      	add	r3, r2
 800f842:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f846:	4621      	mov	r1, r4
 800f848:	fba2 1201 	umull	r1, r2, r2, r1
 800f84c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f850:	460a      	mov	r2, r1
 800f852:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f856:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f85a:	4413      	add	r3, r2
 800f85c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f860:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f864:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f868:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f86c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f870:	88db      	ldrh	r3, [r3, #6]
 800f872:	b29b      	uxth	r3, r3
 800f874:	2200      	movs	r2, #0
 800f876:	66bb      	str	r3, [r7, #104]	; 0x68
 800f878:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f87a:	f04f 0200 	mov.w	r2, #0
 800f87e:	f04f 0300 	mov.w	r3, #0
 800f882:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f886:	4629      	mov	r1, r5
 800f888:	01cb      	lsls	r3, r1, #7
 800f88a:	4621      	mov	r1, r4
 800f88c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f890:	4621      	mov	r1, r4
 800f892:	01ca      	lsls	r2, r1, #7
 800f894:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f898:	1884      	adds	r4, r0, r2
 800f89a:	60bc      	str	r4, [r7, #8]
 800f89c:	eb41 0303 	adc.w	r3, r1, r3
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f8a6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f8aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f8ae:	88db      	ldrh	r3, [r3, #6]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	663b      	str	r3, [r7, #96]	; 0x60
 800f8b6:	667a      	str	r2, [r7, #100]	; 0x64
 800f8b8:	f04f 0200 	mov.w	r2, #0
 800f8bc:	f04f 0300 	mov.w	r3, #0
 800f8c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	020b      	lsls	r3, r1, #8
 800f8c8:	4621      	mov	r1, r4
 800f8ca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	020a      	lsls	r2, r1, #8
 800f8d2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f8d6:	f7f0 fcf3 	bl	80002c0 <__aeabi_uldivmod>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f8e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f8e6:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f8ea:	6039      	str	r1, [r7, #0]
 800f8ec:	f143 0300 	adc.w	r3, r3, #0
 800f8f0:	607b      	str	r3, [r7, #4]
 800f8f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f8f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f8fa:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f8fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f902:	f04f 0300 	mov.w	r3, #0
 800f906:	f7f0 fcdb 	bl	80002c0 <__aeabi_uldivmod>
 800f90a:	4602      	mov	r2, r0
 800f90c:	460b      	mov	r3, r1
 800f90e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f912:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f916:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f91a:	f173 0300 	sbcs.w	r3, r3, #0
 800f91e:	d305      	bcc.n	800f92c <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f920:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f924:	f04f 0300 	mov.w	r3, #0
 800f928:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f92c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f930:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f934:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f936:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f93a:	69db      	ldr	r3, [r3, #28]
 800f93c:	021b      	lsls	r3, r3, #8
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fe ffcd 	bl	800e8de <VL53L1_isqrt>
 800f944:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f94c:	785b      	ldrb	r3, [r3, #1]
 800f94e:	461a      	mov	r2, r3
 800f950:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f954:	fb02 f303 	mul.w	r3, r2, r3
 800f958:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f95c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f960:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f962:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f966:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f968:	4293      	cmp	r3, r2
 800f96a:	d218      	bcs.n	800f99e <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f96c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f974:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f978:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f984:	021b      	lsls	r3, r3, #8
 800f986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f98a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f98e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f992:	429a      	cmp	r2, r3
 800f994:	d203      	bcs.n	800f99e <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f996:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f99a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f99e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f9a2:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f9a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f9a8:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f9aa:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f9ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f9b0:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f9b2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f9b6:	f000 f854 	bl	800fa62 <VL53L1_f_002>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f9be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f9c2:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f9c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f9d2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9dc:	fb02 f303 	mul.w	r3, r2, r3
 800f9e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f9e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9e8:	3308      	adds	r3, #8
 800f9ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f9ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f9f2:	091b      	lsrs	r3, r3, #4
 800f9f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f9f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f9fc:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f9fe:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800fa00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fa04:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800fa06:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800fa08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fa0c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800fa0e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800fa12:	f000 f826 	bl	800fa62 <VL53L1_f_002>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800fa1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa1e:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800fa20:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa24:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800fa28:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa2c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800fa30:	429a      	cmp	r2, r3
 800fa32:	da07      	bge.n	800fa44 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800fa34:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa38:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800fa3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fa40:	801a      	strh	r2, [r3, #0]
 800fa42:	e006      	b.n	800fa52 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800fa44:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800fa48:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800fa4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fa50:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800fa52:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800fa56:	4618      	mov	r0, r3
 800fa58:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fa62 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b086      	sub	sp, #24
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
 800fa6e:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800fa70:	2300      	movs	r3, #0
 800fa72:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	fb03 f303 	mul.w	r3, r3, r3
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	4413      	add	r3, r2
 800fa88:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800fa8a:	6938      	ldr	r0, [r7, #16]
 800fa8c:	f7fe ff27 	bl	800e8de <VL53L1_isqrt>
 800fa90:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	4413      	add	r3, r2
 800fa98:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	011b      	lsls	r3, r3, #4
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe ff1d 	bl	800e8de <VL53L1_isqrt>
 800faa4:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	fb02 f303 	mul.w	r3, r2, r3
 800faae:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d009      	beq.n	800faca <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	4413      	add	r3, r2
 800fabc:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	005b      	lsls	r3, r3, #1
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fac8:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800faca:	697b      	ldr	r3, [r7, #20]

}
 800facc:	4618      	mov	r0, r3
 800face:	3718      	adds	r7, #24
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2218      	movs	r2, #24
 800fae4:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2200      	movs	r2, #0
 800faf0:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	73fb      	strb	r3, [r7, #15]
 800fb0a:	e01f      	b.n	800fb4c <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800fb0c:	7bfb      	ldrb	r3, [r7, #15]
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	4413      	add	r3, r2
 800fb12:	2200      	movs	r2, #0
 800fb14:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800fb16:	7bfb      	ldrb	r3, [r7, #15]
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	4413      	add	r3, r2
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800fb2e:	7bfa      	ldrb	r2, [r7, #15]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	322e      	adds	r2, #46	; 0x2e
 800fb34:	2100      	movs	r1, #0
 800fb36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800fb3a:	7bfa      	ldrb	r2, [r7, #15]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	3246      	adds	r2, #70	; 0x46
 800fb40:	2100      	movs	r1, #0
 800fb42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	73fb      	strb	r3, [r7, #15]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	785b      	ldrb	r3, [r3, #1]
 800fb50:	7bfa      	ldrb	r2, [r7, #15]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d3da      	bcc.n	800fb0c <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2208      	movs	r2, #8
 800fb62:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fb74:	461a      	mov	r2, r3
 800fb76:	2118      	movs	r1, #24
 800fb78:	2000      	movs	r0, #0
 800fb7a:	f7ff f9e8 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fb84:	461a      	mov	r2, r3
 800fb86:	2118      	movs	r1, #24
 800fb88:	2000      	movs	r0, #0
 800fb8a:	f7ff f9e0 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800fb94:	461a      	mov	r2, r3
 800fb96:	2118      	movs	r1, #24
 800fb98:	2000      	movs	r0, #0
 800fb9a:	f7ff f9d8 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800fba4:	461a      	mov	r2, r3
 800fba6:	2118      	movs	r1, #24
 800fba8:	2000      	movs	r0, #0
 800fbaa:	f7ff f9d0 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	2118      	movs	r1, #24
 800fbb8:	2000      	movs	r0, #0
 800fbba:	f7ff f9c8 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800fbbe:	bf00      	nop
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fbc6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fbca:	b090      	sub	sp, #64	; 0x40
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	61b9      	str	r1, [r7, #24]
 800fbd0:	617a      	str	r2, [r7, #20]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	83fb      	strh	r3, [r7, #30]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800fbee:	f04f 0200 	mov.w	r2, #0
 800fbf2:	f04f 0300 	mov.w	r3, #0
 800fbf6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800fc02:	2300      	movs	r3, #0
 800fc04:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800fc06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc08:	7a5a      	ldrb	r2, [r3, #9]
 800fc0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc0c:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800fc0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc10:	7a1a      	ldrb	r2, [r3, #8]
 800fc12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc14:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800fc16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc18:	7a9a      	ldrb	r2, [r3, #10]
 800fc1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc1c:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800fc1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc20:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fc24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc26:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800fc28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff f93c 	bl	800eeac <VL53L1_decode_vcsel_period>
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800fc38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc3a:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800fc3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fc42:	17da      	asrs	r2, r3, #31
 800fc44:	60bb      	str	r3, [r7, #8]
 800fc46:	60fa      	str	r2, [r7, #12]
 800fc48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fc4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800fc50:	8bfb      	ldrh	r3, [r7, #30]
 800fc52:	2200      	movs	r2, #0
 800fc54:	4698      	mov	r8, r3
 800fc56:	4691      	mov	r9, r2
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	fb08 f203 	mul.w	r2, r8, r3
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	fb09 f303 	mul.w	r3, r9, r3
 800fc64:	4413      	add	r3, r2
 800fc66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc68:	fba2 4508 	umull	r4, r5, r2, r8
 800fc6c:	442b      	add	r3, r5
 800fc6e:	461d      	mov	r5, r3
 800fc70:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800fc74:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800fc78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc7c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800fc80:	f143 0b00 	adc.w	fp, r3, #0
 800fc84:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800fc88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	da08      	bge.n	800fca2 <VL53L1_f_018+0xdc>
 800fc90:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fc94:	1851      	adds	r1, r2, r1
 800fc96:	6039      	str	r1, [r7, #0]
 800fc98:	f143 0300 	adc.w	r3, r3, #0
 800fc9c:	607b      	str	r3, [r7, #4]
 800fc9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fca2:	f04f 0000 	mov.w	r0, #0
 800fca6:	f04f 0100 	mov.w	r1, #0
 800fcaa:	0b10      	lsrs	r0, r2, #12
 800fcac:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800fcb0:	1319      	asrs	r1, r3, #12
 800fcb2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fcc0:	e062      	b.n	800fd88 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800fcc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcc6:	089b      	lsrs	r3, r3, #2
 800fcc8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800fccc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fcd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcd2:	4413      	add	r3, r2
 800fcd4:	7c9b      	ldrb	r3, [r3, #18]
 800fcd6:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800fcd8:	6a3b      	ldr	r3, [r7, #32]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	dd4f      	ble.n	800fd7e <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800fcde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fce0:	7a9b      	ldrb	r3, [r3, #10]
 800fce2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d20f      	bcs.n	800fd0a <VL53L1_f_018+0x144>
 800fcea:	7f7b      	ldrb	r3, [r7, #29]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00c      	beq.n	800fd0a <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800fcf0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcf6:	3206      	adds	r2, #6
 800fcf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfe:	441a      	add	r2, r3
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	fb02 f303 	mul.w	r3, r2, r3
 800fd06:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd08:	e004      	b.n	800fd14 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fd0a:	6a3b      	ldr	r3, [r7, #32]
 800fd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
 800fd12:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7fe fde1 	bl	800e8de <VL53L1_isqrt>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fd20:	6a3b      	ldr	r3, [r7, #32]
 800fd22:	0fda      	lsrs	r2, r3, #31
 800fd24:	4413      	add	r3, r2
 800fd26:	105b      	asrs	r3, r3, #1
 800fd28:	461a      	mov	r2, r3
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	4413      	add	r3, r2
 800fd2e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fd30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd32:	6a3b      	ldr	r3, [r7, #32]
 800fd34:	fb92 f3f3 	sdiv	r3, r2, r3
 800fd38:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3c:	69ba      	ldr	r2, [r7, #24]
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
 800fd42:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	3308      	adds	r3, #8
 800fd48:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	da00      	bge.n	800fd52 <VL53L1_f_018+0x18c>
 800fd50:	330f      	adds	r3, #15
 800fd52:	111b      	asrs	r3, r3, #4
 800fd54:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fd56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5a:	4413      	add	r3, r2
 800fd5c:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fd5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	da01      	bge.n	800fd6a <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fd6a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd70:	3216      	adds	r2, #22
 800fd72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fd78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd7c:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fd7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd82:	3301      	adds	r3, #1
 800fd84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd8a:	7a9b      	ldrb	r3, [r3, #10]
 800fd8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d396      	bcc.n	800fcc2 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fd94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd96:	2200      	movs	r2, #0
 800fd98:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fd9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd9c:	7a1b      	ldrb	r3, [r3, #8]
 800fd9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fda2:	e033      	b.n	800fe0c <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fda4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fda8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdaa:	3206      	adds	r2, #6
 800fdac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fdb0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fdb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdb6:	3116      	adds	r1, #22
 800fdb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	dd13      	ble.n	800fde8 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fdc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdc6:	4413      	add	r3, r2
 800fdc8:	2201      	movs	r2, #1
 800fdca:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fdcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdd2:	4413      	add	r3, r2
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fdda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fddc:	791b      	ldrb	r3, [r3, #4]
 800fdde:	3301      	adds	r3, #1
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fde4:	711a      	strb	r2, [r3, #4]
 800fde6:	e00c      	b.n	800fe02 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fde8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdee:	4413      	add	r3, r2
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800fdf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fdf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fdfa:	4413      	add	r3, r2
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fe02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fe06:	3301      	adds	r3, #1
 800fe08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fe0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe0e:	7a9b      	ldrb	r3, [r3, #10]
 800fe10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d3c5      	bcc.n	800fda4 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fe18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3740      	adds	r7, #64	; 0x40
 800fe20:	46bd      	mov	sp, r7
 800fe22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fe26 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe26:	b480      	push	{r7}
 800fe28:	b085      	sub	sp, #20
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fe46:	2300      	movs	r3, #0
 800fe48:	73fb      	strb	r3, [r7, #15]
 800fe4a:	e02d      	b.n	800fea8 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fe4c:	7bfb      	ldrb	r3, [r7, #15]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	78d2      	ldrb	r2, [r2, #3]
 800fe54:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe58:	fb01 f202 	mul.w	r2, r1, r2
 800fe5c:	1a9b      	subs	r3, r3, r2
 800fe5e:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	789b      	ldrb	r3, [r3, #2]
 800fe64:	7bfa      	ldrb	r2, [r7, #15]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d21b      	bcs.n	800fea2 <VL53L1_f_019+0x7c>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	789b      	ldrb	r3, [r3, #2]
 800fe6e:	7b3a      	ldrb	r2, [r7, #12]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d216      	bcs.n	800fea2 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe74:	7bfb      	ldrb	r3, [r7, #15]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	4413      	add	r3, r2
 800fe7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d10f      	bne.n	800fea2 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fe82:	7b3b      	ldrb	r3, [r7, #12]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	4413      	add	r3, r2
 800fe88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d108      	bne.n	800fea2 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d105      	bne.n	800fea2 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7bfa      	ldrb	r2, [r7, #15]
 800fe9a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fea2:	7bfb      	ldrb	r3, [r7, #15]
 800fea4:	3301      	adds	r3, #1
 800fea6:	73fb      	strb	r3, [r7, #15]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	78db      	ldrb	r3, [r3, #3]
 800feac:	7bfa      	ldrb	r2, [r7, #15]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d3cc      	bcc.n	800fe4c <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800feb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3714      	adds	r7, #20
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b085      	sub	sp, #20
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800feca:	2300      	movs	r3, #0
 800fecc:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fed6:	2300      	movs	r3, #0
 800fed8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fee0:	73fb      	strb	r3, [r7, #15]
 800fee2:	e05a      	b.n	800ff9a <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	78da      	ldrb	r2, [r3, #3]
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	fbb3 f1f2 	udiv	r1, r3, r2
 800feee:	fb01 f202 	mul.w	r2, r1, r2
 800fef2:	1a9b      	subs	r3, r3, r2
 800fef4:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	3301      	adds	r3, #1
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	78d2      	ldrb	r2, [r2, #3]
 800fefe:	fb93 f1f2 	sdiv	r1, r3, r2
 800ff02:	fb01 f202 	mul.w	r2, r1, r2
 800ff06:	1a9b      	subs	r3, r3, r2
 800ff08:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	789b      	ldrb	r3, [r3, #2]
 800ff0e:	7b7a      	ldrb	r2, [r7, #13]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d23f      	bcs.n	800ff94 <VL53L1_f_020+0xd2>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	789b      	ldrb	r3, [r3, #2]
 800ff18:	7b3a      	ldrb	r2, [r7, #12]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d23a      	bcs.n	800ff94 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800ff1e:	7b7b      	ldrb	r3, [r7, #13]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	4413      	add	r3, r2
 800ff24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d10e      	bne.n	800ff4a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800ff2c:	7b3b      	ldrb	r3, [r7, #12]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	4413      	add	r3, r2
 800ff32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d107      	bne.n	800ff4a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ff40:	3301      	adds	r3, #1
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d905      	bls.n	800ff66 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800ff66:	7b7b      	ldrb	r3, [r7, #13]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d009      	beq.n	800ff88 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800ff74:	7b7b      	ldrb	r3, [r7, #13]
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	4413      	add	r3, r2
 800ff80:	460a      	mov	r2, r1
 800ff82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff86:	e005      	b.n	800ff94 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800ff88:	7b7b      	ldrb	r3, [r7, #13]
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800ff94:	7bfb      	ldrb	r3, [r7, #15]
 800ff96:	3301      	adds	r3, #1
 800ff98:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800ff9a:	7bfa      	ldrb	r2, [r7, #15]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ffa2:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800ffa8:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	db9a      	blt.n	800fee4 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ffae:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	b087      	sub	sp, #28
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	78db      	ldrb	r3, [r3, #3]
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800ffe6:	7cbb      	ldrb	r3, [r7, #18]
 800ffe8:	085b      	lsrs	r3, r3, #1
 800ffea:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fff2:	75fb      	strb	r3, [r7, #23]
 800fff4:	e0a2      	b.n	801013c <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	78da      	ldrb	r2, [r3, #3]
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010000:	fb01 f202 	mul.w	r2, r1, r2
 8010004:	1a9b      	subs	r3, r3, r2
 8010006:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	3301      	adds	r3, #1
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	78d2      	ldrb	r2, [r2, #3]
 8010010:	fb93 f1f2 	sdiv	r1, r3, r2
 8010014:	fb01 f202 	mul.w	r2, r1, r2
 8010018:	1a9b      	subs	r3, r3, r2
 801001a:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	789b      	ldrb	r3, [r3, #2]
 8010020:	7d7a      	ldrb	r2, [r7, #21]
 8010022:	429a      	cmp	r2, r3
 8010024:	f080 8087 	bcs.w	8010136 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 801002c:	7d3a      	ldrb	r2, [r7, #20]
 801002e:	429a      	cmp	r2, r3
 8010030:	f080 8081 	bcs.w	8010136 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 8010034:	7d7b      	ldrb	r3, [r7, #21]
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	4413      	add	r3, r2
 801003a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801003e:	2b00      	cmp	r3, #0
 8010040:	d12f      	bne.n	80100a2 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 8010042:	7d3b      	ldrb	r3, [r7, #20]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4413      	add	r3, r2
 8010048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 801004c:	2b00      	cmp	r3, #0
 801004e:	d028      	beq.n	80100a2 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 8010050:	7d3b      	ldrb	r3, [r7, #20]
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	4413      	add	r3, r2
 8010056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801005a:	3b01      	subs	r3, #1
 801005c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010064:	7cfa      	ldrb	r2, [r7, #19]
 8010066:	429a      	cmp	r2, r3
 8010068:	d21b      	bcs.n	80100a2 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801006a:	7cfa      	ldrb	r2, [r7, #19]
 801006c:	4613      	mov	r3, r2
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	4413      	add	r3, r2
 8010072:	009b      	lsls	r3, r3, #2
 8010074:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	4413      	add	r3, r2
 801007c:	3304      	adds	r3, #4
 801007e:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	7dfa      	ldrb	r2, [r7, #23]
 8010084:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	3301      	adds	r3, #1
 801008a:	b2da      	uxtb	r2, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	22ff      	movs	r2, #255	; 0xff
 8010094:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	2200      	movs	r2, #0
 80100a0:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 80100a2:	7d7b      	ldrb	r3, [r7, #21]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	4413      	add	r3, r2
 80100a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d042      	beq.n	8010136 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 80100b0:	7d3b      	ldrb	r3, [r7, #20]
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	4413      	add	r3, r2
 80100b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d13b      	bne.n	8010136 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 80100be:	7d7b      	ldrb	r3, [r7, #21]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	4413      	add	r3, r2
 80100c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100c8:	3b01      	subs	r3, #1
 80100ca:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80100d2:	7cfa      	ldrb	r2, [r7, #19]
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d22e      	bcs.n	8010136 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80100d8:	7cfa      	ldrb	r2, [r7, #19]
 80100da:	4613      	mov	r3, r2
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	4413      	add	r3, r2
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	4413      	add	r3, r2
 80100ea:	3304      	adds	r3, #4
 80100ec:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	7dfa      	ldrb	r2, [r7, #23]
 80100f2:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
 80100f6:	3301      	adds	r3, #1
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	b2db      	uxtb	r3, r3
 801010a:	3301      	adds	r3, #1
 801010c:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	b2db      	uxtb	r3, r3
 801011e:	3301      	adds	r3, #1
 8010120:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	799b      	ldrb	r3, [r3, #6]
 801012a:	7cba      	ldrb	r2, [r7, #18]
 801012c:	429a      	cmp	r2, r3
 801012e:	d202      	bcs.n	8010136 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	7cba      	ldrb	r2, [r7, #18]
 8010134:	719a      	strb	r2, [r3, #6]
		blb++) {
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	3301      	adds	r3, #1
 801013a:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 801013c:	7dfa      	ldrb	r2, [r7, #23]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010144:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 801014a:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 801014c:	429a      	cmp	r2, r3
 801014e:	f6ff af52 	blt.w	800fff6 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010152:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 8010156:	4618      	mov	r0, r3
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b090      	sub	sp, #64	; 0x40
 8010166:	af00      	add	r7, sp, #0
 8010168:	4603      	mov	r3, r0
 801016a:	6039      	str	r1, [r7, #0]
 801016c:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801016e:	2300      	movs	r3, #0
 8010170:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 8010174:	f107 030c 	add.w	r3, r7, #12
 8010178:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 8010180:	2301      	movs	r3, #1
 8010182:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801018c:	2b01      	cmp	r3, #1
 801018e:	d965      	bls.n	801025c <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 8010190:	e05f      	b.n	8010252 <VL53L1_f_028+0xf0>

		swapped = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 8010198:	2301      	movs	r3, #1
 801019a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801019e:	e051      	b.n	8010244 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 80101a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80101a4:	1e5a      	subs	r2, r3, #1
 80101a6:	4613      	mov	r3, r2
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	4413      	add	r3, r2
 80101ac:	009b      	lsls	r3, r3, #2
 80101ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	4413      	add	r3, r2
 80101b6:	3304      	adds	r3, #4
 80101b8:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80101ba:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80101be:	4613      	mov	r3, r2
 80101c0:	00db      	lsls	r3, r3, #3
 80101c2:	4413      	add	r3, r2
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	4413      	add	r3, r2
 80101ce:	3304      	adds	r3, #4
 80101d0:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d118      	bne.n	801020a <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 80101d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101da:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 80101dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101de:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 80101e0:	429a      	cmp	r2, r3
 80101e2:	da2a      	bge.n	801023a <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 80101e4:	2224      	movs	r2, #36	; 0x24
 80101e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101ea:	f009 faed 	bl	80197c8 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 80101ee:	2224      	movs	r2, #36	; 0x24
 80101f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101f4:	f009 fae8 	bl	80197c8 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 80101f8:	2224      	movs	r2, #36	; 0x24
 80101fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80101fe:	f009 fae3 	bl	80197c8 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010202:	2301      	movs	r3, #1
 8010204:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010208:	e017      	b.n	801023a <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 801020a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020c:	699a      	ldr	r2, [r3, #24]
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	429a      	cmp	r2, r3
 8010214:	d911      	bls.n	801023a <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010216:	2224      	movs	r2, #36	; 0x24
 8010218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801021a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801021c:	f009 fad4 	bl	80197c8 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010220:	2224      	movs	r2, #36	; 0x24
 8010222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010226:	f009 facf 	bl	80197c8 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 801022a:	2224      	movs	r2, #36	; 0x24
 801022c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801022e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010230:	f009 faca 	bl	80197c8 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010234:	2301      	movs	r3, #1
 8010236:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 801023a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801023e:	3301      	adds	r3, #1
 8010240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801024a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801024e:	429a      	cmp	r2, r3
 8010250:	d3a6      	bcc.n	80101a0 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8010252:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010256:	2b00      	cmp	r3, #0
 8010258:	d19b      	bne.n	8010192 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 801025a:	e000      	b.n	801025e <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 801025c:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 801025e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8010262:	4618      	mov	r0, r3
 8010264:	3740      	adds	r7, #64	; 0x40
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}

0801026a <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801026a:	b480      	push	{r7}
 801026c:	b087      	sub	sp, #28
 801026e:	af00      	add	r7, sp, #0
 8010270:	4603      	mov	r3, r0
 8010272:	60b9      	str	r1, [r7, #8]
 8010274:	607a      	str	r2, [r7, #4]
 8010276:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010278:	2300      	movs	r3, #0
 801027a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801027c:	2300      	movs	r3, #0
 801027e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010280:	2300      	movs	r3, #0
 8010282:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010284:	7bfa      	ldrb	r2, [r7, #15]
 8010286:	4613      	mov	r3, r2
 8010288:	00db      	lsls	r3, r3, #3
 801028a:	4413      	add	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	4413      	add	r3, r2
 8010296:	3304      	adds	r3, #4
 8010298:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2200      	movs	r2, #0
 801029e:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2200      	movs	r2, #0
 80102a4:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	75fb      	strb	r3, [r7, #23]
 80102ac:	e01c      	b.n	80102e8 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	78da      	ldrb	r2, [r3, #3]
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80102b8:	fb01 f202 	mul.w	r2, r1, r2
 80102bc:	1a9b      	subs	r3, r3, r2
 80102be:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	68da      	ldr	r2, [r3, #12]
 80102c4:	7d79      	ldrb	r1, [r7, #21]
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	3106      	adds	r1, #6
 80102ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102ce:	441a      	add	r2, r3
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	689a      	ldr	r2, [r3, #8]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	441a      	add	r2, r3
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80102e2:	7dfb      	ldrb	r3, [r7, #23]
 80102e4:	3301      	adds	r3, #1
 80102e6:	75fb      	strb	r3, [r7, #23]
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	791b      	ldrb	r3, [r3, #4]
 80102ec:	7dfa      	ldrb	r2, [r7, #23]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d9dd      	bls.n	80102ae <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	68da      	ldr	r2, [r3, #12]
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8010300:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010304:	4618      	mov	r0, r3
 8010306:	371c      	adds	r7, #28
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr

08010310 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010310:	b590      	push	{r4, r7, lr}
 8010312:	b08d      	sub	sp, #52	; 0x34
 8010314:	af02      	add	r7, sp, #8
 8010316:	60ba      	str	r2, [r7, #8]
 8010318:	607b      	str	r3, [r7, #4]
 801031a:	4603      	mov	r3, r0
 801031c:	73fb      	strb	r3, [r7, #15]
 801031e:	460b      	mov	r3, r1
 8010320:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010322:	2300      	movs	r3, #0
 8010324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8010328:	2300      	movs	r3, #0
 801032a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 801032e:	2300      	movs	r3, #0
 8010330:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 8010336:	2300      	movs	r3, #0
 8010338:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801033e:	7bfa      	ldrb	r2, [r7, #15]
 8010340:	4613      	mov	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	4413      	add	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	4413      	add	r3, r2
 8010350:	3304      	adds	r3, #4
 8010352:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	789b      	ldrb	r3, [r3, #2]
 8010358:	2bff      	cmp	r3, #255	; 0xff
 801035a:	d102      	bne.n	8010362 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	2201      	movs	r2, #1
 8010360:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	789b      	ldrb	r3, [r3, #2]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	78d2      	ldrb	r2, [r2, #3]
 801036a:	fbb3 f1f2 	udiv	r1, r3, r2
 801036e:	fb01 f202 	mul.w	r2, r1, r2
 8010372:	1a9b      	subs	r3, r3, r2
 8010374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8010378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801037c:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	b29a      	uxth	r2, r3
 8010384:	8c3b      	ldrh	r3, [r7, #32]
 8010386:	4413      	add	r3, r2
 8010388:	b29b      	uxth	r3, r3
 801038a:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 801038c:	8c3a      	ldrh	r2, [r7, #32]
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	789b      	ldrb	r3, [r3, #2]
 8010392:	b29b      	uxth	r3, r3
 8010394:	1ad3      	subs	r3, r2, r3
 8010396:	b29b      	uxth	r3, r3
 8010398:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 801039a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801039e:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	791b      	ldrb	r3, [r3, #4]
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	8bfb      	ldrh	r3, [r7, #30]
 80103a8:	4413      	add	r3, r2
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80103ae:	8bfa      	ldrh	r2, [r7, #30]
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	789b      	ldrb	r3, [r3, #2]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80103bc:	8bfa      	ldrh	r2, [r7, #30]
 80103be:	8c3b      	ldrh	r3, [r7, #32]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80103c6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	dd01      	ble.n	80103d2 <VL53L1_f_027+0xc2>
		window_width = 3;
 80103ce:	2303      	movs	r3, #3
 80103d0:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80103d2:	8c3a      	ldrh	r2, [r7, #32]
 80103d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80103d6:	4413      	add	r3, r2
 80103d8:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80103da:	b219      	sxth	r1, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	78da      	ldrb	r2, [r3, #3]
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	3314      	adds	r3, #20
 80103e4:	7bbc      	ldrb	r4, [r7, #14]
 80103e6:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80103ea:	9301      	str	r3, [sp, #4]
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	4623      	mov	r3, r4
 80103f2:	f000 f846 	bl	8010482 <VL53L1_f_030>
 80103f6:	4603      	mov	r3, r0
 80103f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 80103fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010400:	2b00      	cmp	r3, #0
 8010402:	d114      	bne.n	801042e <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8010404:	8bfa      	ldrh	r2, [r7, #30]
 8010406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 801040c:	b218      	sxth	r0, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	78da      	ldrb	r2, [r3, #3]
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	331c      	adds	r3, #28
 8010416:	7bbc      	ldrb	r4, [r7, #14]
 8010418:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 801041c:	9301      	str	r3, [sp, #4]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	4623      	mov	r3, r4
 8010424:	f000 f82d 	bl	8010482 <VL53L1_f_030>
 8010428:	4603      	mov	r3, r0
 801042a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	695a      	ldr	r2, [r3, #20]
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	69db      	ldr	r3, [r3, #28]
 8010436:	429a      	cmp	r2, r3
 8010438:	d909      	bls.n	801044e <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	69da      	ldr	r2, [r3, #28]
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	69ba      	ldr	r2, [r7, #24]
 801044c:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	699a      	ldr	r2, [r3, #24]
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	429a      	cmp	r2, r3
 8010458:	d203      	bcs.n	8010462 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	699a      	ldr	r2, [r3, #24]
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	699a      	ldr	r2, [r3, #24]
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	69db      	ldr	r3, [r3, #28]
 801046a:	429a      	cmp	r2, r3
 801046c:	d903      	bls.n	8010476 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	699a      	ldr	r2, [r3, #24]
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8010476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801047a:	4618      	mov	r0, r3
 801047c:	372c      	adds	r7, #44	; 0x2c
 801047e:	46bd      	mov	sp, r7
 8010480:	bd90      	pop	{r4, r7, pc}

08010482 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 8010482:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010486:	b09d      	sub	sp, #116	; 0x74
 8010488:	af00      	add	r7, sp, #0
 801048a:	461c      	mov	r4, r3
 801048c:	4603      	mov	r3, r0
 801048e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010492:	460b      	mov	r3, r1
 8010494:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010498:	4613      	mov	r3, r2
 801049a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801049e:	4623      	mov	r3, r4
 80104a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80104a4:	2300      	movs	r3, #0
 80104a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	f04f 0300 	mov.w	r3, #0
 80104be:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80104c2:	f04f 0200 	mov.w	r2, #0
 80104c6:	f04f 0300 	mov.w	r3, #0
 80104ca:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	f04f 0300 	mov.w	r3, #0
 80104d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80104da:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80104de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104e2:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 80104e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 809c 	beq.w	8010626 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 80104ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80104f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80104f6:	e08f      	b.n	8010618 <VL53L1_f_030+0x196>

		if (lb < 0)
 80104f8:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	da09      	bge.n	8010514 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8010500:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010504:	b29a      	uxth	r2, r3
 8010506:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801050a:	4413      	add	r3, r2
 801050c:	b29b      	uxth	r3, r3
 801050e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010512:	e00a      	b.n	801052a <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8010514:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8010518:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801051c:	fb91 f3f2 	sdiv	r3, r1, r2
 8010520:	fb02 f303 	mul.w	r3, r2, r3
 8010524:	1acb      	subs	r3, r1, r3
 8010526:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 801052a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801052e:	2b00      	cmp	r3, #0
 8010530:	db6b      	blt.n	801060a <VL53L1_f_030+0x188>
 8010532:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010536:	2b17      	cmp	r3, #23
 8010538:	dc67      	bgt.n	801060a <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 801053a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801053e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010542:	3306      	adds	r3, #6
 8010544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010548:	17da      	asrs	r2, r3, #31
 801054a:	633b      	str	r3, [r7, #48]	; 0x30
 801054c:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 801054e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010552:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010556:	17da      	asrs	r2, r3, #31
 8010558:	62bb      	str	r3, [r7, #40]	; 0x28
 801055a:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 801055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010562:	4602      	mov	r2, r0
 8010564:	1a9b      	subs	r3, r3, r2
 8010566:	623b      	str	r3, [r7, #32]
 8010568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056a:	460a      	mov	r2, r1
 801056c:	eb63 0302 	sbc.w	r3, r3, r2
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
 8010572:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010576:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801057a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801057e:	2b00      	cmp	r3, #0
 8010580:	d009      	beq.n	8010596 <VL53L1_f_030+0x114>
 8010582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010586:	2b00      	cmp	r3, #0
 8010588:	da05      	bge.n	8010596 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 801058a:	f04f 0200 	mov.w	r2, #0
 801058e:	f04f 0300 	mov.w	r3, #0
 8010592:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 8010596:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801059a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801059e:	1884      	adds	r4, r0, r2
 80105a0:	61bc      	str	r4, [r7, #24]
 80105a2:	eb41 0303 	adc.w	r3, r1, r3
 80105a6:	61fb      	str	r3, [r7, #28]
 80105a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80105ac:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80105b0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80105b4:	17da      	asrs	r2, r3, #31
 80105b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80105b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80105ba:	f04f 0200 	mov.w	r2, #0
 80105be:	f04f 0300 	mov.w	r3, #0
 80105c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105c4:	02cb      	lsls	r3, r1, #11
 80105c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105c8:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80105cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105ce:	02ca      	lsls	r2, r1, #11
 80105d0:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80105d4:	f143 0600 	adc.w	r6, r3, #0
 80105d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105da:	fb06 f203 	mul.w	r2, r6, r3
 80105de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105e0:	fb05 f303 	mul.w	r3, r5, r3
 80105e4:	441a      	add	r2, r3
 80105e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105e8:	fba3 ab05 	umull	sl, fp, r3, r5
 80105ec:	eb02 030b 	add.w	r3, r2, fp
 80105f0:	469b      	mov	fp, r3
			weighted_sum +=
 80105f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80105f6:	eb12 010a 	adds.w	r1, r2, sl
 80105fa:	6139      	str	r1, [r7, #16]
 80105fc:	eb43 030b 	adc.w	r3, r3, fp
 8010600:	617b      	str	r3, [r7, #20]
 8010602:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010606:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801060a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801060e:	b29b      	uxth	r3, r3
 8010610:	3301      	adds	r3, #1
 8010612:	b29b      	uxth	r3, r3
 8010614:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010618:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 801061c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010620:	429a      	cmp	r2, r3
 8010622:	f77f af69 	ble.w	80104f8 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 8010626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801062a:	2a01      	cmp	r2, #1
 801062c:	f173 0300 	sbcs.w	r3, r3, #0
 8010630:	db3b      	blt.n	80106aa <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8010632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010636:	0fd9      	lsrs	r1, r3, #31
 8010638:	2000      	movs	r0, #0
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	60f8      	str	r0, [r7, #12]
 801063e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010642:	4621      	mov	r1, r4
 8010644:	eb11 0802 	adds.w	r8, r1, r2
 8010648:	4629      	mov	r1, r5
 801064a:	eb41 0903 	adc.w	r9, r1, r3
 801064e:	f04f 0200 	mov.w	r2, #0
 8010652:	f04f 0300 	mov.w	r3, #0
 8010656:	ea4f 0258 	mov.w	r2, r8, lsr #1
 801065a:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 801065e:	ea4f 0369 	mov.w	r3, r9, asr #1
 8010662:	4610      	mov	r0, r2
 8010664:	4619      	mov	r1, r3
 8010666:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801066a:	1814      	adds	r4, r2, r0
 801066c:	603c      	str	r4, [r7, #0]
 801066e:	414b      	adcs	r3, r1
 8010670:	607b      	str	r3, [r7, #4]
 8010672:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010676:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801067a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801067e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010682:	f7ef fdcd 	bl	8000220 <__aeabi_ldivmod>
 8010686:	4602      	mov	r2, r0
 8010688:	460b      	mov	r3, r1
 801068a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 801068e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010692:	2b00      	cmp	r3, #0
 8010694:	da05      	bge.n	80106a2 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 8010696:	f04f 0200 	mov.w	r2, #0
 801069a:	f04f 0300 	mov.w	r3, #0
 801069e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 80106a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80106a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80106a8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80106aa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3774      	adds	r7, #116	; 0x74
 80106b2:	46bd      	mov	sp, r7
 80106b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106b8 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60b9      	str	r1, [r7, #8]
 80106c0:	607a      	str	r2, [r7, #4]
 80106c2:	603b      	str	r3, [r7, #0]
 80106c4:	4603      	mov	r3, r0
 80106c6:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80106c8:	2300      	movs	r3, #0
 80106ca:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80106d0:	2300      	movs	r3, #0
 80106d2:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80106d4:	7bfa      	ldrb	r2, [r7, #15]
 80106d6:	4613      	mov	r3, r2
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	4413      	add	r3, r2
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	4413      	add	r3, r2
 80106e6:	3304      	adds	r3, #4
 80106e8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 80106ea:	22ac      	movs	r2, #172	; 0xac
 80106ec:	68b9      	ldr	r1, [r7, #8]
 80106ee:	6a38      	ldr	r0, [r7, #32]
 80106f0:	f009 f86a 	bl	80197c8 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80106fa:	75fb      	strb	r3, [r7, #23]
 80106fc:	e020      	b.n	8010740 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	7dfa      	ldrb	r2, [r7, #23]
 8010704:	429a      	cmp	r2, r3
 8010706:	d304      	bcc.n	8010712 <VL53L1_f_023+0x5a>
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	791b      	ldrb	r3, [r3, #4]
 801070c:	7dfa      	ldrb	r2, [r7, #23]
 801070e:	429a      	cmp	r2, r3
 8010710:	d913      	bls.n	801073a <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	78da      	ldrb	r2, [r3, #3]
 8010716:	7dfb      	ldrb	r3, [r7, #23]
 8010718:	fbb3 f1f2 	udiv	r1, r3, r2
 801071c:	fb01 f202 	mul.w	r2, r1, r2
 8010720:	1a9b      	subs	r3, r3, r2
 8010722:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	7a9b      	ldrb	r3, [r3, #10]
 8010728:	7d7a      	ldrb	r2, [r7, #21]
 801072a:	429a      	cmp	r2, r3
 801072c:	d205      	bcs.n	801073a <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 801072e:	7d7a      	ldrb	r2, [r7, #21]
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	3206      	adds	r2, #6
 8010734:	6839      	ldr	r1, [r7, #0]
 8010736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801073a:	7dfb      	ldrb	r3, [r7, #23]
 801073c:	3301      	adds	r3, #1
 801073e:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010740:	7dfa      	ldrb	r2, [r7, #23]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010748:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 801074e:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010750:	429a      	cmp	r2, r3
 8010752:	dbd4      	blt.n	80106fe <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010754:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3718      	adds	r7, #24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	b096      	sub	sp, #88	; 0x58
 8010766:	af08      	add	r7, sp, #32
 8010768:	4604      	mov	r4, r0
 801076a:	4608      	mov	r0, r1
 801076c:	4611      	mov	r1, r2
 801076e:	461a      	mov	r2, r3
 8010770:	4623      	mov	r3, r4
 8010772:	73fb      	strb	r3, [r7, #15]
 8010774:	4603      	mov	r3, r0
 8010776:	73bb      	strb	r3, [r7, #14]
 8010778:	460b      	mov	r3, r1
 801077a:	737b      	strb	r3, [r7, #13]
 801077c:	4613      	mov	r3, r2
 801077e:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 8010780:	2300      	movs	r3, #0
 8010782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 8010786:	2300      	movs	r3, #0
 8010788:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80107a2:	2300      	movs	r3, #0
 80107a4:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80107ae:	2300      	movs	r3, #0
 80107b0:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80107b2:	7b7b      	ldrb	r3, [r7, #13]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d106      	bne.n	80107c6 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80107b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107be:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80107c0:	f06f 030e 	mvn.w	r3, #14
 80107c4:	e06f      	b.n	80108a6 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80107c6:	7bfb      	ldrb	r3, [r7, #15]
 80107c8:	7b7a      	ldrb	r2, [r7, #13]
 80107ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80107ce:	fb01 f202 	mul.w	r2, r1, r2
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80107d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80107dc:	7b39      	ldrb	r1, [r7, #12]
 80107de:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 80107e2:	f107 0320 	add.w	r3, r7, #32
 80107e6:	9301      	str	r3, [sp, #4]
 80107e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	4613      	mov	r3, r2
 80107f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107f2:	f000 fddb 	bl	80113ac <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 80107f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80107fa:	7b39      	ldrb	r1, [r7, #12]
 80107fc:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010804:	9301      	str	r3, [sp, #4]
 8010806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	4613      	mov	r3, r2
 801080e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010810:	f000 fdcc 	bl	80113ac <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010814:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00e      	beq.n	801083a <VL53L1_f_026+0xda>
		VL53L1_f_013(
 801081c:	f107 021c 	add.w	r2, r7, #28
 8010820:	7b39      	ldrb	r1, [r7, #12]
 8010822:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010826:	f107 0314 	add.w	r3, r7, #20
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	f107 0318 	add.w	r3, r7, #24
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	4613      	mov	r3, r2
 8010834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010836:	f000 fdb9 	bl	80113ac <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	469c      	mov	ip, r3
 801083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010840:	469e      	mov	lr, r3
 8010842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010844:	4698      	mov	r8, r3
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	4619      	mov	r1, r3
 801084a:	6a3b      	ldr	r3, [r7, #32]
 801084c:	461c      	mov	r4, r3
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	461d      	mov	r5, r3
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	461e      	mov	r6, r3
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 801085a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801085c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010860:	607b      	str	r3, [r7, #4]
 8010862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010864:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010868:	7bb8      	ldrb	r0, [r7, #14]
 801086a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801086c:	9207      	str	r2, [sp, #28]
 801086e:	9306      	str	r3, [sp, #24]
 8010870:	687a      	ldr	r2, [r7, #4]
 8010872:	9205      	str	r2, [sp, #20]
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	9304      	str	r3, [sp, #16]
 8010878:	9603      	str	r6, [sp, #12]
 801087a:	9502      	str	r5, [sp, #8]
 801087c:	9401      	str	r4, [sp, #4]
 801087e:	9100      	str	r1, [sp, #0]
 8010880:	4643      	mov	r3, r8
 8010882:	4672      	mov	r2, lr
 8010884:	4661      	mov	r1, ip
 8010886:	f002 ff30 	bl	80136ea <VL53L1_f_014>
 801088a:	4603      	mov	r3, r0
 801088c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 8010890:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8010894:	f113 0f0f 	cmn.w	r3, #15
 8010898:	d103      	bne.n	80108a2 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 801089a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108a0:	801a      	strh	r2, [r3, #0]


	return status;
 80108a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3738      	adds	r7, #56	; 0x38
 80108aa:	46bd      	mov	sp, r7
 80108ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108b0 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80108b0:	b490      	push	{r4, r7}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	4608      	mov	r0, r1
 80108ba:	4611      	mov	r1, r2
 80108bc:	461a      	mov	r2, r3
 80108be:	4623      	mov	r3, r4
 80108c0:	71fb      	strb	r3, [r7, #7]
 80108c2:	4603      	mov	r3, r0
 80108c4:	71bb      	strb	r3, [r7, #6]
 80108c6:	460b      	mov	r3, r1
 80108c8:	717b      	strb	r3, [r7, #5]
 80108ca:	4613      	mov	r3, r2
 80108cc:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	79fa      	ldrb	r2, [r7, #7]
 80108da:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80108dc:	6a3b      	ldr	r3, [r7, #32]
 80108de:	2200      	movs	r2, #0
 80108e0:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	781a      	ldrb	r2, [r3, #0]
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	785a      	ldrb	r2, [r3, #1]
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	789a      	ldrb	r2, [r3, #2]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 80108fa:	69fb      	ldr	r3, [r7, #28]
 80108fc:	78da      	ldrb	r2, [r3, #3]
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	791a      	ldrb	r2, [r3, #4]
 8010906:	6a3b      	ldr	r3, [r7, #32]
 8010908:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	795a      	ldrb	r2, [r3, #5]
 801090e:	6a3b      	ldr	r3, [r7, #32]
 8010910:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	791a      	ldrb	r2, [r3, #4]
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	b2db      	uxtb	r3, r3
 801091e:	3301      	adds	r3, #1
 8010920:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 801092c:	6a3b      	ldr	r3, [r7, #32]
 801092e:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	8c1a      	ldrh	r2, [r3, #32]
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	695b      	ldr	r3, [r3, #20]
 801093c:	b29a      	uxth	r2, r3
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	b29a      	uxth	r2, r3
 8010948:	6a3b      	ldr	r3, [r7, #32]
 801094a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	69db      	ldr	r3, [r3, #28]
 8010952:	b29a      	uxth	r2, r3
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	461a      	mov	r2, r3
 8010960:	6a3b      	ldr	r3, [r7, #32]
 8010962:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	691a      	ldr	r2, [r3, #16]
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	461a      	mov	r2, r3
 8010972:	6a3b      	ldr	r3, [r7, #32]
 8010974:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	2213      	movs	r2, #19
 8010984:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 8010988:	887b      	ldrh	r3, [r7, #2]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	8c1b      	ldrh	r3, [r3, #32]
 8010992:	461a      	mov	r2, r3
 8010994:	887b      	ldrh	r3, [r7, #2]
 8010996:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 8010998:	429a      	cmp	r2, r3
 801099a:	d903      	bls.n	80109a4 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	2206      	movs	r2, #6
 80109a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80109a4:	79bb      	ldrb	r3, [r7, #6]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	021b      	lsls	r3, r3, #8
 80109aa:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	8a9b      	ldrh	r3, [r3, #20]
 80109b0:	89fa      	ldrh	r2, [r7, #14]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d205      	bcs.n	80109c2 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80109b6:	6a3b      	ldr	r3, [r7, #32]
 80109b8:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80109ba:	89fb      	ldrh	r3, [r7, #14]
 80109bc:	1ad3      	subs	r3, r2, r3
 80109be:	81fb      	strh	r3, [r7, #14]
 80109c0:	e001      	b.n	80109c6 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80109c6:	797b      	ldrb	r3, [r7, #5]
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	021b      	lsls	r3, r3, #8
 80109cc:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80109d4:	89bb      	ldrh	r3, [r7, #12]
 80109d6:	4413      	add	r3, r2
 80109d8:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80109e0:	89fa      	ldrh	r2, [r7, #14]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d805      	bhi.n	80109f2 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 80109e6:	6a3b      	ldr	r3, [r7, #32]
 80109e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80109ec:	89ba      	ldrh	r2, [r7, #12]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d203      	bcs.n	80109fa <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	2205      	movs	r2, #5
 80109f6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 80109fa:	bf00      	nop
 80109fc:	3710      	adds	r7, #16
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bc90      	pop	{r4, r7}
 8010a02:	4770      	bx	lr

08010a04 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a06:	b08f      	sub	sp, #60	; 0x3c
 8010a08:	af06      	add	r7, sp, #24
 8010a0a:	60f8      	str	r0, [r7, #12]
 8010a0c:	60b9      	str	r1, [r7, #8]
 8010a0e:	607a      	str	r2, [r7, #4]
 8010a10:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010a12:	2300      	movs	r3, #0
 8010a14:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8010a16:	2300      	movs	r3, #0
 8010a18:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 8010a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a1c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a20:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010a22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a24:	f7ff f856 	bl	800fad4 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8010a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010a2e:	22ac      	movs	r2, #172	; 0xac
 8010a30:	6839      	ldr	r1, [r7, #0]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f008 fec8 	bl	80197c8 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	781a      	ldrb	r2, [r3, #0]
 8010a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a3e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	785a      	ldrb	r2, [r3, #1]
 8010a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a46:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	789a      	ldrb	r2, [r3, #2]
 8010a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a4e:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8010a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a58:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 8010a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a62:	2204      	movs	r2, #4
 8010a64:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8010a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a68:	2200      	movs	r2, #0
 8010a6a:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	77bb      	strb	r3, [r7, #30]
 8010a70:	e008      	b.n	8010a84 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8010a72:	7fbb      	ldrb	r3, [r7, #30]
 8010a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	4413      	add	r3, r2
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 8010a7e:	7fbb      	ldrb	r3, [r7, #30]
 8010a80:	3301      	adds	r3, #1
 8010a82:	77bb      	strb	r3, [r7, #30]
 8010a84:	7fbb      	ldrb	r3, [r7, #30]
 8010a86:	2b04      	cmp	r3, #4
 8010a88:	d9f3      	bls.n	8010a72 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 8010a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a8c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fd ff58 	bl	800e946 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	f7fd ff8e 	bl	800e9c6 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 8010aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fe fb66 	bl	800f182 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fd fffc 	bl	800eaba <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d009      	beq.n	8010ae0 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8010acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ace:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ad4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010ad8:	461a      	mov	r2, r3
 8010ada:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010adc:	f000 fdae 	bl	801163c <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010ae8:	2300      	movs	r3, #0
 8010aea:	77bb      	strb	r3, [r7, #30]
 8010aec:	e01e      	b.n	8010b2c <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8010aee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d117      	bne.n	8010b26 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8010af6:	7fbb      	ldrb	r3, [r7, #30]
 8010af8:	68ba      	ldr	r2, [r7, #8]
 8010afa:	3304      	adds	r3, #4
 8010afc:	005b      	lsls	r3, r3, #1
 8010afe:	4413      	add	r3, r2
 8010b00:	8898      	ldrh	r0, [r3, #4]
 8010b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b04:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010b08:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b0e:	4413      	add	r3, r2
 8010b10:	3304      	adds	r3, #4
 8010b12:	9301      	str	r3, [sp, #4]
 8010b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	460b      	mov	r3, r1
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	68f9      	ldr	r1, [r7, #12]
 8010b1e:	f7fe fb7b 	bl	800f218 <VL53L1_f_001>
 8010b22:	4603      	mov	r3, r0
 8010b24:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010b26:	7fbb      	ldrb	r3, [r7, #30]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	77bb      	strb	r3, [r7, #30]
 8010b2c:	7fbb      	ldrb	r3, [r7, #30]
 8010b2e:	2b04      	cmp	r3, #4
 8010b30:	d9dd      	bls.n	8010aee <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d11a      	bne.n	8010b70 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010b42:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b56:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8010b5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b5c:	9102      	str	r1, [sp, #8]
 8010b5e:	9201      	str	r2, [sp, #4]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	462b      	mov	r3, r5
 8010b64:	4622      	mov	r2, r4
 8010b66:	4631      	mov	r1, r6
 8010b68:	f7ff f82d 	bl	800fbc6 <VL53L1_f_018>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d104      	bne.n	8010b82 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8010b78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b7a:	f7ff f954 	bl	800fe26 <VL53L1_f_019>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8010b8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b8c:	f7ff f999 	bl	800fec2 <VL53L1_f_020>
 8010b90:	4603      	mov	r3, r0
 8010b92:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d104      	bne.n	8010ba6 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010b9e:	f7ff fa0e 	bl	800ffbe <VL53L1_f_021>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	77bb      	strb	r3, [r7, #30]
 8010baa:	e0a6      	b.n	8010cfa <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010bac:	7fba      	ldrb	r2, [r7, #30]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bbc:	4413      	add	r3, r2
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8010bc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d109      	bne.n	8010bde <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8010bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bcc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010bd0:	7fbb      	ldrb	r3, [r7, #30]
 8010bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff fb48 	bl	801026a <VL53L1_f_022>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8010bde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d110      	bne.n	8010c08 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8010be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be8:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bf4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010bf8:	7fb8      	ldrb	r0, [r7, #30]
 8010bfa:	9300      	str	r3, [sp, #0]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c00:	f7ff fd5a 	bl	80106b8 <VL53L1_f_023>
 8010c04:	4603      	mov	r3, r0
 8010c06:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010c08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d10d      	bne.n	8010c2c <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c12:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c18:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010c1c:	7fb8      	ldrb	r0, [r7, #30]
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	2300      	movs	r3, #0
 8010c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c24:	f7ff fd48 	bl	80106b8 <VL53L1_f_023>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010c2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10d      	bne.n	8010c50 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c36:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c3c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010c40:	7fb8      	ldrb	r0, [r7, #30]
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	2300      	movs	r3, #0
 8010c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c48:	f7ff fd36 	bl	80106b8 <VL53L1_f_023>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d109      	bne.n	8010c6c <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c5a:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010c5e:	7fb8      	ldrb	r0, [r7, #30]
 8010c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c64:	f000 f8dd 	bl	8010e22 <VL53L1_f_034>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d108      	bne.n	8010c86 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8a19      	ldrh	r1, [r3, #16]
 8010c78:	7fb8      	ldrb	r0, [r7, #30]
 8010c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c7e:	f000 f95c 	bl	8010f3a <VL53L1_f_035>
 8010c82:	4603      	mov	r3, r0
 8010c84:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8010c86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d124      	bne.n	8010cd8 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	789d      	ldrb	r5, [r3, #2]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	7e1e      	ldrb	r6, [r3, #24]
 8010c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c98:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010caa:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cb0:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010cb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010cb6:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8010cba:	697c      	ldr	r4, [r7, #20]
 8010cbc:	3420      	adds	r4, #32
 8010cbe:	9404      	str	r4, [sp, #16]
 8010cc0:	9003      	str	r0, [sp, #12]
 8010cc2:	9102      	str	r1, [sp, #8]
 8010cc4:	9201      	str	r2, [sp, #4]
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4673      	mov	r3, lr
 8010cca:	4662      	mov	r2, ip
 8010ccc:	4631      	mov	r1, r6
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f7ff fd46 	bl	8010760 <VL53L1_f_026>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8010cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d109      	bne.n	8010cf4 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce2:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8010ce6:	7fb8      	ldrb	r0, [r7, #30]
 8010ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cea:	2101      	movs	r1, #1
 8010cec:	f7ff fb10 	bl	8010310 <VL53L1_f_027>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010cf4:	7fbb      	ldrb	r3, [r7, #30]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	77bb      	strb	r3, [r7, #30]
 8010cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cfc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010d00:	7fba      	ldrb	r2, [r7, #30]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	f4ff af52 	bcc.w	8010bac <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010d08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d107      	bne.n	8010d20 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	785b      	ldrb	r3, [r3, #1]
 8010d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff fa23 	bl	8010162 <VL53L1_f_028>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010d20:	2300      	movs	r3, #0
 8010d22:	77bb      	strb	r3, [r7, #30]
 8010d24:	e071      	b.n	8010e0a <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010d26:	7fba      	ldrb	r2, [r7, #30]
 8010d28:	4613      	mov	r3, r2
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	4413      	add	r3, r2
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d36:	4413      	add	r3, r2
 8010d38:	3304      	adds	r3, #4
 8010d3a:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d3e:	7c9a      	ldrb	r2, [r3, #18]
 8010d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d42:	7c5b      	ldrb	r3, [r3, #17]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d25c      	bcs.n	8010e02 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010d50:	429a      	cmp	r2, r3
 8010d52:	dd57      	ble.n	8010e04 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010d58:	2bff      	cmp	r3, #255	; 0xff
 8010d5a:	d053      	beq.n	8010e04 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d5e:	7c9b      	ldrb	r3, [r3, #18]
 8010d60:	461a      	mov	r2, r3
			prange_data =
 8010d62:	234c      	movs	r3, #76	; 0x4c
 8010d64:	fb02 f303 	mul.w	r3, r2, r3
 8010d68:	3310      	adds	r3, #16
 8010d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d6c:	4413      	add	r3, r2
 8010d6e:	3304      	adds	r3, #4
 8010d70:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d115      	bne.n	8010da6 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d7c:	7c98      	ldrb	r0, [r3, #18]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	8b5d      	ldrh	r5, [r3, #26]
 8010d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d90:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	9202      	str	r2, [sp, #8]
 8010d98:	697a      	ldr	r2, [r7, #20]
 8010d9a:	9201      	str	r2, [sp, #4]
 8010d9c:	9300      	str	r3, [sp, #0]
 8010d9e:	462b      	mov	r3, r5
 8010da0:	4622      	mov	r2, r4
 8010da2:	f7ff fd85 	bl	80108b0 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d115      	bne.n	8010dda <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010dc6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010dca:	9301      	str	r3, [sp, #4]
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	9300      	str	r3, [sp, #0]
 8010dd0:	4623      	mov	r3, r4
 8010dd2:	f000 fb44 	bl	801145e <VL53L1_f_011>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010dda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d108      	bne.n	8010df4 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8bd8      	ldrh	r0, [r3, #30]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010dec:	693a      	ldr	r2, [r7, #16]
 8010dee:	4619      	mov	r1, r3
 8010df0:	f000 fbda 	bl	80115a8 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010df6:	7c9b      	ldrb	r3, [r3, #18]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	b2da      	uxtb	r2, r3
 8010dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dfe:	749a      	strb	r2, [r3, #18]
 8010e00:	e000      	b.n	8010e04 <VL53L1_f_033+0x400>
			continue;
 8010e02:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010e04:	7fbb      	ldrb	r3, [r7, #30]
 8010e06:	3301      	adds	r3, #1
 8010e08:	77bb      	strb	r3, [r7, #30]
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010e10:	7fba      	ldrb	r2, [r7, #30]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d387      	bcc.n	8010d26 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3724      	adds	r7, #36	; 0x24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e22 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b08c      	sub	sp, #48	; 0x30
 8010e26:	af02      	add	r7, sp, #8
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	603b      	str	r3, [r7, #0]
 8010e2e:	4603      	mov	r3, r0
 8010e30:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010e32:	2300      	movs	r3, #0
 8010e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010e38:	7bfa      	ldrb	r2, [r7, #15]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	4413      	add	r3, r2
 8010e40:	009b      	lsls	r3, r3, #2
 8010e42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	4413      	add	r3, r2
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010e54:	2300      	movs	r3, #0
 8010e56:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010e60:	2300      	movs	r3, #0
 8010e62:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	785a      	ldrb	r2, [r3, #1]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	781a      	ldrb	r2, [r3, #0]
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	789a      	ldrb	r2, [r3, #2]
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010e7c:	6a3b      	ldr	r3, [r7, #32]
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e84:	e04d      	b.n	8010f22 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	78da      	ldrb	r2, [r3, #3]
 8010e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e92:	fb01 f202 	mul.w	r2, r1, r2
 8010e96:	1a9b      	subs	r3, r3, r2
 8010e98:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010e9a:	6a3b      	ldr	r3, [r7, #32]
 8010e9c:	7999      	ldrb	r1, [r3, #6]
 8010e9e:	f107 0218 	add.w	r2, r7, #24
 8010ea2:	7ff8      	ldrb	r0, [r7, #31]
 8010ea4:	f107 0310 	add.w	r3, r7, #16
 8010ea8:	9301      	str	r3, [sp, #4]
 8010eaa:	f107 0314 	add.w	r3, r7, #20
 8010eae:	9300      	str	r3, [sp, #0]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	f000 fa7a 	bl	80113ac <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010eb8:	7ffb      	ldrb	r3, [r7, #31]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	6839      	ldr	r1, [r7, #0]
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	440b      	add	r3, r1
 8010ec2:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010ec4:	7ffb      	ldrb	r3, [r7, #31]
 8010ec6:	697a      	ldr	r2, [r7, #20]
 8010ec8:	6839      	ldr	r1, [r7, #0]
 8010eca:	3318      	adds	r3, #24
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	440b      	add	r3, r1
 8010ed0:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010ed2:	7ffb      	ldrb	r3, [r7, #31]
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	3330      	adds	r3, #48	; 0x30
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	440b      	add	r3, r1
 8010ede:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	689a      	ldr	r2, [r3, #8]
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010eee:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010ef0:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010ef2:	6839      	ldr	r1, [r7, #0]
 8010ef4:	3348      	adds	r3, #72	; 0x48
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	440b      	add	r3, r1
 8010efa:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010efc:	697a      	ldr	r2, [r7, #20]
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	689a      	ldr	r2, [r3, #8]
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010f0a:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010f0c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010f0e:	6839      	ldr	r1, [r7, #0]
 8010f10:	3360      	adds	r3, #96	; 0x60
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	440b      	add	r3, r1
 8010f16:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f22:	6a3b      	ldr	r3, [r7, #32]
 8010f24:	791b      	ldrb	r3, [r3, #4]
 8010f26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d9ab      	bls.n	8010e86 <VL53L1_f_034+0x64>
	}

	return status;
 8010f2e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3728      	adds	r7, #40	; 0x28
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f3c:	b08f      	sub	sp, #60	; 0x3c
 8010f3e:	af06      	add	r7, sp, #24
 8010f40:	60ba      	str	r2, [r7, #8]
 8010f42:	607b      	str	r3, [r7, #4]
 8010f44:	4603      	mov	r3, r0
 8010f46:	73fb      	strb	r3, [r7, #15]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010f50:	2300      	movs	r3, #0
 8010f52:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010f54:	7bfa      	ldrb	r2, [r7, #15]
 8010f56:	4613      	mov	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	4413      	add	r3, r2
 8010f5c:	009b      	lsls	r3, r3, #2
 8010f5e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	4413      	add	r3, r2
 8010f66:	3304      	adds	r3, #4
 8010f68:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010f72:	2300      	movs	r3, #0
 8010f74:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010f76:	69bb      	ldr	r3, [r7, #24]
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	77fb      	strb	r3, [r7, #31]
 8010f7c:	e0b9      	b.n	80110f2 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	78da      	ldrb	r2, [r3, #3]
 8010f82:	7ffb      	ldrb	r3, [r7, #31]
 8010f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f88:	fb01 f202 	mul.w	r2, r1, r2
 8010f8c:	1a9b      	subs	r3, r3, r2
 8010f8e:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010f90:	7ffb      	ldrb	r3, [r7, #31]
 8010f92:	3301      	adds	r3, #1
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	78d2      	ldrb	r2, [r2, #3]
 8010f98:	fb93 f1f2 	sdiv	r1, r3, r2
 8010f9c:	fb01 f202 	mul.w	r2, r1, r2
 8010fa0:	1a9b      	subs	r3, r3, r2
 8010fa2:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	789b      	ldrb	r3, [r3, #2]
 8010fa8:	7dfa      	ldrb	r2, [r7, #23]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	f080 809e 	bcs.w	80110ec <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010fb4:	7dba      	ldrb	r2, [r7, #22]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	f080 8098 	bcs.w	80110ec <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010fbc:	7dfb      	ldrb	r3, [r7, #23]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	3348      	adds	r3, #72	; 0x48
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	4413      	add	r3, r2
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10e      	bne.n	8010fea <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	3360      	adds	r3, #96	; 0x60
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d106      	bne.n	8010fea <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	68ba      	ldr	r2, [r7, #8]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010fe8:	e043      	b.n	8011072 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010fea:	7dfb      	ldrb	r3, [r7, #23]
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	3348      	adds	r3, #72	; 0x48
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	4413      	add	r3, r2
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	db0e      	blt.n	8011018 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010ffa:	7dfb      	ldrb	r3, [r7, #23]
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	3360      	adds	r3, #96	; 0x60
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	4413      	add	r3, r2
 8011004:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8011006:	2b00      	cmp	r3, #0
 8011008:	db06      	blt.n	8011018 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 801100a:	7dfb      	ldrb	r3, [r7, #23]
 801100c:	68ba      	ldr	r2, [r7, #8]
 801100e:	4413      	add	r3, r2
 8011010:	2201      	movs	r2, #1
 8011012:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011016:	e02c      	b.n	8011072 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011018:	7dfb      	ldrb	r3, [r7, #23]
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	3348      	adds	r3, #72	; 0x48
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	2b00      	cmp	r3, #0
 8011026:	da1e      	bge.n	8011066 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011028:	7dfb      	ldrb	r3, [r7, #23]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	3360      	adds	r3, #96	; 0x60
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	4413      	add	r3, r2
 8011032:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8011034:	2b00      	cmp	r3, #0
 8011036:	db16      	blt.n	8011066 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011038:	7dbb      	ldrb	r3, [r7, #22]
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	3348      	adds	r3, #72	; 0x48
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4413      	add	r3, r2
 8011042:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8011044:	2b00      	cmp	r3, #0
 8011046:	db0e      	blt.n	8011066 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8011048:	7dbb      	ldrb	r3, [r7, #22]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	3360      	adds	r3, #96	; 0x60
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	4413      	add	r3, r2
 8011052:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8011054:	2b00      	cmp	r3, #0
 8011056:	da06      	bge.n	8011066 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8011058:	7dfb      	ldrb	r3, [r7, #23]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	4413      	add	r3, r2
 801105e:	2201      	movs	r2, #1
 8011060:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8011064:	e005      	b.n	8011072 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8011066:	7dfb      	ldrb	r3, [r7, #23]
 8011068:	68ba      	ldr	r2, [r7, #8]
 801106a:	4413      	add	r3, r2
 801106c:	2200      	movs	r2, #0
 801106e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8011072:	7dfb      	ldrb	r3, [r7, #23]
 8011074:	68ba      	ldr	r2, [r7, #8]
 8011076:	4413      	add	r3, r2
 8011078:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d035      	beq.n	80110ec <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8011080:	69bb      	ldr	r3, [r7, #24]
 8011082:	7ffa      	ldrb	r2, [r7, #31]
 8011084:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8011086:	7dfb      	ldrb	r3, [r7, #23]
 8011088:	68ba      	ldr	r2, [r7, #8]
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	685c      	ldr	r4, [r3, #4]
 8011090:	7dfb      	ldrb	r3, [r7, #23]
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	3318      	adds	r3, #24
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	685d      	ldr	r5, [r3, #4]
 801109c:	7dfb      	ldrb	r3, [r7, #23]
 801109e:	68ba      	ldr	r2, [r7, #8]
 80110a0:	3330      	adds	r3, #48	; 0x30
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4413      	add	r3, r2
 80110a6:	685e      	ldr	r6, [r3, #4]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	689b      	ldr	r3, [r3, #8]
 80110ac:	687a      	ldr	r2, [r7, #4]
 80110ae:	78d2      	ldrb	r2, [r2, #3]
 80110b0:	69b9      	ldr	r1, [r7, #24]
 80110b2:	3118      	adds	r1, #24
 80110b4:	7ff8      	ldrb	r0, [r7, #31]
 80110b6:	9105      	str	r1, [sp, #20]
 80110b8:	9204      	str	r2, [sp, #16]
 80110ba:	9303      	str	r3, [sp, #12]
 80110bc:	2300      	movs	r3, #0
 80110be:	9302      	str	r3, [sp, #8]
 80110c0:	2300      	movs	r3, #0
 80110c2:	9301      	str	r3, [sp, #4]
 80110c4:	2300      	movs	r3, #0
 80110c6:	9300      	str	r3, [sp, #0]
 80110c8:	4633      	mov	r3, r6
 80110ca:	462a      	mov	r2, r5
 80110cc:	4621      	mov	r1, r4
 80110ce:	f000 f81c 	bl	801110a <VL53L1_f_036>
 80110d2:	4603      	mov	r3, r0
 80110d4:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 80110d6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80110da:	f113 0f0f 	cmn.w	r3, #15
 80110de:	d105      	bne.n	80110ec <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 80110e0:	7dfb      	ldrb	r3, [r7, #23]
 80110e2:	68ba      	ldr	r2, [r7, #8]
 80110e4:	4413      	add	r3, r2
 80110e6:	2200      	movs	r2, #0
 80110e8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80110ec:	7ffb      	ldrb	r3, [r7, #31]
 80110ee:	3301      	adds	r3, #1
 80110f0:	77fb      	strb	r3, [r7, #31]
 80110f2:	69bb      	ldr	r3, [r7, #24]
 80110f4:	791b      	ldrb	r3, [r3, #4]
 80110f6:	7ffa      	ldrb	r2, [r7, #31]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	f4ff af40 	bcc.w	8010f7e <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 80110fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3724      	adds	r7, #36	; 0x24
 8011106:	46bd      	mov	sp, r7
 8011108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801110a <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 801110a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801110e:	b0b2      	sub	sp, #200	; 0xc8
 8011110:	af00      	add	r7, sp, #0
 8011112:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8011116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801111a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801111e:	4603      	mov	r3, r0
 8011120:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011124:	23f1      	movs	r3, #241	; 0xf1
 8011126:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 801112a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801112e:	f04f 0300 	mov.w	r3, #0
 8011132:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8011142:	f04f 0200 	mov.w	r2, #0
 8011146:	f04f 0300 	mov.w	r3, #0
 801114a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801114e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011152:	17da      	asrs	r2, r3, #31
 8011154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 801115c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011160:	17da      	asrs	r2, r3, #31
 8011162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011166:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 801116a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801116e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8011172:	4602      	mov	r2, r0
 8011174:	ebb3 0802 	subs.w	r8, r3, r2
 8011178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801117c:	460a      	mov	r2, r1
 801117e:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8011182:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011186:	17da      	asrs	r2, r3, #31
 8011188:	67bb      	str	r3, [r7, #120]	; 0x78
 801118a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801118c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8011190:	460b      	mov	r3, r1
 8011192:	ebb8 0a03 	subs.w	sl, r8, r3
 8011196:	4613      	mov	r3, r2
 8011198:	eb69 0b03 	sbc.w	fp, r9, r3
 801119c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80111a0:	17da      	asrs	r2, r3, #31
 80111a2:	673b      	str	r3, [r7, #112]	; 0x70
 80111a4:	677a      	str	r2, [r7, #116]	; 0x74
 80111a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80111aa:	460b      	mov	r3, r1
 80111ac:	ebba 0403 	subs.w	r4, sl, r3
 80111b0:	4613      	mov	r3, r2
 80111b2:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80111b6:	f04f 0200 	mov.w	r2, #0
 80111ba:	f04f 0300 	mov.w	r3, #0
 80111be:	032b      	lsls	r3, r5, #12
 80111c0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80111c4:	0322      	lsls	r2, r4, #12
 80111c6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80111ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111ce:	17da      	asrs	r2, r3, #31
 80111d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80111d2:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80111d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111d8:	17da      	asrs	r2, r3, #31
 80111da:	663b      	str	r3, [r7, #96]	; 0x60
 80111dc:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 80111de:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80111e2:	4623      	mov	r3, r4
 80111e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80111e8:	4602      	mov	r2, r0
 80111ea:	1a9b      	subs	r3, r3, r2
 80111ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80111ee:	462b      	mov	r3, r5
 80111f0:	460a      	mov	r2, r1
 80111f2:	eb63 0302 	sbc.w	r3, r3, r2
 80111f6:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 80111f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80111fc:	17da      	asrs	r2, r3, #31
 80111fe:	653b      	str	r3, [r7, #80]	; 0x50
 8011200:	657a      	str	r2, [r7, #84]	; 0x54
 8011202:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011206:	4623      	mov	r3, r4
 8011208:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801120c:	4602      	mov	r2, r0
 801120e:	1a9b      	subs	r3, r3, r2
 8011210:	64bb      	str	r3, [r7, #72]	; 0x48
 8011212:	462b      	mov	r3, r5
 8011214:	460a      	mov	r2, r1
 8011216:	eb63 0302 	sbc.w	r3, r3, r2
 801121a:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801121c:	f04f 0200 	mov.w	r2, #0
 8011220:	f04f 0300 	mov.w	r3, #0
 8011224:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011228:	4629      	mov	r1, r5
 801122a:	030b      	lsls	r3, r1, #12
 801122c:	4621      	mov	r1, r4
 801122e:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011232:	4621      	mov	r1, r4
 8011234:	030a      	lsls	r2, r1, #12
 8011236:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 801123a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801123e:	4313      	orrs	r3, r2
 8011240:	f000 80a8 	beq.w	8011394 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8011244:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011248:	f04f 0000 	mov.w	r0, #0
 801124c:	f04f 0100 	mov.w	r1, #0
 8011250:	0319      	lsls	r1, r3, #12
 8011252:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011256:	0310      	lsls	r0, r2, #12
 8011258:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801125c:	1814      	adds	r4, r2, r0
 801125e:	633c      	str	r4, [r7, #48]	; 0x30
 8011260:	414b      	adcs	r3, r1
 8011262:	637b      	str	r3, [r7, #52]	; 0x34
 8011264:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011268:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 801126c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011270:	1891      	adds	r1, r2, r2
 8011272:	62b9      	str	r1, [r7, #40]	; 0x28
 8011274:	415b      	adcs	r3, r3
 8011276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801127c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011280:	f7ee ffce 	bl	8000220 <__aeabi_ldivmod>
 8011284:	4602      	mov	r2, r0
 8011286:	460b      	mov	r3, r1
 8011288:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 801128c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011290:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8011294:	6239      	str	r1, [r7, #32]
 8011296:	f143 0300 	adc.w	r3, r3, #0
 801129a:	627b      	str	r3, [r7, #36]	; 0x24
 801129c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80112a0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 80112a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80112a8:	2200      	movs	r2, #0
 80112aa:	643b      	str	r3, [r7, #64]	; 0x40
 80112ac:	647a      	str	r2, [r7, #68]	; 0x44
 80112ae:	f04f 0200 	mov.w	r2, #0
 80112b2:	f04f 0300 	mov.w	r3, #0
 80112b6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80112ba:	4629      	mov	r1, r5
 80112bc:	030b      	lsls	r3, r1, #12
 80112be:	4621      	mov	r1, r4
 80112c0:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80112c4:	4621      	mov	r1, r4
 80112c6:	030a      	lsls	r2, r1, #12
 80112c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80112cc:	1884      	adds	r4, r0, r2
 80112ce:	61bc      	str	r4, [r7, #24]
 80112d0:	eb41 0303 	adc.w	r3, r1, r3
 80112d4:	61fb      	str	r3, [r7, #28]
 80112d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80112da:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 80112de:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80112e2:	1c51      	adds	r1, r2, #1
 80112e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80112e6:	f143 0300 	adc.w	r3, r3, #0
 80112ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80112f0:	460b      	mov	r3, r1
 80112f2:	0fdb      	lsrs	r3, r3, #31
 80112f4:	2200      	movs	r2, #0
 80112f6:	613b      	str	r3, [r7, #16]
 80112f8:	617a      	str	r2, [r7, #20]
 80112fa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80112fe:	4623      	mov	r3, r4
 8011300:	4602      	mov	r2, r0
 8011302:	189b      	adds	r3, r3, r2
 8011304:	60bb      	str	r3, [r7, #8]
 8011306:	460b      	mov	r3, r1
 8011308:	462a      	mov	r2, r5
 801130a:	eb42 0303 	adc.w	r3, r2, r3
 801130e:	60fb      	str	r3, [r7, #12]
 8011310:	f04f 0200 	mov.w	r2, #0
 8011314:	f04f 0300 	mov.w	r3, #0
 8011318:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801131c:	4621      	mov	r1, r4
 801131e:	084a      	lsrs	r2, r1, #1
 8011320:	4629      	mov	r1, r5
 8011322:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011326:	4629      	mov	r1, r5
 8011328:	104b      	asrs	r3, r1, #1
 801132a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 801132e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011332:	2b00      	cmp	r3, #0
 8011334:	da05      	bge.n	8011342 <VL53L1_f_036+0x238>
			mean_phase = 0;
 8011336:	f04f 0200 	mov.w	r2, #0
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8011342:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011346:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801134a:	f173 0300 	sbcs.w	r3, r3, #0
 801134e:	db05      	blt.n	801135c <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011354:	f04f 0300 	mov.w	r3, #0
 8011358:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 801135c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8011364:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8011368:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801136a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801136e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011372:	fb01 f202 	mul.w	r2, r1, r2
 8011376:	1a9b      	subs	r3, r3, r2
 8011378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 801137c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011380:	17da      	asrs	r2, r3, #31
 8011382:	603b      	str	r3, [r7, #0]
 8011384:	607a      	str	r2, [r7, #4]
 8011386:	e9d7 3400 	ldrd	r3, r4, [r7]
 801138a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 801138e:	2300      	movs	r3, #0
 8011390:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8011394:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801139c:	601a      	str	r2, [r3, #0]

	return status;
 801139e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	37c8      	adds	r7, #200	; 0xc8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080113ac <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b087      	sub	sp, #28
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60ba      	str	r2, [r7, #8]
 80113b4:	607b      	str	r3, [r7, #4]
 80113b6:	4603      	mov	r3, r0
 80113b8:	73fb      	strb	r3, [r7, #15]
 80113ba:	460b      	mov	r3, r1
 80113bc:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80113cc:	7bfa      	ldrb	r2, [r7, #15]
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	3206      	adds	r2, #6
 80113d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	2200      	movs	r2, #0
 80113de:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 80113e0:	2300      	movs	r3, #0
 80113e2:	75fb      	strb	r3, [r7, #23]
 80113e4:	e02f      	b.n	8011446 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 80113e6:	7bfa      	ldrb	r2, [r7, #15]
 80113e8:	7dfb      	ldrb	r3, [r7, #23]
 80113ea:	4413      	add	r3, r2
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	7a92      	ldrb	r2, [r2, #10]
 80113f0:	441a      	add	r2, r3
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 80113f6:	68ba      	ldr	r2, [r7, #8]
 80113f8:	7a92      	ldrb	r2, [r2, #10]
 80113fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80113fe:	fb01 f202 	mul.w	r2, r1, r2
 8011402:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011404:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8011406:	7dfa      	ldrb	r2, [r7, #23]
 8011408:	7bbb      	ldrb	r3, [r7, #14]
 801140a:	429a      	cmp	r2, r3
 801140c:	d20a      	bcs.n	8011424 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	7db9      	ldrb	r1, [r7, #22]
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	3106      	adds	r1, #6
 8011418:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801141c:	441a      	add	r2, r3
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	e00d      	b.n	8011440 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8011424:	7dfa      	ldrb	r2, [r7, #23]
 8011426:	7bbb      	ldrb	r3, [r7, #14]
 8011428:	429a      	cmp	r2, r3
 801142a:	d909      	bls.n	8011440 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 801142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	7db9      	ldrb	r1, [r7, #22]
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	3106      	adds	r1, #6
 8011436:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801143a:	441a      	add	r2, r3
 801143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	3301      	adds	r3, #1
 8011444:	75fb      	strb	r3, [r7, #23]
 8011446:	7bbb      	ldrb	r3, [r7, #14]
 8011448:	005a      	lsls	r2, r3, #1
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	429a      	cmp	r2, r3
 801144e:	daca      	bge.n	80113e6 <VL53L1_f_013+0x3a>
	}
}
 8011450:	bf00      	nop
 8011452:	bf00      	nop
 8011454:	371c      	adds	r7, #28
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 801145e:	b580      	push	{r7, lr}
 8011460:	b088      	sub	sp, #32
 8011462:	af00      	add	r7, sp, #0
 8011464:	60ba      	str	r2, [r7, #8]
 8011466:	461a      	mov	r2, r3
 8011468:	4603      	mov	r3, r0
 801146a:	81fb      	strh	r3, [r7, #14]
 801146c:	460b      	mov	r3, r1
 801146e:	81bb      	strh	r3, [r7, #12]
 8011470:	4613      	mov	r3, r2
 8011472:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8011474:	2300      	movs	r3, #0
 8011476:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8011478:	2300      	movs	r3, #0
 801147a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 801147c:	2300      	movs	r3, #0
 801147e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8011480:	2300      	movs	r3, #0
 8011482:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8011484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011486:	89fa      	ldrh	r2, [r7, #14]
 8011488:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 801148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148c:	89ba      	ldrh	r2, [r7, #12]
 801148e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8011490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8011496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011498:	88fa      	ldrh	r2, [r7, #6]
 801149a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 801149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149e:	8a5b      	ldrh	r3, [r3, #18]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d101      	bne.n	80114a8 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80114a4:	23f1      	movs	r3, #241	; 0xf1
 80114a6:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80114a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114aa:	699b      	ldr	r3, [r3, #24]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d101      	bne.n	80114b4 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80114b0:	23f1      	movs	r3, #241	; 0xf1
 80114b2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80114b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d16f      	bne.n	801159c <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	8a5b      	ldrh	r3, [r3, #18]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fd f903 	bl	800e6cc <VL53L1_calc_pll_period_us>
 80114c6:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	699b      	ldr	r3, [r3, #24]
 80114cc:	3301      	adds	r3, #1
 80114ce:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80114d4:	4619      	mov	r1, r3
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114dc:	6978      	ldr	r0, [r7, #20]
 80114de:	f7fd f90c 	bl	800e6fa <VL53L1_duration_maths>
 80114e2:	4602      	mov	r2, r0
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 80114e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ea:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 80114ec:	0119      	lsls	r1, r3, #4
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114f4:	6978      	ldr	r0, [r7, #20]
 80114f6:	f7fd f900 	bl	800e6fa <VL53L1_duration_maths>
 80114fa:	4602      	mov	r2, r0
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8011504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011506:	69db      	ldr	r3, [r3, #28]
 8011508:	4619      	mov	r1, r3
 801150a:	4610      	mov	r0, r2
 801150c:	f7fd fb6d 	bl	800ebea <VL53L1_rate_maths>
 8011510:	4603      	mov	r3, r0
 8011512:	461a      	mov	r2, r3
 8011514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011516:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 801151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801151e:	6a1b      	ldr	r3, [r3, #32]
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f7fd fb61 	bl	800ebea <VL53L1_rate_maths>
 8011528:	4603      	mov	r3, r0
 801152a:	461a      	mov	r2, r3
 801152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8011534:	461a      	mov	r2, r3
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	6a1b      	ldr	r3, [r3, #32]
 801153a:	4619      	mov	r1, r3
 801153c:	4610      	mov	r0, r2
 801153e:	f7fd fb54 	bl	800ebea <VL53L1_rate_maths>
 8011542:	4603      	mov	r3, r0
 8011544:	461a      	mov	r2, r3
 8011546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011548:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801154e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011552:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8011554:	4413      	add	r3, r2
 8011556:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8011558:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801155c:	2b01      	cmp	r3, #1
 801155e:	d905      	bls.n	801156c <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8011560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011564:	69ba      	ldr	r2, [r7, #24]
 8011566:	fbb2 f3f3 	udiv	r3, r2, r3
 801156a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	8ada      	ldrh	r2, [r3, #22]
 8011570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011574:	69b9      	ldr	r1, [r7, #24]
 8011576:	2006      	movs	r0, #6
 8011578:	f7fd fb7c 	bl	800ec74 <VL53L1_rate_per_spad_maths>
 801157c:	4603      	mov	r3, r0
 801157e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8011580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011582:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8011584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011586:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158a:	8ad9      	ldrh	r1, [r3, #22]
 801158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158e:	69db      	ldr	r3, [r3, #28]
 8011590:	461a      	mov	r2, r3
 8011592:	f7fd f90b 	bl	800e7ac <VL53L1_events_per_spad_maths>
 8011596:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8011598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 801159c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80115a0:	4618      	mov	r0, r3
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80115a8:	b590      	push	{r4, r7, lr}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af02      	add	r7, sp, #8
 80115ae:	4603      	mov	r3, r0
 80115b0:	603a      	str	r2, [r7, #0]
 80115b2:	80fb      	strh	r3, [r7, #6]
 80115b4:	460b      	mov	r3, r1
 80115b6:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	8a58      	ldrh	r0, [r3, #18]
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	8a9c      	ldrh	r4, [r3, #20]
 80115c4:	88fb      	ldrh	r3, [r7, #6]
 80115c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80115ca:	9201      	str	r2, [sp, #4]
 80115cc:	9300      	str	r3, [sp, #0]
 80115ce:	2300      	movs	r3, #0
 80115d0:	4622      	mov	r2, r4
 80115d2:	f7fd fb83 	bl	800ecdc <VL53L1_range_maths>
 80115d6:	4603      	mov	r3, r0
 80115d8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	8a58      	ldrh	r0, [r3, #18]
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	8a9c      	ldrh	r4, [r3, #20]
 80115ee:	88fb      	ldrh	r3, [r7, #6]
 80115f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80115f4:	9201      	str	r2, [sp, #4]
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	2300      	movs	r3, #0
 80115fa:	4622      	mov	r2, r4
 80115fc:	f7fd fb6e 	bl	800ecdc <VL53L1_range_maths>
 8011600:	4603      	mov	r3, r0
 8011602:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	8a58      	ldrh	r0, [r3, #18]
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	8a9c      	ldrh	r4, [r3, #20]
 8011618:	88fb      	ldrh	r3, [r7, #6]
 801161a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801161e:	9201      	str	r2, [sp, #4]
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	2300      	movs	r3, #0
 8011624:	4622      	mov	r2, r4
 8011626:	f7fd fb59 	bl	800ecdc <VL53L1_range_maths>
 801162a:	4603      	mov	r3, r0
 801162c:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8011634:	bf00      	nop
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	bd90      	pop	{r4, r7, pc}

0801163c <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b086      	sub	sp, #24
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8011654:	2300      	movs	r3, #0
 8011656:	757b      	strb	r3, [r7, #21]





	memcpy(
 8011658:	22ac      	movs	r2, #172	; 0xac
 801165a:	68b9      	ldr	r1, [r7, #8]
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f008 f8b3 	bl	80197c8 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011662:	2300      	movs	r3, #0
 8011664:	75fb      	strb	r3, [r7, #23]
 8011666:	e008      	b.n	801167a <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8011668:	7dfa      	ldrb	r2, [r7, #23]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	3206      	adds	r2, #6
 801166e:	2100      	movs	r1, #0
 8011670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011674:	7dfb      	ldrb	r3, [r7, #23]
 8011676:	3301      	adds	r3, #1
 8011678:	75fb      	strb	r3, [r7, #23]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	7a5b      	ldrb	r3, [r3, #9]
 801167e:	7dfa      	ldrb	r2, [r7, #23]
 8011680:	429a      	cmp	r2, r3
 8011682:	d3f1      	bcc.n	8011668 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8011684:	68f9      	ldr	r1, [r7, #12]
 8011686:	68b8      	ldr	r0, [r7, #8]
 8011688:	f000 f878 	bl	801177c <VL53L1_f_038>
 801168c:	4603      	mov	r3, r0
 801168e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	7a9a      	ldrb	r2, [r3, #10]
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	7a9b      	ldrb	r3, [r3, #10]
 8011698:	429a      	cmp	r2, r3
 801169a:	d203      	bcs.n	80116a4 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	7a9b      	ldrb	r3, [r3, #10]
 80116a0:	75bb      	strb	r3, [r7, #22]
 80116a2:	e002      	b.n	80116aa <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	7a9b      	ldrb	r3, [r3, #10]
 80116a8:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80116aa:	2300      	movs	r3, #0
 80116ac:	75fb      	strb	r3, [r7, #23]
 80116ae:	e05c      	b.n	801176a <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80116b0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	db0f      	blt.n	80116d8 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80116b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116bc:	461a      	mov	r2, r3
 80116be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80116c2:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80116c4:	68ba      	ldr	r2, [r7, #8]
 80116c6:	7a92      	ldrb	r2, [r2, #10]
 80116c8:	b252      	sxtb	r2, r2
 80116ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80116ce:	fb01 f202 	mul.w	r2, r1, r2
 80116d2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80116d4:	757b      	strb	r3, [r7, #21]
 80116d6:	e013      	b.n	8011700 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	7a9b      	ldrb	r3, [r3, #10]
 80116dc:	b25b      	sxtb	r3, r3
 80116de:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 80116e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80116e4:	4619      	mov	r1, r3
 80116e6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80116ea:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116ec:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	7a92      	ldrb	r2, [r2, #10]
 80116f2:	b252      	sxtb	r2, r2
 80116f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80116f8:	fb01 f202 	mul.w	r2, r1, r2
 80116fc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80116fe:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011700:	7d7b      	ldrb	r3, [r7, #21]
 8011702:	461a      	mov	r2, r3
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	3206      	adds	r2, #6
 8011708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 801170c:	7df9      	ldrb	r1, [r7, #23]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3106      	adds	r1, #6
 8011712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8011716:	429a      	cmp	r2, r3
 8011718:	dd12      	ble.n	8011740 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801171a:	7d7b      	ldrb	r3, [r7, #21]
 801171c:	461a      	mov	r2, r3
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	3206      	adds	r2, #6
 8011722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 8011726:	7df9      	ldrb	r1, [r7, #23]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	3106      	adds	r1, #6
 801172c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011730:	7d79      	ldrb	r1, [r7, #21]
 8011732:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011734:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	1d82      	adds	r2, r0, #6
 801173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801173e:	e006      	b.n	801174e <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011740:	7d7b      	ldrb	r3, [r7, #21]
 8011742:	461a      	mov	r2, r3
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	3206      	adds	r2, #6
 8011748:	2100      	movs	r1, #0
 801174a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 801174e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011750:	7d7b      	ldrb	r3, [r7, #21]
 8011752:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	3206      	adds	r2, #6
 8011758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	1d82      	adds	r2, r0, #6
 8011760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8011764:	7dfb      	ldrb	r3, [r7, #23]
 8011766:	3301      	adds	r3, #1
 8011768:	75fb      	strb	r3, [r7, #23]
 801176a:	7dfa      	ldrb	r2, [r7, #23]
 801176c:	7dbb      	ldrb	r3, [r7, #22]
 801176e:	429a      	cmp	r2, r3
 8011770:	d39e      	bcc.n	80116b0 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8011772:	bf00      	nop
 8011774:	bf00      	nop
 8011776:	3718      	adds	r7, #24
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 801178a:	2300      	movs	r3, #0
 801178c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 801178e:	2300      	movs	r3, #0
 8011790:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 8011792:	2300      	movs	r3, #0
 8011794:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801179c:	4618      	mov	r0, r3
 801179e:	f7fd fb85 	bl	800eeac <VL53L1_decode_vcsel_period>
 80117a2:	4603      	mov	r3, r0
	period = 2048 *
 80117a4:	02db      	lsls	r3, r3, #11
 80117a6:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00a      	beq.n	80117c4 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80117ba:	68b9      	ldr	r1, [r7, #8]
 80117bc:	fb01 f202 	mul.w	r2, r1, r2
 80117c0:	1a9b      	subs	r3, r3, r2
 80117c2:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80117ca:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80117cc:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dd09      	ble.n	80117ec <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117de:	2b00      	cmp	r3, #0
 80117e0:	da01      	bge.n	80117e6 <VL53L1_f_038+0x6a>
 80117e2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80117e6:	12db      	asrs	r3, r3, #11
 80117e8:	75fb      	strb	r3, [r7, #23]
 80117ea:	e008      	b.n	80117fe <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	da01      	bge.n	80117fa <VL53L1_f_038+0x7e>
 80117f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80117fa:	12db      	asrs	r3, r3, #11
 80117fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 80117fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b08e      	sub	sp, #56	; 0x38
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
 8011812:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011814:	2300      	movs	r3, #0
 8011816:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801181a:	2300      	movs	r3, #0
 801181c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011820:	2300      	movs	r3, #0
 8011822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801182a:	2300      	movs	r3, #0
 801182c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011830:	2300      	movs	r3, #0
 8011832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 8011836:	2300      	movs	r3, #0
 8011838:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 801183c:	22ac      	movs	r2, #172	; 0xac
 801183e:	6879      	ldr	r1, [r7, #4]
 8011840:	6838      	ldr	r0, [r7, #0]
 8011842:	f007 ffc1 	bl	80197c8 <memcpy>


	podata->VL53L1_p_024 = 0;
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2200      	movs	r2, #0
 801184a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 801184c:	2300      	movs	r3, #0
 801184e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011852:	e00a      	b.n	801186a <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8011854:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	4413      	add	r3, r2
 801185c:	2210      	movs	r2, #16
 801185e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011860:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011864:	3301      	adds	r3, #1
 8011866:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801186a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801186e:	2b05      	cmp	r3, #5
 8011870:	d9f0      	bls.n	8011854 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011872:	2300      	movs	r3, #0
 8011874:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011878:	e00b      	b.n	8011892 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801187a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	3206      	adds	r2, #6
 8011882:	2100      	movs	r1, #0
 8011884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011888:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801188c:	3301      	adds	r3, #1
 801188e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	7a5b      	ldrb	r3, [r3, #9]
 8011896:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801189a:	429a      	cmp	r2, r3
 801189c:	d3ed      	bcc.n	801187a <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801189e:	2300      	movs	r3, #0
 80118a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118a4:	e012      	b.n	80118cc <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80118a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118aa:	3338      	adds	r3, #56	; 0x38
 80118ac:	443b      	add	r3, r7
 80118ae:	2200      	movs	r2, #0
 80118b0:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80118b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118b8:	3338      	adds	r3, #56	; 0x38
 80118ba:	443b      	add	r3, r7
 80118bc:	2200      	movs	r2, #0
 80118be:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80118c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118c6:	3301      	adds	r3, #1
 80118c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118d0:	2b0f      	cmp	r3, #15
 80118d2:	d9e8      	bls.n	80118a6 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80118d4:	2300      	movs	r3, #0
 80118d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80118da:	2300      	movs	r3, #0
 80118dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118e0:	e068      	b.n	80119b4 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 80118e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	4413      	add	r3, r2
 80118ea:	7b1b      	ldrb	r3, [r3, #12]
 80118ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 80118f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80118f4:	3338      	adds	r3, #56	; 0x38
 80118f6:	443b      	add	r3, r7
 80118f8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d115      	bne.n	801192c <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011904:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011908:	0092      	lsls	r2, r2, #2
 801190a:	b2d2      	uxtb	r2, r2
 801190c:	3338      	adds	r3, #56	; 0x38
 801190e:	443b      	add	r3, r7
 8011910:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	4413      	add	r3, r2
 801191c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011920:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011926:	3301      	adds	r3, #1
 8011928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 801192c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011930:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011934:	443a      	add	r2, r7
 8011936:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801193a:	3201      	adds	r2, #1
 801193c:	b2d2      	uxtb	r2, r2
 801193e:	3338      	adds	r3, #56	; 0x38
 8011940:	443b      	add	r3, r7
 8011942:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 8011946:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801194a:	3338      	adds	r3, #56	; 0x38
 801194c:	443b      	add	r3, r7
 801194e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 8011956:	2300      	movs	r3, #0
 8011958:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801195c:	e021      	b.n	80119a2 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 801195e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011962:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011966:	441a      	add	r2, r3
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	3206      	adds	r2, #6
 801196c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011970:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011974:	009a      	lsls	r2, r3, #2
 8011976:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801197a:	441a      	add	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3206      	adds	r2, #6
 8011980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 8011984:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8011988:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801198c:	4402      	add	r2, r0
 801198e:	4419      	add	r1, r3
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	3206      	adds	r2, #6
 8011994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 8011998:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801199c:	3301      	adds	r3, #1
 801199e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80119a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119a6:	2b03      	cmp	r3, #3
 80119a8:	d9d9      	bls.n	801195e <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80119aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119ae:	3301      	adds	r3, #1
 80119b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80119b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119b8:	2b05      	cmp	r3, #5
 80119ba:	d992      	bls.n	80118e2 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80119bc:	2300      	movs	r3, #0
 80119be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80119c2:	e022      	b.n	8011a0a <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80119c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119c8:	683a      	ldr	r2, [r7, #0]
 80119ca:	4413      	add	r3, r2
 80119cc:	7b1b      	ldrb	r3, [r3, #12]
 80119ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80119d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80119d6:	2b0f      	cmp	r3, #15
 80119d8:	d80c      	bhi.n	80119f4 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80119da:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80119de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 80119e2:	3238      	adds	r2, #56	; 0x38
 80119e4:	443a      	add	r2, r7
 80119e6:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	4413      	add	r3, r2
 80119ee:	460a      	mov	r2, r1
 80119f0:	749a      	strb	r2, [r3, #18]
 80119f2:	e005      	b.n	8011a00 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 80119f4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	4413      	add	r3, r2
 80119fc:	2200      	movs	r2, #0
 80119fe:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011a00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a04:	3301      	adds	r3, #1
 8011a06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011a0a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a0e:	2b05      	cmp	r3, #5
 8011a10:	d9d8      	bls.n	80119c4 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	b2da      	uxtb	r2, r3
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011a1e:	2300      	movs	r3, #0
 8011a20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011a24:	e050      	b.n	8011ac8 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8011a26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a2a:	3338      	adds	r3, #56	; 0x38
 8011a2c:	443b      	add	r3, r7
 8011a2e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011a32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	dd41      	ble.n	8011abe <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 8011a3a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a3e:	3338      	adds	r3, #56	; 0x38
 8011a40:	443b      	add	r3, r7
 8011a42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011a50:	e031      	b.n	8011ab6 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011a52:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a56:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a5a:	441a      	add	r2, r3
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	3206      	adds	r2, #6
 8011a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	0fda      	lsrs	r2, r3, #31
 8011a68:	4413      	add	r3, r2
 8011a6a:	105b      	asrs	r3, r3, #1
 8011a6c:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 8011a6e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a72:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a76:	441a      	add	r2, r3
 8011a78:	4401      	add	r1, r0
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	3206      	adds	r2, #6
 8011a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 8011a82:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a86:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a8a:	441a      	add	r2, r3
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	3206      	adds	r2, #6
 8011a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a94:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011a98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011a9c:	441a      	add	r2, r3
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	fb91 f1f3 	sdiv	r1, r1, r3
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	3206      	adds	r2, #6
 8011aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8011aac:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011ab6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011aba:	2b03      	cmp	r3, #3
 8011abc:	d9c9      	bls.n	8011a52 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011abe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011ac8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011acc:	2b0f      	cmp	r3, #15
 8011ace:	d9aa      	bls.n	8011a26 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8011adc:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d002      	beq.n	8011ae8 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2204      	movs	r2, #4
 8011ae6:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8011ae8:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3738      	adds	r7, #56	; 0x38
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011af6:	b0cb      	sub	sp, #300	; 0x12c
 8011af8:	af06      	add	r7, sp, #24
 8011afa:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011afe:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011b02:	6020      	str	r0, [r4, #0]
 8011b04:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011b08:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011b0c:	6001      	str	r1, [r0, #0]
 8011b0e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011b12:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8011b16:	600a      	str	r2, [r1, #0]
 8011b18:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b1c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011b20:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011b22:	2300      	movs	r3, #0
 8011b24:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8011b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011b2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011b30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011b34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8011b38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011b3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011b40:	f107 0318 	add.w	r3, r7, #24
 8011b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011b52:	2300      	movs	r3, #0
 8011b54:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011b64:	2300      	movs	r3, #0
 8011b66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011b70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b78:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011b7c:	6818      	ldr	r0, [r3, #0]
 8011b7e:	f7ff fe44 	bl	801180a <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b86:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8011b88:	b299      	uxth	r1, r3
 8011b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b8e:	3348      	adds	r3, #72	; 0x48
 8011b90:	461a      	mov	r2, r3
 8011b92:	2000      	movs	r0, #0
 8011b94:	f7fd f9db 	bl	800ef4e <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8011b98:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ba0:	3348      	adds	r3, #72	; 0x48
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	f7fd f994 	bl	800eed2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8011baa:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d142      	bne.n	8011c38 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d039      	beq.n	8011c38 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8011bc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011bd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8011bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011be2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011bfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011bfe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011c02:	6812      	ldr	r2, [r2, #0]
 8011c04:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011c08:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011c0c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011c10:	6809      	ldr	r1, [r1, #0]
 8011c12:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8011c16:	f107 0014 	add.w	r0, r7, #20
 8011c1a:	9004      	str	r0, [sp, #16]
 8011c1c:	9103      	str	r1, [sp, #12]
 8011c1e:	9202      	str	r2, [sp, #8]
 8011c20:	9301      	str	r3, [sp, #4]
 8011c22:	2300      	movs	r3, #0
 8011c24:	9300      	str	r3, [sp, #0]
 8011c26:	2300      	movs	r3, #0
 8011c28:	4632      	mov	r2, r6
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f002 f98c 	bl	8013f4a <VL53L1_f_040>
 8011c32:	4603      	mov	r3, r0
 8011c34:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011c38:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d115      	bne.n	8011c6c <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011c40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00c      	beq.n	8011c6c <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011c52:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011c5c:	3348      	adds	r3, #72	; 0x48
 8011c5e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011c62:	f002 fbe4 	bl	801442e <VL53L1_f_041>
 8011c66:	4603      	mov	r3, r0
 8011c68:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011c6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011c7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c80:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011c84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c88:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011c8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c90:	2200      	movs	r2, #0
 8011c92:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8011c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011ca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8011caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d002      	beq.n	8011cd2 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011ccc:	2301      	movs	r3, #1
 8011cce:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011cd8:	e108      	b.n	8011eec <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8011cda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011ce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011cf0:	3348      	adds	r3, #72	; 0x48
 8011cf2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011cf6:	7814      	ldrb	r4, [r2, #0]
 8011cf8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011cfc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011d00:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011d04:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011d08:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011d0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011d10:	9405      	str	r4, [sp, #20]
 8011d12:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011d16:	9404      	str	r4, [sp, #16]
 8011d18:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011d1c:	9403      	str	r4, [sp, #12]
 8011d1e:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011d22:	9402      	str	r4, [sp, #8]
 8011d24:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011d28:	9401      	str	r4, [sp, #4]
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011d30:	6812      	ldr	r2, [r2, #0]
 8011d32:	6809      	ldr	r1, [r1, #0]
 8011d34:	6800      	ldr	r0, [r0, #0]
 8011d36:	f7fe fe65 	bl	8010a04 <VL53L1_f_033>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011d40:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	f040 80cb 	bne.w	8011ee0 <VL53L1_hist_process_data+0x3ec>
 8011d4a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f040 80c6 	bne.w	8011ee0 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011d54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d58:	7c9b      	ldrb	r3, [r3, #18]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d110      	bne.n	8011d80 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d62:	3314      	adds	r3, #20
 8011d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d6c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d72:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011d78:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011d7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d7e:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011d80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011d8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011d90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	461a      	mov	r2, r3
 8011d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011d9c:	fb02 f303 	mul.w	r3, r2, r3
 8011da0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011dae:	2300      	movs	r3, #0
 8011db0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011db4:	e08b      	b.n	8011ece <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011db6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011dba:	224c      	movs	r2, #76	; 0x4c
 8011dbc:	fb02 f303 	mul.w	r3, r2, r3
 8011dc0:	3310      	adds	r3, #16
 8011dc2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011dc6:	4413      	add	r3, r2
 8011dc8:	3304      	adds	r3, #4
 8011dca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dd2:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011dd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dda:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011dde:	429a      	cmp	r2, r3
 8011de0:	dd0e      	ble.n	8011e00 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011de2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011de6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011dea:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011dec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011df0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011df4:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	b29b      	uxth	r3, r3
				delta_mm =
 8011dfa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011dfe:	e00d      	b.n	8011e1c <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011e00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e04:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011e08:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e0e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011e12:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	b29b      	uxth	r3, r3
				delta_mm =
 8011e18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011e1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011e28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011e2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	461a      	mov	r2, r3
 8011e34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e38:	fb02 f303 	mul.w	r3, r2, r3
 8011e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011e40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e44:	015b      	lsls	r3, r3, #5
 8011e46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011e4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e4e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011e60:	429a      	cmp	r2, r3
 8011e62:	dd2f      	ble.n	8011ec4 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011e64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e68:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011e6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	da22      	bge.n	8011ec4 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011e7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011e84:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d91b      	bls.n	8011ec4 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011e8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011e90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011e92:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d913      	bls.n	8011ec4 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011e9c:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011ea0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011ea4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011ea8:	6812      	ldr	r2, [r2, #0]
 8011eaa:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011eac:	4293      	cmp	r3, r2
 8011eae:	da09      	bge.n	8011ec4 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011eb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011eb8:	224c      	movs	r2, #76	; 0x4c
 8011eba:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f007 fc82 	bl	80197c8 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011ec4:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011ec8:	3301      	adds	r3, #1
 8011eca:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ed2:	7c9b      	ldrb	r3, [r3, #18]
 8011ed4:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	f4ff af6c 	bcc.w	8011db6 <VL53L1_hist_process_data+0x2c2>
 8011ede:	e000      	b.n	8011ee2 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011ee0:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011ee2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011eec:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011ef0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	f67f aef0 	bls.w	8011cda <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011f08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011f0c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011f1a <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b086      	sub	sp, #24
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	60f8      	str	r0, [r7, #12]
 8011f22:	460b      	mov	r3, r1
 8011f24:	607a      	str	r2, [r7, #4]
 8011f26:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d104      	bne.n	8011f3e <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f7f9 fb5a 	bl	800b5ee <VL53L1_disable_firmware>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d104      	bne.n	8011f50 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7f9 fb82 	bl	800b650 <VL53L1_enable_powerforce>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d105      	bne.n	8011f64 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011f58:	21fa      	movs	r1, #250	; 0xfa
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f002 fdd0 	bl	8014b00 <VL53L1_WaitUs>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d107      	bne.n	8011f7c <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f240 7181 	movw	r1, #1921	; 0x781
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f002 fcd0 	bl	8014918 <VL53L1_WrByte>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d107      	bne.n	8011f94 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011f84:	2205      	movs	r2, #5
 8011f86:	f240 6183 	movw	r1, #1667	; 0x683
 8011f8a:	68f8      	ldr	r0, [r7, #12]
 8011f8c:	f002 fcc4 	bl	8014918 <VL53L1_WrByte>
 8011f90:	4603      	mov	r3, r0
 8011f92:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011f94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d105      	bne.n	8011fa8 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f002 fdae 	bl	8014b00 <VL53L1_WaitUs>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d107      	bne.n	8011fc0 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f002 fcae 	bl	8014918 <VL53L1_WrByte>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d108      	bne.n	8011fda <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011fc8:	897b      	ldrh	r3, [r7, #10]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f240 7184 	movw	r1, #1924	; 0x784
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f002 fccb 	bl	801496c <VL53L1_WrWord>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011fda:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3718      	adds	r7, #24
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b086      	sub	sp, #24
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	60f8      	str	r0, [r7, #12]
 8011fee:	607b      	str	r3, [r7, #4]
 8011ff0:	460b      	mov	r3, r1
 8011ff2:	72fb      	strb	r3, [r7, #11]
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8012000:	7afb      	ldrb	r3, [r7, #11]
 8012002:	75bb      	strb	r3, [r7, #22]
 8012004:	e041      	b.n	801208a <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8012006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d108      	bne.n	8012020 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 801200e:	7dbb      	ldrb	r3, [r7, #22]
 8012010:	461a      	mov	r2, r3
 8012012:	f240 7194 	movw	r1, #1940	; 0x794
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f002 fc7e 	bl	8014918 <VL53L1_WrByte>
 801201c:	4603      	mov	r3, r0
 801201e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8012020:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d107      	bne.n	8012038 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8012028:	2200      	movs	r2, #0
 801202a:	f240 7183 	movw	r1, #1923	; 0x783
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f002 fc72 	bl	8014918 <VL53L1_WrByte>
 8012034:	4603      	mov	r3, r0
 8012036:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8012038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d105      	bne.n	801204c <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8012040:	2105      	movs	r1, #5
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f002 fd5c 	bl	8014b00 <VL53L1_WaitUs>
 8012048:	4603      	mov	r3, r0
 801204a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 801204c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d107      	bne.n	8012064 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8012054:	2201      	movs	r2, #1
 8012056:	f240 7183 	movw	r1, #1923	; 0x783
 801205a:	68f8      	ldr	r0, [r7, #12]
 801205c:	f002 fc5c 	bl	8014918 <VL53L1_WrByte>
 8012060:	4603      	mov	r3, r0
 8012062:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8012064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d108      	bne.n	801207e <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 801206c:	2304      	movs	r3, #4
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f002 fc19 	bl	80148ac <VL53L1_ReadMulti>
 801207a:	4603      	mov	r3, r0
 801207c:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3304      	adds	r3, #4
 8012082:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8012084:	7dbb      	ldrb	r3, [r7, #22]
 8012086:	3301      	adds	r3, #1
 8012088:	75bb      	strb	r3, [r7, #22]
 801208a:	7dba      	ldrb	r2, [r7, #22]
 801208c:	7af9      	ldrb	r1, [r7, #11]
 801208e:	7abb      	ldrb	r3, [r7, #10]
 8012090:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8012092:	429a      	cmp	r2, r3
 8012094:	dbb7      	blt.n	8012006 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8012096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801209a:	4618      	mov	r0, r3
 801209c:	3718      	adds	r7, #24
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b084      	sub	sp, #16
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80120aa:	2300      	movs	r3, #0
 80120ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80120ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d107      	bne.n	80120c6 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 80120b6:	2201      	movs	r2, #1
 80120b8:	f240 7183 	movw	r1, #1923	; 0x783
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f002 fc2b 	bl	8014918 <VL53L1_WrByte>
 80120c2:	4603      	mov	r3, r0
 80120c4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80120c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d107      	bne.n	80120de <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 80120ce:	2200      	movs	r2, #0
 80120d0:	f240 7181 	movw	r1, #1921	; 0x781
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f002 fc1f 	bl	8014918 <VL53L1_WrByte>
 80120da:	4603      	mov	r3, r0
 80120dc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 80120de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d104      	bne.n	80120f0 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7f9 fac4 	bl	800b674 <VL53L1_disable_powerforce>
 80120ec:	4603      	mov	r3, r0
 80120ee:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 80120f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d104      	bne.n	8012102 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7f9 fa66 	bl	800b5ca <VL53L1_enable_firmware>
 80120fe:	4603      	mov	r3, r0
 8012100:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8012102:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8012106:	4618      	mov	r0, r3
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 801210e:	b480      	push	{r7}
 8012110:	b087      	sub	sp, #28
 8012112:	af00      	add	r7, sp, #0
 8012114:	4603      	mov	r3, r0
 8012116:	60b9      	str	r1, [r7, #8]
 8012118:	607a      	str	r2, [r7, #4]
 801211a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801211c:	2300      	movs	r3, #0
 801211e:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8012120:	2300      	movs	r3, #0
 8012122:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8012124:	89fb      	ldrh	r3, [r7, #14]
 8012126:	2b03      	cmp	r3, #3
 8012128:	d802      	bhi.n	8012130 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801212a:	f06f 0308 	mvn.w	r3, #8
 801212e:	e018      	b.n	8012162 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8012130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012134:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	3302      	adds	r3, #2
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	b29b      	uxth	r3, r3
 801213e:	8afa      	ldrh	r2, [r7, #22]
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8012144:	8afb      	ldrh	r3, [r7, #22]
 8012146:	2bff      	cmp	r3, #255	; 0xff
 8012148:	d901      	bls.n	801214e <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 801214e:	8afb      	ldrh	r3, [r7, #22]
 8012150:	b2da      	uxtb	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	78da      	ldrb	r2, [r3, #3]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	705a      	strb	r2, [r3, #1]

	return status;
 801215e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012162:	4618      	mov	r0, r3
 8012164:	371c      	adds	r7, #28
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr

0801216e <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 801216e:	b590      	push	{r4, r7, lr}
 8012170:	b087      	sub	sp, #28
 8012172:	af00      	add	r7, sp, #0
 8012174:	4603      	mov	r3, r0
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	607a      	str	r2, [r7, #4]
 801217a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801217c:	2300      	movs	r3, #0
 801217e:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8012184:	2300      	movs	r3, #0
 8012186:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8012188:	89fb      	ldrh	r3, [r7, #14]
 801218a:	2b37      	cmp	r3, #55	; 0x37
 801218c:	d802      	bhi.n	8012194 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801218e:	f06f 0308 	mvn.w	r3, #8
 8012192:	e03e      	b.n	8012212 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012194:	68b9      	ldr	r1, [r7, #8]
 8012196:	2002      	movs	r0, #2
 8012198:	f7f9 f8fd 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801219c:	4603      	mov	r3, r0
 801219e:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	3302      	adds	r3, #2
 80121a8:	4619      	mov	r1, r3
 80121aa:	2002      	movs	r0, #2
 80121ac:	f7f9 f8f3 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80121b0:	4603      	mov	r3, r0
 80121b2:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 80121bc:	099b      	lsrs	r3, r3, #6
 80121be:	b29a      	uxth	r2, r3
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2219      	movs	r2, #25
 80121c8:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2205      	movs	r2, #5
 80121ce:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2205      	movs	r2, #5
 80121d4:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	3304      	adds	r3, #4
 80121da:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 80121dc:	2300      	movs	r3, #0
 80121de:	74fb      	strb	r3, [r7, #19]
 80121e0:	e012      	b.n	8012208 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 80121e2:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 80121e4:	6979      	ldr	r1, [r7, #20]
 80121e6:	2002      	movs	r0, #2
 80121e8:	f7f9 f8d5 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80121ec:	4603      	mov	r3, r0
 80121ee:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	1d23      	adds	r3, r4, #4
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	4413      	add	r3, r2
 80121f8:	460a      	mov	r2, r1
 80121fa:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	3302      	adds	r3, #2
 8012200:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012202:	7cfb      	ldrb	r3, [r7, #19]
 8012204:	3301      	adds	r3, #1
 8012206:	74fb      	strb	r3, [r7, #19]
 8012208:	7cfb      	ldrb	r3, [r7, #19]
 801220a:	2b18      	cmp	r3, #24
 801220c:	d9e9      	bls.n	80121e2 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 801220e:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012212:	4618      	mov	r0, r3
 8012214:	371c      	adds	r7, #28
 8012216:	46bd      	mov	sp, r7
 8012218:	bd90      	pop	{r4, r7, pc}

0801221a <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	4603      	mov	r3, r0
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
 8012226:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012228:	2300      	movs	r3, #0
 801222a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 801222c:	89fb      	ldrh	r3, [r7, #14]
 801222e:	2b07      	cmp	r3, #7
 8012230:	d802      	bhi.n	8012238 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012232:	f06f 0308 	mvn.w	r3, #8
 8012236:	e027      	b.n	8012288 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012238:	68b9      	ldr	r1, [r7, #8]
 801223a:	2002      	movs	r0, #2
 801223c:	f7f9 f8ab 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012240:	4603      	mov	r3, r0
 8012242:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	3302      	adds	r3, #2
 801224c:	4619      	mov	r1, r3
 801224e:	2002      	movs	r0, #2
 8012250:	f7f9 f8a1 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012254:	4603      	mov	r3, r0
 8012256:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	3304      	adds	r3, #4
 8012260:	4619      	mov	r1, r3
 8012262:	2002      	movs	r0, #2
 8012264:	f7f9 f897 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012268:	4603      	mov	r3, r0
 801226a:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	3306      	adds	r3, #6
 8012274:	4619      	mov	r1, r3
 8012276:	2002      	movs	r0, #2
 8012278:	f7f9 f88d 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801227c:	4603      	mov	r3, r0
 801227e:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	80da      	strh	r2, [r3, #6]

	return status;
 8012284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012288:	4618      	mov	r0, r3
 801228a:	3718      	adds	r7, #24
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	4603      	mov	r3, r0
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
 801229c:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801229e:	2300      	movs	r3, #0
 80122a0:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 80122a2:	89fb      	ldrh	r3, [r7, #14]
 80122a4:	2b0f      	cmp	r3, #15
 80122a6:	d802      	bhi.n	80122ae <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80122a8:	f06f 0308 	mvn.w	r3, #8
 80122ac:	e04d      	b.n	801234a <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80122ae:	68b9      	ldr	r1, [r7, #8]
 80122b0:	2002      	movs	r0, #2
 80122b2:	f7f9 f870 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80122b6:	4603      	mov	r3, r0
 80122b8:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	789a      	ldrb	r2, [r3, #2]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	78da      	ldrb	r2, [r3, #3]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	3304      	adds	r3, #4
 80122d2:	4619      	mov	r1, r3
 80122d4:	2002      	movs	r0, #2
 80122d6:	f7f9 f85e 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80122da:	4603      	mov	r3, r0
 80122dc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	3306      	adds	r3, #6
 80122e6:	4619      	mov	r1, r3
 80122e8:	2002      	movs	r0, #2
 80122ea:	f7f9 f854 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80122ee:	4603      	mov	r3, r0
 80122f0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	3308      	adds	r3, #8
 80122fa:	4619      	mov	r1, r3
 80122fc:	2002      	movs	r0, #2
 80122fe:	f7f9 f84a 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012302:	4603      	mov	r3, r0
 8012304:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	330a      	adds	r3, #10
 801230e:	4619      	mov	r1, r3
 8012310:	2002      	movs	r0, #2
 8012312:	f7f9 f840 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012316:	4603      	mov	r3, r0
 8012318:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	330c      	adds	r3, #12
 8012322:	4619      	mov	r1, r3
 8012324:	2002      	movs	r0, #2
 8012326:	f7f9 f836 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801232a:	4603      	mov	r3, r0
 801232c:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	330e      	adds	r3, #14
 8012336:	4619      	mov	r1, r3
 8012338:	2002      	movs	r0, #2
 801233a:	f7f9 f82c 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801233e:	4603      	mov	r3, r0
 8012340:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	81da      	strh	r2, [r3, #14]

	return status;
 8012346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801234a:	4618      	mov	r0, r3
 801234c:	3718      	adds	r7, #24
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b086      	sub	sp, #24
 8012356:	af00      	add	r7, sp, #0
 8012358:	60f8      	str	r0, [r7, #12]
 801235a:	607b      	str	r3, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	72fb      	strb	r3, [r7, #11]
 8012360:	4613      	mov	r3, r2
 8012362:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012364:	2300      	movs	r3, #0
 8012366:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8012368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d106      	bne.n	801237e <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8012370:	2232      	movs	r2, #50	; 0x32
 8012372:	2104      	movs	r1, #4
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7ff fdd0 	bl	8011f1a <VL53L1_nvm_enable>
 801237a:	4603      	mov	r3, r0
 801237c:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 801237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d107      	bne.n	8012396 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8012386:	7aba      	ldrb	r2, [r7, #10]
 8012388:	7af9      	ldrb	r1, [r7, #11]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7ff fe2a 	bl	8011fe6 <VL53L1_nvm_read>
 8012392:	4603      	mov	r3, r0
 8012394:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8012396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d104      	bne.n	80123a8 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f7ff fe7f 	bl	80120a2 <VL53L1_nvm_disable>
 80123a4:	4603      	mov	r3, r0
 80123a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80123a8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80123c2:	f107 0308 	add.w	r3, r7, #8
 80123c6:	2201      	movs	r2, #1
 80123c8:	212e      	movs	r1, #46	; 0x2e
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7ff ffc1 	bl	8012352 <VL53L1_read_nvm_raw_data>
 80123d0:	4603      	mov	r3, r0
 80123d2:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80123d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d108      	bne.n	80123ee <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80123dc:	f107 0308 	add.w	r3, r7, #8
 80123e0:	683a      	ldr	r2, [r7, #0]
 80123e2:	4619      	mov	r1, r3
 80123e4:	2004      	movs	r0, #4
 80123e6:	f7ff fe92 	bl	801210e <VL53L1_nvm_decode_optical_centre>
 80123ea:	4603      	mov	r3, r0
 80123ec:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 80123ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3710      	adds	r7, #16
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 80123fa:	b580      	push	{r7, lr}
 80123fc:	b092      	sub	sp, #72	; 0x48
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]
 8012402:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012404:	2300      	movs	r3, #0
 8012406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801240a:	f107 030c 	add.w	r3, r7, #12
 801240e:	220e      	movs	r2, #14
 8012410:	2157      	movs	r1, #87	; 0x57
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ff ff9d 	bl	8012352 <VL53L1_read_nvm_raw_data>
 8012418:	4603      	mov	r3, r0
 801241a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801241e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012422:	2b00      	cmp	r3, #0
 8012424:	d109      	bne.n	801243a <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8012426:	f107 030c 	add.w	r3, r7, #12
 801242a:	683a      	ldr	r2, [r7, #0]
 801242c:	4619      	mov	r1, r3
 801242e:	2038      	movs	r0, #56	; 0x38
 8012430:	f7ff fe9d 	bl	801216e <VL53L1_nvm_decode_cal_peak_rate_map>
 8012434:	4603      	mov	r3, r0
 8012436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 801243a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801243e:	4618      	mov	r0, r3
 8012440:	3748      	adds	r7, #72	; 0x48
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b086      	sub	sp, #24
 801244a:	af00      	add	r7, sp, #0
 801244c:	6078      	str	r0, [r7, #4]
 801244e:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012450:	2300      	movs	r3, #0
 8012452:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012454:	f107 030c 	add.w	r3, r7, #12
 8012458:	2202      	movs	r2, #2
 801245a:	2165      	movs	r1, #101	; 0x65
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7ff ff78 	bl	8012352 <VL53L1_read_nvm_raw_data>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012466:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d108      	bne.n	8012480 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 801246e:	f107 030c 	add.w	r3, r7, #12
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	2008      	movs	r0, #8
 8012478:	f7ff fecf 	bl	801221a <VL53L1_nvm_decode_additional_offset_cal_data>
 801247c:	4603      	mov	r3, r0
 801247e:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8012480:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8012484:	4618      	mov	r0, r3
 8012486:	3718      	adds	r7, #24
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b08a      	sub	sp, #40	; 0x28
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	460b      	mov	r3, r1
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801249a:	2300      	movs	r3, #0
 801249c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80124a0:	897b      	ldrh	r3, [r7, #10]
 80124a2:	089b      	lsrs	r3, r3, #2
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	b2d9      	uxtb	r1, r3
 80124a8:	f107 0314 	add.w	r3, r7, #20
 80124ac:	2204      	movs	r2, #4
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f7ff ff4f 	bl	8012352 <VL53L1_read_nvm_raw_data>
 80124b4:	4603      	mov	r3, r0
 80124b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80124ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d109      	bne.n	80124d6 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80124c2:	f107 0314 	add.w	r3, r7, #20
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	4619      	mov	r1, r3
 80124ca:	2010      	movs	r0, #16
 80124cc:	f7ff fee0 	bl	8012290 <VL53L1_nvm_decode_fmt_range_results_data>
 80124d0:	4603      	mov	r3, r0
 80124d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80124d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80124da:	4618      	mov	r0, r3
 80124dc:	3728      	adds	r7, #40	; 0x28
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}

080124e2 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80124e2:	b580      	push	{r7, lr}
 80124e4:	b086      	sub	sp, #24
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	60f8      	str	r0, [r7, #12]
 80124ea:	460b      	mov	r3, r1
 80124ec:	607a      	str	r2, [r7, #4]
 80124ee:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124f0:	2300      	movs	r3, #0
 80124f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80124f4:	897b      	ldrh	r3, [r7, #10]
 80124f6:	2b0a      	cmp	r3, #10
 80124f8:	d802      	bhi.n	8012500 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124fa:	f06f 0309 	mvn.w	r3, #9
 80124fe:	e047      	b.n	8012590 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012508:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012516:	f002 020f 	and.w	r2, r2, #15
 801251a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801251c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012526:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801252a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801252c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012536:	f002 0203 	and.w	r2, r2, #3
 801253a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801253c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012546:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801254a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801254c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	88d8      	ldrh	r0, [r3, #6]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	3305      	adds	r3, #5
 8012556:	461a      	mov	r2, r3
 8012558:	2102      	movs	r1, #2
 801255a:	f7f8 fef1 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012566:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012570:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801257a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801257e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012580:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8012586:	68fa      	ldr	r2, [r7, #12]
 8012588:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 801258a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801258c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b086      	sub	sp, #24
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	607a      	str	r2, [r7, #4]
 80125a4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125a6:	2300      	movs	r3, #0
 80125a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80125aa:	89fb      	ldrh	r3, [r7, #14]
 80125ac:	2b0a      	cmp	r3, #10
 80125ae:	d802      	bhi.n	80125b6 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80125b0:	f06f 0309 	mvn.w	r3, #9
 80125b4:	e046      	b.n	8012644 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125be:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	3301      	adds	r3, #1
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	f003 030f 	and.w	r3, r3, #15
 80125ce:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	3302      	adds	r3, #2
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125de:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	3303      	adds	r3, #3
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	f003 0303 	and.w	r3, r3, #3
 80125ee:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	3304      	adds	r3, #4
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125fe:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	3305      	adds	r3, #5
 8012608:	4619      	mov	r1, r3
 801260a:	2002      	movs	r0, #2
 801260c:	f7f8 fec3 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012610:	4603      	mov	r3, r0
 8012612:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	79da      	ldrb	r2, [r3, #7]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	7a1a      	ldrb	r2, [r3, #8]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	3309      	adds	r3, #9
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012632:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	7a9a      	ldrb	r2, [r3, #10]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012656:	2300      	movs	r3, #0
 8012658:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801265a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d108      	bne.n	8012674 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012662:	f107 020c 	add.w	r2, r7, #12
 8012666:	230b      	movs	r3, #11
 8012668:	2101      	movs	r1, #1
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f002 f91e 	bl	80148ac <VL53L1_ReadMulti>
 8012670:	4603      	mov	r3, r0
 8012672:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d108      	bne.n	801268e <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801267c:	f107 030c 	add.w	r3, r7, #12
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	4619      	mov	r1, r3
 8012684:	200b      	movs	r0, #11
 8012686:	f7ff ff87 	bl	8012598 <VL53L1_i2c_decode_static_nvm_managed>
 801268a:	4603      	mov	r3, r0
 801268c:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801268e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3718      	adds	r7, #24
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}

0801269a <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b086      	sub	sp, #24
 801269e:	af00      	add	r7, sp, #0
 80126a0:	60f8      	str	r0, [r7, #12]
 80126a2:	460b      	mov	r3, r1
 80126a4:	607a      	str	r2, [r7, #4]
 80126a6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80126a8:	2300      	movs	r3, #0
 80126aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80126ac:	897b      	ldrh	r3, [r7, #10]
 80126ae:	2b16      	cmp	r3, #22
 80126b0:	d802      	bhi.n	80126b8 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80126b2:	f06f 0309 	mvn.w	r3, #9
 80126b6:	e076      	b.n	80127a6 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80126c4:	68fa      	ldr	r2, [r7, #12]
 80126c6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80126c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80126ce:	68fa      	ldr	r2, [r7, #12]
 80126d0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80126d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80126dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80126e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80126f0:	f002 020f 	and.w	r2, r2, #15
 80126f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80126f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012700:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801270a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801270e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012710:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801271a:	f002 0203 	and.w	r2, r2, #3
 801271e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012720:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	8958      	ldrh	r0, [r3, #10]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	3309      	adds	r3, #9
 801272a:	461a      	mov	r2, r3
 801272c:	2102      	movs	r1, #2
 801272e:	f7f8 fe07 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	330b      	adds	r3, #11
 801273c:	461a      	mov	r2, r3
 801273e:	2102      	movs	r1, #2
 8012740:	f7f8 fe49 	bl	800b3d6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	330d      	adds	r3, #13
 801274e:	461a      	mov	r2, r3
 8012750:	2102      	movs	r1, #2
 8012752:	f7f8 fe40 	bl	800b3d6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	8a18      	ldrh	r0, [r3, #16]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	330f      	adds	r3, #15
 801275e:	461a      	mov	r2, r3
 8012760:	2102      	movs	r1, #2
 8012762:	f7f8 fded 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801276c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012770:	b218      	sxth	r0, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	3311      	adds	r3, #17
 8012776:	461a      	mov	r2, r3
 8012778:	2102      	movs	r1, #2
 801277a:	f7f8 fe2c 	bl	800b3d6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3313      	adds	r3, #19
 8012788:	461a      	mov	r2, r3
 801278a:	2102      	movs	r1, #2
 801278c:	f7f8 fe23 	bl	800b3d6 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3315      	adds	r3, #21
 801279a:	461a      	mov	r2, r3
 801279c:	2102      	movs	r1, #2
 801279e:	f7f8 fe1a 	bl	800b3d6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80127a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3718      	adds	r7, #24
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}

080127ae <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b086      	sub	sp, #24
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	4603      	mov	r3, r0
 80127b6:	60b9      	str	r1, [r7, #8]
 80127b8:	607a      	str	r2, [r7, #4]
 80127ba:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127bc:	2300      	movs	r3, #0
 80127be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80127c0:	89fb      	ldrh	r3, [r7, #14]
 80127c2:	2b16      	cmp	r3, #22
 80127c4:	d802      	bhi.n	80127cc <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80127c6:	f06f 0309 	mvn.w	r3, #9
 80127ca:	e079      	b.n	80128c0 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	785a      	ldrb	r2, [r3, #1]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	789a      	ldrb	r2, [r3, #2]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	78da      	ldrb	r2, [r3, #3]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	791a      	ldrb	r2, [r3, #4]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	3305      	adds	r3, #5
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	f003 030f 	and.w	r3, r3, #15
 80127fe:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	799a      	ldrb	r2, [r3, #6]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	3307      	adds	r3, #7
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012816:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	3308      	adds	r3, #8
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	f003 0303 	and.w	r3, r3, #3
 8012826:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	3309      	adds	r3, #9
 8012830:	4619      	mov	r1, r3
 8012832:	2002      	movs	r0, #2
 8012834:	f7f8 fdaf 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	330b      	adds	r3, #11
 8012844:	4619      	mov	r1, r3
 8012846:	2002      	movs	r0, #2
 8012848:	f7f8 fdf1 	bl	800b42e <VL53L1_i2c_decode_int16_t>
 801284c:	4603      	mov	r3, r0
 801284e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	330d      	adds	r3, #13
 8012858:	4619      	mov	r1, r3
 801285a:	2002      	movs	r0, #2
 801285c:	f7f8 fde7 	bl	800b42e <VL53L1_i2c_decode_int16_t>
 8012860:	4603      	mov	r3, r0
 8012862:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	330f      	adds	r3, #15
 801286c:	4619      	mov	r1, r3
 801286e:	2002      	movs	r0, #2
 8012870:	f7f8 fd91 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012874:	4603      	mov	r3, r0
 8012876:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	3311      	adds	r3, #17
 8012880:	4619      	mov	r1, r3
 8012882:	2002      	movs	r0, #2
 8012884:	f7f8 fdd3 	bl	800b42e <VL53L1_i2c_decode_int16_t>
 8012888:	4603      	mov	r3, r0
 801288a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801288e:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	3313      	adds	r3, #19
 8012898:	4619      	mov	r1, r3
 801289a:	2002      	movs	r0, #2
 801289c:	f7f8 fdc7 	bl	800b42e <VL53L1_i2c_decode_int16_t>
 80128a0:	4603      	mov	r3, r0
 80128a2:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	3315      	adds	r3, #21
 80128ac:	4619      	mov	r1, r3
 80128ae:	2002      	movs	r0, #2
 80128b0:	f7f8 fdbd 	bl	800b42e <VL53L1_i2c_decode_int16_t>
 80128b4:	4603      	mov	r3, r0
 80128b6:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80128bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3718      	adds	r7, #24
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b088      	sub	sp, #32
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80128d2:	2300      	movs	r3, #0
 80128d4:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80128d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d108      	bne.n	80128f0 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80128de:	f107 0208 	add.w	r2, r7, #8
 80128e2:	2317      	movs	r3, #23
 80128e4:	210d      	movs	r1, #13
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f001 ffe0 	bl	80148ac <VL53L1_ReadMulti>
 80128ec:	4603      	mov	r3, r0
 80128ee:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80128f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d108      	bne.n	801290a <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80128f8:	f107 0308 	add.w	r3, r7, #8
 80128fc:	683a      	ldr	r2, [r7, #0]
 80128fe:	4619      	mov	r1, r3
 8012900:	2017      	movs	r0, #23
 8012902:	f7ff ff54 	bl	80127ae <VL53L1_i2c_decode_customer_nvm_managed>
 8012906:	4603      	mov	r3, r0
 8012908:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801290a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3720      	adds	r7, #32
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012916:	b580      	push	{r7, lr}
 8012918:	b086      	sub	sp, #24
 801291a:	af00      	add	r7, sp, #0
 801291c:	60f8      	str	r0, [r7, #12]
 801291e:	460b      	mov	r3, r1
 8012920:	607a      	str	r2, [r7, #4]
 8012922:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012924:	2300      	movs	r3, #0
 8012926:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8012928:	897b      	ldrh	r3, [r7, #10]
 801292a:	2b1f      	cmp	r3, #31
 801292c:	d802      	bhi.n	8012934 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801292e:	f06f 0309 	mvn.w	r3, #9
 8012932:	e0cf      	b.n	8012ad4 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	2102      	movs	r1, #2
 801293c:	4618      	mov	r0, r3
 801293e:	f7f8 fcff 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801294a:	f002 0201 	and.w	r2, r2, #1
 801294e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012950:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801295a:	f002 020f 	and.w	r2, r2, #15
 801295e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012960:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801296a:	f002 020f 	and.w	r2, r2, #15
 801296e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012970:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801297a:	f002 021f 	and.w	r2, r2, #31
 801297e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012980:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 801298a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801298e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012990:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 801299a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801299e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80129a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80129aa:	f002 0201 	and.w	r2, r2, #1
 80129ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80129b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80129ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80129c4:	f002 0201 	and.w	r2, r2, #1
 80129c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80129ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80129d4:	f002 0203 	and.w	r2, r2, #3
 80129d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80129da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80129e4:	f002 021f 	and.w	r2, r2, #31
 80129e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80129ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80129f4:	f002 0203 	and.w	r2, r2, #3
 80129f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80129fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012a04:	f002 0203 	and.w	r2, r2, #3
 8012a08:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8012a0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012a14:	f002 0207 	and.w	r2, r2, #7
 8012a18:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8012a1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012a24:	f002 021f 	and.w	r2, r2, #31
 8012a28:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8012a2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012a34:	f002 0201 	and.w	r2, r2, #1
 8012a38:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012a3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012a40:	68fa      	ldr	r2, [r7, #12]
 8012a42:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012a44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012a4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012a58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8012a5e:	68fa      	ldr	r2, [r7, #12]
 8012a60:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012a62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8012a68:	68fa      	ldr	r2, [r7, #12]
 8012a6a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8012a6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012a72:	68fa      	ldr	r2, [r7, #12]
 8012a74:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8012a76:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	8b18      	ldrh	r0, [r3, #24]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	3318      	adds	r3, #24
 8012a80:	461a      	mov	r2, r3
 8012a82:	2102      	movs	r1, #2
 8012a84:	f7f8 fc5c 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8012a90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8012a9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8012aa4:	f002 020f 	and.w	r2, r2, #15
 8012aa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8012aaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8012ab0:	68fa      	ldr	r2, [r7, #12]
 8012ab2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8012ab4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8012abe:	f002 020f 	and.w	r2, r2, #15
 8012ac2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8012ac4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8012aca:	68fa      	ldr	r2, [r7, #12]
 8012acc:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8012ace:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3718      	adds	r7, #24
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	60f8      	str	r0, [r7, #12]
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	607a      	str	r2, [r7, #4]
 8012ae8:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012aea:	2300      	movs	r3, #0
 8012aec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8012aee:	897b      	ldrh	r3, [r7, #10]
 8012af0:	2b15      	cmp	r3, #21
 8012af2:	d802      	bhi.n	8012afa <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012af4:	f06f 0309 	mvn.w	r3, #9
 8012af8:	e070      	b.n	8012bdc <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012b0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012b14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012b1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012b24:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8012b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012b2e:	b298      	uxth	r0, r3
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	3304      	adds	r3, #4
 8012b34:	461a      	mov	r2, r3
 8012b36:	2102      	movs	r1, #2
 8012b38:	f7f8 fc02 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012b44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b48:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012b4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012b50:	68fa      	ldr	r2, [r7, #12]
 8012b52:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012b54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012b5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8012b68:	f002 0201 	and.w	r2, r2, #1
 8012b6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012b6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8012b78:	f002 0207 	and.w	r2, r2, #7
 8012b7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012b7e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	8998      	ldrh	r0, [r3, #12]
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	330c      	adds	r3, #12
 8012b88:	461a      	mov	r2, r3
 8012b8a:	2102      	movs	r1, #2
 8012b8c:	f7f8 fbd8 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	89d8      	ldrh	r0, [r3, #14]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	330e      	adds	r3, #14
 8012b98:	461a      	mov	r2, r3
 8012b9a:	2102      	movs	r1, #2
 8012b9c:	f7f8 fbd0 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	8a18      	ldrh	r0, [r3, #16]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	3310      	adds	r3, #16
 8012ba8:	461a      	mov	r2, r3
 8012baa:	2102      	movs	r1, #2
 8012bac:	f7f8 fbc8 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8012bb4:	68fa      	ldr	r2, [r7, #12]
 8012bb6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012bb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8012bbe:	68fa      	ldr	r2, [r7, #12]
 8012bc0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012bc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012bcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8012bd2:	68fa      	ldr	r2, [r7, #12]
 8012bd4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012bd6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3718      	adds	r7, #24
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b086      	sub	sp, #24
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	460b      	mov	r3, r1
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8012bf6:	897b      	ldrh	r3, [r7, #10]
 8012bf8:	2b16      	cmp	r3, #22
 8012bfa:	d802      	bhi.n	8012c02 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012bfc:	f06f 0309 	mvn.w	r3, #9
 8012c00:	e06e      	b.n	8012ce0 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	f003 030f 	and.w	r3, r3, #15
 8012c0a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012c14:	68fa      	ldr	r2, [r7, #12]
 8012c16:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012c18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012c22:	f002 020f 	and.w	r2, r2, #15
 8012c26:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012c28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012c32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012c3c:	f002 020f 	and.w	r2, r2, #15
 8012c40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012c42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012c48:	68fa      	ldr	r2, [r7, #12]
 8012c4a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012c4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012c56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012c5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012c5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012c66:	f002 020f 	and.w	r2, r2, #15
 8012c6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012c6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012c76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012c80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012c84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012c86:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	8958      	ldrh	r0, [r3, #10]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	330a      	adds	r3, #10
 8012c90:	461a      	mov	r2, r3
 8012c92:	2102      	movs	r1, #2
 8012c94:	f7f8 fb54 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	8998      	ldrh	r0, [r3, #12]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	330c      	adds	r3, #12
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	2102      	movs	r1, #2
 8012ca4:	f7f8 fb4c 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012cac:	68fa      	ldr	r2, [r7, #12]
 8012cae:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012cb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012cb6:	68fa      	ldr	r2, [r7, #12]
 8012cb8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012cba:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	6918      	ldr	r0, [r3, #16]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	3312      	adds	r3, #18
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	2104      	movs	r1, #4
 8012cc8:	f7f8 fbda 	bl	800b480 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012cd4:	f002 0201 	and.w	r2, r2, #1
 8012cd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012cda:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3718      	adds	r7, #24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	607a      	str	r2, [r7, #4]
 8012cf4:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8012cfa:	897b      	ldrh	r3, [r7, #10]
 8012cfc:	2b11      	cmp	r3, #17
 8012cfe:	d802      	bhi.n	8012d06 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012d00:	f06f 0309 	mvn.w	r3, #9
 8012d04:	e071      	b.n	8012dea <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	f003 0303 	and.w	r3, r3, #3
 8012d0e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	8858      	ldrh	r0, [r3, #2]
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	2102      	movs	r1, #2
 8012d20:	f7f8 fb0e 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	8898      	ldrh	r0, [r3, #4]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	3303      	adds	r3, #3
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	2102      	movs	r1, #2
 8012d30:	f7f8 fb06 	bl	800b340 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012d3c:	f002 0201 	and.w	r2, r2, #1
 8012d40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012d42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012d4c:	f002 0207 	and.w	r2, r2, #7
 8012d50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012d52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012d5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012d66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012d70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012d74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012d76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012d80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012d84:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012d86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012d90:	f002 0203 	and.w	r2, r2, #3
 8012d94:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012d96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012da0:	f002 0203 	and.w	r2, r2, #3
 8012da4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012da6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012db0:	f002 020f 	and.w	r2, r2, #15
 8012db4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012db6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012dbc:	68fa      	ldr	r2, [r7, #12]
 8012dbe:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012dc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012dc6:	68fa      	ldr	r2, [r7, #12]
 8012dc8:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012dca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012dd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012dde:	f002 0203 	and.w	r2, r2, #3
 8012de2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012de4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3718      	adds	r7, #24
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}

08012df2 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012df2:	b480      	push	{r7}
 8012df4:	b087      	sub	sp, #28
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	60f8      	str	r0, [r7, #12]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	607a      	str	r2, [r7, #4]
 8012dfe:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e00:	2300      	movs	r3, #0
 8012e02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012e04:	897b      	ldrh	r3, [r7, #10]
 8012e06:	2b04      	cmp	r3, #4
 8012e08:	d802      	bhi.n	8012e10 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012e0a:	f06f 0309 	mvn.w	r3, #9
 8012e0e:	e025      	b.n	8012e5c <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	f003 0301 	and.w	r3, r3, #1
 8012e18:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012e26:	f002 0201 	and.w	r2, r2, #1
 8012e2a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012e2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012e36:	f002 0201 	and.w	r2, r2, #1
 8012e3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012e3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012e46:	f002 0203 	and.w	r2, r2, #3
 8012e4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012e4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012e56:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	371c      	adds	r7, #28
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
 8012e70:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e72:	2300      	movs	r3, #0
 8012e74:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d108      	bne.n	8012e90 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012e7e:	f107 0308 	add.w	r3, r7, #8
 8012e82:	461a      	mov	r2, r3
 8012e84:	2105      	movs	r1, #5
 8012e86:	6838      	ldr	r0, [r7, #0]
 8012e88:	f7ff ffb3 	bl	8012df2 <VL53L1_i2c_encode_system_control>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d108      	bne.n	8012eaa <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012e98:	f107 0208 	add.w	r2, r7, #8
 8012e9c:	2305      	movs	r3, #5
 8012e9e:	2183      	movs	r1, #131	; 0x83
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f001 fccd 	bl	8014840 <VL53L1_WriteMulti>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b086      	sub	sp, #24
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	60b9      	str	r1, [r7, #8]
 8012ec0:	607a      	str	r2, [r7, #4]
 8012ec2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012ec8:	89fb      	ldrh	r3, [r7, #14]
 8012eca:	2b2b      	cmp	r3, #43	; 0x2b
 8012ecc:	d802      	bhi.n	8012ed4 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012ece:	f06f 0309 	mvn.w	r3, #9
 8012ed2:	e0e2      	b.n	801309a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012edc:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	785a      	ldrb	r2, [r3, #1]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	3302      	adds	r3, #2
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	f003 030f 	and.w	r3, r3, #15
 8012ef4:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	78da      	ldrb	r2, [r3, #3]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	3304      	adds	r3, #4
 8012f06:	4619      	mov	r1, r3
 8012f08:	2002      	movs	r0, #2
 8012f0a:	f7f8 fa44 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	3306      	adds	r3, #6
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	2002      	movs	r0, #2
 8012f1e:	f7f8 fa3a 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f22:	4603      	mov	r3, r0
 8012f24:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	3308      	adds	r3, #8
 8012f2e:	4619      	mov	r1, r3
 8012f30:	2002      	movs	r0, #2
 8012f32:	f7f8 fa30 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f36:	4603      	mov	r3, r0
 8012f38:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	330a      	adds	r3, #10
 8012f42:	4619      	mov	r1, r3
 8012f44:	2002      	movs	r0, #2
 8012f46:	f7f8 fa26 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	330c      	adds	r3, #12
 8012f56:	4619      	mov	r1, r3
 8012f58:	2002      	movs	r0, #2
 8012f5a:	f7f8 fa1c 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	330e      	adds	r3, #14
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	2002      	movs	r0, #2
 8012f6e:	f7f8 fa12 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	3310      	adds	r3, #16
 8012f7e:	4619      	mov	r1, r3
 8012f80:	2002      	movs	r0, #2
 8012f82:	f7f8 fa08 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f86:	4603      	mov	r3, r0
 8012f88:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	3312      	adds	r3, #18
 8012f92:	4619      	mov	r1, r3
 8012f94:	2002      	movs	r0, #2
 8012f96:	f7f8 f9fe 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	3314      	adds	r3, #20
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	2002      	movs	r0, #2
 8012faa:	f7f8 f9f4 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	3316      	adds	r3, #22
 8012fba:	4619      	mov	r1, r3
 8012fbc:	2002      	movs	r0, #2
 8012fbe:	f7f8 f9ea 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	3318      	adds	r3, #24
 8012fce:	4619      	mov	r1, r3
 8012fd0:	2002      	movs	r0, #2
 8012fd2:	f7f8 f9e0 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	331a      	adds	r3, #26
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	2002      	movs	r0, #2
 8012fe6:	f7f8 f9d6 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012fea:	4603      	mov	r3, r0
 8012fec:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	331c      	adds	r3, #28
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	2002      	movs	r0, #2
 8012ffa:	f7f8 f9cc 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8012ffe:	4603      	mov	r3, r0
 8013000:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	331e      	adds	r3, #30
 801300a:	4619      	mov	r1, r3
 801300c:	2002      	movs	r0, #2
 801300e:	f7f8 f9c2 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8013012:	4603      	mov	r3, r0
 8013014:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	3320      	adds	r3, #32
 801301e:	4619      	mov	r1, r3
 8013020:	2002      	movs	r0, #2
 8013022:	f7f8 f9b8 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8013026:	4603      	mov	r3, r0
 8013028:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	3322      	adds	r3, #34	; 0x22
 8013032:	4619      	mov	r1, r3
 8013034:	2002      	movs	r0, #2
 8013036:	f7f8 f9ae 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801303a:	4603      	mov	r3, r0
 801303c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	3324      	adds	r3, #36	; 0x24
 8013046:	4619      	mov	r1, r3
 8013048:	2002      	movs	r0, #2
 801304a:	f7f8 f9a4 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801304e:	4603      	mov	r3, r0
 8013050:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	3326      	adds	r3, #38	; 0x26
 801305a:	4619      	mov	r1, r3
 801305c:	2002      	movs	r0, #2
 801305e:	f7f8 f99a 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8013062:	4603      	mov	r3, r0
 8013064:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	3328      	adds	r3, #40	; 0x28
 801306e:	4619      	mov	r1, r3
 8013070:	2002      	movs	r0, #2
 8013072:	f7f8 f990 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8013076:	4603      	mov	r3, r0
 8013078:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8013096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801309a:	4618      	mov	r0, r3
 801309c:	3718      	adds	r7, #24
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}

080130a2 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b086      	sub	sp, #24
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	4603      	mov	r3, r0
 80130aa:	60b9      	str	r1, [r7, #8]
 80130ac:	607a      	str	r2, [r7, #4]
 80130ae:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80130b0:	2300      	movs	r3, #0
 80130b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 80130b4:	89fb      	ldrh	r3, [r7, #14]
 80130b6:	2b20      	cmp	r3, #32
 80130b8:	d802      	bhi.n	80130c0 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80130ba:	f06f 0309 	mvn.w	r3, #9
 80130be:	e04d      	b.n	801315c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80130c0:	68b9      	ldr	r1, [r7, #8]
 80130c2:	2004      	movs	r0, #4
 80130c4:	f7f8 fa06 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 80130c8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	3304      	adds	r3, #4
 80130d2:	4619      	mov	r1, r3
 80130d4:	2004      	movs	r0, #4
 80130d6:	f7f8 f9fd 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 80130da:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	3308      	adds	r3, #8
 80130e4:	4619      	mov	r1, r3
 80130e6:	2004      	movs	r0, #4
 80130e8:	f7f8 fa11 	bl	800b50e <VL53L1_i2c_decode_int32_t>
 80130ec:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	330c      	adds	r3, #12
 80130f6:	4619      	mov	r1, r3
 80130f8:	2004      	movs	r0, #4
 80130fa:	f7f8 f9eb 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 80130fe:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	3310      	adds	r3, #16
 8013108:	4619      	mov	r1, r3
 801310a:	2004      	movs	r0, #4
 801310c:	f7f8 f9e2 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 8013110:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	3314      	adds	r3, #20
 801311a:	4619      	mov	r1, r3
 801311c:	2004      	movs	r0, #4
 801311e:	f7f8 f9d9 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 8013122:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	3318      	adds	r3, #24
 801312c:	4619      	mov	r1, r3
 801312e:	2004      	movs	r0, #4
 8013130:	f7f8 f9ed 	bl	800b50e <VL53L1_i2c_decode_int32_t>
 8013134:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	331c      	adds	r3, #28
 801313e:	4619      	mov	r1, r3
 8013140:	2004      	movs	r0, #4
 8013142:	f7f8 f9c7 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 8013146:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8013158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801315c:	4618      	mov	r0, r3
 801315e:	3718      	adds	r7, #24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b086      	sub	sp, #24
 8013168:	af00      	add	r7, sp, #0
 801316a:	4603      	mov	r3, r0
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013172:	2300      	movs	r3, #0
 8013174:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8013176:	89fb      	ldrh	r3, [r7, #14]
 8013178:	2b37      	cmp	r3, #55	; 0x37
 801317a:	d802      	bhi.n	8013182 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801317c:	f06f 0309 	mvn.w	r3, #9
 8013180:	e15e      	b.n	8013440 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8013182:	68b9      	ldr	r1, [r7, #8]
 8013184:	2002      	movs	r0, #2
 8013186:	f7f8 f906 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801318a:	4603      	mov	r3, r0
 801318c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	3302      	adds	r3, #2
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801319c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	3303      	adds	r3, #3
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131ac:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	3304      	adds	r3, #4
 80131b6:	781b      	ldrb	r3, [r3, #0]
 80131b8:	f003 0303 	and.w	r3, r3, #3
 80131bc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	3305      	adds	r3, #5
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	f003 0301 	and.w	r3, r3, #1
 80131cc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	3306      	adds	r3, #6
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131dc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	3307      	adds	r3, #7
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131ec:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	3308      	adds	r3, #8
 80131f6:	4619      	mov	r1, r3
 80131f8:	2002      	movs	r0, #2
 80131fa:	f7f8 f8cc 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80131fe:	4603      	mov	r3, r0
 8013200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013204:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	330a      	adds	r3, #10
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	f003 0303 	and.w	r3, r3, #3
 8013214:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	330b      	adds	r3, #11
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	f003 0303 	and.w	r3, r3, #3
 8013224:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	330c      	adds	r3, #12
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	f003 030f 	and.w	r3, r3, #15
 8013234:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	330d      	adds	r3, #13
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	f003 0307 	and.w	r3, r3, #7
 8013244:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	330e      	adds	r3, #14
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f003 0301 	and.w	r3, r3, #1
 8013254:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	330f      	adds	r3, #15
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	f003 0303 	and.w	r3, r3, #3
 8013264:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	7c1a      	ldrb	r2, [r3, #16]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	7c5a      	ldrb	r2, [r3, #17]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	3312      	adds	r3, #18
 801327e:	4619      	mov	r1, r3
 8013280:	2002      	movs	r0, #2
 8013282:	f7f8 f888 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 8013286:	4603      	mov	r3, r0
 8013288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801328c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	3316      	adds	r3, #22
 8013296:	4619      	mov	r1, r3
 8013298:	2002      	movs	r0, #2
 801329a:	f7f8 f87c 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801329e:	4603      	mov	r3, r0
 80132a0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	3318      	adds	r3, #24
 80132aa:	4619      	mov	r1, r3
 80132ac:	2002      	movs	r0, #2
 80132ae:	f7f8 f872 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 80132b2:	4603      	mov	r3, r0
 80132b4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	331a      	adds	r3, #26
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	f003 0301 	and.w	r3, r3, #1
 80132c4:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	331b      	adds	r3, #27
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	f003 0307 	and.w	r3, r3, #7
 80132d4:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	7f1a      	ldrb	r2, [r3, #28]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	7f5a      	ldrb	r2, [r3, #29]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	331e      	adds	r3, #30
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132f4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	331f      	adds	r3, #31
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013304:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	3320      	adds	r3, #32
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	f003 0303 	and.w	r3, r3, #3
 8013314:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	3321      	adds	r3, #33	; 0x21
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 030f 	and.w	r3, r3, #15
 8013324:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	3325      	adds	r3, #37	; 0x25
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	f003 0301 	and.w	r3, r3, #1
 8013358:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	3326      	adds	r3, #38	; 0x26
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	f003 0303 	and.w	r3, r3, #3
 801336a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	3327      	adds	r3, #39	; 0x27
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	f003 031f 	and.w	r3, r3, #31
 801337c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	3328      	adds	r3, #40	; 0x28
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	f003 031f 	and.w	r3, r3, #31
 801338e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	3329      	adds	r3, #41	; 0x29
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	f003 031f 	and.w	r3, r3, #31
 80133a0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	332a      	adds	r3, #42	; 0x2a
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	f003 0301 	and.w	r3, r3, #1
 80133b2:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	332b      	adds	r3, #43	; 0x2b
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	332c      	adds	r3, #44	; 0x2c
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	f003 0303 	and.w	r3, r3, #3
 80133d6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	332d      	adds	r3, #45	; 0x2d
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80133e8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	332e      	adds	r3, #46	; 0x2e
 80133f4:	4619      	mov	r1, r3
 80133f6:	2004      	movs	r0, #4
 80133f8:	f7f8 f86c 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 80133fc:	4603      	mov	r3, r0
 80133fe:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	3332      	adds	r3, #50	; 0x32
 801340a:	4619      	mov	r1, r3
 801340c:	2004      	movs	r0, #4
 801340e:	f7f8 f861 	bl	800b4d4 <VL53L1_i2c_decode_uint32_t>
 8013412:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	3336      	adds	r3, #54	; 0x36
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	f003 0301 	and.w	r3, r3, #1
 8013422:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	3337      	adds	r3, #55	; 0x37
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	f003 0301 	and.w	r3, r3, #1
 8013434:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 801343c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013440:	4618      	mov	r0, r3
 8013442:	3718      	adds	r7, #24
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}

08013448 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af00      	add	r7, sp, #0
 801344e:	4603      	mov	r3, r0
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
 8013454:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013456:	2300      	movs	r3, #0
 8013458:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801345a:	89fb      	ldrh	r3, [r7, #14]
 801345c:	2b30      	cmp	r3, #48	; 0x30
 801345e:	d802      	bhi.n	8013466 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013460:	f06f 0309 	mvn.w	r3, #9
 8013464:	e112      	b.n	801368c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	785a      	ldrb	r2, [r3, #1]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	789a      	ldrb	r2, [r3, #2]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	3303      	adds	r3, #3
 8013482:	4619      	mov	r1, r3
 8013484:	2002      	movs	r0, #2
 8013486:	f7f7 ff86 	bl	800b396 <VL53L1_i2c_decode_uint16_t>
 801348a:	4603      	mov	r3, r0
 801348c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	3305      	adds	r3, #5
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801349c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	3306      	adds	r3, #6
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 0307 	and.w	r3, r3, #7
 80134ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	3307      	adds	r3, #7
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	f003 0307 	and.w	r3, r3, #7
 80134bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	3308      	adds	r3, #8
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	3309      	adds	r3, #9
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	330a      	adds	r3, #10
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	f003 0301 	and.w	r3, r3, #1
 80134ec:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	330b      	adds	r3, #11
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134fc:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	330c      	adds	r3, #12
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	f003 0301 	and.w	r3, r3, #1
 801350c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	330d      	adds	r3, #13
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801351c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	330e      	adds	r3, #14
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801352c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	7bda      	ldrb	r2, [r3, #15]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	7c1a      	ldrb	r2, [r3, #16]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	7c5a      	ldrb	r2, [r3, #17]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	7c9a      	ldrb	r2, [r3, #18]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	7cda      	ldrb	r2, [r3, #19]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	7d1a      	ldrb	r2, [r3, #20]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	7d5a      	ldrb	r2, [r3, #21]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	7d9a      	ldrb	r2, [r3, #22]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	7dda      	ldrb	r2, [r3, #23]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801357a:	68bb      	ldr	r3, [r7, #8]
 801357c:	7e1a      	ldrb	r2, [r3, #24]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	7e5a      	ldrb	r2, [r3, #25]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	7e9a      	ldrb	r2, [r3, #26]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	7eda      	ldrb	r2, [r3, #27]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	7f1a      	ldrb	r2, [r3, #28]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80135a2:	68bb      	ldr	r3, [r7, #8]
 80135a4:	7f5a      	ldrb	r2, [r3, #29]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	7f9a      	ldrb	r2, [r3, #30]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	7fda      	ldrb	r2, [r3, #31]
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	f893 2020 	ldrb.w	r2, [r3, #32]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8013688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801368c:	4618      	mov	r0, r3
 801368e:	3718      	adds	r7, #24
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b090      	sub	sp, #64	; 0x40
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801369e:	2300      	movs	r3, #0
 80136a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80136a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d10a      	bne.n	80136c2 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80136ac:	f107 020c 	add.w	r2, r7, #12
 80136b0:	2331      	movs	r3, #49	; 0x31
 80136b2:	f240 110f 	movw	r1, #271	; 0x10f
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f001 f8f8 	bl	80148ac <VL53L1_ReadMulti>
 80136bc:	4603      	mov	r3, r0
 80136be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80136c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d109      	bne.n	80136de <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80136ca:	f107 030c 	add.w	r3, r7, #12
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	4619      	mov	r1, r3
 80136d2:	2031      	movs	r0, #49	; 0x31
 80136d4:	f7ff feb8 	bl	8013448 <VL53L1_i2c_decode_nvm_copy_data>
 80136d8:	4603      	mov	r3, r0
 80136da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80136de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3740      	adds	r7, #64	; 0x40
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 80136ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80136ee:	b0d6      	sub	sp, #344	; 0x158
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80136f6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80136fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80136fe:	4603      	mov	r3, r0
 8013700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013704:	23f1      	movs	r3, #241	; 0xf1
 8013706:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801370a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801370e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013712:	2300      	movs	r3, #0
 8013714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8013718:	f04f 0200 	mov.w	r2, #0
 801371c:	f04f 0300 	mov.w	r3, #0
 8013720:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013724:	f04f 0200 	mov.w	r2, #0
 8013728:	f04f 0300 	mov.w	r3, #0
 801372c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013730:	f04f 0200 	mov.w	r2, #0
 8013734:	f04f 0300 	mov.w	r3, #0
 8013738:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 801373c:	f04f 0200 	mov.w	r2, #0
 8013740:	f04f 0300 	mov.w	r3, #0
 8013744:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8013748:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801374c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013750:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8013752:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 8322 	beq.w	8013da0 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 801375c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013760:	4618      	mov	r0, r3
 8013762:	f7fb fa23 	bl	800ebac <VL53L1_calc_pll_period_mm>
 8013766:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801376a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801376e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013772:	429a      	cmp	r2, r3
 8013774:	d91a      	bls.n	80137ac <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8013776:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801377a:	2200      	movs	r2, #0
 801377c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013780:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 8013784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013788:	2200      	movs	r2, #0
 801378a:	4698      	mov	r8, r3
 801378c:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 801378e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013792:	460b      	mov	r3, r1
 8013794:	ebb3 0308 	subs.w	r3, r3, r8
 8013798:	63bb      	str	r3, [r7, #56]	; 0x38
 801379a:	4613      	mov	r3, r2
 801379c:	eb63 0309 	sbc.w	r3, r3, r9
 80137a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80137a2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80137a6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80137aa:	e013      	b.n	80137d4 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80137ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80137b0:	2200      	movs	r2, #0
 80137b2:	469a      	mov	sl, r3
 80137b4:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80137b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80137ba:	2200      	movs	r2, #0
 80137bc:	461c      	mov	r4, r3
 80137be:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80137c0:	ebba 0304 	subs.w	r3, sl, r4
 80137c4:	633b      	str	r3, [r7, #48]	; 0x30
 80137c6:	eb6b 0305 	sbc.w	r3, fp, r5
 80137ca:	637b      	str	r3, [r7, #52]	; 0x34
 80137cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80137d0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80137d4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80137d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80137dc:	429a      	cmp	r2, r3
 80137de:	d91f      	bls.n	8013820 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80137e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80137e4:	2200      	movs	r2, #0
 80137e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80137ea:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 80137ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80137f2:	2200      	movs	r2, #0
 80137f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80137f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 80137fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013800:	4623      	mov	r3, r4
 8013802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013806:	4602      	mov	r2, r0
 8013808:	1a9b      	subs	r3, r3, r2
 801380a:	62bb      	str	r3, [r7, #40]	; 0x28
 801380c:	462b      	mov	r3, r5
 801380e:	460a      	mov	r2, r1
 8013810:	eb63 0302 	sbc.w	r3, r3, r2
 8013814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013816:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801381a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 801381e:	e01e      	b.n	801385e <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013820:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013824:	2200      	movs	r2, #0
 8013826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801382a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 801382e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013832:	2200      	movs	r2, #0
 8013834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013838:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 801383c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013840:	4623      	mov	r3, r4
 8013842:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013846:	4602      	mov	r2, r0
 8013848:	1a9b      	subs	r3, r3, r2
 801384a:	623b      	str	r3, [r7, #32]
 801384c:	462b      	mov	r3, r5
 801384e:	460a      	mov	r2, r1
 8013850:	eb63 0302 	sbc.w	r3, r3, r2
 8013854:	627b      	str	r3, [r7, #36]	; 0x24
 8013856:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801385a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 801385e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013862:	4313      	orrs	r3, r2
 8013864:	f000 829c 	beq.w	8013da0 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013868:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801386c:	2200      	movs	r2, #0
 801386e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013872:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8013876:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801387a:	2200      	movs	r2, #0
 801387c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013880:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013884:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8013888:	4623      	mov	r3, r4
 801388a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801388e:	4602      	mov	r2, r0
 8013890:	189b      	adds	r3, r3, r2
 8013892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013896:	460b      	mov	r3, r1
 8013898:	462a      	mov	r2, r5
 801389a:	eb42 0303 	adc.w	r3, r2, r3
 801389e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80138a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80138a6:	2200      	movs	r2, #0
 80138a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80138ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80138b0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80138b4:	4623      	mov	r3, r4
 80138b6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80138ba:	4602      	mov	r2, r0
 80138bc:	189b      	adds	r3, r3, r2
 80138be:	61bb      	str	r3, [r7, #24]
 80138c0:	460b      	mov	r3, r1
 80138c2:	462a      	mov	r2, r5
 80138c4:	eb42 0303 	adc.w	r3, r2, r3
 80138c8:	61fb      	str	r3, [r7, #28]
 80138ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80138ce:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80138d2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138d6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80138da:	f173 0300 	sbcs.w	r3, r3, #0
 80138de:	d305      	bcc.n	80138ec <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 80138e0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80138e4:	f04f 0300 	mov.w	r3, #0
 80138e8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 80138ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80138f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80138f4:	fb03 f102 	mul.w	r1, r3, r2
 80138f8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80138fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013900:	fb02 f303 	mul.w	r3, r2, r3
 8013904:	18ca      	adds	r2, r1, r3
 8013906:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801390a:	fba3 1303 	umull	r1, r3, r3, r3
 801390e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013912:	460b      	mov	r3, r1
 8013914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801391c:	18d3      	adds	r3, r2, r3
 801391e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013922:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8013926:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801392a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 801392e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013932:	f04f 0000 	mov.w	r0, #0
 8013936:	f04f 0100 	mov.w	r1, #0
 801393a:	0219      	lsls	r1, r3, #8
 801393c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013940:	0210      	lsls	r0, r2, #8
 8013942:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 8013946:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801394a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801394e:	d305      	bcc.n	801395c <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013950:	f04f 32ff 	mov.w	r2, #4294967295
 8013954:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013958:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801395c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013960:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013964:	f7ec fcac 	bl	80002c0 <__aeabi_uldivmod>
 8013968:	4602      	mov	r2, r0
 801396a:	460b      	mov	r3, r1
 801396c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013970:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013974:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013978:	f7ec fca2 	bl	80002c0 <__aeabi_uldivmod>
 801397c:	4602      	mov	r2, r0
 801397e:	460b      	mov	r3, r1
 8013980:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 8013984:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013988:	2b80      	cmp	r3, #128	; 0x80
 801398a:	d305      	bcc.n	8013998 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 801398c:	f04f 32ff 	mov.w	r2, #4294967295
 8013990:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8013994:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 8013998:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801399c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139a0:	fb03 f102 	mul.w	r1, r3, r2
 80139a4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80139a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80139ac:	fb02 f303 	mul.w	r3, r2, r3
 80139b0:	4419      	add	r1, r3
 80139b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80139b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80139ba:	fba2 2303 	umull	r2, r3, r2, r3
 80139be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80139c2:	4613      	mov	r3, r2
 80139c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80139c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80139cc:	18cb      	adds	r3, r1, r3
 80139ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80139d2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80139d6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80139da:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80139de:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80139e2:	2200      	movs	r2, #0
 80139e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80139e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80139ec:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80139f0:	2200      	movs	r2, #0
 80139f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80139f6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80139fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80139fe:	4623      	mov	r3, r4
 8013a00:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013a04:	4602      	mov	r2, r0
 8013a06:	189b      	adds	r3, r3, r2
 8013a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	462a      	mov	r2, r5
 8013a10:	eb42 0303 	adc.w	r3, r2, r3
 8013a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013a18:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013a20:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013a22:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013a26:	4623      	mov	r3, r4
 8013a28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	189b      	adds	r3, r3, r2
 8013a30:	673b      	str	r3, [r7, #112]	; 0x70
 8013a32:	460b      	mov	r3, r1
 8013a34:	462a      	mov	r2, r5
 8013a36:	eb42 0303 	adc.w	r3, r2, r3
 8013a3a:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013a3c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013a40:	2200      	movs	r2, #0
 8013a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8013a44:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013a46:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8013a4a:	4623      	mov	r3, r4
 8013a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013a50:	4602      	mov	r2, r0
 8013a52:	189b      	adds	r3, r3, r2
 8013a54:	613b      	str	r3, [r7, #16]
 8013a56:	460b      	mov	r3, r1
 8013a58:	462a      	mov	r2, r5
 8013a5a:	eb42 0303 	adc.w	r3, r2, r3
 8013a5e:	617b      	str	r3, [r7, #20]
 8013a60:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013a64:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8013a68:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a6c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013a70:	f173 0300 	sbcs.w	r3, r3, #0
 8013a74:	d305      	bcc.n	8013a82 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8013a76:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013a7a:	f04f 0300 	mov.w	r3, #0
 8013a7e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 8013a82:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013a86:	f04f 0000 	mov.w	r0, #0
 8013a8a:	f04f 0100 	mov.w	r1, #0
 8013a8e:	0219      	lsls	r1, r3, #8
 8013a90:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013a94:	0210      	lsls	r0, r2, #8
 8013a96:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 8013a9a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a9e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013aa2:	1884      	adds	r4, r0, r2
 8013aa4:	60bc      	str	r4, [r7, #8]
 8013aa6:	eb41 0303 	adc.w	r3, r1, r3
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013ab0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013ab4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	da05      	bge.n	8013ac8 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013abc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ac4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013ac8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d331      	bcc.n	8013b34 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013ad0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013ad4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ad8:	f7ec fbf2 	bl	80002c0 <__aeabi_uldivmod>
 8013adc:	4602      	mov	r2, r0
 8013ade:	460b      	mov	r3, r1
 8013ae0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013ae8:	2200      	movs	r2, #0
 8013aea:	663b      	str	r3, [r7, #96]	; 0x60
 8013aec:	667a      	str	r2, [r7, #100]	; 0x64
 8013aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013af2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013af6:	4622      	mov	r2, r4
 8013af8:	fb02 f203 	mul.w	r2, r2, r3
 8013afc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b00:	4629      	mov	r1, r5
 8013b02:	fb01 f303 	mul.w	r3, r1, r3
 8013b06:	441a      	add	r2, r3
 8013b08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b0c:	4621      	mov	r1, r4
 8013b0e:	fba3 1301 	umull	r1, r3, r3, r1
 8013b12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013b16:	460b      	mov	r3, r1
 8013b18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b20:	18d3      	adds	r3, r2, r3
 8013b22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013b26:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8013b2a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b2e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b32:	e030      	b.n	8013b96 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b38:	2200      	movs	r2, #0
 8013b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8013b3c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b42:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013b46:	4622      	mov	r2, r4
 8013b48:	fb02 f203 	mul.w	r2, r2, r3
 8013b4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b50:	4629      	mov	r1, r5
 8013b52:	fb01 f303 	mul.w	r3, r1, r3
 8013b56:	441a      	add	r2, r3
 8013b58:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b5c:	4621      	mov	r1, r4
 8013b5e:	fba3 1301 	umull	r1, r3, r3, r1
 8013b62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b66:	460b      	mov	r3, r1
 8013b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013b70:	18d3      	adds	r3, r2, r3
 8013b72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013b76:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8013b7a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b7e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013b82:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013b86:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b8a:	f7ec fb99 	bl	80002c0 <__aeabi_uldivmod>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013b96:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	da05      	bge.n	8013baa <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ba6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013baa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d33d      	bcc.n	8013c2e <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013bb2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013bb6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bba:	f7ec fb81 	bl	80002c0 <__aeabi_uldivmod>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013bc6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bca:	f04f 0200 	mov.w	r2, #0
 8013bce:	f04f 0300 	mov.w	r3, #0
 8013bd2:	0882      	lsrs	r2, r0, #2
 8013bd4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013bd8:	088b      	lsrs	r3, r1, #2
 8013bda:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013be2:	2200      	movs	r2, #0
 8013be4:	653b      	str	r3, [r7, #80]	; 0x50
 8013be6:	657a      	str	r2, [r7, #84]	; 0x54
 8013be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013bec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013bf0:	4622      	mov	r2, r4
 8013bf2:	fb02 f203 	mul.w	r2, r2, r3
 8013bf6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	fb01 f303 	mul.w	r3, r1, r3
 8013c00:	4413      	add	r3, r2
 8013c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013c06:	4621      	mov	r1, r4
 8013c08:	fba2 1201 	umull	r1, r2, r2, r1
 8013c0c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013c10:	460a      	mov	r2, r1
 8013c12:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013c16:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013c1a:	4413      	add	r3, r2
 8013c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013c20:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013c24:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c28:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c2c:	e03c      	b.n	8013ca8 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c32:	2200      	movs	r2, #0
 8013c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013c3c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013c40:	4622      	mov	r2, r4
 8013c42:	fb02 f203 	mul.w	r2, r2, r3
 8013c46:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	fb01 f303 	mul.w	r3, r1, r3
 8013c50:	4413      	add	r3, r2
 8013c52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013c56:	4621      	mov	r1, r4
 8013c58:	fba2 1201 	umull	r1, r2, r2, r1
 8013c5c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013c60:	460a      	mov	r2, r1
 8013c62:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8013c66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013c70:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013c74:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013c78:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013c7c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013c80:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c84:	f7ec fb1c 	bl	80002c0 <__aeabi_uldivmod>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013c90:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c94:	f04f 0200 	mov.w	r2, #0
 8013c98:	f04f 0300 	mov.w	r3, #0
 8013c9c:	0882      	lsrs	r2, r0, #2
 8013c9e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013ca2:	088b      	lsrs	r3, r1, #2
 8013ca4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013ca8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	da05      	bge.n	8013cbc <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013cb8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013cbc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013cc0:	f04f 0200 	mov.w	r2, #0
 8013cc4:	f04f 0300 	mov.w	r3, #0
 8013cc8:	0882      	lsrs	r2, r0, #2
 8013cca:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013cce:	088b      	lsrs	r3, r1, #2
 8013cd0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013cd4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d305      	bcc.n	8013ce8 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ce0:	f04f 0300 	mov.w	r3, #0
 8013ce4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8013ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013cec:	2200      	movs	r2, #0
 8013cee:	643b      	str	r3, [r7, #64]	; 0x40
 8013cf0:	647a      	str	r2, [r7, #68]	; 0x44
 8013cf2:	f04f 0200 	mov.w	r2, #0
 8013cf6:	f04f 0300 	mov.w	r3, #0
 8013cfa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013cfe:	4629      	mov	r1, r5
 8013d00:	01cb      	lsls	r3, r1, #7
 8013d02:	4621      	mov	r1, r4
 8013d04:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013d08:	4621      	mov	r1, r4
 8013d0a:	01ca      	lsls	r2, r1, #7
 8013d0c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013d10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013d14:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013d18:	fb03 f202 	mul.w	r2, r3, r2
 8013d1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013d20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013d24:	fb01 f303 	mul.w	r3, r1, r3
 8013d28:	441a      	add	r2, r3
 8013d2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013d2e:	fba3 1303 	umull	r1, r3, r3, r3
 8013d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d36:	460b      	mov	r3, r1
 8013d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d40:	18d3      	adds	r3, r2, r3
 8013d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d46:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013d4a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013d4e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013d52:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013d56:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013d5a:	1884      	adds	r4, r0, r2
 8013d5c:	603c      	str	r4, [r7, #0]
 8013d5e:	eb41 0303 	adc.w	r3, r1, r3
 8013d62:	607b      	str	r3, [r7, #4]
 8013d64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013d68:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013d6c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d305      	bcc.n	8013d80 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013d74:	f04f 32ff 	mov.w	r2, #4294967295
 8013d78:	f04f 0300 	mov.w	r3, #0
 8013d7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013d80:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fa fdaa 	bl	800e8de <VL53L1_isqrt>
 8013d8a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013d98:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013da0:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013daa:	46bd      	mov	sp, r7
 8013dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013db0 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b086      	sub	sp, #24
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013db8:	2300      	movs	r3, #0
 8013dba:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3318      	adds	r3, #24
 8013dc0:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	781b      	ldrb	r3, [r3, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d107      	bne.n	8013dde <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013dce:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 f88b 	bl	8013eee <VL53L1_poll_for_range_completion>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	75fb      	strb	r3, [r7, #23]
 8013ddc:	e01b      	b.n	8013e16 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013dde:	2300      	movs	r3, #0
 8013de0:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013de2:	e011      	b.n	8013e08 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013de4:	f107 030f 	add.w	r3, r7, #15
 8013de8:	4619      	mov	r1, r3
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f000 f819 	bl	8013e22 <VL53L1_is_new_data_ready>
 8013df0:	4603      	mov	r3, r0
 8013df2:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d105      	bne.n	8013e08 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013dfc:	2101      	movs	r1, #1
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f000 fe6e 	bl	8014ae0 <VL53L1_WaitMs>
 8013e04:	4603      	mov	r3, r0
 8013e06:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013e08:	7bfb      	ldrb	r3, [r7, #15]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d103      	bne.n	8013e16 <VL53L1_wait_for_test_completion+0x66>
 8013e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d0e6      	beq.n	8013de4 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	3718      	adds	r7, #24
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	bd80      	pop	{r7, pc}

08013e22 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013e22:	b580      	push	{r7, lr}
 8013e24:	b086      	sub	sp, #24
 8013e26:	af00      	add	r7, sp, #0
 8013e28:	6078      	str	r0, [r7, #4]
 8013e2a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3318      	adds	r3, #24
 8013e34:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013e36:	2300      	movs	r3, #0
 8013e38:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013e48:	f003 0310 	and.w	r3, r3, #16
 8013e4c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013e4e:	7bfb      	ldrb	r3, [r7, #15]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d102      	bne.n	8013e5a <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013e54:	2301      	movs	r3, #1
 8013e56:	75fb      	strb	r3, [r7, #23]
 8013e58:	e001      	b.n	8013e5e <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013e5e:	f107 030e 	add.w	r3, r7, #14
 8013e62:	461a      	mov	r2, r3
 8013e64:	2131      	movs	r1, #49	; 0x31
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f000 fdb2 	bl	80149d0 <VL53L1_RdByte>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013e70:	7bbb      	ldrb	r3, [r7, #14]
 8013e72:	f003 0201 	and.w	r2, r3, #1
 8013e76:	7dfb      	ldrb	r3, [r7, #23]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d103      	bne.n	8013e84 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	701a      	strb	r2, [r3, #0]
 8013e82:	e002      	b.n	8013e8a <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	2200      	movs	r2, #0
 8013e88:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013e8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3718      	adds	r7, #24
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b086      	sub	sp, #24
 8013e9a:	af02      	add	r7, sp, #8
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013ea4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fe29 	bl	8014b00 <VL53L1_WaitUs>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10b      	bne.n	8013ed2 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013eba:	2301      	movs	r3, #1
 8013ebc:	9301      	str	r3, [sp, #4]
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	22e5      	movs	r2, #229	; 0xe5
 8013ec6:	6839      	ldr	r1, [r7, #0]
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f000 fe31 	bl	8014b30 <VL53L1_WaitValueMaskEx>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d103      	bne.n	8013ee2 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013eda:	2103      	movs	r1, #3
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7f6 fc38 	bl	800a752 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3710      	adds	r7, #16
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}

08013eee <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013eee:	b580      	push	{r7, lr}
 8013ef0:	b088      	sub	sp, #32
 8013ef2:	af02      	add	r7, sp, #8
 8013ef4:	6078      	str	r0, [r7, #4]
 8013ef6:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	3318      	adds	r3, #24
 8013f00:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013f02:	2300      	movs	r3, #0
 8013f04:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013f10:	f003 0310 	and.w	r3, r3, #16
 8013f14:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d102      	bne.n	8013f22 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	75fb      	strb	r3, [r7, #23]
 8013f20:	e001      	b.n	8013f26 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013f22:	2300      	movs	r3, #0
 8013f24:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	2201      	movs	r2, #1
 8013f2a:	9201      	str	r2, [sp, #4]
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	9200      	str	r2, [sp, #0]
 8013f30:	2231      	movs	r2, #49	; 0x31
 8013f32:	6839      	ldr	r1, [r7, #0]
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f000 fdfb 	bl	8014b30 <VL53L1_WaitValueMaskEx>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013f3e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3718      	adds	r7, #24
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}

08013f4a <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013f4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013f4e:	b0c0      	sub	sp, #256	; 0x100
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013f56:	4618      	mov	r0, r3
 8013f58:	460b      	mov	r3, r1
 8013f5a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013f5e:	4613      	mov	r3, r2
 8013f60:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013f64:	4603      	mov	r3, r0
 8013f66:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013f82:	2300      	movs	r3, #0
 8013f84:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013f94:	f04f 0200 	mov.w	r2, #0
 8013f98:	f04f 0300 	mov.w	r3, #0
 8013f9c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013fa0:	f04f 0200 	mov.w	r2, #0
 8013fa4:	f04f 0300 	mov.w	r3, #0
 8013fa8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013fac:	f04f 0200 	mov.w	r2, #0
 8013fb0:	f04f 0300 	mov.w	r3, #0
 8013fb4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013fb8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d108      	bne.n	8013fd2 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013fc0:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013fc4:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013fc8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7fb f867 	bl	800f0a0 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013fd2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d165      	bne.n	80140a6 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013fda:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013fde:	091b      	lsrs	r3, r3, #4
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	f003 0301 	and.w	r3, r3, #1
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00e      	beq.n	8014008 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013fea:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013ff4:	095b      	lsrs	r3, r3, #5
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	1ad3      	subs	r3, r2, r3
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	3b01      	subs	r3, #1
 8014000:	b29b      	uxth	r3, r3
 8014002:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8014006:	e00b      	b.n	8014020 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8014008:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 801400c:	b29a      	uxth	r2, r3
 801400e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014012:	095b      	lsrs	r3, r3, #5
 8014014:	b2db      	uxtb	r3, r3
 8014016:	b29b      	uxth	r3, r3
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	b29b      	uxth	r3, r3
 801401c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8014020:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8014024:	b29a      	uxth	r2, r3
 8014026:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801402a:	095b      	lsrs	r3, r3, #5
 801402c:	b2db      	uxtb	r3, r3
 801402e:	b29b      	uxth	r3, r3
 8014030:	4413      	add	r3, r2
 8014032:	b29b      	uxth	r3, r3
 8014034:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8014038:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801403c:	f003 0301 	and.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	d011      	beq.n	8014068 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8014044:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8014048:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801404a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801404e:	f003 020f 	and.w	r2, r3, #15
 8014052:	0fd3      	lsrs	r3, r2, #31
 8014054:	4413      	add	r3, r2
 8014056:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8014058:	b29b      	uxth	r3, r3
 801405a:	1acb      	subs	r3, r1, r3
 801405c:	b29b      	uxth	r3, r3
 801405e:	3b01      	subs	r3, #1
 8014060:	b29b      	uxth	r3, r3
 8014062:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8014066:	e00f      	b.n	8014088 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8014068:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801406c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 801406e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014072:	f003 020f 	and.w	r2, r3, #15
 8014076:	0fd3      	lsrs	r3, r2, #31
 8014078:	4413      	add	r3, r2
 801407a:	105b      	asrs	r3, r3, #1
 801407c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 801407e:	b29b      	uxth	r3, r3
 8014080:	440b      	add	r3, r1
 8014082:	b29b      	uxth	r3, r3
 8014084:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8014088:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 801408c:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 801408e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8014092:	f003 020f 	and.w	r2, r3, #15
 8014096:	0fd3      	lsrs	r3, r2, #31
 8014098:	4413      	add	r3, r2
 801409a:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 801409c:	b29b      	uxth	r3, r3
 801409e:	440b      	add	r3, r1
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 80140a6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d133      	bne.n	8014116 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80140ae:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80140b2:	b29a      	uxth	r2, r3
 80140b4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80140b8:	4413      	add	r3, r2
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	b29b      	uxth	r3, r3
 80140c0:	3b0f      	subs	r3, #15
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80140c8:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80140d2:	4413      	add	r3, r2
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	b29b      	uxth	r3, r3
 80140da:	3b0f      	subs	r3, #15
 80140dc:	b29b      	uxth	r3, r3
 80140de:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80140e2:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80140ec:	4413      	add	r3, r2
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	005b      	lsls	r3, r3, #1
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	3b0f      	subs	r3, #15
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 80140fc:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8014100:	b29a      	uxth	r2, r3
 8014102:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8014106:	4413      	add	r3, r2
 8014108:	b29b      	uxth	r3, r3
 801410a:	005b      	lsls	r3, r3, #1
 801410c:	b29b      	uxth	r3, r3
 801410e:	3b0f      	subs	r3, #15
 8014110:	b29b      	uxth	r3, r3
 8014112:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8014116:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801411a:	2b00      	cmp	r3, #0
 801411c:	f040 8135 	bne.w	801438a <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014120:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8014124:	17da      	asrs	r2, r3, #31
 8014126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801412a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801412e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8014132:	17da      	asrs	r2, r3, #31
 8014134:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014138:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 801413c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014140:	460b      	mov	r3, r1
 8014142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014146:	fb02 f203 	mul.w	r2, r2, r3
 801414a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801414e:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8014152:	4601      	mov	r1, r0
 8014154:	fb01 f303 	mul.w	r3, r1, r3
 8014158:	4413      	add	r3, r2
 801415a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801415e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014162:	fba2 4501 	umull	r4, r5, r2, r1
 8014166:	442b      	add	r3, r5
 8014168:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801416a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 801416e:	17da      	asrs	r2, r3, #31
 8014170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014174:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8014178:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 801417c:	17da      	asrs	r2, r3, #31
 801417e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014182:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801418a:	460b      	mov	r3, r1
 801418c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014190:	fb02 f203 	mul.w	r2, r2, r3
 8014194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014198:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 801419c:	4601      	mov	r1, r0
 801419e:	fb01 f303 	mul.w	r3, r1, r3
 80141a2:	4413      	add	r3, r2
 80141a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80141a8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80141ac:	fba2 8901 	umull	r8, r9, r2, r1
 80141b0:	444b      	add	r3, r9
 80141b2:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80141b4:	eb14 0308 	adds.w	r3, r4, r8
 80141b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80141ba:	eb45 0309 	adc.w	r3, r5, r9
 80141be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141c0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80141c4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 80141c8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80141cc:	1c51      	adds	r1, r2, #1
 80141ce:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80141d2:	f143 0300 	adc.w	r3, r3, #0
 80141d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80141da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80141de:	460b      	mov	r3, r1
 80141e0:	0fdb      	lsrs	r3, r3, #31
 80141e2:	2200      	movs	r2, #0
 80141e4:	643b      	str	r3, [r7, #64]	; 0x40
 80141e6:	647a      	str	r2, [r7, #68]	; 0x44
 80141e8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80141ec:	4623      	mov	r3, r4
 80141ee:	4602      	mov	r2, r0
 80141f0:	189b      	adds	r3, r3, r2
 80141f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80141f4:	460b      	mov	r3, r1
 80141f6:	462a      	mov	r2, r5
 80141f8:	eb42 0303 	adc.w	r3, r2, r3
 80141fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80141fe:	f04f 0200 	mov.w	r2, #0
 8014202:	f04f 0300 	mov.w	r3, #0
 8014206:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801420a:	4621      	mov	r1, r4
 801420c:	084a      	lsrs	r2, r1, #1
 801420e:	4629      	mov	r1, r5
 8014210:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014214:	4629      	mov	r1, r5
 8014216:	104b      	asrs	r3, r1, #1
 8014218:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801421c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014220:	2200      	movs	r2, #0
 8014222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801422a:	f04f 0000 	mov.w	r0, #0
 801422e:	f04f 0100 	mov.w	r1, #0
 8014232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8014236:	462b      	mov	r3, r5
 8014238:	0099      	lsls	r1, r3, #2
 801423a:	4623      	mov	r3, r4
 801423c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8014240:	4623      	mov	r3, r4
 8014242:	0098      	lsls	r0, r3, #2
 8014244:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014248:	1814      	adds	r4, r2, r0
 801424a:	633c      	str	r4, [r7, #48]	; 0x30
 801424c:	414b      	adcs	r3, r1
 801424e:	637b      	str	r3, [r7, #52]	; 0x34
 8014250:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014254:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014258:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 801425c:	17da      	asrs	r2, r3, #31
 801425e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014262:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8014266:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801426a:	17da      	asrs	r2, r3, #31
 801426c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014270:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014274:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8014278:	462b      	mov	r3, r5
 801427a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 801427e:	4642      	mov	r2, r8
 8014280:	fb02 f203 	mul.w	r2, r2, r3
 8014284:	464b      	mov	r3, r9
 8014286:	4621      	mov	r1, r4
 8014288:	fb01 f303 	mul.w	r3, r1, r3
 801428c:	4413      	add	r3, r2
 801428e:	4622      	mov	r2, r4
 8014290:	4641      	mov	r1, r8
 8014292:	fba2 ab01 	umull	sl, fp, r2, r1
 8014296:	445b      	add	r3, fp
 8014298:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801429a:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 801429e:	17da      	asrs	r2, r3, #31
 80142a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80142a2:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 80142a4:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80142a8:	17da      	asrs	r2, r3, #31
 80142aa:	673b      	str	r3, [r7, #112]	; 0x70
 80142ac:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80142ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80142b2:	462b      	mov	r3, r5
 80142b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80142b8:	4642      	mov	r2, r8
 80142ba:	fb02 f203 	mul.w	r2, r2, r3
 80142be:	464b      	mov	r3, r9
 80142c0:	4621      	mov	r1, r4
 80142c2:	fb01 f303 	mul.w	r3, r1, r3
 80142c6:	4413      	add	r3, r2
 80142c8:	4622      	mov	r2, r4
 80142ca:	4641      	mov	r1, r8
 80142cc:	fba2 1201 	umull	r1, r2, r2, r1
 80142d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80142d4:	460a      	mov	r2, r1
 80142d6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80142da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80142de:	4413      	add	r3, r2
 80142e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80142e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80142e8:	460b      	mov	r3, r1
 80142ea:	eb1a 0303 	adds.w	r3, sl, r3
 80142ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80142f0:	4613      	mov	r3, r2
 80142f2:	eb4b 0303 	adc.w	r3, fp, r3
 80142f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80142fc:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8014300:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014304:	1c51      	adds	r1, r2, #1
 8014306:	66b9      	str	r1, [r7, #104]	; 0x68
 8014308:	f143 0300 	adc.w	r3, r3, #0
 801430c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801430e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014312:	460b      	mov	r3, r1
 8014314:	0fdb      	lsrs	r3, r3, #31
 8014316:	2200      	movs	r2, #0
 8014318:	623b      	str	r3, [r7, #32]
 801431a:	627a      	str	r2, [r7, #36]	; 0x24
 801431c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014320:	4623      	mov	r3, r4
 8014322:	4602      	mov	r2, r0
 8014324:	189b      	adds	r3, r3, r2
 8014326:	61bb      	str	r3, [r7, #24]
 8014328:	460b      	mov	r3, r1
 801432a:	462a      	mov	r2, r5
 801432c:	eb42 0303 	adc.w	r3, r2, r3
 8014330:	61fb      	str	r3, [r7, #28]
 8014332:	f04f 0200 	mov.w	r2, #0
 8014336:	f04f 0300 	mov.w	r3, #0
 801433a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801433e:	4621      	mov	r1, r4
 8014340:	084a      	lsrs	r2, r1, #1
 8014342:	4629      	mov	r1, r5
 8014344:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014348:	4629      	mov	r1, r5
 801434a:	104b      	asrs	r3, r1, #1
 801434c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014354:	2200      	movs	r2, #0
 8014356:	663b      	str	r3, [r7, #96]	; 0x60
 8014358:	667a      	str	r2, [r7, #100]	; 0x64
 801435a:	f04f 0200 	mov.w	r2, #0
 801435e:	f04f 0300 	mov.w	r3, #0
 8014362:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8014366:	4629      	mov	r1, r5
 8014368:	008b      	lsls	r3, r1, #2
 801436a:	4621      	mov	r1, r4
 801436c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014370:	4621      	mov	r1, r4
 8014372:	008a      	lsls	r2, r1, #2
 8014374:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8014378:	1884      	adds	r4, r0, r2
 801437a:	613c      	str	r4, [r7, #16]
 801437c:	eb41 0303 	adc.w	r3, r1, r3
 8014380:	617b      	str	r3, [r7, #20]
 8014382:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014386:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 801438a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801438e:	2b00      	cmp	r3, #0
 8014390:	d132      	bne.n	80143f8 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8014392:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8014396:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801439a:	1884      	adds	r4, r0, r2
 801439c:	65bc      	str	r4, [r7, #88]	; 0x58
 801439e:	eb41 0303 	adc.w	r3, r1, r3
 80143a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80143a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80143a8:	460b      	mov	r3, r1
 80143aa:	3301      	adds	r3, #1
 80143ac:	653b      	str	r3, [r7, #80]	; 0x50
 80143ae:	4613      	mov	r3, r2
 80143b0:	f143 0300 	adc.w	r3, r3, #0
 80143b4:	657b      	str	r3, [r7, #84]	; 0x54
 80143b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80143ba:	460b      	mov	r3, r1
 80143bc:	0fdb      	lsrs	r3, r3, #31
 80143be:	2200      	movs	r2, #0
 80143c0:	60bb      	str	r3, [r7, #8]
 80143c2:	60fa      	str	r2, [r7, #12]
 80143c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80143c8:	4623      	mov	r3, r4
 80143ca:	4602      	mov	r2, r0
 80143cc:	189b      	adds	r3, r3, r2
 80143ce:	603b      	str	r3, [r7, #0]
 80143d0:	460b      	mov	r3, r1
 80143d2:	462a      	mov	r2, r5
 80143d4:	eb42 0303 	adc.w	r3, r2, r3
 80143d8:	607b      	str	r3, [r7, #4]
 80143da:	f04f 0200 	mov.w	r2, #0
 80143de:	f04f 0300 	mov.w	r3, #0
 80143e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80143e6:	4621      	mov	r1, r4
 80143e8:	084a      	lsrs	r2, r1, #1
 80143ea:	4629      	mov	r1, r5
 80143ec:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80143f0:	4629      	mov	r1, r5
 80143f2:	104b      	asrs	r3, r1, #1
 80143f4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 80143f8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d109      	bne.n	8014414 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8014400:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8014404:	2b00      	cmp	r3, #0
 8014406:	da05      	bge.n	8014414 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8014408:	f04f 0200 	mov.w	r2, #0
 801440c:	f04f 0300 	mov.w	r3, #0
 8014410:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8014414:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801441c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801441e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8014422:	4618      	mov	r0, r3
 8014424:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014428:	46bd      	mov	sp, r7
 801442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801442e <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 801442e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014432:	b09a      	sub	sp, #104	; 0x68
 8014434:	af00      	add	r7, sp, #0
 8014436:	6478      	str	r0, [r7, #68]	; 0x44
 8014438:	6439      	str	r1, [r7, #64]	; 0x40
 801443a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801443c:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 801443e:	2300      	movs	r3, #0
 8014440:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8014444:	f04f 0200 	mov.w	r2, #0
 8014448:	f04f 0300 	mov.w	r3, #0
 801444c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014450:	f04f 0200 	mov.w	r2, #0
 8014454:	f04f 0300 	mov.w	r3, #0
 8014458:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 801445c:	f04f 0200 	mov.w	r2, #0
 8014460:	f04f 0300 	mov.w	r3, #0
 8014464:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8014468:	2300      	movs	r3, #0
 801446a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014470:	2200      	movs	r2, #0
 8014472:	633b      	str	r3, [r7, #48]	; 0x30
 8014474:	637a      	str	r2, [r7, #52]	; 0x34
 8014476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801447c:	2200      	movs	r2, #0
 801447e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014482:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8014486:	460b      	mov	r3, r1
 8014488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801448a:	fb02 f203 	mul.w	r2, r2, r3
 801448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014490:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8014494:	4601      	mov	r1, r0
 8014496:	fb01 f303 	mul.w	r3, r1, r3
 801449a:	4413      	add	r3, r2
 801449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801449e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80144a0:	fba2 4501 	umull	r4, r5, r2, r1
 80144a4:	442b      	add	r3, r5
 80144a6:	461d      	mov	r5, r3
 80144a8:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80144ac:	623b      	str	r3, [r7, #32]
 80144ae:	f145 0300 	adc.w	r3, r5, #0
 80144b2:	627b      	str	r3, [r7, #36]	; 0x24
 80144b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80144b8:	f04f 0300 	mov.w	r3, #0
 80144bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80144c0:	f7eb fefe 	bl	80002c0 <__aeabi_uldivmod>
 80144c4:	4602      	mov	r2, r0
 80144c6:	460b      	mov	r3, r1
 80144c8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80144cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80144ce:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	2200      	movs	r2, #0
 80144d6:	61bb      	str	r3, [r7, #24]
 80144d8:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80144da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80144e0:	4622      	mov	r2, r4
 80144e2:	fb02 f203 	mul.w	r2, r2, r3
 80144e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144e8:	4629      	mov	r1, r5
 80144ea:	fb01 f303 	mul.w	r3, r1, r3
 80144ee:	4413      	add	r3, r2
 80144f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144f2:	4621      	mov	r1, r4
 80144f4:	fba2 ab01 	umull	sl, fp, r2, r1
 80144f8:	445b      	add	r3, fp
 80144fa:	469b      	mov	fp, r3
 80144fc:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8014500:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8014504:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014508:	f04f 0200 	mov.w	r2, #0
 801450c:	f04f 0300 	mov.w	r3, #0
 8014510:	0a02      	lsrs	r2, r0, #8
 8014512:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014516:	0a0b      	lsrs	r3, r1, #8
 8014518:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801451c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014520:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8014524:	6139      	str	r1, [r7, #16]
 8014526:	f143 0300 	adc.w	r3, r3, #0
 801452a:	617b      	str	r3, [r7, #20]
 801452c:	f04f 0200 	mov.w	r2, #0
 8014530:	f04f 0300 	mov.w	r3, #0
 8014534:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014538:	4621      	mov	r1, r4
 801453a:	0aca      	lsrs	r2, r1, #11
 801453c:	4629      	mov	r1, r5
 801453e:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8014542:	4629      	mov	r1, r5
 8014544:	0acb      	lsrs	r3, r1, #11
 8014546:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801454a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801454e:	2b01      	cmp	r3, #1
 8014550:	d305      	bcc.n	801455e <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8014552:	f04f 32ff 	mov.w	r2, #4294967295
 8014556:	f04f 0300 	mov.w	r3, #0
 801455a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 801455e:	2300      	movs	r3, #0
 8014560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014564:	e041      	b.n	80145ea <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8014566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801456a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801456c:	3302      	adds	r3, #2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	4413      	add	r3, r2
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	2200      	movs	r2, #0
 8014576:	60bb      	str	r3, [r7, #8]
 8014578:	60fa      	str	r2, [r7, #12]
 801457a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801457c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8014580:	4622      	mov	r2, r4
 8014582:	fb02 f203 	mul.w	r2, r2, r3
 8014586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014588:	4629      	mov	r1, r5
 801458a:	fb01 f303 	mul.w	r3, r1, r3
 801458e:	4413      	add	r3, r2
 8014590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014592:	4621      	mov	r1, r4
 8014594:	fba2 8901 	umull	r8, r9, r2, r1
 8014598:	444b      	add	r3, r9
 801459a:	4699      	mov	r9, r3
 801459c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80145a0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80145a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80145a8:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80145ac:	6039      	str	r1, [r7, #0]
 80145ae:	f143 0300 	adc.w	r3, r3, #0
 80145b2:	607b      	str	r3, [r7, #4]
 80145b4:	f04f 0200 	mov.w	r2, #0
 80145b8:	f04f 0300 	mov.w	r3, #0
 80145bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80145c0:	4621      	mov	r1, r4
 80145c2:	0a8a      	lsrs	r2, r1, #10
 80145c4:	4629      	mov	r1, r5
 80145c6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80145ca:	4629      	mov	r1, r5
 80145cc:	0a8b      	lsrs	r3, r1, #10
 80145ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80145d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80145d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80145d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145da:	3206      	adds	r2, #6
 80145dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80145e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80145e4:	3301      	adds	r3, #1
 80145e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80145ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145ec:	7a9b      	ldrb	r3, [r3, #10]
 80145ee:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d3b7      	bcc.n	8014566 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80145f6:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3768      	adds	r7, #104	; 0x68
 80145fe:	46bd      	mov	sp, r7
 8014600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014604 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8014604:	b590      	push	{r4, r7, lr}
 8014606:	b085      	sub	sp, #20
 8014608:	af00      	add	r7, sp, #0
 801460a:	4604      	mov	r4, r0
 801460c:	4608      	mov	r0, r1
 801460e:	4611      	mov	r1, r2
 8014610:	461a      	mov	r2, r3
 8014612:	4623      	mov	r3, r4
 8014614:	71fb      	strb	r3, [r7, #7]
 8014616:	4603      	mov	r3, r0
 8014618:	71bb      	strb	r3, [r7, #6]
 801461a:	460b      	mov	r3, r1
 801461c:	717b      	strb	r3, [r7, #5]
 801461e:	4613      	mov	r3, r2
 8014620:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014622:	2300      	movs	r3, #0
 8014624:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8014626:	2300      	movs	r3, #0
 8014628:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 801462a:	2300      	movs	r3, #0
 801462c:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 801462e:	2300      	movs	r3, #0
 8014630:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8014632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014634:	2210      	movs	r2, #16
 8014636:	701a      	strb	r2, [r3, #0]

	i = 0;
 8014638:	2300      	movs	r3, #0
 801463a:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 801463c:	2300      	movs	r3, #0
 801463e:	73fb      	strb	r3, [r7, #15]
 8014640:	e046      	b.n	80146d0 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8014642:	2300      	movs	r3, #0
 8014644:	73bb      	strb	r3, [r7, #14]
 8014646:	e03b      	b.n	80146c0 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8014648:	89bb      	ldrh	r3, [r7, #12]
 801464a:	2b0f      	cmp	r3, #15
 801464c:	d832      	bhi.n	80146b4 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 801464e:	89bb      	ldrh	r3, [r7, #12]
 8014650:	b2da      	uxtb	r2, r3
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8014656:	89bb      	ldrh	r3, [r7, #12]
 8014658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801465a:	3306      	adds	r3, #6
 801465c:	009b      	lsls	r3, r3, #2
 801465e:	4413      	add	r3, r2
 8014660:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014664:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8014666:	89bb      	ldrh	r3, [r7, #12]
 8014668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801466a:	3306      	adds	r3, #6
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	4413      	add	r3, r2
 8014670:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014674:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8014676:	7bfa      	ldrb	r2, [r7, #15]
 8014678:	79bb      	ldrb	r3, [r7, #6]
 801467a:	fb12 f303 	smulbb	r3, r2, r3
 801467e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8014680:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8014682:	79fa      	ldrb	r2, [r7, #7]
 8014684:	440a      	add	r2, r1
 8014686:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8014688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801468a:	3306      	adds	r3, #6
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	4413      	add	r3, r2
 8014690:	460a      	mov	r2, r1
 8014692:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8014694:	7bba      	ldrb	r2, [r7, #14]
 8014696:	f897 3020 	ldrb.w	r3, [r7, #32]
 801469a:	fb12 f303 	smulbb	r3, r2, r3
 801469e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 80146a0:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 80146a2:	793a      	ldrb	r2, [r7, #4]
 80146a4:	440a      	add	r2, r1
 80146a6:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80146a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146aa:	3306      	adds	r3, #6
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	4413      	add	r3, r2
 80146b0:	460a      	mov	r2, r1
 80146b2:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80146b4:	89bb      	ldrh	r3, [r7, #12]
 80146b6:	3301      	adds	r3, #1
 80146b8:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80146ba:	7bbb      	ldrb	r3, [r7, #14]
 80146bc:	3301      	adds	r3, #1
 80146be:	73bb      	strb	r3, [r7, #14]
 80146c0:	7bba      	ldrb	r2, [r7, #14]
 80146c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d3be      	bcc.n	8014648 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80146ca:	7bfb      	ldrb	r3, [r7, #15]
 80146cc:	3301      	adds	r3, #1
 80146ce:	73fb      	strb	r3, [r7, #15]
 80146d0:	7bfa      	ldrb	r2, [r7, #15]
 80146d2:	797b      	ldrb	r3, [r7, #5]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d3b4      	bcc.n	8014642 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80146d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146da:	f000 f86c 	bl	80147b6 <VL53L1_init_zone_config_histogram_bins>
 80146de:	4603      	mov	r3, r0
 80146e0:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 80146e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3714      	adds	r7, #20
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd90      	pop	{r4, r7, pc}

080146ee <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b084      	sub	sp, #16
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
 80146f6:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80146f8:	2300      	movs	r3, #0
 80146fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2205      	movs	r2, #5
 8014700:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	2204      	movs	r2, #4
 8014706:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	220f      	movs	r2, #15
 801470c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	2207      	movs	r2, #7
 8014712:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	2204      	movs	r2, #4
 8014718:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2208      	movs	r2, #8
 801471e:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	220f      	movs	r2, #15
 8014724:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	2207      	movs	r2, #7
 801472c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	220c      	movs	r2, #12
 8014734:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	2208      	movs	r2, #8
 801473c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	2207      	movs	r2, #7
 8014744:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	220f      	movs	r2, #15
 801474c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	2208      	movs	r2, #8
 8014754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	2204      	movs	r2, #4
 801475c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	2207      	movs	r2, #7
 8014764:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8014768:	683b      	ldr	r3, [r7, #0]
 801476a:	220f      	movs	r2, #15
 801476c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	2208      	movs	r2, #8
 8014774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	220c      	movs	r2, #12
 801477c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	220f      	movs	r2, #15
 8014784:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	220f      	movs	r2, #15
 801478c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	2208      	movs	r2, #8
 8014794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	2208      	movs	r2, #8
 801479c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80147a0:	6838      	ldr	r0, [r7, #0]
 80147a2:	f000 f808 	bl	80147b6 <VL53L1_init_zone_config_histogram_bins>
 80147a6:	4603      	mov	r3, r0
 80147a8:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80147aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3710      	adds	r7, #16
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80147b6:	b480      	push	{r7}
 80147b8:	b085      	sub	sp, #20
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80147be:	2300      	movs	r3, #0
 80147c0:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80147c2:	2300      	movs	r3, #0
 80147c4:	73fb      	strb	r3, [r7, #15]
 80147c6:	e008      	b.n	80147da <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80147c8:	7bfb      	ldrb	r3, [r7, #15]
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	4413      	add	r3, r2
 80147ce:	2201      	movs	r2, #1
 80147d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80147d4:	7bfb      	ldrb	r3, [r7, #15]
 80147d6:	3301      	adds	r3, #1
 80147d8:	73fb      	strb	r3, [r7, #15]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	7bfa      	ldrb	r2, [r7, #15]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d3f1      	bcc.n	80147c8 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80147e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3714      	adds	r7, #20
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr

080147f4 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	8910      	ldrh	r0, [r2, #8]
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	b292      	uxth	r2, r2
 801480c:	68b9      	ldr	r1, [r7, #8]
 801480e:	4798      	blx	r3
 8014810:	4603      	mov	r3, r0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3710      	adds	r7, #16
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801481a:	b580      	push	{r7, lr}
 801481c:	b084      	sub	sp, #16
 801481e:	af00      	add	r7, sp, #0
 8014820:	60f8      	str	r0, [r7, #12]
 8014822:	60b9      	str	r1, [r7, #8]
 8014824:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	691b      	ldr	r3, [r3, #16]
 801482a:	68fa      	ldr	r2, [r7, #12]
 801482c:	8910      	ldrh	r0, [r2, #8]
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	b292      	uxth	r2, r2
 8014832:	68b9      	ldr	r1, [r7, #8]
 8014834:	4798      	blx	r3
 8014836:	4603      	mov	r3, r0
}
 8014838:	4618      	mov	r0, r3
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	607a      	str	r2, [r7, #4]
 801484a:	603b      	str	r3, [r7, #0]
 801484c:	460b      	mov	r3, r1
 801484e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014850:	2300      	movs	r3, #0
 8014852:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	2bff      	cmp	r3, #255	; 0xff
 8014858:	d902      	bls.n	8014860 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801485a:	f06f 0303 	mvn.w	r3, #3
 801485e:	e01d      	b.n	801489c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014860:	897b      	ldrh	r3, [r7, #10]
 8014862:	0a1b      	lsrs	r3, r3, #8
 8014864:	b29b      	uxth	r3, r3
 8014866:	b2da      	uxtb	r2, r3
 8014868:	4b0e      	ldr	r3, [pc, #56]	; (80148a4 <VL53L1_WriteMulti+0x64>)
 801486a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801486c:	897b      	ldrh	r3, [r7, #10]
 801486e:	b2da      	uxtb	r2, r3
 8014870:	4b0c      	ldr	r3, [pc, #48]	; (80148a4 <VL53L1_WriteMulti+0x64>)
 8014872:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8014874:	683a      	ldr	r2, [r7, #0]
 8014876:	6879      	ldr	r1, [r7, #4]
 8014878:	480b      	ldr	r0, [pc, #44]	; (80148a8 <VL53L1_WriteMulti+0x68>)
 801487a:	f004 ffa5 	bl	80197c8 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	3302      	adds	r3, #2
 8014882:	461a      	mov	r2, r3
 8014884:	4907      	ldr	r1, [pc, #28]	; (80148a4 <VL53L1_WriteMulti+0x64>)
 8014886:	68f8      	ldr	r0, [r7, #12]
 8014888:	f7ff ffb4 	bl	80147f4 <_I2CWrite>
 801488c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014894:	23f3      	movs	r3, #243	; 0xf3
 8014896:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014898:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801489c:	4618      	mov	r0, r3
 801489e:	3718      	adds	r7, #24
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	20008550 	.word	0x20008550
 80148a8:	20008552 	.word	0x20008552

080148ac <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b086      	sub	sp, #24
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	607a      	str	r2, [r7, #4]
 80148b6:	603b      	str	r3, [r7, #0]
 80148b8:	460b      	mov	r3, r1
 80148ba:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80148bc:	2300      	movs	r3, #0
 80148be:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80148c0:	897b      	ldrh	r3, [r7, #10]
 80148c2:	0a1b      	lsrs	r3, r3, #8
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	b2da      	uxtb	r2, r3
 80148c8:	4b12      	ldr	r3, [pc, #72]	; (8014914 <VL53L1_ReadMulti+0x68>)
 80148ca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80148cc:	897b      	ldrh	r3, [r7, #10]
 80148ce:	b2da      	uxtb	r2, r3
 80148d0:	4b10      	ldr	r3, [pc, #64]	; (8014914 <VL53L1_ReadMulti+0x68>)
 80148d2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80148d4:	2202      	movs	r2, #2
 80148d6:	490f      	ldr	r1, [pc, #60]	; (8014914 <VL53L1_ReadMulti+0x68>)
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f7ff ff8b 	bl	80147f4 <_I2CWrite>
 80148de:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d002      	beq.n	80148ec <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148e6:	23f3      	movs	r3, #243	; 0xf3
 80148e8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80148ea:	e00c      	b.n	8014906 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80148ec:	683a      	ldr	r2, [r7, #0]
 80148ee:	6879      	ldr	r1, [r7, #4]
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f7ff ff92 	bl	801481a <_I2CRead>
 80148f6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d002      	beq.n	8014904 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148fe:	23f3      	movs	r3, #243	; 0xf3
 8014900:	75fb      	strb	r3, [r7, #23]
 8014902:	e000      	b.n	8014906 <VL53L1_ReadMulti+0x5a>
    }
done:
 8014904:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014906:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3718      	adds	r7, #24
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
 8014912:	bf00      	nop
 8014914:	20008550 	.word	0x20008550

08014918 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	460b      	mov	r3, r1
 8014922:	807b      	strh	r3, [r7, #2]
 8014924:	4613      	mov	r3, r2
 8014926:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014928:	2300      	movs	r3, #0
 801492a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801492c:	887b      	ldrh	r3, [r7, #2]
 801492e:	0a1b      	lsrs	r3, r3, #8
 8014930:	b29b      	uxth	r3, r3
 8014932:	b2da      	uxtb	r2, r3
 8014934:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <VL53L1_WrByte+0x50>)
 8014936:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014938:	887b      	ldrh	r3, [r7, #2]
 801493a:	b2da      	uxtb	r2, r3
 801493c:	4b0a      	ldr	r3, [pc, #40]	; (8014968 <VL53L1_WrByte+0x50>)
 801493e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014940:	4a09      	ldr	r2, [pc, #36]	; (8014968 <VL53L1_WrByte+0x50>)
 8014942:	787b      	ldrb	r3, [r7, #1]
 8014944:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8014946:	2203      	movs	r2, #3
 8014948:	4907      	ldr	r1, [pc, #28]	; (8014968 <VL53L1_WrByte+0x50>)
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff ff52 	bl	80147f4 <_I2CWrite>
 8014950:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d001      	beq.n	801495c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014958:	23f3      	movs	r3, #243	; 0xf3
 801495a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 801495c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014960:	4618      	mov	r0, r3
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	20008550 	.word	0x20008550

0801496c <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 801496c:	b580      	push	{r7, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	460b      	mov	r3, r1
 8014976:	807b      	strh	r3, [r7, #2]
 8014978:	4613      	mov	r3, r2
 801497a:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801497c:	2300      	movs	r3, #0
 801497e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014980:	887b      	ldrh	r3, [r7, #2]
 8014982:	0a1b      	lsrs	r3, r3, #8
 8014984:	b29b      	uxth	r3, r3
 8014986:	b2da      	uxtb	r2, r3
 8014988:	4b10      	ldr	r3, [pc, #64]	; (80149cc <VL53L1_WrWord+0x60>)
 801498a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801498c:	887b      	ldrh	r3, [r7, #2]
 801498e:	b2da      	uxtb	r2, r3
 8014990:	4b0e      	ldr	r3, [pc, #56]	; (80149cc <VL53L1_WrWord+0x60>)
 8014992:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8014994:	883b      	ldrh	r3, [r7, #0]
 8014996:	0a1b      	lsrs	r3, r3, #8
 8014998:	b29b      	uxth	r3, r3
 801499a:	b2da      	uxtb	r2, r3
 801499c:	4b0b      	ldr	r3, [pc, #44]	; (80149cc <VL53L1_WrWord+0x60>)
 801499e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80149a0:	883b      	ldrh	r3, [r7, #0]
 80149a2:	b2da      	uxtb	r2, r3
 80149a4:	4b09      	ldr	r3, [pc, #36]	; (80149cc <VL53L1_WrWord+0x60>)
 80149a6:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80149a8:	2204      	movs	r2, #4
 80149aa:	4908      	ldr	r1, [pc, #32]	; (80149cc <VL53L1_WrWord+0x60>)
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff ff21 	bl	80147f4 <_I2CWrite>
 80149b2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d001      	beq.n	80149be <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80149ba:	23f3      	movs	r3, #243	; 0xf3
 80149bc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80149be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	20008550 	.word	0x20008550

080149d0 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	460b      	mov	r3, r1
 80149da:	607a      	str	r2, [r7, #4]
 80149dc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80149de:	2300      	movs	r3, #0
 80149e0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80149e2:	897b      	ldrh	r3, [r7, #10]
 80149e4:	0a1b      	lsrs	r3, r3, #8
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	b2da      	uxtb	r2, r3
 80149ea:	4b12      	ldr	r3, [pc, #72]	; (8014a34 <VL53L1_RdByte+0x64>)
 80149ec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80149ee:	897b      	ldrh	r3, [r7, #10]
 80149f0:	b2da      	uxtb	r2, r3
 80149f2:	4b10      	ldr	r3, [pc, #64]	; (8014a34 <VL53L1_RdByte+0x64>)
 80149f4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80149f6:	2202      	movs	r2, #2
 80149f8:	490e      	ldr	r1, [pc, #56]	; (8014a34 <VL53L1_RdByte+0x64>)
 80149fa:	68f8      	ldr	r0, [r7, #12]
 80149fc:	f7ff fefa 	bl	80147f4 <_I2CWrite>
 8014a00:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d002      	beq.n	8014a0e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a08:	23f3      	movs	r3, #243	; 0xf3
 8014a0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014a0c:	e00c      	b.n	8014a28 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014a0e:	2201      	movs	r2, #1
 8014a10:	6879      	ldr	r1, [r7, #4]
 8014a12:	68f8      	ldr	r0, [r7, #12]
 8014a14:	f7ff ff01 	bl	801481a <_I2CRead>
 8014a18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a20:	23f3      	movs	r3, #243	; 0xf3
 8014a22:	75fb      	strb	r3, [r7, #23]
 8014a24:	e000      	b.n	8014a28 <VL53L1_RdByte+0x58>
    }
done:
 8014a26:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3718      	adds	r7, #24
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}
 8014a34:	20008550 	.word	0x20008550

08014a38 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	460b      	mov	r3, r1
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014a46:	2300      	movs	r3, #0
 8014a48:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014a4a:	897b      	ldrh	r3, [r7, #10]
 8014a4c:	0a1b      	lsrs	r3, r3, #8
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	4b18      	ldr	r3, [pc, #96]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a54:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014a56:	897b      	ldrh	r3, [r7, #10]
 8014a58:	b2da      	uxtb	r2, r3
 8014a5a:	4b16      	ldr	r3, [pc, #88]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a5c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014a5e:	2202      	movs	r2, #2
 8014a60:	4914      	ldr	r1, [pc, #80]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a62:	68f8      	ldr	r0, [r7, #12]
 8014a64:	f7ff fec6 	bl	80147f4 <_I2CWrite>
 8014a68:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a70:	23f3      	movs	r3, #243	; 0xf3
 8014a72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014a74:	e017      	b.n	8014aa6 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8014a76:	2202      	movs	r2, #2
 8014a78:	490e      	ldr	r1, [pc, #56]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f7ff fecd 	bl	801481a <_I2CRead>
 8014a80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d002      	beq.n	8014a8e <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014a88:	23f3      	movs	r3, #243	; 0xf3
 8014a8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014a8c:	e00b      	b.n	8014aa6 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8014a8e:	4b09      	ldr	r3, [pc, #36]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	021b      	lsls	r3, r3, #8
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	4b06      	ldr	r3, [pc, #24]	; (8014ab4 <VL53L1_RdWord+0x7c>)
 8014a9a:	785b      	ldrb	r3, [r3, #1]
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	4413      	add	r3, r2
 8014aa0:	b29a      	uxth	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8014aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	20008550 	.word	0x20008550

08014ab8 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	695b      	ldr	r3, [r3, #20]
 8014aca:	4798      	blx	r3
 8014acc:	4603      	mov	r3, r0
 8014ace:	461a      	mov	r2, r3
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8014ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3710      	adds	r7, #16
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	4619      	mov	r1, r3
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 f8d2 	bl	8014c98 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014af4:	2300      	movs	r3, #0
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3708      	adds	r7, #8
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
	...

08014b00 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	4a07      	ldr	r2, [pc, #28]	; (8014b2c <VL53L1_WaitUs+0x2c>)
 8014b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8014b12:	1192      	asrs	r2, r2, #6
 8014b14:	17db      	asrs	r3, r3, #31
 8014b16:	1ad3      	subs	r3, r2, r3
 8014b18:	4619      	mov	r1, r3
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 f8bc 	bl	8014c98 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014b20:	2300      	movs	r3, #0
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
 8014b2a:	bf00      	nop
 8014b2c:	10624dd3 	.word	0x10624dd3

08014b30 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014b30:	b590      	push	{r4, r7, lr}
 8014b32:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014b3c:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014b40:	6020      	str	r0, [r4, #0]
 8014b42:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8014b46:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8014b4a:	6001      	str	r1, [r0, #0]
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b52:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014b56:	801a      	strh	r2, [r3, #0]
 8014b58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b5c:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014b60:	460a      	mov	r2, r1
 8014b62:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014b64:	2300      	movs	r3, #0
 8014b66:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014b70:	2300      	movs	r3, #0
 8014b72:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014b82:	2300      	movs	r3, #0
 8014b84:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8014b88:	f107 0310 	add.w	r3, r7, #16
 8014b8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014b90:	4940      	ldr	r1, [pc, #256]	; (8014c94 <VL53L1_WaitValueMaskEx+0x164>)
 8014b92:	4618      	mov	r0, r3
 8014b94:	f004 fed2 	bl	801993c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8014b98:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014b9c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014ba0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	6818      	ldr	r0, [r3, #0]
 8014ba8:	f7ff ff86 	bl	8014ab8 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8014bac:	e04e      	b.n	8014c4c <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8014bae:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d110      	bne.n	8014bd8 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8014bb6:	f207 2213 	addw	r2, r7, #531	; 0x213
 8014bba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014bbe:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014bc2:	8819      	ldrh	r1, [r3, #0]
 8014bc4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014bc8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014bcc:	6818      	ldr	r0, [r3, #0]
 8014bce:	f7ff feff 	bl	80149d0 <VL53L1_RdByte>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8014bd8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8014bdc:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014be0:	4013      	ands	r3, r2
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8014be8:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014bec:	7812      	ldrb	r2, [r2, #0]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d102      	bne.n	8014bf8 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8014bf8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d114      	bne.n	8014c2a <VL53L1_WaitValueMaskEx+0xfa>
 8014c00:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d110      	bne.n	8014c2a <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014c08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00c      	beq.n	8014c2a <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014c10:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014c14:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c18:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014c1c:	4611      	mov	r1, r2
 8014c1e:	6818      	ldr	r0, [r3, #0]
 8014c20:	f7ff ff5e 	bl	8014ae0 <VL53L1_WaitMs>
 8014c24:	4603      	mov	r3, r0
 8014c26:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014c2a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014c2e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c32:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014c36:	4611      	mov	r1, r2
 8014c38:	6818      	ldr	r0, [r3, #0]
 8014c3a:	f7ff ff3d 	bl	8014ab8 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014c3e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014c42:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014c46:	1ad3      	subs	r3, r2, r3
 8014c48:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014c4c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d10c      	bne.n	8014c6e <VL53L1_WaitValueMaskEx+0x13e>
 8014c54:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014c58:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014c5c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d203      	bcs.n	8014c6e <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8014c66:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d09f      	beq.n	8014bae <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014c6e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d106      	bne.n	8014c84 <VL53L1_WaitValueMaskEx+0x154>
 8014c76:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d102      	bne.n	8014c84 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014c7e:	23f9      	movs	r3, #249	; 0xf9
 8014c80:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014c84:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd90      	pop	{r4, r7, pc}
 8014c92:	bf00      	nop
 8014c94:	0801abd0 	.word	0x0801abd0

08014c98 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	695b      	ldr	r3, [r3, #20]
 8014ca6:	4798      	blx	r3
 8014ca8:	4603      	mov	r3, r0
 8014caa:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014cac:	bf00      	nop
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	695b      	ldr	r3, [r3, #20]
 8014cb2:	4798      	blx	r3
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	1ad3      	subs	r3, r2, r3
 8014cbc:	683a      	ldr	r2, [r7, #0]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d8f5      	bhi.n	8014cae <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014cc2:	2300      	movs	r3, #0
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3710      	adds	r7, #16
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}

08014ccc <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08c      	sub	sp, #48	; 0x30
 8014cd0:	af06      	add	r7, sp, #24
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
 8014cd8:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce0:	9304      	str	r3, [sp, #16]
 8014ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce4:	9303      	str	r3, [sp, #12]
 8014ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce8:	9302      	str	r3, [sp, #8]
 8014cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cec:	9301      	str	r3, [sp, #4]
 8014cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf0:	9300      	str	r3, [sp, #0]
 8014cf2:	6a3b      	ldr	r3, [r7, #32]
 8014cf4:	683a      	ldr	r2, [r7, #0]
 8014cf6:	6879      	ldr	r1, [r7, #4]
 8014cf8:	68b8      	ldr	r0, [r7, #8]
 8014cfa:	f7fc fefb 	bl	8011af4 <VL53L1_hist_process_data>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3718      	adds	r7, #24
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}

08014d0e <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b084      	sub	sp, #16
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
 8014d16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d103      	bne.n	8014d26 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d1e:	f06f 0301 	mvn.w	r3, #1
 8014d22:	60fb      	str	r3, [r7, #12]
 8014d24:	e023      	b.n	8014d6e <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	685a      	ldr	r2, [r3, #4]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	891a      	ldrh	r2, [r3, #8]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	68da      	ldr	r2, [r3, #12]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	691a      	ldr	r2, [r3, #16]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014d4e:	683b      	ldr	r3, [r7, #0]
 8014d50:	695a      	ldr	r2, [r3, #20]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d004      	beq.n	8014d68 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	4798      	blx	r3
 8014d64:	60f8      	str	r0, [r7, #12]
 8014d66:	e002      	b.n	8014d6e <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014d68:	f04f 33ff 	mov.w	r3, #4294967295
 8014d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3710      	adds	r7, #16
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d86:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d003      	beq.n	8014d96 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d92:	60fb      	str	r3, [r7, #12]
 8014d94:	e04d      	b.n	8014e32 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7ed f8d1 	bl	8001f3e <VL53L1_WaitDeviceBooted>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d003      	beq.n	8014daa <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014da2:	f04f 33ff 	mov.w	r3, #4294967295
 8014da6:	60fb      	str	r3, [r7, #12]
 8014da8:	e043      	b.n	8014e32 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7ed f847 	bl	8001e3e <VL53L1_DataInit>
 8014db0:	4603      	mov	r3, r0
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d003      	beq.n	8014dbe <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014db6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dba:	60fb      	str	r3, [r7, #12]
 8014dbc:	e039      	b.n	8014e32 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f7ed f892 	bl	8001ee8 <VL53L1_StaticInit>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d003      	beq.n	8014dd2 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014dca:	f04f 33ff 	mov.w	r3, #4294967295
 8014dce:	60fb      	str	r3, [r7, #12]
 8014dd0:	e02f      	b.n	8014e32 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ee fe8a 	bl	8003aec <VL53L1_PerformRefSpadManagement>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d003      	beq.n	8014de6 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014dde:	f04f 33ff 	mov.w	r3, #4294967295
 8014de2:	60fb      	str	r3, [r7, #12]
 8014de4:	e025      	b.n	8014e32 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014df8:	2200      	movs	r2, #0
 8014dfa:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e04:	2200      	movs	r2, #0
 8014e06:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e10:	2200      	movs	r2, #0
 8014e12:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e28:	2201      	movs	r2, #1
 8014e2a:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014e32:	68fb      	ldr	r3, [r7, #12]
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3710      	adds	r7, #16
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b084      	sub	sp, #16
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014e44:	f04f 33ff 	mov.w	r3, #4294967295
 8014e48:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e50:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d111      	bne.n	8014e7c <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4798      	blx	r3
 8014e5e:	4603      	mov	r3, r0
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d003      	beq.n	8014e6c <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014e64:	f04f 33ff 	mov.w	r3, #4294967295
 8014e68:	60fb      	str	r3, [r7, #12]
 8014e6a:	e007      	b.n	8014e7c <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e76:	2200      	movs	r2, #0
 8014e78:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3710      	adds	r7, #16
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b084      	sub	sp, #16
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
 8014e8e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d002      	beq.n	8014e9c <VL53L1CB_ReadID+0x16>
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d103      	bne.n	8014ea4 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e9c:	f06f 0301 	mvn.w	r3, #1
 8014ea0:	60fb      	str	r3, [r7, #12]
 8014ea2:	e00a      	b.n	8014eba <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014eaa:	683a      	ldr	r2, [r7, #0]
 8014eac:	f240 110f 	movw	r1, #271	; 0x10f
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff fdc1 	bl	8014a38 <VL53L1_RdWord>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014eba:	68fb      	ldr	r3, [r7, #12]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3710      	adds	r7, #16
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014ec4:	b480      	push	{r7}
 8014ec6:	b085      	sub	sp, #20
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
 8014ecc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d002      	beq.n	8014eda <VL53L1CB_GetCapabilities+0x16>
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d103      	bne.n	8014ee2 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014eda:	f06f 0301 	mvn.w	r3, #1
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	e00d      	b.n	8014efe <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	2204      	movs	r2, #4
 8014eec:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014efa:	2300      	movs	r3, #0
 8014efc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014efe:	68fb      	ldr	r3, [r7, #12]
}
 8014f00:	4618      	mov	r0, r3
 8014f02:	3714      	adds	r7, #20
 8014f04:	46bd      	mov	sp, r7
 8014f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0a:	4770      	bx	lr

08014f0c <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d009      	beq.n	8014f30 <VL53L1CB_ConfigProfile+0x24>
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d006      	beq.n	8014f30 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014f28:	7afb      	ldrb	r3, [r7, #11]
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d103      	bne.n	8014f36 <VL53L1CB_ConfigProfile+0x2a>
 8014f2e:	e00c      	b.n	8014f4a <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014f30:	f06f 0301 	mvn.w	r3, #1
 8014f34:	e043      	b.n	8014fbe <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014f36:	7afb      	ldrb	r3, [r7, #11]
 8014f38:	2b02      	cmp	r3, #2
 8014f3a:	d006      	beq.n	8014f4a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014f3c:	7afb      	ldrb	r3, [r7, #11]
 8014f3e:	2b03      	cmp	r3, #3
 8014f40:	d003      	beq.n	8014f4a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f42:	f06f 0301 	mvn.w	r3, #1
 8014f46:	60fb      	str	r3, [r7, #12]
 8014f48:	e038      	b.n	8014fbc <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014f4a:	7afb      	ldrb	r3, [r7, #11]
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f7ed f970 	bl	8002234 <VL53L1_SetDistanceMode>
 8014f54:	4603      	mov	r3, r0
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d003      	beq.n	8014f62 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5e:	60fb      	str	r3, [r7, #12]
 8014f60:	e02c      	b.n	8014fbc <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014f6a:	fb02 f303 	mul.w	r3, r2, r3
 8014f6e:	4619      	mov	r1, r3
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f7ed f9ed 	bl	8002350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d003      	beq.n	8014f84 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f80:	60fb      	str	r3, [r7, #12]
 8014f82:	e01b      	b.n	8014fbc <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	bf14      	ite	ne
 8014f8c:	2301      	movne	r3, #1
 8014f8e:	2300      	moveq	r3, #0
 8014f90:	b2db      	uxtb	r3, r3
 8014f92:	461a      	mov	r2, r3
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f9a:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	691b      	ldr	r3, [r3, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	bf14      	ite	ne
 8014fa6:	2301      	movne	r3, #1
 8014fa8:	2300      	moveq	r3, #0
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	461a      	mov	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fb4:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014fc6:	b580      	push	{r7, lr}
 8014fc8:	b094      	sub	sp, #80	; 0x50
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	6078      	str	r0, [r7, #4]
 8014fce:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d002      	beq.n	8014fdc <VL53L1CB_ConfigROI+0x16>
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d103      	bne.n	8014fe4 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014fdc:	f06f 0301 	mvn.w	r3, #1
 8014fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014fe2:	e01c      	b.n	801501e <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	789b      	ldrb	r3, [r3, #2]
 8014fec:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	78db      	ldrb	r3, [r3, #3]
 8014ff2:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	785b      	ldrb	r3, [r3, #1]
 8014ffe:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8015000:	f107 0308 	add.w	r3, r7, #8
 8015004:	4619      	mov	r1, r3
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ed fca6 	bl	8002958 <VL53L1_SetROI>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d003      	beq.n	801501a <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8015012:	f04f 33ff 	mov.w	r3, #4294967295
 8015016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015018:	e001      	b.n	801501e <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 801501a:	2300      	movs	r3, #0
 801501c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 801501e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015020:	4618      	mov	r0, r3
 8015022:	3750      	adds	r7, #80	; 0x50
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8015028:	b480      	push	{r7}
 801502a:	b083      	sub	sp, #12
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015032:	f06f 0303 	mvn.w	r3, #3
}
 8015036:	4618      	mov	r0, r3
 8015038:	370c      	adds	r7, #12
 801503a:	46bd      	mov	sp, r7
 801503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015040:	4770      	bx	lr

08015042 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
 801504a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d002      	beq.n	8015058 <VL53L1CB_GetDistance+0x16>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d103      	bne.n	8015060 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015058:	f06f 0301 	mvn.w	r3, #1
 801505c:	60fb      	str	r3, [r7, #12]
 801505e:	e03a      	b.n	80150d6 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015066:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 801506a:	2b00      	cmp	r3, #0
 801506c:	d103      	bne.n	8015076 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 801506e:	f04f 33ff 	mov.w	r3, #4294967295
 8015072:	60fb      	str	r3, [r7, #12]
 8015074:	e02f      	b.n	80150d6 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801507c:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8015080:	2b01      	cmp	r3, #1
 8015082:	d106      	bne.n	8015092 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8015084:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f000 f92b 	bl	80152e4 <vl53l1cb_poll_for_measurement>
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	e004      	b.n	801509c <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8015092:	2100      	movs	r1, #0
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f000 f925 	bl	80152e4 <vl53l1cb_poll_for_measurement>
 801509a:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d119      	bne.n	80150d6 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 80150a2:	6839      	ldr	r1, [r7, #0]
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f000 f94b 	bl	8015340 <vl53l1cb_get_result>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d003      	beq.n	80150b8 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 80150b0:	f04f 33ff 	mov.w	r3, #4294967295
 80150b4:	60fb      	str	r3, [r7, #12]
 80150b6:	e00e      	b.n	80150d6 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150be:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d105      	bne.n	80150d2 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7ed fdde 	bl	8002c88 <VL53L1_ClearInterruptAndStartMeasurement>
 80150cc:	4603      	mov	r3, r0
 80150ce:	60fb      	str	r3, [r7, #12]
 80150d0:	e001      	b.n	80150d6 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 80150d6:	68fb      	ldr	r3, [r7, #12]
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b084      	sub	sp, #16
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d103      	bne.n	80150f8 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80150f0:	f06f 0301 	mvn.w	r3, #1
 80150f4:	60fb      	str	r3, [r7, #12]
 80150f6:	e068      	b.n	80151ca <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150fe:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015102:	2b01      	cmp	r3, #1
 8015104:	d103      	bne.n	801510e <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8015106:	f04f 33ff 	mov.w	r3, #4294967295
 801510a:	60fb      	str	r3, [r7, #12]
 801510c:	e05d      	b.n	80151ca <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7ed fcf6 	bl	8002b00 <VL53L1_StartMeasurement>
 8015114:	4603      	mov	r3, r0
 8015116:	2b00      	cmp	r3, #0
 8015118:	d154      	bne.n	80151c4 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015120:	2201      	movs	r2, #1
 8015122:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015126:	2300      	movs	r3, #0
 8015128:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	3b01      	subs	r3, #1
 801512e:	2b03      	cmp	r3, #3
 8015130:	d83e      	bhi.n	80151b0 <VL53L1CB_Start+0xd0>
 8015132:	a201      	add	r2, pc, #4	; (adr r2, 8015138 <VL53L1CB_Start+0x58>)
 8015134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015138:	08015149 	.word	0x08015149
 801513c:	08015163 	.word	0x08015163
 8015140:	0801517d 	.word	0x0801517d
 8015144:	08015197 	.word	0x08015197
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801514e:	2201      	movs	r2, #1
 8015150:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801515a:	2201      	movs	r2, #1
 801515c:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015160:	e033      	b.n	80151ca <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015168:	2200      	movs	r2, #0
 801516a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015174:	2201      	movs	r2, #1
 8015176:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 801517a:	e026      	b.n	80151ca <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015182:	2201      	movs	r2, #1
 8015184:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801518e:	2200      	movs	r2, #0
 8015190:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8015194:	e019      	b.n	80151ca <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801519c:	2200      	movs	r2, #0
 801519e:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151a8:	2200      	movs	r2, #0
 80151aa:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80151ae:	e00c      	b.n	80151ca <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151b6:	2200      	movs	r2, #0
 80151b8:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 80151bc:	f06f 0301 	mvn.w	r3, #1
 80151c0:	60fb      	str	r3, [r7, #12]
      break;
 80151c2:	e002      	b.n	80151ca <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 80151c4:	f04f 33ff 	mov.w	r3, #4294967295
 80151c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80151ca:	68fb      	ldr	r3, [r7, #12]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d103      	bne.n	80151ea <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80151e2:	f06f 0301 	mvn.w	r3, #1
 80151e6:	60fb      	str	r3, [r7, #12]
 80151e8:	e01c      	b.n	8015224 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80151f0:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d103      	bne.n	8015200 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 80151f8:	f04f 33ff 	mov.w	r3, #4294967295
 80151fc:	60fb      	str	r3, [r7, #12]
 80151fe:	e011      	b.n	8015224 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015200:	6878      	ldr	r0, [r7, #4]
 8015202:	f7ed fd1d 	bl	8002c40 <VL53L1_StopMeasurement>
 8015206:	4603      	mov	r3, r0
 8015208:	2b00      	cmp	r3, #0
 801520a:	d108      	bne.n	801521e <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015212:	2200      	movs	r2, #0
 8015214:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015218:	2300      	movs	r3, #0
 801521a:	60fb      	str	r3, [r7, #12]
 801521c:	e002      	b.n	8015224 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 801521e:	f04f 33ff 	mov.w	r3, #4294967295
 8015222:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015224:	68fb      	ldr	r3, [r7, #12]
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b084      	sub	sp, #16
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
 8015236:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d103      	bne.n	8015246 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801523e:	f06f 0301 	mvn.w	r3, #1
 8015242:	60fb      	str	r3, [r7, #12]
 8015244:	e012      	b.n	801526c <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	b2db      	uxtb	r3, r3
 801524a:	4619      	mov	r1, r3
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f7ec fdcf 	bl	8001df0 <VL53L1_SetDeviceAddress>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	d003      	beq.n	8015260 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8015258:	f04f 33ff 	mov.w	r3, #4294967295
 801525c:	60fb      	str	r3, [r7, #12]
 801525e:	e005      	b.n	801526c <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	b29a      	uxth	r2, r3
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801526c:	68fb      	ldr	r3, [r7, #12]
}
 801526e:	4618      	mov	r0, r3
 8015270:	3710      	adds	r7, #16
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}

08015276 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8015276:	b480      	push	{r7}
 8015278:	b085      	sub	sp, #20
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
 801527e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d002      	beq.n	801528c <VL53L1CB_GetAddress+0x16>
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d103      	bne.n	8015294 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801528c:	f06f 0301 	mvn.w	r3, #1
 8015290:	60fb      	str	r3, [r7, #12]
 8015292:	e006      	b.n	80152a2 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	891b      	ldrh	r3, [r3, #8]
 8015298:	461a      	mov	r2, r3
 801529a:	683b      	ldr	r3, [r7, #0]
 801529c:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 801529e:	2300      	movs	r3, #0
 80152a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80152a2:	68fb      	ldr	r3, [r7, #12]
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	3714      	adds	r7, #20
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b083      	sub	sp, #12
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80152ba:	f06f 0303 	mvn.w	r3, #3
}
 80152be:	4618      	mov	r0, r3
 80152c0:	370c      	adds	r7, #12
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 80152ca:	b480      	push	{r7}
 80152cc:	b083      	sub	sp, #12
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
 80152d2:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80152d4:	f06f 0303 	mvn.w	r3, #3
}
 80152d8:	4618      	mov	r0, r3
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80152ee:	2300      	movs	r3, #0
 80152f0:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d102      	bne.n	80152fe <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 80152f8:	f06f 0301 	mvn.w	r3, #1
 80152fc:	e01b      	b.n	8015336 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	695b      	ldr	r3, [r3, #20]
 8015302:	4798      	blx	r3
 8015304:	4603      	mov	r3, r0
 8015306:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8015308:	f107 030b 	add.w	r3, r7, #11
 801530c:	4619      	mov	r1, r3
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f7ed fcd0 	bl	8002cb4 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8015314:	7afb      	ldrb	r3, [r7, #11]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d101      	bne.n	801531e <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801531a:	2300      	movs	r3, #0
 801531c:	e00b      	b.n	8015336 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	695b      	ldr	r3, [r3, #20]
 8015322:	4798      	blx	r3
 8015324:	4603      	mov	r3, r0
 8015326:	461a      	mov	r2, r3
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	683a      	ldr	r2, [r7, #0]
 801532e:	429a      	cmp	r2, r3
 8015330:	d8ea      	bhi.n	8015308 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8015332:	f06f 0302 	mvn.w	r3, #2
}
 8015336:	4618      	mov	r0, r3
 8015338:	3710      	adds	r7, #16
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
	...

08015340 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015340:	b590      	push	{r4, r7, lr}
 8015342:	b0a9      	sub	sp, #164	; 0xa4
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d002      	beq.n	8015356 <vl53l1cb_get_result+0x16>
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d104      	bne.n	8015360 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015356:	f06f 0301 	mvn.w	r3, #1
 801535a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801535e:	e120      	b.n	80155a2 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8015360:	f107 030c 	add.w	r3, r7, #12
 8015364:	4619      	mov	r1, r3
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7ee fb82 	bl	8003a70 <VL53L1_GetMultiRangingData>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	d004      	beq.n	801537c <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 8015372:	f04f 33ff 	mov.w	r3, #4294967295
 8015376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801537a:	e112      	b.n	80155a2 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801537c:	2300      	movs	r3, #0
 801537e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015382:	e106      	b.n	8015592 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8015384:	7cbb      	ldrb	r3, [r7, #18]
 8015386:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801538a:	4618      	mov	r0, r3
 801538c:	6839      	ldr	r1, [r7, #0]
 801538e:	4613      	mov	r3, r2
 8015390:	011b      	lsls	r3, r3, #4
 8015392:	4413      	add	r3, r2
 8015394:	009b      	lsls	r3, r3, #2
 8015396:	440b      	add	r3, r1
 8015398:	3304      	adds	r3, #4
 801539a:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 801539c:	2300      	movs	r3, #0
 801539e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80153a2:	e0eb      	b.n	801557c <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80153a4:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80153a8:	4613      	mov	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	1a9b      	subs	r3, r3, r2
 80153ae:	009b      	lsls	r3, r3, #2
 80153b0:	33a0      	adds	r3, #160	; 0xa0
 80153b2:	443b      	add	r3, r7
 80153b4:	3b78      	subs	r3, #120	; 0x78
 80153b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	da0d      	bge.n	80153da <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80153be:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153c2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153c6:	6839      	ldr	r1, [r7, #0]
 80153c8:	4613      	mov	r3, r2
 80153ca:	011b      	lsls	r3, r3, #4
 80153cc:	4413      	add	r3, r2
 80153ce:	4403      	add	r3, r0
 80153d0:	009b      	lsls	r3, r3, #2
 80153d2:	440b      	add	r3, r1
 80153d4:	2200      	movs	r2, #0
 80153d6:	609a      	str	r2, [r3, #8]
 80153d8:	e017      	b.n	801540a <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80153da:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80153de:	4613      	mov	r3, r2
 80153e0:	00db      	lsls	r3, r3, #3
 80153e2:	1a9b      	subs	r3, r3, r2
 80153e4:	009b      	lsls	r3, r3, #2
 80153e6:	33a0      	adds	r3, #160	; 0xa0
 80153e8:	443b      	add	r3, r7
 80153ea:	3b78      	subs	r3, #120	; 0x78
 80153ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153f0:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80153f4:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80153f8:	461c      	mov	r4, r3
 80153fa:	6839      	ldr	r1, [r7, #0]
 80153fc:	4613      	mov	r3, r2
 80153fe:	011b      	lsls	r3, r3, #4
 8015400:	4413      	add	r3, r2
 8015402:	4403      	add	r3, r0
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	440b      	add	r3, r1
 8015408:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015410:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8015414:	2b01      	cmp	r3, #1
 8015416:	d136      	bne.n	8015486 <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015418:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801541c:	4613      	mov	r3, r2
 801541e:	00db      	lsls	r3, r3, #3
 8015420:	1a9b      	subs	r3, r3, r2
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	33a0      	adds	r3, #160	; 0xa0
 8015426:	443b      	add	r3, r7
 8015428:	3b80      	subs	r3, #128	; 0x80
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	ee07 3a90 	vmov	s15, r3
 8015430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015434:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80155b0 <vl53l1cb_get_result+0x270>
 8015438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801543c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80155b4 <vl53l1cb_get_result+0x274>
 8015440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015444:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801544c:	0a1b      	lsrs	r3, r3, #8
 801544e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8015452:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8015456:	ee07 3a90 	vmov	s15, r3
 801545a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801545e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015462:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015466:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801546a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801546e:	6839      	ldr	r1, [r7, #0]
 8015470:	4613      	mov	r3, r2
 8015472:	011b      	lsls	r3, r3, #4
 8015474:	4413      	add	r3, r2
 8015476:	4403      	add	r3, r0
 8015478:	3308      	adds	r3, #8
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	440b      	add	r3, r1
 801547e:	3308      	adds	r3, #8
 8015480:	edc3 7a00 	vstr	s15, [r3]
 8015484:	e00f      	b.n	80154a6 <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8015486:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801548a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801548e:	6839      	ldr	r1, [r7, #0]
 8015490:	4613      	mov	r3, r2
 8015492:	011b      	lsls	r3, r3, #4
 8015494:	4413      	add	r3, r2
 8015496:	4403      	add	r3, r0
 8015498:	3308      	adds	r3, #8
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	440b      	add	r3, r1
 801549e:	3308      	adds	r3, #8
 80154a0:	f04f 0200 	mov.w	r2, #0
 80154a4:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80154ac:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d136      	bne.n	8015522 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80154b4:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80154b8:	4613      	mov	r3, r2
 80154ba:	00db      	lsls	r3, r3, #3
 80154bc:	1a9b      	subs	r3, r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	33a0      	adds	r3, #160	; 0xa0
 80154c2:	443b      	add	r3, r7
 80154c4:	3b84      	subs	r3, #132	; 0x84
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	ee07 3a90 	vmov	s15, r3
 80154cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154d0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80155b0 <vl53l1cb_get_result+0x270>
 80154d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80154d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80155b4 <vl53l1cb_get_result+0x274>
 80154dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154e0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80154e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80154e8:	0a1b      	lsrs	r3, r3, #8
 80154ea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80154ee:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80154f2:	ee07 3a90 	vmov	s15, r3
 80154f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154fa:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80154fe:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015502:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8015506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801550a:	6839      	ldr	r1, [r7, #0]
 801550c:	4613      	mov	r3, r2
 801550e:	011b      	lsls	r3, r3, #4
 8015510:	4413      	add	r3, r2
 8015512:	4403      	add	r3, r0
 8015514:	330c      	adds	r3, #12
 8015516:	009b      	lsls	r3, r3, #2
 8015518:	440b      	add	r3, r1
 801551a:	3308      	adds	r3, #8
 801551c:	edc3 7a00 	vstr	s15, [r3]
 8015520:	e00f      	b.n	8015542 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8015522:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015526:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801552a:	6839      	ldr	r1, [r7, #0]
 801552c:	4613      	mov	r3, r2
 801552e:	011b      	lsls	r3, r3, #4
 8015530:	4413      	add	r3, r2
 8015532:	4403      	add	r3, r0
 8015534:	330c      	adds	r3, #12
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	440b      	add	r3, r1
 801553a:	3308      	adds	r3, #8
 801553c:	f04f 0200 	mov.w	r2, #0
 8015540:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8015542:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015546:	4613      	mov	r3, r2
 8015548:	00db      	lsls	r3, r3, #3
 801554a:	1a9b      	subs	r3, r3, r2
 801554c:	009b      	lsls	r3, r3, #2
 801554e:	33a0      	adds	r3, #160	; 0xa0
 8015550:	443b      	add	r3, r7
 8015552:	3b75      	subs	r3, #117	; 0x75
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801555a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801555e:	461c      	mov	r4, r3
 8015560:	6839      	ldr	r1, [r7, #0]
 8015562:	4613      	mov	r3, r2
 8015564:	011b      	lsls	r3, r3, #4
 8015566:	4413      	add	r3, r2
 8015568:	4403      	add	r3, r0
 801556a:	3304      	adds	r3, #4
 801556c:	009b      	lsls	r3, r3, #2
 801556e:	440b      	add	r3, r1
 8015570:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015572:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8015576:	3301      	adds	r3, #1
 8015578:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801557c:	7cbb      	ldrb	r3, [r7, #18]
 801557e:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015582:	429a      	cmp	r2, r3
 8015584:	f4ff af0e 	bcc.w	80153a4 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015588:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801558c:	3301      	adds	r3, #1
 801558e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8015592:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8015596:	2b00      	cmp	r3, #0
 8015598:	f43f aef4 	beq.w	8015384 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 801559c:	2300      	movs	r3, #0
 801559e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 80155a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	37a4      	adds	r7, #164	; 0xa4
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}
 80155ae:	bf00      	nop
 80155b0:	47800000 	.word	0x47800000
 80155b4:	447a0000 	.word	0x447a0000

080155b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80155be:	2300      	movs	r3, #0
 80155c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80155c2:	4b0c      	ldr	r3, [pc, #48]	; (80155f4 <HAL_Init+0x3c>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	4a0b      	ldr	r2, [pc, #44]	; (80155f4 <HAL_Init+0x3c>)
 80155c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80155cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80155ce:	2003      	movs	r0, #3
 80155d0:	f000 f90f 	bl	80157f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80155d4:	200f      	movs	r0, #15
 80155d6:	f7eb fb93 	bl	8000d00 <HAL_InitTick>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d002      	beq.n	80155e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80155e0:	2301      	movs	r3, #1
 80155e2:	71fb      	strb	r3, [r7, #7]
 80155e4:	e001      	b.n	80155ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80155e6:	f7eb fb6a 	bl	8000cbe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80155ea:	79fb      	ldrb	r3, [r7, #7]
}
 80155ec:	4618      	mov	r0, r3
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	58004000 	.word	0x58004000

080155f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80155f8:	b480      	push	{r7}
 80155fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80155fc:	4b06      	ldr	r3, [pc, #24]	; (8015618 <HAL_IncTick+0x20>)
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	461a      	mov	r2, r3
 8015602:	4b06      	ldr	r3, [pc, #24]	; (801561c <HAL_IncTick+0x24>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	4413      	add	r3, r2
 8015608:	4a04      	ldr	r2, [pc, #16]	; (801561c <HAL_IncTick+0x24>)
 801560a:	6013      	str	r3, [r2, #0]
}
 801560c:	bf00      	nop
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr
 8015616:	bf00      	nop
 8015618:	20000074 	.word	0x20000074
 801561c:	20008650 	.word	0x20008650

08015620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015620:	b480      	push	{r7}
 8015622:	af00      	add	r7, sp, #0
  return uwTick;
 8015624:	4b03      	ldr	r3, [pc, #12]	; (8015634 <HAL_GetTick+0x14>)
 8015626:	681b      	ldr	r3, [r3, #0]
}
 8015628:	4618      	mov	r0, r3
 801562a:	46bd      	mov	sp, r7
 801562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015630:	4770      	bx	lr
 8015632:	bf00      	nop
 8015634:	20008650 	.word	0x20008650

08015638 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8015638:	b480      	push	{r7}
 801563a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 801563c:	4b03      	ldr	r3, [pc, #12]	; (801564c <HAL_GetTickPrio+0x14>)
 801563e:	681b      	ldr	r3, [r3, #0]
}
 8015640:	4618      	mov	r0, r3
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr
 801564a:	bf00      	nop
 801564c:	20000070 	.word	0x20000070

08015650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015658:	f7ff ffe2 	bl	8015620 <HAL_GetTick>
 801565c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015668:	d005      	beq.n	8015676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801566a:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <HAL_Delay+0x44>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	461a      	mov	r2, r3
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	4413      	add	r3, r2
 8015674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8015676:	bf00      	nop
 8015678:	f7ff ffd2 	bl	8015620 <HAL_GetTick>
 801567c:	4602      	mov	r2, r0
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	429a      	cmp	r2, r3
 8015686:	d8f7      	bhi.n	8015678 <HAL_Delay+0x28>
  {
  }
}
 8015688:	bf00      	nop
 801568a:	bf00      	nop
 801568c:	3710      	adds	r7, #16
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	20000074 	.word	0x20000074

08015698 <__NVIC_SetPriorityGrouping>:
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f003 0307 	and.w	r3, r3, #7
 80156a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80156a8:	4b0c      	ldr	r3, [pc, #48]	; (80156dc <__NVIC_SetPriorityGrouping+0x44>)
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80156ae:	68ba      	ldr	r2, [r7, #8]
 80156b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80156b4:	4013      	ands	r3, r2
 80156b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80156c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80156c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80156c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80156ca:	4a04      	ldr	r2, [pc, #16]	; (80156dc <__NVIC_SetPriorityGrouping+0x44>)
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	60d3      	str	r3, [r2, #12]
}
 80156d0:	bf00      	nop
 80156d2:	3714      	adds	r7, #20
 80156d4:	46bd      	mov	sp, r7
 80156d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156da:	4770      	bx	lr
 80156dc:	e000ed00 	.word	0xe000ed00

080156e0 <__NVIC_GetPriorityGrouping>:
{
 80156e0:	b480      	push	{r7}
 80156e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80156e4:	4b04      	ldr	r3, [pc, #16]	; (80156f8 <__NVIC_GetPriorityGrouping+0x18>)
 80156e6:	68db      	ldr	r3, [r3, #12]
 80156e8:	0a1b      	lsrs	r3, r3, #8
 80156ea:	f003 0307 	and.w	r3, r3, #7
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr
 80156f8:	e000ed00 	.word	0xe000ed00

080156fc <__NVIC_EnableIRQ>:
{
 80156fc:	b480      	push	{r7}
 80156fe:	b083      	sub	sp, #12
 8015700:	af00      	add	r7, sp, #0
 8015702:	4603      	mov	r3, r0
 8015704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801570a:	2b00      	cmp	r3, #0
 801570c:	db0b      	blt.n	8015726 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801570e:	79fb      	ldrb	r3, [r7, #7]
 8015710:	f003 021f 	and.w	r2, r3, #31
 8015714:	4907      	ldr	r1, [pc, #28]	; (8015734 <__NVIC_EnableIRQ+0x38>)
 8015716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801571a:	095b      	lsrs	r3, r3, #5
 801571c:	2001      	movs	r0, #1
 801571e:	fa00 f202 	lsl.w	r2, r0, r2
 8015722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015726:	bf00      	nop
 8015728:	370c      	adds	r7, #12
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr
 8015732:	bf00      	nop
 8015734:	e000e100 	.word	0xe000e100

08015738 <__NVIC_SetPriority>:
{
 8015738:	b480      	push	{r7}
 801573a:	b083      	sub	sp, #12
 801573c:	af00      	add	r7, sp, #0
 801573e:	4603      	mov	r3, r0
 8015740:	6039      	str	r1, [r7, #0]
 8015742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015748:	2b00      	cmp	r3, #0
 801574a:	db0a      	blt.n	8015762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	b2da      	uxtb	r2, r3
 8015750:	490c      	ldr	r1, [pc, #48]	; (8015784 <__NVIC_SetPriority+0x4c>)
 8015752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015756:	0112      	lsls	r2, r2, #4
 8015758:	b2d2      	uxtb	r2, r2
 801575a:	440b      	add	r3, r1
 801575c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015760:	e00a      	b.n	8015778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	b2da      	uxtb	r2, r3
 8015766:	4908      	ldr	r1, [pc, #32]	; (8015788 <__NVIC_SetPriority+0x50>)
 8015768:	79fb      	ldrb	r3, [r7, #7]
 801576a:	f003 030f 	and.w	r3, r3, #15
 801576e:	3b04      	subs	r3, #4
 8015770:	0112      	lsls	r2, r2, #4
 8015772:	b2d2      	uxtb	r2, r2
 8015774:	440b      	add	r3, r1
 8015776:	761a      	strb	r2, [r3, #24]
}
 8015778:	bf00      	nop
 801577a:	370c      	adds	r7, #12
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr
 8015784:	e000e100 	.word	0xe000e100
 8015788:	e000ed00 	.word	0xe000ed00

0801578c <NVIC_EncodePriority>:
{
 801578c:	b480      	push	{r7}
 801578e:	b089      	sub	sp, #36	; 0x24
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	60b9      	str	r1, [r7, #8]
 8015796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	f003 0307 	and.w	r3, r3, #7
 801579e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	f1c3 0307 	rsb	r3, r3, #7
 80157a6:	2b04      	cmp	r3, #4
 80157a8:	bf28      	it	cs
 80157aa:	2304      	movcs	r3, #4
 80157ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	3304      	adds	r3, #4
 80157b2:	2b06      	cmp	r3, #6
 80157b4:	d902      	bls.n	80157bc <NVIC_EncodePriority+0x30>
 80157b6:	69fb      	ldr	r3, [r7, #28]
 80157b8:	3b03      	subs	r3, #3
 80157ba:	e000      	b.n	80157be <NVIC_EncodePriority+0x32>
 80157bc:	2300      	movs	r3, #0
 80157be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157c0:	f04f 32ff 	mov.w	r2, #4294967295
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ca:	43da      	mvns	r2, r3
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	401a      	ands	r2, r3
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80157d4:	f04f 31ff 	mov.w	r1, #4294967295
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	fa01 f303 	lsl.w	r3, r1, r3
 80157de:	43d9      	mvns	r1, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80157e4:	4313      	orrs	r3, r2
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3724      	adds	r7, #36	; 0x24
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr

080157f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80157f2:	b580      	push	{r7, lr}
 80157f4:	b082      	sub	sp, #8
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80157fa:	6878      	ldr	r0, [r7, #4]
 80157fc:	f7ff ff4c 	bl	8015698 <__NVIC_SetPriorityGrouping>
}
 8015800:	bf00      	nop
 8015802:	3708      	adds	r7, #8
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b086      	sub	sp, #24
 801580c:	af00      	add	r7, sp, #0
 801580e:	4603      	mov	r3, r0
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
 8015814:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015816:	f7ff ff63 	bl	80156e0 <__NVIC_GetPriorityGrouping>
 801581a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	68b9      	ldr	r1, [r7, #8]
 8015820:	6978      	ldr	r0, [r7, #20]
 8015822:	f7ff ffb3 	bl	801578c <NVIC_EncodePriority>
 8015826:	4602      	mov	r2, r0
 8015828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801582c:	4611      	mov	r1, r2
 801582e:	4618      	mov	r0, r3
 8015830:	f7ff ff82 	bl	8015738 <__NVIC_SetPriority>
}
 8015834:	bf00      	nop
 8015836:	3718      	adds	r7, #24
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	4603      	mov	r3, r0
 8015844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801584a:	4618      	mov	r0, r3
 801584c:	f7ff ff56 	bl	80156fc <__NVIC_EnableIRQ>
}
 8015850:	bf00      	nop
 8015852:	3708      	adds	r7, #8
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015858:	b480      	push	{r7}
 801585a:	b087      	sub	sp, #28
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015862:	2300      	movs	r3, #0
 8015864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015866:	e14c      	b.n	8015b02 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	681a      	ldr	r2, [r3, #0]
 801586c:	2101      	movs	r1, #1
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	fa01 f303 	lsl.w	r3, r1, r3
 8015874:	4013      	ands	r3, r2
 8015876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	2b00      	cmp	r3, #0
 801587c:	f000 813e 	beq.w	8015afc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	f003 0303 	and.w	r3, r3, #3
 8015888:	2b01      	cmp	r3, #1
 801588a:	d005      	beq.n	8015898 <HAL_GPIO_Init+0x40>
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	f003 0303 	and.w	r3, r3, #3
 8015894:	2b02      	cmp	r3, #2
 8015896:	d130      	bne.n	80158fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	2203      	movs	r2, #3
 80158a4:	fa02 f303 	lsl.w	r3, r2, r3
 80158a8:	43db      	mvns	r3, r3
 80158aa:	693a      	ldr	r2, [r7, #16]
 80158ac:	4013      	ands	r3, r2
 80158ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	68da      	ldr	r2, [r3, #12]
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	fa02 f303 	lsl.w	r3, r2, r3
 80158bc:	693a      	ldr	r2, [r7, #16]
 80158be:	4313      	orrs	r3, r2
 80158c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	693a      	ldr	r2, [r7, #16]
 80158c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80158ce:	2201      	movs	r2, #1
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	fa02 f303 	lsl.w	r3, r2, r3
 80158d6:	43db      	mvns	r3, r3
 80158d8:	693a      	ldr	r2, [r7, #16]
 80158da:	4013      	ands	r3, r2
 80158dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	091b      	lsrs	r3, r3, #4
 80158e4:	f003 0201 	and.w	r2, r3, #1
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	fa02 f303 	lsl.w	r3, r2, r3
 80158ee:	693a      	ldr	r2, [r7, #16]
 80158f0:	4313      	orrs	r3, r2
 80158f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	693a      	ldr	r2, [r7, #16]
 80158f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	f003 0303 	and.w	r3, r3, #3
 8015902:	2b03      	cmp	r3, #3
 8015904:	d017      	beq.n	8015936 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	68db      	ldr	r3, [r3, #12]
 801590a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	005b      	lsls	r3, r3, #1
 8015910:	2203      	movs	r2, #3
 8015912:	fa02 f303 	lsl.w	r3, r2, r3
 8015916:	43db      	mvns	r3, r3
 8015918:	693a      	ldr	r2, [r7, #16]
 801591a:	4013      	ands	r3, r2
 801591c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	689a      	ldr	r2, [r3, #8]
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	fa02 f303 	lsl.w	r3, r2, r3
 801592a:	693a      	ldr	r2, [r7, #16]
 801592c:	4313      	orrs	r3, r2
 801592e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	693a      	ldr	r2, [r7, #16]
 8015934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	f003 0303 	and.w	r3, r3, #3
 801593e:	2b02      	cmp	r3, #2
 8015940:	d123      	bne.n	801598a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	08da      	lsrs	r2, r3, #3
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	3208      	adds	r2, #8
 801594a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801594e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015950:	697b      	ldr	r3, [r7, #20]
 8015952:	f003 0307 	and.w	r3, r3, #7
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	220f      	movs	r2, #15
 801595a:	fa02 f303 	lsl.w	r3, r2, r3
 801595e:	43db      	mvns	r3, r3
 8015960:	693a      	ldr	r2, [r7, #16]
 8015962:	4013      	ands	r3, r2
 8015964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	691a      	ldr	r2, [r3, #16]
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	f003 0307 	and.w	r3, r3, #7
 8015970:	009b      	lsls	r3, r3, #2
 8015972:	fa02 f303 	lsl.w	r3, r2, r3
 8015976:	693a      	ldr	r2, [r7, #16]
 8015978:	4313      	orrs	r3, r2
 801597a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	08da      	lsrs	r2, r3, #3
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	3208      	adds	r2, #8
 8015984:	6939      	ldr	r1, [r7, #16]
 8015986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015990:	697b      	ldr	r3, [r7, #20]
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	2203      	movs	r2, #3
 8015996:	fa02 f303 	lsl.w	r3, r2, r3
 801599a:	43db      	mvns	r3, r3
 801599c:	693a      	ldr	r2, [r7, #16]
 801599e:	4013      	ands	r3, r2
 80159a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	f003 0203 	and.w	r2, r3, #3
 80159aa:	697b      	ldr	r3, [r7, #20]
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	fa02 f303 	lsl.w	r3, r2, r3
 80159b2:	693a      	ldr	r2, [r7, #16]
 80159b4:	4313      	orrs	r3, r2
 80159b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	693a      	ldr	r2, [r7, #16]
 80159bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	f000 8098 	beq.w	8015afc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80159cc:	4a54      	ldr	r2, [pc, #336]	; (8015b20 <HAL_GPIO_Init+0x2c8>)
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	089b      	lsrs	r3, r3, #2
 80159d2:	3302      	adds	r3, #2
 80159d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	f003 0303 	and.w	r3, r3, #3
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	220f      	movs	r2, #15
 80159e4:	fa02 f303 	lsl.w	r3, r2, r3
 80159e8:	43db      	mvns	r3, r3
 80159ea:	693a      	ldr	r2, [r7, #16]
 80159ec:	4013      	ands	r3, r2
 80159ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80159f6:	d019      	beq.n	8015a2c <HAL_GPIO_Init+0x1d4>
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	4a4a      	ldr	r2, [pc, #296]	; (8015b24 <HAL_GPIO_Init+0x2cc>)
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d013      	beq.n	8015a28 <HAL_GPIO_Init+0x1d0>
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	4a49      	ldr	r2, [pc, #292]	; (8015b28 <HAL_GPIO_Init+0x2d0>)
 8015a04:	4293      	cmp	r3, r2
 8015a06:	d00d      	beq.n	8015a24 <HAL_GPIO_Init+0x1cc>
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	4a48      	ldr	r2, [pc, #288]	; (8015b2c <HAL_GPIO_Init+0x2d4>)
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d007      	beq.n	8015a20 <HAL_GPIO_Init+0x1c8>
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4a47      	ldr	r2, [pc, #284]	; (8015b30 <HAL_GPIO_Init+0x2d8>)
 8015a14:	4293      	cmp	r3, r2
 8015a16:	d101      	bne.n	8015a1c <HAL_GPIO_Init+0x1c4>
 8015a18:	2304      	movs	r3, #4
 8015a1a:	e008      	b.n	8015a2e <HAL_GPIO_Init+0x1d6>
 8015a1c:	2307      	movs	r3, #7
 8015a1e:	e006      	b.n	8015a2e <HAL_GPIO_Init+0x1d6>
 8015a20:	2303      	movs	r3, #3
 8015a22:	e004      	b.n	8015a2e <HAL_GPIO_Init+0x1d6>
 8015a24:	2302      	movs	r3, #2
 8015a26:	e002      	b.n	8015a2e <HAL_GPIO_Init+0x1d6>
 8015a28:	2301      	movs	r3, #1
 8015a2a:	e000      	b.n	8015a2e <HAL_GPIO_Init+0x1d6>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	697a      	ldr	r2, [r7, #20]
 8015a30:	f002 0203 	and.w	r2, r2, #3
 8015a34:	0092      	lsls	r2, r2, #2
 8015a36:	4093      	lsls	r3, r2
 8015a38:	693a      	ldr	r2, [r7, #16]
 8015a3a:	4313      	orrs	r3, r2
 8015a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8015a3e:	4938      	ldr	r1, [pc, #224]	; (8015b20 <HAL_GPIO_Init+0x2c8>)
 8015a40:	697b      	ldr	r3, [r7, #20]
 8015a42:	089b      	lsrs	r3, r3, #2
 8015a44:	3302      	adds	r3, #2
 8015a46:	693a      	ldr	r2, [r7, #16]
 8015a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015a4c:	4b39      	ldr	r3, [pc, #228]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	43db      	mvns	r3, r3
 8015a56:	693a      	ldr	r2, [r7, #16]
 8015a58:	4013      	ands	r3, r2
 8015a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	685b      	ldr	r3, [r3, #4]
 8015a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d003      	beq.n	8015a70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015a68:	693a      	ldr	r2, [r7, #16]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	4313      	orrs	r3, r2
 8015a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015a70:	4a30      	ldr	r2, [pc, #192]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015a76:	4b2f      	ldr	r3, [pc, #188]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	43db      	mvns	r3, r3
 8015a80:	693a      	ldr	r2, [r7, #16]
 8015a82:	4013      	ands	r3, r2
 8015a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d003      	beq.n	8015a9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015a92:	693a      	ldr	r2, [r7, #16]
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	4313      	orrs	r3, r2
 8015a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015a9a:	4a26      	ldr	r2, [pc, #152]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015a9c:	693b      	ldr	r3, [r7, #16]
 8015a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015aa0:	4b24      	ldr	r3, [pc, #144]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	43db      	mvns	r3, r3
 8015aac:	693a      	ldr	r2, [r7, #16]
 8015aae:	4013      	ands	r3, r2
 8015ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d003      	beq.n	8015ac6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8015abe:	693a      	ldr	r2, [r7, #16]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	4313      	orrs	r3, r2
 8015ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015ac6:	4a1b      	ldr	r2, [pc, #108]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8015ace:	4b19      	ldr	r3, [pc, #100]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	43db      	mvns	r3, r3
 8015ada:	693a      	ldr	r2, [r7, #16]
 8015adc:	4013      	ands	r3, r2
 8015ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d003      	beq.n	8015af4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8015aec:	693a      	ldr	r2, [r7, #16]
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	4313      	orrs	r3, r2
 8015af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015af4:	4a0f      	ldr	r2, [pc, #60]	; (8015b34 <HAL_GPIO_Init+0x2dc>)
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8015afc:	697b      	ldr	r3, [r7, #20]
 8015afe:	3301      	adds	r3, #1
 8015b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	fa22 f303 	lsr.w	r3, r2, r3
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f47f aeab 	bne.w	8015868 <HAL_GPIO_Init+0x10>
  }
}
 8015b12:	bf00      	nop
 8015b14:	bf00      	nop
 8015b16:	371c      	adds	r7, #28
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr
 8015b20:	40010000 	.word	0x40010000
 8015b24:	48000400 	.word	0x48000400
 8015b28:	48000800 	.word	0x48000800
 8015b2c:	48000c00 	.word	0x48000c00
 8015b30:	48001000 	.word	0x48001000
 8015b34:	58000800 	.word	0x58000800

08015b38 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b087      	sub	sp, #28
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015b42:	2300      	movs	r3, #0
 8015b44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8015b46:	e0bb      	b.n	8015cc0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8015b48:	2201      	movs	r2, #1
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8015b50:	683a      	ldr	r2, [r7, #0]
 8015b52:	4013      	ands	r3, r2
 8015b54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	f000 80ae 	beq.w	8015cba <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8015b5e:	4a5f      	ldr	r2, [pc, #380]	; (8015cdc <HAL_GPIO_DeInit+0x1a4>)
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	089b      	lsrs	r3, r3, #2
 8015b64:	3302      	adds	r3, #2
 8015b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	f003 0303 	and.w	r3, r3, #3
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	220f      	movs	r2, #15
 8015b76:	fa02 f303 	lsl.w	r3, r2, r3
 8015b7a:	68fa      	ldr	r2, [r7, #12]
 8015b7c:	4013      	ands	r3, r2
 8015b7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015b86:	d019      	beq.n	8015bbc <HAL_GPIO_DeInit+0x84>
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4a55      	ldr	r2, [pc, #340]	; (8015ce0 <HAL_GPIO_DeInit+0x1a8>)
 8015b8c:	4293      	cmp	r3, r2
 8015b8e:	d013      	beq.n	8015bb8 <HAL_GPIO_DeInit+0x80>
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	4a54      	ldr	r2, [pc, #336]	; (8015ce4 <HAL_GPIO_DeInit+0x1ac>)
 8015b94:	4293      	cmp	r3, r2
 8015b96:	d00d      	beq.n	8015bb4 <HAL_GPIO_DeInit+0x7c>
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	4a53      	ldr	r2, [pc, #332]	; (8015ce8 <HAL_GPIO_DeInit+0x1b0>)
 8015b9c:	4293      	cmp	r3, r2
 8015b9e:	d007      	beq.n	8015bb0 <HAL_GPIO_DeInit+0x78>
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	4a52      	ldr	r2, [pc, #328]	; (8015cec <HAL_GPIO_DeInit+0x1b4>)
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	d101      	bne.n	8015bac <HAL_GPIO_DeInit+0x74>
 8015ba8:	2304      	movs	r3, #4
 8015baa:	e008      	b.n	8015bbe <HAL_GPIO_DeInit+0x86>
 8015bac:	2307      	movs	r3, #7
 8015bae:	e006      	b.n	8015bbe <HAL_GPIO_DeInit+0x86>
 8015bb0:	2303      	movs	r3, #3
 8015bb2:	e004      	b.n	8015bbe <HAL_GPIO_DeInit+0x86>
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	e002      	b.n	8015bbe <HAL_GPIO_DeInit+0x86>
 8015bb8:	2301      	movs	r3, #1
 8015bba:	e000      	b.n	8015bbe <HAL_GPIO_DeInit+0x86>
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	697a      	ldr	r2, [r7, #20]
 8015bc0:	f002 0203 	and.w	r2, r2, #3
 8015bc4:	0092      	lsls	r2, r2, #2
 8015bc6:	4093      	lsls	r3, r2
 8015bc8:	68fa      	ldr	r2, [r7, #12]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d136      	bne.n	8015c3c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8015bce:	4b48      	ldr	r3, [pc, #288]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015bd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	43db      	mvns	r3, r3
 8015bd8:	4945      	ldr	r1, [pc, #276]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015bda:	4013      	ands	r3, r2
 8015bdc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015be0:	4b43      	ldr	r3, [pc, #268]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015be2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015be6:	693b      	ldr	r3, [r7, #16]
 8015be8:	43db      	mvns	r3, r3
 8015bea:	4941      	ldr	r1, [pc, #260]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015bec:	4013      	ands	r3, r2
 8015bee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015bf2:	4b3f      	ldr	r3, [pc, #252]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	43db      	mvns	r3, r3
 8015bfa:	493d      	ldr	r1, [pc, #244]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015c00:	4b3b      	ldr	r3, [pc, #236]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015c02:	685a      	ldr	r2, [r3, #4]
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	43db      	mvns	r3, r3
 8015c08:	4939      	ldr	r1, [pc, #228]	; (8015cf0 <HAL_GPIO_DeInit+0x1b8>)
 8015c0a:	4013      	ands	r3, r2
 8015c0c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	f003 0303 	and.w	r3, r3, #3
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	220f      	movs	r2, #15
 8015c18:	fa02 f303 	lsl.w	r3, r2, r3
 8015c1c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015c1e:	4a2f      	ldr	r2, [pc, #188]	; (8015cdc <HAL_GPIO_DeInit+0x1a4>)
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	089b      	lsrs	r3, r3, #2
 8015c24:	3302      	adds	r3, #2
 8015c26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	43da      	mvns	r2, r3
 8015c2e:	482b      	ldr	r0, [pc, #172]	; (8015cdc <HAL_GPIO_DeInit+0x1a4>)
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	089b      	lsrs	r3, r3, #2
 8015c34:	400a      	ands	r2, r1
 8015c36:	3302      	adds	r3, #2
 8015c38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681a      	ldr	r2, [r3, #0]
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	2103      	movs	r1, #3
 8015c46:	fa01 f303 	lsl.w	r3, r1, r3
 8015c4a:	431a      	orrs	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	08da      	lsrs	r2, r3, #3
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	3208      	adds	r2, #8
 8015c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	f003 0307 	and.w	r3, r3, #7
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	220f      	movs	r2, #15
 8015c66:	fa02 f303 	lsl.w	r3, r2, r3
 8015c6a:	43db      	mvns	r3, r3
 8015c6c:	697a      	ldr	r2, [r7, #20]
 8015c6e:	08d2      	lsrs	r2, r2, #3
 8015c70:	4019      	ands	r1, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	3208      	adds	r2, #8
 8015c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	68da      	ldr	r2, [r3, #12]
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	005b      	lsls	r3, r3, #1
 8015c82:	2103      	movs	r1, #3
 8015c84:	fa01 f303 	lsl.w	r3, r1, r3
 8015c88:	43db      	mvns	r3, r3
 8015c8a:	401a      	ands	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685a      	ldr	r2, [r3, #4]
 8015c94:	2101      	movs	r1, #1
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	fa01 f303 	lsl.w	r3, r1, r3
 8015c9c:	43db      	mvns	r3, r3
 8015c9e:	401a      	ands	r2, r3
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	689a      	ldr	r2, [r3, #8]
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	2103      	movs	r1, #3
 8015cae:	fa01 f303 	lsl.w	r3, r1, r3
 8015cb2:	43db      	mvns	r3, r3
 8015cb4:	401a      	ands	r2, r3
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015cc0:	683a      	ldr	r2, [r7, #0]
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f47f af3d 	bne.w	8015b48 <HAL_GPIO_DeInit+0x10>
  }
}
 8015cce:	bf00      	nop
 8015cd0:	bf00      	nop
 8015cd2:	371c      	adds	r7, #28
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr
 8015cdc:	40010000 	.word	0x40010000
 8015ce0:	48000400 	.word	0x48000400
 8015ce4:	48000800 	.word	0x48000800
 8015ce8:	48000c00 	.word	0x48000c00
 8015cec:	48001000 	.word	0x48001000
 8015cf0:	58000800 	.word	0x58000800

08015cf4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b085      	sub	sp, #20
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	691a      	ldr	r2, [r3, #16]
 8015d04:	887b      	ldrh	r3, [r7, #2]
 8015d06:	4013      	ands	r3, r2
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d002      	beq.n	8015d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	73fb      	strb	r3, [r7, #15]
 8015d10:	e001      	b.n	8015d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015d12:	2300      	movs	r3, #0
 8015d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3714      	adds	r7, #20
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d22:	4770      	bx	lr

08015d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	460b      	mov	r3, r1
 8015d2e:	807b      	strh	r3, [r7, #2]
 8015d30:	4613      	mov	r3, r2
 8015d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015d34:	787b      	ldrb	r3, [r7, #1]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d003      	beq.n	8015d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015d3a:	887a      	ldrh	r2, [r7, #2]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015d40:	e002      	b.n	8015d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015d42:	887a      	ldrh	r2, [r7, #2]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015d48:	bf00      	nop
 8015d4a:	370c      	adds	r7, #12
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d52:	4770      	bx	lr

08015d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b082      	sub	sp, #8
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d101      	bne.n	8015d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015d62:	2301      	movs	r3, #1
 8015d64:	e081      	b.n	8015e6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d106      	bne.n	8015d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	2200      	movs	r2, #0
 8015d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f000 f8a8 	bl	8015ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2224      	movs	r2, #36	; 0x24
 8015d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	f022 0201 	bic.w	r2, r2, #1
 8015d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	685a      	ldr	r2, [r3, #4]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	689a      	ldr	r2, [r3, #8]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	2b01      	cmp	r3, #1
 8015dbc:	d107      	bne.n	8015dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	689a      	ldr	r2, [r3, #8]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015dca:	609a      	str	r2, [r3, #8]
 8015dcc:	e006      	b.n	8015ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	689a      	ldr	r2, [r3, #8]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	2b02      	cmp	r3, #2
 8015de2:	d104      	bne.n	8015dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	6812      	ldr	r2, [r2, #0]
 8015df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015e00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	68da      	ldr	r2, [r3, #12]
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015e10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	691a      	ldr	r2, [r3, #16]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	695b      	ldr	r3, [r3, #20]
 8015e1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	699b      	ldr	r3, [r3, #24]
 8015e22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	430a      	orrs	r2, r1
 8015e2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	69d9      	ldr	r1, [r3, #28]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	6a1a      	ldr	r2, [r3, #32]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	430a      	orrs	r2, r1
 8015e3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f042 0201 	orr.w	r2, r2, #1
 8015e4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	2200      	movs	r2, #0
 8015e50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2220      	movs	r2, #32
 8015e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015e68:	2300      	movs	r3, #0
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}

08015e72 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015e72:	b580      	push	{r7, lr}
 8015e74:	b082      	sub	sp, #8
 8015e76:	af00      	add	r7, sp, #0
 8015e78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d101      	bne.n	8015e84 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015e80:	2301      	movs	r3, #1
 8015e82:	e021      	b.n	8015ec8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2224      	movs	r2, #36	; 0x24
 8015e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	681a      	ldr	r2, [r3, #0]
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	f022 0201 	bic.w	r2, r2, #1
 8015e9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f000 f821 	bl	8015ee4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015ec6:	2300      	movs	r3, #0
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3708      	adds	r7, #8
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015ed8:	bf00      	nop
 8015eda:	370c      	adds	r7, #12
 8015edc:	46bd      	mov	sp, r7
 8015ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee2:	4770      	bx	lr

08015ee4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b083      	sub	sp, #12
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015eec:	bf00      	nop
 8015eee:	370c      	adds	r7, #12
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef6:	4770      	bx	lr

08015ef8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b088      	sub	sp, #32
 8015efc:	af02      	add	r7, sp, #8
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	607a      	str	r2, [r7, #4]
 8015f02:	461a      	mov	r2, r3
 8015f04:	460b      	mov	r3, r1
 8015f06:	817b      	strh	r3, [r7, #10]
 8015f08:	4613      	mov	r3, r2
 8015f0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015f12:	b2db      	uxtb	r3, r3
 8015f14:	2b20      	cmp	r3, #32
 8015f16:	f040 80da 	bne.w	80160ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015f20:	2b01      	cmp	r3, #1
 8015f22:	d101      	bne.n	8015f28 <HAL_I2C_Master_Transmit+0x30>
 8015f24:	2302      	movs	r3, #2
 8015f26:	e0d3      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f30:	f7ff fb76 	bl	8015620 <HAL_GetTick>
 8015f34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	9300      	str	r3, [sp, #0]
 8015f3a:	2319      	movs	r3, #25
 8015f3c:	2201      	movs	r2, #1
 8015f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015f42:	68f8      	ldr	r0, [r7, #12]
 8015f44:	f000 fa00 	bl	8016348 <I2C_WaitOnFlagUntilTimeout>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d001      	beq.n	8015f52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e0be      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2221      	movs	r2, #33	; 0x21
 8015f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2210      	movs	r2, #16
 8015f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2200      	movs	r2, #0
 8015f66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	893a      	ldrh	r2, [r7, #8]
 8015f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2200      	movs	r2, #0
 8015f78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	2bff      	cmp	r3, #255	; 0xff
 8015f82:	d90e      	bls.n	8015fa2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	22ff      	movs	r2, #255	; 0xff
 8015f88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f8e:	b2da      	uxtb	r2, r3
 8015f90:	8979      	ldrh	r1, [r7, #10]
 8015f92:	4b51      	ldr	r3, [pc, #324]	; (80160d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015f9a:	68f8      	ldr	r0, [r7, #12]
 8015f9c:	f000 fbf6 	bl	801678c <I2C_TransferConfig>
 8015fa0:	e06c      	b.n	801607c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015fa6:	b29a      	uxth	r2, r3
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fb0:	b2da      	uxtb	r2, r3
 8015fb2:	8979      	ldrh	r1, [r7, #10]
 8015fb4:	4b48      	ldr	r3, [pc, #288]	; (80160d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8015fb6:	9300      	str	r3, [sp, #0]
 8015fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f000 fbe5 	bl	801678c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015fc2:	e05b      	b.n	801607c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015fc4:	697a      	ldr	r2, [r7, #20]
 8015fc6:	6a39      	ldr	r1, [r7, #32]
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f000 f9fd 	bl	80163c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d001      	beq.n	8015fd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	e07b      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fdc:	781a      	ldrb	r2, [r3, #0]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe8:	1c5a      	adds	r2, r3, #1
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	b29a      	uxth	r2, r3
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016000:	3b01      	subs	r3, #1
 8016002:	b29a      	uxth	r2, r3
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801600c:	b29b      	uxth	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	d034      	beq.n	801607c <HAL_I2C_Master_Transmit+0x184>
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016016:	2b00      	cmp	r3, #0
 8016018:	d130      	bne.n	801607c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	9300      	str	r3, [sp, #0]
 801601e:	6a3b      	ldr	r3, [r7, #32]
 8016020:	2200      	movs	r2, #0
 8016022:	2180      	movs	r1, #128	; 0x80
 8016024:	68f8      	ldr	r0, [r7, #12]
 8016026:	f000 f98f 	bl	8016348 <I2C_WaitOnFlagUntilTimeout>
 801602a:	4603      	mov	r3, r0
 801602c:	2b00      	cmp	r3, #0
 801602e:	d001      	beq.n	8016034 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016030:	2301      	movs	r3, #1
 8016032:	e04d      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016038:	b29b      	uxth	r3, r3
 801603a:	2bff      	cmp	r3, #255	; 0xff
 801603c:	d90e      	bls.n	801605c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	22ff      	movs	r2, #255	; 0xff
 8016042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016048:	b2da      	uxtb	r2, r3
 801604a:	8979      	ldrh	r1, [r7, #10]
 801604c:	2300      	movs	r3, #0
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f000 fb99 	bl	801678c <I2C_TransferConfig>
 801605a:	e00f      	b.n	801607c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016060:	b29a      	uxth	r2, r3
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801606a:	b2da      	uxtb	r2, r3
 801606c:	8979      	ldrh	r1, [r7, #10]
 801606e:	2300      	movs	r3, #0
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f000 fb88 	bl	801678c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016080:	b29b      	uxth	r3, r3
 8016082:	2b00      	cmp	r3, #0
 8016084:	d19e      	bne.n	8015fc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016086:	697a      	ldr	r2, [r7, #20]
 8016088:	6a39      	ldr	r1, [r7, #32]
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f000 f9dc 	bl	8016448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d001      	beq.n	801609a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8016096:	2301      	movs	r3, #1
 8016098:	e01a      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	2220      	movs	r2, #32
 80160a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	6859      	ldr	r1, [r3, #4]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681a      	ldr	r2, [r3, #0]
 80160ac:	4b0b      	ldr	r3, [pc, #44]	; (80160dc <HAL_I2C_Master_Transmit+0x1e4>)
 80160ae:	400b      	ands	r3, r1
 80160b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2220      	movs	r2, #32
 80160b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2200      	movs	r2, #0
 80160be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2200      	movs	r2, #0
 80160c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80160ca:	2300      	movs	r3, #0
 80160cc:	e000      	b.n	80160d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80160ce:	2302      	movs	r3, #2
  }
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3718      	adds	r7, #24
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}
 80160d8:	80002000 	.word	0x80002000
 80160dc:	fe00e800 	.word	0xfe00e800

080160e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b088      	sub	sp, #32
 80160e4:	af02      	add	r7, sp, #8
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	607a      	str	r2, [r7, #4]
 80160ea:	461a      	mov	r2, r3
 80160ec:	460b      	mov	r3, r1
 80160ee:	817b      	strh	r3, [r7, #10]
 80160f0:	4613      	mov	r3, r2
 80160f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80160fa:	b2db      	uxtb	r3, r3
 80160fc:	2b20      	cmp	r3, #32
 80160fe:	f040 80db 	bne.w	80162b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016108:	2b01      	cmp	r3, #1
 801610a:	d101      	bne.n	8016110 <HAL_I2C_Master_Receive+0x30>
 801610c:	2302      	movs	r3, #2
 801610e:	e0d4      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2201      	movs	r2, #1
 8016114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016118:	f7ff fa82 	bl	8015620 <HAL_GetTick>
 801611c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	2319      	movs	r3, #25
 8016124:	2201      	movs	r2, #1
 8016126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801612a:	68f8      	ldr	r0, [r7, #12]
 801612c:	f000 f90c 	bl	8016348 <I2C_WaitOnFlagUntilTimeout>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d001      	beq.n	801613a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8016136:	2301      	movs	r3, #1
 8016138:	e0bf      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2222      	movs	r2, #34	; 0x22
 801613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	2210      	movs	r2, #16
 8016146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2200      	movs	r2, #0
 801614e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	893a      	ldrh	r2, [r7, #8]
 801615a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	2200      	movs	r2, #0
 8016160:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016166:	b29b      	uxth	r3, r3
 8016168:	2bff      	cmp	r3, #255	; 0xff
 801616a:	d90e      	bls.n	801618a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	22ff      	movs	r2, #255	; 0xff
 8016170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016176:	b2da      	uxtb	r2, r3
 8016178:	8979      	ldrh	r1, [r7, #10]
 801617a:	4b52      	ldr	r3, [pc, #328]	; (80162c4 <HAL_I2C_Master_Receive+0x1e4>)
 801617c:	9300      	str	r3, [sp, #0]
 801617e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016182:	68f8      	ldr	r0, [r7, #12]
 8016184:	f000 fb02 	bl	801678c <I2C_TransferConfig>
 8016188:	e06d      	b.n	8016266 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801618e:	b29a      	uxth	r2, r3
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016198:	b2da      	uxtb	r2, r3
 801619a:	8979      	ldrh	r1, [r7, #10]
 801619c:	4b49      	ldr	r3, [pc, #292]	; (80162c4 <HAL_I2C_Master_Receive+0x1e4>)
 801619e:	9300      	str	r3, [sp, #0]
 80161a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80161a4:	68f8      	ldr	r0, [r7, #12]
 80161a6:	f000 faf1 	bl	801678c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80161aa:	e05c      	b.n	8016266 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80161ac:	697a      	ldr	r2, [r7, #20]
 80161ae:	6a39      	ldr	r1, [r7, #32]
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f000 f985 	bl	80164c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80161b6:	4603      	mov	r3, r0
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d001      	beq.n	80161c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80161bc:	2301      	movs	r3, #1
 80161be:	e07c      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ca:	b2d2      	uxtb	r2, r2
 80161cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d2:	1c5a      	adds	r2, r3, #1
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161dc:	3b01      	subs	r3, #1
 80161de:	b29a      	uxth	r2, r3
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	3b01      	subs	r3, #1
 80161ec:	b29a      	uxth	r2, r3
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d034      	beq.n	8016266 <HAL_I2C_Master_Receive+0x186>
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016200:	2b00      	cmp	r3, #0
 8016202:	d130      	bne.n	8016266 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	9300      	str	r3, [sp, #0]
 8016208:	6a3b      	ldr	r3, [r7, #32]
 801620a:	2200      	movs	r2, #0
 801620c:	2180      	movs	r1, #128	; 0x80
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f000 f89a 	bl	8016348 <I2C_WaitOnFlagUntilTimeout>
 8016214:	4603      	mov	r3, r0
 8016216:	2b00      	cmp	r3, #0
 8016218:	d001      	beq.n	801621e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801621a:	2301      	movs	r3, #1
 801621c:	e04d      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016222:	b29b      	uxth	r3, r3
 8016224:	2bff      	cmp	r3, #255	; 0xff
 8016226:	d90e      	bls.n	8016246 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	22ff      	movs	r2, #255	; 0xff
 801622c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016232:	b2da      	uxtb	r2, r3
 8016234:	8979      	ldrh	r1, [r7, #10]
 8016236:	2300      	movs	r3, #0
 8016238:	9300      	str	r3, [sp, #0]
 801623a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801623e:	68f8      	ldr	r0, [r7, #12]
 8016240:	f000 faa4 	bl	801678c <I2C_TransferConfig>
 8016244:	e00f      	b.n	8016266 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801624a:	b29a      	uxth	r2, r3
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016254:	b2da      	uxtb	r2, r3
 8016256:	8979      	ldrh	r1, [r7, #10]
 8016258:	2300      	movs	r3, #0
 801625a:	9300      	str	r3, [sp, #0]
 801625c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016260:	68f8      	ldr	r0, [r7, #12]
 8016262:	f000 fa93 	bl	801678c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801626a:	b29b      	uxth	r3, r3
 801626c:	2b00      	cmp	r3, #0
 801626e:	d19d      	bne.n	80161ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016270:	697a      	ldr	r2, [r7, #20]
 8016272:	6a39      	ldr	r1, [r7, #32]
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f000 f8e7 	bl	8016448 <I2C_WaitOnSTOPFlagUntilTimeout>
 801627a:	4603      	mov	r3, r0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016280:	2301      	movs	r3, #1
 8016282:	e01a      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2220      	movs	r2, #32
 801628a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	6859      	ldr	r1, [r3, #4]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	4b0c      	ldr	r3, [pc, #48]	; (80162c8 <HAL_I2C_Master_Receive+0x1e8>)
 8016298:	400b      	ands	r3, r1
 801629a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2220      	movs	r2, #32
 80162a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2200      	movs	r2, #0
 80162a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2200      	movs	r2, #0
 80162b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80162b4:	2300      	movs	r3, #0
 80162b6:	e000      	b.n	80162ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80162b8:	2302      	movs	r3, #2
  }
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3718      	adds	r7, #24
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	80002400 	.word	0x80002400
 80162c8:	fe00e800 	.word	0xfe00e800

080162cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b083      	sub	sp, #12
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80162da:	b2db      	uxtb	r3, r3
}
 80162dc:	4618      	mov	r0, r3
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b083      	sub	sp, #12
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	370c      	adds	r7, #12
 80162f8:	46bd      	mov	sp, r7
 80162fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162fe:	4770      	bx	lr

08016300 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016300:	b480      	push	{r7}
 8016302:	b083      	sub	sp, #12
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	699b      	ldr	r3, [r3, #24]
 801630e:	f003 0302 	and.w	r3, r3, #2
 8016312:	2b02      	cmp	r3, #2
 8016314:	d103      	bne.n	801631e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2200      	movs	r2, #0
 801631c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	699b      	ldr	r3, [r3, #24]
 8016324:	f003 0301 	and.w	r3, r3, #1
 8016328:	2b01      	cmp	r3, #1
 801632a:	d007      	beq.n	801633c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	699a      	ldr	r2, [r3, #24]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	f042 0201 	orr.w	r2, r2, #1
 801633a:	619a      	str	r2, [r3, #24]
  }
}
 801633c:	bf00      	nop
 801633e:	370c      	adds	r7, #12
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr

08016348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	603b      	str	r3, [r7, #0]
 8016354:	4613      	mov	r3, r2
 8016356:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016358:	e022      	b.n	80163a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016360:	d01e      	beq.n	80163a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016362:	f7ff f95d 	bl	8015620 <HAL_GetTick>
 8016366:	4602      	mov	r2, r0
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	1ad3      	subs	r3, r2, r3
 801636c:	683a      	ldr	r2, [r7, #0]
 801636e:	429a      	cmp	r2, r3
 8016370:	d302      	bcc.n	8016378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d113      	bne.n	80163a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801637c:	f043 0220 	orr.w	r2, r3, #32
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2220      	movs	r2, #32
 8016388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2200      	movs	r2, #0
 8016390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	2200      	movs	r2, #0
 8016398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801639c:	2301      	movs	r3, #1
 801639e:	e00f      	b.n	80163c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	699a      	ldr	r2, [r3, #24]
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	4013      	ands	r3, r2
 80163aa:	68ba      	ldr	r2, [r7, #8]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	bf0c      	ite	eq
 80163b0:	2301      	moveq	r3, #1
 80163b2:	2300      	movne	r3, #0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	461a      	mov	r2, r3
 80163b8:	79fb      	ldrb	r3, [r7, #7]
 80163ba:	429a      	cmp	r2, r3
 80163bc:	d0cd      	beq.n	801635a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80163be:	2300      	movs	r3, #0
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3710      	adds	r7, #16
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80163d4:	e02c      	b.n	8016430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	68b9      	ldr	r1, [r7, #8]
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	f000 f8ea 	bl	80165b4 <I2C_IsErrorOccurred>
 80163e0:	4603      	mov	r3, r0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d001      	beq.n	80163ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80163e6:	2301      	movs	r3, #1
 80163e8:	e02a      	b.n	8016440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f0:	d01e      	beq.n	8016430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163f2:	f7ff f915 	bl	8015620 <HAL_GetTick>
 80163f6:	4602      	mov	r2, r0
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	1ad3      	subs	r3, r2, r3
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	429a      	cmp	r2, r3
 8016400:	d302      	bcc.n	8016408 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d113      	bne.n	8016430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801640c:	f043 0220 	orr.w	r2, r3, #32
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2220      	movs	r2, #32
 8016418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2200      	movs	r2, #0
 8016420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2200      	movs	r2, #0
 8016428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801642c:	2301      	movs	r3, #1
 801642e:	e007      	b.n	8016440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	699b      	ldr	r3, [r3, #24]
 8016436:	f003 0302 	and.w	r3, r3, #2
 801643a:	2b02      	cmp	r3, #2
 801643c:	d1cb      	bne.n	80163d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801643e:	2300      	movs	r3, #0
}
 8016440:	4618      	mov	r0, r3
 8016442:	3710      	adds	r7, #16
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	60b9      	str	r1, [r7, #8]
 8016452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016454:	e028      	b.n	80164a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016456:	687a      	ldr	r2, [r7, #4]
 8016458:	68b9      	ldr	r1, [r7, #8]
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f000 f8aa 	bl	80165b4 <I2C_IsErrorOccurred>
 8016460:	4603      	mov	r3, r0
 8016462:	2b00      	cmp	r3, #0
 8016464:	d001      	beq.n	801646a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016466:	2301      	movs	r3, #1
 8016468:	e026      	b.n	80164b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801646a:	f7ff f8d9 	bl	8015620 <HAL_GetTick>
 801646e:	4602      	mov	r2, r0
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	1ad3      	subs	r3, r2, r3
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	429a      	cmp	r2, r3
 8016478:	d302      	bcc.n	8016480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d113      	bne.n	80164a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016484:	f043 0220 	orr.w	r2, r3, #32
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2220      	movs	r2, #32
 8016490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2200      	movs	r2, #0
 8016498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2200      	movs	r2, #0
 80164a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80164a4:	2301      	movs	r3, #1
 80164a6:	e007      	b.n	80164b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	699b      	ldr	r3, [r3, #24]
 80164ae:	f003 0320 	and.w	r3, r3, #32
 80164b2:	2b20      	cmp	r3, #32
 80164b4:	d1cf      	bne.n	8016456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3710      	adds	r7, #16
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}

080164c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b084      	sub	sp, #16
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80164cc:	e064      	b.n	8016598 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	68b9      	ldr	r1, [r7, #8]
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f000 f86e 	bl	80165b4 <I2C_IsErrorOccurred>
 80164d8:	4603      	mov	r3, r0
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d001      	beq.n	80164e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80164de:	2301      	movs	r3, #1
 80164e0:	e062      	b.n	80165a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	699b      	ldr	r3, [r3, #24]
 80164e8:	f003 0320 	and.w	r3, r3, #32
 80164ec:	2b20      	cmp	r3, #32
 80164ee:	d138      	bne.n	8016562 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	699b      	ldr	r3, [r3, #24]
 80164f6:	f003 0304 	and.w	r3, r3, #4
 80164fa:	2b04      	cmp	r3, #4
 80164fc:	d105      	bne.n	801650a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016506:	2300      	movs	r3, #0
 8016508:	e04e      	b.n	80165a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	699b      	ldr	r3, [r3, #24]
 8016510:	f003 0310 	and.w	r3, r3, #16
 8016514:	2b10      	cmp	r3, #16
 8016516:	d107      	bne.n	8016528 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	2210      	movs	r2, #16
 801651e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	2204      	movs	r2, #4
 8016524:	645a      	str	r2, [r3, #68]	; 0x44
 8016526:	e002      	b.n	801652e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2200      	movs	r2, #0
 801652c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2220      	movs	r2, #32
 8016534:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	6859      	ldr	r1, [r3, #4]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681a      	ldr	r2, [r3, #0]
 8016540:	4b1b      	ldr	r3, [pc, #108]	; (80165b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8016542:	400b      	ands	r3, r1
 8016544:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	2220      	movs	r2, #32
 801654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	2200      	movs	r2, #0
 8016552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	2200      	movs	r2, #0
 801655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801655e:	2301      	movs	r3, #1
 8016560:	e022      	b.n	80165a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016562:	f7ff f85d 	bl	8015620 <HAL_GetTick>
 8016566:	4602      	mov	r2, r0
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	68ba      	ldr	r2, [r7, #8]
 801656e:	429a      	cmp	r2, r3
 8016570:	d302      	bcc.n	8016578 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d10f      	bne.n	8016598 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657c:	f043 0220 	orr.w	r2, r3, #32
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2220      	movs	r2, #32
 8016588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2200      	movs	r2, #0
 8016590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8016594:	2301      	movs	r3, #1
 8016596:	e007      	b.n	80165a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	699b      	ldr	r3, [r3, #24]
 801659e:	f003 0304 	and.w	r3, r3, #4
 80165a2:	2b04      	cmp	r3, #4
 80165a4:	d193      	bne.n	80164ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80165a6:	2300      	movs	r3, #0
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	fe00e800 	.word	0xfe00e800

080165b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b08a      	sub	sp, #40	; 0x28
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	60b9      	str	r1, [r7, #8]
 80165be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80165c0:	2300      	movs	r3, #0
 80165c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	699b      	ldr	r3, [r3, #24]
 80165cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80165ce:	2300      	movs	r3, #0
 80165d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80165d6:	69bb      	ldr	r3, [r7, #24]
 80165d8:	f003 0310 	and.w	r3, r3, #16
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d075      	beq.n	80166cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2210      	movs	r2, #16
 80165e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80165e8:	e056      	b.n	8016698 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165f0:	d052      	beq.n	8016698 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80165f2:	f7ff f815 	bl	8015620 <HAL_GetTick>
 80165f6:	4602      	mov	r2, r0
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	1ad3      	subs	r3, r2, r3
 80165fc:	68ba      	ldr	r2, [r7, #8]
 80165fe:	429a      	cmp	r2, r3
 8016600:	d302      	bcc.n	8016608 <I2C_IsErrorOccurred+0x54>
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d147      	bne.n	8016698 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	685b      	ldr	r3, [r3, #4]
 801660e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016612:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801661a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	699b      	ldr	r3, [r3, #24]
 8016622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801662a:	d12e      	bne.n	801668a <I2C_IsErrorOccurred+0xd6>
 801662c:	697b      	ldr	r3, [r7, #20]
 801662e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016632:	d02a      	beq.n	801668a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8016634:	7cfb      	ldrb	r3, [r7, #19]
 8016636:	2b20      	cmp	r3, #32
 8016638:	d027      	beq.n	801668a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	685a      	ldr	r2, [r3, #4]
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016648:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801664a:	f7fe ffe9 	bl	8015620 <HAL_GetTick>
 801664e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016650:	e01b      	b.n	801668a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016652:	f7fe ffe5 	bl	8015620 <HAL_GetTick>
 8016656:	4602      	mov	r2, r0
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	2b19      	cmp	r3, #25
 801665e:	d914      	bls.n	801668a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016664:	f043 0220 	orr.w	r2, r3, #32
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	2220      	movs	r2, #32
 8016670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	2200      	movs	r2, #0
 8016678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	2200      	movs	r2, #0
 8016680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8016684:	2301      	movs	r3, #1
 8016686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	699b      	ldr	r3, [r3, #24]
 8016690:	f003 0320 	and.w	r3, r3, #32
 8016694:	2b20      	cmp	r3, #32
 8016696:	d1dc      	bne.n	8016652 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	699b      	ldr	r3, [r3, #24]
 801669e:	f003 0320 	and.w	r3, r3, #32
 80166a2:	2b20      	cmp	r3, #32
 80166a4:	d003      	beq.n	80166ae <I2C_IsErrorOccurred+0xfa>
 80166a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d09d      	beq.n	80165ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80166ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d103      	bne.n	80166be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2220      	movs	r2, #32
 80166bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80166be:	6a3b      	ldr	r3, [r7, #32]
 80166c0:	f043 0304 	orr.w	r3, r3, #4
 80166c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80166c6:	2301      	movs	r3, #1
 80166c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	699b      	ldr	r3, [r3, #24]
 80166d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d00b      	beq.n	80166f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80166de:	6a3b      	ldr	r3, [r7, #32]
 80166e0:	f043 0301 	orr.w	r3, r3, #1
 80166e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80166ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80166f0:	2301      	movs	r3, #1
 80166f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80166f6:	69bb      	ldr	r3, [r7, #24]
 80166f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00b      	beq.n	8016718 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016700:	6a3b      	ldr	r3, [r7, #32]
 8016702:	f043 0308 	orr.w	r3, r3, #8
 8016706:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016712:	2301      	movs	r3, #1
 8016714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801671e:	2b00      	cmp	r3, #0
 8016720:	d00b      	beq.n	801673a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	f043 0302 	orr.w	r3, r3, #2
 8016728:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016734:	2301      	movs	r3, #1
 8016736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801673a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801673e:	2b00      	cmp	r3, #0
 8016740:	d01c      	beq.n	801677c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	f7ff fddc 	bl	8016300 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	6859      	ldr	r1, [r3, #4]
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	4b0d      	ldr	r3, [pc, #52]	; (8016788 <I2C_IsErrorOccurred+0x1d4>)
 8016754:	400b      	ands	r3, r1
 8016756:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801675c:	6a3b      	ldr	r3, [r7, #32]
 801675e:	431a      	orrs	r2, r3
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2220      	movs	r2, #32
 8016768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2200      	movs	r2, #0
 8016770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2200      	movs	r2, #0
 8016778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801677c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016780:	4618      	mov	r0, r3
 8016782:	3728      	adds	r7, #40	; 0x28
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	fe00e800 	.word	0xfe00e800

0801678c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801678c:	b480      	push	{r7}
 801678e:	b087      	sub	sp, #28
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	607b      	str	r3, [r7, #4]
 8016796:	460b      	mov	r3, r1
 8016798:	817b      	strh	r3, [r7, #10]
 801679a:	4613      	mov	r3, r2
 801679c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801679e:	897b      	ldrh	r3, [r7, #10]
 80167a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80167a4:	7a7b      	ldrb	r3, [r7, #9]
 80167a6:	041b      	lsls	r3, r3, #16
 80167a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80167ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80167b2:	6a3b      	ldr	r3, [r7, #32]
 80167b4:	4313      	orrs	r3, r2
 80167b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	685a      	ldr	r2, [r3, #4]
 80167c2:	6a3b      	ldr	r3, [r7, #32]
 80167c4:	0d5b      	lsrs	r3, r3, #21
 80167c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80167ca:	4b08      	ldr	r3, [pc, #32]	; (80167ec <I2C_TransferConfig+0x60>)
 80167cc:	430b      	orrs	r3, r1
 80167ce:	43db      	mvns	r3, r3
 80167d0:	ea02 0103 	and.w	r1, r2, r3
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	697a      	ldr	r2, [r7, #20]
 80167da:	430a      	orrs	r2, r1
 80167dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80167de:	bf00      	nop
 80167e0:	371c      	adds	r7, #28
 80167e2:	46bd      	mov	sp, r7
 80167e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e8:	4770      	bx	lr
 80167ea:	bf00      	nop
 80167ec:	03ff63ff 	.word	0x03ff63ff

080167f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80167f0:	b480      	push	{r7}
 80167f2:	b083      	sub	sp, #12
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
 80167f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016800:	b2db      	uxtb	r3, r3
 8016802:	2b20      	cmp	r3, #32
 8016804:	d138      	bne.n	8016878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801680c:	2b01      	cmp	r3, #1
 801680e:	d101      	bne.n	8016814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016810:	2302      	movs	r3, #2
 8016812:	e032      	b.n	801687a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2201      	movs	r2, #1
 8016818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2224      	movs	r2, #36	; 0x24
 8016820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	f022 0201 	bic.w	r2, r2, #1
 8016832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	6819      	ldr	r1, [r3, #0]
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	683a      	ldr	r2, [r7, #0]
 8016850:	430a      	orrs	r2, r1
 8016852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	f042 0201 	orr.w	r2, r2, #1
 8016862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	2220      	movs	r2, #32
 8016868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2200      	movs	r2, #0
 8016870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016874:	2300      	movs	r3, #0
 8016876:	e000      	b.n	801687a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016878:	2302      	movs	r3, #2
  }
}
 801687a:	4618      	mov	r0, r3
 801687c:	370c      	adds	r7, #12
 801687e:	46bd      	mov	sp, r7
 8016880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016884:	4770      	bx	lr

08016886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016886:	b480      	push	{r7}
 8016888:	b085      	sub	sp, #20
 801688a:	af00      	add	r7, sp, #0
 801688c:	6078      	str	r0, [r7, #4]
 801688e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016896:	b2db      	uxtb	r3, r3
 8016898:	2b20      	cmp	r3, #32
 801689a:	d139      	bne.n	8016910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80168a2:	2b01      	cmp	r3, #1
 80168a4:	d101      	bne.n	80168aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80168a6:	2302      	movs	r3, #2
 80168a8:	e033      	b.n	8016912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2201      	movs	r2, #1
 80168ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2224      	movs	r2, #36	; 0x24
 80168b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	f022 0201 	bic.w	r2, r2, #1
 80168c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80168d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	021b      	lsls	r3, r3, #8
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	4313      	orrs	r3, r2
 80168e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	68fa      	ldr	r2, [r7, #12]
 80168ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	681a      	ldr	r2, [r3, #0]
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f042 0201 	orr.w	r2, r2, #1
 80168fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2220      	movs	r2, #32
 8016900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2200      	movs	r2, #0
 8016908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801690c:	2300      	movs	r3, #0
 801690e:	e000      	b.n	8016912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016910:	2302      	movs	r3, #2
  }
}
 8016912:	4618      	mov	r0, r3
 8016914:	3714      	adds	r7, #20
 8016916:	46bd      	mov	sp, r7
 8016918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691c:	4770      	bx	lr

0801691e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801691e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016920:	b08b      	sub	sp, #44	; 0x2c
 8016922:	af06      	add	r7, sp, #24
 8016924:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d101      	bne.n	8016930 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801692c:	2301      	movs	r3, #1
 801692e:	e0cb      	b.n	8016ac8 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8016936:	b2db      	uxtb	r3, r3
 8016938:	2b00      	cmp	r3, #0
 801693a:	d106      	bne.n	801694a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f7ea fdff 	bl	8001548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2203      	movs	r2, #3
 801694e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	4618      	mov	r0, r3
 8016958:	f002 fed0 	bl	80196fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801695c:	2300      	movs	r3, #0
 801695e:	73fb      	strb	r3, [r7, #15]
 8016960:	e040      	b.n	80169e4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016962:	7bfb      	ldrb	r3, [r7, #15]
 8016964:	6879      	ldr	r1, [r7, #4]
 8016966:	1c5a      	adds	r2, r3, #1
 8016968:	4613      	mov	r3, r2
 801696a:	009b      	lsls	r3, r3, #2
 801696c:	4413      	add	r3, r2
 801696e:	00db      	lsls	r3, r3, #3
 8016970:	440b      	add	r3, r1
 8016972:	3301      	adds	r3, #1
 8016974:	2201      	movs	r2, #1
 8016976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016978:	7bfb      	ldrb	r3, [r7, #15]
 801697a:	6879      	ldr	r1, [r7, #4]
 801697c:	1c5a      	adds	r2, r3, #1
 801697e:	4613      	mov	r3, r2
 8016980:	009b      	lsls	r3, r3, #2
 8016982:	4413      	add	r3, r2
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	440b      	add	r3, r1
 8016988:	7bfa      	ldrb	r2, [r7, #15]
 801698a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801698c:	7bfb      	ldrb	r3, [r7, #15]
 801698e:	6879      	ldr	r1, [r7, #4]
 8016990:	1c5a      	adds	r2, r3, #1
 8016992:	4613      	mov	r3, r2
 8016994:	009b      	lsls	r3, r3, #2
 8016996:	4413      	add	r3, r2
 8016998:	00db      	lsls	r3, r3, #3
 801699a:	440b      	add	r3, r1
 801699c:	3303      	adds	r3, #3
 801699e:	2200      	movs	r2, #0
 80169a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80169a2:	7bfa      	ldrb	r2, [r7, #15]
 80169a4:	6879      	ldr	r1, [r7, #4]
 80169a6:	4613      	mov	r3, r2
 80169a8:	009b      	lsls	r3, r3, #2
 80169aa:	4413      	add	r3, r2
 80169ac:	00db      	lsls	r3, r3, #3
 80169ae:	440b      	add	r3, r1
 80169b0:	3338      	adds	r3, #56	; 0x38
 80169b2:	2200      	movs	r2, #0
 80169b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80169b6:	7bfa      	ldrb	r2, [r7, #15]
 80169b8:	6879      	ldr	r1, [r7, #4]
 80169ba:	4613      	mov	r3, r2
 80169bc:	009b      	lsls	r3, r3, #2
 80169be:	4413      	add	r3, r2
 80169c0:	00db      	lsls	r3, r3, #3
 80169c2:	440b      	add	r3, r1
 80169c4:	333c      	adds	r3, #60	; 0x3c
 80169c6:	2200      	movs	r2, #0
 80169c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80169ca:	7bfa      	ldrb	r2, [r7, #15]
 80169cc:	6879      	ldr	r1, [r7, #4]
 80169ce:	4613      	mov	r3, r2
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	4413      	add	r3, r2
 80169d4:	00db      	lsls	r3, r3, #3
 80169d6:	440b      	add	r3, r1
 80169d8:	3340      	adds	r3, #64	; 0x40
 80169da:	2200      	movs	r2, #0
 80169dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80169de:	7bfb      	ldrb	r3, [r7, #15]
 80169e0:	3301      	adds	r3, #1
 80169e2:	73fb      	strb	r3, [r7, #15]
 80169e4:	7bfa      	ldrb	r2, [r7, #15]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	685b      	ldr	r3, [r3, #4]
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d3b9      	bcc.n	8016962 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80169ee:	2300      	movs	r3, #0
 80169f0:	73fb      	strb	r3, [r7, #15]
 80169f2:	e044      	b.n	8016a7e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80169f4:	7bfa      	ldrb	r2, [r7, #15]
 80169f6:	6879      	ldr	r1, [r7, #4]
 80169f8:	4613      	mov	r3, r2
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	4413      	add	r3, r2
 80169fe:	00db      	lsls	r3, r3, #3
 8016a00:	440b      	add	r3, r1
 8016a02:	f203 1369 	addw	r3, r3, #361	; 0x169
 8016a06:	2200      	movs	r2, #0
 8016a08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016a0a:	7bfa      	ldrb	r2, [r7, #15]
 8016a0c:	6879      	ldr	r1, [r7, #4]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	009b      	lsls	r3, r3, #2
 8016a12:	4413      	add	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	440b      	add	r3, r1
 8016a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016a1c:	7bfa      	ldrb	r2, [r7, #15]
 8016a1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016a20:	7bfa      	ldrb	r2, [r7, #15]
 8016a22:	6879      	ldr	r1, [r7, #4]
 8016a24:	4613      	mov	r3, r2
 8016a26:	009b      	lsls	r3, r3, #2
 8016a28:	4413      	add	r3, r2
 8016a2a:	00db      	lsls	r3, r3, #3
 8016a2c:	440b      	add	r3, r1
 8016a2e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8016a32:	2200      	movs	r2, #0
 8016a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016a36:	7bfa      	ldrb	r2, [r7, #15]
 8016a38:	6879      	ldr	r1, [r7, #4]
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	4413      	add	r3, r2
 8016a40:	00db      	lsls	r3, r3, #3
 8016a42:	440b      	add	r3, r1
 8016a44:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016a48:	2200      	movs	r2, #0
 8016a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016a4c:	7bfa      	ldrb	r2, [r7, #15]
 8016a4e:	6879      	ldr	r1, [r7, #4]
 8016a50:	4613      	mov	r3, r2
 8016a52:	009b      	lsls	r3, r3, #2
 8016a54:	4413      	add	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	440b      	add	r3, r1
 8016a5a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016a5e:	2200      	movs	r2, #0
 8016a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016a62:	7bfa      	ldrb	r2, [r7, #15]
 8016a64:	6879      	ldr	r1, [r7, #4]
 8016a66:	4613      	mov	r3, r2
 8016a68:	009b      	lsls	r3, r3, #2
 8016a6a:	4413      	add	r3, r2
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	440b      	add	r3, r1
 8016a70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016a74:	2200      	movs	r2, #0
 8016a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016a78:	7bfb      	ldrb	r3, [r7, #15]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	73fb      	strb	r3, [r7, #15]
 8016a7e:	7bfa      	ldrb	r2, [r7, #15]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d3b5      	bcc.n	80169f4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	603b      	str	r3, [r7, #0]
 8016a8e:	687e      	ldr	r6, [r7, #4]
 8016a90:	466d      	mov	r5, sp
 8016a92:	f106 0410 	add.w	r4, r6, #16
 8016a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a9a:	6823      	ldr	r3, [r4, #0]
 8016a9c:	602b      	str	r3, [r5, #0]
 8016a9e:	1d33      	adds	r3, r6, #4
 8016aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016aa2:	6838      	ldr	r0, [r7, #0]
 8016aa4:	f002 fe45 	bl	8019732 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2200      	movs	r2, #0
 8016aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2201      	movs	r2, #1
 8016ab4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	69db      	ldr	r3, [r3, #28]
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d102      	bne.n	8016ac6 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 f805 	bl	8016ad0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016ac6:	2300      	movs	r3, #0
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3714      	adds	r7, #20
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ad0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b085      	sub	sp, #20
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2201      	movs	r2, #1
 8016ae2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	2200      	movs	r2, #0
 8016aea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	f043 0301 	orr.w	r3, r3, #1
 8016afa:	b29a      	uxth	r2, r3
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	f043 0302 	orr.w	r3, r3, #2
 8016b0e:	b29a      	uxth	r2, r3
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8016b16:	2300      	movs	r3, #0
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3714      	adds	r7, #20
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b22:	4770      	bx	lr

08016b24 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016b24:	b480      	push	{r7}
 8016b26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016b28:	4b05      	ldr	r3, [pc, #20]	; (8016b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	4a04      	ldr	r2, [pc, #16]	; (8016b40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016b32:	6013      	str	r3, [r2, #0]
}
 8016b34:	bf00      	nop
 8016b36:	46bd      	mov	sp, r7
 8016b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	58000400 	.word	0x58000400

08016b44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016b44:	b480      	push	{r7}
 8016b46:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8016b48:	4b04      	ldr	r3, [pc, #16]	; (8016b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	58000400 	.word	0x58000400

08016b60 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016b60:	b480      	push	{r7}
 8016b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016b72:	d101      	bne.n	8016b78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016b74:	2301      	movs	r3, #1
 8016b76:	e000      	b.n	8016b7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8016b78:	2300      	movs	r3, #0
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b82:	4770      	bx	lr

08016b84 <LL_RCC_HSE_Enable>:
{
 8016b84:	b480      	push	{r7}
 8016b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016b96:	6013      	str	r3, [r2, #0]
}
 8016b98:	bf00      	nop
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <LL_RCC_HSE_Disable>:
{
 8016ba2:	b480      	push	{r7}
 8016ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8016ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016bb4:	6013      	str	r3, [r2, #0]
}
 8016bb6:	bf00      	nop
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr

08016bc0 <LL_RCC_HSE_IsReady>:
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016bd2:	d101      	bne.n	8016bd8 <LL_RCC_HSE_IsReady+0x18>
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	e000      	b.n	8016bda <LL_RCC_HSE_IsReady+0x1a>
 8016bd8:	2300      	movs	r3, #0
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr

08016be4 <LL_RCC_HSI_Enable>:
{
 8016be4:	b480      	push	{r7}
 8016be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016bf6:	6013      	str	r3, [r2, #0]
}
 8016bf8:	bf00      	nop
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr

08016c02 <LL_RCC_HSI_Disable>:
{
 8016c02:	b480      	push	{r7}
 8016c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8016c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016c14:	6013      	str	r3, [r2, #0]
}
 8016c16:	bf00      	nop
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1e:	4770      	bx	lr

08016c20 <LL_RCC_HSI_IsReady>:
{
 8016c20:	b480      	push	{r7}
 8016c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016c32:	d101      	bne.n	8016c38 <LL_RCC_HSI_IsReady+0x18>
 8016c34:	2301      	movs	r3, #1
 8016c36:	e000      	b.n	8016c3a <LL_RCC_HSI_IsReady+0x1a>
 8016c38:	2300      	movs	r3, #0
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr

08016c44 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016c44:	b480      	push	{r7}
 8016c46:	b083      	sub	sp, #12
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	061b      	lsls	r3, r3, #24
 8016c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c5e:	4313      	orrs	r3, r2
 8016c60:	604b      	str	r3, [r1, #4]
}
 8016c62:	bf00      	nop
 8016c64:	370c      	adds	r7, #12
 8016c66:	46bd      	mov	sp, r7
 8016c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6c:	4770      	bx	lr

08016c6e <LL_RCC_HSI48_Enable>:
{
 8016c6e:	b480      	push	{r7}
 8016c70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c7e:	f043 0301 	orr.w	r3, r3, #1
 8016c82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016c86:	bf00      	nop
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr

08016c90 <LL_RCC_HSI48_Disable>:
{
 8016c90:	b480      	push	{r7}
 8016c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ca0:	f023 0301 	bic.w	r3, r3, #1
 8016ca4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016ca8:	bf00      	nop
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr

08016cb2 <LL_RCC_HSI48_IsReady>:
{
 8016cb2:	b480      	push	{r7}
 8016cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016cbe:	f003 0302 	and.w	r3, r3, #2
 8016cc2:	2b02      	cmp	r3, #2
 8016cc4:	d101      	bne.n	8016cca <LL_RCC_HSI48_IsReady+0x18>
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	e000      	b.n	8016ccc <LL_RCC_HSI48_IsReady+0x1a>
 8016cca:	2300      	movs	r3, #0
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd4:	4770      	bx	lr

08016cd6 <LL_RCC_LSE_Enable>:
{
 8016cd6:	b480      	push	{r7}
 8016cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ce6:	f043 0301 	orr.w	r3, r3, #1
 8016cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016cee:	bf00      	nop
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <LL_RCC_LSE_Disable>:
{
 8016cf8:	b480      	push	{r7}
 8016cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d08:	f023 0301 	bic.w	r3, r3, #1
 8016d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016d10:	bf00      	nop
 8016d12:	46bd      	mov	sp, r7
 8016d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d18:	4770      	bx	lr

08016d1a <LL_RCC_LSE_EnableBypass>:
{
 8016d1a:	b480      	push	{r7}
 8016d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d2a:	f043 0304 	orr.w	r3, r3, #4
 8016d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016d32:	bf00      	nop
 8016d34:	46bd      	mov	sp, r7
 8016d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3a:	4770      	bx	lr

08016d3c <LL_RCC_LSE_DisableBypass>:
{
 8016d3c:	b480      	push	{r7}
 8016d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d4c:	f023 0304 	bic.w	r3, r3, #4
 8016d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016d54:	bf00      	nop
 8016d56:	46bd      	mov	sp, r7
 8016d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5c:	4770      	bx	lr

08016d5e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016d5e:	b480      	push	{r7}
 8016d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d6a:	f003 0302 	and.w	r3, r3, #2
 8016d6e:	2b02      	cmp	r3, #2
 8016d70:	d101      	bne.n	8016d76 <LL_RCC_LSE_IsReady+0x18>
 8016d72:	2301      	movs	r3, #1
 8016d74:	e000      	b.n	8016d78 <LL_RCC_LSE_IsReady+0x1a>
 8016d76:	2300      	movs	r3, #0
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr

08016d82 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016d82:	b480      	push	{r7}
 8016d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d92:	f043 0301 	orr.w	r3, r3, #1
 8016d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016d9a:	bf00      	nop
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016da4:	b480      	push	{r7}
 8016da6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016db0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016db4:	f023 0301 	bic.w	r3, r3, #1
 8016db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016dbc:	bf00      	nop
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc4:	4770      	bx	lr

08016dc6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016dc6:	b480      	push	{r7}
 8016dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dd2:	f003 0302 	and.w	r3, r3, #2
 8016dd6:	2b02      	cmp	r3, #2
 8016dd8:	d101      	bne.n	8016dde <LL_RCC_LSI1_IsReady+0x18>
 8016dda:	2301      	movs	r3, #1
 8016ddc:	e000      	b.n	8016de0 <LL_RCC_LSI1_IsReady+0x1a>
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	46bd      	mov	sp, r7
 8016de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de8:	4770      	bx	lr

08016dea <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016dea:	b480      	push	{r7}
 8016dec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016dfa:	f043 0304 	orr.w	r3, r3, #4
 8016dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016e02:	bf00      	nop
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr

08016e0c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016e0c:	b480      	push	{r7}
 8016e0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e1c:	f023 0304 	bic.w	r3, r3, #4
 8016e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016e24:	bf00      	nop
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr

08016e2e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016e2e:	b480      	push	{r7}
 8016e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e3a:	f003 0308 	and.w	r3, r3, #8
 8016e3e:	2b08      	cmp	r3, #8
 8016e40:	d101      	bne.n	8016e46 <LL_RCC_LSI2_IsReady+0x18>
 8016e42:	2301      	movs	r3, #1
 8016e44:	e000      	b.n	8016e48 <LL_RCC_LSI2_IsReady+0x1a>
 8016e46:	2300      	movs	r3, #0
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e50:	4770      	bx	lr

08016e52 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016e52:	b480      	push	{r7}
 8016e54:	b083      	sub	sp, #12
 8016e56:	af00      	add	r7, sp, #0
 8016e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016e62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	021b      	lsls	r3, r3, #8
 8016e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e6e:	4313      	orrs	r3, r2
 8016e70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016e74:	bf00      	nop
 8016e76:	370c      	adds	r7, #12
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016e80:	b480      	push	{r7}
 8016e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e8e:	f043 0301 	orr.w	r3, r3, #1
 8016e92:	6013      	str	r3, [r2, #0]
}
 8016e94:	bf00      	nop
 8016e96:	46bd      	mov	sp, r7
 8016e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9c:	4770      	bx	lr

08016e9e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016e9e:	b480      	push	{r7}
 8016ea0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016eac:	f023 0301 	bic.w	r3, r3, #1
 8016eb0:	6013      	str	r3, [r2, #0]
}
 8016eb2:	bf00      	nop
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eba:	4770      	bx	lr

08016ebc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	f003 0302 	and.w	r3, r3, #2
 8016eca:	2b02      	cmp	r3, #2
 8016ecc:	d101      	bne.n	8016ed2 <LL_RCC_MSI_IsReady+0x16>
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e000      	b.n	8016ed4 <LL_RCC_MSI_IsReady+0x18>
 8016ed2:	2300      	movs	r3, #0
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016edc:	4770      	bx	lr

08016ede <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016ede:	b480      	push	{r7}
 8016ee0:	b083      	sub	sp, #12
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	4313      	orrs	r3, r2
 8016ef8:	600b      	str	r3, [r1, #0]
}
 8016efa:	bf00      	nop
 8016efc:	370c      	adds	r7, #12
 8016efe:	46bd      	mov	sp, r7
 8016f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f04:	4770      	bx	lr

08016f06 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016f06:	b480      	push	{r7}
 8016f08:	b083      	sub	sp, #12
 8016f0a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f16:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2bb0      	cmp	r3, #176	; 0xb0
 8016f1c:	d901      	bls.n	8016f22 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016f1e:	23b0      	movs	r3, #176	; 0xb0
 8016f20:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016f22:	687b      	ldr	r3, [r7, #4]
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	370c      	adds	r7, #12
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2e:	4770      	bx	lr

08016f30 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	021b      	lsls	r3, r3, #8
 8016f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016f4a:	4313      	orrs	r3, r2
 8016f4c:	604b      	str	r3, [r1, #4]
}
 8016f4e:	bf00      	nop
 8016f50:	370c      	adds	r7, #12
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr

08016f5a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016f5a:	b480      	push	{r7}
 8016f5c:	b083      	sub	sp, #12
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f66:	689b      	ldr	r3, [r3, #8]
 8016f68:	f023 0203 	bic.w	r2, r3, #3
 8016f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	4313      	orrs	r3, r2
 8016f74:	608b      	str	r3, [r1, #8]
}
 8016f76:	bf00      	nop
 8016f78:	370c      	adds	r7, #12
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f80:	4770      	bx	lr

08016f82 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016f82:	b480      	push	{r7}
 8016f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f8a:	689b      	ldr	r3, [r3, #8]
 8016f8c:	f003 030c 	and.w	r3, r3, #12
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	46bd      	mov	sp, r7
 8016f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f98:	4770      	bx	lr

08016f9a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016f9a:	b480      	push	{r7}
 8016f9c:	b083      	sub	sp, #12
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	4313      	orrs	r3, r2
 8016fb4:	608b      	str	r3, [r1, #8]
}
 8016fb6:	bf00      	nop
 8016fb8:	370c      	adds	r7, #12
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc0:	4770      	bx	lr

08016fc2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016fc2:	b480      	push	{r7}
 8016fc4:	b083      	sub	sp, #12
 8016fc6:	af00      	add	r7, sp, #0
 8016fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	4313      	orrs	r3, r2
 8016fde:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016fe2:	bf00      	nop
 8016fe4:	370c      	adds	r7, #12
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fec:	4770      	bx	lr

08016fee <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016fee:	b480      	push	{r7}
 8016ff0:	b083      	sub	sp, #12
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ffa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016ffe:	f023 020f 	bic.w	r2, r3, #15
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	091b      	lsrs	r3, r3, #4
 8017006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801700a:	4313      	orrs	r3, r2
 801700c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8017010:	bf00      	nop
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr

0801701c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 801701c:	b480      	push	{r7}
 801701e:	b083      	sub	sp, #12
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8017024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017028:	689b      	ldr	r3, [r3, #8]
 801702a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801702e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	4313      	orrs	r3, r2
 8017036:	608b      	str	r3, [r1, #8]
}
 8017038:	bf00      	nop
 801703a:	370c      	adds	r7, #12
 801703c:	46bd      	mov	sp, r7
 801703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017042:	4770      	bx	lr

08017044 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8017044:	b480      	push	{r7}
 8017046:	b083      	sub	sp, #12
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801704c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017050:	689b      	ldr	r3, [r3, #8]
 8017052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8017056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	4313      	orrs	r3, r2
 801705e:	608b      	str	r3, [r1, #8]
}
 8017060:	bf00      	nop
 8017062:	370c      	adds	r7, #12
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801706c:	b480      	push	{r7}
 801706e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8017070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017074:	689b      	ldr	r3, [r3, #8]
 8017076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801707a:	4618      	mov	r0, r3
 801707c:	46bd      	mov	sp, r7
 801707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017082:	4770      	bx	lr

08017084 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8017084:	b480      	push	{r7}
 8017086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8017088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801708c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8017094:	4618      	mov	r0, r3
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr

0801709e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801709e:	b480      	push	{r7}
 80170a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80170a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80170aa:	011b      	lsls	r3, r3, #4
 80170ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr

080170ba <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80170ba:	b480      	push	{r7}
 80170bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80170be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170c2:	689b      	ldr	r3, [r3, #8]
 80170c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80170c8:	4618      	mov	r0, r3
 80170ca:	46bd      	mov	sp, r7
 80170cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d0:	4770      	bx	lr

080170d2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80170d2:	b480      	push	{r7}
 80170d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80170d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170da:	689b      	ldr	r3, [r3, #8]
 80170dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80170e0:	4618      	mov	r0, r3
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr

080170ea <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80170ea:	b480      	push	{r7}
 80170ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80170ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80170f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80170fc:	6013      	str	r3, [r2, #0]
}
 80170fe:	bf00      	nop
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr

08017108 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8017108:	b480      	push	{r7}
 801710a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 801710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801711a:	6013      	str	r3, [r2, #0]
}
 801711c:	bf00      	nop
 801711e:	46bd      	mov	sp, r7
 8017120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017124:	4770      	bx	lr

08017126 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8017126:	b480      	push	{r7}
 8017128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 801712a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017134:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017138:	d101      	bne.n	801713e <LL_RCC_PLL_IsReady+0x18>
 801713a:	2301      	movs	r3, #1
 801713c:	e000      	b.n	8017140 <LL_RCC_PLL_IsReady+0x1a>
 801713e:	2300      	movs	r3, #0
}
 8017140:	4618      	mov	r0, r3
 8017142:	46bd      	mov	sp, r7
 8017144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017148:	4770      	bx	lr

0801714a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801714a:	b480      	push	{r7}
 801714c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801714e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	0a1b      	lsrs	r3, r3, #8
 8017156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801715a:	4618      	mov	r0, r3
 801715c:	46bd      	mov	sp, r7
 801715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017162:	4770      	bx	lr

08017164 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8017164:	b480      	push	{r7}
 8017166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8017168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801716c:	68db      	ldr	r3, [r3, #12]
 801716e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8017172:	4618      	mov	r0, r3
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr

0801717c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801717c:	b480      	push	{r7}
 801717e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8017180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017184:	68db      	ldr	r3, [r3, #12]
 8017186:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801718a:	4618      	mov	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr

08017194 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8017194:	b480      	push	{r7}
 8017196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8017198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801719c:	68db      	ldr	r3, [r3, #12]
 801719e:	f003 0303 	and.w	r3, r3, #3
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	46bd      	mov	sp, r7
 80171a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171aa:	4770      	bx	lr

080171ac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80171ac:	b480      	push	{r7}
 80171ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80171b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171b4:	689b      	ldr	r3, [r3, #8]
 80171b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80171ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80171be:	d101      	bne.n	80171c4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80171c0:	2301      	movs	r3, #1
 80171c2:	e000      	b.n	80171c6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80171c4:	2300      	movs	r3, #0
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	46bd      	mov	sp, r7
 80171ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ce:	4770      	bx	lr

080171d0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80171d0:	b480      	push	{r7}
 80171d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80171d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80171dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80171e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80171e4:	d101      	bne.n	80171ea <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80171e6:	2301      	movs	r3, #1
 80171e8:	e000      	b.n	80171ec <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80171ea:	2300      	movs	r3, #0
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr

080171f6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80171f6:	b480      	push	{r7}
 80171f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80171fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801720a:	d101      	bne.n	8017210 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 801720c:	2301      	movs	r3, #1
 801720e:	e000      	b.n	8017212 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8017210:	2300      	movs	r3, #0
}
 8017212:	4618      	mov	r0, r3
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 801721c:	b480      	push	{r7}
 801721e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8017220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017224:	689b      	ldr	r3, [r3, #8]
 8017226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801722a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801722e:	d101      	bne.n	8017234 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8017230:	2301      	movs	r3, #1
 8017232:	e000      	b.n	8017236 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr

08017240 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8017240:	b480      	push	{r7}
 8017242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8017244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017248:	689b      	ldr	r3, [r3, #8]
 801724a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801724e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017252:	d101      	bne.n	8017258 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8017254:	2301      	movs	r3, #1
 8017256:	e000      	b.n	801725a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8017258:	2300      	movs	r3, #0
}
 801725a:	4618      	mov	r0, r3
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr

08017264 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017264:	b590      	push	{r4, r7, lr}
 8017266:	b08d      	sub	sp, #52	; 0x34
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d101      	bne.n	8017276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8017272:	2301      	movs	r3, #1
 8017274:	e363      	b.n	801793e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	f003 0320 	and.w	r3, r3, #32
 801727e:	2b00      	cmp	r3, #0
 8017280:	f000 808d 	beq.w	801739e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017284:	f7ff fe7d 	bl	8016f82 <LL_RCC_GetSysClkSource>
 8017288:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801728a:	f7ff ff83 	bl	8017194 <LL_RCC_PLL_GetMainSource>
 801728e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017292:	2b00      	cmp	r3, #0
 8017294:	d005      	beq.n	80172a2 <HAL_RCC_OscConfig+0x3e>
 8017296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017298:	2b0c      	cmp	r3, #12
 801729a:	d147      	bne.n	801732c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729e:	2b01      	cmp	r3, #1
 80172a0:	d144      	bne.n	801732c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	69db      	ldr	r3, [r3, #28]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d101      	bne.n	80172ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80172aa:	2301      	movs	r3, #1
 80172ac:	e347      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80172b2:	f7ff fe28 	bl	8016f06 <LL_RCC_MSI_GetRange>
 80172b6:	4603      	mov	r3, r0
 80172b8:	429c      	cmp	r4, r3
 80172ba:	d914      	bls.n	80172e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172c0:	4618      	mov	r0, r3
 80172c2:	f000 fd61 	bl	8017d88 <RCC_SetFlashLatencyFromMSIRange>
 80172c6:	4603      	mov	r3, r0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d001      	beq.n	80172d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80172cc:	2301      	movs	r3, #1
 80172ce:	e336      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d4:	4618      	mov	r0, r3
 80172d6:	f7ff fe02 	bl	8016ede <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6a1b      	ldr	r3, [r3, #32]
 80172de:	4618      	mov	r0, r3
 80172e0:	f7ff fe26 	bl	8016f30 <LL_RCC_MSI_SetCalibTrimming>
 80172e4:	e013      	b.n	801730e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7ff fdf7 	bl	8016ede <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6a1b      	ldr	r3, [r3, #32]
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7ff fe1b 	bl	8016f30 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172fe:	4618      	mov	r0, r3
 8017300:	f000 fd42 	bl	8017d88 <RCC_SetFlashLatencyFromMSIRange>
 8017304:	4603      	mov	r3, r0
 8017306:	2b00      	cmp	r3, #0
 8017308:	d001      	beq.n	801730e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801730a:	2301      	movs	r3, #1
 801730c:	e317      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 801730e:	f000 fcc9 	bl	8017ca4 <HAL_RCC_GetHCLKFreq>
 8017312:	4603      	mov	r3, r0
 8017314:	4aa4      	ldr	r2, [pc, #656]	; (80175a8 <HAL_RCC_OscConfig+0x344>)
 8017316:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8017318:	4ba4      	ldr	r3, [pc, #656]	; (80175ac <HAL_RCC_OscConfig+0x348>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	4618      	mov	r0, r3
 801731e:	f7e9 fcef 	bl	8000d00 <HAL_InitTick>
 8017322:	4603      	mov	r3, r0
 8017324:	2b00      	cmp	r3, #0
 8017326:	d039      	beq.n	801739c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8017328:	2301      	movs	r3, #1
 801732a:	e308      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	69db      	ldr	r3, [r3, #28]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d01e      	beq.n	8017372 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017334:	f7ff fda4 	bl	8016e80 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017338:	f7fe f972 	bl	8015620 <HAL_GetTick>
 801733c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801733e:	e008      	b.n	8017352 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017340:	f7fe f96e 	bl	8015620 <HAL_GetTick>
 8017344:	4602      	mov	r2, r0
 8017346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017348:	1ad3      	subs	r3, r2, r3
 801734a:	2b02      	cmp	r3, #2
 801734c:	d901      	bls.n	8017352 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801734e:	2303      	movs	r3, #3
 8017350:	e2f5      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8017352:	f7ff fdb3 	bl	8016ebc <LL_RCC_MSI_IsReady>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d0f1      	beq.n	8017340 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017360:	4618      	mov	r0, r3
 8017362:	f7ff fdbc 	bl	8016ede <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	6a1b      	ldr	r3, [r3, #32]
 801736a:	4618      	mov	r0, r3
 801736c:	f7ff fde0 	bl	8016f30 <LL_RCC_MSI_SetCalibTrimming>
 8017370:	e015      	b.n	801739e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017372:	f7ff fd94 	bl	8016e9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017376:	f7fe f953 	bl	8015620 <HAL_GetTick>
 801737a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801737c:	e008      	b.n	8017390 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801737e:	f7fe f94f 	bl	8015620 <HAL_GetTick>
 8017382:	4602      	mov	r2, r0
 8017384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017386:	1ad3      	subs	r3, r2, r3
 8017388:	2b02      	cmp	r3, #2
 801738a:	d901      	bls.n	8017390 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801738c:	2303      	movs	r3, #3
 801738e:	e2d6      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017390:	f7ff fd94 	bl	8016ebc <LL_RCC_MSI_IsReady>
 8017394:	4603      	mov	r3, r0
 8017396:	2b00      	cmp	r3, #0
 8017398:	d1f1      	bne.n	801737e <HAL_RCC_OscConfig+0x11a>
 801739a:	e000      	b.n	801739e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801739c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	f003 0301 	and.w	r3, r3, #1
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d047      	beq.n	801743a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80173aa:	f7ff fdea 	bl	8016f82 <LL_RCC_GetSysClkSource>
 80173ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80173b0:	f7ff fef0 	bl	8017194 <LL_RCC_PLL_GetMainSource>
 80173b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80173b6:	6a3b      	ldr	r3, [r7, #32]
 80173b8:	2b08      	cmp	r3, #8
 80173ba:	d005      	beq.n	80173c8 <HAL_RCC_OscConfig+0x164>
 80173bc:	6a3b      	ldr	r3, [r7, #32]
 80173be:	2b0c      	cmp	r3, #12
 80173c0:	d108      	bne.n	80173d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80173c2:	69fb      	ldr	r3, [r7, #28]
 80173c4:	2b03      	cmp	r3, #3
 80173c6:	d105      	bne.n	80173d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d134      	bne.n	801743a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80173d0:	2301      	movs	r3, #1
 80173d2:	e2b4      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	685b      	ldr	r3, [r3, #4]
 80173d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173dc:	d102      	bne.n	80173e4 <HAL_RCC_OscConfig+0x180>
 80173de:	f7ff fbd1 	bl	8016b84 <LL_RCC_HSE_Enable>
 80173e2:	e001      	b.n	80173e8 <HAL_RCC_OscConfig+0x184>
 80173e4:	f7ff fbdd 	bl	8016ba2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d012      	beq.n	8017416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173f0:	f7fe f916 	bl	8015620 <HAL_GetTick>
 80173f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80173f6:	e008      	b.n	801740a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80173f8:	f7fe f912 	bl	8015620 <HAL_GetTick>
 80173fc:	4602      	mov	r2, r0
 80173fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017400:	1ad3      	subs	r3, r2, r3
 8017402:	2b64      	cmp	r3, #100	; 0x64
 8017404:	d901      	bls.n	801740a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8017406:	2303      	movs	r3, #3
 8017408:	e299      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801740a:	f7ff fbd9 	bl	8016bc0 <LL_RCC_HSE_IsReady>
 801740e:	4603      	mov	r3, r0
 8017410:	2b00      	cmp	r3, #0
 8017412:	d0f1      	beq.n	80173f8 <HAL_RCC_OscConfig+0x194>
 8017414:	e011      	b.n	801743a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017416:	f7fe f903 	bl	8015620 <HAL_GetTick>
 801741a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 801741c:	e008      	b.n	8017430 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801741e:	f7fe f8ff 	bl	8015620 <HAL_GetTick>
 8017422:	4602      	mov	r2, r0
 8017424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017426:	1ad3      	subs	r3, r2, r3
 8017428:	2b64      	cmp	r3, #100	; 0x64
 801742a:	d901      	bls.n	8017430 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 801742c:	2303      	movs	r3, #3
 801742e:	e286      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017430:	f7ff fbc6 	bl	8016bc0 <LL_RCC_HSE_IsReady>
 8017434:	4603      	mov	r3, r0
 8017436:	2b00      	cmp	r3, #0
 8017438:	d1f1      	bne.n	801741e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	f003 0302 	and.w	r3, r3, #2
 8017442:	2b00      	cmp	r3, #0
 8017444:	d04c      	beq.n	80174e0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017446:	f7ff fd9c 	bl	8016f82 <LL_RCC_GetSysClkSource>
 801744a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801744c:	f7ff fea2 	bl	8017194 <LL_RCC_PLL_GetMainSource>
 8017450:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017452:	69bb      	ldr	r3, [r7, #24]
 8017454:	2b04      	cmp	r3, #4
 8017456:	d005      	beq.n	8017464 <HAL_RCC_OscConfig+0x200>
 8017458:	69bb      	ldr	r3, [r7, #24]
 801745a:	2b0c      	cmp	r3, #12
 801745c:	d10e      	bne.n	801747c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	2b02      	cmp	r3, #2
 8017462:	d10b      	bne.n	801747c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	68db      	ldr	r3, [r3, #12]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d101      	bne.n	8017470 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801746c:	2301      	movs	r3, #1
 801746e:	e266      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	691b      	ldr	r3, [r3, #16]
 8017474:	4618      	mov	r0, r3
 8017476:	f7ff fbe5 	bl	8016c44 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801747a:	e031      	b.n	80174e0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	68db      	ldr	r3, [r3, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d019      	beq.n	80174b8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017484:	f7ff fbae 	bl	8016be4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017488:	f7fe f8ca 	bl	8015620 <HAL_GetTick>
 801748c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801748e:	e008      	b.n	80174a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017490:	f7fe f8c6 	bl	8015620 <HAL_GetTick>
 8017494:	4602      	mov	r2, r0
 8017496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	2b02      	cmp	r3, #2
 801749c:	d901      	bls.n	80174a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801749e:	2303      	movs	r3, #3
 80174a0:	e24d      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80174a2:	f7ff fbbd 	bl	8016c20 <LL_RCC_HSI_IsReady>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d0f1      	beq.n	8017490 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	691b      	ldr	r3, [r3, #16]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7ff fbc7 	bl	8016c44 <LL_RCC_HSI_SetCalibTrimming>
 80174b6:	e013      	b.n	80174e0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80174b8:	f7ff fba3 	bl	8016c02 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174bc:	f7fe f8b0 	bl	8015620 <HAL_GetTick>
 80174c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80174c2:	e008      	b.n	80174d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80174c4:	f7fe f8ac 	bl	8015620 <HAL_GetTick>
 80174c8:	4602      	mov	r2, r0
 80174ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174cc:	1ad3      	subs	r3, r2, r3
 80174ce:	2b02      	cmp	r3, #2
 80174d0:	d901      	bls.n	80174d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80174d2:	2303      	movs	r3, #3
 80174d4:	e233      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80174d6:	f7ff fba3 	bl	8016c20 <LL_RCC_HSI_IsReady>
 80174da:	4603      	mov	r3, r0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d1f1      	bne.n	80174c4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	f003 0308 	and.w	r3, r3, #8
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d106      	bne.n	80174fa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	f000 80a3 	beq.w	8017640 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	695b      	ldr	r3, [r3, #20]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d076      	beq.n	80175f0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	f003 0310 	and.w	r3, r3, #16
 801750a:	2b00      	cmp	r3, #0
 801750c:	d046      	beq.n	801759c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 801750e:	f7ff fc5a 	bl	8016dc6 <LL_RCC_LSI1_IsReady>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d113      	bne.n	8017540 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8017518:	f7ff fc33 	bl	8016d82 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801751c:	f7fe f880 	bl	8015620 <HAL_GetTick>
 8017520:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8017522:	e008      	b.n	8017536 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017524:	f7fe f87c 	bl	8015620 <HAL_GetTick>
 8017528:	4602      	mov	r2, r0
 801752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801752c:	1ad3      	subs	r3, r2, r3
 801752e:	2b02      	cmp	r3, #2
 8017530:	d901      	bls.n	8017536 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8017532:	2303      	movs	r3, #3
 8017534:	e203      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8017536:	f7ff fc46 	bl	8016dc6 <LL_RCC_LSI1_IsReady>
 801753a:	4603      	mov	r3, r0
 801753c:	2b00      	cmp	r3, #0
 801753e:	d0f1      	beq.n	8017524 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017540:	f7ff fc53 	bl	8016dea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017544:	f7fe f86c 	bl	8015620 <HAL_GetTick>
 8017548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801754a:	e008      	b.n	801755e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801754c:	f7fe f868 	bl	8015620 <HAL_GetTick>
 8017550:	4602      	mov	r2, r0
 8017552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017554:	1ad3      	subs	r3, r2, r3
 8017556:	2b03      	cmp	r3, #3
 8017558:	d901      	bls.n	801755e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801755a:	2303      	movs	r3, #3
 801755c:	e1ef      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801755e:	f7ff fc66 	bl	8016e2e <LL_RCC_LSI2_IsReady>
 8017562:	4603      	mov	r3, r0
 8017564:	2b00      	cmp	r3, #0
 8017566:	d0f1      	beq.n	801754c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	699b      	ldr	r3, [r3, #24]
 801756c:	4618      	mov	r0, r3
 801756e:	f7ff fc70 	bl	8016e52 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8017572:	f7ff fc17 	bl	8016da4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017576:	f7fe f853 	bl	8015620 <HAL_GetTick>
 801757a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801757c:	e008      	b.n	8017590 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801757e:	f7fe f84f 	bl	8015620 <HAL_GetTick>
 8017582:	4602      	mov	r2, r0
 8017584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017586:	1ad3      	subs	r3, r2, r3
 8017588:	2b02      	cmp	r3, #2
 801758a:	d901      	bls.n	8017590 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801758c:	2303      	movs	r3, #3
 801758e:	e1d6      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017590:	f7ff fc19 	bl	8016dc6 <LL_RCC_LSI1_IsReady>
 8017594:	4603      	mov	r3, r0
 8017596:	2b00      	cmp	r3, #0
 8017598:	d1f1      	bne.n	801757e <HAL_RCC_OscConfig+0x31a>
 801759a:	e051      	b.n	8017640 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801759c:	f7ff fbf1 	bl	8016d82 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175a0:	f7fe f83e 	bl	8015620 <HAL_GetTick>
 80175a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80175a6:	e00c      	b.n	80175c2 <HAL_RCC_OscConfig+0x35e>
 80175a8:	20000008 	.word	0x20000008
 80175ac:	20000070 	.word	0x20000070
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80175b0:	f7fe f836 	bl	8015620 <HAL_GetTick>
 80175b4:	4602      	mov	r2, r0
 80175b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b8:	1ad3      	subs	r3, r2, r3
 80175ba:	2b02      	cmp	r3, #2
 80175bc:	d901      	bls.n	80175c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80175be:	2303      	movs	r3, #3
 80175c0:	e1bd      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80175c2:	f7ff fc00 	bl	8016dc6 <LL_RCC_LSI1_IsReady>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d0f1      	beq.n	80175b0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80175cc:	f7ff fc1e 	bl	8016e0c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80175d0:	e008      	b.n	80175e4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80175d2:	f7fe f825 	bl	8015620 <HAL_GetTick>
 80175d6:	4602      	mov	r2, r0
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	1ad3      	subs	r3, r2, r3
 80175dc:	2b03      	cmp	r3, #3
 80175de:	d901      	bls.n	80175e4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80175e0:	2303      	movs	r3, #3
 80175e2:	e1ac      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80175e4:	f7ff fc23 	bl	8016e2e <LL_RCC_LSI2_IsReady>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d1f1      	bne.n	80175d2 <HAL_RCC_OscConfig+0x36e>
 80175ee:	e027      	b.n	8017640 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80175f0:	f7ff fc0c 	bl	8016e0c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80175f4:	f7fe f814 	bl	8015620 <HAL_GetTick>
 80175f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80175fa:	e008      	b.n	801760e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80175fc:	f7fe f810 	bl	8015620 <HAL_GetTick>
 8017600:	4602      	mov	r2, r0
 8017602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	2b03      	cmp	r3, #3
 8017608:	d901      	bls.n	801760e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801760a:	2303      	movs	r3, #3
 801760c:	e197      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 801760e:	f7ff fc0e 	bl	8016e2e <LL_RCC_LSI2_IsReady>
 8017612:	4603      	mov	r3, r0
 8017614:	2b00      	cmp	r3, #0
 8017616:	d1f1      	bne.n	80175fc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8017618:	f7ff fbc4 	bl	8016da4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801761c:	f7fe f800 	bl	8015620 <HAL_GetTick>
 8017620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8017622:	e008      	b.n	8017636 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017624:	f7fd fffc 	bl	8015620 <HAL_GetTick>
 8017628:	4602      	mov	r2, r0
 801762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801762c:	1ad3      	subs	r3, r2, r3
 801762e:	2b02      	cmp	r3, #2
 8017630:	d901      	bls.n	8017636 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8017632:	2303      	movs	r3, #3
 8017634:	e183      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8017636:	f7ff fbc6 	bl	8016dc6 <LL_RCC_LSI1_IsReady>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	d1f1      	bne.n	8017624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f003 0304 	and.w	r3, r3, #4
 8017648:	2b00      	cmp	r3, #0
 801764a:	d05b      	beq.n	8017704 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801764c:	4ba7      	ldr	r3, [pc, #668]	; (80178ec <HAL_RCC_OscConfig+0x688>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017654:	2b00      	cmp	r3, #0
 8017656:	d114      	bne.n	8017682 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017658:	f7ff fa64 	bl	8016b24 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801765c:	f7fd ffe0 	bl	8015620 <HAL_GetTick>
 8017660:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017662:	e008      	b.n	8017676 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017664:	f7fd ffdc 	bl	8015620 <HAL_GetTick>
 8017668:	4602      	mov	r2, r0
 801766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801766c:	1ad3      	subs	r3, r2, r3
 801766e:	2b02      	cmp	r3, #2
 8017670:	d901      	bls.n	8017676 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8017672:	2303      	movs	r3, #3
 8017674:	e163      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017676:	4b9d      	ldr	r3, [pc, #628]	; (80178ec <HAL_RCC_OscConfig+0x688>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801767e:	2b00      	cmp	r3, #0
 8017680:	d0f0      	beq.n	8017664 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	689b      	ldr	r3, [r3, #8]
 8017686:	2b01      	cmp	r3, #1
 8017688:	d102      	bne.n	8017690 <HAL_RCC_OscConfig+0x42c>
 801768a:	f7ff fb24 	bl	8016cd6 <LL_RCC_LSE_Enable>
 801768e:	e00c      	b.n	80176aa <HAL_RCC_OscConfig+0x446>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	2b05      	cmp	r3, #5
 8017696:	d104      	bne.n	80176a2 <HAL_RCC_OscConfig+0x43e>
 8017698:	f7ff fb3f 	bl	8016d1a <LL_RCC_LSE_EnableBypass>
 801769c:	f7ff fb1b 	bl	8016cd6 <LL_RCC_LSE_Enable>
 80176a0:	e003      	b.n	80176aa <HAL_RCC_OscConfig+0x446>
 80176a2:	f7ff fb29 	bl	8016cf8 <LL_RCC_LSE_Disable>
 80176a6:	f7ff fb49 	bl	8016d3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	689b      	ldr	r3, [r3, #8]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d014      	beq.n	80176dc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80176b2:	f7fd ffb5 	bl	8015620 <HAL_GetTick>
 80176b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80176b8:	e00a      	b.n	80176d0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80176ba:	f7fd ffb1 	bl	8015620 <HAL_GetTick>
 80176be:	4602      	mov	r2, r0
 80176c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176c2:	1ad3      	subs	r3, r2, r3
 80176c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80176c8:	4293      	cmp	r3, r2
 80176ca:	d901      	bls.n	80176d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80176cc:	2303      	movs	r3, #3
 80176ce:	e136      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80176d0:	f7ff fb45 	bl	8016d5e <LL_RCC_LSE_IsReady>
 80176d4:	4603      	mov	r3, r0
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d0ef      	beq.n	80176ba <HAL_RCC_OscConfig+0x456>
 80176da:	e013      	b.n	8017704 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80176dc:	f7fd ffa0 	bl	8015620 <HAL_GetTick>
 80176e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80176e2:	e00a      	b.n	80176fa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80176e4:	f7fd ff9c 	bl	8015620 <HAL_GetTick>
 80176e8:	4602      	mov	r2, r0
 80176ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ec:	1ad3      	subs	r3, r2, r3
 80176ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d901      	bls.n	80176fa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80176f6:	2303      	movs	r3, #3
 80176f8:	e121      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80176fa:	f7ff fb30 	bl	8016d5e <LL_RCC_LSE_IsReady>
 80176fe:	4603      	mov	r3, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d1ef      	bne.n	80176e4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801770c:	2b00      	cmp	r3, #0
 801770e:	d02c      	beq.n	801776a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017714:	2b00      	cmp	r3, #0
 8017716:	d014      	beq.n	8017742 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017718:	f7ff faa9 	bl	8016c6e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801771c:	f7fd ff80 	bl	8015620 <HAL_GetTick>
 8017720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8017722:	e008      	b.n	8017736 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017724:	f7fd ff7c 	bl	8015620 <HAL_GetTick>
 8017728:	4602      	mov	r2, r0
 801772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772c:	1ad3      	subs	r3, r2, r3
 801772e:	2b02      	cmp	r3, #2
 8017730:	d901      	bls.n	8017736 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8017732:	2303      	movs	r3, #3
 8017734:	e103      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8017736:	f7ff fabc 	bl	8016cb2 <LL_RCC_HSI48_IsReady>
 801773a:	4603      	mov	r3, r0
 801773c:	2b00      	cmp	r3, #0
 801773e:	d0f1      	beq.n	8017724 <HAL_RCC_OscConfig+0x4c0>
 8017740:	e013      	b.n	801776a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017742:	f7ff faa5 	bl	8016c90 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017746:	f7fd ff6b 	bl	8015620 <HAL_GetTick>
 801774a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801774c:	e008      	b.n	8017760 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801774e:	f7fd ff67 	bl	8015620 <HAL_GetTick>
 8017752:	4602      	mov	r2, r0
 8017754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017756:	1ad3      	subs	r3, r2, r3
 8017758:	2b02      	cmp	r3, #2
 801775a:	d901      	bls.n	8017760 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801775c:	2303      	movs	r3, #3
 801775e:	e0ee      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017760:	f7ff faa7 	bl	8016cb2 <LL_RCC_HSI48_IsReady>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d1f1      	bne.n	801774e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776e:	2b00      	cmp	r3, #0
 8017770:	f000 80e4 	beq.w	801793c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017774:	f7ff fc05 	bl	8016f82 <LL_RCC_GetSysClkSource>
 8017778:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801777a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801777e:	68db      	ldr	r3, [r3, #12]
 8017780:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017786:	2b02      	cmp	r3, #2
 8017788:	f040 80b4 	bne.w	80178f4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	f003 0203 	and.w	r2, r3, #3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017796:	429a      	cmp	r2, r3
 8017798:	d123      	bne.n	80177e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80177a4:	429a      	cmp	r2, r3
 80177a6:	d11c      	bne.n	80177e2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	0a1b      	lsrs	r3, r3, #8
 80177ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d114      	bne.n	80177e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d10d      	bne.n	80177e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d106      	bne.n	80177e2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80177de:	429a      	cmp	r2, r3
 80177e0:	d05d      	beq.n	801789e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80177e2:	693b      	ldr	r3, [r7, #16]
 80177e4:	2b0c      	cmp	r3, #12
 80177e6:	d058      	beq.n	801789a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80177e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d001      	beq.n	80177fa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80177f6:	2301      	movs	r3, #1
 80177f8:	e0a1      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80177fa:	f7ff fc85 	bl	8017108 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80177fe:	f7fd ff0f 	bl	8015620 <HAL_GetTick>
 8017802:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017804:	e008      	b.n	8017818 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017806:	f7fd ff0b 	bl	8015620 <HAL_GetTick>
 801780a:	4602      	mov	r2, r0
 801780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	2b02      	cmp	r3, #2
 8017812:	d901      	bls.n	8017818 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8017814:	2303      	movs	r3, #3
 8017816:	e092      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017822:	2b00      	cmp	r3, #0
 8017824:	d1ef      	bne.n	8017806 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801782a:	68da      	ldr	r2, [r3, #12]
 801782c:	4b30      	ldr	r3, [pc, #192]	; (80178f0 <HAL_RCC_OscConfig+0x68c>)
 801782e:	4013      	ands	r3, r2
 8017830:	687a      	ldr	r2, [r7, #4]
 8017832:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017834:	687a      	ldr	r2, [r7, #4]
 8017836:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017838:	4311      	orrs	r1, r2
 801783a:	687a      	ldr	r2, [r7, #4]
 801783c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801783e:	0212      	lsls	r2, r2, #8
 8017840:	4311      	orrs	r1, r2
 8017842:	687a      	ldr	r2, [r7, #4]
 8017844:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017846:	4311      	orrs	r1, r2
 8017848:	687a      	ldr	r2, [r7, #4]
 801784a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801784c:	4311      	orrs	r1, r2
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017852:	430a      	orrs	r2, r1
 8017854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017858:	4313      	orrs	r3, r2
 801785a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801785c:	f7ff fc45 	bl	80170ea <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017864:	68db      	ldr	r3, [r3, #12]
 8017866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801786a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801786e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017870:	f7fd fed6 	bl	8015620 <HAL_GetTick>
 8017874:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017876:	e008      	b.n	801788a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017878:	f7fd fed2 	bl	8015620 <HAL_GetTick>
 801787c:	4602      	mov	r2, r0
 801787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017880:	1ad3      	subs	r3, r2, r3
 8017882:	2b02      	cmp	r3, #2
 8017884:	d901      	bls.n	801788a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8017886:	2303      	movs	r3, #3
 8017888:	e059      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801788a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017894:	2b00      	cmp	r3, #0
 8017896:	d0ef      	beq.n	8017878 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017898:	e050      	b.n	801793c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801789a:	2301      	movs	r3, #1
 801789c:	e04f      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801789e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d147      	bne.n	801793c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80178ac:	f7ff fc1d 	bl	80170ea <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80178b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80178b4:	68db      	ldr	r3, [r3, #12]
 80178b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80178ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80178be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80178c0:	f7fd feae 	bl	8015620 <HAL_GetTick>
 80178c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80178c6:	e008      	b.n	80178da <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80178c8:	f7fd feaa 	bl	8015620 <HAL_GetTick>
 80178cc:	4602      	mov	r2, r0
 80178ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d0:	1ad3      	subs	r3, r2, r3
 80178d2:	2b02      	cmp	r3, #2
 80178d4:	d901      	bls.n	80178da <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80178d6:	2303      	movs	r3, #3
 80178d8:	e031      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80178da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d0ef      	beq.n	80178c8 <HAL_RCC_OscConfig+0x664>
 80178e8:	e028      	b.n	801793c <HAL_RCC_OscConfig+0x6d8>
 80178ea:	bf00      	nop
 80178ec:	58000400 	.word	0x58000400
 80178f0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	2b0c      	cmp	r3, #12
 80178f8:	d01e      	beq.n	8017938 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80178fa:	f7ff fc05 	bl	8017108 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80178fe:	f7fd fe8f 	bl	8015620 <HAL_GetTick>
 8017902:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017904:	e008      	b.n	8017918 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017906:	f7fd fe8b 	bl	8015620 <HAL_GetTick>
 801790a:	4602      	mov	r2, r0
 801790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	2b02      	cmp	r3, #2
 8017912:	d901      	bls.n	8017918 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8017914:	2303      	movs	r3, #3
 8017916:	e012      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017922:	2b00      	cmp	r3, #0
 8017924:	d1ef      	bne.n	8017906 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8017926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801792a:	68da      	ldr	r2, [r3, #12]
 801792c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017930:	4b05      	ldr	r3, [pc, #20]	; (8017948 <HAL_RCC_OscConfig+0x6e4>)
 8017932:	4013      	ands	r3, r2
 8017934:	60cb      	str	r3, [r1, #12]
 8017936:	e001      	b.n	801793c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8017938:	2301      	movs	r3, #1
 801793a:	e000      	b.n	801793e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 801793c:	2300      	movs	r3, #0
}
 801793e:	4618      	mov	r0, r3
 8017940:	3734      	adds	r7, #52	; 0x34
 8017942:	46bd      	mov	sp, r7
 8017944:	bd90      	pop	{r4, r7, pc}
 8017946:	bf00      	nop
 8017948:	eefefffc 	.word	0xeefefffc

0801794c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d101      	bne.n	8017960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801795c:	2301      	movs	r3, #1
 801795e:	e12d      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017960:	4b98      	ldr	r3, [pc, #608]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	f003 0307 	and.w	r3, r3, #7
 8017968:	683a      	ldr	r2, [r7, #0]
 801796a:	429a      	cmp	r2, r3
 801796c:	d91b      	bls.n	80179a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801796e:	4b95      	ldr	r3, [pc, #596]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f023 0207 	bic.w	r2, r3, #7
 8017976:	4993      	ldr	r1, [pc, #588]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	4313      	orrs	r3, r2
 801797c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801797e:	f7fd fe4f 	bl	8015620 <HAL_GetTick>
 8017982:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017984:	e008      	b.n	8017998 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017986:	f7fd fe4b 	bl	8015620 <HAL_GetTick>
 801798a:	4602      	mov	r2, r0
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	1ad3      	subs	r3, r2, r3
 8017990:	2b02      	cmp	r3, #2
 8017992:	d901      	bls.n	8017998 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017994:	2303      	movs	r3, #3
 8017996:	e111      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017998:	4b8a      	ldr	r3, [pc, #552]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f003 0307 	and.w	r3, r3, #7
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d1ef      	bne.n	8017986 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	f003 0302 	and.w	r3, r3, #2
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d016      	beq.n	80179e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f7ff faef 	bl	8016f9a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80179bc:	f7fd fe30 	bl	8015620 <HAL_GetTick>
 80179c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80179c2:	e008      	b.n	80179d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80179c4:	f7fd fe2c 	bl	8015620 <HAL_GetTick>
 80179c8:	4602      	mov	r2, r0
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	2b02      	cmp	r3, #2
 80179d0:	d901      	bls.n	80179d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80179d2:	2303      	movs	r3, #3
 80179d4:	e0f2      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80179d6:	f7ff fbe9 	bl	80171ac <LL_RCC_IsActiveFlag_HPRE>
 80179da:	4603      	mov	r3, r0
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d0f1      	beq.n	80179c4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f003 0320 	and.w	r3, r3, #32
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d016      	beq.n	8017a1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	695b      	ldr	r3, [r3, #20]
 80179f0:	4618      	mov	r0, r3
 80179f2:	f7ff fae6 	bl	8016fc2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80179f6:	f7fd fe13 	bl	8015620 <HAL_GetTick>
 80179fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80179fc:	e008      	b.n	8017a10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80179fe:	f7fd fe0f 	bl	8015620 <HAL_GetTick>
 8017a02:	4602      	mov	r2, r0
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	1ad3      	subs	r3, r2, r3
 8017a08:	2b02      	cmp	r3, #2
 8017a0a:	d901      	bls.n	8017a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8017a0c:	2303      	movs	r3, #3
 8017a0e:	e0d5      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017a10:	f7ff fbde 	bl	80171d0 <LL_RCC_IsActiveFlag_C2HPRE>
 8017a14:	4603      	mov	r3, r0
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d0f1      	beq.n	80179fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d016      	beq.n	8017a54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	699b      	ldr	r3, [r3, #24]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f7ff fadf 	bl	8016fee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017a30:	f7fd fdf6 	bl	8015620 <HAL_GetTick>
 8017a34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017a36:	e008      	b.n	8017a4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017a38:	f7fd fdf2 	bl	8015620 <HAL_GetTick>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	1ad3      	subs	r3, r2, r3
 8017a42:	2b02      	cmp	r3, #2
 8017a44:	d901      	bls.n	8017a4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8017a46:	2303      	movs	r3, #3
 8017a48:	e0b8      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017a4a:	f7ff fbd4 	bl	80171f6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d0f1      	beq.n	8017a38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	f003 0304 	and.w	r3, r3, #4
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d016      	beq.n	8017a8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7ff fad9 	bl	801701c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017a6a:	f7fd fdd9 	bl	8015620 <HAL_GetTick>
 8017a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017a70:	e008      	b.n	8017a84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017a72:	f7fd fdd5 	bl	8015620 <HAL_GetTick>
 8017a76:	4602      	mov	r2, r0
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	1ad3      	subs	r3, r2, r3
 8017a7c:	2b02      	cmp	r3, #2
 8017a7e:	d901      	bls.n	8017a84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017a80:	2303      	movs	r3, #3
 8017a82:	e09b      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017a84:	f7ff fbca 	bl	801721c <LL_RCC_IsActiveFlag_PPRE1>
 8017a88:	4603      	mov	r3, r0
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d0f1      	beq.n	8017a72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	f003 0308 	and.w	r3, r3, #8
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d017      	beq.n	8017aca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	691b      	ldr	r3, [r3, #16]
 8017a9e:	00db      	lsls	r3, r3, #3
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7ff facf 	bl	8017044 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017aa6:	f7fd fdbb 	bl	8015620 <HAL_GetTick>
 8017aaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017aac:	e008      	b.n	8017ac0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017aae:	f7fd fdb7 	bl	8015620 <HAL_GetTick>
 8017ab2:	4602      	mov	r2, r0
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	1ad3      	subs	r3, r2, r3
 8017ab8:	2b02      	cmp	r3, #2
 8017aba:	d901      	bls.n	8017ac0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017abc:	2303      	movs	r3, #3
 8017abe:	e07d      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017ac0:	f7ff fbbe 	bl	8017240 <LL_RCC_IsActiveFlag_PPRE2>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d0f1      	beq.n	8017aae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	f003 0301 	and.w	r3, r3, #1
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d043      	beq.n	8017b5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	2b02      	cmp	r3, #2
 8017adc:	d106      	bne.n	8017aec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8017ade:	f7ff f86f 	bl	8016bc0 <LL_RCC_HSE_IsReady>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d11e      	bne.n	8017b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	e067      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	2b03      	cmp	r3, #3
 8017af2:	d106      	bne.n	8017b02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017af4:	f7ff fb17 	bl	8017126 <LL_RCC_PLL_IsReady>
 8017af8:	4603      	mov	r3, r0
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d113      	bne.n	8017b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017afe:	2301      	movs	r3, #1
 8017b00:	e05c      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	685b      	ldr	r3, [r3, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d106      	bne.n	8017b18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8017b0a:	f7ff f9d7 	bl	8016ebc <LL_RCC_MSI_IsReady>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d108      	bne.n	8017b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017b14:	2301      	movs	r3, #1
 8017b16:	e051      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8017b18:	f7ff f882 	bl	8016c20 <LL_RCC_HSI_IsReady>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d101      	bne.n	8017b26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017b22:	2301      	movs	r3, #1
 8017b24:	e04a      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f7ff fa15 	bl	8016f5a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017b30:	f7fd fd76 	bl	8015620 <HAL_GetTick>
 8017b34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b36:	e00a      	b.n	8017b4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017b38:	f7fd fd72 	bl	8015620 <HAL_GetTick>
 8017b3c:	4602      	mov	r2, r0
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	1ad3      	subs	r3, r2, r3
 8017b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b46:	4293      	cmp	r3, r2
 8017b48:	d901      	bls.n	8017b4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8017b4a:	2303      	movs	r3, #3
 8017b4c:	e036      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017b4e:	f7ff fa18 	bl	8016f82 <LL_RCC_GetSysClkSource>
 8017b52:	4602      	mov	r2, r0
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	685b      	ldr	r3, [r3, #4]
 8017b58:	009b      	lsls	r3, r3, #2
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d1ec      	bne.n	8017b38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017b5e:	4b19      	ldr	r3, [pc, #100]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	f003 0307 	and.w	r3, r3, #7
 8017b66:	683a      	ldr	r2, [r7, #0]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d21b      	bcs.n	8017ba4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b6c:	4b15      	ldr	r3, [pc, #84]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f023 0207 	bic.w	r2, r3, #7
 8017b74:	4913      	ldr	r1, [pc, #76]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017b76:	683b      	ldr	r3, [r7, #0]
 8017b78:	4313      	orrs	r3, r2
 8017b7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017b7c:	f7fd fd50 	bl	8015620 <HAL_GetTick>
 8017b80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b82:	e008      	b.n	8017b96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017b84:	f7fd fd4c 	bl	8015620 <HAL_GetTick>
 8017b88:	4602      	mov	r2, r0
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	2b02      	cmp	r3, #2
 8017b90:	d901      	bls.n	8017b96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017b92:	2303      	movs	r3, #3
 8017b94:	e012      	b.n	8017bbc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b96:	4b0b      	ldr	r3, [pc, #44]	; (8017bc4 <HAL_RCC_ClockConfig+0x278>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f003 0307 	and.w	r3, r3, #7
 8017b9e:	683a      	ldr	r2, [r7, #0]
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d1ef      	bne.n	8017b84 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017ba4:	f000 f87e 	bl	8017ca4 <HAL_RCC_GetHCLKFreq>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	4a07      	ldr	r2, [pc, #28]	; (8017bc8 <HAL_RCC_ClockConfig+0x27c>)
 8017bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8017bae:	f7fd fd43 	bl	8015638 <HAL_GetTickPrio>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	f7e9 f8a3 	bl	8000d00 <HAL_InitTick>
 8017bba:	4603      	mov	r3, r0
}
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	3710      	adds	r7, #16
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}
 8017bc4:	58004000 	.word	0x58004000
 8017bc8:	20000008 	.word	0x20000008

08017bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017bcc:	b590      	push	{r4, r7, lr}
 8017bce:	b085      	sub	sp, #20
 8017bd0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017bd2:	f7ff f9d6 	bl	8016f82 <LL_RCC_GetSysClkSource>
 8017bd6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d10a      	bne.n	8017bf4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017bde:	f7ff f992 	bl	8016f06 <LL_RCC_MSI_GetRange>
 8017be2:	4603      	mov	r3, r0
 8017be4:	091b      	lsrs	r3, r3, #4
 8017be6:	f003 030f 	and.w	r3, r3, #15
 8017bea:	4a2b      	ldr	r2, [pc, #172]	; (8017c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bf0:	60fb      	str	r3, [r7, #12]
 8017bf2:	e04b      	b.n	8017c8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	2b04      	cmp	r3, #4
 8017bf8:	d102      	bne.n	8017c00 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017bfa:	4b28      	ldr	r3, [pc, #160]	; (8017c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017bfc:	60fb      	str	r3, [r7, #12]
 8017bfe:	e045      	b.n	8017c8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2b08      	cmp	r3, #8
 8017c04:	d10a      	bne.n	8017c1c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017c06:	f7fe ffab 	bl	8016b60 <LL_RCC_HSE_IsEnabledDiv2>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	2b01      	cmp	r3, #1
 8017c0e:	d102      	bne.n	8017c16 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017c10:	4b22      	ldr	r3, [pc, #136]	; (8017c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017c12:	60fb      	str	r3, [r7, #12]
 8017c14:	e03a      	b.n	8017c8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8017c16:	4b22      	ldr	r3, [pc, #136]	; (8017ca0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017c18:	60fb      	str	r3, [r7, #12]
 8017c1a:	e037      	b.n	8017c8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017c1c:	f7ff faba 	bl	8017194 <LL_RCC_PLL_GetMainSource>
 8017c20:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	d003      	beq.n	8017c30 <HAL_RCC_GetSysClockFreq+0x64>
 8017c28:	683b      	ldr	r3, [r7, #0]
 8017c2a:	2b03      	cmp	r3, #3
 8017c2c:	d003      	beq.n	8017c36 <HAL_RCC_GetSysClockFreq+0x6a>
 8017c2e:	e00d      	b.n	8017c4c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017c30:	4b1a      	ldr	r3, [pc, #104]	; (8017c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017c32:	60bb      	str	r3, [r7, #8]
        break;
 8017c34:	e015      	b.n	8017c62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017c36:	f7fe ff93 	bl	8016b60 <LL_RCC_HSE_IsEnabledDiv2>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d102      	bne.n	8017c46 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017c40:	4b16      	ldr	r3, [pc, #88]	; (8017c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017c42:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017c44:	e00d      	b.n	8017c62 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017c46:	4b16      	ldr	r3, [pc, #88]	; (8017ca0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017c48:	60bb      	str	r3, [r7, #8]
        break;
 8017c4a:	e00a      	b.n	8017c62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017c4c:	f7ff f95b 	bl	8016f06 <LL_RCC_MSI_GetRange>
 8017c50:	4603      	mov	r3, r0
 8017c52:	091b      	lsrs	r3, r3, #4
 8017c54:	f003 030f 	and.w	r3, r3, #15
 8017c58:	4a0f      	ldr	r2, [pc, #60]	; (8017c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c5e:	60bb      	str	r3, [r7, #8]
        break;
 8017c60:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017c62:	f7ff fa72 	bl	801714a <LL_RCC_PLL_GetN>
 8017c66:	4602      	mov	r2, r0
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	fb03 f402 	mul.w	r4, r3, r2
 8017c6e:	f7ff fa85 	bl	801717c <LL_RCC_PLL_GetDivider>
 8017c72:	4603      	mov	r3, r0
 8017c74:	091b      	lsrs	r3, r3, #4
 8017c76:	3301      	adds	r3, #1
 8017c78:	fbb4 f4f3 	udiv	r4, r4, r3
 8017c7c:	f7ff fa72 	bl	8017164 <LL_RCC_PLL_GetR>
 8017c80:	4603      	mov	r3, r0
 8017c82:	0f5b      	lsrs	r3, r3, #29
 8017c84:	3301      	adds	r3, #1
 8017c86:	fbb4 f3f3 	udiv	r3, r4, r3
 8017c8a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	3714      	adds	r7, #20
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd90      	pop	{r4, r7, pc}
 8017c96:	bf00      	nop
 8017c98:	0801ac60 	.word	0x0801ac60
 8017c9c:	00f42400 	.word	0x00f42400
 8017ca0:	01e84800 	.word	0x01e84800

08017ca4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017ca4:	b598      	push	{r3, r4, r7, lr}
 8017ca6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017ca8:	f7ff ff90 	bl	8017bcc <HAL_RCC_GetSysClockFreq>
 8017cac:	4604      	mov	r4, r0
 8017cae:	f7ff f9dd 	bl	801706c <LL_RCC_GetAHBPrescaler>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	091b      	lsrs	r3, r3, #4
 8017cb6:	f003 030f 	and.w	r3, r3, #15
 8017cba:	4a03      	ldr	r2, [pc, #12]	; (8017cc8 <HAL_RCC_GetHCLKFreq+0x24>)
 8017cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cc0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	bd98      	pop	{r3, r4, r7, pc}
 8017cc8:	0801ac00 	.word	0x0801ac00

08017ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017ccc:	b598      	push	{r3, r4, r7, lr}
 8017cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017cd0:	f7ff ffe8 	bl	8017ca4 <HAL_RCC_GetHCLKFreq>
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	f7ff f9f0 	bl	80170ba <LL_RCC_GetAPB1Prescaler>
 8017cda:	4603      	mov	r3, r0
 8017cdc:	0a1b      	lsrs	r3, r3, #8
 8017cde:	f003 0307 	and.w	r3, r3, #7
 8017ce2:	4a04      	ldr	r2, [pc, #16]	; (8017cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ce8:	f003 031f 	and.w	r3, r3, #31
 8017cec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	bd98      	pop	{r3, r4, r7, pc}
 8017cf4:	0801ac40 	.word	0x0801ac40

08017cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017cf8:	b598      	push	{r3, r4, r7, lr}
 8017cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017cfc:	f7ff ffd2 	bl	8017ca4 <HAL_RCC_GetHCLKFreq>
 8017d00:	4604      	mov	r4, r0
 8017d02:	f7ff f9e6 	bl	80170d2 <LL_RCC_GetAPB2Prescaler>
 8017d06:	4603      	mov	r3, r0
 8017d08:	0adb      	lsrs	r3, r3, #11
 8017d0a:	f003 0307 	and.w	r3, r3, #7
 8017d0e:	4a04      	ldr	r2, [pc, #16]	; (8017d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d14:	f003 031f 	and.w	r3, r3, #31
 8017d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	bd98      	pop	{r3, r4, r7, pc}
 8017d20:	0801ac40 	.word	0x0801ac40

08017d24 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	226f      	movs	r2, #111	; 0x6f
 8017d32:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017d34:	f7ff f925 	bl	8016f82 <LL_RCC_GetSysClkSource>
 8017d38:	4602      	mov	r2, r0
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017d3e:	f7ff f995 	bl	801706c <LL_RCC_GetAHBPrescaler>
 8017d42:	4602      	mov	r2, r0
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017d48:	f7ff f9b7 	bl	80170ba <LL_RCC_GetAPB1Prescaler>
 8017d4c:	4602      	mov	r2, r0
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017d52:	f7ff f9be 	bl	80170d2 <LL_RCC_GetAPB2Prescaler>
 8017d56:	4602      	mov	r2, r0
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017d5c:	f7ff f992 	bl	8017084 <LL_C2_RCC_GetAHBPrescaler>
 8017d60:	4602      	mov	r2, r0
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017d66:	f7ff f99a 	bl	801709e <LL_RCC_GetAHB4Prescaler>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017d70:	4b04      	ldr	r3, [pc, #16]	; (8017d84 <HAL_RCC_GetClockConfig+0x60>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f003 0207 	and.w	r2, r3, #7
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	601a      	str	r2, [r3, #0]
}
 8017d7c:	bf00      	nop
 8017d7e:	3708      	adds	r7, #8
 8017d80:	46bd      	mov	sp, r7
 8017d82:	bd80      	pop	{r7, pc}
 8017d84:	58004000 	.word	0x58004000

08017d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017d88:	b590      	push	{r4, r7, lr}
 8017d8a:	b085      	sub	sp, #20
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2bb0      	cmp	r3, #176	; 0xb0
 8017d94:	d903      	bls.n	8017d9e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017d96:	4b15      	ldr	r3, [pc, #84]	; (8017dec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d9a:	60fb      	str	r3, [r7, #12]
 8017d9c:	e007      	b.n	8017dae <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	091b      	lsrs	r3, r3, #4
 8017da2:	f003 030f 	and.w	r3, r3, #15
 8017da6:	4a11      	ldr	r2, [pc, #68]	; (8017dec <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dac:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017dae:	f7ff f976 	bl	801709e <LL_RCC_GetAHB4Prescaler>
 8017db2:	4603      	mov	r3, r0
 8017db4:	091b      	lsrs	r3, r3, #4
 8017db6:	f003 030f 	and.w	r3, r3, #15
 8017dba:	4a0d      	ldr	r2, [pc, #52]	; (8017df0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dc0:	68fa      	ldr	r2, [r7, #12]
 8017dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8017dc6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	4a0a      	ldr	r2, [pc, #40]	; (8017df4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8017dd0:	0c9c      	lsrs	r4, r3, #18
 8017dd2:	f7fe feb7 	bl	8016b44 <HAL_PWREx_GetVoltageRange>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	4619      	mov	r1, r3
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 f80c 	bl	8017df8 <RCC_SetFlashLatency>
 8017de0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3714      	adds	r7, #20
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd90      	pop	{r4, r7, pc}
 8017dea:	bf00      	nop
 8017dec:	0801ac60 	.word	0x0801ac60
 8017df0:	0801ac00 	.word	0x0801ac00
 8017df4:	431bde83 	.word	0x431bde83

08017df8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017df8:	b590      	push	{r4, r7, lr}
 8017dfa:	b093      	sub	sp, #76	; 0x4c
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
 8017e00:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017e02:	4b37      	ldr	r3, [pc, #220]	; (8017ee0 <RCC_SetFlashLatency+0xe8>)
 8017e04:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017e0e:	4a35      	ldr	r2, [pc, #212]	; (8017ee4 <RCC_SetFlashLatency+0xec>)
 8017e10:	f107 031c 	add.w	r3, r7, #28
 8017e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017e1a:	4b33      	ldr	r3, [pc, #204]	; (8017ee8 <RCC_SetFlashLatency+0xf0>)
 8017e1c:	f107 040c 	add.w	r4, r7, #12
 8017e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017e26:	2300      	movs	r3, #0
 8017e28:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e30:	d11a      	bne.n	8017e68 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017e32:	2300      	movs	r3, #0
 8017e34:	643b      	str	r3, [r7, #64]	; 0x40
 8017e36:	e013      	b.n	8017e60 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	3348      	adds	r3, #72	; 0x48
 8017e3e:	443b      	add	r3, r7
 8017e40:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017e44:	687a      	ldr	r2, [r7, #4]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d807      	bhi.n	8017e5a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	3348      	adds	r3, #72	; 0x48
 8017e50:	443b      	add	r3, r7
 8017e52:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017e56:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017e58:	e020      	b.n	8017e9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8017e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e62:	2b03      	cmp	r3, #3
 8017e64:	d9e8      	bls.n	8017e38 <RCC_SetFlashLatency+0x40>
 8017e66:	e019      	b.n	8017e9c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e6c:	e013      	b.n	8017e96 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e70:	009b      	lsls	r3, r3, #2
 8017e72:	3348      	adds	r3, #72	; 0x48
 8017e74:	443b      	add	r3, r7
 8017e76:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017e7a:	687a      	ldr	r2, [r7, #4]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d807      	bhi.n	8017e90 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e82:	009b      	lsls	r3, r3, #2
 8017e84:	3348      	adds	r3, #72	; 0x48
 8017e86:	443b      	add	r3, r7
 8017e88:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017e8c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017e8e:	e005      	b.n	8017e9c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e92:	3301      	adds	r3, #1
 8017e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e98:	2b02      	cmp	r3, #2
 8017e9a:	d9e8      	bls.n	8017e6e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017e9c:	4b13      	ldr	r3, [pc, #76]	; (8017eec <RCC_SetFlashLatency+0xf4>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f023 0207 	bic.w	r2, r3, #7
 8017ea4:	4911      	ldr	r1, [pc, #68]	; (8017eec <RCC_SetFlashLatency+0xf4>)
 8017ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ea8:	4313      	orrs	r3, r2
 8017eaa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017eac:	f7fd fbb8 	bl	8015620 <HAL_GetTick>
 8017eb0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017eb2:	e008      	b.n	8017ec6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017eb4:	f7fd fbb4 	bl	8015620 <HAL_GetTick>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ebc:	1ad3      	subs	r3, r2, r3
 8017ebe:	2b02      	cmp	r3, #2
 8017ec0:	d901      	bls.n	8017ec6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017ec2:	2303      	movs	r3, #3
 8017ec4:	e007      	b.n	8017ed6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017ec6:	4b09      	ldr	r3, [pc, #36]	; (8017eec <RCC_SetFlashLatency+0xf4>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f003 0307 	and.w	r3, r3, #7
 8017ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d1ef      	bne.n	8017eb4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017ed4:	2300      	movs	r3, #0
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	374c      	adds	r7, #76	; 0x4c
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd90      	pop	{r4, r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	0801abd4 	.word	0x0801abd4
 8017ee4:	0801abe4 	.word	0x0801abe4
 8017ee8:	0801abf0 	.word	0x0801abf0
 8017eec:	58004000 	.word	0x58004000

08017ef0 <LL_RCC_LSE_IsEnabled>:
{
 8017ef0:	b480      	push	{r7}
 8017ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017efc:	f003 0301 	and.w	r3, r3, #1
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d101      	bne.n	8017f08 <LL_RCC_LSE_IsEnabled+0x18>
 8017f04:	2301      	movs	r3, #1
 8017f06:	e000      	b.n	8017f0a <LL_RCC_LSE_IsEnabled+0x1a>
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f12:	4770      	bx	lr

08017f14 <LL_RCC_LSE_IsReady>:
{
 8017f14:	b480      	push	{r7}
 8017f16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f20:	f003 0302 	and.w	r3, r3, #2
 8017f24:	2b02      	cmp	r3, #2
 8017f26:	d101      	bne.n	8017f2c <LL_RCC_LSE_IsReady+0x18>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	e000      	b.n	8017f2e <LL_RCC_LSE_IsReady+0x1a>
 8017f2c:	2300      	movs	r3, #0
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	46bd      	mov	sp, r7
 8017f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f36:	4770      	bx	lr

08017f38 <LL_RCC_MSI_EnablePLLMode>:
{
 8017f38:	b480      	push	{r7}
 8017f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f46:	f043 0304 	orr.w	r3, r3, #4
 8017f4a:	6013      	str	r3, [r2, #0]
}
 8017f4c:	bf00      	nop
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f54:	4770      	bx	lr

08017f56 <LL_RCC_SetRFWKPClockSource>:
{
 8017f56:	b480      	push	{r7}
 8017f58:	b083      	sub	sp, #12
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017f66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	4313      	orrs	r3, r2
 8017f72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017f76:	bf00      	nop
 8017f78:	370c      	adds	r7, #12
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f80:	4770      	bx	lr

08017f82 <LL_RCC_SetSMPSClockSource>:
{
 8017f82:	b480      	push	{r7}
 8017f84:	b083      	sub	sp, #12
 8017f86:	af00      	add	r7, sp, #0
 8017f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f90:	f023 0203 	bic.w	r2, r3, #3
 8017f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	4313      	orrs	r3, r2
 8017f9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017f9e:	bf00      	nop
 8017fa0:	370c      	adds	r7, #12
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa8:	4770      	bx	lr

08017faa <LL_RCC_SetSMPSPrescaler>:
{
 8017faa:	b480      	push	{r7}
 8017fac:	b083      	sub	sp, #12
 8017fae:	af00      	add	r7, sp, #0
 8017fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	4313      	orrs	r3, r2
 8017fc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017fc6:	bf00      	nop
 8017fc8:	370c      	adds	r7, #12
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd0:	4770      	bx	lr

08017fd2 <LL_RCC_SetUSARTClockSource>:
{
 8017fd2:	b480      	push	{r7}
 8017fd4:	b083      	sub	sp, #12
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fe2:	f023 0203 	bic.w	r2, r3, #3
 8017fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	4313      	orrs	r3, r2
 8017fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017ff2:	bf00      	nop
 8017ff4:	370c      	adds	r7, #12
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffc:	4770      	bx	lr

08017ffe <LL_RCC_SetLPUARTClockSource>:
{
 8017ffe:	b480      	push	{r7}
 8018000:	b083      	sub	sp, #12
 8018002:	af00      	add	r7, sp, #0
 8018004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8018006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801800e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8018012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	4313      	orrs	r3, r2
 801801a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801801e:	bf00      	nop
 8018020:	370c      	adds	r7, #12
 8018022:	46bd      	mov	sp, r7
 8018024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018028:	4770      	bx	lr

0801802a <LL_RCC_SetI2CClockSource>:
{
 801802a:	b480      	push	{r7}
 801802c:	b083      	sub	sp, #12
 801802e:	af00      	add	r7, sp, #0
 8018030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8018032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018036:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	091b      	lsrs	r3, r3, #4
 801803e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8018042:	43db      	mvns	r3, r3
 8018044:	401a      	ands	r2, r3
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	011b      	lsls	r3, r3, #4
 801804a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801804e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018052:	4313      	orrs	r3, r2
 8018054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018058:	bf00      	nop
 801805a:	370c      	adds	r7, #12
 801805c:	46bd      	mov	sp, r7
 801805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018062:	4770      	bx	lr

08018064 <LL_RCC_SetLPTIMClockSource>:
{
 8018064:	b480      	push	{r7}
 8018066:	b083      	sub	sp, #12
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801806c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018070:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	0c1b      	lsrs	r3, r3, #16
 8018078:	041b      	lsls	r3, r3, #16
 801807a:	43db      	mvns	r3, r3
 801807c:	401a      	ands	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	041b      	lsls	r3, r3, #16
 8018082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018086:	4313      	orrs	r3, r2
 8018088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801808c:	bf00      	nop
 801808e:	370c      	adds	r7, #12
 8018090:	46bd      	mov	sp, r7
 8018092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018096:	4770      	bx	lr

08018098 <LL_RCC_SetSAIClockSource>:
{
 8018098:	b480      	push	{r7}
 801809a:	b083      	sub	sp, #12
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80180a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80180ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	4313      	orrs	r3, r2
 80180b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80180b8:	bf00      	nop
 80180ba:	370c      	adds	r7, #12
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr

080180c4 <LL_RCC_SetRNGClockSource>:
{
 80180c4:	b480      	push	{r7}
 80180c6:	b083      	sub	sp, #12
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80180cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180d4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80180d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	4313      	orrs	r3, r2
 80180e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80180e4:	bf00      	nop
 80180e6:	370c      	adds	r7, #12
 80180e8:	46bd      	mov	sp, r7
 80180ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ee:	4770      	bx	lr

080180f0 <LL_RCC_SetCLK48ClockSource>:
{
 80180f0:	b480      	push	{r7}
 80180f2:	b083      	sub	sp, #12
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80180f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018104:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	4313      	orrs	r3, r2
 801810c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018110:	bf00      	nop
 8018112:	370c      	adds	r7, #12
 8018114:	46bd      	mov	sp, r7
 8018116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801811a:	4770      	bx	lr

0801811c <LL_RCC_SetUSBClockSource>:
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f7ff ffe3 	bl	80180f0 <LL_RCC_SetCLK48ClockSource>
}
 801812a:	bf00      	nop
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}

08018132 <LL_RCC_SetADCClockSource>:
{
 8018132:	b480      	push	{r7}
 8018134:	b083      	sub	sp, #12
 8018136:	af00      	add	r7, sp, #0
 8018138:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801813a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8018146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	4313      	orrs	r3, r2
 801814e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018152:	bf00      	nop
 8018154:	370c      	adds	r7, #12
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr

0801815e <LL_RCC_SetRTCClockSource>:
{
 801815e:	b480      	push	{r7}
 8018160:	b083      	sub	sp, #12
 8018162:	af00      	add	r7, sp, #0
 8018164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8018166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801816e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	4313      	orrs	r3, r2
 801817a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801817e:	bf00      	nop
 8018180:	370c      	adds	r7, #12
 8018182:	46bd      	mov	sp, r7
 8018184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018188:	4770      	bx	lr

0801818a <LL_RCC_GetRTCClockSource>:
{
 801818a:	b480      	push	{r7}
 801818c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801818e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018196:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801819a:	4618      	mov	r0, r3
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr

080181a4 <LL_RCC_ForceBackupDomainReset>:
{
 80181a4:	b480      	push	{r7}
 80181a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80181a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80181b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80181bc:	bf00      	nop
 80181be:	46bd      	mov	sp, r7
 80181c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c4:	4770      	bx	lr

080181c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80181c6:	b480      	push	{r7}
 80181c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80181ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80181da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80181de:	bf00      	nop
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <LL_RCC_PLLSAI1_Enable>:
{
 80181e8:	b480      	push	{r7}
 80181ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80181ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80181f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80181fa:	6013      	str	r3, [r2, #0]
}
 80181fc:	bf00      	nop
 80181fe:	46bd      	mov	sp, r7
 8018200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018204:	4770      	bx	lr

08018206 <LL_RCC_PLLSAI1_Disable>:
{
 8018206:	b480      	push	{r7}
 8018208:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801820a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018218:	6013      	str	r3, [r2, #0]
}
 801821a:	bf00      	nop
 801821c:	46bd      	mov	sp, r7
 801821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018222:	4770      	bx	lr

08018224 <LL_RCC_PLLSAI1_IsReady>:
{
 8018224:	b480      	push	{r7}
 8018226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8018228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018236:	d101      	bne.n	801823c <LL_RCC_PLLSAI1_IsReady+0x18>
 8018238:	2301      	movs	r3, #1
 801823a:	e000      	b.n	801823e <LL_RCC_PLLSAI1_IsReady+0x1a>
 801823c:	2300      	movs	r3, #0
}
 801823e:	4618      	mov	r0, r3
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr

08018248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b088      	sub	sp, #32
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8018250:	2300      	movs	r3, #0
 8018252:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8018254:	2300      	movs	r3, #0
 8018256:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018260:	2b00      	cmp	r3, #0
 8018262:	d034      	beq.n	80182ce <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801826c:	d021      	beq.n	80182b2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801826e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8018272:	d81b      	bhi.n	80182ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018278:	d01d      	beq.n	80182b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801827a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801827e:	d815      	bhi.n	80182ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018280:	2b00      	cmp	r3, #0
 8018282:	d00b      	beq.n	801829c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8018284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018288:	d110      	bne.n	80182ac <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801828a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018298:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801829a:	e00d      	b.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	3304      	adds	r3, #4
 80182a0:	4618      	mov	r0, r3
 80182a2:	f000 f94d 	bl	8018540 <RCCEx_PLLSAI1_ConfigNP>
 80182a6:	4603      	mov	r3, r0
 80182a8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80182aa:	e005      	b.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80182ac:	2301      	movs	r3, #1
 80182ae:	77fb      	strb	r3, [r7, #31]
        break;
 80182b0:	e002      	b.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80182b2:	bf00      	nop
 80182b4:	e000      	b.n	80182b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80182b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80182b8:	7ffb      	ldrb	r3, [r7, #31]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d105      	bne.n	80182ca <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182c2:	4618      	mov	r0, r3
 80182c4:	f7ff fee8 	bl	8018098 <LL_RCC_SetSAIClockSource>
 80182c8:	e001      	b.n	80182ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80182ca:	7ffb      	ldrb	r3, [r7, #31]
 80182cc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d046      	beq.n	8018368 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80182da:	f7ff ff56 	bl	801818a <LL_RCC_GetRTCClockSource>
 80182de:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182e4:	69ba      	ldr	r2, [r7, #24]
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d03c      	beq.n	8018364 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80182ea:	f7fe fc1b 	bl	8016b24 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80182ee:	69bb      	ldr	r3, [r7, #24]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d105      	bne.n	8018300 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7ff ff30 	bl	801815e <LL_RCC_SetRTCClockSource>
 80182fe:	e02e      	b.n	801835e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8018300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018308:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801830a:	f7ff ff4b 	bl	80181a4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 801830e:	f7ff ff5a 	bl	80181c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8018312:	697b      	ldr	r3, [r7, #20]
 8018314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801831c:	4313      	orrs	r3, r2
 801831e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8018320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801832a:	f7ff fde1 	bl	8017ef0 <LL_RCC_LSE_IsEnabled>
 801832e:	4603      	mov	r3, r0
 8018330:	2b01      	cmp	r3, #1
 8018332:	d114      	bne.n	801835e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018334:	f7fd f974 	bl	8015620 <HAL_GetTick>
 8018338:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801833a:	e00b      	b.n	8018354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801833c:	f7fd f970 	bl	8015620 <HAL_GetTick>
 8018340:	4602      	mov	r2, r0
 8018342:	693b      	ldr	r3, [r7, #16]
 8018344:	1ad3      	subs	r3, r2, r3
 8018346:	f241 3288 	movw	r2, #5000	; 0x1388
 801834a:	4293      	cmp	r3, r2
 801834c:	d902      	bls.n	8018354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801834e:	2303      	movs	r3, #3
 8018350:	77fb      	strb	r3, [r7, #31]
              break;
 8018352:	e004      	b.n	801835e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8018354:	f7ff fdde 	bl	8017f14 <LL_RCC_LSE_IsReady>
 8018358:	4603      	mov	r3, r0
 801835a:	2b01      	cmp	r3, #1
 801835c:	d1ee      	bne.n	801833c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801835e:	7ffb      	ldrb	r3, [r7, #31]
 8018360:	77bb      	strb	r3, [r7, #30]
 8018362:	e001      	b.n	8018368 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018364:	7ffb      	ldrb	r3, [r7, #31]
 8018366:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	f003 0301 	and.w	r3, r3, #1
 8018370:	2b00      	cmp	r3, #0
 8018372:	d004      	beq.n	801837e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	699b      	ldr	r3, [r3, #24]
 8018378:	4618      	mov	r0, r3
 801837a:	f7ff fe2a 	bl	8017fd2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	f003 0302 	and.w	r3, r3, #2
 8018386:	2b00      	cmp	r3, #0
 8018388:	d004      	beq.n	8018394 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	69db      	ldr	r3, [r3, #28]
 801838e:	4618      	mov	r0, r3
 8018390:	f7ff fe35 	bl	8017ffe <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	f003 0310 	and.w	r3, r3, #16
 801839c:	2b00      	cmp	r3, #0
 801839e:	d004      	beq.n	80183aa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183a4:	4618      	mov	r0, r3
 80183a6:	f7ff fe5d 	bl	8018064 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	f003 0320 	and.w	r3, r3, #32
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d004      	beq.n	80183c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7ff fe52 	bl	8018064 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	f003 0304 	and.w	r3, r3, #4
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d004      	beq.n	80183d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6a1b      	ldr	r3, [r3, #32]
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7ff fe2a 	bl	801802a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	f003 0308 	and.w	r3, r3, #8
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d004      	beq.n	80183ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183e6:	4618      	mov	r0, r3
 80183e8:	f7ff fe1f 	bl	801802a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d022      	beq.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7ff fe8d 	bl	801811c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801840a:	d107      	bne.n	801841c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 801840c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801841a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018424:	d10b      	bne.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	3304      	adds	r3, #4
 801842a:	4618      	mov	r0, r3
 801842c:	f000 f8e3 	bl	80185f6 <RCCEx_PLLSAI1_ConfigNQ>
 8018430:	4603      	mov	r3, r0
 8018432:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018434:	7ffb      	ldrb	r3, [r7, #31]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d001      	beq.n	801843e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801843a:	7ffb      	ldrb	r3, [r7, #31]
 801843c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018446:	2b00      	cmp	r3, #0
 8018448:	d02b      	beq.n	80184a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801844e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018452:	d008      	beq.n	8018466 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801845c:	d003      	beq.n	8018466 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018462:	2b00      	cmp	r3, #0
 8018464:	d105      	bne.n	8018472 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801846a:	4618      	mov	r0, r3
 801846c:	f7ff fe2a 	bl	80180c4 <LL_RCC_SetRNGClockSource>
 8018470:	e00a      	b.n	8018488 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801847a:	60fb      	str	r3, [r7, #12]
 801847c:	2000      	movs	r0, #0
 801847e:	f7ff fe21 	bl	80180c4 <LL_RCC_SetRNGClockSource>
 8018482:	68f8      	ldr	r0, [r7, #12]
 8018484:	f7ff fe34 	bl	80180f0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801848c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018490:	d107      	bne.n	80184a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8018492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018496:	68db      	ldr	r3, [r3, #12]
 8018498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801849c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80184a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d022      	beq.n	80184f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7ff fe3d 	bl	8018132 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80184c0:	d107      	bne.n	80184d2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80184c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184c6:	68db      	ldr	r3, [r3, #12]
 80184c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80184cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80184d0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80184da:	d10b      	bne.n	80184f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	3304      	adds	r3, #4
 80184e0:	4618      	mov	r0, r3
 80184e2:	f000 f8e3 	bl	80186ac <RCCEx_PLLSAI1_ConfigNR>
 80184e6:	4603      	mov	r3, r0
 80184e8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80184ea:	7ffb      	ldrb	r3, [r7, #31]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80184f0:	7ffb      	ldrb	r3, [r7, #31]
 80184f2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d004      	beq.n	801850a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018504:	4618      	mov	r0, r3
 8018506:	f7ff fd26 	bl	8017f56 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018512:	2b00      	cmp	r3, #0
 8018514:	d009      	beq.n	801852a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801851a:	4618      	mov	r0, r3
 801851c:	f7ff fd45 	bl	8017faa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018524:	4618      	mov	r0, r3
 8018526:	f7ff fd2c 	bl	8017f82 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801852a:	7fbb      	ldrb	r3, [r7, #30]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3720      	adds	r7, #32
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}

08018534 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018538:	f7ff fcfe 	bl	8017f38 <LL_RCC_MSI_EnablePLLMode>
}
 801853c:	bf00      	nop
 801853e:	bd80      	pop	{r7, pc}

08018540 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b084      	sub	sp, #16
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018548:	2300      	movs	r3, #0
 801854a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801854c:	f7ff fe5b 	bl	8018206 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018550:	f7fd f866 	bl	8015620 <HAL_GetTick>
 8018554:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018556:	e009      	b.n	801856c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018558:	f7fd f862 	bl	8015620 <HAL_GetTick>
 801855c:	4602      	mov	r2, r0
 801855e:	68bb      	ldr	r3, [r7, #8]
 8018560:	1ad3      	subs	r3, r2, r3
 8018562:	2b02      	cmp	r3, #2
 8018564:	d902      	bls.n	801856c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8018566:	2303      	movs	r3, #3
 8018568:	73fb      	strb	r3, [r7, #15]
      break;
 801856a:	e004      	b.n	8018576 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801856c:	f7ff fe5a 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 8018570:	4603      	mov	r3, r0
 8018572:	2b00      	cmp	r3, #0
 8018574:	d1f0      	bne.n	8018558 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8018576:	7bfb      	ldrb	r3, [r7, #15]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d137      	bne.n	80185ec <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018580:	691b      	ldr	r3, [r3, #16]
 8018582:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	021b      	lsls	r3, r3, #8
 801858c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018590:	4313      	orrs	r3, r2
 8018592:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8018594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018598:	691b      	ldr	r3, [r3, #16]
 801859a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	685b      	ldr	r3, [r3, #4]
 80185a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80185a6:	4313      	orrs	r3, r2
 80185a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80185aa:	f7ff fe1d 	bl	80181e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80185ae:	f7fd f837 	bl	8015620 <HAL_GetTick>
 80185b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80185b4:	e009      	b.n	80185ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80185b6:	f7fd f833 	bl	8015620 <HAL_GetTick>
 80185ba:	4602      	mov	r2, r0
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	1ad3      	subs	r3, r2, r3
 80185c0:	2b02      	cmp	r3, #2
 80185c2:	d902      	bls.n	80185ca <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80185c4:	2303      	movs	r3, #3
 80185c6:	73fb      	strb	r3, [r7, #15]
        break;
 80185c8:	e004      	b.n	80185d4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80185ca:	f7ff fe2b 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 80185ce:	4603      	mov	r3, r0
 80185d0:	2b01      	cmp	r3, #1
 80185d2:	d1f0      	bne.n	80185b6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80185d4:	7bfb      	ldrb	r3, [r7, #15]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d108      	bne.n	80185ec <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80185da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185de:	691a      	ldr	r2, [r3, #16]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	691b      	ldr	r3, [r3, #16]
 80185e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80185e8:	4313      	orrs	r3, r2
 80185ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80185ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	3710      	adds	r7, #16
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}

080185f6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80185f6:	b580      	push	{r7, lr}
 80185f8:	b084      	sub	sp, #16
 80185fa:	af00      	add	r7, sp, #0
 80185fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80185fe:	2300      	movs	r3, #0
 8018600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018602:	f7ff fe00 	bl	8018206 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018606:	f7fd f80b 	bl	8015620 <HAL_GetTick>
 801860a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801860c:	e009      	b.n	8018622 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801860e:	f7fd f807 	bl	8015620 <HAL_GetTick>
 8018612:	4602      	mov	r2, r0
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	1ad3      	subs	r3, r2, r3
 8018618:	2b02      	cmp	r3, #2
 801861a:	d902      	bls.n	8018622 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 801861c:	2303      	movs	r3, #3
 801861e:	73fb      	strb	r3, [r7, #15]
      break;
 8018620:	e004      	b.n	801862c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018622:	f7ff fdff 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 8018626:	4603      	mov	r3, r0
 8018628:	2b00      	cmp	r3, #0
 801862a:	d1f0      	bne.n	801860e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 801862c:	7bfb      	ldrb	r3, [r7, #15]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d137      	bne.n	80186a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018636:	691b      	ldr	r3, [r3, #16]
 8018638:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	021b      	lsls	r3, r3, #8
 8018642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018646:	4313      	orrs	r3, r2
 8018648:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801864a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801864e:	691b      	ldr	r3, [r3, #16]
 8018650:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	689b      	ldr	r3, [r3, #8]
 8018658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801865c:	4313      	orrs	r3, r2
 801865e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018660:	f7ff fdc2 	bl	80181e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018664:	f7fc ffdc 	bl	8015620 <HAL_GetTick>
 8018668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801866a:	e009      	b.n	8018680 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801866c:	f7fc ffd8 	bl	8015620 <HAL_GetTick>
 8018670:	4602      	mov	r2, r0
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	1ad3      	subs	r3, r2, r3
 8018676:	2b02      	cmp	r3, #2
 8018678:	d902      	bls.n	8018680 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801867a:	2303      	movs	r3, #3
 801867c:	73fb      	strb	r3, [r7, #15]
        break;
 801867e:	e004      	b.n	801868a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018680:	f7ff fdd0 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 8018684:	4603      	mov	r3, r0
 8018686:	2b01      	cmp	r3, #1
 8018688:	d1f0      	bne.n	801866c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801868a:	7bfb      	ldrb	r3, [r7, #15]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d108      	bne.n	80186a2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018694:	691a      	ldr	r2, [r3, #16]
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	691b      	ldr	r3, [r3, #16]
 801869a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801869e:	4313      	orrs	r3, r2
 80186a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80186a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	3710      	adds	r7, #16
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}

080186ac <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80186b4:	2300      	movs	r3, #0
 80186b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80186b8:	f7ff fda5 	bl	8018206 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80186bc:	f7fc ffb0 	bl	8015620 <HAL_GetTick>
 80186c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80186c2:	e009      	b.n	80186d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80186c4:	f7fc ffac 	bl	8015620 <HAL_GetTick>
 80186c8:	4602      	mov	r2, r0
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	1ad3      	subs	r3, r2, r3
 80186ce:	2b02      	cmp	r3, #2
 80186d0:	d902      	bls.n	80186d8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80186d2:	2303      	movs	r3, #3
 80186d4:	73fb      	strb	r3, [r7, #15]
      break;
 80186d6:	e004      	b.n	80186e2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80186d8:	f7ff fda4 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 80186dc:	4603      	mov	r3, r0
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d1f0      	bne.n	80186c4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80186e2:	7bfb      	ldrb	r3, [r7, #15]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d137      	bne.n	8018758 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80186e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80186ec:	691b      	ldr	r3, [r3, #16]
 80186ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	021b      	lsls	r3, r3, #8
 80186f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80186fc:	4313      	orrs	r3, r2
 80186fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018704:	691b      	ldr	r3, [r3, #16]
 8018706:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	68db      	ldr	r3, [r3, #12]
 801870e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018712:	4313      	orrs	r3, r2
 8018714:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018716:	f7ff fd67 	bl	80181e8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801871a:	f7fc ff81 	bl	8015620 <HAL_GetTick>
 801871e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018720:	e009      	b.n	8018736 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018722:	f7fc ff7d 	bl	8015620 <HAL_GetTick>
 8018726:	4602      	mov	r2, r0
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	1ad3      	subs	r3, r2, r3
 801872c:	2b02      	cmp	r3, #2
 801872e:	d902      	bls.n	8018736 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018730:	2303      	movs	r3, #3
 8018732:	73fb      	strb	r3, [r7, #15]
        break;
 8018734:	e004      	b.n	8018740 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018736:	f7ff fd75 	bl	8018224 <LL_RCC_PLLSAI1_IsReady>
 801873a:	4603      	mov	r3, r0
 801873c:	2b01      	cmp	r3, #1
 801873e:	d1f0      	bne.n	8018722 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018740:	7bfb      	ldrb	r3, [r7, #15]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d108      	bne.n	8018758 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801874a:	691a      	ldr	r2, [r3, #16]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	691b      	ldr	r3, [r3, #16]
 8018750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018754:	4313      	orrs	r3, r2
 8018756:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018758:	7bfb      	ldrb	r3, [r7, #15]
}
 801875a:	4618      	mov	r0, r3
 801875c:	3710      	adds	r7, #16
 801875e:	46bd      	mov	sp, r7
 8018760:	bd80      	pop	{r7, pc}

08018762 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018762:	b580      	push	{r7, lr}
 8018764:	b082      	sub	sp, #8
 8018766:	af00      	add	r7, sp, #0
 8018768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d101      	bne.n	8018774 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018770:	2301      	movs	r3, #1
 8018772:	e049      	b.n	8018808 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801877a:	b2db      	uxtb	r3, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	d106      	bne.n	801878e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2200      	movs	r2, #0
 8018784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f000 f841 	bl	8018810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2202      	movs	r2, #2
 8018792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681a      	ldr	r2, [r3, #0]
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	3304      	adds	r3, #4
 801879e:	4619      	mov	r1, r3
 80187a0:	4610      	mov	r0, r2
 80187a2:	f000 f9d5 	bl	8018b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	2201      	movs	r2, #1
 80187aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2201      	movs	r2, #1
 80187b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2201      	movs	r2, #1
 80187ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2201      	movs	r2, #1
 80187c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2201      	movs	r2, #1
 80187ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2201      	movs	r2, #1
 80187d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2201      	movs	r2, #1
 80187da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2201      	movs	r2, #1
 80187e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2201      	movs	r2, #1
 80187ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	2201      	movs	r2, #1
 80187f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2201      	movs	r2, #1
 80187fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2201      	movs	r2, #1
 8018802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018806:	2300      	movs	r3, #0
}
 8018808:	4618      	mov	r0, r3
 801880a:	3708      	adds	r7, #8
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}

08018810 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018810:	b480      	push	{r7}
 8018812:	b083      	sub	sp, #12
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018818:	bf00      	nop
 801881a:	370c      	adds	r7, #12
 801881c:	46bd      	mov	sp, r7
 801881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018822:	4770      	bx	lr

08018824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018824:	b480      	push	{r7}
 8018826:	b085      	sub	sp, #20
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018832:	b2db      	uxtb	r3, r3
 8018834:	2b01      	cmp	r3, #1
 8018836:	d001      	beq.n	801883c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018838:	2301      	movs	r3, #1
 801883a:	e036      	b.n	80188aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2202      	movs	r2, #2
 8018840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	68da      	ldr	r2, [r3, #12]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	f042 0201 	orr.w	r2, r2, #1
 8018852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	4a17      	ldr	r2, [pc, #92]	; (80188b8 <HAL_TIM_Base_Start_IT+0x94>)
 801885a:	4293      	cmp	r3, r2
 801885c:	d004      	beq.n	8018868 <HAL_TIM_Base_Start_IT+0x44>
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018866:	d115      	bne.n	8018894 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	689a      	ldr	r2, [r3, #8]
 801886e:	4b13      	ldr	r3, [pc, #76]	; (80188bc <HAL_TIM_Base_Start_IT+0x98>)
 8018870:	4013      	ands	r3, r2
 8018872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	2b06      	cmp	r3, #6
 8018878:	d015      	beq.n	80188a6 <HAL_TIM_Base_Start_IT+0x82>
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018880:	d011      	beq.n	80188a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	f042 0201 	orr.w	r2, r2, #1
 8018890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018892:	e008      	b.n	80188a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f042 0201 	orr.w	r2, r2, #1
 80188a2:	601a      	str	r2, [r3, #0]
 80188a4:	e000      	b.n	80188a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80188a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80188a8:	2300      	movs	r3, #0
}
 80188aa:	4618      	mov	r0, r3
 80188ac:	3714      	adds	r7, #20
 80188ae:	46bd      	mov	sp, r7
 80188b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop
 80188b8:	40012c00 	.word	0x40012c00
 80188bc:	00010007 	.word	0x00010007

080188c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	691b      	ldr	r3, [r3, #16]
 80188ce:	f003 0302 	and.w	r3, r3, #2
 80188d2:	2b02      	cmp	r3, #2
 80188d4:	d122      	bne.n	801891c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	f003 0302 	and.w	r3, r3, #2
 80188e0:	2b02      	cmp	r3, #2
 80188e2:	d11b      	bne.n	801891c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	f06f 0202 	mvn.w	r2, #2
 80188ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2201      	movs	r2, #1
 80188f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	699b      	ldr	r3, [r3, #24]
 80188fa:	f003 0303 	and.w	r3, r3, #3
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d003      	beq.n	801890a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018902:	6878      	ldr	r0, [r7, #4]
 8018904:	f000 f905 	bl	8018b12 <HAL_TIM_IC_CaptureCallback>
 8018908:	e005      	b.n	8018916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f000 f8f7 	bl	8018afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	f000 f908 	bl	8018b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	2200      	movs	r2, #0
 801891a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	691b      	ldr	r3, [r3, #16]
 8018922:	f003 0304 	and.w	r3, r3, #4
 8018926:	2b04      	cmp	r3, #4
 8018928:	d122      	bne.n	8018970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	f003 0304 	and.w	r3, r3, #4
 8018934:	2b04      	cmp	r3, #4
 8018936:	d11b      	bne.n	8018970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	f06f 0204 	mvn.w	r2, #4
 8018940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2202      	movs	r2, #2
 8018946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	699b      	ldr	r3, [r3, #24]
 801894e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018952:	2b00      	cmp	r3, #0
 8018954:	d003      	beq.n	801895e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018956:	6878      	ldr	r0, [r7, #4]
 8018958:	f000 f8db 	bl	8018b12 <HAL_TIM_IC_CaptureCallback>
 801895c:	e005      	b.n	801896a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f000 f8cd 	bl	8018afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018964:	6878      	ldr	r0, [r7, #4]
 8018966:	f000 f8de 	bl	8018b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2200      	movs	r2, #0
 801896e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	691b      	ldr	r3, [r3, #16]
 8018976:	f003 0308 	and.w	r3, r3, #8
 801897a:	2b08      	cmp	r3, #8
 801897c:	d122      	bne.n	80189c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	68db      	ldr	r3, [r3, #12]
 8018984:	f003 0308 	and.w	r3, r3, #8
 8018988:	2b08      	cmp	r3, #8
 801898a:	d11b      	bne.n	80189c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f06f 0208 	mvn.w	r2, #8
 8018994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2204      	movs	r2, #4
 801899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	69db      	ldr	r3, [r3, #28]
 80189a2:	f003 0303 	and.w	r3, r3, #3
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d003      	beq.n	80189b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f000 f8b1 	bl	8018b12 <HAL_TIM_IC_CaptureCallback>
 80189b0:	e005      	b.n	80189be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f000 f8a3 	bl	8018afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f000 f8b4 	bl	8018b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2200      	movs	r2, #0
 80189c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	691b      	ldr	r3, [r3, #16]
 80189ca:	f003 0310 	and.w	r3, r3, #16
 80189ce:	2b10      	cmp	r3, #16
 80189d0:	d122      	bne.n	8018a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	68db      	ldr	r3, [r3, #12]
 80189d8:	f003 0310 	and.w	r3, r3, #16
 80189dc:	2b10      	cmp	r3, #16
 80189de:	d11b      	bne.n	8018a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	f06f 0210 	mvn.w	r2, #16
 80189e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	2208      	movs	r2, #8
 80189ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	69db      	ldr	r3, [r3, #28]
 80189f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d003      	beq.n	8018a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80189fe:	6878      	ldr	r0, [r7, #4]
 8018a00:	f000 f887 	bl	8018b12 <HAL_TIM_IC_CaptureCallback>
 8018a04:	e005      	b.n	8018a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f000 f879 	bl	8018afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f000 f88a 	bl	8018b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	2200      	movs	r2, #0
 8018a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	691b      	ldr	r3, [r3, #16]
 8018a1e:	f003 0301 	and.w	r3, r3, #1
 8018a22:	2b01      	cmp	r3, #1
 8018a24:	d10e      	bne.n	8018a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	68db      	ldr	r3, [r3, #12]
 8018a2c:	f003 0301 	and.w	r3, r3, #1
 8018a30:	2b01      	cmp	r3, #1
 8018a32:	d107      	bne.n	8018a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	f06f 0201 	mvn.w	r2, #1
 8018a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018a3e:	6878      	ldr	r0, [r7, #4]
 8018a40:	f7e8 f926 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	691b      	ldr	r3, [r3, #16]
 8018a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a4e:	2b80      	cmp	r3, #128	; 0x80
 8018a50:	d10e      	bne.n	8018a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	68db      	ldr	r3, [r3, #12]
 8018a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a5c:	2b80      	cmp	r3, #128	; 0x80
 8018a5e:	d107      	bne.n	8018a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	f000 f8de 	bl	8018c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	691b      	ldr	r3, [r3, #16]
 8018a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a7e:	d10e      	bne.n	8018a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a8a:	2b80      	cmp	r3, #128	; 0x80
 8018a8c:	d107      	bne.n	8018a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f000 f8d1 	bl	8018c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	691b      	ldr	r3, [r3, #16]
 8018aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018aa8:	2b40      	cmp	r3, #64	; 0x40
 8018aaa:	d10e      	bne.n	8018aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	68db      	ldr	r3, [r3, #12]
 8018ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ab6:	2b40      	cmp	r3, #64	; 0x40
 8018ab8:	d107      	bne.n	8018aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f000 f838 	bl	8018b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	691b      	ldr	r3, [r3, #16]
 8018ad0:	f003 0320 	and.w	r3, r3, #32
 8018ad4:	2b20      	cmp	r3, #32
 8018ad6:	d10e      	bne.n	8018af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	68db      	ldr	r3, [r3, #12]
 8018ade:	f003 0320 	and.w	r3, r3, #32
 8018ae2:	2b20      	cmp	r3, #32
 8018ae4:	d107      	bne.n	8018af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f06f 0220 	mvn.w	r2, #32
 8018aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	f000 f891 	bl	8018c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018af6:	bf00      	nop
 8018af8:	3708      	adds	r7, #8
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}

08018afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018afe:	b480      	push	{r7}
 8018b00:	b083      	sub	sp, #12
 8018b02:	af00      	add	r7, sp, #0
 8018b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018b06:	bf00      	nop
 8018b08:	370c      	adds	r7, #12
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b10:	4770      	bx	lr

08018b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018b12:	b480      	push	{r7}
 8018b14:	b083      	sub	sp, #12
 8018b16:	af00      	add	r7, sp, #0
 8018b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018b1a:	bf00      	nop
 8018b1c:	370c      	adds	r7, #12
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b24:	4770      	bx	lr

08018b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018b26:	b480      	push	{r7}
 8018b28:	b083      	sub	sp, #12
 8018b2a:	af00      	add	r7, sp, #0
 8018b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018b2e:	bf00      	nop
 8018b30:	370c      	adds	r7, #12
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr

08018b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018b3a:	b480      	push	{r7}
 8018b3c:	b083      	sub	sp, #12
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018b42:	bf00      	nop
 8018b44:	370c      	adds	r7, #12
 8018b46:	46bd      	mov	sp, r7
 8018b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4c:	4770      	bx	lr
	...

08018b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018b50:	b480      	push	{r7}
 8018b52:	b085      	sub	sp, #20
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	4a2a      	ldr	r2, [pc, #168]	; (8018c0c <TIM_Base_SetConfig+0xbc>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d003      	beq.n	8018b70 <TIM_Base_SetConfig+0x20>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b6e:	d108      	bne.n	8018b82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018b78:	683b      	ldr	r3, [r7, #0]
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4a21      	ldr	r2, [pc, #132]	; (8018c0c <TIM_Base_SetConfig+0xbc>)
 8018b86:	4293      	cmp	r3, r2
 8018b88:	d00b      	beq.n	8018ba2 <TIM_Base_SetConfig+0x52>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018b90:	d007      	beq.n	8018ba2 <TIM_Base_SetConfig+0x52>
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	4a1e      	ldr	r2, [pc, #120]	; (8018c10 <TIM_Base_SetConfig+0xc0>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d003      	beq.n	8018ba2 <TIM_Base_SetConfig+0x52>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	4a1d      	ldr	r2, [pc, #116]	; (8018c14 <TIM_Base_SetConfig+0xc4>)
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d108      	bne.n	8018bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018baa:	683b      	ldr	r3, [r7, #0]
 8018bac:	68db      	ldr	r3, [r3, #12]
 8018bae:	68fa      	ldr	r2, [r7, #12]
 8018bb0:	4313      	orrs	r3, r2
 8018bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018bba:	683b      	ldr	r3, [r7, #0]
 8018bbc:	695b      	ldr	r3, [r3, #20]
 8018bbe:	4313      	orrs	r3, r2
 8018bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	68fa      	ldr	r2, [r7, #12]
 8018bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	689a      	ldr	r2, [r3, #8]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	681a      	ldr	r2, [r3, #0]
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	4a0c      	ldr	r2, [pc, #48]	; (8018c0c <TIM_Base_SetConfig+0xbc>)
 8018bdc:	4293      	cmp	r3, r2
 8018bde:	d007      	beq.n	8018bf0 <TIM_Base_SetConfig+0xa0>
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	4a0b      	ldr	r2, [pc, #44]	; (8018c10 <TIM_Base_SetConfig+0xc0>)
 8018be4:	4293      	cmp	r3, r2
 8018be6:	d003      	beq.n	8018bf0 <TIM_Base_SetConfig+0xa0>
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	4a0a      	ldr	r2, [pc, #40]	; (8018c14 <TIM_Base_SetConfig+0xc4>)
 8018bec:	4293      	cmp	r3, r2
 8018bee:	d103      	bne.n	8018bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	691a      	ldr	r2, [r3, #16]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2201      	movs	r2, #1
 8018bfc:	615a      	str	r2, [r3, #20]
}
 8018bfe:	bf00      	nop
 8018c00:	3714      	adds	r7, #20
 8018c02:	46bd      	mov	sp, r7
 8018c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c08:	4770      	bx	lr
 8018c0a:	bf00      	nop
 8018c0c:	40012c00 	.word	0x40012c00
 8018c10:	40014400 	.word	0x40014400
 8018c14:	40014800 	.word	0x40014800

08018c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018c18:	b480      	push	{r7}
 8018c1a:	b083      	sub	sp, #12
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018c20:	bf00      	nop
 8018c22:	370c      	adds	r7, #12
 8018c24:	46bd      	mov	sp, r7
 8018c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2a:	4770      	bx	lr

08018c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018c2c:	b480      	push	{r7}
 8018c2e:	b083      	sub	sp, #12
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018c34:	bf00      	nop
 8018c36:	370c      	adds	r7, #12
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3e:	4770      	bx	lr

08018c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018c40:	b480      	push	{r7}
 8018c42:	b083      	sub	sp, #12
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018c48:	bf00      	nop
 8018c4a:	370c      	adds	r7, #12
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr

08018c54 <LL_RCC_GetUSARTClockSource>:
{
 8018c54:	b480      	push	{r7}
 8018c56:	b083      	sub	sp, #12
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	4013      	ands	r3, r2
}
 8018c68:	4618      	mov	r0, r3
 8018c6a:	370c      	adds	r7, #12
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c72:	4770      	bx	lr

08018c74 <LL_RCC_GetLPUARTClockSource>:
{
 8018c74:	b480      	push	{r7}
 8018c76:	b083      	sub	sp, #12
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018c80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	4013      	ands	r3, r2
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	370c      	adds	r7, #12
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c92:	4770      	bx	lr

08018c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d101      	bne.n	8018ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018ca2:	2301      	movs	r3, #1
 8018ca4:	e042      	b.n	8018d2c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d106      	bne.n	8018cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f7e8 fba5 	bl	8001408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	2224      	movs	r2, #36	; 0x24
 8018cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	f022 0201 	bic.w	r2, r2, #1
 8018cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f000 f82c 	bl	8018d34 <UART_SetConfig>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d101      	bne.n	8018ce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018ce2:	2301      	movs	r3, #1
 8018ce4:	e022      	b.n	8018d2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d002      	beq.n	8018cf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018cee:	6878      	ldr	r0, [r7, #4]
 8018cf0:	f000 fa48 	bl	8019184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	685a      	ldr	r2, [r3, #4]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	689a      	ldr	r2, [r3, #8]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	f042 0201 	orr.w	r2, r2, #1
 8018d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f000 facf 	bl	80192c8 <UART_CheckIdleState>
 8018d2a:	4603      	mov	r3, r0
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	3708      	adds	r7, #8
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}

08018d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018d38:	b08c      	sub	sp, #48	; 0x30
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	689a      	ldr	r2, [r3, #8]
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	691b      	ldr	r3, [r3, #16]
 8018d4c:	431a      	orrs	r2, r3
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	695b      	ldr	r3, [r3, #20]
 8018d52:	431a      	orrs	r2, r3
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	69db      	ldr	r3, [r3, #28]
 8018d58:	4313      	orrs	r3, r2
 8018d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018d5c:	697b      	ldr	r3, [r7, #20]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	681a      	ldr	r2, [r3, #0]
 8018d62:	4baf      	ldr	r3, [pc, #700]	; (8019020 <UART_SetConfig+0x2ec>)
 8018d64:	4013      	ands	r3, r2
 8018d66:	697a      	ldr	r2, [r7, #20]
 8018d68:	6812      	ldr	r2, [r2, #0]
 8018d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018d6c:	430b      	orrs	r3, r1
 8018d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	685b      	ldr	r3, [r3, #4]
 8018d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018d7a:	697b      	ldr	r3, [r7, #20]
 8018d7c:	68da      	ldr	r2, [r3, #12]
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	430a      	orrs	r2, r1
 8018d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018d86:	697b      	ldr	r3, [r7, #20]
 8018d88:	699b      	ldr	r3, [r3, #24]
 8018d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	4aa4      	ldr	r2, [pc, #656]	; (8019024 <UART_SetConfig+0x2f0>)
 8018d92:	4293      	cmp	r3, r2
 8018d94:	d004      	beq.n	8018da0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	6a1b      	ldr	r3, [r3, #32]
 8018d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	689b      	ldr	r3, [r3, #8]
 8018da6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018daa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018dae:	697a      	ldr	r2, [r7, #20]
 8018db0:	6812      	ldr	r2, [r2, #0]
 8018db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018db4:	430b      	orrs	r3, r1
 8018db6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018db8:	697b      	ldr	r3, [r7, #20]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dbe:	f023 010f 	bic.w	r1, r3, #15
 8018dc2:	697b      	ldr	r3, [r7, #20]
 8018dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	430a      	orrs	r2, r1
 8018dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4a95      	ldr	r2, [pc, #596]	; (8019028 <UART_SetConfig+0x2f4>)
 8018dd4:	4293      	cmp	r3, r2
 8018dd6:	d125      	bne.n	8018e24 <UART_SetConfig+0xf0>
 8018dd8:	2003      	movs	r0, #3
 8018dda:	f7ff ff3b 	bl	8018c54 <LL_RCC_GetUSARTClockSource>
 8018dde:	4603      	mov	r3, r0
 8018de0:	2b03      	cmp	r3, #3
 8018de2:	d81b      	bhi.n	8018e1c <UART_SetConfig+0xe8>
 8018de4:	a201      	add	r2, pc, #4	; (adr r2, 8018dec <UART_SetConfig+0xb8>)
 8018de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dea:	bf00      	nop
 8018dec:	08018dfd 	.word	0x08018dfd
 8018df0:	08018e0d 	.word	0x08018e0d
 8018df4:	08018e05 	.word	0x08018e05
 8018df8:	08018e15 	.word	0x08018e15
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e02:	e042      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e04:	2302      	movs	r3, #2
 8018e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e0a:	e03e      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e0c:	2304      	movs	r3, #4
 8018e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e12:	e03a      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e14:	2308      	movs	r3, #8
 8018e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e1a:	e036      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e1c:	2310      	movs	r3, #16
 8018e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e22:	e032      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	4a7e      	ldr	r2, [pc, #504]	; (8019024 <UART_SetConfig+0x2f0>)
 8018e2a:	4293      	cmp	r3, r2
 8018e2c:	d12a      	bne.n	8018e84 <UART_SetConfig+0x150>
 8018e2e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018e32:	f7ff ff1f 	bl	8018c74 <LL_RCC_GetLPUARTClockSource>
 8018e36:	4603      	mov	r3, r0
 8018e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018e3c:	d01a      	beq.n	8018e74 <UART_SetConfig+0x140>
 8018e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018e42:	d81b      	bhi.n	8018e7c <UART_SetConfig+0x148>
 8018e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e48:	d00c      	beq.n	8018e64 <UART_SetConfig+0x130>
 8018e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e4e:	d815      	bhi.n	8018e7c <UART_SetConfig+0x148>
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d003      	beq.n	8018e5c <UART_SetConfig+0x128>
 8018e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018e58:	d008      	beq.n	8018e6c <UART_SetConfig+0x138>
 8018e5a:	e00f      	b.n	8018e7c <UART_SetConfig+0x148>
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e62:	e012      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e64:	2302      	movs	r3, #2
 8018e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e6a:	e00e      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e6c:	2304      	movs	r3, #4
 8018e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e72:	e00a      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e74:	2308      	movs	r3, #8
 8018e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e7a:	e006      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e7c:	2310      	movs	r3, #16
 8018e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018e82:	e002      	b.n	8018e8a <UART_SetConfig+0x156>
 8018e84:	2310      	movs	r3, #16
 8018e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4a65      	ldr	r2, [pc, #404]	; (8019024 <UART_SetConfig+0x2f0>)
 8018e90:	4293      	cmp	r3, r2
 8018e92:	f040 8097 	bne.w	8018fc4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e9a:	2b08      	cmp	r3, #8
 8018e9c:	d823      	bhi.n	8018ee6 <UART_SetConfig+0x1b2>
 8018e9e:	a201      	add	r2, pc, #4	; (adr r2, 8018ea4 <UART_SetConfig+0x170>)
 8018ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ea4:	08018ec9 	.word	0x08018ec9
 8018ea8:	08018ee7 	.word	0x08018ee7
 8018eac:	08018ed1 	.word	0x08018ed1
 8018eb0:	08018ee7 	.word	0x08018ee7
 8018eb4:	08018ed7 	.word	0x08018ed7
 8018eb8:	08018ee7 	.word	0x08018ee7
 8018ebc:	08018ee7 	.word	0x08018ee7
 8018ec0:	08018ee7 	.word	0x08018ee7
 8018ec4:	08018edf 	.word	0x08018edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018ec8:	f7fe ff00 	bl	8017ccc <HAL_RCC_GetPCLK1Freq>
 8018ecc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018ece:	e010      	b.n	8018ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018ed0:	4b56      	ldr	r3, [pc, #344]	; (801902c <UART_SetConfig+0x2f8>)
 8018ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018ed4:	e00d      	b.n	8018ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018ed6:	f7fe fe79 	bl	8017bcc <HAL_RCC_GetSysClockFreq>
 8018eda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018edc:	e009      	b.n	8018ef2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018ee2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018ee4:	e005      	b.n	8018ef2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018eea:	2301      	movs	r3, #1
 8018eec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	f000 812b 	beq.w	8019150 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018efa:	697b      	ldr	r3, [r7, #20]
 8018efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018efe:	4a4c      	ldr	r2, [pc, #304]	; (8019030 <UART_SetConfig+0x2fc>)
 8018f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f04:	461a      	mov	r2, r3
 8018f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8018f0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f0e:	697b      	ldr	r3, [r7, #20]
 8018f10:	685a      	ldr	r2, [r3, #4]
 8018f12:	4613      	mov	r3, r2
 8018f14:	005b      	lsls	r3, r3, #1
 8018f16:	4413      	add	r3, r2
 8018f18:	69ba      	ldr	r2, [r7, #24]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d305      	bcc.n	8018f2a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	685b      	ldr	r3, [r3, #4]
 8018f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018f24:	69ba      	ldr	r2, [r7, #24]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d903      	bls.n	8018f32 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018f30:	e10e      	b.n	8019150 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f34:	2200      	movs	r2, #0
 8018f36:	60bb      	str	r3, [r7, #8]
 8018f38:	60fa      	str	r2, [r7, #12]
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f3e:	4a3c      	ldr	r2, [pc, #240]	; (8019030 <UART_SetConfig+0x2fc>)
 8018f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f44:	b29b      	uxth	r3, r3
 8018f46:	2200      	movs	r2, #0
 8018f48:	603b      	str	r3, [r7, #0]
 8018f4a:	607a      	str	r2, [r7, #4]
 8018f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018f54:	f7e7 f9b4 	bl	80002c0 <__aeabi_uldivmod>
 8018f58:	4602      	mov	r2, r0
 8018f5a:	460b      	mov	r3, r1
 8018f5c:	4610      	mov	r0, r2
 8018f5e:	4619      	mov	r1, r3
 8018f60:	f04f 0200 	mov.w	r2, #0
 8018f64:	f04f 0300 	mov.w	r3, #0
 8018f68:	020b      	lsls	r3, r1, #8
 8018f6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018f6e:	0202      	lsls	r2, r0, #8
 8018f70:	6979      	ldr	r1, [r7, #20]
 8018f72:	6849      	ldr	r1, [r1, #4]
 8018f74:	0849      	lsrs	r1, r1, #1
 8018f76:	2000      	movs	r0, #0
 8018f78:	460c      	mov	r4, r1
 8018f7a:	4605      	mov	r5, r0
 8018f7c:	eb12 0804 	adds.w	r8, r2, r4
 8018f80:	eb43 0905 	adc.w	r9, r3, r5
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	685b      	ldr	r3, [r3, #4]
 8018f88:	2200      	movs	r2, #0
 8018f8a:	469a      	mov	sl, r3
 8018f8c:	4693      	mov	fp, r2
 8018f8e:	4652      	mov	r2, sl
 8018f90:	465b      	mov	r3, fp
 8018f92:	4640      	mov	r0, r8
 8018f94:	4649      	mov	r1, r9
 8018f96:	f7e7 f993 	bl	80002c0 <__aeabi_uldivmod>
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	460b      	mov	r3, r1
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018fa2:	6a3b      	ldr	r3, [r7, #32]
 8018fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018fa8:	d308      	bcc.n	8018fbc <UART_SetConfig+0x288>
 8018faa:	6a3b      	ldr	r3, [r7, #32]
 8018fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018fb0:	d204      	bcs.n	8018fbc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	6a3a      	ldr	r2, [r7, #32]
 8018fb8:	60da      	str	r2, [r3, #12]
 8018fba:	e0c9      	b.n	8019150 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018fc2:	e0c5      	b.n	8019150 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018fc4:	697b      	ldr	r3, [r7, #20]
 8018fc6:	69db      	ldr	r3, [r3, #28]
 8018fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018fcc:	d16d      	bne.n	80190aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018fd2:	3b01      	subs	r3, #1
 8018fd4:	2b07      	cmp	r3, #7
 8018fd6:	d82d      	bhi.n	8019034 <UART_SetConfig+0x300>
 8018fd8:	a201      	add	r2, pc, #4	; (adr r2, 8018fe0 <UART_SetConfig+0x2ac>)
 8018fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fde:	bf00      	nop
 8018fe0:	08019001 	.word	0x08019001
 8018fe4:	08019009 	.word	0x08019009
 8018fe8:	08019035 	.word	0x08019035
 8018fec:	0801900f 	.word	0x0801900f
 8018ff0:	08019035 	.word	0x08019035
 8018ff4:	08019035 	.word	0x08019035
 8018ff8:	08019035 	.word	0x08019035
 8018ffc:	08019017 	.word	0x08019017
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019000:	f7fe fe7a 	bl	8017cf8 <HAL_RCC_GetPCLK2Freq>
 8019004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8019006:	e01b      	b.n	8019040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019008:	4b08      	ldr	r3, [pc, #32]	; (801902c <UART_SetConfig+0x2f8>)
 801900a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801900c:	e018      	b.n	8019040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801900e:	f7fe fddd 	bl	8017bcc <HAL_RCC_GetSysClockFreq>
 8019012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8019014:	e014      	b.n	8019040 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801901a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801901c:	e010      	b.n	8019040 <UART_SetConfig+0x30c>
 801901e:	bf00      	nop
 8019020:	cfff69f3 	.word	0xcfff69f3
 8019024:	40008000 	.word	0x40008000
 8019028:	40013800 	.word	0x40013800
 801902c:	00f42400 	.word	0x00f42400
 8019030:	0801aca0 	.word	0x0801aca0
      default:
        pclk = 0U;
 8019034:	2300      	movs	r3, #0
 8019036:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8019038:	2301      	movs	r3, #1
 801903a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801903e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019042:	2b00      	cmp	r3, #0
 8019044:	f000 8084 	beq.w	8019150 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904c:	4a4b      	ldr	r2, [pc, #300]	; (801917c <UART_SetConfig+0x448>)
 801904e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019052:	461a      	mov	r2, r3
 8019054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019056:	fbb3 f3f2 	udiv	r3, r3, r2
 801905a:	005a      	lsls	r2, r3, #1
 801905c:	697b      	ldr	r3, [r7, #20]
 801905e:	685b      	ldr	r3, [r3, #4]
 8019060:	085b      	lsrs	r3, r3, #1
 8019062:	441a      	add	r2, r3
 8019064:	697b      	ldr	r3, [r7, #20]
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	fbb2 f3f3 	udiv	r3, r2, r3
 801906c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801906e:	6a3b      	ldr	r3, [r7, #32]
 8019070:	2b0f      	cmp	r3, #15
 8019072:	d916      	bls.n	80190a2 <UART_SetConfig+0x36e>
 8019074:	6a3b      	ldr	r3, [r7, #32]
 8019076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801907a:	d212      	bcs.n	80190a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801907c:	6a3b      	ldr	r3, [r7, #32]
 801907e:	b29b      	uxth	r3, r3
 8019080:	f023 030f 	bic.w	r3, r3, #15
 8019084:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019086:	6a3b      	ldr	r3, [r7, #32]
 8019088:	085b      	lsrs	r3, r3, #1
 801908a:	b29b      	uxth	r3, r3
 801908c:	f003 0307 	and.w	r3, r3, #7
 8019090:	b29a      	uxth	r2, r3
 8019092:	8bfb      	ldrh	r3, [r7, #30]
 8019094:	4313      	orrs	r3, r2
 8019096:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8019098:	697b      	ldr	r3, [r7, #20]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	8bfa      	ldrh	r2, [r7, #30]
 801909e:	60da      	str	r2, [r3, #12]
 80190a0:	e056      	b.n	8019150 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80190a2:	2301      	movs	r3, #1
 80190a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80190a8:	e052      	b.n	8019150 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80190aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80190ae:	3b01      	subs	r3, #1
 80190b0:	2b07      	cmp	r3, #7
 80190b2:	d822      	bhi.n	80190fa <UART_SetConfig+0x3c6>
 80190b4:	a201      	add	r2, pc, #4	; (adr r2, 80190bc <UART_SetConfig+0x388>)
 80190b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190ba:	bf00      	nop
 80190bc:	080190dd 	.word	0x080190dd
 80190c0:	080190e5 	.word	0x080190e5
 80190c4:	080190fb 	.word	0x080190fb
 80190c8:	080190eb 	.word	0x080190eb
 80190cc:	080190fb 	.word	0x080190fb
 80190d0:	080190fb 	.word	0x080190fb
 80190d4:	080190fb 	.word	0x080190fb
 80190d8:	080190f3 	.word	0x080190f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80190dc:	f7fe fe0c 	bl	8017cf8 <HAL_RCC_GetPCLK2Freq>
 80190e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80190e2:	e010      	b.n	8019106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80190e4:	4b26      	ldr	r3, [pc, #152]	; (8019180 <UART_SetConfig+0x44c>)
 80190e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190e8:	e00d      	b.n	8019106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80190ea:	f7fe fd6f 	bl	8017bcc <HAL_RCC_GetSysClockFreq>
 80190ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80190f0:	e009      	b.n	8019106 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80190f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190f8:	e005      	b.n	8019106 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80190fa:	2300      	movs	r3, #0
 80190fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80190fe:	2301      	movs	r3, #1
 8019100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8019104:	bf00      	nop
    }

    if (pclk != 0U)
 8019106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019108:	2b00      	cmp	r3, #0
 801910a:	d021      	beq.n	8019150 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019110:	4a1a      	ldr	r2, [pc, #104]	; (801917c <UART_SetConfig+0x448>)
 8019112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019116:	461a      	mov	r2, r3
 8019118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801911a:	fbb3 f2f2 	udiv	r2, r3, r2
 801911e:	697b      	ldr	r3, [r7, #20]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	085b      	lsrs	r3, r3, #1
 8019124:	441a      	add	r2, r3
 8019126:	697b      	ldr	r3, [r7, #20]
 8019128:	685b      	ldr	r3, [r3, #4]
 801912a:	fbb2 f3f3 	udiv	r3, r2, r3
 801912e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019130:	6a3b      	ldr	r3, [r7, #32]
 8019132:	2b0f      	cmp	r3, #15
 8019134:	d909      	bls.n	801914a <UART_SetConfig+0x416>
 8019136:	6a3b      	ldr	r3, [r7, #32]
 8019138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801913c:	d205      	bcs.n	801914a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801913e:	6a3b      	ldr	r3, [r7, #32]
 8019140:	b29a      	uxth	r2, r3
 8019142:	697b      	ldr	r3, [r7, #20]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	60da      	str	r2, [r3, #12]
 8019148:	e002      	b.n	8019150 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801914a:	2301      	movs	r3, #1
 801914c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	2201      	movs	r2, #1
 8019154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	2201      	movs	r2, #1
 801915c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	2200      	movs	r2, #0
 8019164:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8019166:	697b      	ldr	r3, [r7, #20]
 8019168:	2200      	movs	r2, #0
 801916a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801916c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8019170:	4618      	mov	r0, r3
 8019172:	3730      	adds	r7, #48	; 0x30
 8019174:	46bd      	mov	sp, r7
 8019176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801917a:	bf00      	nop
 801917c:	0801aca0 	.word	0x0801aca0
 8019180:	00f42400 	.word	0x00f42400

08019184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019184:	b480      	push	{r7}
 8019186:	b083      	sub	sp, #12
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019190:	f003 0301 	and.w	r3, r3, #1
 8019194:	2b00      	cmp	r3, #0
 8019196:	d00a      	beq.n	80191ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	430a      	orrs	r2, r1
 80191ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191b2:	f003 0302 	and.w	r3, r3, #2
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d00a      	beq.n	80191d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	685b      	ldr	r3, [r3, #4]
 80191c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	430a      	orrs	r2, r1
 80191ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191d4:	f003 0304 	and.w	r3, r3, #4
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d00a      	beq.n	80191f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	685b      	ldr	r3, [r3, #4]
 80191e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	430a      	orrs	r2, r1
 80191f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191f6:	f003 0308 	and.w	r3, r3, #8
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d00a      	beq.n	8019214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	430a      	orrs	r2, r1
 8019212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019218:	f003 0310 	and.w	r3, r3, #16
 801921c:	2b00      	cmp	r3, #0
 801921e:	d00a      	beq.n	8019236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	689b      	ldr	r3, [r3, #8]
 8019226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	430a      	orrs	r2, r1
 8019234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801923a:	f003 0320 	and.w	r3, r3, #32
 801923e:	2b00      	cmp	r3, #0
 8019240:	d00a      	beq.n	8019258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	689b      	ldr	r3, [r3, #8]
 8019248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	430a      	orrs	r2, r1
 8019256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019260:	2b00      	cmp	r3, #0
 8019262:	d01a      	beq.n	801929a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	685b      	ldr	r3, [r3, #4]
 801926a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	430a      	orrs	r2, r1
 8019278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801927e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019282:	d10a      	bne.n	801929a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	685b      	ldr	r3, [r3, #4]
 801928a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	430a      	orrs	r2, r1
 8019298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d00a      	beq.n	80192bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	685b      	ldr	r3, [r3, #4]
 80192ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	430a      	orrs	r2, r1
 80192ba:	605a      	str	r2, [r3, #4]
  }
}
 80192bc:	bf00      	nop
 80192be:	370c      	adds	r7, #12
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr

080192c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b086      	sub	sp, #24
 80192cc:	af02      	add	r7, sp, #8
 80192ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2200      	movs	r2, #0
 80192d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80192d8:	f7fc f9a2 	bl	8015620 <HAL_GetTick>
 80192dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	f003 0308 	and.w	r3, r3, #8
 80192e8:	2b08      	cmp	r3, #8
 80192ea:	d10e      	bne.n	801930a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80192ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80192f0:	9300      	str	r3, [sp, #0]
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	2200      	movs	r2, #0
 80192f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f000 f832 	bl	8019364 <UART_WaitOnFlagUntilTimeout>
 8019300:	4603      	mov	r3, r0
 8019302:	2b00      	cmp	r3, #0
 8019304:	d001      	beq.n	801930a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019306:	2303      	movs	r3, #3
 8019308:	e028      	b.n	801935c <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	f003 0304 	and.w	r3, r3, #4
 8019314:	2b04      	cmp	r3, #4
 8019316:	d10e      	bne.n	8019336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801931c:	9300      	str	r3, [sp, #0]
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2200      	movs	r2, #0
 8019322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f000 f81c 	bl	8019364 <UART_WaitOnFlagUntilTimeout>
 801932c:	4603      	mov	r3, r0
 801932e:	2b00      	cmp	r3, #0
 8019330:	d001      	beq.n	8019336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019332:	2303      	movs	r3, #3
 8019334:	e012      	b.n	801935c <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2220      	movs	r2, #32
 801933a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2220      	movs	r2, #32
 8019342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	2200      	movs	r2, #0
 801934a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2200      	movs	r2, #0
 8019350:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	2200      	movs	r2, #0
 8019356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801935a:	2300      	movs	r3, #0
}
 801935c:	4618      	mov	r0, r3
 801935e:	3710      	adds	r7, #16
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}

08019364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b09c      	sub	sp, #112	; 0x70
 8019368:	af00      	add	r7, sp, #0
 801936a:	60f8      	str	r0, [r7, #12]
 801936c:	60b9      	str	r1, [r7, #8]
 801936e:	603b      	str	r3, [r7, #0]
 8019370:	4613      	mov	r3, r2
 8019372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019374:	e0a9      	b.n	80194ca <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801937c:	f000 80a5 	beq.w	80194ca <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019380:	f7fc f94e 	bl	8015620 <HAL_GetTick>
 8019384:	4602      	mov	r2, r0
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	1ad3      	subs	r3, r2, r3
 801938a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801938c:	429a      	cmp	r2, r3
 801938e:	d302      	bcc.n	8019396 <UART_WaitOnFlagUntilTimeout+0x32>
 8019390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019392:	2b00      	cmp	r3, #0
 8019394:	d140      	bne.n	8019418 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801939c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801939e:	e853 3f00 	ldrex	r3, [r3]
 80193a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80193a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80193aa:	667b      	str	r3, [r7, #100]	; 0x64
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	461a      	mov	r2, r3
 80193b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80193b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80193b6:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80193ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80193bc:	e841 2300 	strex	r3, r2, [r1]
 80193c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80193c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d1e6      	bne.n	8019396 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	3308      	adds	r3, #8
 80193ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80193d2:	e853 3f00 	ldrex	r3, [r3]
 80193d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	f023 0301 	bic.w	r3, r3, #1
 80193de:	663b      	str	r3, [r7, #96]	; 0x60
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	3308      	adds	r3, #8
 80193e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80193e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80193ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80193ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80193f0:	e841 2300 	strex	r3, r2, [r1]
 80193f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80193f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d1e5      	bne.n	80193c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	2220      	movs	r2, #32
 8019400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2220      	movs	r2, #32
 8019408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	2200      	movs	r2, #0
 8019410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8019414:	2303      	movs	r3, #3
 8019416:	e069      	b.n	80194ec <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	f003 0304 	and.w	r3, r3, #4
 8019422:	2b00      	cmp	r3, #0
 8019424:	d051      	beq.n	80194ca <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	69db      	ldr	r3, [r3, #28]
 801942c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019434:	d149      	bne.n	80194ca <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801943e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019448:	e853 3f00 	ldrex	r3, [r3]
 801944c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019450:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	461a      	mov	r2, r3
 801945c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801945e:	637b      	str	r3, [r7, #52]	; 0x34
 8019460:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019466:	e841 2300 	strex	r3, r2, [r1]
 801946a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946e:	2b00      	cmp	r3, #0
 8019470:	d1e6      	bne.n	8019440 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	3308      	adds	r3, #8
 8019478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	e853 3f00 	ldrex	r3, [r3]
 8019480:	613b      	str	r3, [r7, #16]
   return(result);
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	f023 0301 	bic.w	r3, r3, #1
 8019488:	66bb      	str	r3, [r7, #104]	; 0x68
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	3308      	adds	r3, #8
 8019490:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019492:	623a      	str	r2, [r7, #32]
 8019494:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019496:	69f9      	ldr	r1, [r7, #28]
 8019498:	6a3a      	ldr	r2, [r7, #32]
 801949a:	e841 2300 	strex	r3, r2, [r1]
 801949e:	61bb      	str	r3, [r7, #24]
   return(result);
 80194a0:	69bb      	ldr	r3, [r7, #24]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d1e5      	bne.n	8019472 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	2220      	movs	r2, #32
 80194aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	2220      	movs	r2, #32
 80194b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	2220      	movs	r2, #32
 80194ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	2200      	movs	r2, #0
 80194c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80194c6:	2303      	movs	r3, #3
 80194c8:	e010      	b.n	80194ec <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80194ca:	68fb      	ldr	r3, [r7, #12]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	69da      	ldr	r2, [r3, #28]
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	4013      	ands	r3, r2
 80194d4:	68ba      	ldr	r2, [r7, #8]
 80194d6:	429a      	cmp	r2, r3
 80194d8:	bf0c      	ite	eq
 80194da:	2301      	moveq	r3, #1
 80194dc:	2300      	movne	r3, #0
 80194de:	b2db      	uxtb	r3, r3
 80194e0:	461a      	mov	r2, r3
 80194e2:	79fb      	ldrb	r3, [r7, #7]
 80194e4:	429a      	cmp	r2, r3
 80194e6:	f43f af46 	beq.w	8019376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80194ea:	2300      	movs	r3, #0
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	3770      	adds	r7, #112	; 0x70
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80194f4:	b480      	push	{r7}
 80194f6:	b085      	sub	sp, #20
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019502:	2b01      	cmp	r3, #1
 8019504:	d101      	bne.n	801950a <HAL_UARTEx_DisableFifoMode+0x16>
 8019506:	2302      	movs	r3, #2
 8019508:	e027      	b.n	801955a <HAL_UARTEx_DisableFifoMode+0x66>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	2201      	movs	r2, #1
 801950e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	2224      	movs	r2, #36	; 0x24
 8019516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	681a      	ldr	r2, [r3, #0]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	f022 0201 	bic.w	r2, r2, #1
 8019530:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8019538:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	2200      	movs	r2, #0
 801953e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	68fa      	ldr	r2, [r7, #12]
 8019546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	2220      	movs	r2, #32
 801954c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	2200      	movs	r2, #0
 8019554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019558:	2300      	movs	r3, #0
}
 801955a:	4618      	mov	r0, r3
 801955c:	3714      	adds	r7, #20
 801955e:	46bd      	mov	sp, r7
 8019560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019564:	4770      	bx	lr

08019566 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019566:	b580      	push	{r7, lr}
 8019568:	b084      	sub	sp, #16
 801956a:	af00      	add	r7, sp, #0
 801956c:	6078      	str	r0, [r7, #4]
 801956e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019576:	2b01      	cmp	r3, #1
 8019578:	d101      	bne.n	801957e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801957a:	2302      	movs	r3, #2
 801957c:	e02d      	b.n	80195da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	2201      	movs	r2, #1
 8019582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2224      	movs	r2, #36	; 0x24
 801958a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	681a      	ldr	r2, [r3, #0]
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	f022 0201 	bic.w	r2, r2, #1
 80195a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	689b      	ldr	r3, [r3, #8]
 80195ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	683a      	ldr	r2, [r7, #0]
 80195b6:	430a      	orrs	r2, r1
 80195b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f000 f850 	bl	8019660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	68fa      	ldr	r2, [r7, #12]
 80195c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	2220      	movs	r2, #32
 80195cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2200      	movs	r2, #0
 80195d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80195d8:	2300      	movs	r3, #0
}
 80195da:	4618      	mov	r0, r3
 80195dc:	3710      	adds	r7, #16
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}

080195e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80195e2:	b580      	push	{r7, lr}
 80195e4:	b084      	sub	sp, #16
 80195e6:	af00      	add	r7, sp, #0
 80195e8:	6078      	str	r0, [r7, #4]
 80195ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80195f2:	2b01      	cmp	r3, #1
 80195f4:	d101      	bne.n	80195fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80195f6:	2302      	movs	r3, #2
 80195f8:	e02d      	b.n	8019656 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	2201      	movs	r2, #1
 80195fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	2224      	movs	r2, #36	; 0x24
 8019606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	681a      	ldr	r2, [r3, #0]
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	f022 0201 	bic.w	r2, r2, #1
 8019620:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	689b      	ldr	r3, [r3, #8]
 8019628:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	683a      	ldr	r2, [r7, #0]
 8019632:	430a      	orrs	r2, r1
 8019634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019636:	6878      	ldr	r0, [r7, #4]
 8019638:	f000 f812 	bl	8019660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	68fa      	ldr	r2, [r7, #12]
 8019642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	2220      	movs	r2, #32
 8019648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2200      	movs	r2, #0
 8019650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019654:	2300      	movs	r3, #0
}
 8019656:	4618      	mov	r0, r3
 8019658:	3710      	adds	r7, #16
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}
	...

08019660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019660:	b480      	push	{r7}
 8019662:	b085      	sub	sp, #20
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801966c:	2b00      	cmp	r3, #0
 801966e:	d108      	bne.n	8019682 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2201      	movs	r2, #1
 8019674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	2201      	movs	r2, #1
 801967c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019680:	e031      	b.n	80196e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019682:	2308      	movs	r3, #8
 8019684:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8019686:	2308      	movs	r3, #8
 8019688:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	689b      	ldr	r3, [r3, #8]
 8019690:	0e5b      	lsrs	r3, r3, #25
 8019692:	b2db      	uxtb	r3, r3
 8019694:	f003 0307 	and.w	r3, r3, #7
 8019698:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	689b      	ldr	r3, [r3, #8]
 80196a0:	0f5b      	lsrs	r3, r3, #29
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	f003 0307 	and.w	r3, r3, #7
 80196a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80196aa:	7bbb      	ldrb	r3, [r7, #14]
 80196ac:	7b3a      	ldrb	r2, [r7, #12]
 80196ae:	4911      	ldr	r1, [pc, #68]	; (80196f4 <UARTEx_SetNbDataToProcess+0x94>)
 80196b0:	5c8a      	ldrb	r2, [r1, r2]
 80196b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80196b6:	7b3a      	ldrb	r2, [r7, #12]
 80196b8:	490f      	ldr	r1, [pc, #60]	; (80196f8 <UARTEx_SetNbDataToProcess+0x98>)
 80196ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80196bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80196c0:	b29a      	uxth	r2, r3
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80196c8:	7bfb      	ldrb	r3, [r7, #15]
 80196ca:	7b7a      	ldrb	r2, [r7, #13]
 80196cc:	4909      	ldr	r1, [pc, #36]	; (80196f4 <UARTEx_SetNbDataToProcess+0x94>)
 80196ce:	5c8a      	ldrb	r2, [r1, r2]
 80196d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80196d4:	7b7a      	ldrb	r2, [r7, #13]
 80196d6:	4908      	ldr	r1, [pc, #32]	; (80196f8 <UARTEx_SetNbDataToProcess+0x98>)
 80196d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80196da:	fb93 f3f2 	sdiv	r3, r3, r2
 80196de:	b29a      	uxth	r2, r3
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80196e6:	bf00      	nop
 80196e8:	3714      	adds	r7, #20
 80196ea:	46bd      	mov	sp, r7
 80196ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f0:	4770      	bx	lr
 80196f2:	bf00      	nop
 80196f4:	0801acb8 	.word	0x0801acb8
 80196f8:	0801acc0 	.word	0x0801acc0

080196fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80196fc:	b480      	push	{r7}
 80196fe:	b085      	sub	sp, #20
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019704:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8019708:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8019710:	b29a      	uxth	r2, r3
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	b29b      	uxth	r3, r3
 8019716:	43db      	mvns	r3, r3
 8019718:	b29b      	uxth	r3, r3
 801971a:	4013      	ands	r3, r2
 801971c:	b29a      	uxth	r2, r3
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019724:	2300      	movs	r3, #0
}
 8019726:	4618      	mov	r0, r3
 8019728:	3714      	adds	r7, #20
 801972a:	46bd      	mov	sp, r7
 801972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019730:	4770      	bx	lr

08019732 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019732:	b084      	sub	sp, #16
 8019734:	b480      	push	{r7}
 8019736:	b083      	sub	sp, #12
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
 801973c:	f107 0014 	add.w	r0, r7, #20
 8019740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2201      	movs	r2, #1
 8019748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2200      	movs	r2, #0
 8019750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2200      	movs	r2, #0
 8019758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	2200      	movs	r2, #0
 8019760:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8019764:	2300      	movs	r3, #0
}
 8019766:	4618      	mov	r0, r3
 8019768:	370c      	adds	r7, #12
 801976a:	46bd      	mov	sp, r7
 801976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019770:	b004      	add	sp, #16
 8019772:	4770      	bx	lr

08019774 <__errno>:
 8019774:	4b01      	ldr	r3, [pc, #4]	; (801977c <__errno+0x8>)
 8019776:	6818      	ldr	r0, [r3, #0]
 8019778:	4770      	bx	lr
 801977a:	bf00      	nop
 801977c:	20000078 	.word	0x20000078

08019780 <__libc_init_array>:
 8019780:	b570      	push	{r4, r5, r6, lr}
 8019782:	4d0d      	ldr	r5, [pc, #52]	; (80197b8 <__libc_init_array+0x38>)
 8019784:	4c0d      	ldr	r4, [pc, #52]	; (80197bc <__libc_init_array+0x3c>)
 8019786:	1b64      	subs	r4, r4, r5
 8019788:	10a4      	asrs	r4, r4, #2
 801978a:	2600      	movs	r6, #0
 801978c:	42a6      	cmp	r6, r4
 801978e:	d109      	bne.n	80197a4 <__libc_init_array+0x24>
 8019790:	4d0b      	ldr	r5, [pc, #44]	; (80197c0 <__libc_init_array+0x40>)
 8019792:	4c0c      	ldr	r4, [pc, #48]	; (80197c4 <__libc_init_array+0x44>)
 8019794:	f001 f8a4 	bl	801a8e0 <_init>
 8019798:	1b64      	subs	r4, r4, r5
 801979a:	10a4      	asrs	r4, r4, #2
 801979c:	2600      	movs	r6, #0
 801979e:	42a6      	cmp	r6, r4
 80197a0:	d105      	bne.n	80197ae <__libc_init_array+0x2e>
 80197a2:	bd70      	pop	{r4, r5, r6, pc}
 80197a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80197a8:	4798      	blx	r3
 80197aa:	3601      	adds	r6, #1
 80197ac:	e7ee      	b.n	801978c <__libc_init_array+0xc>
 80197ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80197b2:	4798      	blx	r3
 80197b4:	3601      	adds	r6, #1
 80197b6:	e7f2      	b.n	801979e <__libc_init_array+0x1e>
 80197b8:	0801ad68 	.word	0x0801ad68
 80197bc:	0801ad68 	.word	0x0801ad68
 80197c0:	0801ad68 	.word	0x0801ad68
 80197c4:	0801ad6c 	.word	0x0801ad6c

080197c8 <memcpy>:
 80197c8:	440a      	add	r2, r1
 80197ca:	4291      	cmp	r1, r2
 80197cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80197d0:	d100      	bne.n	80197d4 <memcpy+0xc>
 80197d2:	4770      	bx	lr
 80197d4:	b510      	push	{r4, lr}
 80197d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197de:	4291      	cmp	r1, r2
 80197e0:	d1f9      	bne.n	80197d6 <memcpy+0xe>
 80197e2:	bd10      	pop	{r4, pc}

080197e4 <memset>:
 80197e4:	4402      	add	r2, r0
 80197e6:	4603      	mov	r3, r0
 80197e8:	4293      	cmp	r3, r2
 80197ea:	d100      	bne.n	80197ee <memset+0xa>
 80197ec:	4770      	bx	lr
 80197ee:	f803 1b01 	strb.w	r1, [r3], #1
 80197f2:	e7f9      	b.n	80197e8 <memset+0x4>

080197f4 <iprintf>:
 80197f4:	b40f      	push	{r0, r1, r2, r3}
 80197f6:	4b0a      	ldr	r3, [pc, #40]	; (8019820 <iprintf+0x2c>)
 80197f8:	b513      	push	{r0, r1, r4, lr}
 80197fa:	681c      	ldr	r4, [r3, #0]
 80197fc:	b124      	cbz	r4, 8019808 <iprintf+0x14>
 80197fe:	69a3      	ldr	r3, [r4, #24]
 8019800:	b913      	cbnz	r3, 8019808 <iprintf+0x14>
 8019802:	4620      	mov	r0, r4
 8019804:	f000 fa88 	bl	8019d18 <__sinit>
 8019808:	ab05      	add	r3, sp, #20
 801980a:	9a04      	ldr	r2, [sp, #16]
 801980c:	68a1      	ldr	r1, [r4, #8]
 801980e:	9301      	str	r3, [sp, #4]
 8019810:	4620      	mov	r0, r4
 8019812:	f000 fc91 	bl	801a138 <_vfiprintf_r>
 8019816:	b002      	add	sp, #8
 8019818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801981c:	b004      	add	sp, #16
 801981e:	4770      	bx	lr
 8019820:	20000078 	.word	0x20000078

08019824 <putchar>:
 8019824:	4b09      	ldr	r3, [pc, #36]	; (801984c <putchar+0x28>)
 8019826:	b513      	push	{r0, r1, r4, lr}
 8019828:	681c      	ldr	r4, [r3, #0]
 801982a:	4601      	mov	r1, r0
 801982c:	b134      	cbz	r4, 801983c <putchar+0x18>
 801982e:	69a3      	ldr	r3, [r4, #24]
 8019830:	b923      	cbnz	r3, 801983c <putchar+0x18>
 8019832:	9001      	str	r0, [sp, #4]
 8019834:	4620      	mov	r0, r4
 8019836:	f000 fa6f 	bl	8019d18 <__sinit>
 801983a:	9901      	ldr	r1, [sp, #4]
 801983c:	68a2      	ldr	r2, [r4, #8]
 801983e:	4620      	mov	r0, r4
 8019840:	b002      	add	sp, #8
 8019842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019846:	f000 bf3b 	b.w	801a6c0 <_putc_r>
 801984a:	bf00      	nop
 801984c:	20000078 	.word	0x20000078

08019850 <_puts_r>:
 8019850:	b570      	push	{r4, r5, r6, lr}
 8019852:	460e      	mov	r6, r1
 8019854:	4605      	mov	r5, r0
 8019856:	b118      	cbz	r0, 8019860 <_puts_r+0x10>
 8019858:	6983      	ldr	r3, [r0, #24]
 801985a:	b90b      	cbnz	r3, 8019860 <_puts_r+0x10>
 801985c:	f000 fa5c 	bl	8019d18 <__sinit>
 8019860:	69ab      	ldr	r3, [r5, #24]
 8019862:	68ac      	ldr	r4, [r5, #8]
 8019864:	b913      	cbnz	r3, 801986c <_puts_r+0x1c>
 8019866:	4628      	mov	r0, r5
 8019868:	f000 fa56 	bl	8019d18 <__sinit>
 801986c:	4b2c      	ldr	r3, [pc, #176]	; (8019920 <_puts_r+0xd0>)
 801986e:	429c      	cmp	r4, r3
 8019870:	d120      	bne.n	80198b4 <_puts_r+0x64>
 8019872:	686c      	ldr	r4, [r5, #4]
 8019874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019876:	07db      	lsls	r3, r3, #31
 8019878:	d405      	bmi.n	8019886 <_puts_r+0x36>
 801987a:	89a3      	ldrh	r3, [r4, #12]
 801987c:	0598      	lsls	r0, r3, #22
 801987e:	d402      	bmi.n	8019886 <_puts_r+0x36>
 8019880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019882:	f000 fae7 	bl	8019e54 <__retarget_lock_acquire_recursive>
 8019886:	89a3      	ldrh	r3, [r4, #12]
 8019888:	0719      	lsls	r1, r3, #28
 801988a:	d51d      	bpl.n	80198c8 <_puts_r+0x78>
 801988c:	6923      	ldr	r3, [r4, #16]
 801988e:	b1db      	cbz	r3, 80198c8 <_puts_r+0x78>
 8019890:	3e01      	subs	r6, #1
 8019892:	68a3      	ldr	r3, [r4, #8]
 8019894:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019898:	3b01      	subs	r3, #1
 801989a:	60a3      	str	r3, [r4, #8]
 801989c:	bb39      	cbnz	r1, 80198ee <_puts_r+0x9e>
 801989e:	2b00      	cmp	r3, #0
 80198a0:	da38      	bge.n	8019914 <_puts_r+0xc4>
 80198a2:	4622      	mov	r2, r4
 80198a4:	210a      	movs	r1, #10
 80198a6:	4628      	mov	r0, r5
 80198a8:	f000 f85c 	bl	8019964 <__swbuf_r>
 80198ac:	3001      	adds	r0, #1
 80198ae:	d011      	beq.n	80198d4 <_puts_r+0x84>
 80198b0:	250a      	movs	r5, #10
 80198b2:	e011      	b.n	80198d8 <_puts_r+0x88>
 80198b4:	4b1b      	ldr	r3, [pc, #108]	; (8019924 <_puts_r+0xd4>)
 80198b6:	429c      	cmp	r4, r3
 80198b8:	d101      	bne.n	80198be <_puts_r+0x6e>
 80198ba:	68ac      	ldr	r4, [r5, #8]
 80198bc:	e7da      	b.n	8019874 <_puts_r+0x24>
 80198be:	4b1a      	ldr	r3, [pc, #104]	; (8019928 <_puts_r+0xd8>)
 80198c0:	429c      	cmp	r4, r3
 80198c2:	bf08      	it	eq
 80198c4:	68ec      	ldreq	r4, [r5, #12]
 80198c6:	e7d5      	b.n	8019874 <_puts_r+0x24>
 80198c8:	4621      	mov	r1, r4
 80198ca:	4628      	mov	r0, r5
 80198cc:	f000 f89c 	bl	8019a08 <__swsetup_r>
 80198d0:	2800      	cmp	r0, #0
 80198d2:	d0dd      	beq.n	8019890 <_puts_r+0x40>
 80198d4:	f04f 35ff 	mov.w	r5, #4294967295
 80198d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80198da:	07da      	lsls	r2, r3, #31
 80198dc:	d405      	bmi.n	80198ea <_puts_r+0x9a>
 80198de:	89a3      	ldrh	r3, [r4, #12]
 80198e0:	059b      	lsls	r3, r3, #22
 80198e2:	d402      	bmi.n	80198ea <_puts_r+0x9a>
 80198e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80198e6:	f000 fab6 	bl	8019e56 <__retarget_lock_release_recursive>
 80198ea:	4628      	mov	r0, r5
 80198ec:	bd70      	pop	{r4, r5, r6, pc}
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	da04      	bge.n	80198fc <_puts_r+0xac>
 80198f2:	69a2      	ldr	r2, [r4, #24]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	dc06      	bgt.n	8019906 <_puts_r+0xb6>
 80198f8:	290a      	cmp	r1, #10
 80198fa:	d004      	beq.n	8019906 <_puts_r+0xb6>
 80198fc:	6823      	ldr	r3, [r4, #0]
 80198fe:	1c5a      	adds	r2, r3, #1
 8019900:	6022      	str	r2, [r4, #0]
 8019902:	7019      	strb	r1, [r3, #0]
 8019904:	e7c5      	b.n	8019892 <_puts_r+0x42>
 8019906:	4622      	mov	r2, r4
 8019908:	4628      	mov	r0, r5
 801990a:	f000 f82b 	bl	8019964 <__swbuf_r>
 801990e:	3001      	adds	r0, #1
 8019910:	d1bf      	bne.n	8019892 <_puts_r+0x42>
 8019912:	e7df      	b.n	80198d4 <_puts_r+0x84>
 8019914:	6823      	ldr	r3, [r4, #0]
 8019916:	250a      	movs	r5, #10
 8019918:	1c5a      	adds	r2, r3, #1
 801991a:	6022      	str	r2, [r4, #0]
 801991c:	701d      	strb	r5, [r3, #0]
 801991e:	e7db      	b.n	80198d8 <_puts_r+0x88>
 8019920:	0801acec 	.word	0x0801acec
 8019924:	0801ad0c 	.word	0x0801ad0c
 8019928:	0801accc 	.word	0x0801accc

0801992c <puts>:
 801992c:	4b02      	ldr	r3, [pc, #8]	; (8019938 <puts+0xc>)
 801992e:	4601      	mov	r1, r0
 8019930:	6818      	ldr	r0, [r3, #0]
 8019932:	f7ff bf8d 	b.w	8019850 <_puts_r>
 8019936:	bf00      	nop
 8019938:	20000078 	.word	0x20000078

0801993c <strncpy>:
 801993c:	b510      	push	{r4, lr}
 801993e:	3901      	subs	r1, #1
 8019940:	4603      	mov	r3, r0
 8019942:	b132      	cbz	r2, 8019952 <strncpy+0x16>
 8019944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019948:	f803 4b01 	strb.w	r4, [r3], #1
 801994c:	3a01      	subs	r2, #1
 801994e:	2c00      	cmp	r4, #0
 8019950:	d1f7      	bne.n	8019942 <strncpy+0x6>
 8019952:	441a      	add	r2, r3
 8019954:	2100      	movs	r1, #0
 8019956:	4293      	cmp	r3, r2
 8019958:	d100      	bne.n	801995c <strncpy+0x20>
 801995a:	bd10      	pop	{r4, pc}
 801995c:	f803 1b01 	strb.w	r1, [r3], #1
 8019960:	e7f9      	b.n	8019956 <strncpy+0x1a>
	...

08019964 <__swbuf_r>:
 8019964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019966:	460e      	mov	r6, r1
 8019968:	4614      	mov	r4, r2
 801996a:	4605      	mov	r5, r0
 801996c:	b118      	cbz	r0, 8019976 <__swbuf_r+0x12>
 801996e:	6983      	ldr	r3, [r0, #24]
 8019970:	b90b      	cbnz	r3, 8019976 <__swbuf_r+0x12>
 8019972:	f000 f9d1 	bl	8019d18 <__sinit>
 8019976:	4b21      	ldr	r3, [pc, #132]	; (80199fc <__swbuf_r+0x98>)
 8019978:	429c      	cmp	r4, r3
 801997a:	d12b      	bne.n	80199d4 <__swbuf_r+0x70>
 801997c:	686c      	ldr	r4, [r5, #4]
 801997e:	69a3      	ldr	r3, [r4, #24]
 8019980:	60a3      	str	r3, [r4, #8]
 8019982:	89a3      	ldrh	r3, [r4, #12]
 8019984:	071a      	lsls	r2, r3, #28
 8019986:	d52f      	bpl.n	80199e8 <__swbuf_r+0x84>
 8019988:	6923      	ldr	r3, [r4, #16]
 801998a:	b36b      	cbz	r3, 80199e8 <__swbuf_r+0x84>
 801998c:	6923      	ldr	r3, [r4, #16]
 801998e:	6820      	ldr	r0, [r4, #0]
 8019990:	1ac0      	subs	r0, r0, r3
 8019992:	6963      	ldr	r3, [r4, #20]
 8019994:	b2f6      	uxtb	r6, r6
 8019996:	4283      	cmp	r3, r0
 8019998:	4637      	mov	r7, r6
 801999a:	dc04      	bgt.n	80199a6 <__swbuf_r+0x42>
 801999c:	4621      	mov	r1, r4
 801999e:	4628      	mov	r0, r5
 80199a0:	f000 f926 	bl	8019bf0 <_fflush_r>
 80199a4:	bb30      	cbnz	r0, 80199f4 <__swbuf_r+0x90>
 80199a6:	68a3      	ldr	r3, [r4, #8]
 80199a8:	3b01      	subs	r3, #1
 80199aa:	60a3      	str	r3, [r4, #8]
 80199ac:	6823      	ldr	r3, [r4, #0]
 80199ae:	1c5a      	adds	r2, r3, #1
 80199b0:	6022      	str	r2, [r4, #0]
 80199b2:	701e      	strb	r6, [r3, #0]
 80199b4:	6963      	ldr	r3, [r4, #20]
 80199b6:	3001      	adds	r0, #1
 80199b8:	4283      	cmp	r3, r0
 80199ba:	d004      	beq.n	80199c6 <__swbuf_r+0x62>
 80199bc:	89a3      	ldrh	r3, [r4, #12]
 80199be:	07db      	lsls	r3, r3, #31
 80199c0:	d506      	bpl.n	80199d0 <__swbuf_r+0x6c>
 80199c2:	2e0a      	cmp	r6, #10
 80199c4:	d104      	bne.n	80199d0 <__swbuf_r+0x6c>
 80199c6:	4621      	mov	r1, r4
 80199c8:	4628      	mov	r0, r5
 80199ca:	f000 f911 	bl	8019bf0 <_fflush_r>
 80199ce:	b988      	cbnz	r0, 80199f4 <__swbuf_r+0x90>
 80199d0:	4638      	mov	r0, r7
 80199d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199d4:	4b0a      	ldr	r3, [pc, #40]	; (8019a00 <__swbuf_r+0x9c>)
 80199d6:	429c      	cmp	r4, r3
 80199d8:	d101      	bne.n	80199de <__swbuf_r+0x7a>
 80199da:	68ac      	ldr	r4, [r5, #8]
 80199dc:	e7cf      	b.n	801997e <__swbuf_r+0x1a>
 80199de:	4b09      	ldr	r3, [pc, #36]	; (8019a04 <__swbuf_r+0xa0>)
 80199e0:	429c      	cmp	r4, r3
 80199e2:	bf08      	it	eq
 80199e4:	68ec      	ldreq	r4, [r5, #12]
 80199e6:	e7ca      	b.n	801997e <__swbuf_r+0x1a>
 80199e8:	4621      	mov	r1, r4
 80199ea:	4628      	mov	r0, r5
 80199ec:	f000 f80c 	bl	8019a08 <__swsetup_r>
 80199f0:	2800      	cmp	r0, #0
 80199f2:	d0cb      	beq.n	801998c <__swbuf_r+0x28>
 80199f4:	f04f 37ff 	mov.w	r7, #4294967295
 80199f8:	e7ea      	b.n	80199d0 <__swbuf_r+0x6c>
 80199fa:	bf00      	nop
 80199fc:	0801acec 	.word	0x0801acec
 8019a00:	0801ad0c 	.word	0x0801ad0c
 8019a04:	0801accc 	.word	0x0801accc

08019a08 <__swsetup_r>:
 8019a08:	4b32      	ldr	r3, [pc, #200]	; (8019ad4 <__swsetup_r+0xcc>)
 8019a0a:	b570      	push	{r4, r5, r6, lr}
 8019a0c:	681d      	ldr	r5, [r3, #0]
 8019a0e:	4606      	mov	r6, r0
 8019a10:	460c      	mov	r4, r1
 8019a12:	b125      	cbz	r5, 8019a1e <__swsetup_r+0x16>
 8019a14:	69ab      	ldr	r3, [r5, #24]
 8019a16:	b913      	cbnz	r3, 8019a1e <__swsetup_r+0x16>
 8019a18:	4628      	mov	r0, r5
 8019a1a:	f000 f97d 	bl	8019d18 <__sinit>
 8019a1e:	4b2e      	ldr	r3, [pc, #184]	; (8019ad8 <__swsetup_r+0xd0>)
 8019a20:	429c      	cmp	r4, r3
 8019a22:	d10f      	bne.n	8019a44 <__swsetup_r+0x3c>
 8019a24:	686c      	ldr	r4, [r5, #4]
 8019a26:	89a3      	ldrh	r3, [r4, #12]
 8019a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019a2c:	0719      	lsls	r1, r3, #28
 8019a2e:	d42c      	bmi.n	8019a8a <__swsetup_r+0x82>
 8019a30:	06dd      	lsls	r5, r3, #27
 8019a32:	d411      	bmi.n	8019a58 <__swsetup_r+0x50>
 8019a34:	2309      	movs	r3, #9
 8019a36:	6033      	str	r3, [r6, #0]
 8019a38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019a3c:	81a3      	strh	r3, [r4, #12]
 8019a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a42:	e03e      	b.n	8019ac2 <__swsetup_r+0xba>
 8019a44:	4b25      	ldr	r3, [pc, #148]	; (8019adc <__swsetup_r+0xd4>)
 8019a46:	429c      	cmp	r4, r3
 8019a48:	d101      	bne.n	8019a4e <__swsetup_r+0x46>
 8019a4a:	68ac      	ldr	r4, [r5, #8]
 8019a4c:	e7eb      	b.n	8019a26 <__swsetup_r+0x1e>
 8019a4e:	4b24      	ldr	r3, [pc, #144]	; (8019ae0 <__swsetup_r+0xd8>)
 8019a50:	429c      	cmp	r4, r3
 8019a52:	bf08      	it	eq
 8019a54:	68ec      	ldreq	r4, [r5, #12]
 8019a56:	e7e6      	b.n	8019a26 <__swsetup_r+0x1e>
 8019a58:	0758      	lsls	r0, r3, #29
 8019a5a:	d512      	bpl.n	8019a82 <__swsetup_r+0x7a>
 8019a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a5e:	b141      	cbz	r1, 8019a72 <__swsetup_r+0x6a>
 8019a60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a64:	4299      	cmp	r1, r3
 8019a66:	d002      	beq.n	8019a6e <__swsetup_r+0x66>
 8019a68:	4630      	mov	r0, r6
 8019a6a:	f000 fa5b 	bl	8019f24 <_free_r>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	6363      	str	r3, [r4, #52]	; 0x34
 8019a72:	89a3      	ldrh	r3, [r4, #12]
 8019a74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019a78:	81a3      	strh	r3, [r4, #12]
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	6063      	str	r3, [r4, #4]
 8019a7e:	6923      	ldr	r3, [r4, #16]
 8019a80:	6023      	str	r3, [r4, #0]
 8019a82:	89a3      	ldrh	r3, [r4, #12]
 8019a84:	f043 0308 	orr.w	r3, r3, #8
 8019a88:	81a3      	strh	r3, [r4, #12]
 8019a8a:	6923      	ldr	r3, [r4, #16]
 8019a8c:	b94b      	cbnz	r3, 8019aa2 <__swsetup_r+0x9a>
 8019a8e:	89a3      	ldrh	r3, [r4, #12]
 8019a90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019a98:	d003      	beq.n	8019aa2 <__swsetup_r+0x9a>
 8019a9a:	4621      	mov	r1, r4
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	f000 fa01 	bl	8019ea4 <__smakebuf_r>
 8019aa2:	89a0      	ldrh	r0, [r4, #12]
 8019aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019aa8:	f010 0301 	ands.w	r3, r0, #1
 8019aac:	d00a      	beq.n	8019ac4 <__swsetup_r+0xbc>
 8019aae:	2300      	movs	r3, #0
 8019ab0:	60a3      	str	r3, [r4, #8]
 8019ab2:	6963      	ldr	r3, [r4, #20]
 8019ab4:	425b      	negs	r3, r3
 8019ab6:	61a3      	str	r3, [r4, #24]
 8019ab8:	6923      	ldr	r3, [r4, #16]
 8019aba:	b943      	cbnz	r3, 8019ace <__swsetup_r+0xc6>
 8019abc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ac0:	d1ba      	bne.n	8019a38 <__swsetup_r+0x30>
 8019ac2:	bd70      	pop	{r4, r5, r6, pc}
 8019ac4:	0781      	lsls	r1, r0, #30
 8019ac6:	bf58      	it	pl
 8019ac8:	6963      	ldrpl	r3, [r4, #20]
 8019aca:	60a3      	str	r3, [r4, #8]
 8019acc:	e7f4      	b.n	8019ab8 <__swsetup_r+0xb0>
 8019ace:	2000      	movs	r0, #0
 8019ad0:	e7f7      	b.n	8019ac2 <__swsetup_r+0xba>
 8019ad2:	bf00      	nop
 8019ad4:	20000078 	.word	0x20000078
 8019ad8:	0801acec 	.word	0x0801acec
 8019adc:	0801ad0c 	.word	0x0801ad0c
 8019ae0:	0801accc 	.word	0x0801accc

08019ae4 <__sflush_r>:
 8019ae4:	898a      	ldrh	r2, [r1, #12]
 8019ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aea:	4605      	mov	r5, r0
 8019aec:	0710      	lsls	r0, r2, #28
 8019aee:	460c      	mov	r4, r1
 8019af0:	d458      	bmi.n	8019ba4 <__sflush_r+0xc0>
 8019af2:	684b      	ldr	r3, [r1, #4]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	dc05      	bgt.n	8019b04 <__sflush_r+0x20>
 8019af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	dc02      	bgt.n	8019b04 <__sflush_r+0x20>
 8019afe:	2000      	movs	r0, #0
 8019b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b06:	2e00      	cmp	r6, #0
 8019b08:	d0f9      	beq.n	8019afe <__sflush_r+0x1a>
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019b10:	682f      	ldr	r7, [r5, #0]
 8019b12:	602b      	str	r3, [r5, #0]
 8019b14:	d032      	beq.n	8019b7c <__sflush_r+0x98>
 8019b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019b18:	89a3      	ldrh	r3, [r4, #12]
 8019b1a:	075a      	lsls	r2, r3, #29
 8019b1c:	d505      	bpl.n	8019b2a <__sflush_r+0x46>
 8019b1e:	6863      	ldr	r3, [r4, #4]
 8019b20:	1ac0      	subs	r0, r0, r3
 8019b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b24:	b10b      	cbz	r3, 8019b2a <__sflush_r+0x46>
 8019b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019b28:	1ac0      	subs	r0, r0, r3
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	4602      	mov	r2, r0
 8019b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019b30:	6a21      	ldr	r1, [r4, #32]
 8019b32:	4628      	mov	r0, r5
 8019b34:	47b0      	blx	r6
 8019b36:	1c43      	adds	r3, r0, #1
 8019b38:	89a3      	ldrh	r3, [r4, #12]
 8019b3a:	d106      	bne.n	8019b4a <__sflush_r+0x66>
 8019b3c:	6829      	ldr	r1, [r5, #0]
 8019b3e:	291d      	cmp	r1, #29
 8019b40:	d82c      	bhi.n	8019b9c <__sflush_r+0xb8>
 8019b42:	4a2a      	ldr	r2, [pc, #168]	; (8019bec <__sflush_r+0x108>)
 8019b44:	40ca      	lsrs	r2, r1
 8019b46:	07d6      	lsls	r6, r2, #31
 8019b48:	d528      	bpl.n	8019b9c <__sflush_r+0xb8>
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	6062      	str	r2, [r4, #4]
 8019b4e:	04d9      	lsls	r1, r3, #19
 8019b50:	6922      	ldr	r2, [r4, #16]
 8019b52:	6022      	str	r2, [r4, #0]
 8019b54:	d504      	bpl.n	8019b60 <__sflush_r+0x7c>
 8019b56:	1c42      	adds	r2, r0, #1
 8019b58:	d101      	bne.n	8019b5e <__sflush_r+0x7a>
 8019b5a:	682b      	ldr	r3, [r5, #0]
 8019b5c:	b903      	cbnz	r3, 8019b60 <__sflush_r+0x7c>
 8019b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8019b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b62:	602f      	str	r7, [r5, #0]
 8019b64:	2900      	cmp	r1, #0
 8019b66:	d0ca      	beq.n	8019afe <__sflush_r+0x1a>
 8019b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b6c:	4299      	cmp	r1, r3
 8019b6e:	d002      	beq.n	8019b76 <__sflush_r+0x92>
 8019b70:	4628      	mov	r0, r5
 8019b72:	f000 f9d7 	bl	8019f24 <_free_r>
 8019b76:	2000      	movs	r0, #0
 8019b78:	6360      	str	r0, [r4, #52]	; 0x34
 8019b7a:	e7c1      	b.n	8019b00 <__sflush_r+0x1c>
 8019b7c:	6a21      	ldr	r1, [r4, #32]
 8019b7e:	2301      	movs	r3, #1
 8019b80:	4628      	mov	r0, r5
 8019b82:	47b0      	blx	r6
 8019b84:	1c41      	adds	r1, r0, #1
 8019b86:	d1c7      	bne.n	8019b18 <__sflush_r+0x34>
 8019b88:	682b      	ldr	r3, [r5, #0]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d0c4      	beq.n	8019b18 <__sflush_r+0x34>
 8019b8e:	2b1d      	cmp	r3, #29
 8019b90:	d001      	beq.n	8019b96 <__sflush_r+0xb2>
 8019b92:	2b16      	cmp	r3, #22
 8019b94:	d101      	bne.n	8019b9a <__sflush_r+0xb6>
 8019b96:	602f      	str	r7, [r5, #0]
 8019b98:	e7b1      	b.n	8019afe <__sflush_r+0x1a>
 8019b9a:	89a3      	ldrh	r3, [r4, #12]
 8019b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ba0:	81a3      	strh	r3, [r4, #12]
 8019ba2:	e7ad      	b.n	8019b00 <__sflush_r+0x1c>
 8019ba4:	690f      	ldr	r7, [r1, #16]
 8019ba6:	2f00      	cmp	r7, #0
 8019ba8:	d0a9      	beq.n	8019afe <__sflush_r+0x1a>
 8019baa:	0793      	lsls	r3, r2, #30
 8019bac:	680e      	ldr	r6, [r1, #0]
 8019bae:	bf08      	it	eq
 8019bb0:	694b      	ldreq	r3, [r1, #20]
 8019bb2:	600f      	str	r7, [r1, #0]
 8019bb4:	bf18      	it	ne
 8019bb6:	2300      	movne	r3, #0
 8019bb8:	eba6 0807 	sub.w	r8, r6, r7
 8019bbc:	608b      	str	r3, [r1, #8]
 8019bbe:	f1b8 0f00 	cmp.w	r8, #0
 8019bc2:	dd9c      	ble.n	8019afe <__sflush_r+0x1a>
 8019bc4:	6a21      	ldr	r1, [r4, #32]
 8019bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019bc8:	4643      	mov	r3, r8
 8019bca:	463a      	mov	r2, r7
 8019bcc:	4628      	mov	r0, r5
 8019bce:	47b0      	blx	r6
 8019bd0:	2800      	cmp	r0, #0
 8019bd2:	dc06      	bgt.n	8019be2 <__sflush_r+0xfe>
 8019bd4:	89a3      	ldrh	r3, [r4, #12]
 8019bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bda:	81a3      	strh	r3, [r4, #12]
 8019bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8019be0:	e78e      	b.n	8019b00 <__sflush_r+0x1c>
 8019be2:	4407      	add	r7, r0
 8019be4:	eba8 0800 	sub.w	r8, r8, r0
 8019be8:	e7e9      	b.n	8019bbe <__sflush_r+0xda>
 8019bea:	bf00      	nop
 8019bec:	20400001 	.word	0x20400001

08019bf0 <_fflush_r>:
 8019bf0:	b538      	push	{r3, r4, r5, lr}
 8019bf2:	690b      	ldr	r3, [r1, #16]
 8019bf4:	4605      	mov	r5, r0
 8019bf6:	460c      	mov	r4, r1
 8019bf8:	b913      	cbnz	r3, 8019c00 <_fflush_r+0x10>
 8019bfa:	2500      	movs	r5, #0
 8019bfc:	4628      	mov	r0, r5
 8019bfe:	bd38      	pop	{r3, r4, r5, pc}
 8019c00:	b118      	cbz	r0, 8019c0a <_fflush_r+0x1a>
 8019c02:	6983      	ldr	r3, [r0, #24]
 8019c04:	b90b      	cbnz	r3, 8019c0a <_fflush_r+0x1a>
 8019c06:	f000 f887 	bl	8019d18 <__sinit>
 8019c0a:	4b14      	ldr	r3, [pc, #80]	; (8019c5c <_fflush_r+0x6c>)
 8019c0c:	429c      	cmp	r4, r3
 8019c0e:	d11b      	bne.n	8019c48 <_fflush_r+0x58>
 8019c10:	686c      	ldr	r4, [r5, #4]
 8019c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d0ef      	beq.n	8019bfa <_fflush_r+0xa>
 8019c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019c1c:	07d0      	lsls	r0, r2, #31
 8019c1e:	d404      	bmi.n	8019c2a <_fflush_r+0x3a>
 8019c20:	0599      	lsls	r1, r3, #22
 8019c22:	d402      	bmi.n	8019c2a <_fflush_r+0x3a>
 8019c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c26:	f000 f915 	bl	8019e54 <__retarget_lock_acquire_recursive>
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	4621      	mov	r1, r4
 8019c2e:	f7ff ff59 	bl	8019ae4 <__sflush_r>
 8019c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019c34:	07da      	lsls	r2, r3, #31
 8019c36:	4605      	mov	r5, r0
 8019c38:	d4e0      	bmi.n	8019bfc <_fflush_r+0xc>
 8019c3a:	89a3      	ldrh	r3, [r4, #12]
 8019c3c:	059b      	lsls	r3, r3, #22
 8019c3e:	d4dd      	bmi.n	8019bfc <_fflush_r+0xc>
 8019c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c42:	f000 f908 	bl	8019e56 <__retarget_lock_release_recursive>
 8019c46:	e7d9      	b.n	8019bfc <_fflush_r+0xc>
 8019c48:	4b05      	ldr	r3, [pc, #20]	; (8019c60 <_fflush_r+0x70>)
 8019c4a:	429c      	cmp	r4, r3
 8019c4c:	d101      	bne.n	8019c52 <_fflush_r+0x62>
 8019c4e:	68ac      	ldr	r4, [r5, #8]
 8019c50:	e7df      	b.n	8019c12 <_fflush_r+0x22>
 8019c52:	4b04      	ldr	r3, [pc, #16]	; (8019c64 <_fflush_r+0x74>)
 8019c54:	429c      	cmp	r4, r3
 8019c56:	bf08      	it	eq
 8019c58:	68ec      	ldreq	r4, [r5, #12]
 8019c5a:	e7da      	b.n	8019c12 <_fflush_r+0x22>
 8019c5c:	0801acec 	.word	0x0801acec
 8019c60:	0801ad0c 	.word	0x0801ad0c
 8019c64:	0801accc 	.word	0x0801accc

08019c68 <std>:
 8019c68:	2300      	movs	r3, #0
 8019c6a:	b510      	push	{r4, lr}
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8019c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019c76:	6083      	str	r3, [r0, #8]
 8019c78:	8181      	strh	r1, [r0, #12]
 8019c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8019c7c:	81c2      	strh	r2, [r0, #14]
 8019c7e:	6183      	str	r3, [r0, #24]
 8019c80:	4619      	mov	r1, r3
 8019c82:	2208      	movs	r2, #8
 8019c84:	305c      	adds	r0, #92	; 0x5c
 8019c86:	f7ff fdad 	bl	80197e4 <memset>
 8019c8a:	4b05      	ldr	r3, [pc, #20]	; (8019ca0 <std+0x38>)
 8019c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8019c8e:	4b05      	ldr	r3, [pc, #20]	; (8019ca4 <std+0x3c>)
 8019c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8019c92:	4b05      	ldr	r3, [pc, #20]	; (8019ca8 <std+0x40>)
 8019c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019c96:	4b05      	ldr	r3, [pc, #20]	; (8019cac <std+0x44>)
 8019c98:	6224      	str	r4, [r4, #32]
 8019c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8019c9c:	bd10      	pop	{r4, pc}
 8019c9e:	bf00      	nop
 8019ca0:	0801a771 	.word	0x0801a771
 8019ca4:	0801a793 	.word	0x0801a793
 8019ca8:	0801a7cb 	.word	0x0801a7cb
 8019cac:	0801a7ef 	.word	0x0801a7ef

08019cb0 <_cleanup_r>:
 8019cb0:	4901      	ldr	r1, [pc, #4]	; (8019cb8 <_cleanup_r+0x8>)
 8019cb2:	f000 b8af 	b.w	8019e14 <_fwalk_reent>
 8019cb6:	bf00      	nop
 8019cb8:	08019bf1 	.word	0x08019bf1

08019cbc <__sfmoreglue>:
 8019cbc:	b570      	push	{r4, r5, r6, lr}
 8019cbe:	2268      	movs	r2, #104	; 0x68
 8019cc0:	1e4d      	subs	r5, r1, #1
 8019cc2:	4355      	muls	r5, r2
 8019cc4:	460e      	mov	r6, r1
 8019cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019cca:	f000 f997 	bl	8019ffc <_malloc_r>
 8019cce:	4604      	mov	r4, r0
 8019cd0:	b140      	cbz	r0, 8019ce4 <__sfmoreglue+0x28>
 8019cd2:	2100      	movs	r1, #0
 8019cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8019cd8:	300c      	adds	r0, #12
 8019cda:	60a0      	str	r0, [r4, #8]
 8019cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019ce0:	f7ff fd80 	bl	80197e4 <memset>
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	bd70      	pop	{r4, r5, r6, pc}

08019ce8 <__sfp_lock_acquire>:
 8019ce8:	4801      	ldr	r0, [pc, #4]	; (8019cf0 <__sfp_lock_acquire+0x8>)
 8019cea:	f000 b8b3 	b.w	8019e54 <__retarget_lock_acquire_recursive>
 8019cee:	bf00      	nop
 8019cf0:	20008655 	.word	0x20008655

08019cf4 <__sfp_lock_release>:
 8019cf4:	4801      	ldr	r0, [pc, #4]	; (8019cfc <__sfp_lock_release+0x8>)
 8019cf6:	f000 b8ae 	b.w	8019e56 <__retarget_lock_release_recursive>
 8019cfa:	bf00      	nop
 8019cfc:	20008655 	.word	0x20008655

08019d00 <__sinit_lock_acquire>:
 8019d00:	4801      	ldr	r0, [pc, #4]	; (8019d08 <__sinit_lock_acquire+0x8>)
 8019d02:	f000 b8a7 	b.w	8019e54 <__retarget_lock_acquire_recursive>
 8019d06:	bf00      	nop
 8019d08:	20008656 	.word	0x20008656

08019d0c <__sinit_lock_release>:
 8019d0c:	4801      	ldr	r0, [pc, #4]	; (8019d14 <__sinit_lock_release+0x8>)
 8019d0e:	f000 b8a2 	b.w	8019e56 <__retarget_lock_release_recursive>
 8019d12:	bf00      	nop
 8019d14:	20008656 	.word	0x20008656

08019d18 <__sinit>:
 8019d18:	b510      	push	{r4, lr}
 8019d1a:	4604      	mov	r4, r0
 8019d1c:	f7ff fff0 	bl	8019d00 <__sinit_lock_acquire>
 8019d20:	69a3      	ldr	r3, [r4, #24]
 8019d22:	b11b      	cbz	r3, 8019d2c <__sinit+0x14>
 8019d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d28:	f7ff bff0 	b.w	8019d0c <__sinit_lock_release>
 8019d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d30:	6523      	str	r3, [r4, #80]	; 0x50
 8019d32:	4b13      	ldr	r3, [pc, #76]	; (8019d80 <__sinit+0x68>)
 8019d34:	4a13      	ldr	r2, [pc, #76]	; (8019d84 <__sinit+0x6c>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d3a:	42a3      	cmp	r3, r4
 8019d3c:	bf04      	itt	eq
 8019d3e:	2301      	moveq	r3, #1
 8019d40:	61a3      	streq	r3, [r4, #24]
 8019d42:	4620      	mov	r0, r4
 8019d44:	f000 f820 	bl	8019d88 <__sfp>
 8019d48:	6060      	str	r0, [r4, #4]
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	f000 f81c 	bl	8019d88 <__sfp>
 8019d50:	60a0      	str	r0, [r4, #8]
 8019d52:	4620      	mov	r0, r4
 8019d54:	f000 f818 	bl	8019d88 <__sfp>
 8019d58:	2200      	movs	r2, #0
 8019d5a:	60e0      	str	r0, [r4, #12]
 8019d5c:	2104      	movs	r1, #4
 8019d5e:	6860      	ldr	r0, [r4, #4]
 8019d60:	f7ff ff82 	bl	8019c68 <std>
 8019d64:	68a0      	ldr	r0, [r4, #8]
 8019d66:	2201      	movs	r2, #1
 8019d68:	2109      	movs	r1, #9
 8019d6a:	f7ff ff7d 	bl	8019c68 <std>
 8019d6e:	68e0      	ldr	r0, [r4, #12]
 8019d70:	2202      	movs	r2, #2
 8019d72:	2112      	movs	r1, #18
 8019d74:	f7ff ff78 	bl	8019c68 <std>
 8019d78:	2301      	movs	r3, #1
 8019d7a:	61a3      	str	r3, [r4, #24]
 8019d7c:	e7d2      	b.n	8019d24 <__sinit+0xc>
 8019d7e:	bf00      	nop
 8019d80:	0801acc8 	.word	0x0801acc8
 8019d84:	08019cb1 	.word	0x08019cb1

08019d88 <__sfp>:
 8019d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d8a:	4607      	mov	r7, r0
 8019d8c:	f7ff ffac 	bl	8019ce8 <__sfp_lock_acquire>
 8019d90:	4b1e      	ldr	r3, [pc, #120]	; (8019e0c <__sfp+0x84>)
 8019d92:	681e      	ldr	r6, [r3, #0]
 8019d94:	69b3      	ldr	r3, [r6, #24]
 8019d96:	b913      	cbnz	r3, 8019d9e <__sfp+0x16>
 8019d98:	4630      	mov	r0, r6
 8019d9a:	f7ff ffbd 	bl	8019d18 <__sinit>
 8019d9e:	3648      	adds	r6, #72	; 0x48
 8019da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019da4:	3b01      	subs	r3, #1
 8019da6:	d503      	bpl.n	8019db0 <__sfp+0x28>
 8019da8:	6833      	ldr	r3, [r6, #0]
 8019daa:	b30b      	cbz	r3, 8019df0 <__sfp+0x68>
 8019dac:	6836      	ldr	r6, [r6, #0]
 8019dae:	e7f7      	b.n	8019da0 <__sfp+0x18>
 8019db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019db4:	b9d5      	cbnz	r5, 8019dec <__sfp+0x64>
 8019db6:	4b16      	ldr	r3, [pc, #88]	; (8019e10 <__sfp+0x88>)
 8019db8:	60e3      	str	r3, [r4, #12]
 8019dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8019dc0:	f000 f847 	bl	8019e52 <__retarget_lock_init_recursive>
 8019dc4:	f7ff ff96 	bl	8019cf4 <__sfp_lock_release>
 8019dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019dd0:	6025      	str	r5, [r4, #0]
 8019dd2:	61a5      	str	r5, [r4, #24]
 8019dd4:	2208      	movs	r2, #8
 8019dd6:	4629      	mov	r1, r5
 8019dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ddc:	f7ff fd02 	bl	80197e4 <memset>
 8019de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019de8:	4620      	mov	r0, r4
 8019dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dec:	3468      	adds	r4, #104	; 0x68
 8019dee:	e7d9      	b.n	8019da4 <__sfp+0x1c>
 8019df0:	2104      	movs	r1, #4
 8019df2:	4638      	mov	r0, r7
 8019df4:	f7ff ff62 	bl	8019cbc <__sfmoreglue>
 8019df8:	4604      	mov	r4, r0
 8019dfa:	6030      	str	r0, [r6, #0]
 8019dfc:	2800      	cmp	r0, #0
 8019dfe:	d1d5      	bne.n	8019dac <__sfp+0x24>
 8019e00:	f7ff ff78 	bl	8019cf4 <__sfp_lock_release>
 8019e04:	230c      	movs	r3, #12
 8019e06:	603b      	str	r3, [r7, #0]
 8019e08:	e7ee      	b.n	8019de8 <__sfp+0x60>
 8019e0a:	bf00      	nop
 8019e0c:	0801acc8 	.word	0x0801acc8
 8019e10:	ffff0001 	.word	0xffff0001

08019e14 <_fwalk_reent>:
 8019e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e18:	4606      	mov	r6, r0
 8019e1a:	4688      	mov	r8, r1
 8019e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e20:	2700      	movs	r7, #0
 8019e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e26:	f1b9 0901 	subs.w	r9, r9, #1
 8019e2a:	d505      	bpl.n	8019e38 <_fwalk_reent+0x24>
 8019e2c:	6824      	ldr	r4, [r4, #0]
 8019e2e:	2c00      	cmp	r4, #0
 8019e30:	d1f7      	bne.n	8019e22 <_fwalk_reent+0xe>
 8019e32:	4638      	mov	r0, r7
 8019e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e38:	89ab      	ldrh	r3, [r5, #12]
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d907      	bls.n	8019e4e <_fwalk_reent+0x3a>
 8019e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e42:	3301      	adds	r3, #1
 8019e44:	d003      	beq.n	8019e4e <_fwalk_reent+0x3a>
 8019e46:	4629      	mov	r1, r5
 8019e48:	4630      	mov	r0, r6
 8019e4a:	47c0      	blx	r8
 8019e4c:	4307      	orrs	r7, r0
 8019e4e:	3568      	adds	r5, #104	; 0x68
 8019e50:	e7e9      	b.n	8019e26 <_fwalk_reent+0x12>

08019e52 <__retarget_lock_init_recursive>:
 8019e52:	4770      	bx	lr

08019e54 <__retarget_lock_acquire_recursive>:
 8019e54:	4770      	bx	lr

08019e56 <__retarget_lock_release_recursive>:
 8019e56:	4770      	bx	lr

08019e58 <__swhatbuf_r>:
 8019e58:	b570      	push	{r4, r5, r6, lr}
 8019e5a:	460e      	mov	r6, r1
 8019e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e60:	2900      	cmp	r1, #0
 8019e62:	b096      	sub	sp, #88	; 0x58
 8019e64:	4614      	mov	r4, r2
 8019e66:	461d      	mov	r5, r3
 8019e68:	da08      	bge.n	8019e7c <__swhatbuf_r+0x24>
 8019e6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019e6e:	2200      	movs	r2, #0
 8019e70:	602a      	str	r2, [r5, #0]
 8019e72:	061a      	lsls	r2, r3, #24
 8019e74:	d410      	bmi.n	8019e98 <__swhatbuf_r+0x40>
 8019e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019e7a:	e00e      	b.n	8019e9a <__swhatbuf_r+0x42>
 8019e7c:	466a      	mov	r2, sp
 8019e7e:	f000 fcdd 	bl	801a83c <_fstat_r>
 8019e82:	2800      	cmp	r0, #0
 8019e84:	dbf1      	blt.n	8019e6a <__swhatbuf_r+0x12>
 8019e86:	9a01      	ldr	r2, [sp, #4]
 8019e88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019e8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019e90:	425a      	negs	r2, r3
 8019e92:	415a      	adcs	r2, r3
 8019e94:	602a      	str	r2, [r5, #0]
 8019e96:	e7ee      	b.n	8019e76 <__swhatbuf_r+0x1e>
 8019e98:	2340      	movs	r3, #64	; 0x40
 8019e9a:	2000      	movs	r0, #0
 8019e9c:	6023      	str	r3, [r4, #0]
 8019e9e:	b016      	add	sp, #88	; 0x58
 8019ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08019ea4 <__smakebuf_r>:
 8019ea4:	898b      	ldrh	r3, [r1, #12]
 8019ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ea8:	079d      	lsls	r5, r3, #30
 8019eaa:	4606      	mov	r6, r0
 8019eac:	460c      	mov	r4, r1
 8019eae:	d507      	bpl.n	8019ec0 <__smakebuf_r+0x1c>
 8019eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	6123      	str	r3, [r4, #16]
 8019eb8:	2301      	movs	r3, #1
 8019eba:	6163      	str	r3, [r4, #20]
 8019ebc:	b002      	add	sp, #8
 8019ebe:	bd70      	pop	{r4, r5, r6, pc}
 8019ec0:	ab01      	add	r3, sp, #4
 8019ec2:	466a      	mov	r2, sp
 8019ec4:	f7ff ffc8 	bl	8019e58 <__swhatbuf_r>
 8019ec8:	9900      	ldr	r1, [sp, #0]
 8019eca:	4605      	mov	r5, r0
 8019ecc:	4630      	mov	r0, r6
 8019ece:	f000 f895 	bl	8019ffc <_malloc_r>
 8019ed2:	b948      	cbnz	r0, 8019ee8 <__smakebuf_r+0x44>
 8019ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ed8:	059a      	lsls	r2, r3, #22
 8019eda:	d4ef      	bmi.n	8019ebc <__smakebuf_r+0x18>
 8019edc:	f023 0303 	bic.w	r3, r3, #3
 8019ee0:	f043 0302 	orr.w	r3, r3, #2
 8019ee4:	81a3      	strh	r3, [r4, #12]
 8019ee6:	e7e3      	b.n	8019eb0 <__smakebuf_r+0xc>
 8019ee8:	4b0d      	ldr	r3, [pc, #52]	; (8019f20 <__smakebuf_r+0x7c>)
 8019eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8019eec:	89a3      	ldrh	r3, [r4, #12]
 8019eee:	6020      	str	r0, [r4, #0]
 8019ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ef4:	81a3      	strh	r3, [r4, #12]
 8019ef6:	9b00      	ldr	r3, [sp, #0]
 8019ef8:	6163      	str	r3, [r4, #20]
 8019efa:	9b01      	ldr	r3, [sp, #4]
 8019efc:	6120      	str	r0, [r4, #16]
 8019efe:	b15b      	cbz	r3, 8019f18 <__smakebuf_r+0x74>
 8019f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f04:	4630      	mov	r0, r6
 8019f06:	f000 fcab 	bl	801a860 <_isatty_r>
 8019f0a:	b128      	cbz	r0, 8019f18 <__smakebuf_r+0x74>
 8019f0c:	89a3      	ldrh	r3, [r4, #12]
 8019f0e:	f023 0303 	bic.w	r3, r3, #3
 8019f12:	f043 0301 	orr.w	r3, r3, #1
 8019f16:	81a3      	strh	r3, [r4, #12]
 8019f18:	89a0      	ldrh	r0, [r4, #12]
 8019f1a:	4305      	orrs	r5, r0
 8019f1c:	81a5      	strh	r5, [r4, #12]
 8019f1e:	e7cd      	b.n	8019ebc <__smakebuf_r+0x18>
 8019f20:	08019cb1 	.word	0x08019cb1

08019f24 <_free_r>:
 8019f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f26:	2900      	cmp	r1, #0
 8019f28:	d044      	beq.n	8019fb4 <_free_r+0x90>
 8019f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f2e:	9001      	str	r0, [sp, #4]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	f1a1 0404 	sub.w	r4, r1, #4
 8019f36:	bfb8      	it	lt
 8019f38:	18e4      	addlt	r4, r4, r3
 8019f3a:	f000 fcb3 	bl	801a8a4 <__malloc_lock>
 8019f3e:	4a1e      	ldr	r2, [pc, #120]	; (8019fb8 <_free_r+0x94>)
 8019f40:	9801      	ldr	r0, [sp, #4]
 8019f42:	6813      	ldr	r3, [r2, #0]
 8019f44:	b933      	cbnz	r3, 8019f54 <_free_r+0x30>
 8019f46:	6063      	str	r3, [r4, #4]
 8019f48:	6014      	str	r4, [r2, #0]
 8019f4a:	b003      	add	sp, #12
 8019f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f50:	f000 bcae 	b.w	801a8b0 <__malloc_unlock>
 8019f54:	42a3      	cmp	r3, r4
 8019f56:	d908      	bls.n	8019f6a <_free_r+0x46>
 8019f58:	6825      	ldr	r5, [r4, #0]
 8019f5a:	1961      	adds	r1, r4, r5
 8019f5c:	428b      	cmp	r3, r1
 8019f5e:	bf01      	itttt	eq
 8019f60:	6819      	ldreq	r1, [r3, #0]
 8019f62:	685b      	ldreq	r3, [r3, #4]
 8019f64:	1949      	addeq	r1, r1, r5
 8019f66:	6021      	streq	r1, [r4, #0]
 8019f68:	e7ed      	b.n	8019f46 <_free_r+0x22>
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	685b      	ldr	r3, [r3, #4]
 8019f6e:	b10b      	cbz	r3, 8019f74 <_free_r+0x50>
 8019f70:	42a3      	cmp	r3, r4
 8019f72:	d9fa      	bls.n	8019f6a <_free_r+0x46>
 8019f74:	6811      	ldr	r1, [r2, #0]
 8019f76:	1855      	adds	r5, r2, r1
 8019f78:	42a5      	cmp	r5, r4
 8019f7a:	d10b      	bne.n	8019f94 <_free_r+0x70>
 8019f7c:	6824      	ldr	r4, [r4, #0]
 8019f7e:	4421      	add	r1, r4
 8019f80:	1854      	adds	r4, r2, r1
 8019f82:	42a3      	cmp	r3, r4
 8019f84:	6011      	str	r1, [r2, #0]
 8019f86:	d1e0      	bne.n	8019f4a <_free_r+0x26>
 8019f88:	681c      	ldr	r4, [r3, #0]
 8019f8a:	685b      	ldr	r3, [r3, #4]
 8019f8c:	6053      	str	r3, [r2, #4]
 8019f8e:	4421      	add	r1, r4
 8019f90:	6011      	str	r1, [r2, #0]
 8019f92:	e7da      	b.n	8019f4a <_free_r+0x26>
 8019f94:	d902      	bls.n	8019f9c <_free_r+0x78>
 8019f96:	230c      	movs	r3, #12
 8019f98:	6003      	str	r3, [r0, #0]
 8019f9a:	e7d6      	b.n	8019f4a <_free_r+0x26>
 8019f9c:	6825      	ldr	r5, [r4, #0]
 8019f9e:	1961      	adds	r1, r4, r5
 8019fa0:	428b      	cmp	r3, r1
 8019fa2:	bf04      	itt	eq
 8019fa4:	6819      	ldreq	r1, [r3, #0]
 8019fa6:	685b      	ldreq	r3, [r3, #4]
 8019fa8:	6063      	str	r3, [r4, #4]
 8019faa:	bf04      	itt	eq
 8019fac:	1949      	addeq	r1, r1, r5
 8019fae:	6021      	streq	r1, [r4, #0]
 8019fb0:	6054      	str	r4, [r2, #4]
 8019fb2:	e7ca      	b.n	8019f4a <_free_r+0x26>
 8019fb4:	b003      	add	sp, #12
 8019fb6:	bd30      	pop	{r4, r5, pc}
 8019fb8:	20008658 	.word	0x20008658

08019fbc <sbrk_aligned>:
 8019fbc:	b570      	push	{r4, r5, r6, lr}
 8019fbe:	4e0e      	ldr	r6, [pc, #56]	; (8019ff8 <sbrk_aligned+0x3c>)
 8019fc0:	460c      	mov	r4, r1
 8019fc2:	6831      	ldr	r1, [r6, #0]
 8019fc4:	4605      	mov	r5, r0
 8019fc6:	b911      	cbnz	r1, 8019fce <sbrk_aligned+0x12>
 8019fc8:	f000 fbc2 	bl	801a750 <_sbrk_r>
 8019fcc:	6030      	str	r0, [r6, #0]
 8019fce:	4621      	mov	r1, r4
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f000 fbbd 	bl	801a750 <_sbrk_r>
 8019fd6:	1c43      	adds	r3, r0, #1
 8019fd8:	d00a      	beq.n	8019ff0 <sbrk_aligned+0x34>
 8019fda:	1cc4      	adds	r4, r0, #3
 8019fdc:	f024 0403 	bic.w	r4, r4, #3
 8019fe0:	42a0      	cmp	r0, r4
 8019fe2:	d007      	beq.n	8019ff4 <sbrk_aligned+0x38>
 8019fe4:	1a21      	subs	r1, r4, r0
 8019fe6:	4628      	mov	r0, r5
 8019fe8:	f000 fbb2 	bl	801a750 <_sbrk_r>
 8019fec:	3001      	adds	r0, #1
 8019fee:	d101      	bne.n	8019ff4 <sbrk_aligned+0x38>
 8019ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	bd70      	pop	{r4, r5, r6, pc}
 8019ff8:	2000865c 	.word	0x2000865c

08019ffc <_malloc_r>:
 8019ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a000:	1ccd      	adds	r5, r1, #3
 801a002:	f025 0503 	bic.w	r5, r5, #3
 801a006:	3508      	adds	r5, #8
 801a008:	2d0c      	cmp	r5, #12
 801a00a:	bf38      	it	cc
 801a00c:	250c      	movcc	r5, #12
 801a00e:	2d00      	cmp	r5, #0
 801a010:	4607      	mov	r7, r0
 801a012:	db01      	blt.n	801a018 <_malloc_r+0x1c>
 801a014:	42a9      	cmp	r1, r5
 801a016:	d905      	bls.n	801a024 <_malloc_r+0x28>
 801a018:	230c      	movs	r3, #12
 801a01a:	603b      	str	r3, [r7, #0]
 801a01c:	2600      	movs	r6, #0
 801a01e:	4630      	mov	r0, r6
 801a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a024:	4e2e      	ldr	r6, [pc, #184]	; (801a0e0 <_malloc_r+0xe4>)
 801a026:	f000 fc3d 	bl	801a8a4 <__malloc_lock>
 801a02a:	6833      	ldr	r3, [r6, #0]
 801a02c:	461c      	mov	r4, r3
 801a02e:	bb34      	cbnz	r4, 801a07e <_malloc_r+0x82>
 801a030:	4629      	mov	r1, r5
 801a032:	4638      	mov	r0, r7
 801a034:	f7ff ffc2 	bl	8019fbc <sbrk_aligned>
 801a038:	1c43      	adds	r3, r0, #1
 801a03a:	4604      	mov	r4, r0
 801a03c:	d14d      	bne.n	801a0da <_malloc_r+0xde>
 801a03e:	6834      	ldr	r4, [r6, #0]
 801a040:	4626      	mov	r6, r4
 801a042:	2e00      	cmp	r6, #0
 801a044:	d140      	bne.n	801a0c8 <_malloc_r+0xcc>
 801a046:	6823      	ldr	r3, [r4, #0]
 801a048:	4631      	mov	r1, r6
 801a04a:	4638      	mov	r0, r7
 801a04c:	eb04 0803 	add.w	r8, r4, r3
 801a050:	f000 fb7e 	bl	801a750 <_sbrk_r>
 801a054:	4580      	cmp	r8, r0
 801a056:	d13a      	bne.n	801a0ce <_malloc_r+0xd2>
 801a058:	6821      	ldr	r1, [r4, #0]
 801a05a:	3503      	adds	r5, #3
 801a05c:	1a6d      	subs	r5, r5, r1
 801a05e:	f025 0503 	bic.w	r5, r5, #3
 801a062:	3508      	adds	r5, #8
 801a064:	2d0c      	cmp	r5, #12
 801a066:	bf38      	it	cc
 801a068:	250c      	movcc	r5, #12
 801a06a:	4629      	mov	r1, r5
 801a06c:	4638      	mov	r0, r7
 801a06e:	f7ff ffa5 	bl	8019fbc <sbrk_aligned>
 801a072:	3001      	adds	r0, #1
 801a074:	d02b      	beq.n	801a0ce <_malloc_r+0xd2>
 801a076:	6823      	ldr	r3, [r4, #0]
 801a078:	442b      	add	r3, r5
 801a07a:	6023      	str	r3, [r4, #0]
 801a07c:	e00e      	b.n	801a09c <_malloc_r+0xa0>
 801a07e:	6822      	ldr	r2, [r4, #0]
 801a080:	1b52      	subs	r2, r2, r5
 801a082:	d41e      	bmi.n	801a0c2 <_malloc_r+0xc6>
 801a084:	2a0b      	cmp	r2, #11
 801a086:	d916      	bls.n	801a0b6 <_malloc_r+0xba>
 801a088:	1961      	adds	r1, r4, r5
 801a08a:	42a3      	cmp	r3, r4
 801a08c:	6025      	str	r5, [r4, #0]
 801a08e:	bf18      	it	ne
 801a090:	6059      	strne	r1, [r3, #4]
 801a092:	6863      	ldr	r3, [r4, #4]
 801a094:	bf08      	it	eq
 801a096:	6031      	streq	r1, [r6, #0]
 801a098:	5162      	str	r2, [r4, r5]
 801a09a:	604b      	str	r3, [r1, #4]
 801a09c:	4638      	mov	r0, r7
 801a09e:	f104 060b 	add.w	r6, r4, #11
 801a0a2:	f000 fc05 	bl	801a8b0 <__malloc_unlock>
 801a0a6:	f026 0607 	bic.w	r6, r6, #7
 801a0aa:	1d23      	adds	r3, r4, #4
 801a0ac:	1af2      	subs	r2, r6, r3
 801a0ae:	d0b6      	beq.n	801a01e <_malloc_r+0x22>
 801a0b0:	1b9b      	subs	r3, r3, r6
 801a0b2:	50a3      	str	r3, [r4, r2]
 801a0b4:	e7b3      	b.n	801a01e <_malloc_r+0x22>
 801a0b6:	6862      	ldr	r2, [r4, #4]
 801a0b8:	42a3      	cmp	r3, r4
 801a0ba:	bf0c      	ite	eq
 801a0bc:	6032      	streq	r2, [r6, #0]
 801a0be:	605a      	strne	r2, [r3, #4]
 801a0c0:	e7ec      	b.n	801a09c <_malloc_r+0xa0>
 801a0c2:	4623      	mov	r3, r4
 801a0c4:	6864      	ldr	r4, [r4, #4]
 801a0c6:	e7b2      	b.n	801a02e <_malloc_r+0x32>
 801a0c8:	4634      	mov	r4, r6
 801a0ca:	6876      	ldr	r6, [r6, #4]
 801a0cc:	e7b9      	b.n	801a042 <_malloc_r+0x46>
 801a0ce:	230c      	movs	r3, #12
 801a0d0:	603b      	str	r3, [r7, #0]
 801a0d2:	4638      	mov	r0, r7
 801a0d4:	f000 fbec 	bl	801a8b0 <__malloc_unlock>
 801a0d8:	e7a1      	b.n	801a01e <_malloc_r+0x22>
 801a0da:	6025      	str	r5, [r4, #0]
 801a0dc:	e7de      	b.n	801a09c <_malloc_r+0xa0>
 801a0de:	bf00      	nop
 801a0e0:	20008658 	.word	0x20008658

0801a0e4 <__sfputc_r>:
 801a0e4:	6893      	ldr	r3, [r2, #8]
 801a0e6:	3b01      	subs	r3, #1
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	b410      	push	{r4}
 801a0ec:	6093      	str	r3, [r2, #8]
 801a0ee:	da08      	bge.n	801a102 <__sfputc_r+0x1e>
 801a0f0:	6994      	ldr	r4, [r2, #24]
 801a0f2:	42a3      	cmp	r3, r4
 801a0f4:	db01      	blt.n	801a0fa <__sfputc_r+0x16>
 801a0f6:	290a      	cmp	r1, #10
 801a0f8:	d103      	bne.n	801a102 <__sfputc_r+0x1e>
 801a0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0fe:	f7ff bc31 	b.w	8019964 <__swbuf_r>
 801a102:	6813      	ldr	r3, [r2, #0]
 801a104:	1c58      	adds	r0, r3, #1
 801a106:	6010      	str	r0, [r2, #0]
 801a108:	7019      	strb	r1, [r3, #0]
 801a10a:	4608      	mov	r0, r1
 801a10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a110:	4770      	bx	lr

0801a112 <__sfputs_r>:
 801a112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a114:	4606      	mov	r6, r0
 801a116:	460f      	mov	r7, r1
 801a118:	4614      	mov	r4, r2
 801a11a:	18d5      	adds	r5, r2, r3
 801a11c:	42ac      	cmp	r4, r5
 801a11e:	d101      	bne.n	801a124 <__sfputs_r+0x12>
 801a120:	2000      	movs	r0, #0
 801a122:	e007      	b.n	801a134 <__sfputs_r+0x22>
 801a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a128:	463a      	mov	r2, r7
 801a12a:	4630      	mov	r0, r6
 801a12c:	f7ff ffda 	bl	801a0e4 <__sfputc_r>
 801a130:	1c43      	adds	r3, r0, #1
 801a132:	d1f3      	bne.n	801a11c <__sfputs_r+0xa>
 801a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a138 <_vfiprintf_r>:
 801a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13c:	460d      	mov	r5, r1
 801a13e:	b09d      	sub	sp, #116	; 0x74
 801a140:	4614      	mov	r4, r2
 801a142:	4698      	mov	r8, r3
 801a144:	4606      	mov	r6, r0
 801a146:	b118      	cbz	r0, 801a150 <_vfiprintf_r+0x18>
 801a148:	6983      	ldr	r3, [r0, #24]
 801a14a:	b90b      	cbnz	r3, 801a150 <_vfiprintf_r+0x18>
 801a14c:	f7ff fde4 	bl	8019d18 <__sinit>
 801a150:	4b89      	ldr	r3, [pc, #548]	; (801a378 <_vfiprintf_r+0x240>)
 801a152:	429d      	cmp	r5, r3
 801a154:	d11b      	bne.n	801a18e <_vfiprintf_r+0x56>
 801a156:	6875      	ldr	r5, [r6, #4]
 801a158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a15a:	07d9      	lsls	r1, r3, #31
 801a15c:	d405      	bmi.n	801a16a <_vfiprintf_r+0x32>
 801a15e:	89ab      	ldrh	r3, [r5, #12]
 801a160:	059a      	lsls	r2, r3, #22
 801a162:	d402      	bmi.n	801a16a <_vfiprintf_r+0x32>
 801a164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a166:	f7ff fe75 	bl	8019e54 <__retarget_lock_acquire_recursive>
 801a16a:	89ab      	ldrh	r3, [r5, #12]
 801a16c:	071b      	lsls	r3, r3, #28
 801a16e:	d501      	bpl.n	801a174 <_vfiprintf_r+0x3c>
 801a170:	692b      	ldr	r3, [r5, #16]
 801a172:	b9eb      	cbnz	r3, 801a1b0 <_vfiprintf_r+0x78>
 801a174:	4629      	mov	r1, r5
 801a176:	4630      	mov	r0, r6
 801a178:	f7ff fc46 	bl	8019a08 <__swsetup_r>
 801a17c:	b1c0      	cbz	r0, 801a1b0 <_vfiprintf_r+0x78>
 801a17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a180:	07dc      	lsls	r4, r3, #31
 801a182:	d50e      	bpl.n	801a1a2 <_vfiprintf_r+0x6a>
 801a184:	f04f 30ff 	mov.w	r0, #4294967295
 801a188:	b01d      	add	sp, #116	; 0x74
 801a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a18e:	4b7b      	ldr	r3, [pc, #492]	; (801a37c <_vfiprintf_r+0x244>)
 801a190:	429d      	cmp	r5, r3
 801a192:	d101      	bne.n	801a198 <_vfiprintf_r+0x60>
 801a194:	68b5      	ldr	r5, [r6, #8]
 801a196:	e7df      	b.n	801a158 <_vfiprintf_r+0x20>
 801a198:	4b79      	ldr	r3, [pc, #484]	; (801a380 <_vfiprintf_r+0x248>)
 801a19a:	429d      	cmp	r5, r3
 801a19c:	bf08      	it	eq
 801a19e:	68f5      	ldreq	r5, [r6, #12]
 801a1a0:	e7da      	b.n	801a158 <_vfiprintf_r+0x20>
 801a1a2:	89ab      	ldrh	r3, [r5, #12]
 801a1a4:	0598      	lsls	r0, r3, #22
 801a1a6:	d4ed      	bmi.n	801a184 <_vfiprintf_r+0x4c>
 801a1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1aa:	f7ff fe54 	bl	8019e56 <__retarget_lock_release_recursive>
 801a1ae:	e7e9      	b.n	801a184 <_vfiprintf_r+0x4c>
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a1b4:	2320      	movs	r3, #32
 801a1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1be:	2330      	movs	r3, #48	; 0x30
 801a1c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a384 <_vfiprintf_r+0x24c>
 801a1c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a1c8:	f04f 0901 	mov.w	r9, #1
 801a1cc:	4623      	mov	r3, r4
 801a1ce:	469a      	mov	sl, r3
 801a1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a1d4:	b10a      	cbz	r2, 801a1da <_vfiprintf_r+0xa2>
 801a1d6:	2a25      	cmp	r2, #37	; 0x25
 801a1d8:	d1f9      	bne.n	801a1ce <_vfiprintf_r+0x96>
 801a1da:	ebba 0b04 	subs.w	fp, sl, r4
 801a1de:	d00b      	beq.n	801a1f8 <_vfiprintf_r+0xc0>
 801a1e0:	465b      	mov	r3, fp
 801a1e2:	4622      	mov	r2, r4
 801a1e4:	4629      	mov	r1, r5
 801a1e6:	4630      	mov	r0, r6
 801a1e8:	f7ff ff93 	bl	801a112 <__sfputs_r>
 801a1ec:	3001      	adds	r0, #1
 801a1ee:	f000 80aa 	beq.w	801a346 <_vfiprintf_r+0x20e>
 801a1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1f4:	445a      	add	r2, fp
 801a1f6:	9209      	str	r2, [sp, #36]	; 0x24
 801a1f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	f000 80a2 	beq.w	801a346 <_vfiprintf_r+0x20e>
 801a202:	2300      	movs	r3, #0
 801a204:	f04f 32ff 	mov.w	r2, #4294967295
 801a208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a20c:	f10a 0a01 	add.w	sl, sl, #1
 801a210:	9304      	str	r3, [sp, #16]
 801a212:	9307      	str	r3, [sp, #28]
 801a214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a218:	931a      	str	r3, [sp, #104]	; 0x68
 801a21a:	4654      	mov	r4, sl
 801a21c:	2205      	movs	r2, #5
 801a21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a222:	4858      	ldr	r0, [pc, #352]	; (801a384 <_vfiprintf_r+0x24c>)
 801a224:	f7e5 ffac 	bl	8000180 <memchr>
 801a228:	9a04      	ldr	r2, [sp, #16]
 801a22a:	b9d8      	cbnz	r0, 801a264 <_vfiprintf_r+0x12c>
 801a22c:	06d1      	lsls	r1, r2, #27
 801a22e:	bf44      	itt	mi
 801a230:	2320      	movmi	r3, #32
 801a232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a236:	0713      	lsls	r3, r2, #28
 801a238:	bf44      	itt	mi
 801a23a:	232b      	movmi	r3, #43	; 0x2b
 801a23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a240:	f89a 3000 	ldrb.w	r3, [sl]
 801a244:	2b2a      	cmp	r3, #42	; 0x2a
 801a246:	d015      	beq.n	801a274 <_vfiprintf_r+0x13c>
 801a248:	9a07      	ldr	r2, [sp, #28]
 801a24a:	4654      	mov	r4, sl
 801a24c:	2000      	movs	r0, #0
 801a24e:	f04f 0c0a 	mov.w	ip, #10
 801a252:	4621      	mov	r1, r4
 801a254:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a258:	3b30      	subs	r3, #48	; 0x30
 801a25a:	2b09      	cmp	r3, #9
 801a25c:	d94e      	bls.n	801a2fc <_vfiprintf_r+0x1c4>
 801a25e:	b1b0      	cbz	r0, 801a28e <_vfiprintf_r+0x156>
 801a260:	9207      	str	r2, [sp, #28]
 801a262:	e014      	b.n	801a28e <_vfiprintf_r+0x156>
 801a264:	eba0 0308 	sub.w	r3, r0, r8
 801a268:	fa09 f303 	lsl.w	r3, r9, r3
 801a26c:	4313      	orrs	r3, r2
 801a26e:	9304      	str	r3, [sp, #16]
 801a270:	46a2      	mov	sl, r4
 801a272:	e7d2      	b.n	801a21a <_vfiprintf_r+0xe2>
 801a274:	9b03      	ldr	r3, [sp, #12]
 801a276:	1d19      	adds	r1, r3, #4
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	9103      	str	r1, [sp, #12]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	bfbb      	ittet	lt
 801a280:	425b      	neglt	r3, r3
 801a282:	f042 0202 	orrlt.w	r2, r2, #2
 801a286:	9307      	strge	r3, [sp, #28]
 801a288:	9307      	strlt	r3, [sp, #28]
 801a28a:	bfb8      	it	lt
 801a28c:	9204      	strlt	r2, [sp, #16]
 801a28e:	7823      	ldrb	r3, [r4, #0]
 801a290:	2b2e      	cmp	r3, #46	; 0x2e
 801a292:	d10c      	bne.n	801a2ae <_vfiprintf_r+0x176>
 801a294:	7863      	ldrb	r3, [r4, #1]
 801a296:	2b2a      	cmp	r3, #42	; 0x2a
 801a298:	d135      	bne.n	801a306 <_vfiprintf_r+0x1ce>
 801a29a:	9b03      	ldr	r3, [sp, #12]
 801a29c:	1d1a      	adds	r2, r3, #4
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	9203      	str	r2, [sp, #12]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	bfb8      	it	lt
 801a2a6:	f04f 33ff 	movlt.w	r3, #4294967295
 801a2aa:	3402      	adds	r4, #2
 801a2ac:	9305      	str	r3, [sp, #20]
 801a2ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a394 <_vfiprintf_r+0x25c>
 801a2b2:	7821      	ldrb	r1, [r4, #0]
 801a2b4:	2203      	movs	r2, #3
 801a2b6:	4650      	mov	r0, sl
 801a2b8:	f7e5 ff62 	bl	8000180 <memchr>
 801a2bc:	b140      	cbz	r0, 801a2d0 <_vfiprintf_r+0x198>
 801a2be:	2340      	movs	r3, #64	; 0x40
 801a2c0:	eba0 000a 	sub.w	r0, r0, sl
 801a2c4:	fa03 f000 	lsl.w	r0, r3, r0
 801a2c8:	9b04      	ldr	r3, [sp, #16]
 801a2ca:	4303      	orrs	r3, r0
 801a2cc:	3401      	adds	r4, #1
 801a2ce:	9304      	str	r3, [sp, #16]
 801a2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2d4:	482c      	ldr	r0, [pc, #176]	; (801a388 <_vfiprintf_r+0x250>)
 801a2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a2da:	2206      	movs	r2, #6
 801a2dc:	f7e5 ff50 	bl	8000180 <memchr>
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	d03f      	beq.n	801a364 <_vfiprintf_r+0x22c>
 801a2e4:	4b29      	ldr	r3, [pc, #164]	; (801a38c <_vfiprintf_r+0x254>)
 801a2e6:	bb1b      	cbnz	r3, 801a330 <_vfiprintf_r+0x1f8>
 801a2e8:	9b03      	ldr	r3, [sp, #12]
 801a2ea:	3307      	adds	r3, #7
 801a2ec:	f023 0307 	bic.w	r3, r3, #7
 801a2f0:	3308      	adds	r3, #8
 801a2f2:	9303      	str	r3, [sp, #12]
 801a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2f6:	443b      	add	r3, r7
 801a2f8:	9309      	str	r3, [sp, #36]	; 0x24
 801a2fa:	e767      	b.n	801a1cc <_vfiprintf_r+0x94>
 801a2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a300:	460c      	mov	r4, r1
 801a302:	2001      	movs	r0, #1
 801a304:	e7a5      	b.n	801a252 <_vfiprintf_r+0x11a>
 801a306:	2300      	movs	r3, #0
 801a308:	3401      	adds	r4, #1
 801a30a:	9305      	str	r3, [sp, #20]
 801a30c:	4619      	mov	r1, r3
 801a30e:	f04f 0c0a 	mov.w	ip, #10
 801a312:	4620      	mov	r0, r4
 801a314:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a318:	3a30      	subs	r2, #48	; 0x30
 801a31a:	2a09      	cmp	r2, #9
 801a31c:	d903      	bls.n	801a326 <_vfiprintf_r+0x1ee>
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d0c5      	beq.n	801a2ae <_vfiprintf_r+0x176>
 801a322:	9105      	str	r1, [sp, #20]
 801a324:	e7c3      	b.n	801a2ae <_vfiprintf_r+0x176>
 801a326:	fb0c 2101 	mla	r1, ip, r1, r2
 801a32a:	4604      	mov	r4, r0
 801a32c:	2301      	movs	r3, #1
 801a32e:	e7f0      	b.n	801a312 <_vfiprintf_r+0x1da>
 801a330:	ab03      	add	r3, sp, #12
 801a332:	9300      	str	r3, [sp, #0]
 801a334:	462a      	mov	r2, r5
 801a336:	4b16      	ldr	r3, [pc, #88]	; (801a390 <_vfiprintf_r+0x258>)
 801a338:	a904      	add	r1, sp, #16
 801a33a:	4630      	mov	r0, r6
 801a33c:	f3af 8000 	nop.w
 801a340:	4607      	mov	r7, r0
 801a342:	1c78      	adds	r0, r7, #1
 801a344:	d1d6      	bne.n	801a2f4 <_vfiprintf_r+0x1bc>
 801a346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a348:	07d9      	lsls	r1, r3, #31
 801a34a:	d405      	bmi.n	801a358 <_vfiprintf_r+0x220>
 801a34c:	89ab      	ldrh	r3, [r5, #12]
 801a34e:	059a      	lsls	r2, r3, #22
 801a350:	d402      	bmi.n	801a358 <_vfiprintf_r+0x220>
 801a352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a354:	f7ff fd7f 	bl	8019e56 <__retarget_lock_release_recursive>
 801a358:	89ab      	ldrh	r3, [r5, #12]
 801a35a:	065b      	lsls	r3, r3, #25
 801a35c:	f53f af12 	bmi.w	801a184 <_vfiprintf_r+0x4c>
 801a360:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a362:	e711      	b.n	801a188 <_vfiprintf_r+0x50>
 801a364:	ab03      	add	r3, sp, #12
 801a366:	9300      	str	r3, [sp, #0]
 801a368:	462a      	mov	r2, r5
 801a36a:	4b09      	ldr	r3, [pc, #36]	; (801a390 <_vfiprintf_r+0x258>)
 801a36c:	a904      	add	r1, sp, #16
 801a36e:	4630      	mov	r0, r6
 801a370:	f000 f880 	bl	801a474 <_printf_i>
 801a374:	e7e4      	b.n	801a340 <_vfiprintf_r+0x208>
 801a376:	bf00      	nop
 801a378:	0801acec 	.word	0x0801acec
 801a37c:	0801ad0c 	.word	0x0801ad0c
 801a380:	0801accc 	.word	0x0801accc
 801a384:	0801ad2c 	.word	0x0801ad2c
 801a388:	0801ad36 	.word	0x0801ad36
 801a38c:	00000000 	.word	0x00000000
 801a390:	0801a113 	.word	0x0801a113
 801a394:	0801ad32 	.word	0x0801ad32

0801a398 <_printf_common>:
 801a398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a39c:	4616      	mov	r6, r2
 801a39e:	4699      	mov	r9, r3
 801a3a0:	688a      	ldr	r2, [r1, #8]
 801a3a2:	690b      	ldr	r3, [r1, #16]
 801a3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	bfb8      	it	lt
 801a3ac:	4613      	movlt	r3, r2
 801a3ae:	6033      	str	r3, [r6, #0]
 801a3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a3b4:	4607      	mov	r7, r0
 801a3b6:	460c      	mov	r4, r1
 801a3b8:	b10a      	cbz	r2, 801a3be <_printf_common+0x26>
 801a3ba:	3301      	adds	r3, #1
 801a3bc:	6033      	str	r3, [r6, #0]
 801a3be:	6823      	ldr	r3, [r4, #0]
 801a3c0:	0699      	lsls	r1, r3, #26
 801a3c2:	bf42      	ittt	mi
 801a3c4:	6833      	ldrmi	r3, [r6, #0]
 801a3c6:	3302      	addmi	r3, #2
 801a3c8:	6033      	strmi	r3, [r6, #0]
 801a3ca:	6825      	ldr	r5, [r4, #0]
 801a3cc:	f015 0506 	ands.w	r5, r5, #6
 801a3d0:	d106      	bne.n	801a3e0 <_printf_common+0x48>
 801a3d2:	f104 0a19 	add.w	sl, r4, #25
 801a3d6:	68e3      	ldr	r3, [r4, #12]
 801a3d8:	6832      	ldr	r2, [r6, #0]
 801a3da:	1a9b      	subs	r3, r3, r2
 801a3dc:	42ab      	cmp	r3, r5
 801a3de:	dc26      	bgt.n	801a42e <_printf_common+0x96>
 801a3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a3e4:	1e13      	subs	r3, r2, #0
 801a3e6:	6822      	ldr	r2, [r4, #0]
 801a3e8:	bf18      	it	ne
 801a3ea:	2301      	movne	r3, #1
 801a3ec:	0692      	lsls	r2, r2, #26
 801a3ee:	d42b      	bmi.n	801a448 <_printf_common+0xb0>
 801a3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a3f4:	4649      	mov	r1, r9
 801a3f6:	4638      	mov	r0, r7
 801a3f8:	47c0      	blx	r8
 801a3fa:	3001      	adds	r0, #1
 801a3fc:	d01e      	beq.n	801a43c <_printf_common+0xa4>
 801a3fe:	6823      	ldr	r3, [r4, #0]
 801a400:	68e5      	ldr	r5, [r4, #12]
 801a402:	6832      	ldr	r2, [r6, #0]
 801a404:	f003 0306 	and.w	r3, r3, #6
 801a408:	2b04      	cmp	r3, #4
 801a40a:	bf08      	it	eq
 801a40c:	1aad      	subeq	r5, r5, r2
 801a40e:	68a3      	ldr	r3, [r4, #8]
 801a410:	6922      	ldr	r2, [r4, #16]
 801a412:	bf0c      	ite	eq
 801a414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a418:	2500      	movne	r5, #0
 801a41a:	4293      	cmp	r3, r2
 801a41c:	bfc4      	itt	gt
 801a41e:	1a9b      	subgt	r3, r3, r2
 801a420:	18ed      	addgt	r5, r5, r3
 801a422:	2600      	movs	r6, #0
 801a424:	341a      	adds	r4, #26
 801a426:	42b5      	cmp	r5, r6
 801a428:	d11a      	bne.n	801a460 <_printf_common+0xc8>
 801a42a:	2000      	movs	r0, #0
 801a42c:	e008      	b.n	801a440 <_printf_common+0xa8>
 801a42e:	2301      	movs	r3, #1
 801a430:	4652      	mov	r2, sl
 801a432:	4649      	mov	r1, r9
 801a434:	4638      	mov	r0, r7
 801a436:	47c0      	blx	r8
 801a438:	3001      	adds	r0, #1
 801a43a:	d103      	bne.n	801a444 <_printf_common+0xac>
 801a43c:	f04f 30ff 	mov.w	r0, #4294967295
 801a440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a444:	3501      	adds	r5, #1
 801a446:	e7c6      	b.n	801a3d6 <_printf_common+0x3e>
 801a448:	18e1      	adds	r1, r4, r3
 801a44a:	1c5a      	adds	r2, r3, #1
 801a44c:	2030      	movs	r0, #48	; 0x30
 801a44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a452:	4422      	add	r2, r4
 801a454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a45c:	3302      	adds	r3, #2
 801a45e:	e7c7      	b.n	801a3f0 <_printf_common+0x58>
 801a460:	2301      	movs	r3, #1
 801a462:	4622      	mov	r2, r4
 801a464:	4649      	mov	r1, r9
 801a466:	4638      	mov	r0, r7
 801a468:	47c0      	blx	r8
 801a46a:	3001      	adds	r0, #1
 801a46c:	d0e6      	beq.n	801a43c <_printf_common+0xa4>
 801a46e:	3601      	adds	r6, #1
 801a470:	e7d9      	b.n	801a426 <_printf_common+0x8e>
	...

0801a474 <_printf_i>:
 801a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a478:	7e0f      	ldrb	r7, [r1, #24]
 801a47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a47c:	2f78      	cmp	r7, #120	; 0x78
 801a47e:	4691      	mov	r9, r2
 801a480:	4680      	mov	r8, r0
 801a482:	460c      	mov	r4, r1
 801a484:	469a      	mov	sl, r3
 801a486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a48a:	d807      	bhi.n	801a49c <_printf_i+0x28>
 801a48c:	2f62      	cmp	r7, #98	; 0x62
 801a48e:	d80a      	bhi.n	801a4a6 <_printf_i+0x32>
 801a490:	2f00      	cmp	r7, #0
 801a492:	f000 80d8 	beq.w	801a646 <_printf_i+0x1d2>
 801a496:	2f58      	cmp	r7, #88	; 0x58
 801a498:	f000 80a3 	beq.w	801a5e2 <_printf_i+0x16e>
 801a49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a4a4:	e03a      	b.n	801a51c <_printf_i+0xa8>
 801a4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a4aa:	2b15      	cmp	r3, #21
 801a4ac:	d8f6      	bhi.n	801a49c <_printf_i+0x28>
 801a4ae:	a101      	add	r1, pc, #4	; (adr r1, 801a4b4 <_printf_i+0x40>)
 801a4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4b4:	0801a50d 	.word	0x0801a50d
 801a4b8:	0801a521 	.word	0x0801a521
 801a4bc:	0801a49d 	.word	0x0801a49d
 801a4c0:	0801a49d 	.word	0x0801a49d
 801a4c4:	0801a49d 	.word	0x0801a49d
 801a4c8:	0801a49d 	.word	0x0801a49d
 801a4cc:	0801a521 	.word	0x0801a521
 801a4d0:	0801a49d 	.word	0x0801a49d
 801a4d4:	0801a49d 	.word	0x0801a49d
 801a4d8:	0801a49d 	.word	0x0801a49d
 801a4dc:	0801a49d 	.word	0x0801a49d
 801a4e0:	0801a62d 	.word	0x0801a62d
 801a4e4:	0801a551 	.word	0x0801a551
 801a4e8:	0801a60f 	.word	0x0801a60f
 801a4ec:	0801a49d 	.word	0x0801a49d
 801a4f0:	0801a49d 	.word	0x0801a49d
 801a4f4:	0801a64f 	.word	0x0801a64f
 801a4f8:	0801a49d 	.word	0x0801a49d
 801a4fc:	0801a551 	.word	0x0801a551
 801a500:	0801a49d 	.word	0x0801a49d
 801a504:	0801a49d 	.word	0x0801a49d
 801a508:	0801a617 	.word	0x0801a617
 801a50c:	682b      	ldr	r3, [r5, #0]
 801a50e:	1d1a      	adds	r2, r3, #4
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	602a      	str	r2, [r5, #0]
 801a514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a51c:	2301      	movs	r3, #1
 801a51e:	e0a3      	b.n	801a668 <_printf_i+0x1f4>
 801a520:	6820      	ldr	r0, [r4, #0]
 801a522:	6829      	ldr	r1, [r5, #0]
 801a524:	0606      	lsls	r6, r0, #24
 801a526:	f101 0304 	add.w	r3, r1, #4
 801a52a:	d50a      	bpl.n	801a542 <_printf_i+0xce>
 801a52c:	680e      	ldr	r6, [r1, #0]
 801a52e:	602b      	str	r3, [r5, #0]
 801a530:	2e00      	cmp	r6, #0
 801a532:	da03      	bge.n	801a53c <_printf_i+0xc8>
 801a534:	232d      	movs	r3, #45	; 0x2d
 801a536:	4276      	negs	r6, r6
 801a538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a53c:	485e      	ldr	r0, [pc, #376]	; (801a6b8 <_printf_i+0x244>)
 801a53e:	230a      	movs	r3, #10
 801a540:	e019      	b.n	801a576 <_printf_i+0x102>
 801a542:	680e      	ldr	r6, [r1, #0]
 801a544:	602b      	str	r3, [r5, #0]
 801a546:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a54a:	bf18      	it	ne
 801a54c:	b236      	sxthne	r6, r6
 801a54e:	e7ef      	b.n	801a530 <_printf_i+0xbc>
 801a550:	682b      	ldr	r3, [r5, #0]
 801a552:	6820      	ldr	r0, [r4, #0]
 801a554:	1d19      	adds	r1, r3, #4
 801a556:	6029      	str	r1, [r5, #0]
 801a558:	0601      	lsls	r1, r0, #24
 801a55a:	d501      	bpl.n	801a560 <_printf_i+0xec>
 801a55c:	681e      	ldr	r6, [r3, #0]
 801a55e:	e002      	b.n	801a566 <_printf_i+0xf2>
 801a560:	0646      	lsls	r6, r0, #25
 801a562:	d5fb      	bpl.n	801a55c <_printf_i+0xe8>
 801a564:	881e      	ldrh	r6, [r3, #0]
 801a566:	4854      	ldr	r0, [pc, #336]	; (801a6b8 <_printf_i+0x244>)
 801a568:	2f6f      	cmp	r7, #111	; 0x6f
 801a56a:	bf0c      	ite	eq
 801a56c:	2308      	moveq	r3, #8
 801a56e:	230a      	movne	r3, #10
 801a570:	2100      	movs	r1, #0
 801a572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a576:	6865      	ldr	r5, [r4, #4]
 801a578:	60a5      	str	r5, [r4, #8]
 801a57a:	2d00      	cmp	r5, #0
 801a57c:	bfa2      	ittt	ge
 801a57e:	6821      	ldrge	r1, [r4, #0]
 801a580:	f021 0104 	bicge.w	r1, r1, #4
 801a584:	6021      	strge	r1, [r4, #0]
 801a586:	b90e      	cbnz	r6, 801a58c <_printf_i+0x118>
 801a588:	2d00      	cmp	r5, #0
 801a58a:	d04d      	beq.n	801a628 <_printf_i+0x1b4>
 801a58c:	4615      	mov	r5, r2
 801a58e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a592:	fb03 6711 	mls	r7, r3, r1, r6
 801a596:	5dc7      	ldrb	r7, [r0, r7]
 801a598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a59c:	4637      	mov	r7, r6
 801a59e:	42bb      	cmp	r3, r7
 801a5a0:	460e      	mov	r6, r1
 801a5a2:	d9f4      	bls.n	801a58e <_printf_i+0x11a>
 801a5a4:	2b08      	cmp	r3, #8
 801a5a6:	d10b      	bne.n	801a5c0 <_printf_i+0x14c>
 801a5a8:	6823      	ldr	r3, [r4, #0]
 801a5aa:	07de      	lsls	r6, r3, #31
 801a5ac:	d508      	bpl.n	801a5c0 <_printf_i+0x14c>
 801a5ae:	6923      	ldr	r3, [r4, #16]
 801a5b0:	6861      	ldr	r1, [r4, #4]
 801a5b2:	4299      	cmp	r1, r3
 801a5b4:	bfde      	ittt	le
 801a5b6:	2330      	movle	r3, #48	; 0x30
 801a5b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a5bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a5c0:	1b52      	subs	r2, r2, r5
 801a5c2:	6122      	str	r2, [r4, #16]
 801a5c4:	f8cd a000 	str.w	sl, [sp]
 801a5c8:	464b      	mov	r3, r9
 801a5ca:	aa03      	add	r2, sp, #12
 801a5cc:	4621      	mov	r1, r4
 801a5ce:	4640      	mov	r0, r8
 801a5d0:	f7ff fee2 	bl	801a398 <_printf_common>
 801a5d4:	3001      	adds	r0, #1
 801a5d6:	d14c      	bne.n	801a672 <_printf_i+0x1fe>
 801a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a5dc:	b004      	add	sp, #16
 801a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5e2:	4835      	ldr	r0, [pc, #212]	; (801a6b8 <_printf_i+0x244>)
 801a5e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a5e8:	6829      	ldr	r1, [r5, #0]
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	f851 6b04 	ldr.w	r6, [r1], #4
 801a5f0:	6029      	str	r1, [r5, #0]
 801a5f2:	061d      	lsls	r5, r3, #24
 801a5f4:	d514      	bpl.n	801a620 <_printf_i+0x1ac>
 801a5f6:	07df      	lsls	r7, r3, #31
 801a5f8:	bf44      	itt	mi
 801a5fa:	f043 0320 	orrmi.w	r3, r3, #32
 801a5fe:	6023      	strmi	r3, [r4, #0]
 801a600:	b91e      	cbnz	r6, 801a60a <_printf_i+0x196>
 801a602:	6823      	ldr	r3, [r4, #0]
 801a604:	f023 0320 	bic.w	r3, r3, #32
 801a608:	6023      	str	r3, [r4, #0]
 801a60a:	2310      	movs	r3, #16
 801a60c:	e7b0      	b.n	801a570 <_printf_i+0xfc>
 801a60e:	6823      	ldr	r3, [r4, #0]
 801a610:	f043 0320 	orr.w	r3, r3, #32
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	2378      	movs	r3, #120	; 0x78
 801a618:	4828      	ldr	r0, [pc, #160]	; (801a6bc <_printf_i+0x248>)
 801a61a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a61e:	e7e3      	b.n	801a5e8 <_printf_i+0x174>
 801a620:	0659      	lsls	r1, r3, #25
 801a622:	bf48      	it	mi
 801a624:	b2b6      	uxthmi	r6, r6
 801a626:	e7e6      	b.n	801a5f6 <_printf_i+0x182>
 801a628:	4615      	mov	r5, r2
 801a62a:	e7bb      	b.n	801a5a4 <_printf_i+0x130>
 801a62c:	682b      	ldr	r3, [r5, #0]
 801a62e:	6826      	ldr	r6, [r4, #0]
 801a630:	6961      	ldr	r1, [r4, #20]
 801a632:	1d18      	adds	r0, r3, #4
 801a634:	6028      	str	r0, [r5, #0]
 801a636:	0635      	lsls	r5, r6, #24
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	d501      	bpl.n	801a640 <_printf_i+0x1cc>
 801a63c:	6019      	str	r1, [r3, #0]
 801a63e:	e002      	b.n	801a646 <_printf_i+0x1d2>
 801a640:	0670      	lsls	r0, r6, #25
 801a642:	d5fb      	bpl.n	801a63c <_printf_i+0x1c8>
 801a644:	8019      	strh	r1, [r3, #0]
 801a646:	2300      	movs	r3, #0
 801a648:	6123      	str	r3, [r4, #16]
 801a64a:	4615      	mov	r5, r2
 801a64c:	e7ba      	b.n	801a5c4 <_printf_i+0x150>
 801a64e:	682b      	ldr	r3, [r5, #0]
 801a650:	1d1a      	adds	r2, r3, #4
 801a652:	602a      	str	r2, [r5, #0]
 801a654:	681d      	ldr	r5, [r3, #0]
 801a656:	6862      	ldr	r2, [r4, #4]
 801a658:	2100      	movs	r1, #0
 801a65a:	4628      	mov	r0, r5
 801a65c:	f7e5 fd90 	bl	8000180 <memchr>
 801a660:	b108      	cbz	r0, 801a666 <_printf_i+0x1f2>
 801a662:	1b40      	subs	r0, r0, r5
 801a664:	6060      	str	r0, [r4, #4]
 801a666:	6863      	ldr	r3, [r4, #4]
 801a668:	6123      	str	r3, [r4, #16]
 801a66a:	2300      	movs	r3, #0
 801a66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a670:	e7a8      	b.n	801a5c4 <_printf_i+0x150>
 801a672:	6923      	ldr	r3, [r4, #16]
 801a674:	462a      	mov	r2, r5
 801a676:	4649      	mov	r1, r9
 801a678:	4640      	mov	r0, r8
 801a67a:	47d0      	blx	sl
 801a67c:	3001      	adds	r0, #1
 801a67e:	d0ab      	beq.n	801a5d8 <_printf_i+0x164>
 801a680:	6823      	ldr	r3, [r4, #0]
 801a682:	079b      	lsls	r3, r3, #30
 801a684:	d413      	bmi.n	801a6ae <_printf_i+0x23a>
 801a686:	68e0      	ldr	r0, [r4, #12]
 801a688:	9b03      	ldr	r3, [sp, #12]
 801a68a:	4298      	cmp	r0, r3
 801a68c:	bfb8      	it	lt
 801a68e:	4618      	movlt	r0, r3
 801a690:	e7a4      	b.n	801a5dc <_printf_i+0x168>
 801a692:	2301      	movs	r3, #1
 801a694:	4632      	mov	r2, r6
 801a696:	4649      	mov	r1, r9
 801a698:	4640      	mov	r0, r8
 801a69a:	47d0      	blx	sl
 801a69c:	3001      	adds	r0, #1
 801a69e:	d09b      	beq.n	801a5d8 <_printf_i+0x164>
 801a6a0:	3501      	adds	r5, #1
 801a6a2:	68e3      	ldr	r3, [r4, #12]
 801a6a4:	9903      	ldr	r1, [sp, #12]
 801a6a6:	1a5b      	subs	r3, r3, r1
 801a6a8:	42ab      	cmp	r3, r5
 801a6aa:	dcf2      	bgt.n	801a692 <_printf_i+0x21e>
 801a6ac:	e7eb      	b.n	801a686 <_printf_i+0x212>
 801a6ae:	2500      	movs	r5, #0
 801a6b0:	f104 0619 	add.w	r6, r4, #25
 801a6b4:	e7f5      	b.n	801a6a2 <_printf_i+0x22e>
 801a6b6:	bf00      	nop
 801a6b8:	0801ad3d 	.word	0x0801ad3d
 801a6bc:	0801ad4e 	.word	0x0801ad4e

0801a6c0 <_putc_r>:
 801a6c0:	b570      	push	{r4, r5, r6, lr}
 801a6c2:	460d      	mov	r5, r1
 801a6c4:	4614      	mov	r4, r2
 801a6c6:	4606      	mov	r6, r0
 801a6c8:	b118      	cbz	r0, 801a6d2 <_putc_r+0x12>
 801a6ca:	6983      	ldr	r3, [r0, #24]
 801a6cc:	b90b      	cbnz	r3, 801a6d2 <_putc_r+0x12>
 801a6ce:	f7ff fb23 	bl	8019d18 <__sinit>
 801a6d2:	4b1c      	ldr	r3, [pc, #112]	; (801a744 <_putc_r+0x84>)
 801a6d4:	429c      	cmp	r4, r3
 801a6d6:	d124      	bne.n	801a722 <_putc_r+0x62>
 801a6d8:	6874      	ldr	r4, [r6, #4]
 801a6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6dc:	07d8      	lsls	r0, r3, #31
 801a6de:	d405      	bmi.n	801a6ec <_putc_r+0x2c>
 801a6e0:	89a3      	ldrh	r3, [r4, #12]
 801a6e2:	0599      	lsls	r1, r3, #22
 801a6e4:	d402      	bmi.n	801a6ec <_putc_r+0x2c>
 801a6e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6e8:	f7ff fbb4 	bl	8019e54 <__retarget_lock_acquire_recursive>
 801a6ec:	68a3      	ldr	r3, [r4, #8]
 801a6ee:	3b01      	subs	r3, #1
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	60a3      	str	r3, [r4, #8]
 801a6f4:	da05      	bge.n	801a702 <_putc_r+0x42>
 801a6f6:	69a2      	ldr	r2, [r4, #24]
 801a6f8:	4293      	cmp	r3, r2
 801a6fa:	db1c      	blt.n	801a736 <_putc_r+0x76>
 801a6fc:	b2eb      	uxtb	r3, r5
 801a6fe:	2b0a      	cmp	r3, #10
 801a700:	d019      	beq.n	801a736 <_putc_r+0x76>
 801a702:	6823      	ldr	r3, [r4, #0]
 801a704:	1c5a      	adds	r2, r3, #1
 801a706:	6022      	str	r2, [r4, #0]
 801a708:	701d      	strb	r5, [r3, #0]
 801a70a:	b2ed      	uxtb	r5, r5
 801a70c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a70e:	07da      	lsls	r2, r3, #31
 801a710:	d405      	bmi.n	801a71e <_putc_r+0x5e>
 801a712:	89a3      	ldrh	r3, [r4, #12]
 801a714:	059b      	lsls	r3, r3, #22
 801a716:	d402      	bmi.n	801a71e <_putc_r+0x5e>
 801a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a71a:	f7ff fb9c 	bl	8019e56 <__retarget_lock_release_recursive>
 801a71e:	4628      	mov	r0, r5
 801a720:	bd70      	pop	{r4, r5, r6, pc}
 801a722:	4b09      	ldr	r3, [pc, #36]	; (801a748 <_putc_r+0x88>)
 801a724:	429c      	cmp	r4, r3
 801a726:	d101      	bne.n	801a72c <_putc_r+0x6c>
 801a728:	68b4      	ldr	r4, [r6, #8]
 801a72a:	e7d6      	b.n	801a6da <_putc_r+0x1a>
 801a72c:	4b07      	ldr	r3, [pc, #28]	; (801a74c <_putc_r+0x8c>)
 801a72e:	429c      	cmp	r4, r3
 801a730:	bf08      	it	eq
 801a732:	68f4      	ldreq	r4, [r6, #12]
 801a734:	e7d1      	b.n	801a6da <_putc_r+0x1a>
 801a736:	4629      	mov	r1, r5
 801a738:	4622      	mov	r2, r4
 801a73a:	4630      	mov	r0, r6
 801a73c:	f7ff f912 	bl	8019964 <__swbuf_r>
 801a740:	4605      	mov	r5, r0
 801a742:	e7e3      	b.n	801a70c <_putc_r+0x4c>
 801a744:	0801acec 	.word	0x0801acec
 801a748:	0801ad0c 	.word	0x0801ad0c
 801a74c:	0801accc 	.word	0x0801accc

0801a750 <_sbrk_r>:
 801a750:	b538      	push	{r3, r4, r5, lr}
 801a752:	4d06      	ldr	r5, [pc, #24]	; (801a76c <_sbrk_r+0x1c>)
 801a754:	2300      	movs	r3, #0
 801a756:	4604      	mov	r4, r0
 801a758:	4608      	mov	r0, r1
 801a75a:	602b      	str	r3, [r5, #0]
 801a75c:	f7e6 fd4c 	bl	80011f8 <_sbrk>
 801a760:	1c43      	adds	r3, r0, #1
 801a762:	d102      	bne.n	801a76a <_sbrk_r+0x1a>
 801a764:	682b      	ldr	r3, [r5, #0]
 801a766:	b103      	cbz	r3, 801a76a <_sbrk_r+0x1a>
 801a768:	6023      	str	r3, [r4, #0]
 801a76a:	bd38      	pop	{r3, r4, r5, pc}
 801a76c:	20008660 	.word	0x20008660

0801a770 <__sread>:
 801a770:	b510      	push	{r4, lr}
 801a772:	460c      	mov	r4, r1
 801a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a778:	f000 f8a0 	bl	801a8bc <_read_r>
 801a77c:	2800      	cmp	r0, #0
 801a77e:	bfab      	itete	ge
 801a780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a782:	89a3      	ldrhlt	r3, [r4, #12]
 801a784:	181b      	addge	r3, r3, r0
 801a786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a78a:	bfac      	ite	ge
 801a78c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a78e:	81a3      	strhlt	r3, [r4, #12]
 801a790:	bd10      	pop	{r4, pc}

0801a792 <__swrite>:
 801a792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a796:	461f      	mov	r7, r3
 801a798:	898b      	ldrh	r3, [r1, #12]
 801a79a:	05db      	lsls	r3, r3, #23
 801a79c:	4605      	mov	r5, r0
 801a79e:	460c      	mov	r4, r1
 801a7a0:	4616      	mov	r6, r2
 801a7a2:	d505      	bpl.n	801a7b0 <__swrite+0x1e>
 801a7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7a8:	2302      	movs	r3, #2
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	f000 f868 	bl	801a880 <_lseek_r>
 801a7b0:	89a3      	ldrh	r3, [r4, #12]
 801a7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a7ba:	81a3      	strh	r3, [r4, #12]
 801a7bc:	4632      	mov	r2, r6
 801a7be:	463b      	mov	r3, r7
 801a7c0:	4628      	mov	r0, r5
 801a7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7c6:	f000 b817 	b.w	801a7f8 <_write_r>

0801a7ca <__sseek>:
 801a7ca:	b510      	push	{r4, lr}
 801a7cc:	460c      	mov	r4, r1
 801a7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7d2:	f000 f855 	bl	801a880 <_lseek_r>
 801a7d6:	1c43      	adds	r3, r0, #1
 801a7d8:	89a3      	ldrh	r3, [r4, #12]
 801a7da:	bf15      	itete	ne
 801a7dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801a7de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a7e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a7e6:	81a3      	strheq	r3, [r4, #12]
 801a7e8:	bf18      	it	ne
 801a7ea:	81a3      	strhne	r3, [r4, #12]
 801a7ec:	bd10      	pop	{r4, pc}

0801a7ee <__sclose>:
 801a7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7f2:	f000 b813 	b.w	801a81c <_close_r>
	...

0801a7f8 <_write_r>:
 801a7f8:	b538      	push	{r3, r4, r5, lr}
 801a7fa:	4d07      	ldr	r5, [pc, #28]	; (801a818 <_write_r+0x20>)
 801a7fc:	4604      	mov	r4, r0
 801a7fe:	4608      	mov	r0, r1
 801a800:	4611      	mov	r1, r2
 801a802:	2200      	movs	r2, #0
 801a804:	602a      	str	r2, [r5, #0]
 801a806:	461a      	mov	r2, r3
 801a808:	f7e6 f973 	bl	8000af2 <_write>
 801a80c:	1c43      	adds	r3, r0, #1
 801a80e:	d102      	bne.n	801a816 <_write_r+0x1e>
 801a810:	682b      	ldr	r3, [r5, #0]
 801a812:	b103      	cbz	r3, 801a816 <_write_r+0x1e>
 801a814:	6023      	str	r3, [r4, #0]
 801a816:	bd38      	pop	{r3, r4, r5, pc}
 801a818:	20008660 	.word	0x20008660

0801a81c <_close_r>:
 801a81c:	b538      	push	{r3, r4, r5, lr}
 801a81e:	4d06      	ldr	r5, [pc, #24]	; (801a838 <_close_r+0x1c>)
 801a820:	2300      	movs	r3, #0
 801a822:	4604      	mov	r4, r0
 801a824:	4608      	mov	r0, r1
 801a826:	602b      	str	r3, [r5, #0]
 801a828:	f7e6 fcb1 	bl	800118e <_close>
 801a82c:	1c43      	adds	r3, r0, #1
 801a82e:	d102      	bne.n	801a836 <_close_r+0x1a>
 801a830:	682b      	ldr	r3, [r5, #0]
 801a832:	b103      	cbz	r3, 801a836 <_close_r+0x1a>
 801a834:	6023      	str	r3, [r4, #0]
 801a836:	bd38      	pop	{r3, r4, r5, pc}
 801a838:	20008660 	.word	0x20008660

0801a83c <_fstat_r>:
 801a83c:	b538      	push	{r3, r4, r5, lr}
 801a83e:	4d07      	ldr	r5, [pc, #28]	; (801a85c <_fstat_r+0x20>)
 801a840:	2300      	movs	r3, #0
 801a842:	4604      	mov	r4, r0
 801a844:	4608      	mov	r0, r1
 801a846:	4611      	mov	r1, r2
 801a848:	602b      	str	r3, [r5, #0]
 801a84a:	f7e6 fcac 	bl	80011a6 <_fstat>
 801a84e:	1c43      	adds	r3, r0, #1
 801a850:	d102      	bne.n	801a858 <_fstat_r+0x1c>
 801a852:	682b      	ldr	r3, [r5, #0]
 801a854:	b103      	cbz	r3, 801a858 <_fstat_r+0x1c>
 801a856:	6023      	str	r3, [r4, #0]
 801a858:	bd38      	pop	{r3, r4, r5, pc}
 801a85a:	bf00      	nop
 801a85c:	20008660 	.word	0x20008660

0801a860 <_isatty_r>:
 801a860:	b538      	push	{r3, r4, r5, lr}
 801a862:	4d06      	ldr	r5, [pc, #24]	; (801a87c <_isatty_r+0x1c>)
 801a864:	2300      	movs	r3, #0
 801a866:	4604      	mov	r4, r0
 801a868:	4608      	mov	r0, r1
 801a86a:	602b      	str	r3, [r5, #0]
 801a86c:	f7e6 fcab 	bl	80011c6 <_isatty>
 801a870:	1c43      	adds	r3, r0, #1
 801a872:	d102      	bne.n	801a87a <_isatty_r+0x1a>
 801a874:	682b      	ldr	r3, [r5, #0]
 801a876:	b103      	cbz	r3, 801a87a <_isatty_r+0x1a>
 801a878:	6023      	str	r3, [r4, #0]
 801a87a:	bd38      	pop	{r3, r4, r5, pc}
 801a87c:	20008660 	.word	0x20008660

0801a880 <_lseek_r>:
 801a880:	b538      	push	{r3, r4, r5, lr}
 801a882:	4d07      	ldr	r5, [pc, #28]	; (801a8a0 <_lseek_r+0x20>)
 801a884:	4604      	mov	r4, r0
 801a886:	4608      	mov	r0, r1
 801a888:	4611      	mov	r1, r2
 801a88a:	2200      	movs	r2, #0
 801a88c:	602a      	str	r2, [r5, #0]
 801a88e:	461a      	mov	r2, r3
 801a890:	f7e6 fca4 	bl	80011dc <_lseek>
 801a894:	1c43      	adds	r3, r0, #1
 801a896:	d102      	bne.n	801a89e <_lseek_r+0x1e>
 801a898:	682b      	ldr	r3, [r5, #0]
 801a89a:	b103      	cbz	r3, 801a89e <_lseek_r+0x1e>
 801a89c:	6023      	str	r3, [r4, #0]
 801a89e:	bd38      	pop	{r3, r4, r5, pc}
 801a8a0:	20008660 	.word	0x20008660

0801a8a4 <__malloc_lock>:
 801a8a4:	4801      	ldr	r0, [pc, #4]	; (801a8ac <__malloc_lock+0x8>)
 801a8a6:	f7ff bad5 	b.w	8019e54 <__retarget_lock_acquire_recursive>
 801a8aa:	bf00      	nop
 801a8ac:	20008654 	.word	0x20008654

0801a8b0 <__malloc_unlock>:
 801a8b0:	4801      	ldr	r0, [pc, #4]	; (801a8b8 <__malloc_unlock+0x8>)
 801a8b2:	f7ff bad0 	b.w	8019e56 <__retarget_lock_release_recursive>
 801a8b6:	bf00      	nop
 801a8b8:	20008654 	.word	0x20008654

0801a8bc <_read_r>:
 801a8bc:	b538      	push	{r3, r4, r5, lr}
 801a8be:	4d07      	ldr	r5, [pc, #28]	; (801a8dc <_read_r+0x20>)
 801a8c0:	4604      	mov	r4, r0
 801a8c2:	4608      	mov	r0, r1
 801a8c4:	4611      	mov	r1, r2
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	602a      	str	r2, [r5, #0]
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	f7e6 fc42 	bl	8001154 <_read>
 801a8d0:	1c43      	adds	r3, r0, #1
 801a8d2:	d102      	bne.n	801a8da <_read_r+0x1e>
 801a8d4:	682b      	ldr	r3, [r5, #0]
 801a8d6:	b103      	cbz	r3, 801a8da <_read_r+0x1e>
 801a8d8:	6023      	str	r3, [r4, #0]
 801a8da:	bd38      	pop	{r3, r4, r5, pc}
 801a8dc:	20008660 	.word	0x20008660

0801a8e0 <_init>:
 801a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8e2:	bf00      	nop
 801a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8e6:	bc08      	pop	{r3}
 801a8e8:	469e      	mov	lr, r3
 801a8ea:	4770      	bx	lr

0801a8ec <_fini>:
 801a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8ee:	bf00      	nop
 801a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a8f2:	bc08      	pop	{r3}
 801a8f4:	469e      	mov	lr, r3
 801a8f6:	4770      	bx	lr
