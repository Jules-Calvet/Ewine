
Test_Tof_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac5c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0801ad9c  0801ad9c  0002ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b2bc  0801b2bc  0002b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b2c4  0801b2c4  0002b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b2c8  0801b2c8  0002b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000008  0801b2cc  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000086d4  200000f0  0801b3b0  000300f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200087c4  0801b3b0  000387c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006696f  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000718c  00000000  00000000  00096a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000033b8  00000000  00000000  0009dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030a0  00000000  00000000  000a0fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ff1a  00000000  00000000  000a4070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d2b9  00000000  00000000  000d3f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011b085  00000000  00000000  00111243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022c2c8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e6e8  00000000  00000000  0022c318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f0 	.word	0x200000f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801ad84 	.word	0x0801ad84

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f4 	.word	0x200000f4
 800017c:	0801ad84 	.word	0x0801ad84

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Process_R(void);
static void VL_53L1A2_SimpleRanging_Process_L(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init_C();
 80005c8:	f000 f82a 	bl	8000620 <VL_53L1A2_SimpleRanging_Init_C>
  VL_53L1A2_SimpleRanging_Init_R();
 80005cc:	f000 f844 	bl	8000658 <VL_53L1A2_SimpleRanging_Init_R>
  VL_53L1A2_SimpleRanging_Init_L();
 80005d0:	f000 f85e 	bl	8000690 <VL_53L1A2_SimpleRanging_Init_L>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */
  printf("\n ---- start TOF Center ---- \n\n");
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <VL_TOF_Process+0x30>)
 80005de:	f019 fbf7 	bl	8019dd0 <puts>
  VL_53L1A2_SimpleRanging_Process_C();
 80005e2:	f000 f871 	bl	80006c8 <VL_53L1A2_SimpleRanging_Process_C>
  printf("\n ---- end TOF Center ---- \n\n");
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <VL_TOF_Process+0x34>)
 80005e8:	f019 fbf2 	bl	8019dd0 <puts>

  printf("\n ---- start TOF Right ---- \n\n");
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <VL_TOF_Process+0x38>)
 80005ee:	f019 fbef 	bl	8019dd0 <puts>
 // VL_53L1A2_SimpleRanging_Process_R();
  printf("\n ---- end TOF Right ---- \n\n");
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <VL_TOF_Process+0x3c>)
 80005f4:	f019 fbec 	bl	8019dd0 <puts>

  printf("\n ---- start TOF Left ---- \n\n");
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <VL_TOF_Process+0x40>)
 80005fa:	f019 fbe9 	bl	8019dd0 <puts>
  //VL_53L1A2_SimpleRanging_Process_L();
  printf("\n ---- end TOF Left ---- \n\n");
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <VL_TOF_Process+0x44>)
 8000600:	f019 fbe6 	bl	8019dd0 <puts>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	0801ad9c 	.word	0x0801ad9c
 800060c:	0801adbc 	.word	0x0801adbc
 8000610:	0801addc 	.word	0x0801addc
 8000614:	0801adfc 	.word	0x0801adfc
 8000618:	0801ae18 	.word	0x0801ae18
 800061c:	0801ae38 	.word	0x0801ae38

08000620 <VL_53L1A2_SimpleRanging_Init_C>:

static void VL_53L1A2_SimpleRanging_Init_C(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 8000624:	2001      	movs	r0, #1
 8000626:	f001 f97f 	bl	8001928 <VL53L1A2_RANGING_SENSOR_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 800062e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <VL_53L1A2_SimpleRanging_Init_C+0x2c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <VL_53L1A2_SimpleRanging_Init_C+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <VL_53L1A2_SimpleRanging_Init_C+0x30>)
 800063a:	f019 fbc9 	bl	8019dd0 <puts>
    while(1);
 800063e:	e7fe      	b.n	800063e <VL_53L1A2_SimpleRanging_Init_C+0x1e>
  }
  printf(" ****** Initialization TOF CENTER OK ****** \n");
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <VL_53L1A2_SimpleRanging_Init_C+0x34>)
 8000642:	f019 fbc5 	bl	8019dd0 <puts>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000120 	.word	0x20000120
 8000650:	0801ae54 	.word	0x0801ae54
 8000654:	0801ae78 	.word	0x0801ae78

08000658 <VL_53L1A2_SimpleRanging_Init_R>:
static void VL_53L1A2_SimpleRanging_Init_R(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);
 800065c:	2002      	movs	r0, #2
 800065e:	f001 f963 	bl	8001928 <VL53L1A2_RANGING_SENSOR_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 8000666:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusRight != BSP_ERROR_NONE)
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <VL_53L1A2_SimpleRanging_Init_R+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <VL_53L1A2_SimpleRanging_Init_R+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <VL_53L1A2_SimpleRanging_Init_R+0x30>)
 8000672:	f019 fbad 	bl	8019dd0 <puts>
    while(1);
 8000676:	e7fe      	b.n	8000676 <VL_53L1A2_SimpleRanging_Init_R+0x1e>
  }
  printf(" ****** Initialization TOF RIGHT OK ****** \n");
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <VL_53L1A2_SimpleRanging_Init_R+0x34>)
 800067a:	f019 fba9 	bl	8019dd0 <puts>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000124 	.word	0x20000124
 8000688:	0801ae54 	.word	0x0801ae54
 800068c:	0801aea8 	.word	0x0801aea8

08000690 <VL_53L1A2_SimpleRanging_Init_L>:
static void VL_53L1A2_SimpleRanging_Init_L(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 8000694:	2000      	movs	r0, #0
 8000696:	f001 f947 	bl	8001928 <VL53L1A2_RANGING_SENSOR_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 800069e:	6013      	str	r3, [r2, #0]

  // DEBUG ERROR
  if (statusLeft != BSP_ERROR_NONE)
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <VL_53L1A2_SimpleRanging_Init_L+0x2c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d003      	beq.n	80006b0 <VL_53L1A2_SimpleRanging_Init_L+0x20>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <VL_53L1A2_SimpleRanging_Init_L+0x30>)
 80006aa:	f019 fb91 	bl	8019dd0 <puts>
    while(1);
 80006ae:	e7fe      	b.n	80006ae <VL_53L1A2_SimpleRanging_Init_L+0x1e>
  }
  printf(" ****** Initialization TOF LEFT OK ****** \n");
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <VL_53L1A2_SimpleRanging_Init_L+0x34>)
 80006b2:	f019 fb8d 	bl	8019dd0 <puts>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000128 	.word	0x20000128
 80006c0:	0801ae54 	.word	0x0801ae54
 80006c4:	0801aed4 	.word	0x0801aed4

080006c8 <VL_53L1A2_SimpleRanging_Process_C>:

static void VL_53L1A2_SimpleRanging_Process_C(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  uint32_t Id_Center;
  RANGING_SENSOR_Result_t Result_Center;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 80006ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006d2:	4619      	mov	r1, r3
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f94d 	bl	8001974 <VL53L1A2_RANGING_SENSOR_ReadID>

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006e2:	221e      	movs	r2, #30
 80006e4:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]

  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 80006f8:	491e      	ldr	r1, [pc, #120]	; (8000774 <VL_53L1A2_SimpleRanging_Process_C+0xac>)
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 f962 	bl	80019c4 <VL53L1A2_RANGING_SENSOR_ConfigProfile>

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000700:	2101      	movs	r1, #1
 8000702:	2001      	movs	r0, #1
 8000704:	f001 f9ae 	bl	8001a64 <VL53L1A2_RANGING_SENSOR_Start>
 8000708:	4603      	mov	r3, r0
 800070a:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800070c:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d003      	beq.n	800071e <VL_53L1A2_SimpleRanging_Process_C+0x56>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 8000716:	4819      	ldr	r0, [pc, #100]	; (800077c <VL_53L1A2_SimpleRanging_Process_C+0xb4>)
 8000718:	f019 fb5a 	bl	8019dd0 <puts>
    while(1);
 800071c:	e7fe      	b.n	800071c <VL_53L1A2_SimpleRanging_Process_C+0x54>
  }
/*
  while (1)
  {*/
  for(int i = 1 ; i < 6 ; i++){
 800071e:	2301      	movs	r3, #1
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000722:	e01a      	b.n	800075a <VL_53L1A2_SimpleRanging_Process_C+0x92>
    /* repetition mode */
    statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	2001      	movs	r0, #1
 800072a:	f001 f973 	bl	8001a14 <VL53L1A2_RANGING_SENSOR_GetDistance>
 800072e:	4603      	mov	r3, r0
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000732:	6013      	str	r3, [r2, #0]

    if (statusCenter == BSP_ERROR_NONE)
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d107      	bne.n	800074c <VL_53L1A2_SimpleRanging_Process_C+0x84>
    {
      printf("\n CENTER %d\n",i);
 800073c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800073e:	4810      	ldr	r0, [pc, #64]	; (8000780 <VL_53L1A2_SimpleRanging_Process_C+0xb8>)
 8000740:	f019 faaa 	bl	8019c98 <iprintf>
      print_result(&Result_Center);
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f81c 	bl	8000784 <print_result>
    }

    HAL_Delay(1500);
 800074c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000750:	f015 f800 	bl	8015754 <HAL_Delay>
  for(int i = 1 ; i < 6 ; i++){
 8000754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000756:	3301      	adds	r3, #1
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
 800075a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800075c:	2b05      	cmp	r3, #5
 800075e:	dde1      	ble.n	8000724 <VL_53L1A2_SimpleRanging_Process_C+0x5c>
  }
  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8000760:	2001      	movs	r0, #1
 8000762:	f001 f9a7 	bl	8001ab4 <VL53L1A2_RANGING_SENSOR_Stop>
 8000766:	4603      	mov	r3, r0
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <VL_53L1A2_SimpleRanging_Process_C+0xb0>)
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000010c 	.word	0x2000010c
 8000778:	20000120 	.word	0x20000120
 800077c:	0801af00 	.word	0x0801af00
 8000780:	0801af2c 	.word	0x0801af2c

08000784 <print_result>:
  }
  statusLeft = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_LEFT);
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e03f      	b.n	8000812 <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	3304      	adds	r3, #4
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <print_result+0xa4>)
 80007a8:	f019 fa76 	bl	8019c98 <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]
 80007b0:	e020      	b.n	80007f4 <print_result+0x70>
    {
      printf("\n |---> ");
 80007b2:	481e      	ldr	r0, [pc, #120]	; (800082c <print_result+0xa8>)
 80007b4:	f019 fa70 	bl	8019c98 <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	7bb8      	ldrb	r0, [r7, #14]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	4413      	add	r3, r2
 80007c4:	4403      	add	r3, r0
 80007c6:	3304      	adds	r3, #4
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007ce:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	7bb8      	ldrb	r0, [r7, #14]
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	4403      	add	r3, r0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007e4:	461a      	mov	r2, r3
 80007e6:	4621      	mov	r1, r4
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <print_result+0xac>)
 80007ea:	f019 fa55 	bl	8019c98 <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	73bb      	strb	r3, [r7, #14]
 80007f4:	7bb9      	ldrb	r1, [r7, #14]
 80007f6:	7bfa      	ldrb	r2, [r7, #15]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	011b      	lsls	r3, r3, #4
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4403      	add	r3, r0
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4299      	cmp	r1, r3
 800080a:	d3d2      	bcc.n	80007b2 <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	3301      	adds	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0bc      	beq.n	8000792 <print_result+0xe>
    }
  }
  printf ("\n");
 8000818:	200a      	movs	r0, #10
 800081a:	f019 fa55 	bl	8019cc8 <putchar>
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	bf00      	nop
 8000828:	0801afac 	.word	0x0801afac
 800082c:	0801afbc 	.word	0x0801afbc
 8000830:	0801afc8 	.word	0x0801afc8

08000834 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800083c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4313      	orrs	r3, r2
 800084a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800084c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000858:	68fb      	ldr	r3, [r7, #12]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	2004      	movs	r0, #4
 800087e:	f7ff ffd9 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff ffd6 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff ffd3 	bl	8000834 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2008      	movs	r0, #8
 8000890:	f7ff ffd0 	bl	8000834 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f015 faf5 	bl	8015e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2123      	movs	r1, #35	; 0x23
 80008a6:	4823      	ldr	r0, [pc, #140]	; (8000934 <MX_GPIO_Init+0xcc>)
 80008a8:	f015 faf0 	bl	8015e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f015 f87b 	bl	80159c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f015 f86d 	bl	80159c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4810      	ldr	r0, [pc, #64]	; (8000938 <MX_GPIO_Init+0xd0>)
 80008f8:	f015 f862 	bl	80159c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80008fc:	2323      	movs	r3, #35	; 0x23
 80008fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_GPIO_Init+0xcc>)
 8000912:	f015 f855 	bl	80159c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000916:	2303      	movs	r3, #3
 8000918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0xd4>)
 8000928:	f015 f84a 	bl	80159c0 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	48000400 	.word	0x48000400
 8000938:	48000800 	.word	0x48000800
 800093c:	48000c00 	.word	0x48000c00

08000940 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000948:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800094c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d013      	beq.n	8000980 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800095c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000960:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00b      	beq.n	8000980 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000968:	e000      	b.n	800096c <ITM_SendChar+0x2c>
    {
      __NOP();
 800096a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800096c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f9      	beq.n	800096a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000976:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800099e:	f023 0218 	bic.w	r2, r3, #24
 80009a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e009      	b.n	80009e0 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	60ba      	str	r2, [r7, #8]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ffb3 	bl	8000940 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf1      	blt.n	80009cc <_write+0x12>
}
return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f014 fe60 	bl	80156bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f81c 	bl	8000a38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a00:	f000 f890 	bl	8000b24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff ff30 	bl	8000868 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000a08:	f000 fcf0 	bl	80013ec <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 8000a0c:	f000 fc2c 	bl	8001268 <MX_LPUART1_UART_Init>
  MX_TOF_Init();
 8000a10:	f018 fff8 	bl	8019a04 <MX_TOF_Init>
  /* USER CODE BEGIN 2 */
  //Tof Initialization
  VL_TOF_Init();
 8000a14:	f7ff fdd6 	bl	80005c4 <VL_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 8000a18:	f018 fffa 	bl	8019a10 <MX_TOF_Process>
    /* USER CODE BEGIN 3 */

	  printf("\n\n ****** Start TOF Test ****** \n\n");
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <main+0x3c>)
 8000a1e:	f019 f9d7 	bl	8019dd0 <puts>
	  VL_TOF_Process();
 8000a22:	f7ff fdd9 	bl	80005d8 <VL_TOF_Process>
	  printf("\n\n ****** End TOF Test ****** \n\n");
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <main+0x40>)
 8000a28:	f019 f9d2 	bl	8019dd0 <puts>
  {
 8000a2c:	e7f4      	b.n	8000a18 <main+0x24>
 8000a2e:	bf00      	nop
 8000a30:	0801afec 	.word	0x0801afec
 8000a34:	0801b010 	.word	0x0801b010

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b09a      	sub	sp, #104	; 0x68
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2248      	movs	r2, #72	; 0x48
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f019 f91e 	bl	8019c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a6c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	f023 0303 	bic.w	r3, r3, #3
 8000a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a82:	f016 f937 	bl	8016cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f7ff ff81 	bl	800098e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemClock_Config+0xe8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <SystemClock_Config+0xe8>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <SystemClock_Config+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000aa8:	2327      	movs	r3, #39	; 0x27
 8000aaa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2340      	movs	r3, #64	; 0x40
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ac8:	2360      	movs	r3, #96	; 0x60
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f016 fcad 	bl	8017434 <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ae0:	f000 f850 	bl	8000b84 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ae4:	236f      	movs	r3, #111	; 0x6f
 8000ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2101      	movs	r1, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f017 f809 	bl	8017b1c <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000b10:	f000 f838 	bl	8000b84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b14:	f017 fdf6 	bl	8018704 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b18:	bf00      	nop
 8000b1a:	3768      	adds	r7, #104	; 0x68
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58000400 	.word	0x58000400

08000b24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2250      	movs	r2, #80	; 0x50
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f019 f8a9 	bl	8019c88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4618      	mov	r0, r3
 8000b48:	f017 fc66 	bl	8018418 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b52:	f000 f817 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f014 fdc3 	bl	80156fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40014800 	.word	0x40014800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>

08000b8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	201a      	movs	r0, #26
 8000be6:	f014 feb5 	bl	8015954 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000bea:	201a      	movs	r0, #26
 8000bec:	f014 fecc 	bl	8015988 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000bf0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bf4:	f7ff ffd2 	bl	8000b9c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf8:	f107 0208 	add.w	r2, r7, #8
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f017 f976 	bl	8017ef4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c08:	f017 f95e 	bl	8017ec8 <HAL_RCC_GetPCLK2Freq>
 8000c0c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <HAL_InitTick+0x8c>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_InitTick+0x90>)
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_InitTick+0x94>)
 8000c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_InitTick+0x90>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_InitTick+0x90>)
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_InitTick+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_InitTick+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <HAL_InitTick+0x90>)
 8000c3e:	f017 fe78 	bl	8018932 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_InitTick+0x90>)
 8000c4a:	f017 fed3 	bl	80189f4 <HAL_TIM_Base_Start_IT>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3730      	adds	r7, #48	; 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	2000012c 	.word	0x2000012c
 8000c64:	40014800 	.word	0x40014800

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000cc6:	f017 fee3 	bl	8018a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000012c 	.word	0x2000012c

08000cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <I2C1_EV_IRQHandler+0x10>)
 8000cda:	f015 fbab 	bl	8016434 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000178 	.word	0x20000178

08000ce8 <LL_AHB2_GRP1_EnableClock>:
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <LL_APB1_GRP1_EnableClock>:
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_APB1_GRP1_DisableClock>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d62:	4013      	ands	r3, r2
 8000d64:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <BSP_I2C1_Init+0x70>)
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <BSP_I2C1_Init+0x74>)
 8000d82:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <BSP_I2C1_Init+0x78>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	4918      	ldr	r1, [pc, #96]	; (8000dec <BSP_I2C1_Init+0x78>)
 8000d8c:	600a      	str	r2, [r1, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d122      	bne.n	8000dd8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <BSP_I2C1_Init+0x70>)
 8000d94:	f015 fb68 	bl	8016468 <HAL_I2C_GetState>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11c      	bne.n	8000dd8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <BSP_I2C1_Init+0x70>)
 8000da0:	f000 f8ee 	bl	8000f80 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d116      	bne.n	8000dd8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <BSP_I2C1_Init+0x70>)
 8000dac:	f000 f8a4 	bl	8000ef8 <MX_I2C1_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000db6:	f06f 0307 	mvn.w	r3, #7
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	e00c      	b.n	8000dd8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <BSP_I2C1_Init+0x70>)
 8000dc2:	f015 fdfd 	bl	80169c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000dcc:	f06f 0307 	mvn.w	r3, #7
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e001      	b.n	8000dd8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000178 	.word	0x20000178
 8000de8:	40005400 	.word	0x40005400
 8000dec:	200001cc 	.word	0x200001cc

08000df0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <BSP_I2C1_DeInit+0x48>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d014      	beq.n	8000e2c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <BSP_I2C1_DeInit+0x48>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <BSP_I2C1_DeInit+0x48>)
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <BSP_I2C1_DeInit+0x48>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <BSP_I2C1_DeInit+0x4c>)
 8000e16:	f000 f8ff 	bl	8001018 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000e1a:	4808      	ldr	r0, [pc, #32]	; (8000e3c <BSP_I2C1_DeInit+0x4c>)
 8000e1c:	f015 f8dd 	bl	8015fda <HAL_I2C_DeInit>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000e26:	f06f 0307 	mvn.w	r3, #7
 8000e2a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc
 8000e3c:	20000178 	.word	0x20000178

08000e40 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	80fb      	strh	r3, [r7, #6]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	88f9      	ldrh	r1, [r7, #6]
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	9200      	str	r2, [sp, #0]
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <BSP_I2C1_Send+0x50>)
 8000e62:	f015 f8fd 	bl	8016060 <HAL_I2C_Master_Transmit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00c      	beq.n	8000e86 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <BSP_I2C1_Send+0x50>)
 8000e6e:	f015 fb09 	bl	8016484 <HAL_I2C_GetError>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d003      	beq.n	8000e80 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e78:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e002      	b.n	8000e86 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e80:	f06f 0303 	mvn.w	r3, #3
 8000e84:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e86:	68fb      	ldr	r3, [r7, #12]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000178 	.word	0x20000178

08000e94 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	88f9      	ldrh	r1, [r7, #6]
 8000eac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb0:	9200      	str	r2, [sp, #0]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <BSP_I2C1_Recv+0x50>)
 8000eb6:	f015 f9c7 	bl	8016248 <HAL_I2C_Master_Receive>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00c      	beq.n	8000eda <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000ec0:	4808      	ldr	r0, [pc, #32]	; (8000ee4 <BSP_I2C1_Recv+0x50>)
 8000ec2:	f015 fadf 	bl	8016484 <HAL_I2C_GetError>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d003      	beq.n	8000ed4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ecc:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e002      	b.n	8000eda <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000ed4:	f06f 0303 	mvn.w	r3, #3
 8000ed8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000178 	.word	0x20000178

08000ee8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000eec:	f014 fc1a 	bl	8015724 <HAL_GetTick>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C1_Init+0x80>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00300F38;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C1_Init+0x84>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f014 ffbe 	bl	8015ebc <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f015 fd37 	bl	80169c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f015 fd79 	bl	8016a56 <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	00300f38 	.word	0x00300f38

08000f80 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09c      	sub	sp, #112	; 0x70
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2250      	movs	r2, #80	; 0x50
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f018 fe79 	bl	8019c88 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f96:	2304      	movs	r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f9a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f017 fa37 	bl	8018418 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2002      	movs	r0, #2
 8000fac:	f7ff fe9c 	bl	8000ce8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000fc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <I2C1_MspInit+0x94>)
 8000fce:	f014 fcf7 	bl	80159c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000fe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fec:	4619      	mov	r1, r3
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <I2C1_MspInit+0x94>)
 8000ff0:	f014 fce6 	bl	80159c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ff4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000ff8:	f7ff fe8f 	bl	8000d1a <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	201e      	movs	r0, #30
 8001002:	f014 fca7 	bl	8015954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001006:	201e      	movs	r0, #30
 8001008:	f014 fcbe 	bl	8015988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	3770      	adds	r7, #112	; 0x70
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	48000400 	.word	0x48000400

08001018 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001020:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001024:	f7ff fe92 	bl	8000d4c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4807      	ldr	r0, [pc, #28]	; (800104c <I2C1_MspDeInit+0x34>)
 800102e:	f014 fe37 	bl	8015ca0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <I2C1_MspDeInit+0x34>)
 8001038:	f014 fe32 	bl	8015ca0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800103c:	201e      	movs	r0, #30
 800103e:	f014 fcb1 	bl	80159a4 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	48000400 	.word	0x48000400

08001050 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00a      	b.n	8001078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001062:	f3af 8000 	nop.w
 8001066:	4601      	mov	r1, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	60ba      	str	r2, [r7, #8]
 800106e:	b2ca      	uxtb	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <_read+0x12>
  }

  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:
  }
  return len;
}

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f018 fd78 	bl	8019c18 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20030000 	.word	0x20030000
 8001154:	00000400 	.word	0x00000400
 8001158:	200001d0 	.word	0x200001d0
 800115c:	200087c8 	.word	0x200087c8

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemInit+0x98>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <SystemInit+0x98>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001188:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800118c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800118e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <SystemInit+0x9c>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011aa:	f023 0305 	bic.w	r3, r3, #5
 80011ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <SystemInit+0xa0>)
 80011cc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <SystemInit+0xa0>)
 80011d4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	faf6fefb 	.word	0xfaf6fefb
 8001200:	22041000 	.word	0x22041000

08001204 <LL_AHB2_GRP1_EnableClock>:
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4313      	orrs	r3, r2
 800121a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001228:	68fb      	ldr	r3, [r7, #12]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_APB1_GRP2_EnableClock>:
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800123e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4313      	orrs	r3, r2
 800124c:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4013      	ands	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <MX_LPUART1_UART_Init+0x94>)
 8001270:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012b2:	f017 fdd7 	bl	8018e64 <HAL_UART_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80012bc:	f7ff fc62 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c0:	2100      	movs	r1, #0
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012c4:	f018 fa98 	bl	80197f8 <HAL_UARTEx_SetTxFifoThreshold>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ce:	f7ff fc59 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d2:	2100      	movs	r1, #0
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012d6:	f018 facd 	bl	8019874 <HAL_UARTEx_SetRxFifoThreshold>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012e0:	f7ff fc50 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 80012e6:	f018 fa4e 	bl	8019786 <HAL_UARTEx_DisableFifoMode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012f0:	f7ff fc48 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001d4 	.word	0x200001d4
 80012fc:	40008000 	.word	0x40008000

08001300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09c      	sub	sp, #112	; 0x70
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2250      	movs	r2, #80	; 0x50
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f018 fcb1 	bl	8019c88 <memset>
  if(uartHandle->Instance==LPUART1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <HAL_UART_MspInit+0x84>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d124      	bne.n	800137a <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001330:	2302      	movs	r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4618      	mov	r0, r3
 800133e:	f017 f86b 	bl	8018418 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001348:	f7ff fc1c 	bl	8000b84 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff ff72 	bl	8001236 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff ff56 	bl	8001204 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001358:	230c      	movs	r3, #12
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001368:	2308      	movs	r3, #8
 800136a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f014 fb23 	bl	80159c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800137a:	bf00      	nop
 800137c:	3770      	adds	r7, #112	; 0x70
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40008000 	.word	0x40008000

08001388 <LL_AHB2_GRP1_EnableClock>:
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ac:	68fb      	ldr	r3, [r7, #12]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_APB1_GRP1_EnableClock>:
{
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_USB_PCD_Init+0x48>)
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <MX_USB_PCD_Init+0x4c>)
 80013f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USB_PCD_Init+0x48>)
 80013f8:	2208      	movs	r2, #8
 80013fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_USB_PCD_Init+0x48>)
 80013fe:	2202      	movs	r2, #2
 8001400:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USB_PCD_Init+0x48>)
 8001404:	2202      	movs	r2, #2
 8001406:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_USB_PCD_Init+0x48>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USB_PCD_Init+0x48>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_USB_PCD_Init+0x48>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USB_PCD_Init+0x48>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_USB_PCD_Init+0x48>)
 8001422:	f015 fb64 	bl	8016aee <HAL_PCD_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800142c:	f7ff fbaa 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000268 	.word	0x20000268
 8001438:	40006800 	.word	0x40006800

0800143c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b09c      	sub	sp, #112	; 0x70
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2250      	movs	r2, #80	; 0x50
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f018 fc13 	bl	8019c88 <memset>
  if(pcdHandle->Instance==USB)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_PCD_MspInit+0xa8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d136      	bne.n	80014da <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800146c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001470:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001472:	2318      	movs	r3, #24
 8001474:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800147c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001480:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001482:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001486:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800148c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800148e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4618      	mov	r0, r3
 800149a:	f016 ffbd 	bl	8018418 <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80014a4:	f7ff fb6e 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff ff6d 	bl	8001388 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80014c0:	230a      	movs	r3, #10
 80014c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f014 fa77 	bl	80159c0 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014d2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80014d6:	f7ff ff70 	bl	80013ba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3770      	adds	r7, #112	; 0x70
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40006800 	.word	0x40006800

080014e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80014e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ec:	3304      	adds	r3, #4

080014ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80014f2:	d3f9      	bcc.n	80014e8 <CopyDataInit>
  bx lr
 80014f4:	4770      	bx	lr

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80014f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80014f8:	3004      	adds	r0, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80014fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>
  bx lr
 80014fe:	4770      	bx	lr

08001500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001502:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f7ff fe2c 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopForever+0x6>)
 800150a:	490c      	ldr	r1, [pc, #48]	; (800153c <LoopForever+0xa>)
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <LoopForever+0xe>)
 800150e:	2300      	movs	r3, #0
 8001510:	f7ff ffed 	bl	80014ee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <LoopForever+0x12>)
 8001516:	490c      	ldr	r1, [pc, #48]	; (8001548 <LoopForever+0x16>)
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <LoopForever+0x1a>)
 800151a:	2300      	movs	r3, #0
 800151c:	f7ff ffe7 	bl	80014ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <LoopForever+0x1e>)
 8001522:	490c      	ldr	r1, [pc, #48]	; (8001554 <LoopForever+0x22>)
 8001524:	2300      	movs	r3, #0
 8001526:	f7ff ffe8 	bl	80014fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800152a:	f018 fb7b 	bl	8019c24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800152e:	f7ff fa61 	bl	80009f4 <main>

08001532 <LoopForever>:

LoopForever:
  b LoopForever
 8001532:	e7fe      	b.n	8001532 <LoopForever>
  ldr   r0, =_estack
 8001534:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001538:	20000008 	.word	0x20000008
 800153c:	200000ec 	.word	0x200000ec
 8001540:	0801b2cc 	.word	0x0801b2cc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001544:	20030000 	.word	0x20030000
 8001548:	20030000 	.word	0x20030000
 800154c:	0801b3b0 	.word	0x0801b3b0
  INIT_BSS _sbss, _ebss
 8001550:	200000f0 	.word	0x200000f0
 8001554:	200087c4 	.word	0x200087c4

08001558 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_IRQHandler>

0800155a <LL_AHB2_GRP1_EnableClock>:
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4313      	orrs	r3, r2
 8001570:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <VL53L1A2_Init+0xe4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	4934      	ldr	r1, [pc, #208]	; (8001670 <VL53L1A2_Init+0xe4>)
 800159e:	600a      	str	r2, [r1, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d154      	bne.n	800164e <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80015a4:	f000 f8d4 	bl	8001750 <_I2cFailRecover>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 80015b0:	f7ff fbe0 	bl	8000d74 <BSP_I2C1_Init>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d147      	bne.n	8001652 <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80015c2:	463a      	mov	r2, r7
 80015c4:	2302      	movs	r3, #2
 80015c6:	2100      	movs	r1, #0
 80015c8:	2086      	movs	r0, #134	; 0x86
 80015ca:	f000 f953 	bl	8001874 <_ExpanderRd>
 80015ce:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d13f      	bne.n	8001656 <VL53L1A2_Init+0xca>
 80015d6:	783b      	ldrb	r3, [r7, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d13c      	bne.n	8001656 <VL53L1A2_Init+0xca>
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b16      	cmp	r3, #22
 80015e0:	d139      	bne.n	8001656 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 80015e2:	463a      	mov	r2, r7
 80015e4:	2302      	movs	r3, #2
 80015e6:	2100      	movs	r1, #0
 80015e8:	2084      	movs	r0, #132	; 0x84
 80015ea:	f000 f943 	bl	8001874 <_ExpanderRd>
 80015ee:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d131      	bne.n	800165a <VL53L1A2_Init+0xce>
 80015f6:	783b      	ldrb	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d12e      	bne.n	800165a <VL53L1A2_Init+0xce>
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b16      	cmp	r3, #22
 8001600:	d12b      	bne.n	800165a <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <VL53L1A2_Init+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001608:	23ff      	movs	r3, #255	; 0xff
 800160a:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001610:	463a      	mov	r2, r7
 8001612:	2302      	movs	r3, #2
 8001614:	2114      	movs	r1, #20
 8001616:	2086      	movs	r0, #134	; 0x86
 8001618:	f000 f95e 	bl	80018d8 <_ExpanderWR>
 800161c:	6078      	str	r0, [r7, #4]

	  if (status)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11c      	bne.n	800165e <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001624:	23ff      	movs	r3, #255	; 0xff
 8001626:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001628:	23bf      	movs	r3, #191	; 0xbf
 800162a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 800162c:	463a      	mov	r2, r7
 800162e:	2302      	movs	r3, #2
 8001630:	2114      	movs	r1, #20
 8001632:	2084      	movs	r0, #132	; 0x84
 8001634:	f000 f950 	bl	80018d8 <_ExpanderWR>
 8001638:	6078      	str	r0, [r7, #4]

	  if (status)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d110      	bne.n	8001662 <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <VL53L1A2_Init+0xe8>)
 8001642:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001646:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001648:	f000 f8f4 	bl	8001834 <_ExpandersSetAllIO>
 800164c:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800164e:	bf00      	nop
 8001650:	e008      	b.n	8001664 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001652:	bf00      	nop
 8001654:	e006      	b.n	8001664 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001656:	bf00      	nop
 8001658:	e004      	b.n	8001664 <VL53L1A2_Init+0xd8>
		  goto done_err;
 800165a:	bf00      	nop
 800165c:	e002      	b.n	8001664 <VL53L1A2_Init+0xd8>
		goto done_err;
 800165e:	bf00      	nop
 8001660:	e000      	b.n	8001664 <VL53L1A2_Init+0xd8>
		goto done_err;
 8001662:	bf00      	nop
  return status;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000055c 	.word	0x2000055c
 8001674:	20000560 	.word	0x20000560

08001678 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	460a      	mov	r2, r1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	4613      	mov	r3, r2
 8001686:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d037      	beq.n	80016fe <VL53L1A2_ResetId+0x86>
 800168e:	2b02      	cmp	r3, #2
 8001690:	dc4e      	bgt.n	8001730 <VL53L1A2_ResetId+0xb8>
 8001692:	2b00      	cmp	r3, #0
 8001694:	d01a      	beq.n	80016cc <VL53L1A2_ResetId+0x54>
 8001696:	2b01      	cmp	r3, #1
 8001698:	d14a      	bne.n	8001730 <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016a6:	70da      	strb	r2, [r3, #3]

      if (state)
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016ba:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80016bc:	2301      	movs	r3, #1
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <VL53L1A2_ResetId+0xd0>)
 80016c0:	2113      	movs	r1, #19
 80016c2:	2084      	movs	r0, #132	; 0x84
 80016c4:	f000 f908 	bl	80018d8 <_ExpanderWR>
 80016c8:	60f8      	str	r0, [r7, #12]
      break;
 80016ca:	e035      	b.n	8001738 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016d8:	705a      	strb	r2, [r3, #1]

      if (state)
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 80016ec:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80016ee:	2301      	movs	r3, #1
 80016f0:	4a16      	ldr	r2, [pc, #88]	; (800174c <VL53L1A2_ResetId+0xd4>)
 80016f2:	2113      	movs	r1, #19
 80016f4:	2086      	movs	r0, #134	; 0x86
 80016f6:	f000 f8ef 	bl	80018d8 <_ExpanderWR>
 80016fa:	60f8      	str	r0, [r7, #12]
      break;
 80016fc:	e01c      	b.n	8001738 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 800170a:	705a      	strb	r2, [r3, #1]

      if (state)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <VL53L1A2_ResetId+0xcc>)
 800171e:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001720:	2301      	movs	r3, #1
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <VL53L1A2_ResetId+0xd4>)
 8001724:	2113      	movs	r1, #19
 8001726:	2086      	movs	r0, #134	; 0x86
 8001728:	f000 f8d6 	bl	80018d8 <_ExpanderWR>
 800172c:	60f8      	str	r0, [r7, #12]
      break;
 800172e:	e003      	b.n	8001738 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
 8001734:	60fb      	str	r3, [r7, #12]
      goto done;
 8001736:	e000      	b.n	800173a <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001738:	bf00      	nop
  return status;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000560 	.word	0x20000560
 8001748:	20000563 	.word	0x20000563
 800174c:	20000561 	.word	0x20000561

08001750 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <_I2cFailRecover+0xdc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	e05e      	b.n	8001824 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2002      	movs	r0, #2
 8001768:	f7ff fef7 	bl	800155a <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 800176c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001770:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001772:	2311      	movs	r3, #17
 8001774:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 800177a:	463b      	mov	r3, r7
 800177c:	4619      	mov	r1, r3
 800177e:	482c      	ldr	r0, [pc, #176]	; (8001830 <_I2cFailRecover+0xe0>)
 8001780:	f014 f91e 	bl	80159c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 8001784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001788:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800178a:	2311      	movs	r3, #17
 800178c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	4826      	ldr	r0, [pc, #152]	; (8001830 <_I2cFailRecover+0xe0>)
 8001798:	f014 f912 	bl	80159c0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a2:	4823      	ldr	r0, [pc, #140]	; (8001830 <_I2cFailRecover+0xe0>)
 80017a4:	f014 fb72 	bl	8015e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ae:	4820      	ldr	r0, [pc, #128]	; (8001830 <_I2cFailRecover+0xe0>)
 80017b0:	f014 fb6c 	bl	8015e8c <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	75fb      	strb	r3, [r7, #23]
 80017b8:	e014      	b.n	80017e4 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c0:	481b      	ldr	r0, [pc, #108]	; (8001830 <_I2cFailRecover+0xe0>)
 80017c2:	f014 fb63 	bl	8015e8c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f013 ffc4 	bl	8015754 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	4817      	ldr	r0, [pc, #92]	; (8001830 <_I2cFailRecover+0xe0>)
 80017d4:	f014 fb5a 	bl	8015e8c <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80017d8:	2001      	movs	r0, #1
 80017da:	f013 ffbb 	bl	8015754 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	3301      	adds	r3, #1
 80017e2:	75fb      	strb	r3, [r7, #23]
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b09      	cmp	r3, #9
 80017e8:	d9e7      	bls.n	80017ba <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 80017ea:	7dbb      	ldrb	r3, [r7, #22]
 80017ec:	3301      	adds	r3, #1
 80017ee:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 80017f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <_I2cFailRecover+0xe0>)
 80017f6:	f014 fb31 	bl	8015e5c <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_I2cFailRecover+0xb6>
 8001800:	7dbb      	ldrb	r3, [r7, #22]
 8001802:	2b06      	cmp	r3, #6
 8001804:	d9d6      	bls.n	80017b4 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <_I2cFailRecover+0xe0>)
 800180c:	f014 fb26 	bl	8015e5c <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001816:	f06f 0304 	mvn.w	r3, #4
 800181a:	e003      	b.n	8001824 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <_I2cFailRecover+0xdc>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000564 	.word	0x20000564
 8001830:	48000400 	.word	0x48000400

08001834 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800183a:	2302      	movs	r3, #2
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <_ExpandersSetAllIO+0x38>)
 800183e:	2112      	movs	r1, #18
 8001840:	2086      	movs	r0, #134	; 0x86
 8001842:	f000 f849 	bl	80018d8 <_ExpanderWR>
 8001846:	6078      	str	r0, [r7, #4]

  if (status)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800184e:	2302      	movs	r3, #2
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <_ExpandersSetAllIO+0x3c>)
 8001852:	2112      	movs	r1, #18
 8001854:	2084      	movs	r0, #132	; 0x84
 8001856:	f000 f83f 	bl	80018d8 <_ExpanderWR>
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	e000      	b.n	8001860 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800185e:	bf00      	nop

done_err:
  return status;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000560 	.word	0x20000560
 8001870:	20000562 	.word	0x20000562

08001874 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af02      	add	r7, sp, #8
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	b299      	uxth	r1, r3
 800188c:	f107 0213 	add.w	r2, r7, #19
 8001890:	2364      	movs	r3, #100	; 0x64
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <_ExpanderRd+0x60>)
 8001898:	f014 fbe2 	bl	8016060 <HAL_I2C_Master_Transmit>
 800189c:	4603      	mov	r3, r0
 800189e:	617b      	str	r3, [r7, #20]

    if (status)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d110      	bne.n	80018c8 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	b299      	uxth	r1, r3
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2064      	movs	r0, #100	; 0x64
 80018b2:	fb00 f303 	mul.w	r3, r0, r3
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <_ExpanderRd+0x60>)
 80018be:	f014 fcc3 	bl	8016248 <HAL_I2C_Master_Receive>
 80018c2:	4603      	mov	r3, r0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e000      	b.n	80018ca <_ExpanderRd+0x56>
      break;
 80018c8:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80018ca:	697b      	ldr	r3, [r7, #20]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000178 	.word	0x20000178

080018d8 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af02      	add	r7, sp, #8
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	3301      	adds	r3, #1
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f018 f9b8 	bl	8019c6c <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	b299      	uxth	r1, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	f107 0214 	add.w	r2, r7, #20
 800190c:	2064      	movs	r0, #100	; 0x64
 800190e:	9000      	str	r0, [sp, #0]
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <_ExpanderWR+0x4c>)
 8001912:	f014 fba5 	bl	8016060 <HAL_I2C_Master_Transmit>
 8001916:	4603      	mov	r3, r0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000178 	.word	0x20000178

08001928 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001936:	f06f 0301 	mvn.w	r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e014      	b.n	8001968 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800193e:	f7ff fe25 	bl	800158c <VL53L1A2_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001948:	f06f 0303 	mvn.w	r3, #3
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e00b      	b.n	8001968 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001950:	2101      	movs	r1, #1
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f8fc 	bl	8001b50 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8f8 	bl	8001b50 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f935 	bl	8001bd0 <VL53L1CB_Probe>
 8001966:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d903      	bls.n	800198c <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001984:	f06f 0301 	mvn.w	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e012      	b.n	80019b2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	490b      	ldr	r1, [pc, #44]	; (80019c0 <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	4610      	mov	r0, r2
 800199e:	4798      	blx	r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da03      	bge.n	80019ae <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019a6:	f06f 0304 	mvn.w	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e001      	b.n	80019b2 <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000574 	.word	0x20000574
 80019c0:	20000568 	.word	0x20000568

080019c4 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d903      	bls.n	80019dc <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019d4:	f06f 0301 	mvn.w	r3, #1
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e012      	b.n	8001a02 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	490b      	ldr	r1, [pc, #44]	; (8001a10 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	4610      	mov	r0, r2
 80019ee:	4798      	blx	r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da03      	bge.n	80019fe <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019f6:	f06f 0304 	mvn.w	r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e001      	b.n	8001a02 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000574 	.word	0x20000574
 8001a10:	20000568 	.word	0x20000568

08001a14 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d903      	bls.n	8001a2c <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a24:	f06f 0301 	mvn.w	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e012      	b.n	8001a52 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	490b      	ldr	r1, [pc, #44]	; (8001a60 <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4798      	blx	r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da03      	bge.n	8001a4e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a46:	f06f 0304 	mvn.w	r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e001      	b.n	8001a52 <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000574 	.word	0x20000574
 8001a60:	20000568 	.word	0x20000568

08001a64 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d903      	bls.n	8001a7c <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a74:	f06f 0301 	mvn.w	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e012      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	490b      	ldr	r1, [pc, #44]	; (8001ab0 <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da03      	bge.n	8001a9e <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a96:	f06f 0304 	mvn.w	r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e001      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000574 	.word	0x20000574
 8001ab0:	20000568 	.word	0x20000568

08001ab4 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d903      	bls.n	8001aca <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ac2:	f06f 0301 	mvn.w	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e011      	b.n	8001aee <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	490a      	ldr	r1, [pc, #40]	; (8001afc <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4798      	blx	r3
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da03      	bge.n	8001aea <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ae2:	f06f 0304 	mvn.w	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e001      	b.n	8001aee <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000574 	.word	0x20000574
 8001afc:	20000568 	.word	0x20000568

08001b00 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d903      	bls.n	8001b18 <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b10:	f06f 0301 	mvn.w	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e012      	b.n	8001b3e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	490b      	ldr	r1, [pc, #44]	; (8001b4c <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b26:	6839      	ldr	r1, [r7, #0]
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da03      	bge.n	8001b3a <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b32:	f06f 0304 	mvn.w	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e001      	b.n	8001b3e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000574 	.word	0x20000574
 8001b4c:	20000568 	.word	0x20000568

08001b50 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d903      	bls.n	8001b68 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b60:	f06f 0301 	mvn.w	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e02e      	b.n	8001bc6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2101      	movs	r1, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fd7f 	bl	8001678 <VL53L1A2_ResetId>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	da03      	bge.n	8001b88 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b80:	f06f 0303 	mvn.w	r3, #3
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e01e      	b.n	8001bc6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f013 fde3 	bl	8015754 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e018      	b.n	8001bc6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d112      	bne.n	8001bc0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fd69 	bl	8001678 <VL53L1A2_ResetId>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da03      	bge.n	8001bb4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001bac:	f06f 0303 	mvn.w	r3, #3
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e008      	b.n	8001bc6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f013 fdcd 	bl	8015754 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e002      	b.n	8001bc6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bc0:	f06f 0301 	mvn.w	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001bd8:	2352      	movs	r3, #82	; 0x52
 8001bda:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <VL53L1CB_Probe+0xf0>)
 8001bde:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001be0:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <VL53L1CB_Probe+0xf4>)
 8001be2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <VL53L1CB_Probe+0xf8>)
 8001be6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <VL53L1CB_Probe+0xfc>)
 8001bea:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8001bec:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <VL53L1CB_Probe+0x100>)
 8001bee:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <VL53L1CB_Probe+0x104>)
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f013 f824 	bl	8014c52 <VL53L1CB_RegisterBusIO>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c10:	f06f 0304 	mvn.w	r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	e04d      	b.n	8001cb4 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <VL53L1CB_Probe+0x104>)
 8001c24:	4413      	add	r3, r2
 8001c26:	f107 0208 	add.w	r2, r7, #8
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f013 f8cc 	bl	8014dca <VL53L1CB_ReadID>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c38:	f06f 0304 	mvn.w	r3, #4
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	e039      	b.n	8001cb4 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001c4a:	f06f 0306 	mvn.w	r3, #6
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	e030      	b.n	8001cb4 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <VL53L1CB_Probe+0x108>)
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <VL53L1CB_Probe+0x10c>)
 8001c56:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <VL53L1CB_Probe+0x104>)
 8001c64:	441a      	add	r2, r3
 8001c66:	491e      	ldr	r1, [pc, #120]	; (8001ce0 <VL53L1CB_Probe+0x110>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <VL53L1CB_Probe+0x108>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	491a      	ldr	r1, [pc, #104]	; (8001ce0 <VL53L1CB_Probe+0x110>)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4798      	blx	r3
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c86:	f06f 0304 	mvn.w	r3, #4
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e012      	b.n	8001cb4 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <VL53L1CB_Probe+0x108>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <VL53L1CB_Probe+0x110>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c9c:	4911      	ldr	r1, [pc, #68]	; (8001ce4 <VL53L1CB_Probe+0x114>)
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ca8:	f06f 0304 	mvn.w	r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e001      	b.n	8001cb4 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08000d75 	.word	0x08000d75
 8001cc4:	08000df1 	.word	0x08000df1
 8001cc8:	08000e41 	.word	0x08000e41
 8001ccc:	08000e95 	.word	0x08000e95
 8001cd0:	08000ee9 	.word	0x08000ee9
 8001cd4:	20000588 	.word	0x20000588
 8001cd8:	20000574 	.word	0x20000574
 8001cdc:	20000038 	.word	0x20000038
 8001ce0:	20000568 	.word	0x20000568
 8001ce4:	20000578 	.word	0x20000578

08001ce8 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001cf4:	793b      	ldrb	r3, [r7, #4]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d808      	bhi.n	8001d0c <CheckValidRectRoi+0x24>
 8001cfa:	797b      	ldrb	r3, [r7, #5]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d805      	bhi.n	8001d0c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001d00:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	d802      	bhi.n	8001d0c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d901      	bls.n	8001d10 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001d0c:	23fc      	movs	r3, #252	; 0xfc
 8001d0e:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001d10:	793a      	ldrb	r2, [r7, #4]
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d803      	bhi.n	8001d20 <CheckValidRectRoi+0x38>
 8001d18:	797a      	ldrb	r2, [r7, #5]
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d201      	bcs.n	8001d24 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001d20:	23fc      	movs	r3, #252	; 0xfc
 8001d22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3318      	adds	r3, #24
 8001d48:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001d50:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f012 fd7d 	bl	801485c <VL53L1_WrByte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f002 fc56 	bl	800464a <VL53L1_data_init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3318      	adds	r3, #24
 8001dae:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001db6:	3308      	adds	r3, #8
 8001db8:	220c      	movs	r2, #12
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f017 ff63 	bl	8019c88 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d105      	bne.n	8001dd6 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73bb      	strb	r3, [r7, #14]
 8001dda:	e012      	b.n	8001e02 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d112      	bne.n	8001e0a <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2201      	movs	r2, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fc90 	bl	8002712 <VL53L1_SetLimitCheckEnable>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	73bb      	strb	r3, [r7, #14]
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d9e9      	bls.n	8001ddc <VL53L1_DataInit+0x5a>
 8001e08:	e000      	b.n	8001e0c <VL53L1_DataInit+0x8a>
		else
			break;
 8001e0a:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001e14:	2102      	movs	r1, #2
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f005 faef 	bl	80073fa <VL53L1_set_dmax_mode>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001e44:	2320      	movs	r3, #32
 8001e46:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7bba      	ldrb	r2, [r7, #14]
 8001e4c:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001e4e:	2101      	movs	r1, #1
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f947 	bl	80020e4 <VL53L1_SetPresetMode>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f98b 	bl	8002178 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001e6e:	2100      	movs	r1, #0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 fe69 	bl	8003b48 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001e8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f011 ffa1 	bl	8013dda <VL53L1_poll_for_boot_completion>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	603a      	str	r2, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <ComputeDevicePresetMode+0x138>)
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	8019      	strh	r1, [r3, #0]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	0c12      	lsrs	r2, r2, #16
 8001ecc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001ece:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <ComputeDevicePresetMode+0x13c>)
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	8019      	strh	r1, [r3, #0]
 8001eda:	3302      	adds	r3, #2
 8001edc:	0c12      	lsrs	r2, r2, #16
 8001ede:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001ee0:	4a41      	ldr	r2, [pc, #260]	; (8001fe8 <ComputeDevicePresetMode+0x140>)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	8019      	strh	r1, [r3, #0]
 8001eec:	3302      	adds	r3, #2
 8001eee:	0c12      	lsrs	r2, r2, #16
 8001ef0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <ComputeDevicePresetMode+0x144>)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	4611      	mov	r1, r2
 8001efc:	8019      	strh	r1, [r3, #0]
 8001efe:	3302      	adds	r3, #2
 8001f00:	0c12      	lsrs	r2, r2, #16
 8001f02:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <ComputeDevicePresetMode+0x148>)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	8019      	strh	r1, [r3, #0]
 8001f10:	3302      	adds	r3, #2
 8001f12:	0c12      	lsrs	r2, r2, #16
 8001f14:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d002      	beq.n	8001f28 <ComputeDevicePresetMode+0x80>
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <ComputeDevicePresetMode+0x86>
 8001f26:	e005      	b.n	8001f34 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77bb      	strb	r3, [r7, #30]
		break;
 8001f2c:	e004      	b.n	8001f38 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77bb      	strb	r3, [r7, #30]
		break;
 8001f32:	e001      	b.n	8001f38 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d845      	bhi.n	8001fcc <ComputeDevicePresetMode+0x124>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <ComputeDevicePresetMode+0xa0>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f7d 	.word	0x08001f7d
 8001f4c:	08001f8d 	.word	0x08001f8d
 8001f50:	08001f9d 	.word	0x08001f9d
 8001f54:	08001f6d 	.word	0x08001f6d
 8001f58:	08001fcd 	.word	0x08001fcd
 8001f5c:	08001fcd 	.word	0x08001fcd
 8001f60:	08001fbd 	.word	0x08001fbd
 8001f64:	08001fad 	.word	0x08001fad
 8001f68:	08001fc5 	.word	0x08001fc5
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001f6c:	7fbb      	ldrb	r3, [r7, #30]
 8001f6e:	3320      	adds	r3, #32
 8001f70:	443b      	add	r3, r7
 8001f72:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
		break;
 8001f7a:	e029      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8001f7c:	7fbb      	ldrb	r3, [r7, #30]
 8001f7e:	3320      	adds	r3, #32
 8001f80:	443b      	add	r3, r7
 8001f82:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	701a      	strb	r2, [r3, #0]
		break;
 8001f8a:	e021      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001f8c:	7fbb      	ldrb	r3, [r7, #30]
 8001f8e:	3320      	adds	r3, #32
 8001f90:	443b      	add	r3, r7
 8001f92:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
		break;
 8001f9a:	e019      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001f9c:	7fbb      	ldrb	r3, [r7, #30]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	701a      	strb	r2, [r3, #0]
		break;
 8001faa:	e011      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001fac:	7fbb      	ldrb	r3, [r7, #30]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	443b      	add	r3, r7
 8001fb2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
		break;
 8001fba:	e009      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2211      	movs	r2, #17
 8001fc0:	701a      	strb	r2, [r3, #0]
		break;
 8001fc2:	e005      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2227      	movs	r2, #39	; 0x27
 8001fc8:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8001fca:	e001      	b.n	8001fd0 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001fcc:	23f8      	movs	r3, #248	; 0xf8
 8001fce:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8001fd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3724      	adds	r7, #36	; 0x24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	0801b05c 	.word	0x0801b05c
 8001fe4:	0801b060 	.word	0x0801b060
 8001fe8:	0801b064 	.word	0x0801b064
 8001fec:	0801b068 	.word	0x0801b068
 8001ff0:	0801b06c 	.word	0x0801b06c

08001ff4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	72fb      	strb	r3, [r7, #11]
 8002002:	4613      	mov	r3, r2
 8002004:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800201c:	7afb      	ldrb	r3, [r7, #11]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d002      	beq.n	8002028 <SetPresetMode+0x34>
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d103      	bne.n	8002030 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800202e:	e002      	b.n	8002036 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8002030:	2320      	movs	r3, #32
 8002032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8002036:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800203a:	7ab9      	ldrb	r1, [r7, #10]
 800203c:	7afb      	ldrb	r3, [r7, #11]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff32 	bl	8001ea8 <ComputeDevicePresetMode>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800204a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800204e:	2b00      	cmp	r3, #0
 8002050:	d112      	bne.n	8002078 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8002052:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002056:	f107 001c 	add.w	r0, r7, #28
 800205a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4603      	mov	r3, r0
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f002 ffaf 	bl	8004fd0 <VL53L1_get_preset_mode_timing_cfg>
 8002072:	4603      	mov	r3, r0
 8002074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8002078:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800207c:	2b00      	cmp	r3, #0
 800207e:	d112      	bne.n	80020a6 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8002080:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002084:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8002086:	69fd      	ldr	r5, [r7, #28]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	9102      	str	r1, [sp, #8]
 8002090:	9201      	str	r2, [sp, #4]
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	462b      	mov	r3, r5
 8002096:	4622      	mov	r2, r4
 8002098:	4601      	mov	r1, r0
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f003 f8ee 	bl	800527c <VL53L1_set_preset_mode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80020a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80020b4:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80020b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020c4:	461a      	mov	r2, r3
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 80020d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bdb0      	pop	{r4, r5, r7, pc}

080020e4 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f00c f94a 	bl	800e392 <VL53L1_low_power_auto_data_init>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d101      	bne.n	800210c <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002108:	2301      	movs	r3, #1
 800210a:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 800210c:	7bba      	ldrb	r2, [r7, #14]
 800210e:	78f9      	ldrb	r1, [r7, #3]
 8002110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff6d 	bl	8001ff4 <SetPresetMode>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d117      	bne.n	8002156 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d005      	beq.n	8002138 <VL53L1_SetPresetMode+0x54>
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d002      	beq.n	8002138 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d107      	bne.n	8002148 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002138:	f24a 0128 	movw	r1, #41000	; 0xa028
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f8a9 	bl	8002294 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e006      	b.n	8002156 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002148:	f248 2135 	movw	r1, #33333	; 0x8235
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8a1 	bl	8002294 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8002152:	4603      	mov	r3, r0
 8002154:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800215e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa68 	bl	8002638 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800216c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b0a2      	sub	sp, #136	; 0x88
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002184:	2300      	movs	r3, #0
 8002186:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800219c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80021a0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 80021a4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d105      	bne.n	80021b8 <VL53L1_SetDistanceMode+0x40>
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d002      	beq.n	80021b8 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 80021b2:	f06f 0303 	mvn.w	r3, #3
 80021b6:	e069      	b.n	800228c <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d008      	beq.n	80021d0 <VL53L1_SetDistanceMode+0x58>
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d005      	beq.n	80021d0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d002      	beq.n	80021d0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80021ca:	f06f 0303 	mvn.w	r3, #3
 80021ce:	e05d      	b.n	800228c <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 80021d0:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f002 fede 	bl	8004fa0 <VL53L1_get_zone_config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80021f2:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10b      	bne.n	8002212 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80021fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021fe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002202:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f002 fd8a 	bl	8004d20 <VL53L1_get_timeouts_us>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8002212:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002220:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fee5 	bl	8001ff4 <SetPresetMode>
 800222a:	4603      	mov	r3, r0
 800222c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8002230:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800223e:	461a      	mov	r2, r3
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002246:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800224e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002250:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f002 fd2a 	bl	8004cae <VL53L1_set_timeouts_us>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8002260:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002268:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800226e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002272:	2b00      	cmp	r3, #0
 8002274:	d108      	bne.n	8002288 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f002 fe4c 	bl	8004f1a <VL53L1_set_zone_config>
 8002282:	4603      	mov	r3, r0
 8002284:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8002288:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 800228c:	4618      	mov	r0, r3
 800228e:	3788      	adds	r7, #136	; 0x88
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80022b8:	4b75      	ldr	r3, [pc, #468]	; (8002490 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 80022ba:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4a75      	ldr	r2, [pc, #468]	; (8002494 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d902      	bls.n	80022ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80022c4:	23fc      	movs	r3, #252	; 0xfc
 80022c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80022ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80022d2:	f107 031a 	add.w	r3, r7, #26
 80022d6:	461a      	mov	r2, r3
 80022d8:	2105      	movs	r1, #5
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fb9a 	bl	8002a14 <VL53L1_GetSequenceStepEnable>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80022e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80022ee:	f107 0319 	add.w	r3, r7, #25
 80022f2:	461a      	mov	r2, r3
 80022f4:	2106      	movs	r1, #6
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fb8c 	bl	8002a14 <VL53L1_GetSequenceStepEnable>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8002302:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10b      	bne.n	8002322 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	f107 0210 	add.w	r2, r7, #16
 8002312:	f107 010c 	add.w	r1, r7, #12
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f002 fd02 	bl	8004d20 <VL53L1_get_timeouts_us>
 800231c:	4603      	mov	r3, r0
 800231e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8002322:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80a0 	bne.w	800246c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002332:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002336:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8002340:	7efb      	ldrb	r3, [r7, #27]
 8002342:	3b01      	subs	r3, #1
 8002344:	2b08      	cmp	r3, #8
 8002346:	d861      	bhi.n	800240c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8002348:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	080023f5 	.word	0x080023f5
 8002354:	080023f5 	.word	0x080023f5
 8002358:	08002391 	.word	0x08002391
 800235c:	08002375 	.word	0x08002375
 8002360:	0800240d 	.word	0x0800240d
 8002364:	0800240d 	.word	0x0800240d
 8002368:	08002401 	.word	0x08002401
 800236c:	080023b7 	.word	0x080023b7
 8002370:	080023f5 	.word	0x080023f5
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002374:	7ebb      	ldrb	r3, [r7, #26]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d002      	beq.n	8002380 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 800237a:	7e7b      	ldrb	r3, [r7, #25]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d103      	bne.n	8002388 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8002380:	f241 3388 	movw	r3, #5000	; 0x1388
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8002386:	e044      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8002388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800238e:	e040      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002396:	7ebb      	ldrb	r3, [r7, #26]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d002      	beq.n	80023a2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 800239c:	7e7b      	ldrb	r3, [r7, #25]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d103      	bne.n	80023aa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 80023a2:	f246 73e8 	movw	r3, #26600	; 0x67e8
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a8:	e002      	b.n	80023b0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 80023aa:	f245 4360 	movw	r3, #21600	; 0x5460
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023b4:	e02d      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80023bc:	23f5      	movs	r3, #245	; 0xf5
 80023be:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	461a      	mov	r2, r3
 80023c6:	f248 0188 	movw	r1, #32904	; 0x8088
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f005 f88c 	bl	80074e8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	dd07      	ble.n	80023e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	22f5      	movs	r2, #245	; 0xf5
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	4413      	add	r3, r2
 80023e4:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023f2:	e00e      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80023f4:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80023fa:	2306      	movs	r3, #6
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80023fe:	e008      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002406:	3308      	adds	r3, #8
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800240a:	e002      	b.n	8002412 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800240c:	23f8      	movs	r3, #248	; 0xf8
 800240e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	429a      	cmp	r2, r3
 8002418:	d803      	bhi.n	8002422 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 800241a:	23fc      	movs	r3, #252	; 0xfc
 800241c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002420:	e003      	b.n	800242a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8002428:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 800242a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11c      	bne.n	800246c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	429a      	cmp	r2, r3
 8002438:	d203      	bcs.n	8002442 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800243a:	23fc      	movs	r3, #252	; 0xfc
 800243c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002440:	e00d      	b.n	800245e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f002 fc2b 	bl	8004cae <VL53L1_set_timeouts_us>
 8002458:	4603      	mov	r3, r0
 800245a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800245e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 800246c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002470:	2b00      	cmp	r3, #0
 8002472:	d106      	bne.n	8002482 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002482:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002486:	4618      	mov	r0, r3
 8002488:	3730      	adds	r7, #48	; 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	00086470 	.word	0x00086470
 8002494:	00989680 	.word	0x00989680

08002498 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 80024c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80024ce:	f107 031b 	add.w	r3, r7, #27
 80024d2:	461a      	mov	r2, r3
 80024d4:	2105      	movs	r1, #5
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa9c 	bl	8002a14 <VL53L1_GetSequenceStepEnable>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80024e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80024ea:	f107 031a 	add.w	r3, r7, #26
 80024ee:	461a      	mov	r2, r3
 80024f0:	2106      	movs	r1, #6
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa8e 	bl	8002a14 <VL53L1_GetSequenceStepEnable>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80024fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10b      	bne.n	800251e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	f107 0214 	add.w	r2, r7, #20
 800250e:	f107 010c 	add.w	r1, r7, #12
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f002 fc04 	bl	8004d20 <VL53L1_get_timeouts_us>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 800251e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002522:	2b00      	cmp	r3, #0
 8002524:	d179      	bne.n	800261a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800252c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8002534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002538:	3b01      	subs	r3, #1
 800253a:	2b08      	cmp	r3, #8
 800253c:	d869      	bhi.n	8002612 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800253e:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	080025f1 	.word	0x080025f1
 8002548:	080025f1 	.word	0x080025f1
 800254c:	0800258b 	.word	0x0800258b
 8002550:	08002569 	.word	0x08002569
 8002554:	08002613 	.word	0x08002613
 8002558:	08002613 	.word	0x08002613
 800255c:	08002603 	.word	0x08002603
 8002560:	080025b3 	.word	0x080025b3
 8002564:	080025f1 	.word	0x080025f1
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002568:	7efb      	ldrb	r3, [r7, #27]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d002      	beq.n	8002574 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 800256e:	7ebb      	ldrb	r3, [r7, #26]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800257a:	3308      	adds	r3, #8
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800257e:	e04d      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002588:	e048      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800258a:	7efb      	ldrb	r3, [r7, #27]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d002      	beq.n	8002596 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8002590:	7ebb      	ldrb	r3, [r7, #26]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d106      	bne.n	80025a4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800259c:	3334      	adds	r3, #52	; 0x34
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 80025a2:	e03b      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80025aa:	3330      	adds	r3, #48	; 0x30
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80025b0:	e034      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 80025b2:	23f5      	movs	r3, #245	; 0xf5
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	461a      	mov	r2, r3
 80025bc:	f248 0188 	movw	r1, #32904	; 0x8088
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f004 ff91 	bl	80074e8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	dd07      	ble.n	80025dc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	22f5      	movs	r2, #245	; 0xf5
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	4413      	add	r3, r2
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80025e2:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80025ee:	e015      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002600:	e00c      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4413      	add	r3, r2
 8002608:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800260c:	3308      	adds	r3, #8
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002610:	e004      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002612:	23f8      	movs	r3, #248	; 0xf8
 8002614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002618:	e000      	b.n	800261c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 800261a:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800261c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002628:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800262a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800262e:	4618      	mov	r0, r3
 8002630:	3730      	adds	r7, #48	; 0x30
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop

08002638 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f002 facc 	bl	8004bfc <VL53L1_set_inter_measurement_period_ms>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	10624dd3 	.word	0x10624dd3

08002678 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f002 fae3 	bl	8004c58 <VL53L1_get_inter_measurement_period_ms>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	019b      	lsls	r3, r3, #6
 800269c:	4907      	ldr	r1, [pc, #28]	; (80026bc <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800269e:	fba1 1303 	umull	r1, r3, r1, r3
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	10624dd3 	.word	0x10624dd3

080026c0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	460b      	mov	r3, r1
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <SetLimitValue+0x1e>
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d009      	beq.n	80026f0 <SetLimitValue+0x30>
 80026dc:	e011      	b.n	8002702 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0b9b      	lsrs	r3, r3, #14
 80026e2:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80026e4:	8abb      	ldrh	r3, [r7, #20]
 80026e6:	4619      	mov	r1, r3
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f003 f988 	bl	80059fe <VL53L1_set_lite_sigma_threshold>
		break;
 80026ee:	e00a      	b.n	8002706 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80026f6:	8abb      	ldrh	r3, [r7, #20]
 80026f8:	4619      	mov	r1, r3
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f003 f9ad 	bl	8005a5a <VL53L1_set_lite_min_count_rate>
		break;
 8002700:	e001      	b.n	8002706 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002702:	23fc      	movs	r3, #252	; 0xfc
 8002704:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
 800271e:	4613      	mov	r3, r2
 8002720:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d902      	bls.n	8002736 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002730:	23fc      	movs	r3, #252	; 0xfc
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e015      	b.n	8002762 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8002736:	787b      	ldrb	r3, [r7, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	e007      	b.n	8002752 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	4619      	mov	r1, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ffb1 	bl	80026c0 <SetLimitValue>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10e      	bne.n	8002788 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800276a:	787b      	ldrb	r3, [r7, #1]
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2da      	uxtb	r2, r3
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	4611      	mov	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002782:	3334      	adds	r3, #52	; 0x34
 8002784:	460a      	mov	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	460b      	mov	r3, r1
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d905      	bls.n	80027b8 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027ac:	23fc      	movs	r3, #252	; 0xfc
 80027ae:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e00a      	b.n	80027ce <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80027c2:	3334      	adds	r3, #52	; 0x34
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7dba      	ldrb	r2, [r7, #22]
 80027cc:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80027ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b088      	sub	sp, #32
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	460b      	mov	r3, r1
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <VL53L1_GetLimitCheckValue+0x22>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d00c      	beq.n	8002818 <VL53L1_GetLimitCheckValue+0x3a>
 80027fe:	e017      	b.n	8002830 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f003 f8e2 	bl	80059d0 <VL53L1_get_lite_sigma_threshold>
 800280c:	4603      	mov	r3, r0
 800280e:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8002810:	8abb      	ldrh	r3, [r7, #20]
 8002812:	039b      	lsls	r3, r3, #14
 8002814:	61bb      	str	r3, [r7, #24]
		break;
 8002816:	e00d      	b.n	8002834 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8002818:	f107 0316 	add.w	r3, r7, #22
 800281c:	4619      	mov	r1, r3
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f003 f904 	bl	8005a2c <VL53L1_get_lite_min_count_rate>
 8002824:	4603      	mov	r3, r0
 8002826:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	61bb      	str	r3, [r7, #24]
		break;
 800282e:	e001      	b.n	8002834 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002830:	23fc      	movs	r3, #252	; 0xfc
 8002832:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d129      	bne.n	8002890 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d113      	bne.n	800286a <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8002842:	897b      	ldrh	r3, [r7, #10]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002862:	3334      	adds	r3, #52	; 0x34
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e012      	b.n	8002890 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002870:	897b      	ldrh	r3, [r7, #10]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002880:	897b      	ldrh	r3, [r7, #10]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4413      	add	r3, r2
 8002886:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800288a:	3334      	adds	r3, #52	; 0x34
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8002890:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002894:	4618      	mov	r0, r3
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0a0      	sub	sp, #128	; 0x80
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80028b8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80028bc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 80028c0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d102      	bne.n	80028ce <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 80028c8:	2310      	movs	r3, #16
 80028ca:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d303      	bcc.n	80028e2 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80028e2:	23fc      	movs	r3, #252	; 0xfc
 80028e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80028e8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17e      	bne.n	80029ee <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80028f0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80028f4:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002900:	2300      	movs	r3, #0
 8002902:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002906:	e06a      	b.n	80029de <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8002908:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	f107 0208 	add.w	r2, r7, #8
 8002916:	3301      	adds	r3, #1
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 800291c:	68b8      	ldr	r0, [r7, #8]
 800291e:	f7ff f9e3 	bl	8001ce8 <CheckValidRectRoi>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8002928:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800292c:	2b00      	cmp	r3, #0
 800292e:	d15d      	bne.n	80029ec <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002930:	7abb      	ldrb	r3, [r7, #10]
 8002932:	461a      	mov	r2, r3
 8002934:	7a3b      	ldrb	r3, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	3301      	adds	r3, #1
					/ 2;
 800293a:	0fda      	lsrs	r2, r3, #31
 800293c:	4413      	add	r3, r2
 800293e:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002940:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002944:	7a7b      	ldrb	r3, [r7, #9]
 8002946:	461a      	mov	r2, r3
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	4413      	add	r3, r2
 800294c:	3301      	adds	r3, #1
					/ 2;
 800294e:	0fda      	lsrs	r2, r3, #31
 8002950:	4413      	add	r3, r2
 8002952:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002954:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002958:	7aba      	ldrb	r2, [r7, #10]
 800295a:	7a3b      	ldrb	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002962:	7a7a      	ldrb	r2, [r7, #9]
 8002964:	7afb      	ldrb	r3, [r7, #11]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 800296c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002970:	2b02      	cmp	r3, #2
 8002972:	d903      	bls.n	800297c <VL53L1_SetROI+0xe0>
 8002974:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002978:	2b02      	cmp	r3, #2
 800297a:	d803      	bhi.n	8002984 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800297c:	23fc      	movs	r3, #252	; 0xfc
 800297e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8002982:	e034      	b.n	80029ee <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002984:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002988:	3306      	adds	r3, #6
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	3380      	adds	r3, #128	; 0x80
 800298e:	443b      	add	r3, r7
 8002990:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002994:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002998:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800299c:	3306      	adds	r3, #6
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	3380      	adds	r3, #128	; 0x80
 80029a2:	443b      	add	r3, r7
 80029a4:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 80029a8:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 80029ac:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80029b0:	3306      	adds	r3, #6
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	3380      	adds	r3, #128	; 0x80
 80029b6:	443b      	add	r3, r7
 80029b8:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80029bc:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 80029c0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80029c4:	3306      	adds	r3, #6
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3380      	adds	r3, #128	; 0x80
 80029ca:	443b      	add	r3, r7
 80029cc:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80029d0:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80029d4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80029d8:	3301      	adds	r3, #1
 80029da:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d38e      	bcc.n	8002908 <VL53L1_SetROI+0x6c>
 80029ea:	e000      	b.n	80029ee <VL53L1_SetROI+0x152>
				break;
 80029ec:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80029ee:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f002 fa8c 	bl	8004f1a <VL53L1_set_zone_config>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8002a08:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3780      	adds	r7, #128	; 0x80
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f002 f9e3 	bl	8004df8 <VL53L1_get_sequence_config_bit>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3318      	adds	r3, #24
 8002a54:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7edb      	ldrb	r3, [r3, #27]
 8002a5a:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d002      	beq.n	8002a68 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f001 fc8e 	bl	8004384 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77bb      	strb	r3, [r7, #30]
 8002a6c:	e01a      	b.n	8002aa4 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002a6e:	7fbb      	ldrb	r3, [r7, #30]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002a76:	330c      	adds	r3, #12
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002a7e:	7fbb      	ldrb	r3, [r7, #30]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002a88:	3320      	adds	r3, #32
 8002a8a:	22ff      	movs	r2, #255	; 0xff
 8002a8c:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002a8e:	7fbb      	ldrb	r3, [r7, #30]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002a9e:	7fbb      	ldrb	r3, [r7, #30]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	77bb      	strb	r3, [r7, #30]
 8002aa4:	7fbb      	ldrb	r3, [r7, #30]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d9e1      	bls.n	8002a6e <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ac8:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8002acc:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8002ace:	7dbb      	ldrb	r3, [r7, #22]
 8002ad0:	2b63      	cmp	r3, #99	; 0x63
 8002ad2:	dc12      	bgt.n	8002afa <VL53L1_StartMeasurement+0xb6>
 8002ad4:	2b62      	cmp	r3, #98	; 0x62
 8002ad6:	da0d      	bge.n	8002af4 <VL53L1_StartMeasurement+0xb0>
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	dc0e      	bgt.n	8002afa <VL53L1_StartMeasurement+0xb6>
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	da09      	bge.n	8002af4 <VL53L1_StartMeasurement+0xb0>
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	dc02      	bgt.n	8002aea <VL53L1_StartMeasurement+0xa6>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da05      	bge.n	8002af4 <VL53L1_StartMeasurement+0xb0>
 8002ae8:	e007      	b.n	8002afa <VL53L1_StartMeasurement+0xb6>
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d105      	bne.n	8002afa <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	77fb      	strb	r3, [r7, #31]
		break;
 8002af2:	e004      	b.n	8002afe <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8002af4:	23f2      	movs	r3, #242	; 0xf2
 8002af6:	77fb      	strb	r3, [r7, #31]
		break;
 8002af8:	e001      	b.n	8002afe <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8002afa:	23fd      	movs	r3, #253	; 0xfd
 8002afc:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 8002afe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11f      	bne.n	8002b46 <VL53L1_StartMeasurement+0x102>
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d11c      	bne.n	8002b46 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fcc0 	bl	8002498 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <VL53L1_StartMeasurement+0x13c>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fda2 	bl	8002678 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002b34:	4603      	mov	r3, r0
 8002b36:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d901      	bls.n	8002b46 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002b42:	23fc      	movs	r3, #252	; 0xfc
 8002b44:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2206      	movs	r2, #6
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f002 ff97 	bl	8005a88 <VL53L1_init_and_start_range>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002b72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	10624dd3 	.word	0x10624dd3

08002b84 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f003 fa47 	bl	8006024 <VL53L1_stop_range>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7edb      	ldrb	r3, [r3, #27]
 8002b9e:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002ba0:	7bbb      	ldrb	r3, [r7, #14]
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d002      	beq.n	8002bac <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 fd1a 	bl	80045e0 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002bba:	2203      	movs	r2, #3
 8002bbc:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7edb      	ldrb	r3, [r3, #27]
 8002bdc:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f003 ff4b 	bl	8006a7e <VL53L1_clear_interrupt_and_enable_next_range>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002c06:	6839      	ldr	r1, [r7, #0]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f011 f8ac 	bl	8013d66 <VL53L1_is_new_data_ready>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	603a      	str	r2, [r7, #0]
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8002c2e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002c32:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002c34:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002c38:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8002c3a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002c3e:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002c40:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002c44:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002c46:	797b      	ldrb	r3, [r7, #5]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <GenNewPresetMode+0x34>
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d012      	beq.n	8002c76 <GenNewPresetMode+0x58>
 8002c50:	e023      	b.n	8002c9a <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002c52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dd03      	ble.n	8002c64 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002c62:	e02c      	b.n	8002cbe <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002c64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c68:	89bb      	ldrh	r3, [r7, #12]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dd27      	ble.n	8002cbe <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2202      	movs	r2, #2
 8002c72:	701a      	strb	r2, [r3, #0]
		break;
 8002c74:	e023      	b.n	8002cbe <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002c76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c7a:	893b      	ldrh	r3, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dd03      	ble.n	8002c88 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2203      	movs	r2, #3
 8002c84:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002c86:	e01c      	b.n	8002cc2 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002c88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	da17      	bge.n	8002cc2 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
		break;
 8002c98:	e013      	b.n	8002cc2 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002c9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	da03      	bge.n	8002cac <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002caa:	e00c      	b.n	8002cc6 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002cac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	da07      	bge.n	8002cc6 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]
		break;
 8002cbc:	e003      	b.n	8002cc6 <GenNewPresetMode+0xa8>
		break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <GenNewPresetMode+0xaa>
		break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <GenNewPresetMode+0xaa>
		break;
 8002cc6:	bf00      	nop
	}
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	7ddb      	ldrb	r3, [r3, #23]
 8002ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002cec:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <CheckAndChangeDistanceMode+0xbc>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3318      	adds	r3, #24
 8002cf6:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002cf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002cfc:	2bff      	cmp	r3, #255	; 0xff
 8002cfe:	d042      	beq.n	8002d86 <CheckAndChangeDistanceMode+0xb2>
 8002d00:	2bff      	cmp	r3, #255	; 0xff
 8002d02:	dc07      	bgt.n	8002d14 <CheckAndChangeDistanceMode+0x40>
 8002d04:	2b07      	cmp	r3, #7
 8002d06:	dc02      	bgt.n	8002d0e <CheckAndChangeDistanceMode+0x3a>
 8002d08:	2b06      	cmp	r3, #6
 8002d0a:	da3c      	bge.n	8002d86 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002d0c:	e002      	b.n	8002d14 <CheckAndChangeDistanceMode+0x40>
 8002d0e:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d938      	bls.n	8002d86 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002d14:	bf00      	nop
	}

	DmaxValid = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002d22:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	db03      	blt.n	8002d34 <CheckAndChangeDistanceMode+0x60>
 8002d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d40:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002d44:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7dfa      	ldrb	r2, [r7, #23]
 8002d4a:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002d5a:	7df9      	ldrb	r1, [r7, #23]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff5d 	bl	8002c1e <GenNewPresetMode>
 8002d64:	e010      	b.n	8002d88 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002d6e:	7df9      	ldrb	r1, [r7, #23]
 8002d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff51 	bl	8002c1e <GenNewPresetMode>
 8002d7c:	e004      	b.n	8002d88 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2203      	movs	r2, #3
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e000      	b.n	8002d88 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002d86:	bf00      	nop
	}
}
 8002d88:	3728      	adds	r7, #40	; 0x28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b08d      	sub	sp, #52	; 0x34
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	603a      	str	r2, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	460b      	mov	r3, r1
 8002da2:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002da4:	2396      	movs	r3, #150	; 0x96
 8002da6:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002da8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002dac:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002dae:	231e      	movs	r3, #30
 8002db0:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <ComputeRQL+0x104>)
 8002db4:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <ComputeRQL+0x108>)
 8002db8:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002dba:	f641 139a 	movw	r3, #6554	; 0x199a
 8002dbe:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d103      	bne.n	8002dce <ComputeRQL+0x3a>
		returnvalue = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002dcc:	e05b      	b.n	8002e86 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002dd4:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002ddc:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002dde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002de2:	429a      	cmp	r2, r3
 8002de4:	da02      	bge.n	8002dec <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d103      	bne.n	8002df4 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002dec:	2332      	movs	r3, #50	; 0x32
 8002dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002df2:	e048      	b.n	8002e86 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002dfa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dd03      	ble.n	8002e0a <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002e02:	8c3b      	ldrh	r3, [r7, #32]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	e007      	b.n	8002e1a <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002e10:	461a      	mov	r2, r3
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e24:	461a      	mov	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	fb02 f303 	mul.w	r3, r2, r3
 8002e2c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4413      	add	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d804      	bhi.n	8002e5a <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e58:	e006      	b.n	8002e68 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002e5a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e60:	e002      	b.n	8002e68 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002e62:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	2b32      	cmp	r3, #50	; 0x32
 8002e72:	d905      	bls.n	8002e80 <ComputeRQL+0xec>
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	bf28      	it	cs
 8002e7a:	2364      	movcs	r3, #100	; 0x64
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e000      	b.n	8002e82 <ComputeRQL+0xee>
 8002e80:	2332      	movs	r3, #50	; 0x32
 8002e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3734      	adds	r7, #52	; 0x34
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	0075b333 	.word	0x0075b333
 8002e9c:	0030cccd 	.word	0x0030cccd

08002ea0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	3b04      	subs	r3, #4
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	d83d      	bhi.n	8002f2e <ConvertStatusLite+0x8e>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <ConvertStatusLite+0x18>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f0b 	.word	0x08002f0b
 8002ebc:	08002f05 	.word	0x08002f05
 8002ec0:	08002f11 	.word	0x08002f11
 8002ec4:	08002f17 	.word	0x08002f17
 8002ec8:	08002f23 	.word	0x08002f23
 8002ecc:	08002f29 	.word	0x08002f29
 8002ed0:	08002f2f 	.word	0x08002f2f
 8002ed4:	08002f2f 	.word	0x08002f2f
 8002ed8:	08002f1d 	.word	0x08002f1d
 8002edc:	08002f2f 	.word	0x08002f2f
 8002ee0:	08002f2f 	.word	0x08002f2f
 8002ee4:	08002f2f 	.word	0x08002f2f
 8002ee8:	08002f2f 	.word	0x08002f2f
 8002eec:	08002f2f 	.word	0x08002f2f
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002eff 	.word	0x08002eff
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002ef8:	230a      	movs	r3, #10
 8002efa:	73fb      	strb	r3, [r7, #15]
		break;
 8002efc:	e019      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002efe:	2306      	movs	r3, #6
 8002f00:	73fb      	strb	r3, [r7, #15]
		break;
 8002f02:	e016      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002f04:	2304      	movs	r3, #4
 8002f06:	73fb      	strb	r3, [r7, #15]
		break;
 8002f08:	e013      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	73fb      	strb	r3, [r7, #15]
		break;
 8002f0e:	e010      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
		break;
 8002f14:	e00d      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002f16:	2307      	movs	r3, #7
 8002f18:	73fb      	strb	r3, [r7, #15]
		break;
 8002f1a:	e00a      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	73fb      	strb	r3, [r7, #15]
		break;
 8002f20:	e007      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002f22:	2303      	movs	r3, #3
 8002f24:	73fb      	strb	r3, [r7, #15]
		break;
 8002f26:	e004      	b.n	8002f32 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8002f2c:	e001      	b.n	8002f32 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002f2e:	23ff      	movs	r3, #255	; 0xff
 8002f30:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	3b05      	subs	r3, #5
 8002f4e:	2b12      	cmp	r3, #18
 8002f50:	d840      	bhi.n	8002fd4 <ConvertStatusHisto+0x94>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <ConvertStatusHisto+0x18>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002fa5 	.word	0x08002fa5
 8002f5c:	08002fab 	.word	0x08002fab
 8002f60:	08002fb7 	.word	0x08002fb7
 8002f64:	08002fd5 	.word	0x08002fd5
 8002f68:	08002fcf 	.word	0x08002fcf
 8002f6c:	08002fd5 	.word	0x08002fd5
 8002f70:	08002fd5 	.word	0x08002fd5
 8002f74:	08002fd5 	.word	0x08002fd5
 8002f78:	08002fd5 	.word	0x08002fd5
 8002f7c:	08002fd5 	.word	0x08002fd5
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fd5 	.word	0x08002fd5
 8002f8c:	08002fd5 	.word	0x08002fd5
 8002f90:	08002fb1 	.word	0x08002fb1
 8002f94:	08002fc3 	.word	0x08002fc3
 8002f98:	08002fd5 	.word	0x08002fd5
 8002f9c:	08002fc9 	.word	0x08002fc9
 8002fa0:	08002fbd 	.word	0x08002fbd
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	73fb      	strb	r3, [r7, #15]
		break;
 8002fa8:	e016      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
		break;
 8002fae:	e013      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002fb0:	2306      	movs	r3, #6
 8002fb2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fb4:	e010      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	73fb      	strb	r3, [r7, #15]
		break;
 8002fba:	e00d      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	73fb      	strb	r3, [r7, #15]
		break;
 8002fc0:	e00a      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	73fb      	strb	r3, [r7, #15]
		break;
 8002fc6:	e007      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002fc8:	230b      	movs	r3, #11
 8002fca:	73fb      	strb	r3, [r7, #15]
		break;
 8002fcc:	e004      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
		break;
 8002fd2:	e001      	b.n	8002fd8 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002fd4:	23ff      	movs	r3, #255	; 0xff
 8002fd6:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop

08002fe8 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	; 0x48
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	70fb      	strb	r3, [r7, #3]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	70bb      	strb	r3, [r7, #2]
 8002ffe:	4613      	mov	r3, r2
 8003000:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3318      	adds	r3, #24
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8003028:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff feaf 	bl	8002d94 <ComputeRQL>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800303c:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003042:	025b      	lsls	r3, r3, #9
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8003046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304a:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800304c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800304e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003050:	025b      	lsls	r3, r3, #9
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8003054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003058:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800305e:	025b      	lsls	r3, r3, #9
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8003062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003066:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8003068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8003072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003074:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8003078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307a:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 800307c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8003082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003084:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8003086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003088:	2200      	movs	r2, #0
 800308a:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 800308c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003090:	2b11      	cmp	r3, #17
 8003092:	d009      	beq.n	80030a8 <SetTargetData+0xc0>
 8003094:	2b11      	cmp	r3, #17
 8003096:	dc0f      	bgt.n	80030b8 <SetTargetData+0xd0>
 8003098:	2b03      	cmp	r3, #3
 800309a:	dc02      	bgt.n	80030a2 <SetTargetData+0xba>
 800309c:	2b00      	cmp	r3, #0
 800309e:	dc03      	bgt.n	80030a8 <SetTargetData+0xc0>
 80030a0:	e00a      	b.n	80030b8 <SetTargetData+0xd0>
 80030a2:	2b0d      	cmp	r3, #13
 80030a4:	d004      	beq.n	80030b0 <SetTargetData+0xc8>
 80030a6:	e007      	b.n	80030b8 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80030a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030aa:	2205      	movs	r2, #5
 80030ac:	75da      	strb	r2, [r3, #23]
		break;
 80030ae:	e006      	b.n	80030be <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80030b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b2:	220d      	movs	r2, #13
 80030b4:	75da      	strb	r2, [r3, #23]
		break;
 80030b6:	e002      	b.n	80030be <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80030b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ba:	2200      	movs	r2, #0
 80030bc:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	7ddb      	ldrb	r3, [r3, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d117      	bne.n	80030f6 <SetTargetData+0x10e>
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d114      	bne.n	80030f6 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 80030cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 80030d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 80030de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80030e4:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 80030e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80030ec:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 80030ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80030f4:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80030f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f8:	7ddb      	ldrb	r3, [r3, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d125      	bne.n	800314a <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003104:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003110:	2b02      	cmp	r3, #2
 8003112:	d007      	beq.n	8003124 <SetTargetData+0x13c>
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003118:	2b01      	cmp	r3, #1
 800311a:	d003      	beq.n	8003124 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 800311c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003120:	2b09      	cmp	r3, #9
 8003122:	d109      	bne.n	8003138 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8003124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff09 	bl	8002f40 <ConvertStatusHisto>
 800312e:	4603      	mov	r3, r0
 8003130:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003134:	75da      	strb	r2, [r3, #23]
 8003136:	e008      	b.n	800314a <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8003138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff feaf 	bl	8002ea0 <ConvertStatusLite>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003148:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800314e:	025b      	lsls	r3, r3, #9
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003158:	461a      	mov	r2, r3
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003164:	025b      	lsls	r3, r3, #9
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800316e:	461a      	mov	r2, r3
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	461a      	mov	r2, r3
 800317c:	2100      	movs	r1, #0
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fb2d 	bl	80027de <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8003184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003188:	2b06      	cmp	r3, #6
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8003192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8003196:	f107 0315 	add.w	r3, r7, #21
 800319a:	461a      	mov	r2, r3
 800319c:	2100      	movs	r1, #0
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff faf8 	bl	8002794 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80031a4:	7d7b      	ldrb	r3, [r7, #21]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <SetTargetData+0x1ce>
 80031aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <SetTargetData+0x1ce>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <SetTargetData+0x1d0>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031c2:	461a      	mov	r2, r3
 80031c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80031c8:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 80031cc:	f107 0310 	add.w	r3, r7, #16
 80031d0:	461a      	mov	r2, r3
 80031d2:	2101      	movs	r1, #1
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fb02 	bl	80027de <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80031da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80031e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 80031ec:	f107 0315 	add.w	r3, r7, #21
 80031f0:	461a      	mov	r2, r3
 80031f2:	2101      	movs	r1, #1
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff facd 	bl	8002794 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80031fa:	7d7b      	ldrb	r3, [r7, #21]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <SetTargetData+0x224>
 8003200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <SetTargetData+0x224>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <SetTargetData+0x226>
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003218:	461a      	mov	r2, r3
 800321a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800321e:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	8a9b      	ldrh	r3, [r3, #20]
 8003226:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322a:	7ddb      	ldrb	r3, [r3, #23]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d110      	bne.n	8003252 <SetTargetData+0x26a>
 8003230:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003234:	2b00      	cmp	r3, #0
 8003236:	da0c      	bge.n	8003252 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8003238:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800323c:	4ba3      	ldr	r3, [pc, #652]	; (80034cc <SetTargetData+0x4e4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	da03      	bge.n	800324c <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8003244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003246:	220e      	movs	r2, #14
 8003248:	75da      	strb	r2, [r3, #23]
 800324a:	e002      	b.n	8003252 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800324c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800324e:	2200      	movs	r2, #0
 8003250:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	461a      	mov	r2, r3
 8003258:	f248 01be 	movw	r1, #32958	; 0x80be
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f004 f943 	bl	80074e8 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8003266:	787b      	ldrb	r3, [r7, #1]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 800326c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800326e:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003276:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	429a      	cmp	r2, r3
 800327c:	d902      	bls.n	8003284 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 800327e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003280:	220c      	movs	r2, #12
 8003282:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	461a      	mov	r2, r3
 800328a:	f248 0191 	movw	r1, #32913	; 0x8091
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f004 f92a 	bl	80074e8 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003294:	78bb      	ldrb	r3, [r7, #2]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80032a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a4:	8a9b      	ldrh	r3, [r3, #20]
 80032a6:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 80032ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b0:	2200      	movs	r2, #0
 80032b2:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80032c0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d001      	beq.n	80032cc <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8250 	beq.w	8003774 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 80032d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d6:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 80032d8:	2b07      	cmp	r3, #7
 80032da:	d004      	beq.n	80032e6 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80032dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032de:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	f040 8247 	bne.w	8003774 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80032e6:	787b      	ldrb	r3, [r7, #1]
 80032e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80032f0:	3320      	adds	r3, #32
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	d01c      	beq.n	8003332 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003302:	3320      	adds	r3, #32
 8003304:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8003306:	2b04      	cmp	r3, #4
 8003308:	d013      	beq.n	8003332 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 800330a:	787b      	ldrb	r3, [r7, #1]
 800330c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800330e:	4413      	add	r3, r2
 8003310:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003314:	3320      	adds	r3, #32
 8003316:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 822b 	bne.w	8003774 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800331e:	787b      	ldrb	r3, [r7, #1]
 8003320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003322:	4413      	add	r3, r2
 8003324:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003328:	3324      	adds	r3, #36	; 0x24
 800332a:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 8221 	bne.w	8003774 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8003332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003334:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003338:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800333c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003344:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003346:	429a      	cmp	r2, r3
 8003348:	d00c      	beq.n	8003364 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003350:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003354:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003358:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 800335c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800335e:	429a      	cmp	r2, r3
 8003360:	f040 81dc 	bne.w	800371c <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800336a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003370:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003374:	330c      	adds	r3, #12
 8003376:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800337a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	b29b      	uxth	r3, r3
 8003380:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b21      	cmp	r3, #33	; 0x21
 800338e:	d008      	beq.n	80033a2 <SetTargetData+0x3ba>
 8003390:	2b21      	cmp	r3, #33	; 0x21
 8003392:	f300 81bf 	bgt.w	8003714 <SetTargetData+0x72c>
 8003396:	2b1b      	cmp	r3, #27
 8003398:	f000 8113 	beq.w	80035c2 <SetTargetData+0x5da>
 800339c:	2b1e      	cmp	r3, #30
 800339e:	d004      	beq.n	80033aa <SetTargetData+0x3c2>
 80033a0:	e1b8      	b.n	8003714 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80033a8:	e1b9      	b.n	800371e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80033b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dd0f      	ble.n	80033d8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80033be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	da08      	bge.n	80033d8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80033c6:	7efb      	ldrb	r3, [r7, #27]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80033d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033d6:	e0f3      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80033d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80033e2:	425b      	negs	r3, r3
 80033e4:	429a      	cmp	r2, r3
 80033e6:	da10      	bge.n	800340a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80033e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80033f2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80033f4:	429a      	cmp	r2, r3
 80033f6:	dd08      	ble.n	800340a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80033f8:	7efb      	ldrb	r3, [r7, #27]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8003404:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003408:	e0da      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003414:	429a      	cmp	r2, r3
 8003416:	dd0f      	ble.n	8003438 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800341e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003422:	429a      	cmp	r2, r3
 8003424:	da08      	bge.n	8003438 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003426:	7efb      	ldrb	r3, [r7, #27]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8003432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003436:	e0c3      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003438:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003442:	425b      	negs	r3, r3
 8003444:	429a      	cmp	r2, r3
 8003446:	da10      	bge.n	800346a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003452:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003454:	429a      	cmp	r2, r3
 8003456:	dd08      	ble.n	800346a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003458:	7efb      	ldrb	r3, [r7, #27]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003464:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003468:	e0aa      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003474:	429a      	cmp	r2, r3
 8003476:	dd0f      	ble.n	8003498 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800347e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003482:	429a      	cmp	r2, r3
 8003484:	da08      	bge.n	8003498 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003486:	7efb      	ldrb	r3, [r7, #27]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003492:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003496:	e093      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80034a2:	425b      	negs	r3, r3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	da13      	bge.n	80034d0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80034a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 80034b2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dd0b      	ble.n	80034d0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80034b8:	7efb      	ldrb	r3, [r7, #27]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d108      	bne.n	80034d0 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80034c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034c8:	e07a      	b.n	80035c0 <SetTargetData+0x5d8>
 80034ca:	bf00      	nop
 80034cc:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80034d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034da:	429a      	cmp	r2, r3
 80034dc:	dd0f      	ble.n	80034fe <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80034e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	da08      	bge.n	80034fe <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80034f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034fc:	e060      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80034fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8003508:	425b      	negs	r3, r3
 800350a:	429a      	cmp	r2, r3
 800350c:	da10      	bge.n	8003530 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800350e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8003518:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800351a:	429a      	cmp	r2, r3
 800351c:	dd08      	ble.n	8003530 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 800351e:	7efb      	ldrb	r3, [r7, #27]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8003524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003526:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800352a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800352e:	e047      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8003536:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800353a:	429a      	cmp	r2, r3
 800353c:	da0c      	bge.n	8003558 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003548:	429a      	cmp	r2, r3
 800354a:	dd05      	ble.n	8003558 <SetTargetData+0x570>
					AddOffset =
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8003552:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003556:	e033      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800355e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003562:	429a      	cmp	r2, r3
 8003564:	dd0f      	ble.n	8003586 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 800356c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003570:	429a      	cmp	r2, r3
 8003572:	da08      	bge.n	8003586 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003574:	7efb      	ldrb	r3, [r7, #27]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003580:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003584:	e01c      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8003590:	425b      	negs	r3, r3
 8003592:	429a      	cmp	r2, r3
 8003594:	da10      	bge.n	80035b8 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003596:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 80035a0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 80035a2:	429a      	cmp	r2, r3
 80035a4:	dd08      	ble.n	80035b8 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 80035a6:	7efb      	ldrb	r3, [r7, #27]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80035b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035b6:	e003      	b.n	80035c0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80035be:	e0ae      	b.n	800371e <SetTargetData+0x736>
 80035c0:	e0ad      	b.n	800371e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80035c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dd0f      	ble.n	80035f0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80035d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035da:	429a      	cmp	r2, r3
 80035dc:	da08      	bge.n	80035f0 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80035de:	7efb      	ldrb	r3, [r7, #27]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80035ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035ee:	e090      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80035f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80035fa:	425b      	negs	r3, r3
 80035fc:	429a      	cmp	r2, r3
 80035fe:	da10      	bge.n	8003622 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003600:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 800360a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800360c:	429a      	cmp	r2, r3
 800360e:	dd08      	ble.n	8003622 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003610:	7efb      	ldrb	r3, [r7, #27]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 800361c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003620:	e077      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003624:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800362c:	429a      	cmp	r2, r3
 800362e:	dd0f      	ble.n	8003650 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003636:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800363a:	429a      	cmp	r2, r3
 800363c:	da08      	bge.n	8003650 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800363e:	7efb      	ldrb	r3, [r7, #27]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800364a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800364e:	e060      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003650:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800365a:	425b      	negs	r3, r3
 800365c:	429a      	cmp	r2, r3
 800365e:	da10      	bge.n	8003682 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003660:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800366a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800366c:	429a      	cmp	r2, r3
 800366e:	dd08      	ble.n	8003682 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003670:	7efb      	ldrb	r3, [r7, #27]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800367c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003680:	e047      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003684:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8003688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800368c:	429a      	cmp	r2, r3
 800368e:	da0c      	bge.n	80036aa <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800369a:	429a      	cmp	r2, r3
 800369c:	dd05      	ble.n	80036aa <SetTargetData+0x6c2>
					AddOffset =
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80036a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036a8:	e033      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80036b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dd0f      	ble.n	80036d8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80036be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	da08      	bge.n	80036d8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80036c6:	7efb      	ldrb	r3, [r7, #27]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80036d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036d6:	e01c      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80036d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80036e2:	425b      	negs	r3, r3
 80036e4:	429a      	cmp	r2, r3
 80036e6:	da10      	bge.n	800370a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80036e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80036f2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dd08      	ble.n	800370a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80036f8:	7efb      	ldrb	r3, [r7, #27]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8003704:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003708:	e003      	b.n	8003712 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003710:	e005      	b.n	800371e <SetTargetData+0x736>
 8003712:	e004      	b.n	800371e <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800371a:	e000      	b.n	800371e <SetTargetData+0x736>
			}
		}
 800371c:	bf00      	nop

		if (uwr_status) {
 800371e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003722:	2b00      	cmp	r3, #0
 8003724:	d026      	beq.n	8003774 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8003726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003728:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800372c:	b29a      	uxth	r2, r3
 800372e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003732:	4413      	add	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	b21a      	sxth	r2, r3
 8003738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373a:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800373c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800373e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003742:	b29a      	uxth	r2, r3
 8003744:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003748:	4413      	add	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	b21a      	sxth	r2, r3
 800374e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003750:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003754:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003758:	b29a      	uxth	r2, r3
 800375a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800375e:	4413      	add	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	b21a      	sxth	r2, r3
 8003764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003766:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376a:	2201      	movs	r2, #1
 800376c:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800376e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003770:	2200      	movs	r2, #0
 8003772:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003778:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800377c:	330c      	adds	r3, #12
 800377e:	8b39      	ldrh	r1, [r7, #24]
 8003780:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003784:	787b      	ldrb	r3, [r7, #1]
 8003786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003788:	7dd1      	ldrb	r1, [r2, #23]
 800378a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378c:	4413      	add	r3, r2
 800378e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003792:	3320      	adds	r3, #32
 8003794:	460a      	mov	r2, r1
 8003796:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003798:	787b      	ldrb	r3, [r7, #1]
 800379a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379c:	7e11      	ldrb	r1, [r2, #24]
 800379e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80037a6:	3324      	adds	r3, #36	; 0x24
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80037ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80037b2:	461a      	mov	r2, r3
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 80037ba:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3748      	adds	r7, #72	; 0x48
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop

080037c8 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b091      	sub	sp, #68	; 0x44
 80037cc:	af04      	add	r7, sp, #16
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3318      	adds	r3, #24
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	7c9a      	ldrb	r2, [r3, #18]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	789a      	ldrb	r2, [r3, #2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003812:	4293      	cmp	r3, r2
 8003814:	bfa8      	it	ge
 8003816:	4613      	movge	r3, r2
 8003818:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800381e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	78da      	ldrb	r2, [r3, #3]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003836:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	7c9b      	ldrb	r3, [r3, #18]
 8003844:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003848:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <SetMeasurementData+0x90>

		iteration = 1;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003856:	e003      	b.n	8003860 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003858:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800385c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003860:	2300      	movs	r3, #0
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003866:	e048      	b.n	80038fa <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003868:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	3308      	adds	r3, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 800387c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003880:	224c      	movs	r2, #76	; 0x4c
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	3310      	adds	r3, #16
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 8003890:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003894:	2b00      	cmp	r3, #0
 8003896:	d114      	bne.n	80038c2 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7918      	ldrb	r0, [r3, #4]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	7c1b      	ldrb	r3, [r3, #16]
 80038a0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80038a4:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	9202      	str	r2, [sp, #8]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	9201      	str	r2, [sp, #4]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4623      	mov	r3, r4
 80038b4:	4602      	mov	r2, r0
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fb96 	bl	8002fe8 <SetTargetData>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	7ddb      	ldrb	r3, [r3, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10d      	bne.n	80038f0 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80038da:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80038de:	429a      	cmp	r2, r3
 80038e0:	da06      	bge.n	80038f0 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	8a9b      	ldrh	r3, [r3, #20]
 80038e6:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80038e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80038f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038f4:	3301      	adds	r3, #1
 80038f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80038fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003902:	429a      	cmp	r2, r3
 8003904:	d3b0      	bcc.n	8003868 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003912:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003916:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800391a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800391e:	e01f      	b.n	8003960 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800392a:	330c      	adds	r3, #12
 800392c:	2100      	movs	r1, #0
 800392e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4413      	add	r3, r2
 800393a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800393e:	3320      	adds	r3, #32
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4413      	add	r3, r2
 800394c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800395a:	3301      	adds	r3, #1
 800395c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003964:	2b03      	cmp	r3, #3
 8003966:	d9db      	bls.n	8003920 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003968:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11b      	bne.n	80039a8 <SetMeasurementData+0x1e0>
 8003970:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003974:	2b00      	cmp	r3, #0
 8003976:	d017      	beq.n	80039a8 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003978:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	3308      	adds	r3, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 800398c:	2304      	movs	r3, #4
 800398e:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 8003990:	7efb      	ldrb	r3, [r7, #27]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	337e      	adds	r3, #126	; 0x7e
 80039a0:	69f9      	ldr	r1, [r7, #28]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff f996 	bl	8002cd4 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 80039a8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3734      	adds	r7, #52	; 0x34
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}

080039b4 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3318      	adds	r3, #24
 80039c6:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80039ce:	3308      	adds	r3, #8
 80039d0:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	21ff      	movs	r1, #255	; 0xff
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	f016 f956 	bl	8019c88 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	2102      	movs	r1, #2
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f002 fc2e 	bl	8006242 <VL53L1_get_device_results>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 80039ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b07      	cmp	r3, #7
 80039f8:	d002      	beq.n	8003a00 <VL53L1_GetMultiRangingData+0x4c>
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d004      	beq.n	8003a08 <VL53L1_GetMultiRangingData+0x54>
 80039fe:	e007      	b.n	8003a10 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8003a06:	e006      	b.n	8003a16 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 8003a0e:	e002      	b.n	8003a16 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fed4 	bl	80037c8 <SetMeasurementData>
 8003a20:	4603      	mov	r3, r0
 8003a22:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8003a3e:	f240 3305 	movw	r3, #773	; 0x305
 8003a42:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3318      	adds	r3, #24
 8003a48:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	3348      	adds	r3, #72	; 0x48
 8003a4e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003a50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11c      	bne.n	8003a92 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a5e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003a66:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8e3 	bl	8003c38 <VL53L1_run_ref_spad_char>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003a78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d108      	bne.n	8003a92 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 8003a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fe fb2c 	bl	80020e4 <VL53L1_SetPresetMode>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003a92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a96:	f113 0f1d 	cmn.w	r3, #29
 8003a9a:	d14e      	bne.n	8003b3a <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	2128      	movs	r1, #40	; 0x28
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f00e fbf6 	bl	8012296 <VL53L1_read_nvm_raw_data>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 8003ab0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003ab8:	f107 020c 	add.w	r2, r7, #12
 8003abc:	2302      	movs	r3, #2
 8003abe:	2114      	movs	r1, #20
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f010 fe5f 	bl	8014784 <VL53L1_WriteMulti>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 8003acc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8003ad4:	7b3a      	ldrb	r2, [r7, #12]
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8003ada:	7b7a      	ldrb	r2, [r7, #13]
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8003ae8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d108      	bne.n	8003b02 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8003af0:	2306      	movs	r3, #6
 8003af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af4:	210d      	movs	r1, #13
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f010 fe44 	bl	8014784 <VL53L1_WriteMulti>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8003b02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d117      	bne.n	8003b3a <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	785a      	ldrb	r2, [r3, #1]
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	789a      	ldrb	r2, [r3, #2]
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	78da      	ldrb	r2, [r3, #3]
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	791a      	ldrb	r2, [r3, #4]
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	795a      	ldrb	r2, [r3, #5]
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8003b3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3740      	adds	r7, #64	; 0x40
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d84a      	bhi.n	8003c00 <VL53L1_SmudgeCorrectionEnable+0xb8>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b81 	.word	0x08003b81
 8003b74:	08003ba1 	.word	0x08003ba1
 8003b78:	08003bc1 	.word	0x08003bc1
 8003b7c:	08003be1 	.word	0x08003be1
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f004 fbee 	bl	8008362 <VL53L1_dynamic_xtalk_correction_disable>
 8003b86:	4603      	mov	r3, r0
 8003b88:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f004 fc17 	bl	80083be <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003b90:	4603      	mov	r3, r0
 8003b92:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f004 fc40 	bl	800841a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	733b      	strb	r3, [r7, #12]
		break;
 8003b9e:	e032      	b.n	8003c06 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f004 fbc7 	bl	8008334 <VL53L1_dynamic_xtalk_correction_enable>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f004 fbf0 	bl	8008390 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f004 fc30 	bl	800841a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	733b      	strb	r3, [r7, #12]
		break;
 8003bbe:	e022      	b.n	8003c06 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f004 fbb7 	bl	8008334 <VL53L1_dynamic_xtalk_correction_enable>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f004 fbe0 	bl	8008390 <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f004 fc09 	bl	80083ec <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	733b      	strb	r3, [r7, #12]
		break;
 8003bde:	e012      	b.n	8003c06 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f004 fba7 	bl	8008334 <VL53L1_dynamic_xtalk_correction_enable>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f004 fbe7 	bl	80083be <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f004 fc10 	bl	800841a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	733b      	strb	r3, [r7, #12]
		break;
 8003bfe:	e002      	b.n	8003c06 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003c00:	23fc      	movs	r3, #252	; 0xfc
 8003c02:	73fb      	strb	r3, [r7, #15]
		break;
 8003c04:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10d      	bne.n	8003c2a <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003c1a:	7b7b      	ldrb	r3, [r7, #13]
 8003c1c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003c26:	7b3b      	ldrb	r3, [r7, #12]
 8003c28:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop

08003c38 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3318      	adds	r3, #24
 8003c4a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003c52:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d104      	bne.n	8003c66 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f007 fc99 	bl	800b594 <VL53L1_enable_powerforce>
 8003c62:	4603      	mov	r3, r0
 8003c64:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003c66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d117      	bne.n	8003c9e <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	7858      	ldrb	r0, [r3, #1]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	685c      	ldr	r4, [r3, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	891d      	ldrh	r5, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	899b      	ldrh	r3, [r3, #12]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	8952      	ldrh	r2, [r2, #10]
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003c88:	9102      	str	r1, [sp, #8]
 8003c8a:	9201      	str	r2, [sp, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462b      	mov	r3, r5
 8003c90:	4622      	mov	r2, r4
 8003c92:	4601      	mov	r1, r0
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f009 fbda 	bl	800d44e <VL53L1_set_ref_spad_char_config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f891 	bl	8003dd4 <VL53L1_run_device_test>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d108      	bne.n	8003cd0 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	21d9      	movs	r1, #217	; 0xd9
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f010 fd92 	bl	80147f0 <VL53L1_ReadMulti>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003cd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003cd8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce0:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003ce4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d108      	bne.n	8003d0a <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003cf8:	f107 020c 	add.w	r2, r7, #12
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	2114      	movs	r1, #20
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f010 fd3f 	bl	8014784 <VL53L1_WriteMulti>
 8003d06:	4603      	mov	r3, r0
 8003d08:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003d12:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003d1a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003d22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003d2a:	f107 020c 	add.w	r2, r7, #12
 8003d2e:	2306      	movs	r3, #6
 8003d30:	21ac      	movs	r1, #172	; 0xac
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f010 fd5c 	bl	80147f0 <VL53L1_ReadMulti>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003d44:	f107 020c 	add.w	r2, r7, #12
 8003d48:	2306      	movs	r3, #6
 8003d4a:	210d      	movs	r1, #13
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f010 fd19 	bl	8014784 <VL53L1_WriteMulti>
 8003d52:	4603      	mov	r3, r0
 8003d54:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d117      	bne.n	8003d8e <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003d5e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003d66:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003d6e:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003d7e:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003d86:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d114      	bne.n	8003dc0 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d00c      	beq.n	8003dba <VL53L1_run_ref_spad_char+0x182>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	dc0e      	bgt.n	8003dc2 <VL53L1_run_ref_spad_char+0x18a>
 8003da4:	2b0e      	cmp	r3, #14
 8003da6:	d002      	beq.n	8003dae <VL53L1_run_ref_spad_char+0x176>
 8003da8:	2b0f      	cmp	r3, #15
 8003daa:	d003      	beq.n	8003db4 <VL53L1_run_ref_spad_char+0x17c>
 8003dac:	e009      	b.n	8003dc2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003dae:	23e4      	movs	r3, #228	; 0xe4
 8003db0:	77fb      	strb	r3, [r7, #31]
			break;
 8003db2:	e006      	b.n	8003dc2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003db4:	23e3      	movs	r3, #227	; 0xe3
 8003db6:	77fb      	strb	r3, [r7, #31]
			break;
 8003db8:	e003      	b.n	8003dc2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003dba:	23e2      	movs	r3, #226	; 0xe2
 8003dbc:	77fb      	strb	r3, [r7, #31]
			break;
 8003dbe:	e000      	b.n	8003dc2 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003dc0:	bf00      	nop



	*pcal_status = status;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	7ffa      	ldrb	r2, [r7, #31]
 8003dc6:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bdb0      	pop	{r4, r5, r7, pc}

08003dd4 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3318      	adds	r3, #24
 8003de8:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d108      	bne.n	8003e08 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003df6:	f107 030b 	add.w	r3, r7, #11
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2130      	movs	r1, #48	; 0x30
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f010 fd88 	bl	8014914 <VL53L1_RdByte>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003e10:	7afa      	ldrb	r2, [r7, #11]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f007 fb39 	bl	800b49c <VL53L1_start_test>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f00f ff5c 	bl	8013cf4 <VL53L1_wait_for_test_completion>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003e48:	f107 020c 	add.w	r2, r7, #12
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	2189      	movs	r1, #137	; 0x89
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f010 fccd 	bl	80147f0 <VL53L1_ReadMulti>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003e62:	7b3a      	ldrb	r2, [r7, #12]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003e6a:	7b7a      	ldrb	r2, [r7, #13]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f007 fba1 	bl	800b5dc <VL53L1_clear_interrupt>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f007 faf7 	bl	800b49c <VL53L1_start_test>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b21      	cmp	r3, #33	; 0x21
 8003ed2:	d006      	beq.n	8003ee2 <select_offset_per_vcsel+0x24>
 8003ed4:	2b21      	cmp	r3, #33	; 0x21
 8003ed6:	dc2b      	bgt.n	8003f30 <select_offset_per_vcsel+0x72>
 8003ed8:	2b1b      	cmp	r3, #27
 8003eda:	d01c      	beq.n	8003f16 <select_offset_per_vcsel+0x58>
 8003edc:	2b1e      	cmp	r3, #30
 8003ede:	d00d      	beq.n	8003efc <select_offset_per_vcsel+0x3e>
 8003ee0:	e026      	b.n	8003f30 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee8:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003eec:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef4:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003ef8:	817b      	strh	r3, [r7, #10]
		break;
 8003efa:	e02b      	b.n	8003f54 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f02:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003f06:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003f12:	817b      	strh	r3, [r7, #10]
		break;
 8003f14:	e01e      	b.n	8003f54 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003f20:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003f2c:	817b      	strh	r3, [r7, #10]
		break;
 8003f2e:	e011      	b.n	8003f54 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f36:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003f3a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f42:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003f46:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003f48:	23fc      	movs	r3, #252	; 0xfc
 8003f4a:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]
		break;
 8003f52:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003f5a:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8003f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003f64:	7a7b      	ldrb	r3, [r7, #9]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <select_offset_per_vcsel+0xb6>
 8003f6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003f72:	e001      	b.n	8003f78 <select_offset_per_vcsel+0xba>
 8003f74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	8013      	strh	r3, [r2, #0]

	return status;
 8003f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003f8c:	b490      	push	{r4, r7}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	71fb      	strb	r3, [r7, #7]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003fbe:	e021      	b.n	8004004 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003fc0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	0052      	lsls	r2, r2, #1
 8003fce:	441a      	add	r2, r3
 8003fd0:	00d3      	lsls	r3, r2, #3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	440b      	add	r3, r1
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	4413      	add	r3, r2
 8003fde:	4423      	add	r3, r4
 8003fe0:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003fe8:	6a3a      	ldr	r2, [r7, #32]
 8003fea:	4413      	add	r3, r2
 8003fec:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003fee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3206      	adds	r2, #6
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004000:	3301      	adds	r3, #1
 8004002:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004004:	79bb      	ldrb	r3, [r7, #6]
 8004006:	b29b      	uxth	r3, r3
 8004008:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800400a:	429a      	cmp	r2, r3
 800400c:	d3d8      	bcc.n	8003fc0 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d047      	beq.n	80040a4 <vl53l1_diff_histo_stddev+0x118>
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d044      	beq.n	80040a4 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	b29b      	uxth	r3, r3
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004022:	e03a      	b.n	800409a <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8004024:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	461a      	mov	r2, r3
 8004030:	0052      	lsls	r2, r2, #1
 8004032:	441a      	add	r2, r3
 8004034:	00d3      	lsls	r3, r2, #3
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	440b      	add	r3, r1
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	4413      	add	r3, r2
 8004042:	4423      	add	r3, r4
 8004044:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004048:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800404c:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004054:	fb03 f202 	mul.w	r2, r3, r2
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	fb92 f3f3 	sdiv	r3, r2, r3
 800405e:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8004060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3206      	adds	r2, #6
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800406e:	fb03 f202 	mul.w	r2, r3, r2
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fb92 f3f3 	sdiv	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	69b9      	ldr	r1, [r7, #24]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8004084:	69b8      	ldr	r0, [r7, #24]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	441a      	add	r2, r3
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8004094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004096:	3301      	adds	r3, #1
 8004098:	84fb      	strh	r3, [r7, #38]	; 0x26
 800409a:	79bb      	ldrb	r3, [r7, #6]
 800409c:	b29b      	uxth	r3, r3
 800409e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d3bf      	bcc.n	8004024 <vl53l1_diff_histo_stddev+0x98>
	}
}
 80040a4:	bf00      	nop
 80040a6:	3728      	adds	r7, #40	; 0x28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc90      	pop	{r4, r7}
 80040ac:	4770      	bx	lr

080040ae <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 80040ae:	b5b0      	push	{r4, r5, r7, lr}
 80040b0:	b08c      	sub	sp, #48	; 0x30
 80040b2:	af02      	add	r7, sp, #8
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3318      	adds	r3, #24
 80040bc:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80040de:	2318      	movs	r3, #24
 80040e0:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	461a      	mov	r2, r3
 80040e8:	f248 018f 	movw	r1, #32911	; 0x808f
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f003 f9fb 	bl	80074e8 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	461a      	mov	r2, r3
 80040f8:	f248 018e 	movw	r1, #32910	; 0x808e
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f003 f9f3 	bl	80074e8 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800410c:	2b00      	cmp	r3, #0
 800410e:	f040 811b 	bne.w	8004348 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 800412c:	7efb      	ldrb	r3, [r7, #27]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	b2db      	uxtb	r3, r3
 8004132:	7eba      	ldrb	r2, [r7, #26]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413e:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004150:	3b01      	subs	r3, #1
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e004      	b.n	8004162 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8004162:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8004166:	7efb      	ldrb	r3, [r7, #27]
 8004168:	69f8      	ldr	r0, [r7, #28]
 800416a:	461a      	mov	r2, r3
 800416c:	0052      	lsls	r2, r2, #1
 800416e:	441a      	add	r2, r3
 8004170:	0153      	lsls	r3, r2, #5
 8004172:	461a      	mov	r2, r3
 8004174:	460b      	mov	r3, r1
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	440b      	add	r3, r1
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	4413      	add	r3, r2
 800417e:	4403      	add	r3, r0
 8004180:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8004184:	3308      	adds	r3, #8
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dd0c      	ble.n	80041a6 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 800418c:	7e79      	ldrb	r1, [r7, #25]
 800418e:	7efa      	ldrb	r2, [r7, #27]
 8004190:	f107 030c 	add.w	r3, r7, #12
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	460b      	mov	r3, r1
 800419e:	6839      	ldr	r1, [r7, #0]
 80041a0:	69f8      	ldr	r0, [r7, #28]
 80041a2:	f7ff fef3 	bl	8003f8c <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	db23      	blt.n	80041f6 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80041b4:	3318      	adds	r3, #24
 80041b6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f015 fd63 	bl	8019c88 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 80041d4:	7efb      	ldrb	r3, [r7, #27]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e0:	2206      	movs	r2, #6
 80041e2:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80041e6:	e034      	b.n	8004252 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ee:	2207      	movs	r2, #7
 80041f0:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80041f4:	e02d      	b.n	8004252 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004200:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8004202:	2300      	movs	r3, #0
 8004204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004208:	e01e      	b.n	8004248 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 800420a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 800420e:	7e39      	ldrb	r1, [r7, #24]
 8004210:	7efb      	ldrb	r3, [r7, #27]
 8004212:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	3006      	adds	r0, #6
 800421a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 800421e:	69f8      	ldr	r0, [r7, #28]
 8004220:	461a      	mov	r2, r3
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	441a      	add	r2, r3
 8004226:	00d3      	lsls	r3, r2, #3
 8004228:	461a      	mov	r2, r3
 800422a:	460b      	mov	r3, r1
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	440b      	add	r3, r1
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4413      	add	r3, r2
 8004234:	442b      	add	r3, r5
 8004236:	f203 7316 	addw	r3, r3, #1814	; 0x716
 800423a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800423e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004242:	3301      	adds	r3, #1
 8004244:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004248:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800424c:	7ebb      	ldrb	r3, [r7, #26]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3db      	bcc.n	800420a <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004258:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800425c:	461a      	mov	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3b01      	subs	r3, #1
 8004262:	429a      	cmp	r2, r3
 8004264:	d109      	bne.n	800427a <vl53l1_histo_merge+0x1cc>
 8004266:	7efb      	ldrb	r3, [r7, #27]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8004278:	e00e      	b.n	8004298 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 800427a:	7efb      	ldrb	r3, [r7, #27]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10b      	bne.n	8004298 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004286:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800428a:	3301      	adds	r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004294:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004298:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800429c:	2b01      	cmp	r3, #1
 800429e:	d102      	bne.n	80042a6 <vl53l1_histo_merge+0x1f8>
 80042a0:	7efb      	ldrb	r3, [r7, #27]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d069      	beq.n	800437a <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ac:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d162      	bne.n	800437a <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042b8:	e008      	b.n	80042cc <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 80042ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3206      	adds	r2, #6
 80042c0:	2100      	movs	r1, #0
 80042c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 80042c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042c8:	3301      	adds	r3, #1
 80042ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042cc:	7ebb      	ldrb	r3, [r7, #26]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d3f1      	bcc.n	80042ba <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042da:	e02f      	b.n	800433c <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80042e2:	e023      	b.n	800432c <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 80042e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3206      	adds	r2, #6
 80042ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80042ee:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80042f2:	7efb      	ldrb	r3, [r7, #27]
 80042f4:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80042f6:	69fc      	ldr	r4, [r7, #28]
 80042f8:	461a      	mov	r2, r3
 80042fa:	0052      	lsls	r2, r2, #1
 80042fc:	441a      	add	r2, r3
 80042fe:	00d3      	lsls	r3, r2, #3
 8004300:	461a      	mov	r2, r3
 8004302:	460b      	mov	r3, r1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	440b      	add	r3, r1
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	442b      	add	r3, r5
 800430e:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004312:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8004316:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004318:	18c1      	adds	r1, r0, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	3206      	adds	r2, #6
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8004322:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004326:	3301      	adds	r3, #1
 8004328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800432c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	429a      	cmp	r2, r3
 8004334:	dbd6      	blt.n	80042e4 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8004336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004338:	3301      	adds	r3, #1
 800433a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800433c:	7ebb      	ldrb	r3, [r7, #26]
 800433e:	b29b      	uxth	r3, r3
 8004340:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004342:	429a      	cmp	r2, r3
 8004344:	d3ca      	bcc.n	80042dc <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004346:	e018      	b.n	800437a <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004352:	3b01      	subs	r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004366:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800436a:	2bff      	cmp	r3, #255	; 0xff
 800436c:	d105      	bne.n	800437a <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 800437a:	bf00      	nop
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004384 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b0c6      	sub	sp, #280	; 0x118
 8004388:	af00      	add	r7, sp, #0
 800438a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800438e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004392:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80043a0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 80043a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043b0:	2200      	movs	r2, #0
 80043b2:	2185      	movs	r1, #133	; 0x85
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	f010 fa51 	bl	801485c <VL53L1_WrByte>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80043c0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 80043c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f007 f8df 	bl	800b594 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 80043d6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80043da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043e2:	f248 018c 	movw	r1, #32908	; 0x808c
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	f003 f87e 	bl	80074e8 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80043ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d81b      	bhi.n	800442c <VL53L1_load_patch+0xa8>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <VL53L1_load_patch+0x78>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	08004415 	.word	0x08004415
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004425 	.word	0x08004425
	case 0:
		patch_power = 0x00;
 800440c:	2300      	movs	r3, #0
 800440e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004412:	e00e      	b.n	8004432 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8004414:	2310      	movs	r3, #16
 8004416:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800441a:	e00a      	b.n	8004432 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 800441c:	2320      	movs	r3, #32
 800441e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004422:	e006      	b.n	8004432 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800442a:	e002      	b.n	8004432 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8004432:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004436:	2b00      	cmp	r3, #0
 8004438:	d134      	bne.n	80044a4 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 800443a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800443e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004442:	2229      	movs	r2, #41	; 0x29
 8004444:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004446:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800444a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800444e:	22c9      	movs	r2, #201	; 0xc9
 8004450:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004452:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004456:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800445a:	220e      	movs	r2, #14
 800445c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800445e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004462:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800446a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800446e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004472:	2228      	movs	r2, #40	; 0x28
 8004474:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004476:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800447a:	b2da      	uxtb	r2, r3
 800447c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004480:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004484:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8004486:	f107 020c 	add.w	r2, r7, #12
 800448a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800448e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004492:	2306      	movs	r3, #6
 8004494:	f240 4176 	movw	r1, #1142	; 0x476
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	f010 f973 	bl	8014784 <VL53L1_WriteMulti>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80044a4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d132      	bne.n	8004512 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 80044ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044b4:	2203      	movs	r2, #3
 80044b6:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80044b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044c0:	226d      	movs	r2, #109	; 0x6d
 80044c2:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80044c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044cc:	2203      	movs	r2, #3
 80044ce:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80044d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044d8:	226f      	movs	r2, #111	; 0x6f
 80044da:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80044dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044e4:	2207      	movs	r2, #7
 80044e6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80044e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044f0:	2229      	movs	r2, #41	; 0x29
 80044f2:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80044f4:	f107 020c 	add.w	r2, r7, #12
 80044f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044fc:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004500:	2306      	movs	r3, #6
 8004502:	f240 4196 	movw	r1, #1174	; 0x496
 8004506:	6800      	ldr	r0, [r0, #0]
 8004508:	f010 f93c 	bl	8014784 <VL53L1_WriteMulti>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004512:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11a      	bne.n	8004550 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 800451a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800451e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800452a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800452e:	2207      	movs	r2, #7
 8004530:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8004532:	f107 020c 	add.w	r2, r7, #12
 8004536:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800453a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800453e:	2302      	movs	r3, #2
 8004540:	f240 4172 	movw	r1, #1138	; 0x472
 8004544:	6800      	ldr	r0, [r0, #0]
 8004546:	f010 f91d 	bl	8014784 <VL53L1_WriteMulti>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004550:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11a      	bne.n	800458e <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800455c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004564:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004568:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800456c:	2207      	movs	r2, #7
 800456e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8004570:	f107 020c 	add.w	r2, r7, #12
 8004574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004578:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800457c:	2302      	movs	r3, #2
 800457e:	f240 4174 	movw	r1, #1140	; 0x474
 8004582:	6800      	ldr	r0, [r0, #0]
 8004584:	f010 f8fe 	bl	8014784 <VL53L1_WriteMulti>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 800458e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8004596:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800459a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800459e:	2201      	movs	r2, #1
 80045a0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f010 f959 	bl	801485c <VL53L1_WrByte>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 80045b0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 80045b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80045bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045c0:	2201      	movs	r2, #1
 80045c2:	2185      	movs	r1, #133	; 0x85
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	f010 f949 	bl	801485c <VL53L1_WrByte>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80045d0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop

080045e0 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80045ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80045f4:	2200      	movs	r2, #0
 80045f6:	2185      	movs	r1, #133	; 0x85
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f010 f92f 	bl	801485c <VL53L1_WrByte>
 80045fe:	4603      	mov	r3, r0
 8004600:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f006 ffd4 	bl	800b5b8 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8004610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d107      	bne.n	8004628 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f010 f91c 	bl	801485c <VL53L1_WrByte>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8004630:	2201      	movs	r2, #1
 8004632:	2185      	movs	r1, #133	; 0x85
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f010 f911 	bl	801485c <VL53L1_WrByte>
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800464a:	b5b0      	push	{r4, r5, r7, lr}
 800464c:	b08a      	sub	sp, #40	; 0x28
 800464e:	af04      	add	r7, sp, #16
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3318      	adds	r3, #24
 800465e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004666:	3308      	adds	r3, #8
 8004668:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800466e:	2162      	movs	r1, #98	; 0x62
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f006 f810 	bl	800a696 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2204      	movs	r2, #4
 800467a:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2210      	movs	r2, #16
 8004686:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004692:	2300      	movs	r3, #0
 8004694:	75bb      	strb	r3, [r7, #22]
 8004696:	e01b      	b.n	80046d0 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8004698:	7dba      	ldrb	r2, [r7, #22]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	3308      	adds	r3, #8
 80046ac:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2200      	movs	r2, #0
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2200      	movs	r2, #0
 80046b8:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80046ca:	7dbb      	ldrb	r3, [r7, #22]
 80046cc:	3301      	adds	r3, #1
 80046ce:	75bb      	strb	r3, [r7, #22]
 80046d0:	7dbb      	ldrb	r3, [r7, #22]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d9e0      	bls.n	8004698 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2210      	movs	r2, #16
 80046da:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2210      	movs	r2, #16
 80046ea:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	75bb      	strb	r3, [r7, #22]
 80046fa:	e039      	b.n	8004770 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80046fc:	7dba      	ldrb	r2, [r7, #22]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8004712:	7dba      	ldrb	r2, [r7, #22]
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8004728:	7dba      	ldrb	r2, [r7, #22]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800473e:	7dba      	ldrb	r2, [r7, #22]
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004754:	7dba      	ldrb	r2, [r7, #22]
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800476a:	7dbb      	ldrb	r3, [r7, #22]
 800476c:	3301      	adds	r3, #1
 800476e:	75bb      	strb	r3, [r7, #22]
 8004770:	7dbb      	ldrb	r3, [r7, #22]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d9c2      	bls.n	80046fc <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2201      	movs	r2, #1
 8004780:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2200      	movs	r2, #0
 8004786:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2200      	movs	r2, #0
 800478c:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2201      	movs	r2, #1
 8004792:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2201      	movs	r2, #1
 8004798:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2201      	movs	r2, #1
 800479e:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047a6:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80047ae:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80047b6:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2264      	movs	r2, #100	; 0x64
 80047bc:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80047c4:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f240 72db 	movw	r2, #2011	; 0x7db
 80047ec:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80047f6:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f005 ff2e 	bl	800a65c <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004806:	3318      	adds	r3, #24
 8004808:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f015 fa3a 	bl	8019c88 <memset>
	pdev->bin_rec_pos = 0;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <VL53L1_data_init+0x1fa>
 8004832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8b8 	bl	80049b0 <VL53L1_read_p2p_data>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d107      	bne.n	800485c <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004852:	4618      	mov	r0, r3
 8004854:	f003 fdf8 	bl	8008448 <VL53L1_init_refspadchar_config_struct>
 8004858:	4603      	mov	r3, r0
 800485a:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 800485c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d107      	bne.n	8004874 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fe10 	bl	8008490 <VL53L1_init_ssc_config_struct>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f003 fe21 	bl	80084d2 <VL53L1_init_xtalk_config_struct>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d107      	bne.n	80048ac <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80048a2:	4618      	mov	r0, r3
 80048a4:	f003 fe89 	bl	80085ba <VL53L1_init_xtalk_extract_config_struct>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 80048ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f003 feac 	bl	8008618 <VL53L1_init_offset_cal_config_struct>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80048c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 fec7 	bl	8008666 <VL53L1_init_zone_cal_config_struct>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80048dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f003 fedb 	bl	80086ae <VL53L1_init_hist_post_process_config_struct>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80048fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800490a:	4618      	mov	r0, r3
 800490c:	f004 f8f6 	bl	8008afc <VL53L1_init_hist_gen3_dmax_config_struct>
 8004910:	4603      	mov	r3, r0
 8004912:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004922:	4618      	mov	r0, r3
 8004924:	f003 ff32 	bl	800878c <VL53L1_init_tuning_parm_storage_struct>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 800492c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d116      	bne.n	8004962 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	7858      	ldrb	r0, [r3, #1]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	8b1c      	ldrh	r4, [r3, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	689d      	ldr	r5, [r3, #8]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	6912      	ldr	r2, [r2, #16]
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	6949      	ldr	r1, [r1, #20]
 800494c:	9102      	str	r1, [sp, #8]
 800494e:	9201      	str	r2, [sp, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	462b      	mov	r3, r5
 8004954:	4622      	mov	r2, r4
 8004956:	4601      	mov	r1, r0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fc8f 	bl	800527c <VL53L1_set_preset_mode>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004968:	461a      	mov	r2, r3
 800496a:	2118      	movs	r1, #24
 800496c:	2000      	movs	r0, #0
 800496e:	f00a fa90 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004978:	461a      	mov	r2, r3
 800497a:	2118      	movs	r1, #24
 800497c:	2000      	movs	r0, #0
 800497e:	f00a fa88 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004988:	461a      	mov	r2, r3
 800498a:	210c      	movs	r1, #12
 800498c:	2000      	movs	r0, #0
 800498e:	f006 fc26 	bl	800b1de <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f009 fcd2 	bl	800e33c <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f009 fbd1 	bl	800e140 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f009 fcf7 	bl	800e392 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80049a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bdb0      	pop	{r4, r5, r7, pc}

080049b0 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b091      	sub	sp, #68	; 0x44
 80049b4:	af04      	add	r7, sp, #16
 80049b6:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3318      	adds	r3, #24
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	3348      	adds	r3, #72	; 0x48
 80049d0:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	339c      	adds	r3, #156	; 0x9c
 80049d6:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80049d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f00d fdd1 	bl	8012590 <VL53L1_get_static_nvm_managed>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80049f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f00d ff02 	bl	801280c <VL53L1_get_customer_nvm_managed>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004a0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d117      	bne.n	8004a46 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f00e fdda 	bl	80135d8 <VL53L1_get_nvm_copy_data>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8004a2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f006 f921 	bl	800ac88 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004a46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10e      	bne.n	8004a6c <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	895b      	ldrh	r3, [r3, #10]
 8004a52:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8004a6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	33c0      	adds	r3, #192	; 0xc0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f00d fc3c 	bl	80122f8 <VL53L1_read_nvm_optical_centre>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004a86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	3360      	adds	r3, #96	; 0x60
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f00d fc52 	bl	801233e <VL53L1_read_nvm_cal_peak_rate_map>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 8004aa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d12d      	bne.n	8004b04 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	339c      	adds	r3, #156	; 0x9c
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f00d fc6b 	bl	801238a <VL53L1_read_nvm_additional_offset_cal_data>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	889b      	ldrh	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d120      	bne.n	8004b04 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11c      	bne.n	8004b04 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004ad6:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	3102      	adds	r1, #2
 8004af0:	9103      	str	r1, [sp, #12]
 8004af2:	9202      	str	r2, [sp, #8]
 8004af4:	2238      	movs	r2, #56	; 0x38
 8004af6:	9201      	str	r2, [sp, #4]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	23ff      	movs	r3, #255	; 0xff
 8004afc:	22c7      	movs	r2, #199	; 0xc7
 8004afe:	4621      	mov	r1, r4
 8004b00:	f008 f934 	bl	800cd6c <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8004b04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d12f      	bne.n	8004b6c <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	461a      	mov	r2, r3
 8004b12:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f00d fc5a 	bl	80123d0 <VL53L1_read_nvm_fmt_range_results_data>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8004b22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d120      	bne.n	8004b6c <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004b2a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004b32:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004b3a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004b58:	e003      	b.n	8004b62 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	2214      	movs	r2, #20
 8004b5e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b68:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004b6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10b      	bne.n	8004b8c <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	21de      	movs	r1, #222	; 0xde
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f00f fefb 	bl	801497c <VL53L1_RdWord>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d204      	bcs.n	8004ba2 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004b9e:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004ba2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	33bc      	adds	r3, #188	; 0xbc
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f97d 	bl	8004eb0 <VL53L1_get_mode_mitigation_roi>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d114      	bne.n	8004bf0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004bf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3734      	adds	r7, #52	; 0x34
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c16:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c1e:	23f1      	movs	r3, #241	; 0xf1
 8004c20:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10e      	bne.n	8004c48 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c36:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004c3a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3318      	adds	r3, #24
 8004c6a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c72:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c7a:	23f1      	movs	r3, #241	; 0xf1
 8004c7c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c92:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004c96:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af02      	add	r7, sp, #8
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004cd0:	23f1      	movs	r3, #241	; 0xf1
 8004cd2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11b      	bne.n	8004d14 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	460b      	mov	r3, r1
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	68b8      	ldr	r0, [r7, #8]
 8004d0c:	f006 fe0b 	bl	800b926 <VL53L1_calc_timeout_register_values>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3318      	adds	r3, #24
 8004d36:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d4a:	23f1      	movs	r3, #241	; 0xf1
 8004d4c:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004d4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d14a      	bne.n	8004dec <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f006 fc56 	bl	800b616 <VL53L1_calc_macro_period_us>
 8004d6a:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f006 fd14 	bl	800b7a2 <VL53L1_calc_timeout_us>
 8004d7a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004d86:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004d88:	8a7b      	ldrh	r3, [r7, #18]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004d94:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004d96:	4413      	add	r3, r2
 8004d98:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d9a:	8a7b      	ldrh	r3, [r7, #18]
 8004d9c:	6979      	ldr	r1, [r7, #20]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f006 fd66 	bl	800b870 <VL53L1_calc_decoded_timeout_us>
 8004da4:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004db0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004db2:	8a7b      	ldrh	r3, [r7, #18]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004dbe:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004dc0:	4413      	add	r3, r2
 8004dc2:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004dc4:	8a7b      	ldrh	r3, [r7, #18]
 8004dc6:	6979      	ldr	r1, [r7, #20]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f006 fd51 	bl	800b870 <VL53L1_calc_decoded_timeout_us>
 8004dce:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	460b      	mov	r3, r1
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004e14:	7afb      	ldrb	r3, [r7, #11]
 8004e16:	2b07      	cmp	r3, #7
 8004e18:	d81c      	bhi.n	8004e54 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004e1a:	7afb      	ldrb	r3, [r7, #11]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004e20:	7afb      	ldrb	r3, [r7, #11]
 8004e22:	2201      	movs	r2, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004e30:	7dbb      	ldrb	r3, [r7, #22]
 8004e32:	4013      	ands	r3, r2
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	fa42 f303 	asr.w	r3, r2, r3
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e001      	b.n	8004e58 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004e54:	23fc      	movs	r3, #252	; 0xfc
 8004e56:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3318      	adds	r3, #24
 8004e7a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	7858      	ldrb	r0, [r3, #1]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	7819      	ldrb	r1, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f007 fdeb 	bl	800ca66 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7898      	ldrb	r0, [r3, #2]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	78d9      	ldrb	r1, [r3, #3]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f007 fe20 	bl	800cae4 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004ed6:	f107 020e 	add.w	r2, r7, #14
 8004eda:	f107 010d 	add.w	r1, r7, #13
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f00a f880 	bl	800efe4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004ee4:	7bba      	ldrb	r2, [r7, #14]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004eea:	7b7a      	ldrb	r2, [r7, #13]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004ef6:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	331c      	adds	r3, #28
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f014 fe96 	bl	8019c6c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	785a      	ldrb	r2, [r3, #1]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	33c2      	adds	r3, #194	; 0xc2
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f00f fbce 	bl	80146fa <VL53L1_init_zone_config_histogram_bins>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004f72:	e00f      	b.n	8004f94 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	2b0f      	cmp	r3, #15
 8004f7a:	d807      	bhi.n	8004f8c <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	3301      	adds	r3, #1
 8004f82:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004f8a:	e003      	b.n	8004f94 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2211      	movs	r2, #17
 8004f90:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004f94:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	3318      	adds	r3, #24
 8004fb2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	33c2      	adds	r3, #194	; 0xc2
 8004fb8:	226c      	movs	r2, #108	; 0x6c
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f014 fe55 	bl	8019c6c <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004fea:	7afb      	ldrb	r3, [r7, #11]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	2b26      	cmp	r3, #38	; 0x26
 8004ff0:	f200 8139 	bhi.w	8005266 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005099 	.word	0x08005099
 8005000:	08005099 	.word	0x08005099
 8005004:	08005099 	.word	0x08005099
 8005008:	08005099 	.word	0x08005099
 800500c:	08005099 	.word	0x08005099
 8005010:	080050c3 	.word	0x080050c3
 8005014:	080050c3 	.word	0x080050c3
 8005018:	080050c3 	.word	0x080050c3
 800501c:	08005267 	.word	0x08005267
 8005020:	08005267 	.word	0x08005267
 8005024:	08005117 	.word	0x08005117
 8005028:	080051bf 	.word	0x080051bf
 800502c:	08005117 	.word	0x08005117
 8005030:	08005267 	.word	0x08005267
 8005034:	08005267 	.word	0x08005267
 8005038:	08005267 	.word	0x08005267
 800503c:	08005099 	.word	0x08005099
 8005040:	080050c3 	.word	0x080050c3
 8005044:	08005117 	.word	0x08005117
 8005048:	08005117 	.word	0x08005117
 800504c:	08005117 	.word	0x08005117
 8005050:	08005117 	.word	0x08005117
 8005054:	08005117 	.word	0x08005117
 8005058:	08005141 	.word	0x08005141
 800505c:	0800516b 	.word	0x0800516b
 8005060:	08005195 	.word	0x08005195
 8005064:	08005117 	.word	0x08005117
 8005068:	08005117 	.word	0x08005117
 800506c:	08005117 	.word	0x08005117
 8005070:	080051e9 	.word	0x080051e9
 8005074:	080051e9 	.word	0x080051e9
 8005078:	080051e9 	.word	0x080051e9
 800507c:	08005213 	.word	0x08005213
 8005080:	08005213 	.word	0x08005213
 8005084:	08005213 	.word	0x08005213
 8005088:	080050ed 	.word	0x080050ed
 800508c:	080050ed 	.word	0x080050ed
 8005090:	080050ed 	.word	0x080050ed
 8005094:	0800523d 	.word	0x0800523d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	601a      	str	r2, [r3, #0]
	break;
 80050c0:	e0d4      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	601a      	str	r2, [r3, #0]
	break;
 80050ea:	e0bf      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	601a      	str	r2, [r3, #0]
	break;
 8005114:	e0aa      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	601a      	str	r2, [r3, #0]

	break;
 800513e:	e095      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	601a      	str	r2, [r3, #0]
	break;
 8005168:	e080      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	601a      	str	r2, [r3, #0]
	break;
 8005192:	e06b      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	601a      	str	r2, [r3, #0]
	break;
 80051bc:	e056      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	601a      	str	r2, [r3, #0]
	break;
 80051e6:	e041      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	601a      	str	r2, [r3, #0]
	break;
 8005210:	e02c      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	601a      	str	r2, [r3, #0]
	break;
 800523a:	e017      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	601a      	str	r2, [r3, #0]
	break;
 8005264:	e002      	b.n	800526c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005266:	23fc      	movs	r3, #252	; 0xfc
 8005268:	75fb      	strb	r3, [r7, #23]
		break;
 800526a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800526c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b098      	sub	sp, #96	; 0x60
 8005280:	af06      	add	r7, sp, #24
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	72fb      	strb	r3, [r7, #11]
 800528a:	4613      	mov	r3, r2
 800528c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800528e:	2300      	movs	r3, #0
 8005290:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3318      	adds	r3, #24
 8005298:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80052a0:	3308      	adds	r3, #8
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 80052a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80052aa:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	f203 3342 	addw	r3, r3, #834	; 0x342
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80052b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80052ba:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80052bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052be:	f203 3362 	addw	r3, r3, #866	; 0x362
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80052c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80052da:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	33c2      	adds	r3, #194	; 0xc2
 80052e0:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80052e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e4:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80052e8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80052ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ec:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80052f0:	3318      	adds	r3, #24
 80052f2:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80052f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f6:	7afa      	ldrb	r2, [r7, #11]
 80052f8:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052fe:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8005300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005304:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800530a:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 800530c:	2103      	movs	r1, #3
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f005 f9c1 	bl	800a696 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8005314:	7afb      	ldrb	r3, [r7, #11]
 8005316:	3b01      	subs	r3, #1
 8005318:	2b26      	cmp	r3, #38	; 0x26
 800531a:	f200 8321 	bhi.w	8005960 <VL53L1_set_preset_mode+0x6e4>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <VL53L1_set_preset_mode+0xa8>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	080053c1 	.word	0x080053c1
 8005328:	080053e5 	.word	0x080053e5
 800532c:	08005409 	.word	0x08005409
 8005330:	0800542d 	.word	0x0800542d
 8005334:	08005451 	.word	0x08005451
 8005338:	08005475 	.word	0x08005475
 800533c:	08005499 	.word	0x08005499
 8005340:	080054bd 	.word	0x080054bd
 8005344:	08005961 	.word	0x08005961
 8005348:	08005961 	.word	0x08005961
 800534c:	080054e1 	.word	0x080054e1
 8005350:	08005649 	.word	0x08005649
 8005354:	080057d9 	.word	0x080057d9
 8005358:	08005801 	.word	0x08005801
 800535c:	08005829 	.word	0x08005829
 8005360:	08005851 	.word	0x08005851
 8005364:	08005879 	.word	0x08005879
 8005368:	0800589d 	.word	0x0800589d
 800536c:	08005621 	.word	0x08005621
 8005370:	08005509 	.word	0x08005509
 8005374:	08005531 	.word	0x08005531
 8005378:	08005559 	.word	0x08005559
 800537c:	08005581 	.word	0x08005581
 8005380:	080055a9 	.word	0x080055a9
 8005384:	080055d1 	.word	0x080055d1
 8005388:	080055f9 	.word	0x080055f9
 800538c:	08005671 	.word	0x08005671
 8005390:	08005699 	.word	0x08005699
 8005394:	080056c1 	.word	0x080056c1
 8005398:	080056e9 	.word	0x080056e9
 800539c:	08005711 	.word	0x08005711
 80053a0:	08005739 	.word	0x08005739
 80053a4:	08005761 	.word	0x08005761
 80053a8:	08005789 	.word	0x08005789
 80053ac:	080057b1 	.word	0x080057b1
 80053b0:	080058c1 	.word	0x080058c1
 80053b4:	080058e9 	.word	0x080058e9
 80053b8:	08005911 	.word	0x08005911
 80053bc:	08005939 	.word	0x08005939

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053d8:	f003 fbc6 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053e2:	e2c1      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053fc:	f003 fd2d 	bl	8008e5a <VL53L1_preset_mode_standard_ranging_short_range>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005406:	e2af      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	9302      	str	r3, [sp, #8]
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005420:	f003 fd60 	bl	8008ee4 <VL53L1_preset_mode_standard_ranging_long_range>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800542a:	e29d      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	9302      	str	r3, [sp, #8]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005442:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005444:	f003 fd93 	bl	8008f6e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005448:	4603      	mov	r3, r0
 800544a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800544e:	e28b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005466:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005468:	f003 fdaa 	bl	8008fc0 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005472:	e279      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800548c:	f003 fdc1 	bl	8009012 <VL53L1_preset_mode_timed_ranging>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005496:	e267      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054b0:	f003 fded 	bl	800908e <VL53L1_preset_mode_timed_ranging_short_range>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054ba:	e255      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	9303      	str	r3, [sp, #12]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054d4:	f003 fe19 	bl	800910a <VL53L1_preset_mode_timed_ranging_long_range>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054de:	e243      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	9302      	str	r3, [sp, #8]
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054fc:	f003 fefb 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005506:	e22f      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9304      	str	r3, [sp, #16]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005520:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005522:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005524:	f003 ff7c 	bl	8009420 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800552e:	e21b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	9302      	str	r3, [sp, #8]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005548:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800554a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800554c:	f003 ffcc 	bl	80094e8 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005556:	e207      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	9303      	str	r3, [sp, #12]
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	9302      	str	r3, [sp, #8]
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005572:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005574:	f003 ffe0 	bl	8009538 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800557e:	e1f3      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800559a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800559c:	f004 f830 	bl	8009600 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055a6:	e1df      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	9304      	str	r3, [sp, #16]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	9303      	str	r3, [sp, #12]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	9302      	str	r3, [sp, #8]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055c4:	f004 fe25 	bl	800a212 <VL53L1_preset_mode_histogram_multizone>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055ce:	e1cb      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	9304      	str	r3, [sp, #16]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	9303      	str	r3, [sp, #12]
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055ec:	f004 fe63 	bl	800a2b6 <VL53L1_preset_mode_histogram_multizone_short_range>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055f6:	e1b7      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	9303      	str	r3, [sp, #12]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	9302      	str	r3, [sp, #8]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005614:	f004 fea1 	bl	800a35a <VL53L1_preset_mode_histogram_multizone_long_range>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800561e:	e1a3      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	9304      	str	r3, [sp, #16]
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	9303      	str	r3, [sp, #12]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	9302      	str	r3, [sp, #8]
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800563a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800563c:	f004 ffde 	bl	800a5fc <VL53L1_preset_mode_histogram_ranging_ref>
 8005640:	4603      	mov	r3, r0
 8005642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005646:	e18f      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	9302      	str	r3, [sp, #8]
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005662:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005664:	f003 fff4 	bl	8009650 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800566e:	e17b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	9303      	str	r3, [sp, #12]
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	9302      	str	r3, [sp, #8]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800568a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800568c:	f004 f86c 	bl	8009768 <VL53L1_preset_mode_histogram_long_range>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005696:	e167      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	9302      	str	r3, [sp, #8]
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056b4:	f004 f8f6 	bl	80098a4 <VL53L1_preset_mode_histogram_long_range_mm1>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056be:	e153      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	9303      	str	r3, [sp, #12]
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056dc:	f004 f943 	bl	8009966 <VL53L1_preset_mode_histogram_long_range_mm2>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056e6:	e13f      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	9304      	str	r3, [sp, #16]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005700:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005702:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005704:	f004 f957 	bl	80099b6 <VL53L1_preset_mode_histogram_medium_range>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800570e:	e12b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	9303      	str	r3, [sp, #12]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	9302      	str	r3, [sp, #8]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800572a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800572c:	f004 f9e1 	bl	8009af2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005736:	e117      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	9303      	str	r3, [sp, #12]
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	9302      	str	r3, [sp, #8]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005754:	f004 fa2e 	bl	8009bb4 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800575e:	e103      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	9302      	str	r3, [sp, #8]
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800577a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800577c:	f004 fa42 	bl	8009c04 <VL53L1_preset_mode_histogram_short_range>
 8005780:	4603      	mov	r3, r0
 8005782:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005786:	e0ef      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	9304      	str	r3, [sp, #16]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	9303      	str	r3, [sp, #12]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	9302      	str	r3, [sp, #8]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057a4:	f004 fb4c 	bl	8009e40 <VL53L1_preset_mode_histogram_short_range_mm1>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057ae:	e0db      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	9303      	str	r3, [sp, #12]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057cc:	f004 fb99 	bl	8009f02 <VL53L1_preset_mode_histogram_short_range_mm2>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057d6:	e0c7      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	9303      	str	r3, [sp, #12]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057f4:	f004 fbad 	bl	8009f52 <VL53L1_preset_mode_histogram_characterisation>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80057fe:	e0b3      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005818:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800581a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800581c:	f004 fbca 	bl	8009fb4 <VL53L1_preset_mode_histogram_xtalk_planar>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005826:	e09f      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005842:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005844:	f004 fc2d 	bl	800a0a2 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800584e:	e08b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	9303      	str	r3, [sp, #12]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	9302      	str	r3, [sp, #8]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800586a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800586c:	f004 fcad 	bl	800a1ca <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005876:	e077      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800588e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005890:	f004 fdb5 	bl	800a3fe <VL53L1_preset_mode_olt>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800589a:	e065      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058b4:	f003 fce5 	bl	8009282 <VL53L1_preset_mode_singleshot_ranging>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80058be:	e053      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	9304      	str	r3, [sp, #16]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80058dc:	f003 fc7d 	bl	80091da <VL53L1_preset_mode_low_power_auto_short_ranging>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80058e6:	e03f      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005902:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005904:	f003 fc3f 	bl	8009186 <VL53L1_preset_mode_low_power_auto_ranging>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800590e:	e02b      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	9303      	str	r3, [sp, #12]
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800592a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800592c:	f003 fc7f 	bl	800922e <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005936:	e017      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	9302      	str	r3, [sp, #8]
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005952:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005954:	f004 f9f4 	bl	8009d40 <VL53L1_preset_mode_special_histogram_short_range>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800595e:	e003      	b.n	8005968 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005960:	23fc      	movs	r3, #252	; 0xfc
 8005962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005966:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005968:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	893a      	ldrh	r2, [r7, #8]
 8005974:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005978:	893a      	ldrh	r2, [r7, #8]
 800597a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 800597c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff f98f 	bl	8004cae <VL53L1_set_timeouts_us>
 8005990:	4603      	mov	r3, r0
 8005992:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005996:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800599e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff f92b 	bl	8004bfc <VL53L1_set_inter_measurement_period_ms>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80059ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ae:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80059b2:	3301      	adds	r3, #1
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f005 fa82 	bl	800aec8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80059c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3748      	adds	r7, #72	; 0x48
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3318      	adds	r3, #24
 80059e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3318      	adds	r3, #24
 8005a12:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 8005a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3318      	adds	r3, #24
 8005a6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005a78:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0d2      	sub	sp, #328	; 0x148
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a96:	6018      	str	r0, [r3, #0]
 8005a98:	4608      	mov	r0, r1
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aa0:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005aac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ab0:	460a      	mov	r2, r1
 8005ab2:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005aba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005abe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 8005aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ace:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005ad8:	3308      	adds	r3, #8
 8005ada:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ae2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005ae6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005aea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aee:	3348      	adds	r3, #72	; 0x48
 8005af0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005af4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005af8:	f203 3342 	addw	r3, r3, #834	; 0x342
 8005afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005b00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b04:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005b08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b10:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005b18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b1c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005b20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005b24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b28:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005b2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b34:	332c      	adds	r3, #44	; 0x2c
 8005b36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b3e:	3348      	adds	r3, #72	; 0x48
 8005b40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005b44:	f107 030c 	add.w	r3, r7, #12
 8005b48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005b64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b68:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005b6c:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005b70:	7812      	ldrb	r2, [r2, #0]
 8005b72:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005b74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b78:	791b      	ldrb	r3, [r3, #4]
 8005b7a:	b25b      	sxtb	r3, r3
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005b82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b86:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005b94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b98:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005b9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b9e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005ba2:	3336      	adds	r3, #54	; 0x36
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005baa:	4413      	add	r3, r2
 8005bac:	1d9a      	adds	r2, r3, #6
 8005bae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bb2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	f7ff f955 	bl	8004e68 <VL53L1_set_user_zone>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005bc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bc8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005bd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bd4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005bd8:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005be6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005bea:	4413      	add	r3, r2
 8005bec:	1c9a      	adds	r2, r3, #2
 8005bee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f001 fbd7 	bl	80073ac <VL53L1_set_zone_dss_config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005c04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c08:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005c14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c18:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d107      	bne.n	8005c30 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005c20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c24:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005c28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c2c:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005c30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c38:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d106      	bne.n	8005c4e <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005c40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005c4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c56:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d139      	bne.n	8005cd2 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005c5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c66:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d131      	bne.n	8005cd2 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c72:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005c76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005c82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005c8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c90:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005c94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005c9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ca0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005ca4:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005ca6:	b21a      	sxth	r2, r3
 8005ca8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cac:	825a      	strh	r2, [r3, #18]
 8005cae:	e003      	b.n	8005cb8 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005cb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005cb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cbc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d805      	bhi.n	8005cd2 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005cc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cca:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cce:	2205      	movs	r2, #5
 8005cd0:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cda:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d117      	bne.n	8005d12 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005ce2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d10f      	bne.n	8005d12 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005cf2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005cfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d02:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d0a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d0e:	2206      	movs	r2, #6
 8005d10:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005d12:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005d1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	f007 f98c 	bl	800d040 <VL53L1_save_cfg_data>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005d2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d32:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d826      	bhi.n	8005d8c <VL53L1_init_and_start_range+0x304>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <VL53L1_init_and_start_range+0x2bc>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d85 	.word	0x08005d85
 8005d48:	08005d7d 	.word	0x08005d7d
 8005d4c:	08005d75 	.word	0x08005d75
 8005d50:	08005d6d 	.word	0x08005d6d
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d5d 	.word	0x08005d5d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d62:	e017      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005d64:	230d      	movs	r3, #13
 8005d66:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d6a:	e013      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005d6c:	2324      	movs	r3, #36	; 0x24
 8005d6e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d72:	e00f      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005d74:	2344      	movs	r3, #68	; 0x44
 8005d76:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d7a:	e00b      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005d7c:	235a      	movs	r3, #90	; 0x5a
 8005d7e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d82:	e007      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005d84:	2371      	movs	r3, #113	; 0x71
 8005d86:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d8a:	e003      	b.n	8005d94 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005d8c:	2383      	movs	r3, #131	; 0x83
 8005d8e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005d92:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005d94:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d98:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005d9c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005da0:	f107 030c 	add.w	r3, r7, #12
 8005da4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005dae:	e00b      	b.n	8005dc8 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005db0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005dbe:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005dc8:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005dcc:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d3ed      	bcc.n	8005db0 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dd8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d917      	bls.n	8005e12 <VL53L1_init_and_start_range+0x38a>
 8005de2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d113      	bne.n	8005e12 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005dea:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005dee:	f1c3 0301 	rsb	r3, r3, #1
 8005df2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005df6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005dfa:	f107 020c 	add.w	r2, r7, #12
 8005dfe:	4413      	add	r3, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	210b      	movs	r1, #11
 8005e04:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005e08:	f00c fb0d 	bl	8012426 <VL53L1_i2c_encode_static_nvm_managed>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005e12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e16:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d917      	bls.n	8005e50 <VL53L1_init_and_start_range+0x3c8>
 8005e20:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d113      	bne.n	8005e50 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005e28:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e2c:	f1c3 030d 	rsb	r3, r3, #13
 8005e30:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e34:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005e38:	f107 020c 	add.w	r2, r7, #12
 8005e3c:	4413      	add	r3, r2
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2117      	movs	r1, #23
 8005e42:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005e46:	f00c fbca 	bl	80125de <VL53L1_i2c_encode_customer_nvm_managed>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e54:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d917      	bls.n	8005e8e <VL53L1_init_and_start_range+0x406>
 8005e5e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005e66:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e6a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005e6e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e72:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005e76:	f107 020c 	add.w	r2, r7, #12
 8005e7a:	4413      	add	r3, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2120      	movs	r1, #32
 8005e80:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005e84:	f00c fce9 	bl	801285a <VL53L1_i2c_encode_static_config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005e8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e92:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d917      	bls.n	8005ecc <VL53L1_init_and_start_range+0x444>
 8005e9c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d113      	bne.n	8005ecc <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ea4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ea8:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005eac:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005eb0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005eb4:	f107 020c 	add.w	r2, r7, #12
 8005eb8:	4413      	add	r3, r2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2116      	movs	r1, #22
 8005ebe:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005ec2:	f00c fdad 	bl	8012a20 <VL53L1_i2c_encode_general_config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005ecc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ed0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d917      	bls.n	8005f0a <VL53L1_init_and_start_range+0x482>
 8005eda:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d113      	bne.n	8005f0a <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005ee2:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ee6:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005eea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005eee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005ef2:	f107 020c 	add.w	r2, r7, #12
 8005ef6:	4413      	add	r3, r2
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2117      	movs	r1, #23
 8005efc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005f00:	f00c fe12 	bl	8012b28 <VL53L1_i2c_encode_timing_config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005f0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005f0e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d036      	beq.n	8005f86 <VL53L1_init_and_start_range+0x4fe>
 8005f18:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d132      	bne.n	8005f86 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005f20:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f24:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005f28:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d017      	beq.n	8005f6a <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f4a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f50:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f5c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f62:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005f64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f68:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f6a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005f6e:	f107 020c 	add.w	r2, r7, #12
 8005f72:	4413      	add	r3, r2
 8005f74:	461a      	mov	r2, r3
 8005f76:	2112      	movs	r1, #18
 8005f78:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005f7c:	f00c fe56 	bl	8012c2c <VL53L1_i2c_encode_dynamic_config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005f86:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d113      	bne.n	8005fb6 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005f8e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005f92:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005f96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005f9a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005f9e:	f107 020c 	add.w	r2, r7, #12
 8005fa2:	4413      	add	r3, r2
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	2105      	movs	r1, #5
 8005fa8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005fac:	f00c fec3 	bl	8012d36 <VL53L1_i2c_encode_system_control>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005fb6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10f      	bne.n	8005fde <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8005fbe:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005fc2:	f107 020c 	add.w	r2, r7, #12
 8005fc6:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005fca:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005fce:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8005fd2:	6800      	ldr	r0, [r0, #0]
 8005fd4:	f00e fbd6 	bl	8014784 <VL53L1_WriteMulti>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8005fde:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005fe6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005fea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	f004 fb82 	bl	800a6f8 <VL53L1_update_ll_driver_rd_state>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005ffa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8006002:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	f004 fd15 	bl	800aa3a <VL53L1_update_ll_driver_cfg_state>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8006016:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800601a:	4618      	mov	r0, r3
 800601c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3318      	adds	r3, #24
 8006034:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800603c:	3308      	adds	r3, #8
 800603e:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006046:	b25b      	sxtb	r3, r3
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800604e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006052:	b25b      	sxtb	r3, r3
 8006054:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f00c fea1 	bl	8012dac <VL53L1_set_system_control>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8006080:	2103      	movs	r1, #3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f004 fb07 	bl	800a696 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800608e:	3301      	adds	r3, #1
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f004 ff14 	bl	800aec8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f004 ff46 	bl	800af32 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d102      	bne.n	80060ba <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f008 f9b4 	bl	800e422 <VL53L1_low_power_auto_data_stop_range>

	return status;
 80060ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b0c8      	sub	sp, #288	; 0x120
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80060d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060d4:	6018      	str	r0, [r3, #0]
 80060d6:	460a      	mov	r2, r1
 80060d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80060dc:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80060e0:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80060e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80060ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3318      	adds	r3, #24
 80060f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80060f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060fc:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8006100:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8006104:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006108:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800610c:	331c      	adds	r3, #28
 800610e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8006112:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006116:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800611a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800611e:	2388      	movs	r3, #136	; 0x88
 8006120:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8006130:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006134:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d008      	beq.n	8006150 <VL53L1_get_measurement_results+0x8a>
 800613e:	2b02      	cmp	r3, #2
 8006140:	d10d      	bne.n	800615e <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8006142:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006146:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800614a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800614e:	e00a      	b.n	8006166 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8006150:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006154:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8006158:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800615c:	e003      	b.n	8006166 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800615e:	232c      	movs	r3, #44	; 0x2c
 8006160:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006164:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8006166:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 800616e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8006172:	f107 0208 	add.w	r2, r7, #8
 8006176:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800617a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800617e:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	f00e fb34 	bl	80147f0 <VL53L1_ReadMulti>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800618e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006192:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d917      	bls.n	80061cc <VL53L1_get_measurement_results+0x106>
 800619c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d113      	bne.n	80061cc <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80061a4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80061a8:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80061ac:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80061b0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80061b4:	f107 0208 	add.w	r2, r7, #8
 80061b8:	4413      	add	r3, r2
 80061ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80061be:	4619      	mov	r1, r3
 80061c0:	2038      	movs	r0, #56	; 0x38
 80061c2:	f00c ff71 	bl	80130a8 <VL53L1_i2c_decode_debug_results>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80061cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80061d0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <VL53L1_get_measurement_results+0x144>
 80061da:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d113      	bne.n	800620a <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80061e2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80061e6:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80061ea:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80061ee:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80061f2:	f107 0208 	add.w	r2, r7, #8
 80061f6:	4413      	add	r3, r2
 80061f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80061fc:	4619      	mov	r1, r3
 80061fe:	2021      	movs	r0, #33	; 0x21
 8006200:	f00c fef1 	bl	8012fe6 <VL53L1_i2c_decode_core_results>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800620a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800620e:	2b00      	cmp	r3, #0
 8006210:	d110      	bne.n	8006234 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8006218:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800621c:	f107 0208 	add.w	r2, r7, #8
 8006220:	4413      	add	r3, r2
 8006222:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006226:	4619      	mov	r1, r3
 8006228:	202c      	movs	r0, #44	; 0x2c
 800622a:	f00c fde6 	bl	8012dfa <VL53L1_i2c_decode_system_results>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006234:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8006238:	4618      	mov	r0, r3
 800623a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8006242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	b0a0      	sub	sp, #128	; 0x80
 8006248:	af06      	add	r7, sp, #24
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	460b      	mov	r3, r1
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006252:	2300      	movs	r3, #0
 8006254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3318      	adds	r3, #24
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006264:	3308      	adds	r3, #8
 8006266:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8006268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626a:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 800626c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8006272:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006276:	332c      	adds	r3, #44	; 0x2c
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 800627a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800627c:	33c2      	adds	r3, #194	; 0xc2
 800627e:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8006280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006282:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8006286:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800628e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006290:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006294:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8006296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006298:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800629c:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800629e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80062a4:	3318      	adds	r3, #24
 80062a6:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80062a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80062b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b2:	3348      	adds	r3, #72	; 0x48
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 80062b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062b8:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 80062be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c0:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80062c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d108      	bne.n	80062e2 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80062d6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <VL53L1_get_device_results+0xa0>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <VL53L1_get_device_results+0xa2>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 80062e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ea:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 82a9 	beq.w	800684a <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 80062f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fbd7 	bl	8006ab4 <VL53L1_get_histogram_bin_data>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 800630c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006310:	2b00      	cmp	r3, #0
 8006312:	d118      	bne.n	8006346 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8006318:	2b00      	cmp	r3, #0
 800631a:	d114      	bne.n	8006346 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 800631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8006326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632e:	4413      	add	r3, r2
 8006330:	1d1a      	adds	r2, r3, #4
 8006332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006334:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f005 fb6c 	bl	800ba18 <VL53L1_hist_copy_and_scale_ambient_info>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8006346:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800634a:	2b00      	cmp	r3, #0
 800634c:	f040 8220 	bne.w	8006790 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8006350:	f107 0313 	add.w	r3, r7, #19
 8006354:	4619      	mov	r1, r3
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f008 f91a 	bl	800e590 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8006362:	2301      	movs	r3, #1
 8006364:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	3b01      	subs	r3, #1
 800636a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 800636e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8006376:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	3202      	adds	r2, #2
 800637e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006384:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8006386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006388:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 800638c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638e:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8006390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f005 fa41 	bl	800b824 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 80063a2:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80063a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80063a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80063ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b0:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80063b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80063b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ba:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80063c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c2:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80063c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c8:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80063ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063cc:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80063d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d2:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 80063d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063d6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 80063da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063dc:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80063e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e2:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80063e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e8:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80063ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ee:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80063f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fa:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80063fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063fe:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8006402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006404:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 800640a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800640c:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006410:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8006412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006414:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8006416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006418:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 800641c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f004 fc2f 	bl	800ac88 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 800642a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800642c:	795b      	ldrb	r3, [r3, #5]
 800642e:	2b03      	cmp	r3, #3
 8006430:	d048      	beq.n	80064c4 <VL53L1_get_device_results+0x282>
 8006432:	2b03      	cmp	r3, #3
 8006434:	dc56      	bgt.n	80064e4 <VL53L1_get_device_results+0x2a2>
 8006436:	2b01      	cmp	r3, #1
 8006438:	d002      	beq.n	8006440 <VL53L1_get_device_results+0x1fe>
 800643a:	2b02      	cmp	r3, #2
 800643c:	d02e      	beq.n	800649c <VL53L1_get_device_results+0x25a>
 800643e:	e051      	b.n	80064e4 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8006440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006442:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8006446:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8006456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006458:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 800645c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800645e:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800646a:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 800646e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006470:	319c      	adds	r1, #156	; 0x9c
 8006472:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006474:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8006478:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 800647c:	b2a4      	uxth	r4, r4
 800647e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8006480:	351c      	adds	r5, #28
 8006482:	9505      	str	r5, [sp, #20]
 8006484:	9404      	str	r4, [sp, #16]
 8006486:	9003      	str	r0, [sp, #12]
 8006488:	9102      	str	r1, [sp, #8]
 800648a:	9201      	str	r2, [sp, #4]
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	4643      	mov	r3, r8
 8006490:	4672      	mov	r2, lr
 8006492:	4661      	mov	r1, ip
 8006494:	4630      	mov	r0, r6
 8006496:	f006 fa36 	bl	800c906 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 800649a:	e027      	b.n	80064ec <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 800649c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800649e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 80064a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80064aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80064ba:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 80064bc:	b21a      	sxth	r2, r3
 80064be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c0:	839a      	strh	r2, [r3, #28]
		break;
 80064c2:	e013      	b.n	80064ec <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	331c      	adds	r3, #28
 80064c8:	4619      	mov	r1, r3
 80064ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80064cc:	f7fd fcf7 	bl	8003ebe <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80064d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	b29b      	uxth	r3, r3
 80064dc:	b21a      	sxth	r2, r3
 80064de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e0:	839a      	strh	r2, [r3, #28]
		break;
 80064e2:	e003      	b.n	80064ec <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 80064e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e6:	2200      	movs	r2, #0
 80064e8:	839a      	strh	r2, [r3, #28]
		break;
 80064ea:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 80064ec:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 814f 	bne.w	8006794 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f8:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8006502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006504:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8006508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800650a:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 800650e:	b29c      	uxth	r4, r3
 8006510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006512:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4623      	mov	r3, r4
 800651a:	f006 fb99 	bl	800cc50 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 800651e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006520:	7999      	ldrb	r1, [r3, #6]
 8006522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006524:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 ff7b 	bl	8007426 <VL53L1_get_dmax_calibration_data>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8006536:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 812c 	bne.w	8006798 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8006540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006542:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8006546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006548:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800654c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800654e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006554:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8006558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800655a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800655e:	3308      	adds	r3, #8
				pdev->wArea2,
 8006560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006562:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8006566:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8006568:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800656a:	9405      	str	r4, [sp, #20]
 800656c:	f107 0413 	add.w	r4, r7, #19
 8006570:	9404      	str	r4, [sp, #16]
 8006572:	9203      	str	r2, [sp, #12]
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	9001      	str	r0, [sp, #4]
 8006578:	9100      	str	r1, [sp, #0]
 800657a:	4633      	mov	r3, r6
 800657c:	462a      	mov	r2, r5
 800657e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f00e fb45 	bl	8014c10 <VL53L1_ipp_hist_process_data>
 8006586:	4603      	mov	r3, r0
 8006588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 800658c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006590:	2b00      	cmp	r3, #0
 8006592:	d050      	beq.n	8006636 <VL53L1_get_device_results+0x3f4>
 8006594:	7cfb      	ldrb	r3, [r7, #19]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d94d      	bls.n	8006636 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800659a:	2300      	movs	r3, #0
 800659c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80065a0:	e045      	b.n	800662e <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 80065a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065a6:	224c      	movs	r2, #76	; 0x4c
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	3310      	adds	r3, #16
 80065ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b0:	4413      	add	r3, r2
 80065b2:	3304      	adds	r3, #4
 80065b4:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	7cfa      	ldrb	r2, [r7, #19]
 80065bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	7cfa      	ldrb	r2, [r7, #19]
 80065ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	7cfa      	ldrb	r2, [r7, #19]
 80065d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80065e4:	461a      	mov	r2, r3
 80065e6:	7cfb      	ldrb	r3, [r7, #19]
 80065e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065f6:	461a      	mov	r2, r3
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006608:	461a      	mov	r2, r3
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006610:	b29a      	uxth	r2, r3
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	7cfa      	ldrb	r2, [r7, #19]
 800661c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006624:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006628:	3301      	adds	r3, #1
 800662a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800662e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006632:	2b03      	cmp	r3, #3
 8006634:	d9b5      	bls.n	80065a2 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8006636:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 80ae 	bne.w	800679c <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8006640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006642:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006648:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800664c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664e:	330e      	adds	r3, #14
 8006650:	461a      	mov	r2, r3
 8006652:	f006 f922 	bl	800c89a <VL53L1_hist_wrap_dmax>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 800665c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 809d 	bne.w	80067a0 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006668:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800666c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006678:	4413      	add	r3, r2
 800667a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800667c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006680:	4613      	mov	r3, r2
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800668c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800668e:	4413      	add	r3, r2
 8006690:	f103 0208 	add.w	r2, r3, #8
 8006694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f005 fc1d 	bl	800bed6 <VL53L1_hist_phase_consistency_check>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 80066a2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d17c      	bne.n	80067a4 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80066aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80066b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066bc:	4413      	add	r3, r2
 80066be:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80066c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80066c4:	4613      	mov	r3, r2
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80066d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066d2:	4413      	add	r3, r2
 80066d4:	f103 0208 	add.w	r2, r3, #8
 80066d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f006 f883 	bl	800c7ea <VL53L1_hist_xmonitor_consistency_check>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 80066ea:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d15a      	bne.n	80067a8 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80066f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	2210      	movs	r2, #16
 8006700:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8006702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006704:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006708:	3301      	adds	r3, #1
 800670a:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006716:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8006718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800671e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006722:	429a      	cmp	r2, r3
 8006724:	d222      	bcs.n	800676c <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8006726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672e:	4413      	add	r3, r2
 8006730:	3304      	adds	r3, #4
 8006732:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8006740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006742:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800674a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800674e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006750:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006756:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800675e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006760:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006764:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 800676c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11b      	bne.n	80067ac <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006776:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800677a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800677c:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 8006780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006782:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006786:	331c      	adds	r3, #28
 8006788:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800678a:	f006 fbbe 	bl	800cf0a <VL53L1_hist_copy_results_to_sys_and_core>
 800678e:	e00e      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006790:	bf00      	nop
 8006792:	e00c      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006794:	bf00      	nop
 8006796:	e00a      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006798:	bf00      	nop
 800679a:	e008      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800679c:	bf00      	nop
 800679e:	e006      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80067a0:	bf00      	nop
 80067a2:	e004      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80067ac:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d036      	beq.n	8006824 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 80067b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b8:	79db      	ldrb	r3, [r3, #7]
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d00a      	beq.n	80067d4 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 80067be:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 80067c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f006 fc73 	bl	800d0b4 <VL53L1_dynamic_zone_update>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80067da:	e015      	b.n	8006808 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80067dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80067e2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <VL53L1_get_device_results+0x5ac>
 80067ea:	2103      	movs	r1, #3
 80067ec:	e000      	b.n	80067f0 <VL53L1_get_device_results+0x5ae>
 80067ee:	2101      	movs	r1, #1
 80067f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80067f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f6:	4413      	add	r3, r2
 80067f8:	460a      	mov	r2, r1
 80067fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80067fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006802:	3301      	adds	r3, #1
 8006804:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006808:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800680c:	2b0f      	cmp	r3, #15
 800680e:	d9e5      	bls.n	80067dc <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8006810:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006814:	2b00      	cmp	r3, #0
 8006816:	d105      	bne.n	8006824 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f006 fcc6 	bl	800d1aa <VL53L1_multizone_hist_bins_update>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8006824:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006828:	2b00      	cmp	r3, #0
 800682a:	d105      	bne.n	8006838 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f007 f9d3 	bl	800dbd8 <VL53L1_dynamic_xtalk_correction_corrector>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8006838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800683c:	2b00      	cmp	r3, #0
 800683e:	d043      	beq.n	80068c8 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e03e      	b.n	80068c8 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800684a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	4619      	mov	r1, r3
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff fc35 	bl	80060c6 <VL53L1_get_measurement_results>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006862:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800686a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800686c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006870:	4618      	mov	r0, r3
 8006872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006874:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800687a:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800687e:	321c      	adds	r2, #28
 8006880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006882:	f000 fc1f 	bl	80070c4 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d11c      	bne.n	80068c8 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800688e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f007 fe24 	bl	800e4ec <VL53L1_low_power_auto_setup_manual_calibration>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	2201      	movs	r2, #1
 80068ae:	709a      	strb	r2, [r3, #2]
 80068b0:	e00a      	b.n	80068c8 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80068b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d102      	bne.n	80068c8 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2202      	movs	r2, #2
 80068c6:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80068c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80068ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068d0:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80068d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80068d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068da:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80068dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80068e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e4:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80068e6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 80b0 	bne.w	8006a50 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80068f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f2:	2210      	movs	r2, #16
 80068f4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80068f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80068fe:	3301      	adds	r3, #1
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006904:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8006908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800690a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800690e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 8006912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006914:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8006918:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800691c:	429a      	cmp	r2, r3
 800691e:	f080 8097 	bcs.w	8006a50 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 8006922:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8006926:	4613      	mov	r3, r2
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006932:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006934:	4413      	add	r3, r2
 8006936:	3308      	adds	r3, #8
 8006938:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800693a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800693c:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800693e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006940:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8006942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006944:	785a      	ldrb	r2, [r3, #1]
 8006946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006948:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800694a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800694c:	789a      	ldrb	r2, [r3, #2]
 800694e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006950:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006954:	78da      	ldrb	r2, [r3, #3]
 8006956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006958:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800695a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800695c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006966:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800696a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696c:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800696e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006970:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800697a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697c:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006988:	7c5a      	ldrb	r2, [r3, #17]
 800698a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800698c:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800698e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006990:	7c9a      	ldrb	r2, [r3, #18]
 8006992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006994:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006996:	2300      	movs	r3, #0
 8006998:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800699c:	e052      	b.n	8006a44 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800699e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80069a2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80069a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069a8:	204c      	movs	r0, #76	; 0x4c
 80069aa:	fb00 f303 	mul.w	r3, r0, r3
 80069ae:	440b      	add	r3, r1
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80069b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4403      	add	r3, r0
 80069c0:	3308      	adds	r3, #8
 80069c2:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80069c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80069c8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80069cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069ce:	204c      	movs	r0, #76	; 0x4c
 80069d0:	fb00 f303 	mul.w	r3, r0, r3
 80069d4:	440b      	add	r3, r1
 80069d6:	333c      	adds	r3, #60	; 0x3c
 80069d8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80069da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80069dc:	4613      	mov	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4403      	add	r3, r0
 80069e6:	330c      	adds	r3, #12
 80069e8:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80069ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80069ee:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80069f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069f4:	204c      	movs	r0, #76	; 0x4c
 80069f6:	fb00 f303 	mul.w	r3, r0, r3
 80069fa:	440b      	add	r3, r1
 80069fc:	3354      	adds	r3, #84	; 0x54
 80069fe:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a02:	4613      	mov	r3, r2
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3310      	adds	r3, #16
 8006a0e:	4602      	mov	r2, r0
 8006a10:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8006a12:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8006a16:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 8006a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a1c:	204c      	movs	r0, #76	; 0x4c
 8006a1e:	fb00 f303 	mul.w	r3, r0, r3
 8006a22:	440b      	add	r3, r1
 8006a24:	335e      	adds	r3, #94	; 0x5e
 8006a26:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006a28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	3312      	adds	r3, #18
 8006a36:	4602      	mov	r2, r0
 8006a38:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8006a3a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a46:	7c9b      	ldrb	r3, [r3, #18]
 8006a48:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3a6      	bcc.n	800699e <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006a50:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f013 f908 	bl	8019c6c <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006a5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f003 ff35 	bl	800a8d4 <VL53L1_check_ll_driver_rd_state>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006a70:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3768      	adds	r7, #104	; 0x68
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a7e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 8006a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7fe fff3 	bl	8005a88 <VL53L1_init_and_start_range>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b0d2      	sub	sp, #328	; 0x148
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006abe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ac2:	6018      	str	r0, [r3, #0]
 8006ac4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ac8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006acc:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 8006ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ad8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3318      	adds	r3, #24
 8006ae0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006ae4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ae8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006af2:	3308      	adds	r3, #8
 8006af4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006af8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006afc:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006b04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b08:	f203 3342 	addw	r3, r3, #834	; 0x342
 8006b0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006b10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b14:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006b18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8006b1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b20:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006b24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006b28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006b30:	f107 030c 	add.w	r3, r7, #12
 8006b34:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006b62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b66:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006b6e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10d      	bne.n	8006b92 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006b76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b7a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006b7e:	2353      	movs	r3, #83	; 0x53
 8006b80:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006b84:	2188      	movs	r1, #136	; 0x88
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	f00d fe32 	bl	80147f0 <VL53L1_ReadMulti>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006b92:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006ba6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006baa:	785a      	ldrb	r2, [r3, #1]
 8006bac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006bba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bbe:	789a      	ldrb	r2, [r3, #2]
 8006bc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006bce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bd2:	78da      	ldrb	r2, [r3, #3]
 8006bd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006be2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006be6:	3304      	adds	r3, #4
 8006be8:	4619      	mov	r1, r3
 8006bea:	2002      	movs	r0, #2
 8006bec:	f004 fb75 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006bf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006bf8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006c02:	234e      	movs	r3, #78	; 0x4e
 8006c04:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006c08:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006c0c:	f107 020c 	add.w	r2, r7, #12
 8006c10:	4413      	add	r3, r2
 8006c12:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006c16:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c1a:	2002      	movs	r0, #2
 8006c1c:	f004 fb5d 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8006c20:	4603      	mov	r3, r0
 8006c22:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006c24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006c32:	2350      	movs	r3, #80	; 0x50
 8006c34:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006c38:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006c3c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006c40:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006c44:	5cd2      	ldrb	r2, [r2, r3]
 8006c46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c4a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006c54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6a:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006c6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c72:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c84:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006c88:	2351      	movs	r3, #81	; 0x51
 8006c8a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006c8e:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006c92:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006c96:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006c9a:	5cd3      	ldrb	r3, [r2, r3]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006ca2:	2352      	movs	r3, #82	; 0x52
 8006ca4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006ca8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006cac:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006cb0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006cb4:	5cd2      	ldrb	r2, [r2, r3]
 8006cb6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006cba:	4413      	add	r3, r2
 8006cbc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006cc0:	234d      	movs	r3, #77	; 0x4d
 8006cc2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006cc6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006cca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006cce:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006cd2:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006cd6:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006cd8:	2306      	movs	r3, #6
 8006cda:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006cde:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006ce2:	f107 020c 	add.w	r2, r7, #12
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006cec:	2300      	movs	r3, #0
 8006cee:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006cf2:	e01a      	b.n	8006d2a <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006cf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006cf8:	2003      	movs	r0, #3
 8006cfa:	f004 fb8d 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8006cfe:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006d00:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006d04:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3206      	adds	r2, #6
 8006d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006d16:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006d1a:	3303      	adds	r3, #3
 8006d1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006d20:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006d24:	3301      	adds	r3, #1
 8006d26:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006d2a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006d2e:	2b17      	cmp	r3, #23
 8006d30:	d9e0      	bls.n	8006cf4 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006d32:	f107 0208 	add.w	r2, r7, #8
 8006d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006d3e:	f248 018d 	movw	r1, #32909	; 0x808d
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	f000 fbd0 	bl	80074e8 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006d48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d118      	bne.n	8006d8c <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006d5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d5e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006d62:	3318      	adds	r3, #24
 8006d64:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006d68:	2100      	movs	r1, #0
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f012 ff8c 	bl	8019c88 <memset>
		pdev->bin_rec_pos = 0;
 8006d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006d8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d10b      	bne.n	8006db2 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006d9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d9e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006da2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006da6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006daa:	6811      	ldr	r1, [r2, #0]
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	f7fd f97e 	bl	80040ae <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006db2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006db6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006dba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dbe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006dc6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dca:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2218      	movs	r2, #24
 8006de0:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006de2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006de6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2218      	movs	r2, #24
 8006dee:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006df0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006df4:	78da      	ldrb	r2, [r3, #3]
 8006df6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006e04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e08:	799b      	ldrb	r3, [r3, #6]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006e10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006e1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e22:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e30:	7c1b      	ldrb	r3, [r3, #16]
 8006e32:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006e34:	4413      	add	r3, r2
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006e4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e50:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006e5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e5e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006e62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006e6a:	6811      	ldr	r1, [r2, #0]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f004 fed4 	bl	800bc1a <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d117      	bne.n	8006eae <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006e7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006e8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e8e:	795b      	ldrb	r3, [r3, #5]
 8006e90:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006e92:	4413      	add	r3, r2
 8006e94:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006e9c:	799a      	ldrb	r2, [r3, #6]
 8006e9e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ea2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006eac:	e016      	b.n	8006edc <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006eb2:	79db      	ldrb	r3, [r3, #7]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006eba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ebe:	7a1b      	ldrb	r3, [r3, #8]
 8006ec0:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ecc:	7a5a      	ldrb	r2, [r3, #9]
 8006ece:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ed2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006edc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ee0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006eea:	2300      	movs	r3, #0
 8006eec:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006ef0:	e01f      	b.n	8006f32 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006ef2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006ef6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006efa:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	4413      	add	r3, r2
 8006f02:	7b1b      	ldrb	r3, [r3, #12]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	d10d      	bne.n	8006f28 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006f0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	7adb      	ldrb	r3, [r3, #11]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006f1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006f28:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006f32:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006f36:	2b05      	cmp	r3, #5
 8006f38:	d9db      	bls.n	8006ef2 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006f3a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f004 fcdb 	bl	800b8fa <VL53L1_decode_timeout>
 8006f44:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006f46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f4a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006f54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f58:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006f62:	4618      	mov	r0, r3
 8006f64:	f007 fb54 	bl	800e610 <VL53L1_calc_pll_period_us>
 8006f68:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006f80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f98:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8006f9c:	f007 fb4f 	bl	800e63e <VL53L1_duration_maths>
 8006fa0:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006fa2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fa6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006fb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006fc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f007 fc5e 	bl	800e88a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8006fce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	f008 f875 	bl	800f0c6 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fe0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006fe4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006fe8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006ff0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ff4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006ff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ffc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8007004:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007008:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	789b      	ldrb	r3, [r3, #2]
 8007010:	461a      	mov	r2, r3
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800701e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007022:	4413      	add	r3, r2
 8007024:	3302      	adds	r3, #2
 8007026:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 800702a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800702e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8007030:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007034:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 800703e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007042:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8007044:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007048:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007056:	2200      	movs	r2, #0
 8007058:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 800705a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800705e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2b11      	cmp	r3, #17
 800706e:	bf8c      	ite	hi
 8007070:	2201      	movhi	r2, #1
 8007072:	2200      	movls	r2, #0
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	2a00      	cmp	r2, #0
 8007078:	d11b      	bne.n	80070b2 <VL53L1_get_histogram_bin_data+0x5fe>
 800707a:	2201      	movs	r2, #1
 800707c:	409a      	lsls	r2, r3
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <VL53L1_get_histogram_bin_data+0x60c>)
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8007090:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007094:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070a8:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 80070aa:	23fa      	movs	r3, #250	; 0xfa
 80070ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 80070b0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80070b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	0002200e 	.word	0x0002200e

080070c4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b08b      	sub	sp, #44	; 0x2c
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2200      	movs	r2, #0
 80070e4:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	78da      	ldrb	r2, [r3, #3]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2200      	movs	r2, #0
 80070f2:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2204      	movs	r2, #4
 80070f8:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	8a1b      	ldrh	r3, [r3, #16]
 8007104:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	8a9b      	ldrh	r3, [r3, #20]
 800710a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	8a5b      	ldrh	r3, [r3, #18]
 8007110:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007118:	e00b      	b.n	8007132 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 800711a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	2200      	movs	r2, #0
 8007126:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800712c:	3301      	adds	r3, #1
 800712e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007136:	2b04      	cmp	r3, #4
 8007138:	d9ef      	bls.n	800711a <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	3314      	adds	r3, #20
 800713e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8007140:	2300      	movs	r3, #0
 8007142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007146:	e0fe      	b.n	8007346 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800714e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2200      	movs	r2, #0
 8007154:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	78db      	ldrb	r3, [r3, #3]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8007166:	2b09      	cmp	r3, #9
 8007168:	d104      	bne.n	8007174 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	2213      	movs	r2, #19
 800716e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8007172:	e007      	b.n	8007184 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2200      	movs	r2, #0
 8007188:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	2200      	movs	r2, #0
 800718e:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	2200      	movs	r2, #0
 8007194:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2200      	movs	r2, #0
 800719a:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2200      	movs	r2, #0
 80071a0:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2200      	movs	r2, #0
 80071a6:	735a      	strb	r2, [r3, #13]

		switch (i) {
 80071a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d05c      	beq.n	800726e <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 80071b4:	e0a8      	b.n	8007308 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	789b      	ldrb	r3, [r3, #2]
 80071ba:	2b07      	cmp	r3, #7
 80071bc:	d103      	bne.n	80071c6 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	8a7a      	ldrh	r2, [r7, #18]
 80071c2:	82da      	strh	r2, [r3, #22]
 80071c4:	e00b      	b.n	80071de <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	789b      	ldrb	r3, [r3, #2]
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d103      	bne.n	80071d6 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	8aba      	ldrh	r2, [r7, #20]
 80071d2:	82da      	strh	r2, [r3, #22]
 80071d4:	e003      	b.n	80071de <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	8afa      	ldrh	r2, [r7, #22]
 80071e2:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	895b      	ldrh	r3, [r3, #10]
 80071f8:	015b      	lsls	r3, r3, #5
 80071fa:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007202:	d302      	bcc.n	800720a <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8007204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007208:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	b29a      	uxth	r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8007220:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007232:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	da01      	bge.n	800723e <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 800723a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800723e:	12db      	asrs	r3, r3, #11
 8007240:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	b21a      	sxth	r2, r3
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800726c:	e04c      	b.n	8007308 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007284:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	8bdb      	ldrh	r3, [r3, #30]
 8007292:	015b      	lsls	r3, r3, #5
 8007294:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d302      	bcc.n	80072a4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800729e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072a2:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 80072ba:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	fb02 f303 	mul.w	r3, r2, r3
 80072c4:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072cc:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	da01      	bge.n	80072d8 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 80072d4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80072d8:	12db      	asrs	r3, r3, #11
 80072da:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	b21a      	sxth	r2, r3
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007306:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	334c      	adds	r3, #76	; 0x4c
 800733a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 800733c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007340:	3301      	adds	r3, #1
 8007342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800734a:	2b01      	cmp	r3, #1
 800734c:	f67f aefc 	bls.w	8007148 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2200      	movs	r2, #0
 8007354:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2b11      	cmp	r3, #17
 8007360:	bf8c      	ite	hi
 8007362:	2201      	movhi	r2, #1
 8007364:	2200      	movls	r2, #0
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	2a00      	cmp	r2, #0
 800736a:	d116      	bne.n	800739a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	bf14      	ite	ne
 8007378:	2301      	movne	r3, #1
 800737a:	2300      	moveq	r3, #0
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	b2da      	uxtb	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8007398:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800739a:	bf00      	nop
 800739c:	372c      	adds	r7, #44	; 0x2c
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	0002200e 	.word	0x0002200e

080073ac <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3318      	adds	r3, #24
 80073be:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	332c      	adds	r3, #44	; 0x2c
 80073c4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d109      	bne.n	80073e2 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 80073e0:	e003      	b.n	80073ea <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80073ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3318      	adds	r3, #24
 800740e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	78fa      	ldrb	r2, [r7, #3]
 8007414:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8007416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b088      	sub	sp, #32
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	607b      	str	r3, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	72fb      	strb	r3, [r7, #11]
 8007434:	4613      	mov	r3, r2
 8007436:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007438:	2300      	movs	r3, #0
 800743a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3318      	adds	r3, #24
 8007440:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007448:	3308      	adds	r3, #8
 800744a:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d006      	beq.n	8007460 <VL53L1_get_dmax_calibration_data+0x3a>
 8007452:	2b03      	cmp	r3, #3
 8007454:	dc3e      	bgt.n	80074d4 <VL53L1_get_dmax_calibration_data+0xae>
 8007456:	2b01      	cmp	r3, #1
 8007458:	d034      	beq.n	80074c4 <VL53L1_get_dmax_calibration_data+0x9e>
 800745a:	2b02      	cmp	r3, #2
 800745c:	d02a      	beq.n	80074b4 <VL53L1_get_dmax_calibration_data+0x8e>
 800745e:	e039      	b.n	80074d4 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8007460:	7aba      	ldrb	r2, [r7, #10]
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 800747a:	7aba      	ldrb	r2, [r7, #10]
 800747c:	6979      	ldr	r1, [r7, #20]
 800747e:	4613      	mov	r3, r2
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 800749a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b0:	811a      	strh	r2, [r3, #8]
	break;
 80074b2:	e012      	b.n	80074da <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 80074b8:	220a      	movs	r2, #10
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f012 fbd5 	bl	8019c6c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 80074c2:	e00a      	b.n	80074da <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 80074c8:	220a      	movs	r2, #10
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f012 fbcd 	bl	8019c6c <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 80074d2:	e002      	b.n	80074da <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80074d4:	23fc      	movs	r3, #252	; 0xfc
 80074d6:	77fb      	strb	r3, [r7, #31]
	break;
 80074d8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80074da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	460b      	mov	r3, r1
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3318      	adds	r3, #24
 80074fe:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8007506:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800750e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8007510:	897b      	ldrh	r3, [r7, #10]
 8007512:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8007516:	2bbe      	cmp	r3, #190	; 0xbe
 8007518:	f200 86fc 	bhi.w	8008314 <VL53L1_get_tuning_parm+0xe2c>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <VL53L1_get_tuning_parm+0x3c>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007821 	.word	0x08007821
 8007528:	08007831 	.word	0x08007831
 800752c:	08007841 	.word	0x08007841
 8007530:	08007851 	.word	0x08007851
 8007534:	0800785f 	.word	0x0800785f
 8007538:	0800786d 	.word	0x0800786d
 800753c:	0800787b 	.word	0x0800787b
 8007540:	08007889 	.word	0x08007889
 8007544:	08007897 	.word	0x08007897
 8007548:	080078a5 	.word	0x080078a5
 800754c:	080078b3 	.word	0x080078b3
 8007550:	080078bf 	.word	0x080078bf
 8007554:	080078cd 	.word	0x080078cd
 8007558:	080078db 	.word	0x080078db
 800755c:	080078e7 	.word	0x080078e7
 8007560:	080078f5 	.word	0x080078f5
 8007564:	08007903 	.word	0x08007903
 8007568:	08007913 	.word	0x08007913
 800756c:	08007923 	.word	0x08007923
 8007570:	08007931 	.word	0x08007931
 8007574:	08007941 	.word	0x08007941
 8007578:	0800794f 	.word	0x0800794f
 800757c:	0800795f 	.word	0x0800795f
 8007580:	0800796f 	.word	0x0800796f
 8007584:	0800797f 	.word	0x0800797f
 8007588:	0800798f 	.word	0x0800798f
 800758c:	0800799f 	.word	0x0800799f
 8007590:	080079af 	.word	0x080079af
 8007594:	080079bf 	.word	0x080079bf
 8007598:	080079cf 	.word	0x080079cf
 800759c:	080079df 	.word	0x080079df
 80075a0:	080079ed 	.word	0x080079ed
 80075a4:	080079fd 	.word	0x080079fd
 80075a8:	08007a0d 	.word	0x08007a0d
 80075ac:	08007a1d 	.word	0x08007a1d
 80075b0:	08007a2d 	.word	0x08007a2d
 80075b4:	08007a3d 	.word	0x08007a3d
 80075b8:	08007a4d 	.word	0x08007a4d
 80075bc:	08007a5d 	.word	0x08007a5d
 80075c0:	08007a6d 	.word	0x08007a6d
 80075c4:	08007a7d 	.word	0x08007a7d
 80075c8:	08007a8d 	.word	0x08007a8d
 80075cc:	08007a9d 	.word	0x08007a9d
 80075d0:	08007aad 	.word	0x08007aad
 80075d4:	08007abd 	.word	0x08007abd
 80075d8:	08007acd 	.word	0x08007acd
 80075dc:	08007add 	.word	0x08007add
 80075e0:	08007aed 	.word	0x08007aed
 80075e4:	08007afd 	.word	0x08007afd
 80075e8:	08007b0d 	.word	0x08007b0d
 80075ec:	08007b1d 	.word	0x08007b1d
 80075f0:	08007b2b 	.word	0x08007b2b
 80075f4:	08007b39 	.word	0x08007b39
 80075f8:	08007b47 	.word	0x08007b47
 80075fc:	08007b55 	.word	0x08007b55
 8007600:	08007b63 	.word	0x08007b63
 8007604:	08007b71 	.word	0x08007b71
 8007608:	08007b7f 	.word	0x08007b7f
 800760c:	08007b8d 	.word	0x08007b8d
 8007610:	08007b9b 	.word	0x08007b9b
 8007614:	08007ba9 	.word	0x08007ba9
 8007618:	08007bb7 	.word	0x08007bb7
 800761c:	08007bc5 	.word	0x08007bc5
 8007620:	08007bd3 	.word	0x08007bd3
 8007624:	08007be1 	.word	0x08007be1
 8007628:	08007bef 	.word	0x08007bef
 800762c:	08007bfd 	.word	0x08007bfd
 8007630:	08007c0b 	.word	0x08007c0b
 8007634:	08007c19 	.word	0x08007c19
 8007638:	08007c27 	.word	0x08007c27
 800763c:	08007c35 	.word	0x08007c35
 8007640:	08007c43 	.word	0x08007c43
 8007644:	08007c51 	.word	0x08007c51
 8007648:	08007c5f 	.word	0x08007c5f
 800764c:	08007c6b 	.word	0x08007c6b
 8007650:	08007c79 	.word	0x08007c79
 8007654:	08007c87 	.word	0x08007c87
 8007658:	08007c93 	.word	0x08007c93
 800765c:	08007c9f 	.word	0x08007c9f
 8007660:	08007cab 	.word	0x08007cab
 8007664:	08007cb7 	.word	0x08007cb7
 8007668:	08007cc3 	.word	0x08007cc3
 800766c:	08007ccf 	.word	0x08007ccf
 8007670:	08007cdd 	.word	0x08007cdd
 8007674:	08007ceb 	.word	0x08007ceb
 8007678:	08007cf9 	.word	0x08007cf9
 800767c:	08007d07 	.word	0x08007d07
 8007680:	08007d15 	.word	0x08007d15
 8007684:	08007d23 	.word	0x08007d23
 8007688:	08007d31 	.word	0x08007d31
 800768c:	08007d3f 	.word	0x08007d3f
 8007690:	08007d4d 	.word	0x08007d4d
 8007694:	08007d5b 	.word	0x08007d5b
 8007698:	08007d69 	.word	0x08007d69
 800769c:	08007d77 	.word	0x08007d77
 80076a0:	08007d85 	.word	0x08007d85
 80076a4:	08007d93 	.word	0x08007d93
 80076a8:	08007da1 	.word	0x08007da1
 80076ac:	08007daf 	.word	0x08007daf
 80076b0:	08007dbd 	.word	0x08007dbd
 80076b4:	08007dcb 	.word	0x08007dcb
 80076b8:	08007dd9 	.word	0x08007dd9
 80076bc:	08007de7 	.word	0x08007de7
 80076c0:	08007df5 	.word	0x08007df5
 80076c4:	08007e03 	.word	0x08007e03
 80076c8:	08007e11 	.word	0x08007e11
 80076cc:	08007e1f 	.word	0x08007e1f
 80076d0:	08007e2d 	.word	0x08007e2d
 80076d4:	08007e3b 	.word	0x08007e3b
 80076d8:	08007e49 	.word	0x08007e49
 80076dc:	08007e57 	.word	0x08007e57
 80076e0:	08007e65 	.word	0x08007e65
 80076e4:	08007e73 	.word	0x08007e73
 80076e8:	08007e81 	.word	0x08007e81
 80076ec:	08007e8f 	.word	0x08007e8f
 80076f0:	08007e9d 	.word	0x08007e9d
 80076f4:	08007eab 	.word	0x08007eab
 80076f8:	08007eb9 	.word	0x08007eb9
 80076fc:	08007ec7 	.word	0x08007ec7
 8007700:	08007ed9 	.word	0x08007ed9
 8007704:	08007eeb 	.word	0x08007eeb
 8007708:	08007efd 	.word	0x08007efd
 800770c:	08007f0f 	.word	0x08007f0f
 8007710:	08007f21 	.word	0x08007f21
 8007714:	08007f33 	.word	0x08007f33
 8007718:	08007f45 	.word	0x08007f45
 800771c:	08007f57 	.word	0x08007f57
 8007720:	08007f69 	.word	0x08007f69
 8007724:	08007f7b 	.word	0x08007f7b
 8007728:	08007f8d 	.word	0x08007f8d
 800772c:	08007f9f 	.word	0x08007f9f
 8007730:	08007fb1 	.word	0x08007fb1
 8007734:	08007fc3 	.word	0x08007fc3
 8007738:	08007fd5 	.word	0x08007fd5
 800773c:	08007fe7 	.word	0x08007fe7
 8007740:	08007ff9 	.word	0x08007ff9
 8007744:	0800800b 	.word	0x0800800b
 8007748:	0800801d 	.word	0x0800801d
 800774c:	0800802b 	.word	0x0800802b
 8007750:	08008039 	.word	0x08008039
 8007754:	08008047 	.word	0x08008047
 8007758:	08008055 	.word	0x08008055
 800775c:	08008063 	.word	0x08008063
 8007760:	08008071 	.word	0x08008071
 8007764:	0800807f 	.word	0x0800807f
 8007768:	08008091 	.word	0x08008091
 800776c:	0800809f 	.word	0x0800809f
 8007770:	080080ad 	.word	0x080080ad
 8007774:	080080bb 	.word	0x080080bb
 8007778:	080080c9 	.word	0x080080c9
 800777c:	080080d7 	.word	0x080080d7
 8007780:	080080e5 	.word	0x080080e5
 8007784:	080080f3 	.word	0x080080f3
 8007788:	08008101 	.word	0x08008101
 800778c:	0800810f 	.word	0x0800810f
 8007790:	0800811d 	.word	0x0800811d
 8007794:	0800812b 	.word	0x0800812b
 8007798:	08008139 	.word	0x08008139
 800779c:	08008147 	.word	0x08008147
 80077a0:	08008155 	.word	0x08008155
 80077a4:	08008163 	.word	0x08008163
 80077a8:	08008171 	.word	0x08008171
 80077ac:	0800817f 	.word	0x0800817f
 80077b0:	0800818d 	.word	0x0800818d
 80077b4:	0800819b 	.word	0x0800819b
 80077b8:	080081a9 	.word	0x080081a9
 80077bc:	080081b7 	.word	0x080081b7
 80077c0:	080081c5 	.word	0x080081c5
 80077c4:	080081d3 	.word	0x080081d3
 80077c8:	080081e1 	.word	0x080081e1
 80077cc:	080081ef 	.word	0x080081ef
 80077d0:	080081fd 	.word	0x080081fd
 80077d4:	0800820b 	.word	0x0800820b
 80077d8:	08008219 	.word	0x08008219
 80077dc:	08008227 	.word	0x08008227
 80077e0:	08008235 	.word	0x08008235
 80077e4:	08008243 	.word	0x08008243
 80077e8:	08008251 	.word	0x08008251
 80077ec:	0800825f 	.word	0x0800825f
 80077f0:	0800826d 	.word	0x0800826d
 80077f4:	0800827b 	.word	0x0800827b
 80077f8:	08008289 	.word	0x08008289
 80077fc:	08008297 	.word	0x08008297
 8007800:	080082a5 	.word	0x080082a5
 8007804:	080082b3 	.word	0x080082b3
 8007808:	080082c1 	.word	0x080082c1
 800780c:	080082cf 	.word	0x080082cf
 8007810:	080082dd 	.word	0x080082dd
 8007814:	080082eb 	.word	0x080082eb
 8007818:	080082f9 	.word	0x080082f9
 800781c:	08008307 	.word	0x08008307

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007826:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
	break;
 800782c:	f000 bd79 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8007836:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
	break;
 800783c:	f000 bd71 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007846:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
	break;
 800784c:	f000 bd69 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601a      	str	r2, [r3, #0]
	break;
 800785a:	f000 bd62 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	601a      	str	r2, [r3, #0]
	break;
 8007868:	f000 bd5b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	789b      	ldrb	r3, [r3, #2]
 8007870:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
	break;
 8007876:	f000 bd54 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
	break;
 8007884:	f000 bd4d 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
	break;
 8007892:	f000 bd46 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	795b      	ldrb	r3, [r3, #5]
 800789a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]
	break;
 80078a0:	f000 bd3f 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	799b      	ldrb	r3, [r3, #6]
 80078a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
	break;
 80078ae:	f000 bd38 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
	break;
 80078ba:	f000 bd32 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	891b      	ldrh	r3, [r3, #8]
 80078c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
	break;
 80078c8:	f000 bd2b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	8a1b      	ldrh	r3, [r3, #16]
 80078d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
	break;
 80078d6:	f000 bd24 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
	break;
 80078e2:	f000 bd1e 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	7e1b      	ldrb	r3, [r3, #24]
 80078ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	601a      	str	r2, [r3, #0]
	break;
 80078f0:	f000 bd17 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	8b5b      	ldrh	r3, [r3, #26]
 80078f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
	break;
 80078fe:	f000 bd10 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8007908:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	601a      	str	r2, [r3, #0]
	break;
 800790e:	f000 bd08 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007918:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	601a      	str	r2, [r3, #0]
	break;
 800791e:	f000 bd00 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007926:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
	break;
 800792c:	f000 bcf9 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007936:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]
	break;
 800793c:	f000 bcf1 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
	break;
 800794a:	f000 bcea 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007954:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	break;
 800795a:	f000 bce2 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007964:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
	break;
 800796a:	f000 bcda 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007974:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	601a      	str	r2, [r3, #0]
	break;
 800797a:	f000 bcd2 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007984:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
	break;
 800798a:	f000 bcca 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007994:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
	break;
 800799a:	f000 bcc2 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80079a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
	break;
 80079aa:	f000 bcba 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
	break;
 80079ba:	f000 bcb2 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 80079c4:	461a      	mov	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
	break;
 80079ca:	f000 bcaa 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80079d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
	break;
 80079da:	f000 bca2 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	601a      	str	r2, [r3, #0]
	break;
 80079e8:	f000 bc9b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
	break;
 80079f8:	f000 bc93 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]
	break;
 8007a08:	f000 bc8b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8007a12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	601a      	str	r2, [r3, #0]
	break;
 8007a18:	f000 bc83 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007a22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
	break;
 8007a28:	f000 bc7b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007a32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]
	break;
 8007a38:	f000 bc73 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
	break;
 8007a48:	f000 bc6b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007a52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
	break;
 8007a58:	f000 bc63 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007a62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	break;
 8007a68:	f000 bc5b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007a72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
	break;
 8007a78:	f000 bc53 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8007a82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	601a      	str	r2, [r3, #0]
	break;
 8007a88:	f000 bc4b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8007a92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
	break;
 8007a98:	f000 bc43 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]
	break;
 8007aa8:	f000 bc3b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8007ab2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	601a      	str	r2, [r3, #0]
	break;
 8007ab8:	f000 bc33 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
	break;
 8007ac8:	f000 bc2b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8007ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]
	break;
 8007ad8:	f000 bc23 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007ae2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
	break;
 8007ae8:	f000 bc1b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8007af2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
	break;
 8007af8:	f000 bc13 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8007b02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]
	break;
 8007b08:	f000 bc0b 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8007b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
	break;
 8007b18:	f000 bc03 	b.w	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007b22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]
	break;
 8007b28:	e3fb      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007b30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	break;
 8007b36:	e3f4      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8007b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	break;
 8007b44:	e3ed      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
	break;
 8007b52:	e3e6      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8007b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
	break;
 8007b60:	e3df      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007b68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
	break;
 8007b6e:	e3d8      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007b76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
	break;
 8007b7c:	e3d1      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007b84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
	break;
 8007b8a:	e3ca      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007b92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]
	break;
 8007b98:	e3c3      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007ba0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
	break;
 8007ba6:	e3bc      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007bae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]
	break;
 8007bb4:	e3b5      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007bbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	601a      	str	r2, [r3, #0]
	break;
 8007bc2:	e3ae      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8007bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
	break;
 8007bd0:	e3a7      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007bd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
	break;
 8007bde:	e3a0      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007be6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
	break;
 8007bec:	e399      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007bf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
	break;
 8007bfa:	e392      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	601a      	str	r2, [r3, #0]
	break;
 8007c08:	e38b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007c10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	break;
 8007c16:	e384      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007c1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
	break;
 8007c24:	e37d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8007c2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
	break;
 8007c32:	e376      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8007c3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
	break;
 8007c40:	e36f      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007c48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
	break;
 8007c4e:	e368      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007c56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
	break;
 8007c5c:	e361      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	7c1b      	ldrb	r3, [r3, #16]
 8007c62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
	break;
 8007c68:	e35b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	601a      	str	r2, [r3, #0]
	break;
 8007c76:	e354      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
	break;
 8007c84:	e34d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]
	break;
 8007c90:	e347      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
	break;
 8007c9c:	e341      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	8adb      	ldrh	r3, [r3, #22]
 8007ca2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
	break;
 8007ca8:	e33b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	8b1b      	ldrh	r3, [r3, #24]
 8007cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
	break;
 8007cb4:	e335      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
	break;
 8007cc0:	e32f      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	break;
 8007ccc:	e329      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007cd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	601a      	str	r2, [r3, #0]
	break;
 8007cda:	e322      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007ce2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
	break;
 8007ce8:	e31b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	601a      	str	r2, [r3, #0]
	break;
 8007cf6:	e314      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007cfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	601a      	str	r2, [r3, #0]
	break;
 8007d04:	e30d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007d0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	601a      	str	r2, [r3, #0]
	break;
 8007d12:	e306      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007d1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	601a      	str	r2, [r3, #0]
	break;
 8007d20:	e2ff      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007d28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
	break;
 8007d2e:	e2f8      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007d36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
	break;
 8007d3c:	e2f1      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007d44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
	break;
 8007d4a:	e2ea      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007d52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	601a      	str	r2, [r3, #0]
	break;
 8007d58:	e2e3      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007d60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
	break;
 8007d66:	e2dc      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007d6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	break;
 8007d74:	e2d5      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007d7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
	break;
 8007d82:	e2ce      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007d8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
	break;
 8007d90:	e2c7      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007d98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
	break;
 8007d9e:	e2c0      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007da6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	601a      	str	r2, [r3, #0]
	break;
 8007dac:	e2b9      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007db4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	601a      	str	r2, [r3, #0]
	break;
 8007dba:	e2b2      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007dc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]
	break;
 8007dc8:	e2ab      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007dd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
	break;
 8007dd6:	e2a4      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007dde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
	break;
 8007de4:	e29d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007dec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
	break;
 8007df2:	e296      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007dfa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	break;
 8007e00:	e28f      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007e08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]
	break;
 8007e0e:	e288      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007e16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	601a      	str	r2, [r3, #0]
	break;
 8007e1c:	e281      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007e24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	601a      	str	r2, [r3, #0]
	break;
 8007e2a:	e27a      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007e32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]
	break;
 8007e38:	e273      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007e40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	601a      	str	r2, [r3, #0]
	break;
 8007e46:	e26c      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007e4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
	break;
 8007e54:	e265      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007e5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
	break;
 8007e62:	e25e      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007e6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
	break;
 8007e70:	e257      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007e78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
	break;
 8007e7e:	e250      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007e86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	601a      	str	r2, [r3, #0]
	break;
 8007e8c:	e249      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007e94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
	break;
 8007e9a:	e242      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007ea2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	601a      	str	r2, [r3, #0]
	break;
 8007ea8:	e23b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007eb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]
	break;
 8007eb6:	e234      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007ebe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
	break;
 8007ec4:	e22d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ecc:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	break;
 8007ed6:	e224      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ede:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]
	break;
 8007ee8:	e21b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef0:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
	break;
 8007efa:	e212      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007f06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
	break;
 8007f0c:	e209      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f14:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
	break;
 8007f1e:	e200      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f26:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007f2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
	break;
 8007f30:	e1f7      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f38:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007f3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
	break;
 8007f42:	e1ee      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f4a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
	break;
 8007f54:	e1e5      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
	break;
 8007f66:	e1dc      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6e:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
	break;
 8007f78:	e1d3      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f80:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007f84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
	break;
 8007f8a:	e1ca      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f92:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]
	break;
 8007f9c:	e1c1      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa4:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007fa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
	break;
 8007fae:	e1b8      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	601a      	str	r2, [r3, #0]
	break;
 8007fc0:	e1af      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
	break;
 8007fd2:	e1a6      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007fde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	601a      	str	r2, [r3, #0]
	break;
 8007fe4:	e19d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	break;
 8007ff6:	e194      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8008002:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	601a      	str	r2, [r3, #0]
	break;
 8008008:	e18b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008010:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8008014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	601a      	str	r2, [r3, #0]
	break;
 800801a:	e182      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
	break;
 8008028:	e17b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8008030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
	break;
 8008036:	e174      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800803e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	601a      	str	r2, [r3, #0]
	break;
 8008044:	e16d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800804c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	601a      	str	r2, [r3, #0]
	break;
 8008052:	e166      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800805a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	601a      	str	r2, [r3, #0]
	break;
 8008060:	e15f      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8008068:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	601a      	str	r2, [r3, #0]
	break;
 800806e:	e158      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8008076:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	601a      	str	r2, [r3, #0]
	break;
 800807c:	e151      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008084:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8008088:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
	break;
 800808e:	e148      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8008096:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	601a      	str	r2, [r3, #0]
	break;
 800809c:	e141      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 80080a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
	break;
 80080aa:	e13a      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 80080b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
	break;
 80080b8:	e133      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 80080c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	break;
 80080c6:	e12c      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 80080ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
	break;
 80080d4:	e125      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 80080dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
	break;
 80080e2:	e11e      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80080ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	601a      	str	r2, [r3, #0]
	break;
 80080f0:	e117      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80080f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
	break;
 80080fe:	e110      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8008106:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
	break;
 800810c:	e109      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8008114:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
	break;
 800811a:	e102      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8008122:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	601a      	str	r2, [r3, #0]
	break;
 8008128:	e0fb      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8008130:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	601a      	str	r2, [r3, #0]
	break;
 8008136:	e0f4      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800813e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
	break;
 8008144:	e0ed      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 800814c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
	break;
 8008152:	e0e6      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 800815a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	601a      	str	r2, [r3, #0]
	break;
 8008160:	e0df      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8008168:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	601a      	str	r2, [r3, #0]
	break;
 800816e:	e0d8      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8008176:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
	break;
 800817c:	e0d1      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8008184:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
	break;
 800818a:	e0ca      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8008192:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]
	break;
 8008198:	e0c3      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 80081a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
	break;
 80081a6:	e0bc      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 80081ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]
	break;
 80081b4:	e0b5      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 80081bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	601a      	str	r2, [r3, #0]
	break;
 80081c2:	e0ae      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 80081ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
	break;
 80081d0:	e0a7      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 80081d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
	break;
 80081de:	e0a0      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 80081e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	601a      	str	r2, [r3, #0]
	break;
 80081ec:	e099      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 80081f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
	break;
 80081fa:	e092      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8008202:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]
	break;
 8008208:	e08b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8008210:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	break;
 8008216:	e084      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 800821e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
	break;
 8008224:	e07d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 800822c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
	break;
 8008232:	e076      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 800823a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	601a      	str	r2, [r3, #0]
	break;
 8008240:	e06f      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8008248:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
	break;
 800824e:	e068      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8008256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	601a      	str	r2, [r3, #0]
	break;
 800825c:	e061      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008264:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
	break;
 800826a:	e05a      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8008272:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	break;
 8008278:	e053      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8008280:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	601a      	str	r2, [r3, #0]
	break;
 8008286:	e04c      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800828e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
	break;
 8008294:	e045      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 800829c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	601a      	str	r2, [r3, #0]
	break;
 80082a2:	e03e      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 80082aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
	break;
 80082b0:	e037      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 80082b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	601a      	str	r2, [r3, #0]
	break;
 80082be:	e030      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 80082c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	601a      	str	r2, [r3, #0]
	break;
 80082cc:	e029      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 80082d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
	break;
 80082da:	e022      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 80082e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	601a      	str	r2, [r3, #0]
	break;
 80082e8:	e01b      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 80082f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	601a      	str	r2, [r3, #0]
	break;
 80082f6:	e014      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80082fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	601a      	str	r2, [r3, #0]
	break;
 8008304:	e00d      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800830c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
	break;
 8008312:	e006      	b.n	8008322 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800831a:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800831c:	23fc      	movs	r3, #252	; 0xfc
 800831e:	77fb      	strb	r3, [r7, #31]
	break;
 8008320:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8008322:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3724      	adds	r7, #36	; 0x24
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3318      	adds	r3, #24
 8008344:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	2201      	movs	r2, #1
 800834e:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr

08008362 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8008362:	b480      	push	{r7}
 8008364:	b085      	sub	sp, #20
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3318      	adds	r3, #24
 8008372:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800837a:	2200      	movs	r2, #0
 800837c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8008380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3318      	adds	r3, #24
 80083a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 80083ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3318      	adds	r3, #24
 80083ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 80083dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3318      	adds	r3, #24
 80083fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008404:	2201      	movs	r2, #1
 8008406:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 800840a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3318      	adds	r3, #24
 800842a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008432:	2200      	movs	r2, #0
 8008434:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8008438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2208      	movs	r2, #8
 8008458:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220b      	movs	r2, #11
 800845e:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008466:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800846e:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008476:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800847e:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008480:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2212      	movs	r2, #18
 80084a6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220f      	movs	r2, #15
 80084ac:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80084ba:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	220c      	movs	r2, #12
 80084c0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80084c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	895b      	ldrh	r3, [r3, #10]
 80084e4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	895b      	ldrh	r3, [r3, #10]
 8008502:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008522:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2200      	movs	r2, #0
 8008528:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2240      	movs	r2, #64	; 0x40
 800852e:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d108      	bne.n	8008554 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2200      	movs	r2, #0
 8008550:	741a      	strb	r2, [r3, #16]
 8008552:	e002      	b.n	800855a <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2201      	movs	r2, #1
 8008558:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d114      	bne.n	800858c <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8008566:	2b01      	cmp	r3, #1
 8008568:	d110      	bne.n	800858c <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	7d9b      	ldrb	r3, [r3, #22]
 800857e:	f003 f879 	bl	800b674 <VL53L1_calc_range_ignore_threshold>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	831a      	strh	r2, [r3, #24]
 800858a:	e002      	b.n	8008592 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008598:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2232      	movs	r2, #50	; 0x32
 800859e:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80085a6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	228c      	movs	r2, #140	; 0x8c
 80085ac:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80085ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80085cc:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80085d4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2207      	movs	r2, #7
 80085da:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f643 2298 	movw	r2, #15000	; 0x3a98
 80085e2:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80085ea:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80085f2:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2246      	movs	r2, #70	; 0x46
 80085f8:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008600:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	228c      	movs	r2, #140	; 0x8c
 8008606:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8008608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800862a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008632:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800863a:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008642:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2208      	movs	r2, #8
 8008648:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2228      	movs	r2, #40	; 0x28
 800864e:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2209      	movs	r2, #9
 8008654:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008656:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008678:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008680:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008688:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008690:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2210      	movs	r2, #16
 8008696:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2208      	movs	r2, #8
 800869c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800869e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	4603      	mov	r3, r0
 80086b6:	6039      	str	r1, [r7, #0]
 80086b8:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2204      	movs	r2, #4
 80086c2:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2201      	movs	r2, #1
 80086c8:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2202      	movs	r2, #2
 80086d4:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2201      	movs	r2, #1
 80086da:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2250      	movs	r2, #80	; 0x50
 80086e0:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2270      	movs	r2, #112	; 0x70
 80086e6:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f241 023d 	movw	r2, #4157	; 0x103d
 80086ee:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2210      	movs	r2, #16
 80086f4:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2232      	movs	r2, #50	; 0x32
 80086fa:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2264      	movs	r2, #100	; 0x64
 8008700:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2201      	movs	r2, #1
 8008706:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	22a0      	movs	r2, #160	; 0xa0
 800870c:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2200      	movs	r2, #0
 8008712:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800871a:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2208      	movs	r2, #8
 8008720:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2288      	movs	r2, #136	; 0x88
 8008728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2208      	movs	r2, #8
 8008730:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008742:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	22fa      	movs	r2, #250	; 0xfa
 8008748:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	79fa      	ldrb	r2, [r7, #7]
 800874e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008758:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2232      	movs	r2, #50	; 0x32
 800875e:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008766:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	228c      	movs	r2, #140	; 0x8c
 800876c:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2250      	movs	r2, #80	; 0x50
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2232      	movs	r2, #50	; 0x32
 800877a:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800877c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2220      	movs	r2, #32
 800879c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	220e      	movs	r2, #14
 80087a2:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f642 7294 	movw	r2, #12180	; 0x2f94
 80087aa:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	220e      	movs	r2, #14
 80087b0:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	220a      	movs	r2, #10
 80087b6:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2206      	movs	r2, #6
 80087bc:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	220e      	movs	r2, #14
 80087c2:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	220a      	movs	r2, #10
 80087c8:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2206      	movs	r2, #6
 80087ce:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2209      	movs	r2, #9
 80087d4:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2205      	movs	r2, #5
 80087da:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2203      	movs	r2, #3
 80087e0:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2206      	movs	r2, #6
 80087e6:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2206      	movs	r2, #6
 80087ec:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2206      	movs	r2, #6
 80087f2:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2221      	movs	r2, #33	; 0x21
 80087fe:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	223c      	movs	r2, #60	; 0x3c
 8008810:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	223c      	movs	r2, #60	; 0x3c
 8008816:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	223c      	movs	r2, #60	; 0x3c
 800881c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2280      	movs	r2, #128	; 0x80
 8008822:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2280      	movs	r2, #128	; 0x80
 8008828:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2280      	movs	r2, #128	; 0x80
 800882e:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2208      	movs	r2, #8
 8008834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2210      	movs	r2, #16
 800883c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800886e:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008876:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800887e:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008886:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008896:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f242 3228 	movw	r2, #9000	; 0x2328
 800889e:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f241 7270 	movw	r2, #6000	; 0x1770
 80088a6:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f643 2298 	movw	r2, #15000	; 0x3a98
 80088ae:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f242 3228 	movw	r2, #9000	; 0x2328
 80088b6:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80088be:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80088ce:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80088d6:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80088de:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80088e6:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f24f 6218 	movw	r2, #63000	; 0xf618
 80088ee:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80088f6:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80088fe:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008906:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008914:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800891c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f242 7210 	movw	r2, #10000	; 0x2710
 8008934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2206      	movs	r2, #6
 800893c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800894e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f640 22be 	movw	r2, #2750	; 0xabe
 8008958:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	22fa      	movs	r2, #250	; 0xfa
 8008960:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800896a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008974:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800897e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008988:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8008992:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f64f 7238 	movw	r2, #65336	; 0xff38
 800899c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	22c8      	movs	r2, #200	; 0xc8
 80089a4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	22fa      	movs	r2, #250	; 0xfa
 80089ac:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80089b6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f640 1206 	movw	r2, #2310	; 0x906
 80089c0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f640 1206 	movw	r2, #2310	; 0x906
 80089d2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80089dc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80089e6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f640 421c 	movw	r2, #3100	; 0xc1c
 80089f0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80089fa:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f641 022e 	movw	r2, #6190	; 0x182e
 8008a04:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f641 3230 	movw	r2, #6960	; 0x1b30
 8008a1e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f641 022e 	movw	r2, #6190	; 0x182e
 8008a28:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	22fa      	movs	r2, #250	; 0xfa
 8008a30:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008a3a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008a44:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f241 1294 	movw	r2, #4500	; 0x1194
 8008a4e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008a58:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	22c8      	movs	r2, #200	; 0xc8
 8008a60:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f640 3222 	movw	r2, #2850	; 0xb22
 8008a6a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008a74:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f640 721e 	movw	r2, #3870	; 0xf1e
 8008a8e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f241 222a 	movw	r2, #4650	; 0x122a
 8008a98:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8008aa2:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f641 6214 	movw	r2, #7700	; 0x1e14
 8008ac4:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008ace:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f641 1288 	movw	r2, #6536	; 0x1988
 8008ae8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 8008aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008b0e:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2238      	movs	r2, #56	; 0x38
 8008b14:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2270      	movs	r2, #112	; 0x70
 8008b20:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2210      	movs	r2, #16
 8008b26:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2264      	movs	r2, #100	; 0x64
 8008b2c:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b34:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	220f      	movs	r2, #15
 8008b3a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2234      	movs	r2, #52	; 0x34
 8008b40:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	22c8      	movs	r2, #200	; 0xc8
 8008b46:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008b4e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008b56:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008b80:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2211      	movs	r2, #17
 8008bc2:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	22ff      	movs	r2, #255	; 0xff
 8008c1c:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220b      	movs	r2, #11
 8008c56:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	220d      	movs	r2, #13
 8008c6a:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008c92:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2238      	movs	r2, #56	; 0x38
 8008c9e:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	22ff      	movs	r2, #255	; 0xff
 8008ca4:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	221a      	movs	r2, #26
 8008cb6:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	22cc      	movs	r2, #204	; 0xcc
 8008cce:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	220b      	movs	r2, #11
 8008cd4:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	22f5      	movs	r2, #245	; 0xf5
 8008ce0:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2209      	movs	r2, #9
 8008ce6:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2278      	movs	r2, #120	; 0x78
 8008d02:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2207      	movs	r2, #7
 8008d14:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2221      	movs	r2, #33	; 0x21
 8008d1a:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2243      	movs	r2, #67	; 0x43
 8008d20:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2210      	movs	r2, #16
 8008d26:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2232      	movs	r2, #50	; 0x32
 8008d2c:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2254      	movs	r2, #84	; 0x54
 8008d32:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2207      	movs	r2, #7
 8008d38:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2221      	movs	r2, #33	; 0x21
 8008d3e:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2243      	movs	r2, #67	; 0x43
 8008d44:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2210      	movs	r2, #16
 8008d4a:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2243      	movs	r2, #67	; 0x43
 8008d56:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2207      	movs	r2, #7
 8008d68:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2221      	movs	r2, #33	; 0x21
 8008d6e:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2243      	movs	r2, #67	; 0x43
 8008d74:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2210      	movs	r2, #16
 8008d7a:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2232      	movs	r2, #50	; 0x32
 8008d80:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2254      	movs	r2, #84	; 0x54
 8008d86:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d8e:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d96:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	2210      	movs	r2, #16
 8008da2:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	2200      	movs	r2, #0
 8008da8:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	220f      	movs	r2, #15
 8008dae:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	220f      	movs	r2, #15
 8008db4:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	2208      	movs	r2, #8
 8008dba:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ddc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	220b      	movs	r2, #11
 8008de8:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	2209      	movs	r2, #9
 8008dee:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	2201      	movs	r2, #1
 8008e04:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	22c7      	movs	r2, #199	; 0xc7
 8008e1e:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	22ff      	movs	r2, #255	; 0xff
 8008e24:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	22db      	movs	r2, #219	; 0xdb
 8008e2a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2200      	movs	r2, #0
 8008e36:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	2201      	movs	r2, #1
 8008e42:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	2221      	movs	r2, #33	; 0x21
 8008e48:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	371c      	adds	r7, #28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b08a      	sub	sp, #40	; 0x28
 8008e5e:	af04      	add	r7, sp, #16
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	68b9      	ldr	r1, [r7, #8]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff fe70 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d121      	bne.n	8008ed8 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2207      	movs	r2, #7
 8008e98:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2205      	movs	r2, #5
 8008e9e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2238      	movs	r2, #56	; 0x38
 8008eba:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	2207      	movs	r2, #7
 8008ec0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	2205      	movs	r2, #5
 8008ec6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08a      	sub	sp, #40	; 0x28
 8008ee8:	af04      	add	r7, sp, #16
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	9302      	str	r3, [sp, #8]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff fe2b 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d121      	bne.n	8008f62 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	220f      	movs	r2, #15
 8008f22:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	220d      	movs	r2, #13
 8008f28:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	22b8      	movs	r2, #184	; 0xb8
 8008f44:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	220f      	movs	r2, #15
 8008f4a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	220d      	movs	r2, #13
 8008f50:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b08a      	sub	sp, #40	; 0x28
 8008f72:	af04      	add	r7, sp, #16
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
 8008f7a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	9302      	str	r3, [sp, #8]
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7ff fde6 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d105      	bne.n	8008fb4 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	223b      	movs	r2, #59	; 0x3b
 8008fb2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af04      	add	r7, sp, #16
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
 8008fcc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	9303      	str	r3, [sp, #12]
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	9302      	str	r3, [sp, #8]
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7ff fdbd 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d105      	bne.n	8009006 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	225b      	movs	r2, #91	; 0x5b
 8009004:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b08a      	sub	sp, #40	; 0x28
 8009016:	af04      	add	r7, sp, #16
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009020:	2300      	movs	r3, #0
 8009022:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	9303      	str	r3, [sp, #12]
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	9302      	str	r3, [sp, #8]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fd94 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d11a      	bne.n	8009082 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	2200      	movs	r2, #0
 8009050:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	22b1      	movs	r2, #177	; 0xb1
 800905c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	22d4      	movs	r2, #212	; 0xd4
 8009068:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009070:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	2240      	movs	r2, #64	; 0x40
 8009080:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b08a      	sub	sp, #40	; 0x28
 8009092:	af04      	add	r7, sp, #16
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800909c:	2300      	movs	r3, #0
 800909e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	9302      	str	r3, [sp, #8]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	9301      	str	r3, [sp, #4]
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fecf 	bl	8008e5a <VL53L1_preset_mode_standard_ranging_short_range>
 80090bc:	4603      	mov	r3, r0
 80090be:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	2200      	movs	r2, #0
 80090cc:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2201      	movs	r2, #1
 80090d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2284      	movs	r2, #132	; 0x84
 80090d8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2201      	movs	r2, #1
 80090de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	22b1      	movs	r2, #177	; 0xb1
 80090e4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80090ec:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	2240      	movs	r2, #64	; 0x40
 80090fc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80090fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08a      	sub	sp, #40	; 0x28
 800910e:	af04      	add	r7, sp, #16
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff fed6 	bl	8008ee4 <VL53L1_preset_mode_standard_ranging_long_range>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d11a      	bne.n	800917a <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	2200      	movs	r2, #0
 8009148:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2200      	movs	r2, #0
 800914e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2297      	movs	r2, #151	; 0x97
 8009154:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	22b1      	movs	r2, #177	; 0xb1
 8009160:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009168:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	2240      	movs	r2, #64	; 0x40
 8009178:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800917a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b08a      	sub	sp, #40	; 0x28
 800918a:	af04      	add	r7, sp, #16
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009194:	2300      	movs	r3, #0
 8009196:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	9303      	str	r3, [sp, #12]
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff ff2f 	bl	8009012 <VL53L1_preset_mode_timed_ranging>
 80091b4:	4603      	mov	r3, r0
 80091b6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80091c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c2:	6a39      	ldr	r1, [r7, #32]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f005 f978 	bl	800e4ba <VL53L1_config_low_power_auto_mode>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80091ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b08a      	sub	sp, #40	; 0x28
 80091de:	af04      	add	r7, sp, #16
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	9303      	str	r3, [sp, #12]
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff43 	bl	800908e <VL53L1_preset_mode_timed_ranging_short_range>
 8009208:	4603      	mov	r3, r0
 800920a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800920c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d106      	bne.n	8009222 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009216:	6a39      	ldr	r1, [r7, #32]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f005 f94e 	bl	800e4ba <VL53L1_config_low_power_auto_mode>
 800921e:	4603      	mov	r3, r0
 8009220:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b08a      	sub	sp, #40	; 0x28
 8009232:	af04      	add	r7, sp, #16
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800923c:	2300      	movs	r3, #0
 800923e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	68b9      	ldr	r1, [r7, #8]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f7ff ff57 	bl	800910a <VL53L1_preset_mode_timed_ranging_long_range>
 800925c:	4603      	mov	r3, r0
 800925e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800926a:	6a39      	ldr	r1, [r7, #32]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f005 f924 	bl	800e4ba <VL53L1_config_low_power_auto_mode>
 8009272:	4603      	mov	r3, r0
 8009274:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3718      	adds	r7, #24
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b08a      	sub	sp, #40	; 0x28
 8009286:	af04      	add	r7, sp, #16
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
 800928e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009290:	2300      	movs	r3, #0
 8009292:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	9303      	str	r3, [sp, #12]
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	9302      	str	r3, [sp, #8]
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff fc5c 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d116      	bne.n	80092ea <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	2200      	movs	r2, #0
 80092c0:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2200      	movs	r2, #0
 80092c6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	22b1      	movs	r2, #177	; 0xb1
 80092cc:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	22d4      	movs	r2, #212	; 0xd4
 80092d8:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	2210      	movs	r2, #16
 80092e8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80092ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b090      	sub	sp, #64	; 0x40
 80092fa:	af0a      	add	r7, sp, #40	; 0x28
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	607a      	str	r2, [r7, #4]
 8009302:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009304:	2300      	movs	r3, #0
 8009306:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	68b8      	ldr	r0, [r7, #8]
 8009320:	f7ff fc22 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 8009324:	4603      	mov	r3, r0
 8009326:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009328:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d171      	bne.n	8009414 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009336:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	2305      	movs	r3, #5
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	2304      	movs	r3, #4
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	2303      	movs	r3, #3
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	2302      	movs	r3, #2
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	2301      	movs	r3, #1
 800934e:	9303      	str	r3, [sp, #12]
 8009350:	2300      	movs	r3, #0
 8009352:	9302      	str	r3, [sp, #8]
 8009354:	2304      	movs	r3, #4
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	2303      	movs	r3, #3
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	2302      	movs	r3, #2
 800935e:	2201      	movs	r2, #1
 8009360:	2100      	movs	r1, #0
 8009362:	2007      	movs	r0, #7
 8009364:	f001 fe1b 	bl	800af9e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	3302      	adds	r3, #2
 800936c:	9308      	str	r3, [sp, #32]
 800936e:	2305      	movs	r3, #5
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	2304      	movs	r3, #4
 8009374:	9306      	str	r3, [sp, #24]
 8009376:	2303      	movs	r3, #3
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	2302      	movs	r3, #2
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	2301      	movs	r3, #1
 8009380:	9303      	str	r3, [sp, #12]
 8009382:	2300      	movs	r3, #0
 8009384:	9302      	str	r3, [sp, #8]
 8009386:	2304      	movs	r3, #4
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	2303      	movs	r3, #3
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	2302      	movs	r3, #2
 8009390:	2201      	movs	r2, #1
 8009392:	2100      	movs	r1, #0
 8009394:	2007      	movs	r0, #7
 8009396:	f001 fe92 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	2209      	movs	r2, #9
 800939e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	220b      	movs	r2, #11
 80093a4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	2209      	movs	r2, #9
 80093aa:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	220b      	movs	r2, #11
 80093b0:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	2220      	movs	r2, #32
 80093bc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	2200      	movs	r2, #0
 80093c2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	221a      	movs	r2, #26
 80093c8:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	2200      	movs	r2, #0
 80093ce:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	2228      	movs	r2, #40	; 0x28
 80093d4:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	2200      	movs	r2, #0
 80093da:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	2221      	movs	r2, #33	; 0x21
 80093e0:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	22f5      	movs	r2, #245	; 0xf5
 80093e6:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2208      	movs	r2, #8
 80093ec:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2288      	movs	r2, #136	; 0x88
 80093f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	68b9      	ldr	r1, [r7, #8]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f001 f821 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	229b      	movs	r2, #155	; 0x9b
 800940c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	2226      	movs	r2, #38	; 0x26
 8009412:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b090      	sub	sp, #64	; 0x40
 8009424:	af0a      	add	r7, sp, #40	; 0x28
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	9303      	str	r3, [sp, #12]
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	9302      	str	r3, [sp, #8]
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7ff ff52 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 8009452:	4603      	mov	r3, r0
 8009454:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009456:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d13e      	bne.n	80094dc <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	9308      	str	r3, [sp, #32]
 8009462:	2305      	movs	r3, #5
 8009464:	9307      	str	r3, [sp, #28]
 8009466:	2304      	movs	r3, #4
 8009468:	9306      	str	r3, [sp, #24]
 800946a:	2303      	movs	r3, #3
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	230a      	movs	r3, #10
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	2309      	movs	r3, #9
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	2308      	movs	r3, #8
 8009478:	9302      	str	r3, [sp, #8]
 800947a:	2304      	movs	r3, #4
 800947c:	9301      	str	r3, [sp, #4]
 800947e:	2303      	movs	r3, #3
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2302      	movs	r3, #2
 8009484:	2201      	movs	r2, #1
 8009486:	2100      	movs	r1, #0
 8009488:	2007      	movs	r0, #7
 800948a:	f001 fd88 	bl	800af9e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	3302      	adds	r3, #2
 8009492:	9308      	str	r3, [sp, #32]
 8009494:	2305      	movs	r3, #5
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	2304      	movs	r3, #4
 800949a:	9306      	str	r3, [sp, #24]
 800949c:	2303      	movs	r3, #3
 800949e:	9305      	str	r3, [sp, #20]
 80094a0:	230a      	movs	r3, #10
 80094a2:	9304      	str	r3, [sp, #16]
 80094a4:	2309      	movs	r3, #9
 80094a6:	9303      	str	r3, [sp, #12]
 80094a8:	2308      	movs	r3, #8
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	2304      	movs	r3, #4
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	2303      	movs	r3, #3
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2201      	movs	r2, #1
 80094b8:	2100      	movs	r1, #0
 80094ba:	2007      	movs	r0, #7
 80094bc:	f001 fdff 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 ffbd 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	22bb      	movs	r2, #187	; 0xbb
 80094d4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	2226      	movs	r2, #38	; 0x26
 80094da:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80094dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08c      	sub	sp, #48	; 0x30
 80094ec:	af06      	add	r7, sp, #24
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
 80094f4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094f6:	2300      	movs	r3, #0
 80094f8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	9303      	str	r3, [sp, #12]
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	9302      	str	r3, [sp, #8]
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68b9      	ldr	r1, [r7, #8]
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f7ff ff83 	bl	8009420 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800951e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d102      	bne.n	800952c <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	22db      	movs	r2, #219	; 0xdb
 800952a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800952c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b090      	sub	sp, #64	; 0x40
 800953c:	af0a      	add	r7, sp, #40	; 0x28
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800954a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	9303      	str	r3, [sp, #12]
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	9302      	str	r3, [sp, #8]
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff fec6 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 800956a:	4603      	mov	r3, r0
 800956c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800956e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d13e      	bne.n	80095f4 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	9308      	str	r3, [sp, #32]
 800957a:	230d      	movs	r3, #13
 800957c:	9307      	str	r3, [sp, #28]
 800957e:	230c      	movs	r3, #12
 8009580:	9306      	str	r3, [sp, #24]
 8009582:	230b      	movs	r3, #11
 8009584:	9305      	str	r3, [sp, #20]
 8009586:	230a      	movs	r3, #10
 8009588:	9304      	str	r3, [sp, #16]
 800958a:	2309      	movs	r3, #9
 800958c:	9303      	str	r3, [sp, #12]
 800958e:	2308      	movs	r3, #8
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	230c      	movs	r3, #12
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	230b      	movs	r3, #11
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	230a      	movs	r3, #10
 800959c:	2209      	movs	r2, #9
 800959e:	2108      	movs	r1, #8
 80095a0:	2007      	movs	r0, #7
 80095a2:	f001 fcfc 	bl	800af9e <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	3302      	adds	r3, #2
 80095aa:	9308      	str	r3, [sp, #32]
 80095ac:	230d      	movs	r3, #13
 80095ae:	9307      	str	r3, [sp, #28]
 80095b0:	230c      	movs	r3, #12
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	230b      	movs	r3, #11
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	230a      	movs	r3, #10
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	2309      	movs	r3, #9
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	2308      	movs	r3, #8
 80095c2:	9302      	str	r3, [sp, #8]
 80095c4:	230c      	movs	r3, #12
 80095c6:	9301      	str	r3, [sp, #4]
 80095c8:	230b      	movs	r3, #11
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	230a      	movs	r3, #10
 80095ce:	2209      	movs	r2, #9
 80095d0:	2108      	movs	r1, #8
 80095d2:	2007      	movs	r0, #7
 80095d4:	f001 fd73 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 ff31 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2202      	movs	r2, #2
 80095ec:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	22bb      	movs	r2, #187	; 0xbb
 80095f2:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80095f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08c      	sub	sp, #48	; 0x30
 8009604:	af06      	add	r7, sp, #24
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff ff83 	bl	8009538 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 8009636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	22db      	movs	r2, #219	; 0xdb
 8009642:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b090      	sub	sp, #64	; 0x40
 8009654:	af0a      	add	r7, sp, #40	; 0x28
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800965e:	2300      	movs	r3, #0
 8009660:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	9303      	str	r3, [sp, #12]
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fe3a 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d166      	bne.n	800975c <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009694:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	2304      	movs	r3, #4
 800969c:	9307      	str	r3, [sp, #28]
 800969e:	2303      	movs	r3, #3
 80096a0:	9306      	str	r3, [sp, #24]
 80096a2:	2302      	movs	r3, #2
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	2301      	movs	r3, #1
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9303      	str	r3, [sp, #12]
 80096ae:	2307      	movs	r3, #7
 80096b0:	9302      	str	r3, [sp, #8]
 80096b2:	2304      	movs	r3, #4
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	2303      	movs	r3, #3
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	2302      	movs	r3, #2
 80096bc:	2201      	movs	r2, #1
 80096be:	2100      	movs	r1, #0
 80096c0:	2007      	movs	r0, #7
 80096c2:	f001 fc6c 	bl	800af9e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	3302      	adds	r3, #2
 80096ca:	9308      	str	r3, [sp, #32]
 80096cc:	2304      	movs	r3, #4
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	2303      	movs	r3, #3
 80096d2:	9306      	str	r3, [sp, #24]
 80096d4:	2302      	movs	r3, #2
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	2301      	movs	r3, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	2300      	movs	r3, #0
 80096de:	9303      	str	r3, [sp, #12]
 80096e0:	2307      	movs	r3, #7
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	2304      	movs	r3, #4
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	2303      	movs	r3, #3
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2302      	movs	r3, #2
 80096ee:	2201      	movs	r2, #1
 80096f0:	2100      	movs	r1, #0
 80096f2:	2007      	movs	r0, #7
 80096f4:	f001 fce3 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fea1 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	2204      	movs	r2, #4
 800970c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	2203      	movs	r2, #3
 8009712:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	2242      	movs	r2, #66	; 0x42
 800971e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	2200      	movs	r2, #0
 8009724:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	2242      	movs	r2, #66	; 0x42
 800972a:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	2200      	movs	r2, #0
 8009730:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	2252      	movs	r2, #82	; 0x52
 8009736:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	2200      	movs	r2, #0
 800973c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	2266      	movs	r2, #102	; 0x66
 8009742:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2204      	movs	r2, #4
 8009748:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	22a4      	movs	r2, #164	; 0xa4
 800974e:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	229b      	movs	r2, #155	; 0x9b
 8009754:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2226      	movs	r2, #38	; 0x26
 800975a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800975c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b090      	sub	sp, #64	; 0x40
 800976c:	af0a      	add	r7, sp, #40	; 0x28
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009776:	2300      	movs	r3, #0
 8009778:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fdae 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800979e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d178      	bne.n	8009898 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	9308      	str	r3, [sp, #32]
 80097aa:	2305      	movs	r3, #5
 80097ac:	9307      	str	r3, [sp, #28]
 80097ae:	2304      	movs	r3, #4
 80097b0:	9306      	str	r3, [sp, #24]
 80097b2:	2303      	movs	r3, #3
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	2302      	movs	r3, #2
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	2301      	movs	r3, #1
 80097bc:	9303      	str	r3, [sp, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	9302      	str	r3, [sp, #8]
 80097c2:	2304      	movs	r3, #4
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	2303      	movs	r3, #3
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	2302      	movs	r3, #2
 80097cc:	2201      	movs	r2, #1
 80097ce:	2100      	movs	r1, #0
 80097d0:	2007      	movs	r0, #7
 80097d2:	f001 fbe4 	bl	800af9e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	3302      	adds	r3, #2
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	2305      	movs	r3, #5
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	2304      	movs	r3, #4
 80097e2:	9306      	str	r3, [sp, #24]
 80097e4:	2303      	movs	r3, #3
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	2302      	movs	r3, #2
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	2301      	movs	r3, #1
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	2300      	movs	r3, #0
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	2304      	movs	r3, #4
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	2303      	movs	r3, #3
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2302      	movs	r3, #2
 80097fe:	2201      	movs	r2, #1
 8009800:	2100      	movs	r1, #0
 8009802:	2007      	movs	r0, #7
 8009804:	f001 fc5b 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fe19 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	2209      	movs	r2, #9
 800981c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	220b      	movs	r2, #11
 8009822:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	2221      	movs	r2, #33	; 0x21
 800982e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	2200      	movs	r2, #0
 8009834:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	221b      	movs	r2, #27
 800983a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	2200      	movs	r2, #0
 8009840:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	2229      	movs	r2, #41	; 0x29
 8009846:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	2200      	movs	r2, #0
 800984c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	2222      	movs	r2, #34	; 0x22
 8009852:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2209      	movs	r2, #9
 8009858:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	22f5      	movs	r2, #245	; 0xf5
 800985e:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	2209      	movs	r2, #9
 8009864:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	220b      	movs	r2, #11
 800986a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2208      	movs	r2, #8
 8009880:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2288      	movs	r2, #136	; 0x88
 8009888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	229b      	movs	r2, #155	; 0x9b
 8009890:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	2226      	movs	r2, #38	; 0x26
 8009896:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009898:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b090      	sub	sp, #64	; 0x40
 80098a8:	af0a      	add	r7, sp, #40	; 0x28
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	9303      	str	r3, [sp, #12]
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff ff49 	bl	8009768 <VL53L1_preset_mode_histogram_long_range>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80098da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d13b      	bne.n	800995a <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	2305      	movs	r3, #5
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	2304      	movs	r3, #4
 80098ec:	9306      	str	r3, [sp, #24]
 80098ee:	2303      	movs	r3, #3
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	230a      	movs	r3, #10
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	2309      	movs	r3, #9
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	2308      	movs	r3, #8
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	2304      	movs	r3, #4
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	2303      	movs	r3, #3
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2302      	movs	r3, #2
 8009908:	2201      	movs	r2, #1
 800990a:	2100      	movs	r1, #0
 800990c:	2007      	movs	r0, #7
 800990e:	f001 fb46 	bl	800af9e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009914:	3302      	adds	r3, #2
 8009916:	9308      	str	r3, [sp, #32]
 8009918:	2305      	movs	r3, #5
 800991a:	9307      	str	r3, [sp, #28]
 800991c:	2304      	movs	r3, #4
 800991e:	9306      	str	r3, [sp, #24]
 8009920:	2303      	movs	r3, #3
 8009922:	9305      	str	r3, [sp, #20]
 8009924:	230a      	movs	r3, #10
 8009926:	9304      	str	r3, [sp, #16]
 8009928:	2309      	movs	r3, #9
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	2308      	movs	r3, #8
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	2304      	movs	r3, #4
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	2303      	movs	r3, #3
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2302      	movs	r3, #2
 800993a:	2201      	movs	r2, #1
 800993c:	2100      	movs	r1, #0
 800993e:	2007      	movs	r0, #7
 8009940:	f001 fbbd 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fd7b 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	22bb      	movs	r2, #187	; 0xbb
 8009958:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800995a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b08c      	sub	sp, #48	; 0x30
 800996a:	af06      	add	r7, sp, #24
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009974:	2300      	movs	r3, #0
 8009976:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	9304      	str	r3, [sp, #16]
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	9302      	str	r3, [sp, #8]
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff ff86 	bl	80098a4 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009998:	4603      	mov	r3, r0
 800999a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800999c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	22db      	movs	r2, #219	; 0xdb
 80099a8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b090      	sub	sp, #64	; 0x40
 80099ba:	af0a      	add	r7, sp, #40	; 0x28
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fc87 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 80099e8:	4603      	mov	r3, r0
 80099ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d178      	bne.n	8009ae6 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	9308      	str	r3, [sp, #32]
 80099f8:	2303      	movs	r3, #3
 80099fa:	9307      	str	r3, [sp, #28]
 80099fc:	2302      	movs	r3, #2
 80099fe:	9306      	str	r3, [sp, #24]
 8009a00:	2301      	movs	r3, #1
 8009a02:	9305      	str	r3, [sp, #20]
 8009a04:	2302      	movs	r3, #2
 8009a06:	9304      	str	r3, [sp, #16]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9302      	str	r3, [sp, #8]
 8009a10:	2302      	movs	r3, #2
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	2302      	movs	r3, #2
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	2007      	movs	r0, #7
 8009a20:	f001 fabd 	bl	800af9e <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	3302      	adds	r3, #2
 8009a28:	9308      	str	r3, [sp, #32]
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	9307      	str	r3, [sp, #28]
 8009a2e:	2302      	movs	r3, #2
 8009a30:	9306      	str	r3, [sp, #24]
 8009a32:	2301      	movs	r3, #1
 8009a34:	9305      	str	r3, [sp, #20]
 8009a36:	2302      	movs	r3, #2
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	2302      	movs	r3, #2
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	2302      	movs	r3, #2
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2100      	movs	r1, #0
 8009a50:	2007      	movs	r0, #7
 8009a52:	f001 fb34 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fcf2 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	2205      	movs	r2, #5
 8009a6a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	2207      	movs	r2, #7
 8009a70:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	2236      	movs	r2, #54	; 0x36
 8009a7c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	2200      	movs	r2, #0
 8009a82:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2228      	movs	r2, #40	; 0x28
 8009a88:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	2244      	movs	r2, #68	; 0x44
 8009a94:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	2233      	movs	r2, #51	; 0x33
 8009aa0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	22f5      	movs	r2, #245	; 0xf5
 8009aac:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	2207      	movs	r2, #7
 8009ab8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2208      	movs	r2, #8
 8009ace:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2248      	movs	r2, #72	; 0x48
 8009ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	229b      	movs	r2, #155	; 0x9b
 8009ade:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	2226      	movs	r2, #38	; 0x26
 8009ae4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b090      	sub	sp, #64	; 0x40
 8009af6:	af0a      	add	r7, sp, #40	; 0x28
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	9303      	str	r3, [sp, #12]
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	9302      	str	r3, [sp, #8]
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7ff ff49 	bl	80099b6 <VL53L1_preset_mode_histogram_medium_range>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d13b      	bne.n	8009ba8 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	9308      	str	r3, [sp, #32]
 8009b34:	2303      	movs	r3, #3
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	2302      	movs	r3, #2
 8009b3a:	9306      	str	r3, [sp, #24]
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	9305      	str	r3, [sp, #20]
 8009b40:	230a      	movs	r3, #10
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	2309      	movs	r3, #9
 8009b46:	9303      	str	r3, [sp, #12]
 8009b48:	2308      	movs	r3, #8
 8009b4a:	9302      	str	r3, [sp, #8]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	2302      	movs	r3, #2
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	2301      	movs	r3, #1
 8009b56:	2201      	movs	r2, #1
 8009b58:	2100      	movs	r1, #0
 8009b5a:	2007      	movs	r0, #7
 8009b5c:	f001 fa1f 	bl	800af9e <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b62:	3302      	adds	r3, #2
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	2303      	movs	r3, #3
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	9306      	str	r3, [sp, #24]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	9305      	str	r3, [sp, #20]
 8009b72:	230a      	movs	r3, #10
 8009b74:	9304      	str	r3, [sp, #16]
 8009b76:	2309      	movs	r3, #9
 8009b78:	9303      	str	r3, [sp, #12]
 8009b7a:	2308      	movs	r3, #8
 8009b7c:	9302      	str	r3, [sp, #8]
 8009b7e:	2302      	movs	r3, #2
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	2302      	movs	r3, #2
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	2301      	movs	r3, #1
 8009b88:	2201      	movs	r2, #1
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	2007      	movs	r0, #7
 8009b8e:	f001 fa96 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc54 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	22bb      	movs	r2, #187	; 0xbb
 8009ba6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08c      	sub	sp, #48	; 0x30
 8009bb8:	af06      	add	r7, sp, #24
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	9304      	str	r3, [sp, #16]
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	9303      	str	r3, [sp, #12]
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	9302      	str	r3, [sp, #8]
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	68b9      	ldr	r1, [r7, #8]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff ff86 	bl	8009af2 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	22db      	movs	r2, #219	; 0xdb
 8009bf6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b090      	sub	sp, #64	; 0x40
 8009c08:	af0a      	add	r7, sp, #40	; 0x28
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	9304      	str	r3, [sp, #16]
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	9303      	str	r3, [sp, #12]
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	9302      	str	r3, [sp, #8]
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f7ff fb60 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 8009c36:	4603      	mov	r3, r0
 8009c38:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d178      	bne.n	8009d34 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	2302      	movs	r3, #2
 8009c48:	9307      	str	r3, [sp, #28]
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	9306      	str	r3, [sp, #24]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	9305      	str	r3, [sp, #20]
 8009c52:	2301      	movs	r3, #1
 8009c54:	9304      	str	r3, [sp, #16]
 8009c56:	2301      	movs	r3, #1
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9302      	str	r3, [sp, #8]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	2301      	movs	r3, #1
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2301      	movs	r3, #1
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2107      	movs	r1, #7
 8009c6c:	2007      	movs	r0, #7
 8009c6e:	f001 f996 	bl	800af9e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	3302      	adds	r3, #2
 8009c76:	9308      	str	r3, [sp, #32]
 8009c78:	2302      	movs	r3, #2
 8009c7a:	9307      	str	r3, [sp, #28]
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	9306      	str	r3, [sp, #24]
 8009c80:	2301      	movs	r3, #1
 8009c82:	9305      	str	r3, [sp, #20]
 8009c84:	2301      	movs	r3, #1
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	2301      	movs	r3, #1
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	2301      	movs	r3, #1
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2107      	movs	r1, #7
 8009c9e:	2007      	movs	r0, #7
 8009ca0:	f001 fa0d 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fbcb 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	2205      	movs	r2, #5
 8009cbe:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	2252      	movs	r2, #82	; 0x52
 8009cca:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	2237      	movs	r2, #55	; 0x37
 8009cd6:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	2266      	movs	r2, #102	; 0x66
 8009ce2:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	2244      	movs	r2, #68	; 0x44
 8009cee:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	22f5      	movs	r2, #245	; 0xf5
 8009cfa:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2203      	movs	r2, #3
 8009d00:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	2205      	movs	r2, #5
 8009d06:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d12:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2208      	movs	r2, #8
 8009d1c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2228      	movs	r2, #40	; 0x28
 8009d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	22bb      	movs	r2, #187	; 0xbb
 8009d2c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	2226      	movs	r2, #38	; 0x26
 8009d32:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b090      	sub	sp, #64	; 0x40
 8009d44:	af0a      	add	r7, sp, #40	; 0x28
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	9304      	str	r3, [sp, #16]
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	9303      	str	r3, [sp, #12]
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	9302      	str	r3, [sp, #8]
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff ff49 	bl	8009c04 <VL53L1_preset_mode_histogram_short_range>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d15a      	bne.n	8009e34 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	9308      	str	r3, [sp, #32]
 8009d82:	2301      	movs	r3, #1
 8009d84:	9307      	str	r3, [sp, #28]
 8009d86:	2301      	movs	r3, #1
 8009d88:	9306      	str	r3, [sp, #24]
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	2300      	movs	r3, #0
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9302      	str	r3, [sp, #8]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	2300      	movs	r3, #0
 8009da4:	2200      	movs	r2, #0
 8009da6:	2107      	movs	r1, #7
 8009da8:	2007      	movs	r0, #7
 8009daa:	f001 f8f8 	bl	800af9e <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	3302      	adds	r3, #2
 8009db2:	9308      	str	r3, [sp, #32]
 8009db4:	2301      	movs	r3, #1
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	2301      	movs	r3, #1
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	9305      	str	r3, [sp, #20]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9302      	str	r3, [sp, #8]
 8009dcc:	2301      	movs	r3, #1
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2107      	movs	r1, #7
 8009dda:	2007      	movs	r0, #7
 8009ddc:	f001 f96f 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fb2d 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	2202      	movs	r2, #2
 8009df4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2203      	movs	r2, #3
 8009dfa:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2231      	movs	r2, #49	; 0x31
 8009e06:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	2203      	movs	r2, #3
 8009e12:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e16:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2210      	movs	r2, #16
 8009e28:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2218      	movs	r2, #24
 8009e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b090      	sub	sp, #64	; 0x40
 8009e44:	af0a      	add	r7, sp, #40	; 0x28
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	9302      	str	r3, [sp, #8]
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f7ff fec9 	bl	8009c04 <VL53L1_preset_mode_histogram_short_range>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d13b      	bne.n	8009ef6 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	9308      	str	r3, [sp, #32]
 8009e82:	2302      	movs	r3, #2
 8009e84:	9307      	str	r3, [sp, #28]
 8009e86:	2302      	movs	r3, #2
 8009e88:	9306      	str	r3, [sp, #24]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	9305      	str	r3, [sp, #20]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	2309      	movs	r3, #9
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	2308      	movs	r3, #8
 8009e98:	9302      	str	r3, [sp, #8]
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2107      	movs	r1, #7
 8009ea8:	2007      	movs	r0, #7
 8009eaa:	f001 f878 	bl	800af9e <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	9307      	str	r3, [sp, #28]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	9306      	str	r3, [sp, #24]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	9305      	str	r3, [sp, #20]
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	9304      	str	r3, [sp, #16]
 8009ec4:	2309      	movs	r3, #9
 8009ec6:	9303      	str	r3, [sp, #12]
 8009ec8:	2308      	movs	r3, #8
 8009eca:	9302      	str	r3, [sp, #8]
 8009ecc:	2301      	movs	r3, #1
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	2107      	movs	r1, #7
 8009eda:	2007      	movs	r0, #7
 8009edc:	f001 f8ef 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 faad 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	22bb      	movs	r2, #187	; 0xbb
 8009ef4:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b08c      	sub	sp, #48	; 0x30
 8009f06:	af06      	add	r7, sp, #24
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
 8009f0e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1a:	9303      	str	r3, [sp, #12]
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	9302      	str	r3, [sp, #8]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff ff86 	bl	8009e40 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009f34:	4603      	mov	r3, r0
 8009f36:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d102      	bne.n	8009f46 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	22db      	movs	r2, #219	; 0xdb
 8009f44:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b08c      	sub	sp, #48	; 0x30
 8009f56:	af06      	add	r7, sp, #24
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	9303      	str	r3, [sp, #12]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	9301      	str	r3, [sp, #4]
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff f9b9 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10b      	bne.n	8009fa8 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2201      	movs	r2, #1
 8009f94:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	2201      	movs	r2, #1
 8009f9a:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	2283      	movs	r2, #131	; 0x83
 8009fa0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	222e      	movs	r2, #46	; 0x2e
 8009fa6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b090      	sub	sp, #64	; 0x40
 8009fb8:	af0a      	add	r7, sp, #40	; 0x28
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	68b9      	ldr	r1, [r7, #8]
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 f9ba 	bl	800a35a <VL53L1_preset_mode_histogram_multizone_long_range>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d151      	bne.n	800a096 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ff4:	6838      	ldr	r0, [r7, #0]
 8009ff6:	f00a fb1c 	bl	8014632 <VL53L1_zone_preset_xtalk_planar>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	2209      	movs	r2, #9
 800a002:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	2209      	movs	r2, #9
 800a008:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	9308      	str	r3, [sp, #32]
 800a00e:	2304      	movs	r3, #4
 800a010:	9307      	str	r3, [sp, #28]
 800a012:	2303      	movs	r3, #3
 800a014:	9306      	str	r3, [sp, #24]
 800a016:	2302      	movs	r3, #2
 800a018:	9305      	str	r3, [sp, #20]
 800a01a:	2301      	movs	r3, #1
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	2300      	movs	r3, #0
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	2307      	movs	r3, #7
 800a024:	9302      	str	r3, [sp, #8]
 800a026:	2304      	movs	r3, #4
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	2303      	movs	r3, #3
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	2302      	movs	r3, #2
 800a030:	2201      	movs	r2, #1
 800a032:	2100      	movs	r1, #0
 800a034:	2007      	movs	r0, #7
 800a036:	f000 ffb2 	bl	800af9e <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 800a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03c:	3302      	adds	r3, #2
 800a03e:	9308      	str	r3, [sp, #32]
 800a040:	2304      	movs	r3, #4
 800a042:	9307      	str	r3, [sp, #28]
 800a044:	2303      	movs	r3, #3
 800a046:	9306      	str	r3, [sp, #24]
 800a048:	2302      	movs	r3, #2
 800a04a:	9305      	str	r3, [sp, #20]
 800a04c:	2301      	movs	r3, #1
 800a04e:	9304      	str	r3, [sp, #16]
 800a050:	2300      	movs	r3, #0
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	2307      	movs	r3, #7
 800a056:	9302      	str	r3, [sp, #8]
 800a058:	2304      	movs	r3, #4
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	2303      	movs	r3, #3
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2302      	movs	r3, #2
 800a062:	2201      	movs	r2, #1
 800a064:	2100      	movs	r1, #0
 800a066:	2007      	movs	r0, #7
 800a068:	f001 f829 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 800a06c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	3302      	adds	r3, #2
 800a078:	461a      	mov	r2, r3
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a07e:	f003 f97d 	bl	800d37c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f9da 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 800a096:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b090      	sub	sp, #64	; 0x40
 800a0a6:	af0a      	add	r7, sp, #40	; 0x28
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	9302      	str	r3, [sp, #8]
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff f911 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 800a0d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d16e      	bne.n	800a1be <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	9307      	str	r3, [sp, #28]
 800a0e8:	230b      	movs	r3, #11
 800a0ea:	9306      	str	r3, [sp, #24]
 800a0ec:	230a      	movs	r3, #10
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	2309      	movs	r3, #9
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	2308      	movs	r3, #8
 800a0f6:	9303      	str	r3, [sp, #12]
 800a0f8:	230f      	movs	r3, #15
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	9301      	str	r3, [sp, #4]
 800a100:	230b      	movs	r3, #11
 800a102:	9300      	str	r3, [sp, #0]
 800a104:	230a      	movs	r3, #10
 800a106:	2209      	movs	r2, #9
 800a108:	2108      	movs	r1, #8
 800a10a:	200f      	movs	r0, #15
 800a10c:	f000 ff47 	bl	800af9e <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	3302      	adds	r3, #2
 800a114:	9308      	str	r3, [sp, #32]
 800a116:	230c      	movs	r3, #12
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	230b      	movs	r3, #11
 800a11c:	9306      	str	r3, [sp, #24]
 800a11e:	230a      	movs	r3, #10
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	2309      	movs	r3, #9
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	2308      	movs	r3, #8
 800a128:	9303      	str	r3, [sp, #12]
 800a12a:	230f      	movs	r3, #15
 800a12c:	9302      	str	r3, [sp, #8]
 800a12e:	230c      	movs	r3, #12
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	230b      	movs	r3, #11
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	230a      	movs	r3, #10
 800a138:	2209      	movs	r2, #9
 800a13a:	2108      	movs	r1, #8
 800a13c:	200f      	movs	r0, #15
 800a13e:	f000 ffbe 	bl	800b0be <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 f97c 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	2209      	movs	r2, #9
 800a156:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	2209      	movs	r2, #9
 800a15c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	2200      	movs	r2, #0
 800a162:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	2221      	movs	r2, #33	; 0x21
 800a168:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	2200      	movs	r2, #0
 800a16e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	2221      	movs	r2, #33	; 0x21
 800a174:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	2200      	movs	r2, #0
 800a17a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	2229      	movs	r2, #41	; 0x29
 800a180:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	2200      	movs	r2, #0
 800a186:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	2229      	movs	r2, #41	; 0x29
 800a18c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2209      	movs	r2, #9
 800a192:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	22f5      	movs	r2, #245	; 0xf5
 800a198:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	2209      	movs	r2, #9
 800a19e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	2209      	movs	r2, #9
 800a1a4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	2209      	movs	r2, #9
 800a1aa:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2206      	movs	r2, #6
 800a1b0:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	22bb      	movs	r2, #187	; 0xbb
 800a1b6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	2226      	movs	r2, #38	; 0x26
 800a1bc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b08c      	sub	sp, #48	; 0x30
 800a1ce:	af06      	add	r7, sp, #24
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	607a      	str	r2, [r7, #4]
 800a1d6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	9304      	str	r3, [sp, #16]
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	9303      	str	r3, [sp, #12]
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	9302      	str	r3, [sp, #8]
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ff53 	bl	800a0a2 <VL53L1_preset_mode_histogram_xtalk_mm1>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	22db      	movs	r2, #219	; 0xdb
 800a204:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800a206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b08c      	sub	sp, #48	; 0x30
 800a216:	af06      	add	r7, sp, #24
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a220:	2300      	movs	r3, #0
 800a222:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	9304      	str	r3, [sp, #16]
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f7ff fbb9 	bl	80099b6 <VL53L1_preset_mode_histogram_medium_range>
 800a244:	4603      	mov	r3, r0
 800a246:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d12c      	bne.n	800a2aa <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	2307      	movs	r3, #7
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	2307      	movs	r3, #7
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	2302      	movs	r3, #2
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	2308      	movs	r3, #8
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	2304      	movs	r3, #4
 800a266:	2202      	movs	r2, #2
 800a268:	2108      	movs	r1, #8
 800a26a:	2004      	movs	r0, #4
 800a26c:	f00a f96c 	bl	8014548 <VL53L1_init_zone_config_structure>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	3301      	adds	r3, #1
 800a27a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d108      	bne.n	800a29a <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	3302      	adds	r3, #2
 800a28c:	461a      	mov	r2, r3
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a292:	f003 f873 	bl	800d37c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a296:	4603      	mov	r3, r0
 800a298:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f8d0 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b08c      	sub	sp, #48	; 0x30
 800a2ba:	af06      	add	r7, sp, #24
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fc8e 	bl	8009c04 <VL53L1_preset_mode_histogram_short_range>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d12c      	bne.n	800a34e <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	9304      	str	r3, [sp, #16]
 800a2f8:	2307      	movs	r3, #7
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	2307      	movs	r3, #7
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	2302      	movs	r3, #2
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	2308      	movs	r3, #8
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2304      	movs	r3, #4
 800a30a:	2202      	movs	r2, #2
 800a30c:	2108      	movs	r1, #8
 800a30e:	2004      	movs	r0, #4
 800a310:	f00a f91a 	bl	8014548 <VL53L1_init_zone_config_structure>
 800a314:	4603      	mov	r3, r0
 800a316:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	3301      	adds	r3, #1
 800a31e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d108      	bne.n	800a33e <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	3302      	adds	r3, #2
 800a330:	461a      	mov	r2, r3
 800a332:	6879      	ldr	r1, [r7, #4]
 800a334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a336:	f003 f821 	bl	800d37c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f87e 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b08c      	sub	sp, #48	; 0x30
 800a35e:	af06      	add	r7, sp, #24
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	60b9      	str	r1, [r7, #8]
 800a364:	607a      	str	r2, [r7, #4]
 800a366:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	68b9      	ldr	r1, [r7, #8]
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff f9ee 	bl	8009768 <VL53L1_preset_mode_histogram_long_range>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d12c      	bne.n	800a3f2 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	2307      	movs	r3, #7
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	2307      	movs	r3, #7
 800a3a2:	9302      	str	r3, [sp, #8]
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	2108      	movs	r1, #8
 800a3b2:	2004      	movs	r0, #4
 800a3b4:	f00a f8c8 	bl	8014548 <VL53L1_init_zone_config_structure>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	785b      	ldrb	r3, [r3, #1]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a3c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d108      	bne.n	800a3e2 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3da:	f002 ffcf 	bl	800d37c <VL53L1_set_histogram_multizone_initial_bin_config>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f82c 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b08a      	sub	sp, #40	; 0x28
 800a402:	af04      	add	r7, sp, #16
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a412:	9303      	str	r3, [sp, #12]
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f7fe fb9e 	bl	8008b68 <VL53L1_preset_mode_standard_ranging>
 800a42c:	4603      	mov	r3, r0
 800a42e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	2201      	movs	r2, #1
 800a43c:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a43e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	79db      	ldrb	r3, [r3, #7]
 800a48c:	b29b      	uxth	r3, r3
				<< 8)
 800a48e:	021b      	lsls	r3, r3, #8
 800a490:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	7a1b      	ldrb	r3, [r3, #8]
 800a496:	b29b      	uxth	r3, r3
 800a498:	4413      	add	r3, r2
 800a49a:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	b29b      	uxth	r3, r3
				<< 8)
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	789b      	ldrb	r3, [r3, #2]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4413      	add	r3, r2
 800a4e2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	78db      	ldrb	r3, [r3, #3]
 800a4ec:	b29b      	uxth	r3, r3
				<< 8)
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	791b      	ldrb	r3, [r3, #4]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	79db      	ldrb	r3, [r3, #7]
 800a574:	b29b      	uxth	r3, r3
				<< 8)
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	7a1b      	ldrb	r3, [r3, #8]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	4413      	add	r3, r2
 800a582:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	b29b      	uxth	r3, r3
				<< 8)
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	789b      	ldrb	r3, [r3, #2]
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	78db      	ldrb	r3, [r3, #3]
 800a5cc:	b29b      	uxth	r3, r3
				<< 8)
 800a5ce:	021b      	lsls	r3, r3, #8
 800a5d0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	791b      	ldrb	r3, [r3, #4]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08c      	sub	sp, #48	; 0x30
 800a600:	af06      	add	r7, sp, #24
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	9304      	str	r3, [sp, #16]
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7fe fe64 	bl	80092f6 <VL53L1_preset_mode_histogram_ranging>
 800a62e:	4603      	mov	r3, r0
 800a630:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fefd 	bl	800a44a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a650:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3318      	adds	r3, #24
 800a668:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2230      	movs	r2, #48	; 0x30
 800a67e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a688:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	332c      	adds	r3, #44	; 0x2c
 800a6ac:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	735a      	strb	r2, [r3, #13]

}
 800a6ea:	bf00      	nop
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3318      	adds	r3, #24
 800a708:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	332c      	adds	r3, #44	; 0x2c
 800a70e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d115      	bne.n	800a74a <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2203      	movs	r2, #3
 800a722:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2202      	movs	r2, #2
 800a73a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	735a      	strb	r2, [r3, #13]
 800a748:	e0be      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	7a1b      	ldrb	r3, [r3, #8]
 800a74e:	2bff      	cmp	r3, #255	; 0xff
 800a750:	d103      	bne.n	800a75a <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2280      	movs	r2, #128	; 0x80
 800a756:	721a      	strb	r2, [r3, #8]
 800a758:	e005      	b.n	800a766 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	7a1b      	ldrb	r3, [r3, #8]
 800a75e:	3301      	adds	r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	7a19      	ldrb	r1, [r3, #8]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f103 0209 	add.w	r2, r3, #9
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	330a      	adds	r3, #10
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f002 fdc2 	bl	800d2fe <VL53L1_update_internal_stream_counters>
 800a77a:	4603      	mov	r3, r0
 800a77c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	7adb      	ldrb	r3, [r3, #11]
 800a782:	f083 0302 	eor.w	r3, r3, #2
 800a786:	b2da      	uxtb	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	79db      	ldrb	r3, [r3, #7]
 800a790:	3b03      	subs	r3, #3
 800a792:	2b05      	cmp	r3, #5
 800a794:	f200 8082 	bhi.w	800a89c <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7b9 	.word	0x0800a7b9
 800a7a4:	0800a89d 	.word	0x0800a89d
 800a7a8:	0800a89d 	.word	0x0800a89d
 800a7ac:	0800a80b 	.word	0x0800a80b
 800a7b0:	0800a841 	.word	0x0800a841
 800a7b4:	0800a86b 	.word	0x0800a86b

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	dd03      	ble.n	800a7ce <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2206      	movs	r2, #6
 800a7ca:	71da      	strb	r2, [r3, #7]
 800a7cc:	e00d      	b.n	800a7ea <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d303      	bcc.n	800a7e4 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2208      	movs	r2, #8
 800a7e0:	71da      	strb	r2, [r3, #7]
 800a7e2:	e002      	b.n	800a7ea <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2207      	movs	r2, #7
 800a7e8:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	735a      	strb	r2, [r3, #13]

			break;
 800a808:	e05e      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d303      	bcc.n	800a838 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2208      	movs	r2, #8
 800a834:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a836:	e047      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2207      	movs	r2, #7
 800a83c:	71da      	strb	r2, [r3, #7]
			break;
 800a83e:	e043      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	7b5b      	ldrb	r3, [r3, #13]
 800a844:	3301      	adds	r3, #1
 800a846:	b2da      	uxtb	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a856:	429a      	cmp	r2, r3
 800a858:	d303      	bcc.n	800a862 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2208      	movs	r2, #8
 800a85e:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a860:	e032      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2207      	movs	r2, #7
 800a866:	71da      	strb	r2, [r3, #7]
			break;
 800a868:	e02e      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	7b1b      	ldrb	r3, [r3, #12]
 800a874:	f083 0301 	eor.w	r3, r3, #1
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a888:	429a      	cmp	r2, r3
 800a88a:	d303      	bcc.n	800a894 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2208      	movs	r2, #8
 800a890:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a892:	e019      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2207      	movs	r2, #7
 800a898:	71da      	strb	r2, [r3, #7]
			break;
 800a89a:	e015      	b.n	800a8c8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2203      	movs	r2, #3
 800a8a0:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	735a      	strb	r2, [r3, #13]
			break;
 800a8c6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a8c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b08d      	sub	sp, #52	; 0x34
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3318      	adds	r3, #24
 800a8e6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	332c      	adds	r3, #44	; 0x2c
 800a8f6:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a8fe:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a906:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a90e:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a92e:	f003 031f 	and.w	r3, r3, #31
 800a932:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	78db      	ldrb	r3, [r3, #3]
 800a938:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a940:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a944:	2b00      	cmp	r3, #0
 800a946:	bf14      	ite	ne
 800a948:	2301      	movne	r3, #1
 800a94a:	2300      	moveq	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a94e:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a954:	111b      	asrs	r3, r3, #4
 800a956:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a960:	7c7b      	ldrb	r3, [r7, #17]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d008      	beq.n	800a978 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a96c:	111b      	asrs	r3, r3, #4
 800a96e:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a97e:	f003 0320 	and.w	r3, r3, #32
 800a982:	2b00      	cmp	r3, #0
 800a984:	d04e      	beq.n	800aa24 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	79db      	ldrb	r3, [r3, #7]
 800a98a:	2b06      	cmp	r3, #6
 800a98c:	d109      	bne.n	800a9a2 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a98e:	7c7b      	ldrb	r3, [r7, #17]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d14a      	bne.n	800aa2a <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a994:	7cfb      	ldrb	r3, [r7, #19]
 800a996:	2b12      	cmp	r3, #18
 800a998:	d047      	beq.n	800aa2a <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a99a:	23ef      	movs	r3, #239	; 0xef
 800a99c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9a0:	e043      	b.n	800aa2a <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	7a1b      	ldrb	r3, [r3, #8]
 800a9a6:	7cba      	ldrb	r2, [r7, #18]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d002      	beq.n	800a9b2 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a9ac:	23ee      	movs	r3, #238	; 0xee
 800a9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	7adb      	ldrb	r3, [r3, #11]
 800a9b6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d002      	beq.n	800a9c4 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a9be:	23ed      	movs	r3, #237	; 0xed
 800a9c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	7b5b      	ldrb	r3, [r3, #13]
 800a9c8:	4619      	mov	r1, r3
		expected_stream_count =
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	440b      	add	r3, r1
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	4413      	add	r3, r2
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	7b5b      	ldrb	r3, [r3, #13]
 800a9e0:	4619      	mov	r1, r3
		expected_gph_id =
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	3303      	adds	r3, #3
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a9f4:	7c3a      	ldrb	r2, [r7, #16]
 800a9f6:	7cbb      	ldrb	r3, [r7, #18]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d00a      	beq.n	800aa12 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d102      	bne.n	800aa0c <VL53L1_check_ll_driver_rd_state+0x138>
 800aa06:	7cbb      	ldrb	r3, [r7, #18]
 800aa08:	2bff      	cmp	r3, #255	; 0xff
 800aa0a:	d002      	beq.n	800aa12 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800aa0c:	23ec      	movs	r3, #236	; 0xec
 800aa0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800aa12:	7bfa      	ldrb	r2, [r7, #15]
 800aa14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d005      	beq.n	800aa28 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800aa1c:	23eb      	movs	r3, #235	; 0xeb
 800aa1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa22:	e002      	b.n	800aa2a <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800aa28:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800aa2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3734      	adds	r7, #52	; 0x34
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b088      	sub	sp, #32
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3318      	adds	r3, #24
 800aa4a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800aa52:	3308      	adds	r3, #8
 800aa54:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	332c      	adds	r3, #44	; 0x2c
 800aa5a:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800aa62:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800aa6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d11b      	bne.n	800aaaa <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	2203      	movs	r2, #3
 800aa76:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2200      	movs	r2, #0
 800aa82:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	2200      	movs	r2, #0
 800aa88:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	2200      	movs	r2, #0
 800aa94:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	773b      	strb	r3, [r7, #28]
 800aaa8:	e0b1      	b.n	800ac0e <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	791b      	ldrb	r3, [r3, #4]
 800aaae:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	799b      	ldrb	r3, [r3, #6]
 800aab4:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2bff      	cmp	r3, #255	; 0xff
 800aac2:	d103      	bne.n	800aacc <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	2280      	movs	r2, #128	; 0x80
 800aac8:	705a      	strb	r2, [r3, #1]
 800aaca:	e005      	b.n	800aad8 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	785b      	ldrb	r3, [r3, #1]
 800aad0:	3301      	adds	r3, #1
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	7859      	ldrb	r1, [r3, #1]
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	1c9a      	adds	r2, r3, #2
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	3303      	adds	r3, #3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f002 fc0a 	bl	800d2fe <VL53L1_update_internal_stream_counters>
 800aaea:	4603      	mov	r3, r0
 800aaec:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	791b      	ldrb	r3, [r3, #4]
 800aaf2:	f083 0302 	eor.w	r3, r3, #2
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b05      	cmp	r3, #5
 800ab02:	d053      	beq.n	800abac <VL53L1_update_ll_driver_cfg_state+0x172>
 800ab04:	2b05      	cmp	r3, #5
 800ab06:	dc69      	bgt.n	800abdc <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800ab08:	2b03      	cmp	r3, #3
 800ab0a:	d002      	beq.n	800ab12 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	d02d      	beq.n	800ab6c <VL53L1_update_ll_driver_cfg_state+0x132>
 800ab10:	e064      	b.n	800abdc <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2201      	movs	r2, #1
 800ab16:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d909      	bls.n	800ab3a <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	795b      	ldrb	r3, [r3, #5]
 800ab30:	f083 0301 	eor.w	r3, r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2200      	movs	r2, #0
 800ab54:	70da      	strb	r2, [r3, #3]
 800ab56:	e005      	b.n	800ab64 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2201      	movs	r2, #1
 800ab62:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2204      	movs	r2, #4
 800ab68:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800ab6a:	e050      	b.n	800ac0e <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	799b      	ldrb	r3, [r3, #6]
 800ab70:	3301      	adds	r3, #1
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d940      	bls.n	800ac08 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	795b      	ldrb	r3, [r3, #5]
 800ab90:	f083 0301 	eor.w	r3, r3, #1
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d031      	beq.n	800ac08 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2205      	movs	r2, #5
 800aba8:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800abaa:	e02d      	b.n	800ac08 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	799b      	ldrb	r3, [r3, #6]
 800abb0:	3301      	adds	r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d922      	bls.n	800ac0c <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2200      	movs	r2, #0
 800abca:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	795b      	ldrb	r3, [r3, #5]
 800abd0:	f083 0301 	eor.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	715a      	strb	r2, [r3, #5]
			}
			break;
 800abda:	e017      	b.n	800ac0c <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2203      	movs	r2, #3
 800abe0:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2200      	movs	r2, #0
 800abe6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2200      	movs	r2, #0
 800abec:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2200      	movs	r2, #0
 800abf2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2202      	movs	r2, #2
 800abf8:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2200      	movs	r2, #0
 800abfe:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2200      	movs	r2, #0
 800ac04:	719a      	strb	r2, [r3, #6]
			break;
 800ac06:	e002      	b.n	800ac0e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ac08:	bf00      	nop
 800ac0a:	e000      	b.n	800ac0e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800ac0c:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d11d      	bne.n	800ac54 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ac18:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800ac1a:	7f3b      	ldrb	r3, [r7, #28]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b2d8      	uxtb	r0, r3
 800ac20:	68f9      	ldr	r1, [r7, #12]
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	440b      	add	r3, r1
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	4602      	mov	r2, r0
 800ac30:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	7b5b      	ldrb	r3, [r3, #13]
 800ac36:	4619      	mov	r1, r3
 800ac38:	7f7b      	ldrb	r3, [r7, #29]
 800ac3a:	f083 0302 	eor.w	r3, r3, #2
 800ac3e:	b2d8      	uxtb	r0, r3
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	460b      	mov	r3, r1
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	440b      	add	r3, r1
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4413      	add	r3, r2
 800ac4c:	3303      	adds	r3, #3
 800ac4e:	4602      	mov	r2, r0
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	e013      	b.n	800ac7c <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ac54:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ac56:	68f9      	ldr	r1, [r7, #12]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	440b      	add	r3, r1
 800ac62:	3302      	adds	r3, #2
 800ac64:	7f3a      	ldrb	r2, [r7, #28]
 800ac66:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800ac68:	7fba      	ldrb	r2, [r7, #30]
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	440b      	add	r3, r1
 800ac76:	3303      	adds	r3, #3
 800ac78:	7f7a      	ldrb	r2, [r7, #29]
 800ac7a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800ac7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3720      	adds	r7, #32
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7c1a      	ldrb	r2, [r3, #16]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	7c52      	ldrb	r2, [r2, #17]
 800aca2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	3302      	adds	r3, #2
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	7c92      	ldrb	r2, [r2, #18]
 800acac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	3303      	adds	r3, #3
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	7cd2      	ldrb	r2, [r2, #19]
 800acb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	3304      	adds	r3, #4
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7d12      	ldrb	r2, [r2, #20]
 800acc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	3305      	adds	r3, #5
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	7d52      	ldrb	r2, [r2, #21]
 800acca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	3306      	adds	r3, #6
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7d92      	ldrb	r2, [r2, #22]
 800acd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	3307      	adds	r3, #7
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	7dd2      	ldrb	r2, [r2, #23]
 800acde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	3308      	adds	r3, #8
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7e12      	ldrb	r2, [r2, #24]
 800ace8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	3309      	adds	r3, #9
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	7e52      	ldrb	r2, [r2, #25]
 800acf2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	330a      	adds	r3, #10
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	7e92      	ldrb	r2, [r2, #26]
 800acfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	330b      	adds	r3, #11
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	7ed2      	ldrb	r2, [r2, #27]
 800ad06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	330c      	adds	r3, #12
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7f12      	ldrb	r2, [r2, #28]
 800ad10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	330d      	adds	r3, #13
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	7f52      	ldrb	r2, [r2, #29]
 800ad1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	330e      	adds	r3, #14
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	7f92      	ldrb	r2, [r2, #30]
 800ad24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	330f      	adds	r3, #15
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	7fd2      	ldrb	r2, [r2, #31]
 800ad2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	3310      	adds	r3, #16
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ad3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	3311      	adds	r3, #17
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ad46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	3312      	adds	r3, #18
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ad52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	3313      	adds	r3, #19
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ad5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	3314      	adds	r3, #20
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ad6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	3315      	adds	r3, #21
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ad76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	3316      	adds	r3, #22
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ad82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	3317      	adds	r3, #23
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ad8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	3318      	adds	r3, #24
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ad9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3319      	adds	r3, #25
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ada6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	331a      	adds	r3, #26
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800adb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	331b      	adds	r3, #27
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800adbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	331c      	adds	r3, #28
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800adca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	331d      	adds	r3, #29
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800add6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	331e      	adds	r3, #30
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800ade2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	331f      	adds	r3, #31
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800adee:	701a      	strb	r2, [r3, #0]
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	22ff      	movs	r2, #255	; 0xff
 800ae08:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	22ff      	movs	r2, #255	; 0xff
 800ae0e:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	22ff      	movs	r2, #255	; 0xff
 800ae14:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	22ff      	movs	r2, #255	; 0xff
 800ae1a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae22:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae2a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae32:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae3a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae42:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae4a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae52:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae5a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae62:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae6a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae72:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae7a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae82:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae92:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae9a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aea2:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeaa:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeb2:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	22ff      	movs	r2, #255	; 0xff
 800aeb8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	4603      	mov	r3, r0
 800aed0:	6039      	str	r1, [r7, #0]
 800aed2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2210      	movs	r2, #16
 800aedc:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]
 800aee8:	e017      	b.n	800af1a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800aeea:	7bfa      	ldrb	r2, [r7, #15]
 800aeec:	4613      	mov	r3, r2
 800aeee:	011b      	lsls	r3, r3, #4
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	4413      	add	r3, r2
 800aef8:	3304      	adds	r3, #4
 800aefa:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2203      	movs	r2, #3
 800af00:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2203      	movs	r2, #3
 800af06:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	2204      	movs	r2, #4
 800af0c:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2200      	movs	r2, #0
 800af12:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	3301      	adds	r3, #1
 800af18:	73fb      	strb	r3, [r7, #15]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	7bfa      	ldrb	r2, [r7, #15]
 800af20:	429a      	cmp	r2, r3
 800af22:	d3e2      	bcc.n	800aeea <V53L1_init_zone_results_structure+0x22>
	}
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800af32:	b480      	push	{r7}
 800af34:	b087      	sub	sp, #28
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800af40:	3308      	adds	r3, #8
 800af42:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800af48:	2310      	movs	r3, #16
 800af4a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800af52:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800af54:	2300      	movs	r3, #0
 800af56:	75fb      	strb	r3, [r7, #23]
 800af58:	e016      	b.n	800af88 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800af5a:	7dfa      	ldrb	r2, [r7, #23]
 800af5c:	68b9      	ldr	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	440b      	add	r3, r1
 800af68:	3304      	adds	r3, #4
 800af6a:	2201      	movs	r2, #1
 800af6c:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800af6e:	7dfa      	ldrb	r2, [r7, #23]
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	4413      	add	r3, r2
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	440b      	add	r3, r1
 800af7c:	3306      	adds	r3, #6
 800af7e:	2200      	movs	r2, #0
 800af80:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	3301      	adds	r3, #1
 800af86:	75fb      	strb	r3, [r7, #23]
 800af88:	7dfa      	ldrb	r2, [r7, #23]
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d3e4      	bcc.n	800af5a <V53L1_init_zone_dss_configs+0x28>
	}
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800af9e:	b490      	push	{r4, r7}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	4604      	mov	r4, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	4611      	mov	r1, r2
 800afaa:	461a      	mov	r2, r3
 800afac:	4623      	mov	r3, r4
 800afae:	71fb      	strb	r3, [r7, #7]
 800afb0:	4603      	mov	r3, r0
 800afb2:	71bb      	strb	r3, [r7, #6]
 800afb4:	460b      	mov	r3, r1
 800afb6:	717b      	strb	r3, [r7, #5]
 800afb8:	4613      	mov	r3, r2
 800afba:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800afbc:	79bb      	ldrb	r3, [r7, #6]
 800afbe:	011b      	lsls	r3, r3, #4
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	4413      	add	r3, r2
 800afc6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800afcc:	793b      	ldrb	r3, [r7, #4]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	797b      	ldrb	r3, [r7, #5]
 800afd4:	4413      	add	r3, r2
 800afd6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800afdc:	7d3b      	ldrb	r3, [r7, #20]
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	b2da      	uxtb	r2, r3
 800afe2:	7c3b      	ldrb	r3, [r7, #16]
 800afe4:	4413      	add	r3, r2
 800afe6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800afec:	7f3b      	ldrb	r3, [r7, #28]
 800afee:	011b      	lsls	r3, r3, #4
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	7e3b      	ldrb	r3, [r7, #24]
 800aff4:	4413      	add	r3, r2
 800aff6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800affc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	b2da      	uxtb	r2, r3
 800b004:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b008:	4413      	add	r3, r2
 800b00a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800b010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	b2da      	uxtb	r2, r3
 800b018:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b01c:	4413      	add	r3, r2
 800b01e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b04a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b04c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	b2da      	uxtb	r2, r3
 800b054:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b058:	4413      	add	r3, r2
 800b05a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b066:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	2200      	movs	r2, #0
 800b06c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0a4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0ac:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	701a      	strb	r2, [r3, #0]

}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bc90      	pop	{r4, r7}
 800b0bc:	4770      	bx	lr

0800b0be <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800b0be:	b490      	push	{r4, r7}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4623      	mov	r3, r4
 800b0ce:	71fb      	strb	r3, [r7, #7]
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	71bb      	strb	r3, [r7, #6]
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	717b      	strb	r3, [r7, #5]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800b0dc:	79bb      	ldrb	r3, [r7, #6]
 800b0de:	011b      	lsls	r3, r3, #4
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800b0ec:	793b      	ldrb	r3, [r7, #4]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	797b      	ldrb	r3, [r7, #5]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800b0fc:	7d3b      	ldrb	r3, [r7, #20]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	b2da      	uxtb	r2, r3
 800b102:	7c3b      	ldrb	r3, [r7, #16]
 800b104:	4413      	add	r3, r2
 800b106:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b116:	789a      	ldrb	r2, [r3, #2]
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	78da      	ldrb	r2, [r3, #3]
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	789a      	ldrb	r2, [r3, #2]
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	78da      	ldrb	r2, [r3, #3]
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	791a      	ldrb	r2, [r3, #4]
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b14a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b14c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b150:	011b      	lsls	r3, r3, #4
 800b152:	b2da      	uxtb	r2, r3
 800b154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b158:	4413      	add	r3, r2
 800b15a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b166:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16a:	2200      	movs	r2, #0
 800b16c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800b16e:	7f3b      	ldrb	r3, [r7, #28]
 800b170:	011b      	lsls	r3, r3, #4
 800b172:	b2da      	uxtb	r2, r3
 800b174:	7e3b      	ldrb	r3, [r7, #24]
 800b176:	4413      	add	r3, r2
 800b178:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800b17e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b182:	011b      	lsls	r3, r3, #4
 800b184:	b2da      	uxtb	r2, r3
 800b186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b18a:	4413      	add	r3, r2
 800b18c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800b192:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b19e:	4413      	add	r3, r2
 800b1a0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	7bda      	ldrb	r2, [r3, #15]
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	7c1a      	ldrb	r2, [r3, #16]
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b8:	7c5a      	ldrb	r2, [r3, #17]
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1c4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1cc:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc90      	pop	{r4, r7}
 800b1dc:	4770      	bx	lr

0800b1de <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b087      	sub	sp, #28
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	220c      	movs	r2, #12
 800b206:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b208:	897b      	ldrh	r3, [r7, #10]
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b23e:	2300      	movs	r3, #0
 800b240:	82fb      	strh	r3, [r7, #22]
 800b242:	e015      	b.n	800b270 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b244:	8afa      	ldrh	r2, [r7, #22]
 800b246:	897b      	ldrh	r3, [r7, #10]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d207      	bcs.n	800b25c <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b24c:	8afb      	ldrh	r3, [r7, #22]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	3302      	adds	r3, #2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	605a      	str	r2, [r3, #4]
 800b25a:	e006      	b.n	800b26a <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b25c:	8afb      	ldrh	r3, [r7, #22]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	3302      	adds	r3, #2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	2200      	movs	r2, #0
 800b268:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b26a:	8afb      	ldrh	r3, [r7, #22]
 800b26c:	3301      	adds	r3, #1
 800b26e:	82fb      	strh	r3, [r7, #22]
 800b270:	8afb      	ldrh	r3, [r7, #22]
 800b272:	2b0b      	cmp	r3, #11
 800b274:	d9e6      	bls.n	800b244 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b276:	bf00      	nop
 800b278:	bf00      	nop
 800b27a:	371c      	adds	r7, #28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	603a      	str	r2, [r7, #0]
 800b28e:	80fb      	strh	r3, [r7, #6]
 800b290:	460b      	mov	r3, r1
 800b292:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b29c:	88fb      	ldrh	r3, [r7, #6]
 800b29e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	81fb      	strh	r3, [r7, #14]
 800b2a4:	e00e      	b.n	800b2c4 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b2a6:	88ba      	ldrh	r2, [r7, #4]
 800b2a8:	89fb      	ldrh	r3, [r7, #14]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	89ba      	ldrh	r2, [r7, #12]
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b2b8:	89bb      	ldrh	r3, [r7, #12]
 800b2ba:	0a1b      	lsrs	r3, r3, #8
 800b2bc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b2be:	89fb      	ldrh	r3, [r7, #14]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	81fb      	strh	r3, [r7, #14]
 800b2c4:	89fa      	ldrh	r2, [r7, #14]
 800b2c6:	88bb      	ldrh	r3, [r7, #4]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d3ec      	bcc.n	800b2a6 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b085      	sub	sp, #20
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	6039      	str	r1, [r7, #0]
 800b2e4:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b2ea:	e00a      	b.n	800b302 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b2ec:	89fb      	ldrh	r3, [r7, #14]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	b21a      	sxth	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	1c59      	adds	r1, r3, #1
 800b2f6:	6039      	str	r1, [r7, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	b21b      	sxth	r3, r3
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b302:	88fb      	ldrh	r3, [r7, #6]
 800b304:	1e5a      	subs	r2, r3, #1
 800b306:	80fa      	strh	r2, [r7, #6]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1ef      	bne.n	800b2ec <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b30c:	89fb      	ldrh	r3, [r7, #14]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	4603      	mov	r3, r0
 800b322:	603a      	str	r2, [r7, #0]
 800b324:	80fb      	strh	r3, [r7, #6]
 800b326:	460b      	mov	r3, r1
 800b328:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b336:	2300      	movs	r3, #0
 800b338:	81fb      	strh	r3, [r7, #14]
 800b33a:	e00f      	b.n	800b35c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b33c:	88ba      	ldrh	r2, [r7, #4]
 800b33e:	89fb      	ldrh	r3, [r7, #14]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	3b01      	subs	r3, #1
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	4413      	add	r3, r2
 800b348:	89ba      	ldrh	r2, [r7, #12]
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b34e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b352:	121b      	asrs	r3, r3, #8
 800b354:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b356:	89fb      	ldrh	r3, [r7, #14]
 800b358:	3301      	adds	r3, #1
 800b35a:	81fb      	strh	r3, [r7, #14]
 800b35c:	89fa      	ldrh	r2, [r7, #14]
 800b35e:	88bb      	ldrh	r3, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	d3eb      	bcc.n	800b33c <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b364:	bf00      	nop
 800b366:	bf00      	nop
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	4603      	mov	r3, r0
 800b37a:	6039      	str	r1, [r7, #0]
 800b37c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b37e:	2300      	movs	r3, #0
 800b380:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	b25b      	sxtb	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da0e      	bge.n	800b3aa <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b390:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b392:	e00a      	b.n	800b3aa <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b394:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b398:	021b      	lsls	r3, r3, #8
 800b39a:	b21a      	sxth	r2, r3
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	1c59      	adds	r1, r3, #1
 800b3a0:	6039      	str	r1, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	b21b      	sxth	r3, r3
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	1e5a      	subs	r2, r3, #1
 800b3ae:	80fa      	strh	r2, [r7, #6]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1ef      	bne.n	800b394 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b3b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b3de:	2300      	movs	r3, #0
 800b3e0:	82fb      	strh	r3, [r7, #22]
 800b3e2:	e00e      	b.n	800b402 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b3e4:	897a      	ldrh	r2, [r7, #10]
 800b3e6:	8afb      	ldrh	r3, [r7, #22]
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b3fc:	8afb      	ldrh	r3, [r7, #22]
 800b3fe:	3301      	adds	r3, #1
 800b400:	82fb      	strh	r3, [r7, #22]
 800b402:	8afa      	ldrh	r2, [r7, #22]
 800b404:	897b      	ldrh	r3, [r7, #10]
 800b406:	429a      	cmp	r2, r3
 800b408:	d3ec      	bcc.n	800b3e4 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	371c      	adds	r7, #28
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	6039      	str	r1, [r7, #0]
 800b422:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b428:	e007      	b.n	800b43a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	021a      	lsls	r2, r3, #8
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	1c59      	adds	r1, r3, #1
 800b432:	6039      	str	r1, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	4313      	orrs	r3, r2
 800b438:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b43a:	88fb      	ldrh	r3, [r7, #6]
 800b43c:	1e5a      	subs	r2, r3, #1
 800b43e:	80fa      	strh	r2, [r7, #6]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1f2      	bne.n	800b42a <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b444:	68fb      	ldr	r3, [r7, #12]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	4603      	mov	r3, r0
 800b45a:	6039      	str	r1, [r7, #0]
 800b45c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	b25b      	sxtb	r3, r3
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da0b      	bge.n	800b484 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b46c:	f04f 33ff 	mov.w	r3, #4294967295
 800b470:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b472:	e007      	b.n	800b484 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	021a      	lsls	r2, r3, #8
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	1c59      	adds	r1, r3, #1
 800b47c:	6039      	str	r1, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b484:	88fb      	ldrh	r3, [r7, #6]
 800b486:	1e5a      	subs	r2, r3, #1
 800b488:	80fa      	strh	r2, [r7, #6]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f2      	bne.n	800b474 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b48e:	68fb      	ldr	r3, [r7, #12]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3714      	adds	r7, #20
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d107      	bne.n	800b4c4 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	2127      	movs	r1, #39	; 0x27
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f009 f9ce 	bl	801485c <VL53L1_WrByte>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	78fa      	ldrb	r2, [r7, #3]
 800b4ea:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	2185      	movs	r1, #133	; 0x85
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f009 f9af 	bl	801485c <VL53L1_WrByte>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b51a:	2101      	movs	r1, #1
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ffd7 	bl	800b4d0 <VL53L1_set_firmware_enable_register>
 800b522:	4603      	mov	r3, r0
 800b524:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b53e:	2100      	movs	r1, #0
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff ffc5 	bl	800b4d0 <VL53L1_set_firmware_enable_register>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b562:	2300      	movs	r3, #0
 800b564:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3318      	adds	r3, #24
 800b56a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b57a:	461a      	mov	r2, r3
 800b57c:	2183      	movs	r1, #131	; 0x83
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f009 f96c 	bl	801485c <VL53L1_WrByte>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b588:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff ffd7 	bl	800b556 <VL53L1_set_powerforce_register>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff ffc5 	bl	800b556 <VL53L1_set_powerforce_register>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3318      	adds	r3, #24
 800b5ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	2186      	movs	r1, #134	; 0x86
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f009 f92b 	bl	801485c <VL53L1_WrByte>
 800b606:	4603      	mov	r3, r0
 800b608:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b086      	sub	sp, #24
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	4603      	mov	r3, r0
 800b61e:	460a      	mov	r2, r1
 800b620:	80fb      	strh	r3, [r7, #6]
 800b622:	4613      	mov	r3, r2
 800b624:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b632:	88fb      	ldrh	r3, [r7, #6]
 800b634:	4618      	mov	r0, r3
 800b636:	f002 ffeb 	bl	800e610 <VL53L1_calc_pll_period_us>
 800b63a:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b63c:	797b      	ldrb	r3, [r7, #5]
 800b63e:	4618      	mov	r0, r3
 800b640:	f003 fbd6 	bl	800edf0 <VL53L1_decode_vcsel_period>
 800b644:	4603      	mov	r3, r0
 800b646:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4613      	mov	r3, r2
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	4413      	add	r3, r2
 800b650:	021b      	lsls	r3, r3, #8
 800b652:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	099b      	lsrs	r3, r3, #6
 800b658:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b65a:	7cfa      	ldrb	r2, [r7, #19]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	fb02 f303 	mul.w	r3, r2, r3
 800b662:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	099b      	lsrs	r3, r3, #6
 800b668:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b66a:	68fb      	ldr	r3, [r7, #12]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b674:	b480      	push	{r7}
 800b676:	b089      	sub	sp, #36	; 0x24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	4608      	mov	r0, r1
 800b67e:	4611      	mov	r1, r2
 800b680:	461a      	mov	r2, r3
 800b682:	4603      	mov	r3, r0
 800b684:	817b      	strh	r3, [r7, #10]
 800b686:	460b      	mov	r3, r1
 800b688:	813b      	strh	r3, [r7, #8]
 800b68a:	4613      	mov	r3, r2
 800b68c:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b692:	2300      	movs	r3, #0
 800b694:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	4a23      	ldr	r2, [pc, #140]	; (800b734 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b6a8:	fb82 1203 	smull	r1, r2, r2, r3
 800b6ac:	1192      	asrs	r2, r2, #6
 800b6ae:	17db      	asrs	r3, r3, #31
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b6b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	da03      	bge.n	800b6c4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b6bc:	897b      	ldrh	r3, [r7, #10]
 800b6be:	425b      	negs	r3, r3
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b6c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	da03      	bge.n	800b6d4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b6cc:	893b      	ldrh	r3, [r7, #8]
 800b6ce:	425b      	negs	r3, r3
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b6d4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b6d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b6dc:	4413      	add	r3, r2
 800b6de:	015b      	lsls	r3, r3, #5
 800b6e0:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	4a13      	ldr	r2, [pc, #76]	; (800b734 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b6e6:	fb82 1203 	smull	r1, r2, r2, r3
 800b6ea:	1192      	asrs	r2, r2, #6
 800b6ec:	17db      	asrs	r3, r3, #31
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b6fa:	79fa      	ldrb	r2, [r7, #7]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	fb02 f303 	mul.w	r3, r2, r3
 800b702:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	3310      	adds	r3, #16
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da00      	bge.n	800b70e <VL53L1_calc_range_ignore_threshold+0x9a>
 800b70c:	331f      	adds	r3, #31
 800b70e:	115b      	asrs	r3, r3, #5
 800b710:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b718:	db03      	blt.n	800b722 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b71a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b71e:	83fb      	strh	r3, [r7, #30]
 800b720:	e001      	b.n	800b726 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b726:	8bfb      	ldrh	r3, [r7, #30]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3724      	adds	r7, #36	; 0x24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	10624dd3 	.word	0x10624dd3

0800b738 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	60fb      	str	r3, [r7, #12]
 800b750:	e008      	b.n	800b764 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	031a      	lsls	r2, r3, #12
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	085b      	lsrs	r3, r3, #1
 800b75a:	441a      	add	r2, r3
		timeout_mclks =
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b762:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b764:	68fb      	ldr	r3, [r7, #12]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff ffd6 	bl	800b738 <VL53L1_calc_timeout_mclks>
 800b78c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f887 	bl	800b8a2 <VL53L1_encode_timeout>
 800b794:	4603      	mov	r3, r0
 800b796:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b798:	897b      	ldrh	r3, [r7, #10]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b7a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b7b2:	f04f 0000 	mov.w	r0, #0
 800b7b6:	f04f 0100 	mov.w	r1, #0
 800b7ba:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b7be:	6879      	ldr	r1, [r7, #4]
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	4688      	mov	r8, r1
 800b7c4:	4681      	mov	r9, r0
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	fb04 f009 	mul.w	r0, r4, r9
 800b7d2:	fb08 f105 	mul.w	r1, r8, r5
 800b7d6:	4401      	add	r1, r0
 800b7d8:	fba8 2304 	umull	r2, r3, r8, r4
 800b7dc:	4419      	add	r1, r3
 800b7de:	460b      	mov	r3, r1
 800b7e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b7e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b7e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ec:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b7f0:	f143 0b00 	adc.w	fp, r3, #0
 800b7f4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b7f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7fc:	f04f 0200 	mov.w	r2, #0
 800b800:	f04f 0300 	mov.w	r3, #0
 800b804:	0b02      	lsrs	r2, r0, #12
 800b806:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b80a:	0b0b      	lsrs	r3, r1, #12
 800b80c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b814:	697b      	ldr	r3, [r7, #20]
}
 800b816:	4618      	mov	r0, r3
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b820:	4770      	bx	lr
	...

0800b824 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b838:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b83c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b83e:	4413      	add	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	da02      	bge.n	800b84e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	60fb      	str	r3, [r7, #12]
 800b84c:	e005      	b.n	800b85a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b854:	db01      	blt.n	800b85a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b856:	4b05      	ldr	r3, [pc, #20]	; (800b86c <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b858:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b85e:	68bb      	ldr	r3, [r7, #8]

}
 800b860:	4618      	mov	r0, r3
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	0003ffff 	.word	0x0003ffff

0800b870 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	6039      	str	r1, [r7, #0]
 800b87a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f837 	bl	800b8fa <VL53L1_decode_timeout>
 800b88c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff ff86 	bl	800b7a2 <VL53L1_calc_timeout_us>
 800b896:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b898:	68bb      	ldr	r3, [r7, #8]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b087      	sub	sp, #28
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d017      	beq.n	800b8ec <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b8c2:	e005      	b.n	800b8d0 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	085b      	lsrs	r3, r3, #1
 800b8c8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1f4      	bne.n	800b8c4 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b8da:	89fb      	ldrh	r3, [r7, #14]
 800b8dc:	021b      	lsls	r3, r3, #8
 800b8de:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b8e8:	4413      	add	r3, r2
 800b8ea:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b8ec:	8afb      	ldrh	r3, [r7, #22]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	371c      	adds	r7, #28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	4603      	mov	r3, r0
 800b902:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b90c:	88fa      	ldrh	r2, [r7, #6]
 800b90e:	0a12      	lsrs	r2, r2, #8
 800b910:	b292      	uxth	r2, r2
 800b912:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b918:	68fb      	ldr	r3, [r7, #12]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b088      	sub	sp, #32
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
 800b932:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b934:	2300      	movs	r3, #0
 800b936:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b93c:	2300      	movs	r3, #0
 800b93e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b944:	887b      	ldrh	r3, [r7, #2]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b94a:	23f1      	movs	r3, #241	; 0xf1
 800b94c:	77fb      	strb	r3, [r7, #31]
 800b94e:	e05d      	b.n	800ba0c <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	799a      	ldrb	r2, [r3, #6]
 800b954:	887b      	ldrh	r3, [r7, #2]
 800b956:	4611      	mov	r1, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fe5c 	bl	800b616 <VL53L1_calc_macro_period_us>
 800b95e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b960:	6979      	ldr	r1, [r7, #20]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7ff fee8 	bl	800b738 <VL53L1_calc_timeout_mclks>
 800b968:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2bff      	cmp	r3, #255	; 0xff
 800b96e:	d901      	bls.n	800b974 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b970:	23ff      	movs	r3, #255	; 0xff
 800b972:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b97c:	6979      	ldr	r1, [r7, #20]
 800b97e:	68b8      	ldr	r0, [r7, #8]
 800b980:	f7ff fef7 	bl	800b772 <VL53L1_calc_encoded_timeout>
 800b984:	4603      	mov	r3, r0
 800b986:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b988:	8a7b      	ldrh	r3, [r7, #18]
 800b98a:	0a1b      	lsrs	r3, r3, #8
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b994:	8a7b      	ldrh	r3, [r7, #18]
 800b996:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b99c:	6979      	ldr	r1, [r7, #20]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fee7 	bl	800b772 <VL53L1_calc_encoded_timeout>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b9a8:	8a7b      	ldrh	r3, [r7, #18]
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b9b4:	8a7b      	ldrh	r3, [r7, #18]
 800b9b6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9be:	7a5a      	ldrb	r2, [r3, #9]
 800b9c0:	887b      	ldrh	r3, [r7, #2]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7ff fe26 	bl	800b616 <VL53L1_calc_macro_period_us>
 800b9ca:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b9cc:	6979      	ldr	r1, [r7, #20]
 800b9ce:	68b8      	ldr	r0, [r7, #8]
 800b9d0:	f7ff fecf 	bl	800b772 <VL53L1_calc_encoded_timeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b9d8:	8a7b      	ldrh	r3, [r7, #18]
 800b9da:	0a1b      	lsrs	r3, r3, #8
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b9e4:	8a7b      	ldrh	r3, [r7, #18]
 800b9e6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b9ec:	6979      	ldr	r1, [r7, #20]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7ff febf 	bl	800b772 <VL53L1_calc_encoded_timeout>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b9f8:	8a7b      	ldrh	r3, [r7, #18]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800ba04:	8a7b      	ldrh	r3, [r7, #18]
 800ba06:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800ba0c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800ba18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba1c:	b09e      	sub	sp, #120	; 0x78
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6578      	str	r0, [r7, #84]	; 0x54
 800ba22:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	f04f 0300 	mov.w	r3, #0
 800ba32:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800ba36:	f04f 0200 	mov.w	r2, #0
 800ba3a:	f04f 0300 	mov.w	r3, #0
 800ba3e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800ba42:	f04f 0200 	mov.w	r2, #0
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800ba4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba50:	885b      	ldrh	r3, [r3, #2]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d103      	bne.n	800ba5e <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800ba56:	23f1      	movs	r3, #241	; 0xf1
 800ba58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ba5c:	e0d6      	b.n	800bc0c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800ba5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80d2 	beq.w	800bc0c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800ba68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba6a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 80cd 	bne.w	800bc0c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800ba72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba78:	2200      	movs	r2, #0
 800ba7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ba7c:	647a      	str	r2, [r7, #68]	; 0x44
 800ba7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ba82:	460b      	mov	r3, r1
 800ba84:	3301      	adds	r3, #1
 800ba86:	623b      	str	r3, [r7, #32]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	f143 0300 	adc.w	r3, r3, #0
 800ba8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba94:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	2200      	movs	r2, #0
 800baa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800baa4:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800baa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baa8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800baac:	4602      	mov	r2, r0
 800baae:	fb02 f203 	mul.w	r2, r2, r3
 800bab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bab4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800bab8:	fb01 f303 	mul.w	r3, r1, r3
 800babc:	441a      	add	r2, r3
 800babe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bac2:	fba3 4501 	umull	r4, r5, r3, r1
 800bac6:	1953      	adds	r3, r2, r5
 800bac8:	461d      	mov	r5, r3
 800baca:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800bace:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800bad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	2200      	movs	r2, #0
 800bad8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bada:	63fa      	str	r2, [r7, #60]	; 0x3c
 800badc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bae0:	460b      	mov	r3, r1
 800bae2:	3301      	adds	r3, #1
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	4613      	mov	r3, r2
 800bae8:	f143 0300 	adc.w	r3, r3, #0
 800baec:	61fb      	str	r3, [r7, #28]
 800baee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800baf2:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800baf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf8:	885b      	ldrh	r3, [r3, #2]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	2200      	movs	r2, #0
 800bafe:	633b      	str	r3, [r7, #48]	; 0x30
 800bb00:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800bb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800bb08:	4622      	mov	r2, r4
 800bb0a:	fb02 f203 	mul.w	r2, r2, r3
 800bb0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb10:	4629      	mov	r1, r5
 800bb12:	fb01 f303 	mul.w	r3, r1, r3
 800bb16:	441a      	add	r2, r3
 800bb18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	fba3 ab01 	umull	sl, fp, r3, r1
 800bb20:	eb02 030b 	add.w	r3, r2, fp
 800bb24:	469b      	mov	fp, r3
 800bb26:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800bb2a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800bb2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	17da      	asrs	r2, r3, #31
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb36:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800bb38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800bb3e:	4622      	mov	r2, r4
 800bb40:	fb02 f203 	mul.w	r2, r2, r3
 800bb44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb46:	4629      	mov	r1, r5
 800bb48:	fb01 f303 	mul.w	r3, r1, r3
 800bb4c:	4413      	add	r3, r2
 800bb4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb50:	4621      	mov	r1, r4
 800bb52:	fba2 8901 	umull	r8, r9, r2, r1
 800bb56:	444b      	add	r3, r9
 800bb58:	4699      	mov	r9, r3
 800bb5a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800bb5e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800bb62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bb66:	0fd9      	lsrs	r1, r3, #31
 800bb68:	2000      	movs	r0, #0
 800bb6a:	6139      	str	r1, [r7, #16]
 800bb6c:	6178      	str	r0, [r7, #20]
 800bb6e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800bb72:	4621      	mov	r1, r4
 800bb74:	1889      	adds	r1, r1, r2
 800bb76:	60b9      	str	r1, [r7, #8]
 800bb78:	4629      	mov	r1, r5
 800bb7a:	eb43 0101 	adc.w	r1, r3, r1
 800bb7e:	60f9      	str	r1, [r7, #12]
 800bb80:	f04f 0200 	mov.w	r2, #0
 800bb84:	f04f 0300 	mov.w	r3, #0
 800bb88:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	084a      	lsrs	r2, r1, #1
 800bb90:	4629      	mov	r1, r5
 800bb92:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bb96:	4629      	mov	r1, r5
 800bb98:	104b      	asrs	r3, r1, #1
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bba2:	1814      	adds	r4, r2, r0
 800bba4:	603c      	str	r4, [r7, #0]
 800bba6:	414b      	adcs	r3, r1
 800bba8:	607b      	str	r3, [r7, #4]
 800bbaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bbae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800bbb2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	d009      	beq.n	800bbce <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800bbba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bbbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bbc2:	f7f4 fb2d 	bl	8000220 <__aeabi_ldivmod>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800bbce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800bbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800bbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800bbe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800bbe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bbea:	7852      	ldrb	r2, [r2, #1]
 800bbec:	0852      	lsrs	r2, r2, #1
 800bbee:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800bbf0:	441a      	add	r2, r3
 800bbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800bbf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800bbfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc00:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800bc02:	fb93 f2f2 	sdiv	r2, r3, r2
 800bc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800bc0c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3778      	adds	r7, #120	; 0x78
 800bc14:	46bd      	mov	sp, r7
 800bc16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bc1a <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b087      	sub	sp, #28
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	3318      	adds	r3, #24
 800bc28:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800bc3c:	029b      	lsls	r3, r3, #10
 800bc3e:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800bc46:	029b      	lsls	r3, r3, #10
 800bc48:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 8095 	bne.w	800bd84 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800bc60:	091b      	lsrs	r3, r3, #4
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800bc6e:	f003 030f 	and.w	r3, r3, #15
 800bc72:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800bc7e:	091b      	lsrs	r3, r3, #4
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800bc8c:	f003 030f 	and.w	r3, r3, #15
 800bc90:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800bc9c:	091b      	lsrs	r3, r3, #4
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800bcaa:	f003 030f 	and.w	r3, r3, #15
 800bcae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	da2c      	bge.n	800bd1a <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800bcc6:	091b      	lsrs	r3, r3, #4
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800bcd4:	f003 030f 	and.w	r3, r3, #15
 800bcd8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800bce4:	091b      	lsrs	r3, r3, #4
 800bce6:	b2da      	uxtb	r2, r3
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bd02:	091b      	lsrs	r3, r3, #4
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	f340 80c2 	ble.w	800beac <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bd2e:	091b      	lsrs	r3, r3, #4
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bd3c:	f003 030f 	and.w	r3, r3, #15
 800bd40:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bd4c:	091b      	lsrs	r3, r3, #4
 800bd4e:	b2da      	uxtb	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800bd6a:	091b      	lsrs	r3, r3, #4
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	731a      	strb	r2, [r3, #12]
 800bd82:	e093      	b.n	800beac <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800bd8a:	f003 030f 	and.w	r3, r3, #15
 800bd8e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800bd9a:	f003 030f 	and.w	r3, r3, #15
 800bd9e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800bdaa:	091b      	lsrs	r3, r3, #4
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800bdc8:	091b      	lsrs	r3, r3, #4
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	da2c      	bge.n	800be46 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800be00:	f003 030f 	and.w	r3, r3, #15
 800be04:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800be10:	091b      	lsrs	r3, r3, #4
 800be12:	b2da      	uxtb	r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800be1e:	f003 030f 	and.w	r3, r3, #15
 800be22:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800be2e:	091b      	lsrs	r3, r3, #4
 800be30:	b2da      	uxtb	r2, r3
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800be3c:	f003 030f 	and.w	r3, r3, #15
 800be40:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	429a      	cmp	r2, r3
 800be50:	dd2c      	ble.n	800beac <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800be58:	091b      	lsrs	r3, r3, #4
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800be76:	091b      	lsrs	r3, r3, #4
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800be84:	f003 030f 	and.w	r3, r3, #15
 800be88:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800be94:	091b      	lsrs	r3, r3, #4
 800be96:	b2da      	uxtb	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800beac:	2300      	movs	r3, #0
 800beae:	75fb      	strb	r3, [r7, #23]
 800beb0:	e007      	b.n	800bec2 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	4413      	add	r3, r2
 800beb8:	2201      	movs	r2, #1
 800beba:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
 800bebe:	3301      	adds	r3, #1
 800bec0:	75fb      	strb	r3, [r7, #23]
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
 800bec4:	2b05      	cmp	r3, #5
 800bec6:	d9f4      	bls.n	800beb2 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bed6:	b590      	push	{r4, r7, lr}
 800bed8:	b093      	sub	sp, #76	; 0x4c
 800beda:	af04      	add	r7, sp, #16
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bee4:	2300      	movs	r3, #0
 800bee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3318      	adds	r3, #24
 800beee:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bf16:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bf20:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800bf28:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800bf2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2c:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800bf30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800bf34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf38:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800bf3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf3c:	021b      	lsls	r3, r3, #8
 800bf3e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b07      	cmp	r3, #7
 800bf46:	d006      	beq.n	800bf56 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800bf4c:	2b08      	cmp	r3, #8
 800bf4e:	d002      	beq.n	800bf56 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800bf50:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bf54:	e0ec      	b.n	800c130 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800bf56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d102      	bne.n	800bf62 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800bf5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bf60:	e0e6      	b.n	800c130 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bf62:	2300      	movs	r3, #0
 800bf64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bf68:	e0d9      	b.n	800c11e <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bf6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	214c      	movs	r1, #76	; 0x4c
 800bf72:	fb01 f303 	mul.w	r3, r1, r3
 800bf76:	4413      	add	r3, r2
 800bf78:	335e      	adds	r3, #94	; 0x5e
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b09      	cmp	r3, #9
 800bf7e:	d00b      	beq.n	800bf98 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800bf80:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	214c      	movs	r1, #76	; 0x4c
 800bf88:	fb01 f303 	mul.w	r3, r1, r3
 800bf8c:	4413      	add	r3, r2
 800bf8e:	335e      	adds	r3, #94	; 0x5e
 800bf90:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800bf92:	2b13      	cmp	r3, #19
 800bf94:	f040 80bd 	bne.w	800c112 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	795b      	ldrb	r3, [r3, #5]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d10a      	bne.n	800bfb6 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800bfa0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	214c      	movs	r1, #76	; 0x4c
 800bfa8:	fb01 f303 	mul.w	r3, r1, r3
 800bfac:	4413      	add	r3, r2
 800bfae:	335e      	adds	r3, #94	; 0x5e
 800bfb0:	2217      	movs	r2, #23
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	e009      	b.n	800bfca <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800bfb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	214c      	movs	r1, #76	; 0x4c
 800bfbe:	fb01 f303 	mul.w	r3, r1, r3
 800bfc2:	4413      	add	r3, r2
 800bfc4:	335e      	adds	r3, #94	; 0x5e
 800bfc6:	2207      	movs	r2, #7
 800bfc8:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bfd0:	e097      	b.n	800c102 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bfd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	214c      	movs	r1, #76	; 0x4c
 800bfda:	fb01 f303 	mul.w	r3, r1, r3
 800bfde:	4413      	add	r3, r2
 800bfe0:	3354      	adds	r3, #84	; 0x54
 800bfe2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800bfe4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4403      	add	r3, r0
 800bff4:	3310      	adds	r3, #16
 800bff6:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bff8:	4299      	cmp	r1, r3
 800bffa:	d915      	bls.n	800c028 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800bffc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	214c      	movs	r1, #76	; 0x4c
 800c004:	fb01 f303 	mul.w	r3, r1, r3
 800c008:	4413      	add	r3, r2
 800c00a:	3354      	adds	r3, #84	; 0x54
 800c00c:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800c00e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4403      	add	r3, r0
 800c01e:	3310      	adds	r3, #16
 800c020:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c022:	1acb      	subs	r3, r1, r3
 800c024:	867b      	strh	r3, [r7, #50]	; 0x32
 800c026:	e014      	b.n	800c052 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800c028:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	3310      	adds	r3, #16
 800c03a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800c03c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	204c      	movs	r0, #76	; 0x4c
 800c044:	fb00 f303 	mul.w	r3, r0, r3
 800c048:	440b      	add	r3, r1
 800c04a:	3354      	adds	r3, #84	; 0x54
 800c04c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800c052:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c056:	429a      	cmp	r2, r3
 800c058:	d24e      	bcs.n	800c0f8 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800c05a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d125      	bne.n	800c0ae <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800c062:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800c066:	4613      	mov	r3, r2
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	4413      	add	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	3308      	adds	r3, #8
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800c074:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800c078:	224c      	movs	r2, #76	; 0x4c
 800c07a:	fb02 f303 	mul.w	r3, r2, r3
 800c07e:	3310      	adds	r3, #16
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	4413      	add	r3, r2
 800c084:	3304      	adds	r3, #4
 800c086:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800c088:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800c08c:	f107 0217 	add.w	r2, r7, #23
 800c090:	9203      	str	r2, [sp, #12]
 800c092:	f107 021c 	add.w	r2, r7, #28
 800c096:	9202      	str	r2, [sp, #8]
 800c098:	f107 0218 	add.w	r2, r7, #24
 800c09c:	9201      	str	r2, [sp, #4]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	4623      	mov	r3, r4
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	f000 f848 	bl	800c138 <VL53L1_hist_events_consistency_check>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800c0ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d115      	bne.n	800c0e2 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800c0b8:	2b09      	cmp	r3, #9
 800c0ba:	d112      	bne.n	800c0e2 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800c0bc:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800c0c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800c0c4:	224c      	movs	r2, #76	; 0x4c
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	3310      	adds	r3, #16
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	f107 0217 	add.w	r2, r7, #23
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	f000 fb44 	bl	800c764 <VL53L1_hist_merged_pulse_check>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800c0e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c0e6:	7df8      	ldrb	r0, [r7, #23]
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	214c      	movs	r1, #76	; 0x4c
 800c0ec:	fb01 f303 	mul.w	r3, r1, r3
 800c0f0:	4413      	add	r3, r2
 800c0f2:	335e      	adds	r3, #94	; 0x5e
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800c0f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	795b      	ldrb	r3, [r3, #5]
 800c106:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800c10a:	429a      	cmp	r2, r3
 800c10c:	f4ff af61 	bcc.w	800bfd2 <VL53L1_hist_phase_consistency_check+0xfc>
 800c110:	e000      	b.n	800c114 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800c112:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800c114:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c118:	3301      	adds	r3, #1
 800c11a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	7c9b      	ldrb	r3, [r3, #18]
 800c122:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c126:	429a      	cmp	r2, r3
 800c128:	f4ff af1f 	bcc.w	800bf6a <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c12c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c130:	4618      	mov	r0, r3
 800c132:	373c      	adds	r7, #60	; 0x3c
 800c134:	46bd      	mov	sp, r7
 800c136:	bd90      	pop	{r4, r7, pc}

0800c138 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800c138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c13c:	b0d4      	sub	sp, #336	; 0x150
 800c13e:	af00      	add	r7, sp, #0
 800c140:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c144:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c148:	4603      	mov	r3, r0
 800c14a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800c14e:	460b      	mov	r3, r1
 800c150:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c154:	2300      	movs	r3, #0
 800c156:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	f04f 0300 	mov.w	r3, #0
 800c162:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800c166:	f04f 0200 	mov.w	r2, #0
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800c172:	f04f 0200 	mov.w	r2, #0
 800c176:	f04f 0300 	mov.w	r3, #0
 800c17a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800c17e:	f04f 0200 	mov.w	r2, #0
 800c182:	f04f 0300 	mov.w	r3, #0
 800c186:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	f04f 0300 	mov.w	r3, #0
 800c192:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800c196:	f04f 0200 	mov.w	r2, #0
 800c19a:	f04f 0300 	mov.w	r3, #0
 800c19e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	f04f 0300 	mov.w	r3, #0
 800c1aa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800c1ae:	f04f 0200 	mov.w	r2, #0
 800c1b2:	f04f 0300 	mov.w	r3, #0
 800c1b6:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800c1c6:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c1ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c1d2:	2209      	movs	r2, #9
 800c1d4:	701a      	strb	r2, [r3, #0]
		return status;
 800c1d6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800c1da:	e2bd      	b.n	800c758 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800c1dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1e8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c1ec:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	f143 0300 	adc.w	r3, r3, #0
 800c1fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c202:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c206:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800c20a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c20e:	885b      	ldrh	r3, [r3, #2]
 800c210:	b29b      	uxth	r3, r3
 800c212:	2200      	movs	r2, #0
 800c214:	469a      	mov	sl, r3
 800c216:	4693      	mov	fp, r2
 800c218:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c21c:	fb0a f203 	mul.w	r2, sl, r3
 800c220:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c224:	fb0b f303 	mul.w	r3, fp, r3
 800c228:	441a      	add	r2, r3
 800c22a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c22e:	fba3 450a 	umull	r4, r5, r3, sl
 800c232:	1953      	adds	r3, r2, r5
 800c234:	461d      	mov	r5, r3
 800c236:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800c23a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800c23e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	2200      	movs	r2, #0
 800c246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c24a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c24e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c252:	460b      	mov	r3, r1
 800c254:	3301      	adds	r3, #1
 800c256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c25a:	4613      	mov	r3, r2
 800c25c:	f143 0300 	adc.w	r3, r3, #0
 800c260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c264:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c268:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c26c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c270:	8adb      	ldrh	r3, [r3, #22]
 800c272:	b29b      	uxth	r3, r3
 800c274:	2200      	movs	r2, #0
 800c276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c27a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c27e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c282:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c286:	4622      	mov	r2, r4
 800c288:	fb02 f203 	mul.w	r2, r2, r3
 800c28c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c290:	4629      	mov	r1, r5
 800c292:	fb01 f303 	mul.w	r3, r1, r3
 800c296:	441a      	add	r2, r3
 800c298:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c29c:	4621      	mov	r1, r4
 800c29e:	fba3 8901 	umull	r8, r9, r3, r1
 800c2a2:	eb02 0309 	add.w	r3, r2, r9
 800c2a6:	4699      	mov	r9, r3
 800c2a8:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c2ac:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c2b0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c2b4:	f04f 0000 	mov.w	r0, #0
 800c2b8:	f04f 0100 	mov.w	r1, #0
 800c2bc:	0319      	lsls	r1, r3, #12
 800c2be:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c2c2:	0310      	lsls	r0, r2, #12
 800c2c4:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c2c8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c2cc:	0fd9      	lsrs	r1, r3, #31
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c2d4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c2d8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c2dc:	4621      	mov	r1, r4
 800c2de:	1889      	adds	r1, r1, r2
 800c2e0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	eb43 0101 	adc.w	r1, r3, r1
 800c2ea:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c2ee:	f04f 0200 	mov.w	r2, #0
 800c2f2:	f04f 0300 	mov.w	r3, #0
 800c2f6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	084a      	lsrs	r2, r1, #1
 800c2fe:	4629      	mov	r1, r5
 800c300:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c304:	4629      	mov	r1, r5
 800c306:	104b      	asrs	r3, r1, #1
 800c308:	4610      	mov	r0, r2
 800c30a:	4619      	mov	r1, r3
 800c30c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c310:	1814      	adds	r4, r2, r0
 800c312:	67bc      	str	r4, [r7, #120]	; 0x78
 800c314:	414b      	adcs	r3, r1
 800c316:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c318:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c31c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c320:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c324:	4313      	orrs	r3, r2
 800c326:	d009      	beq.n	800c33c <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c328:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c32c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c330:	f7f3 ff76 	bl	8000220 <__aeabi_ldivmod>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c33c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c340:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c344:	fb03 f102 	mul.w	r1, r3, r2
 800c348:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c34c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c350:	fb02 f303 	mul.w	r3, r2, r3
 800c354:	18ca      	adds	r2, r1, r3
 800c356:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c35a:	fba3 1303 	umull	r1, r3, r3, r3
 800c35e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c362:	460b      	mov	r3, r1
 800c364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c36c:	18d3      	adds	r3, r2, r3
 800c36e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c372:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c376:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c37a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c37e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c382:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c386:	6739      	str	r1, [r7, #112]	; 0x70
 800c388:	f143 0300 	adc.w	r3, r3, #0
 800c38c:	677b      	str	r3, [r7, #116]	; 0x74
 800c38e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c392:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c396:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	da08      	bge.n	800c3b0 <VL53L1_hist_events_consistency_check+0x278>
 800c39e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c3a2:	1851      	adds	r1, r2, r1
 800c3a4:	66b9      	str	r1, [r7, #104]	; 0x68
 800c3a6:	f143 0300 	adc.w	r3, r3, #0
 800c3aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c3b0:	f04f 0000 	mov.w	r0, #0
 800c3b4:	f04f 0100 	mov.w	r1, #0
 800c3b8:	0b10      	lsrs	r0, r2, #12
 800c3ba:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c3be:	1319      	asrs	r1, r3, #12
 800c3c0:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c3c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	663b      	str	r3, [r7, #96]	; 0x60
 800c3ce:	667a      	str	r2, [r7, #100]	; 0x64
 800c3d0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c3d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c3d8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c3e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c3ec:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	1a51      	subs	r1, r2, r1
 800c3f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	eb63 0301 	sbc.w	r3, r3, r1
 800c3fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3fe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c402:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c406:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c40a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c40e:	fb03 f102 	mul.w	r1, r3, r2
 800c412:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c416:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
 800c41e:	4419      	add	r1, r3
 800c420:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c424:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c428:	fba2 2303 	umull	r2, r3, r2, r3
 800c42c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c430:	4613      	mov	r3, r2
 800c432:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43a:	18cb      	adds	r3, r1, r3
 800c43c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c440:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c444:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c448:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c44c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c450:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c454:	6539      	str	r1, [r7, #80]	; 0x50
 800c456:	f143 0300 	adc.w	r3, r3, #0
 800c45a:	657b      	str	r3, [r7, #84]	; 0x54
 800c45c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c460:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c464:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c468:	2b00      	cmp	r3, #0
 800c46a:	da08      	bge.n	800c47e <VL53L1_hist_events_consistency_check+0x346>
 800c46c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c470:	1851      	adds	r1, r2, r1
 800c472:	64b9      	str	r1, [r7, #72]	; 0x48
 800c474:	f143 0300 	adc.w	r3, r3, #0
 800c478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c47a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c47e:	f04f 0000 	mov.w	r0, #0
 800c482:	f04f 0100 	mov.w	r1, #0
 800c486:	0b10      	lsrs	r0, r2, #12
 800c488:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c48c:	1319      	asrs	r1, r3, #12
 800c48e:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c492:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c496:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c49a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4a6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c4aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c4ae:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	fb02 f203 	mul.w	r2, r2, r3
 800c4b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c4bc:	4629      	mov	r1, r5
 800c4be:	fb01 f303 	mul.w	r3, r1, r3
 800c4c2:	441a      	add	r2, r3
 800c4c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	fba3 1301 	umull	r1, r3, r3, r1
 800c4ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4dc:	18d3      	adds	r3, r2, r3
 800c4de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4e2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c4e6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c4ea:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c4ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c4f2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c4f6:	6439      	str	r1, [r7, #64]	; 0x40
 800c4f8:	f143 0300 	adc.w	r3, r3, #0
 800c4fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c4fe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c502:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c506:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da08      	bge.n	800c520 <VL53L1_hist_events_consistency_check+0x3e8>
 800c50e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c512:	1851      	adds	r1, r2, r1
 800c514:	63b9      	str	r1, [r7, #56]	; 0x38
 800c516:	f143 0300 	adc.w	r3, r3, #0
 800c51a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c51c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c520:	f04f 0000 	mov.w	r0, #0
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	0b10      	lsrs	r0, r2, #12
 800c52a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c52e:	1319      	asrs	r1, r3, #12
 800c530:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c534:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c538:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c53c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	2200      	movs	r2, #0
 800c544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c548:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c550:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c554:	4622      	mov	r2, r4
 800c556:	fb02 f203 	mul.w	r2, r2, r3
 800c55a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c55e:	4629      	mov	r1, r5
 800c560:	fb01 f303 	mul.w	r3, r1, r3
 800c564:	441a      	add	r2, r3
 800c566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c56a:	4621      	mov	r1, r4
 800c56c:	fba3 1301 	umull	r1, r3, r3, r1
 800c570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c574:	460b      	mov	r3, r1
 800c576:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c57a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c57e:	18d3      	adds	r3, r2, r3
 800c580:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c584:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c588:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c58c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c590:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c594:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c598:	6339      	str	r1, [r7, #48]	; 0x30
 800c59a:	f143 0300 	adc.w	r3, r3, #0
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c5a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c5a8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	da08      	bge.n	800c5c6 <VL53L1_hist_events_consistency_check+0x48e>
 800c5b4:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c5b8:	18c3      	adds	r3, r0, r3
 800c5ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5bc:	f141 0300 	adc.w	r3, r1, #0
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c5c6:	f04f 0200 	mov.w	r2, #0
 800c5ca:	f04f 0300 	mov.w	r3, #0
 800c5ce:	0b02      	lsrs	r2, r0, #12
 800c5d0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c5d4:	130b      	asrs	r3, r1, #12
 800c5d6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c5da:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c5de:	1c91      	adds	r1, r2, #2
 800c5e0:	6239      	str	r1, [r7, #32]
 800c5e2:	f143 0300 	adc.w	r3, r3, #0
 800c5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c5e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c5ec:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c5f0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	da06      	bge.n	800c606 <VL53L1_hist_events_consistency_check+0x4ce>
 800c5f8:	1cd1      	adds	r1, r2, #3
 800c5fa:	61b9      	str	r1, [r7, #24]
 800c5fc:	f143 0300 	adc.w	r3, r3, #0
 800c600:	61fb      	str	r3, [r7, #28]
 800c602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c606:	f04f 0000 	mov.w	r0, #0
 800c60a:	f04f 0100 	mov.w	r1, #0
 800c60e:	0890      	lsrs	r0, r2, #2
 800c610:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c614:	1099      	asrs	r1, r3, #2
 800c616:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c61a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c620:	2200      	movs	r2, #0
 800c622:	613b      	str	r3, [r7, #16]
 800c624:	617a      	str	r2, [r7, #20]
 800c626:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c62a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c62e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c632:	1c91      	adds	r1, r2, #2
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	f143 0300 	adc.w	r3, r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c640:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c644:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c648:	2b00      	cmp	r3, #0
 800c64a:	da06      	bge.n	800c65a <VL53L1_hist_events_consistency_check+0x522>
 800c64c:	1cd1      	adds	r1, r2, #3
 800c64e:	6039      	str	r1, [r7, #0]
 800c650:	f143 0300 	adc.w	r3, r3, #0
 800c654:	607b      	str	r3, [r7, #4]
 800c656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c65a:	f04f 0000 	mov.w	r0, #0
 800c65e:	f04f 0100 	mov.w	r1, #0
 800c662:	0890      	lsrs	r0, r2, #2
 800c664:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c668:	1099      	asrs	r1, r3, #2
 800c66a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c672:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c674:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c678:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c67a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c67e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c680:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c684:	4413      	add	r3, r2
 800c686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c68a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	4618      	mov	r0, r3
 800c692:	f002 f8c6 	bl	800e822 <VL53L1_isqrt>
 800c696:	4603      	mov	r3, r0
 800c698:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c69a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c69e:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c6a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c6aa:	fb03 f202 	mul.w	r2, r3, r2
 800c6ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6b2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c6b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f103 0220 	add.w	r2, r3, #32
 800c6be:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6c2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c6c4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	da00      	bge.n	800c6d0 <VL53L1_hist_events_consistency_check+0x598>
 800c6ce:	333f      	adds	r3, #63	; 0x3f
 800c6d0:	119b      	asrs	r3, r3, #6
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c6d8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6f0:	1a9b      	subs	r3, r3, r2
 800c6f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c6f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c6fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c6fe:	429a      	cmp	r2, r3
 800c700:	da08      	bge.n	800c714 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c702:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c70a:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c70c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	e007      	b.n	800c724 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c714:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c718:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c71c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c71e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c722:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c724:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	dd0b      	ble.n	800c74c <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c734:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c738:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c73a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c73e:	429a      	cmp	r2, r3
 800c740:	d204      	bcs.n	800c74c <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c742:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c746:	2214      	movs	r2, #20
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	e003      	b.n	800c754 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c74c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c750:	2209      	movs	r2, #9
 800c752:	701a      	strb	r2, [r3, #0]





	return status;
 800c754:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c758:	4618      	mov	r0, r3
 800c75a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c75e:	46bd      	mov	sp, r7
 800c760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c764 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c772:	2300      	movs	r3, #0
 800c774:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c786:	429a      	cmp	r2, r3
 800c788:	dd0b      	ble.n	800c7a2 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c790:	b29a      	uxth	r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c798:	b29b      	uxth	r3, r3
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	b29b      	uxth	r3, r3
		delta_mm =
 800c79e:	82fb      	strh	r3, [r7, #22]
 800c7a0:	e00a      	b.n	800c7b8 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	b29b      	uxth	r3, r3
		delta_mm =
 800c7b6:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c7b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd09      	ble.n	800c7d4 <VL53L1_hist_merged_pulse_check+0x70>
 800c7c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c7c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	dd03      	ble.n	800c7d4 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2216      	movs	r2, #22
 800c7d0:	701a      	strb	r2, [r3, #0]
 800c7d2:	e002      	b.n	800c7da <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2209      	movs	r2, #9
 800c7d8:	701a      	strb	r2, [r3, #0]

	return status;
 800c7da:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	371c      	adds	r7, #28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b08e      	sub	sp, #56	; 0x38
 800c7ee:	af04      	add	r7, sp, #16
 800c7f0:	60f8      	str	r0, [r7, #12]
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	607a      	str	r2, [r7, #4]
 800c7f6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3318      	adds	r3, #24
 800c802:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c812:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c81a:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c822:	2b09      	cmp	r3, #9
 800c824:	d009      	beq.n	800c83a <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c82c:	2b13      	cmp	r3, #19
 800c82e:	d004      	beq.n	800c83a <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c836:	2b14      	cmp	r3, #20
 800c838:	d129      	bne.n	800c88e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c840:	2b09      	cmp	r3, #9
 800c842:	d009      	beq.n	800c858 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c84a:	2b13      	cmp	r3, #19
 800c84c:	d004      	beq.n	800c858 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c854:	2b14      	cmp	r3, #20
 800c856:	d11a      	bne.n	800c88e <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	2209      	movs	r2, #9
 800c85c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c86a:	8bb9      	ldrh	r1, [r7, #28]
 800c86c:	7ff8      	ldrb	r0, [r7, #31]
 800c86e:	9303      	str	r3, [sp, #12]
 800c870:	f107 0318 	add.w	r3, r7, #24
 800c874:	9302      	str	r3, [sp, #8]
 800c876:	f107 0314 	add.w	r3, r7, #20
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	4613      	mov	r3, r2
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	f7ff fc58 	bl	800c138 <VL53L1_hist_events_consistency_check>
 800c888:	4603      	mov	r3, r0
 800c88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c88e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c892:	4618      	mov	r0, r3
 800c894:	3728      	adds	r7, #40	; 0x28
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b088      	sub	sp, #32
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	60b9      	str	r1, [r7, #8]
 800c8a4:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d019      	beq.n	800c8fa <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f002 f90f 	bl	800eaf0 <VL53L1_calc_pll_period_mm>
 800c8d2:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c8da:	021b      	lsls	r3, r3, #8
 800c8dc:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	fb02 f303 	mul.w	r3, r2, r3
 800c8e6:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c8ee:	0bdb      	lsrs	r3, r3, #15
 800c8f0:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	b21a      	sxth	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c8fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c906:	b590      	push	{r4, r7, lr}
 800c908:	b08d      	sub	sp, #52	; 0x34
 800c90a:	af04      	add	r7, sp, #16
 800c90c:	4604      	mov	r4, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	461a      	mov	r2, r3
 800c914:	4623      	mov	r3, r4
 800c916:	80fb      	strh	r3, [r7, #6]
 800c918:	4603      	mov	r3, r0
 800c91a:	80bb      	strh	r3, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
 800c920:	4613      	mov	r3, r2
 800c922:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c944:	78b9      	ldrb	r1, [r7, #2]
 800c946:	78f8      	ldrb	r0, [r7, #3]
 800c948:	f107 030c 	add.w	r3, r7, #12
 800c94c:	9303      	str	r3, [sp, #12]
 800c94e:	f107 030e 	add.w	r3, r7, #14
 800c952:	9302      	str	r3, [sp, #8]
 800c954:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	23ff      	movs	r3, #255	; 0xff
 800c960:	22c7      	movs	r2, #199	; 0xc7
 800c962:	f000 fa03 	bl	800cd6c <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c966:	89fb      	ldrh	r3, [r7, #14]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d050      	beq.n	800ca0e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c96c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d04d      	beq.n	800ca0e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c972:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c976:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c97a:	78b9      	ldrb	r1, [r7, #2]
 800c97c:	78f8      	ldrb	r0, [r7, #3]
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	f107 030a 	add.w	r3, r7, #10
 800c988:	9302      	str	r3, [sp, #8]
 800c98a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c992:	9300      	str	r3, [sp, #0]
 800c994:	4623      	mov	r3, r4
 800c996:	f000 f9e9 	bl	800cd6c <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c99e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c9a0:	897b      	ldrh	r3, [r7, #10]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	fb02 f303 	mul.w	r3, r2, r3
 800c9aa:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c9ac:	89fb      	ldrh	r3, [r7, #14]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9b6:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ba:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c9bc:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c9be:	893b      	ldrh	r3, [r7, #8]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	fb02 f303 	mul.w	r3, r2, r3
 800c9c8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c9ca:	89bb      	ldrh	r3, [r7, #12]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c9d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	fb02 f303 	mul.w	r3, r2, r3
 800c9e0:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c9e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ec:	69fa      	ldr	r2, [r7, #28]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c9f2:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c9f4:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c9f6:	4413      	add	r3, r2
 800c9f8:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d008      	beq.n	800ca12 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	009a      	lsls	r2, r3, #2
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	e002      	b.n	800ca14 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800ca0e:	bf00      	nop
 800ca10:	e000      	b.n	800ca14 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800ca12:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	b21a      	sxth	r2, r3
 800ca18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca1a:	801a      	strh	r2, [r3, #0]

}
 800ca1c:	bf00      	nop
 800ca1e:	3724      	adds	r7, #36	; 0x24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd90      	pop	{r4, r7, pc}

0800ca24 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
 800ca2e:	603b      	str	r3, [r7, #0]
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	08db      	lsrs	r3, r3, #3
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	f003 0307 	and.w	r3, r3, #7
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	2301      	movs	r3, #1
 800ca52:	4093      	lsls	r3, r2
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	701a      	strb	r2, [r3, #0]

}
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800ca66:	b480      	push	{r7}
 800ca68:	b083      	sub	sp, #12
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	603a      	str	r2, [r7, #0]
 800ca70:	71fb      	strb	r3, [r7, #7]
 800ca72:	460b      	mov	r3, r1
 800ca74:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	d90a      	bls.n	800ca92 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800ca7c:	79bb      	ldrb	r3, [r7, #6]
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	3b71      	subs	r3, #113	; 0x71
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800ca90:	e00a      	b.n	800caa8 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800ca92:	79bb      	ldrb	r3, [r7, #6]
 800ca94:	f1c3 030f 	rsb	r3, r3, #15
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	00db      	lsls	r3, r3, #3
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	4413      	add	r3, r2
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	701a      	strb	r2, [r3, #0]
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	4603      	mov	r3, r0
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	091b      	lsrs	r3, r3, #4
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	f003 030f 	and.w	r3, r3, #15
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	701a      	strb	r2, [r3, #0]

}
 800cad8:	bf00      	nop
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	4603      	mov	r3, r0
 800caec:	603a      	str	r2, [r7, #0]
 800caee:	71fb      	strb	r3, [r7, #7]
 800caf0:	460b      	mov	r3, r1
 800caf2:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800caf4:	79bb      	ldrb	r3, [r7, #6]
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	b2da      	uxtb	r2, r3
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	4413      	add	r3, r2
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	701a      	strb	r2, [r3, #0]

}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60ba      	str	r2, [r7, #8]
 800cb18:	607b      	str	r3, [r7, #4]
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73fb      	strb	r3, [r7, #15]
 800cb1e:	460b      	mov	r3, r1
 800cb20:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800cb32:	f107 0217 	add.w	r2, r7, #23
 800cb36:	f107 0116 	add.w	r1, r7, #22
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f002 fa51 	bl	800efe4 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800cb42:	f107 0214 	add.w	r2, r7, #20
 800cb46:	f107 0115 	add.w	r1, r7, #21
 800cb4a:	7bbb      	ldrb	r3, [r7, #14]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ffb1 	bl	800cab4 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	7d7b      	ldrb	r3, [r7, #21]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	0fd9      	lsrs	r1, r3, #31
 800cb5c:	440b      	add	r3, r1
 800cb5e:	105b      	asrs	r3, r3, #1
 800cb60:	425b      	negs	r3, r3
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	4413      	add	r3, r2
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	b21a      	sxth	r2, r3
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	da02      	bge.n	800cb7e <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	7d7b      	ldrb	r3, [r7, #21]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	4413      	add	r3, r2
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	b21a      	sxth	r2, r3
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb9a:	2b0f      	cmp	r3, #15
 800cb9c:	dd02      	ble.n	800cba4 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	220f      	movs	r2, #15
 800cba2:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800cba4:	7dbb      	ldrb	r3, [r7, #22]
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	7d3b      	ldrb	r3, [r7, #20]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	0fd9      	lsrs	r1, r3, #31
 800cbae:	440b      	add	r3, r1
 800cbb0:	105b      	asrs	r3, r3, #1
 800cbb2:	425b      	negs	r3, r3
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	4413      	add	r3, r2
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	b21a      	sxth	r2, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	da02      	bge.n	800cbd0 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	7d3b      	ldrb	r3, [r7, #20]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	4413      	add	r3, r2
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	b21a      	sxth	r2, r3
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe4:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cbec:	2b0f      	cmp	r3, #15
 800cbee:	dd02      	ble.n	800cbf6 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	220f      	movs	r2, #15
 800cbf4:	801a      	strh	r2, [r3, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	3718      	adds	r7, #24
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b085      	sub	sp, #20
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	4603      	mov	r3, r0
 800cc06:	460a      	mov	r2, r1
 800cc08:	71fb      	strb	r3, [r7, #7]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	f003 0303 	and.w	r3, r3, #3
 800cc18:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800cc1a:	79bb      	ldrb	r3, [r7, #6]
 800cc1c:	f003 0303 	and.w	r3, r3, #3
 800cc20:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d104      	bne.n	800cc32 <VL53L1_is_aperture_location+0x34>
 800cc28:	7b7b      	ldrb	r3, [r7, #13]
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d101      	bne.n	800cc32 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d104      	bne.n	800cc42 <VL53L1_is_aperture_location+0x44>
 800cc38:	7b7b      	ldrb	r3, [r7, #13]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d101      	bne.n	800cc42 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800cc50:	b590      	push	{r4, r7, lr}
 800cc52:	b08b      	sub	sp, #44	; 0x2c
 800cc54:	af02      	add	r7, sp, #8
 800cc56:	603a      	str	r2, [r7, #0]
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	71fb      	strb	r3, [r7, #7]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	71bb      	strb	r3, [r7, #6]
 800cc62:	4613      	mov	r3, r2
 800cc64:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800cc92:	f107 0416 	add.w	r4, r7, #22
 800cc96:	f107 0218 	add.w	r2, r7, #24
 800cc9a:	79b9      	ldrb	r1, [r7, #6]
 800cc9c:	79f8      	ldrb	r0, [r7, #7]
 800cc9e:	f107 0312 	add.w	r3, r7, #18
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	f107 0314 	add.w	r3, r7, #20
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4623      	mov	r3, r4
 800ccac:	f7ff ff30 	bl	800cb10 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ccb6:	8afb      	ldrh	r3, [r7, #22]
 800ccb8:	83bb      	strh	r3, [r7, #28]
 800ccba:	e04c      	b.n	800cd56 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ccbc:	8b3b      	ldrh	r3, [r7, #24]
 800ccbe:	83fb      	strh	r3, [r7, #30]
 800ccc0:	e03d      	b.n	800cd3e <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800ccc2:	8bbb      	ldrh	r3, [r7, #28]
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	8bfa      	ldrh	r2, [r7, #30]
 800ccc8:	b2d1      	uxtb	r1, r2
 800ccca:	f107 0211 	add.w	r2, r7, #17
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff fec9 	bl	800ca66 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ccd4:	7c78      	ldrb	r0, [r7, #17]
 800ccd6:	f107 030e 	add.w	r3, r7, #14
 800ccda:	f107 020f 	add.w	r2, r7, #15
 800ccde:	f107 0110 	add.w	r1, r7, #16
 800cce2:	f7ff fe9f 	bl	800ca24 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cce6:	7c3b      	ldrb	r3, [r7, #16]
 800cce8:	461a      	mov	r2, r3
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	4413      	add	r3, r2
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d01b      	beq.n	800cd32 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800ccfa:	8bbb      	ldrh	r3, [r7, #28]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	8bfa      	ldrh	r2, [r7, #30]
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff ff7a 	bl	800cbfe <VL53L1_is_aperture_location>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cd0e:	7efb      	ldrb	r3, [r7, #27]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	881a      	ldrh	r2, [r3, #0]
 800cd18:	88bb      	ldrh	r3, [r7, #4]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	e006      	b.n	800cd32 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cd32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	3301      	adds	r3, #1
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	83fb      	strh	r3, [r7, #30]
 800cd3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cd42:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	ddbb      	ble.n	800ccc2 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cd4a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	3301      	adds	r3, #1
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	83bb      	strh	r3, [r7, #28]
 800cd56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd5a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	ddac      	ble.n	800ccbc <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800cd62:	bf00      	nop
 800cd64:	bf00      	nop
 800cd66:	3724      	adds	r7, #36	; 0x24
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd90      	pop	{r4, r7, pc}

0800cd6c <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b08d      	sub	sp, #52	; 0x34
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	4604      	mov	r4, r0
 800cd74:	4608      	mov	r0, r1
 800cd76:	4611      	mov	r1, r2
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4623      	mov	r3, r4
 800cd7c:	71fb      	strb	r3, [r7, #7]
 800cd7e:	4603      	mov	r3, r0
 800cd80:	71bb      	strb	r3, [r7, #6]
 800cd82:	460b      	mov	r3, r1
 800cd84:	717b      	strb	r3, [r7, #5]
 800cd86:	4613      	mov	r3, r2
 800cd88:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800cdcc:	f107 041c 	add.w	r4, r7, #28
 800cdd0:	f107 021e 	add.w	r2, r7, #30
 800cdd4:	79b9      	ldrb	r1, [r7, #6]
 800cdd6:	79f8      	ldrb	r0, [r7, #7]
 800cdd8:	f107 0318 	add.w	r3, r7, #24
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	f107 031a 	add.w	r3, r7, #26
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	4623      	mov	r3, r4
 800cde6:	f7ff fe93 	bl	800cb10 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800cdea:	f107 0414 	add.w	r4, r7, #20
 800cdee:	f107 0216 	add.w	r2, r7, #22
 800cdf2:	7939      	ldrb	r1, [r7, #4]
 800cdf4:	7978      	ldrb	r0, [r7, #5]
 800cdf6:	f107 0310 	add.w	r3, r7, #16
 800cdfa:	9301      	str	r3, [sp, #4]
 800cdfc:	f107 0312 	add.w	r3, r7, #18
 800ce00:	9300      	str	r3, [sp, #0]
 800ce02:	4623      	mov	r3, r4
 800ce04:	f7ff fe84 	bl	800cb10 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800ce08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800ce0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce10:	2200      	movs	r2, #0
 800ce12:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ce14:	8abb      	ldrh	r3, [r7, #20]
 800ce16:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ce18:	e06c      	b.n	800cef4 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ce1a:	8afb      	ldrh	r3, [r7, #22]
 800ce1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ce1e:	e05d      	b.n	800cedc <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800ce20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ce26:	b2d1      	uxtb	r1, r2
 800ce28:	f107 020f 	add.w	r2, r7, #15
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7ff fe1a 	bl	800ca66 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800ce32:	7bf8      	ldrb	r0, [r7, #15]
 800ce34:	f107 030c 	add.w	r3, r7, #12
 800ce38:	f107 020d 	add.w	r2, r7, #13
 800ce3c:	f107 010e 	add.w	r1, r7, #14
 800ce40:	f7ff fdf0 	bl	800ca24 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	461a      	mov	r2, r3
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	4413      	add	r3, r2
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	7b3b      	ldrb	r3, [r7, #12]
 800ce50:	4013      	ands	r3, r2
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d03b      	beq.n	800ced0 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800ce58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fecb 	bl	800cbfe <VL53L1_is_aperture_location>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800ce6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800ce76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce78:	847b      	strh	r3, [r7, #34]	; 0x22
 800ce7a:	e002      	b.n	800ce82 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800ce7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce80:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ce82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce86:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	db19      	blt.n	800cec2 <VL53L1_calc_mm_effective_spads+0x156>
 800ce8e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce92:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800ce96:	429a      	cmp	r2, r3
 800ce98:	dc13      	bgt.n	800cec2 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800ce9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800ce9e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cea2:	429a      	cmp	r2, r3
 800cea4:	db0d      	blt.n	800cec2 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cea6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ceaa:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	dc07      	bgt.n	800cec2 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800ceb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb4:	881a      	ldrh	r2, [r3, #0]
 800ceb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ceb8:	4413      	add	r3, r2
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebe:	801a      	strh	r2, [r3, #0]
 800cec0:	e006      	b.n	800ced0 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cec4:	881a      	ldrh	r2, [r3, #0]
 800cec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cec8:	4413      	add	r3, r2
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cece:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ced0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	3301      	adds	r3, #1
 800ced8:	b29b      	uxth	r3, r3
 800ceda:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cee0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cee4:	429a      	cmp	r2, r3
 800cee6:	dd9b      	ble.n	800ce20 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cee8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3301      	adds	r3, #1
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cef4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cef8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cefc:	429a      	cmp	r2, r3
 800cefe:	dd8c      	ble.n	800ce1a <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800cf00:	bf00      	nop
 800cf02:	bf00      	nop
 800cf04:	372c      	adds	r7, #44	; 0x2c
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd90      	pop	{r4, r7, pc}

0800cf0a <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b086      	sub	sp, #24
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	607a      	str	r2, [r7, #4]
 800cf16:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7fd ff6d 	bl	800adfc <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	7c9a      	ldrb	r2, [r3, #18]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	3314      	adds	r3, #20
 800cf4c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	e06b      	b.n	800d02c <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800cf54:	7dfb      	ldrb	r3, [r7, #23]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d034      	beq.n	800cfc8 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800cf5e:	e05f      	b.n	800d020 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cf98:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	8a9a      	ldrh	r2, [r3, #20]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	601a      	str	r2, [r3, #0]

			break;
 800cfc6:	e02b      	b.n	800d020 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800cff8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	611a      	str	r2, [r3, #16]
			break;
 800d01e:	bf00      	nop
		}

		pdata++;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	334c      	adds	r3, #76	; 0x4c
 800d024:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	3301      	adds	r3, #1
 800d02a:	75fb      	strb	r3, [r7, #23]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	7c9b      	ldrb	r3, [r3, #18]
 800d030:	7dfa      	ldrb	r2, [r7, #23]
 800d032:	429a      	cmp	r2, r3
 800d034:	d38e      	bcc.n	800cf54 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800d036:	bf00      	nop
 800d038:	bf00      	nop
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800d040:	b480      	push	{r7}
 800d042:	b089      	sub	sp, #36	; 0x24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d048:	2300      	movs	r3, #0
 800d04a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3318      	adds	r3, #24
 800d050:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d058:	3308      	adds	r3, #8
 800d05a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800d062:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d06a:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800d06c:	4613      	mov	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4413      	add	r3, r2
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	4413      	add	r3, r2
 800d07c:	3302      	adds	r3, #2
 800d07e:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800d0a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3724      	adds	r7, #36	; 0x24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b08b      	sub	sp, #44	; 0x2c
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	3318      	adds	r3, #24
 800d0c6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800d0d8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d0e0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800d0e8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800d0ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0ee:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800d0f0:	7bfa      	ldrb	r2, [r7, #15]
 800d0f2:	6939      	ldr	r1, [r7, #16]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	440b      	add	r3, r1
 800d0fe:	3306      	adds	r3, #6
 800d100:	2200      	movs	r2, #0
 800d102:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d10a:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800d10c:	2301      	movs	r3, #1
 800d10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d112:	e01a      	b.n	800d14a <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800d114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	214c      	movs	r1, #76	; 0x4c
 800d11c:	fb01 f303 	mul.w	r3, r1, r3
 800d120:	4413      	add	r3, r2
 800d122:	334a      	adds	r3, #74	; 0x4a
 800d124:	881b      	ldrh	r3, [r3, #0]
 800d126:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d128:	429a      	cmp	r2, r3
 800d12a:	d209      	bcs.n	800d140 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800d12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	214c      	movs	r1, #76	; 0x4c
 800d134:	fb01 f303 	mul.w	r3, r1, r3
 800d138:	4413      	add	r3, r2
 800d13a:	334a      	adds	r3, #74	; 0x4a
 800d13c:	881b      	ldrh	r3, [r3, #0]
 800d13e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800d140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d144:	3301      	adds	r3, #1
 800d146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	7c9b      	ldrb	r3, [r3, #18]
 800d14e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d152:	429a      	cmp	r2, r3
 800d154:	d3de      	bcc.n	800d114 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800d156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d103      	bne.n	800d164 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800d15c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d160:	623b      	str	r3, [r7, #32]
 800d162:	e00e      	b.n	800d182 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800d164:	89bb      	ldrh	r3, [r7, #12]
 800d166:	039b      	lsls	r3, r3, #14
 800d168:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800d16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d16c:	6a3a      	ldr	r2, [r7, #32]
 800d16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d172:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d17a:	d302      	bcc.n	800d182 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800d17c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d180:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d182:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d188:	6939      	ldr	r1, [r7, #16]
 800d18a:	4613      	mov	r3, r2
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	4413      	add	r3, r2
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	440b      	add	r3, r1
 800d194:	3306      	adds	r3, #6
 800d196:	4602      	mov	r2, r0
 800d198:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800d19a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	372c      	adds	r7, #44	; 0x2c
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b08a      	sub	sp, #40	; 0x28
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	3318      	adds	r3, #24
 800d1bc:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	332c      	adds	r3, #44	; 0x2c
 800d1c2:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	33c2      	adds	r3, #194	; 0xc2
 800d1c8:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d1d0:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	3302      	adds	r3, #2
 800d1d6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	785b      	ldrb	r3, [r3, #1]
 800d1dc:	f003 0301 	and.w	r3, r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d11e      	bne.n	800d234 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10b      	bne.n	800d214 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d05d      	beq.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	719a      	strb	r2, [r3, #6]
 800d232:	e050      	b.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d23a:	461a      	mov	r2, r3
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	4413      	add	r3, r2
 800d240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d244:	2b02      	cmp	r3, #2
 800d246:	d11e      	bne.n	800d286 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10b      	bne.n	800d266 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d034      	beq.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	719a      	strb	r2, [r3, #6]
 800d284:	e027      	b.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d28c:	461a      	mov	r2, r3
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	4413      	add	r3, r2
 800d292:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d296:	2b03      	cmp	r3, #3
 800d298:	d11d      	bne.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00b      	beq.n	800d2d6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d2d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6978      	ldr	r0, [r7, #20]
 800d2ee:	f7fd f921 	bl	800a534 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3728      	adds	r7, #40	; 0x28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b089      	sub	sp, #36	; 0x24
 800d302:	af00      	add	r7, sp, #0
 800d304:	60f8      	str	r0, [r7, #12]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
 800d30a:	460b      	mov	r3, r1
 800d30c:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d30e:	2300      	movs	r3, #0
 800d310:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3318      	adds	r3, #24
 800d316:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d31e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d320:	7dfb      	ldrb	r3, [r7, #23]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7afa      	ldrb	r2, [r7, #11]
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	e01e      	b.n	800d36c <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	3b01      	subs	r3, #1
 800d338:	429a      	cmp	r2, r3
 800d33a:	d111      	bne.n	800d360 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2bff      	cmp	r3, #255	; 0xff
 800d342:	d103      	bne.n	800d34c <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2280      	movs	r2, #128	; 0x80
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	e005      	b.n	800d358 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	3301      	adds	r3, #1
 800d352:	b2da      	uxtb	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2200      	movs	r2, #0
 800d35c:	701a      	strb	r2, [r3, #0]
 800d35e:	e005      	b.n	800d36c <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	3301      	adds	r3, #1
 800d366:	b2da      	uxtb	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d36c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3724      	adds	r7, #36	; 0x24
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d388:	2300      	movs	r3, #0
 800d38a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d392:	2b01      	cmp	r3, #1
 800d394:	d118      	bne.n	800d3c8 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	719a      	strb	r2, [r3, #6]
 800d3c6:	e03a      	b.n	800d43e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d118      	bne.n	800d404 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	719a      	strb	r2, [r3, #6]
 800d402:	e01c      	b.n	800d43e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d117      	bne.n	800d43e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d43e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d442:	4618      	mov	r0, r3
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b08a      	sub	sp, #40	; 0x28
 800d452:	af00      	add	r7, sp, #0
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	461a      	mov	r2, r3
 800d45a:	460b      	mov	r3, r1
 800d45c:	72fb      	strb	r3, [r7, #11]
 800d45e:	4613      	mov	r3, r2
 800d460:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d462:	2300      	movs	r3, #0
 800d464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3318      	adds	r3, #24
 800d46c:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d46e:	2300      	movs	r3, #0
 800d470:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d476:	7afa      	ldrb	r2, [r7, #11]
 800d478:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d47a:	4611      	mov	r1, r2
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe f8ca 	bl	800b616 <VL53L1_calc_macro_period_us>
 800d482:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d48a:	2301      	movs	r3, #1
 800d48c:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	031b      	lsls	r3, r3, #12
 800d492:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	085b      	lsrs	r3, r3, #1
 800d498:	69ba      	ldr	r2, [r7, #24]
 800d49a:	4413      	add	r3, r2
 800d49c:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a6:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	2bff      	cmp	r3, #255	; 0xff
 800d4ac:	d904      	bls.n	800d4b8 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	22ff      	movs	r2, #255	; 0xff
 800d4b2:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d4b6:	e004      	b.n	800d4c2 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	7afa      	ldrb	r2, [r7, #11]
 800d4c6:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d4ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d4d8:	461a      	mov	r2, r3
 800d4da:	214b      	movs	r1, #75	; 0x4b
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f007 f9bd 	bl	801485c <VL53L1_WrByte>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d4e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	2160      	movs	r1, #96	; 0x60
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f007 f9ae 	bl	801485c <VL53L1_WrByte>
 800d500:	4603      	mov	r3, r0
 800d502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d50c:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d514:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d516:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d109      	bne.n	800d532 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d51e:	f107 0214 	add.w	r2, r7, #20
 800d522:	2302      	movs	r3, #2
 800d524:	2178      	movs	r1, #120	; 0x78
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f007 f92c 	bl	8014784 <VL53L1_WriteMulti>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	893a      	ldrh	r2, [r7, #8]
 800d536:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d53a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d108      	bne.n	800d554 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d542:	893b      	ldrh	r3, [r7, #8]
 800d544:	461a      	mov	r2, r3
 800d546:	211c      	movs	r1, #28
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f007 f9b1 	bl	80148b0 <VL53L1_WrWord>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d554:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d108      	bne.n	800d56e <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d55c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d55e:	461a      	mov	r2, r3
 800d560:	2164      	movs	r1, #100	; 0x64
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f007 f9a4 	bl	80148b0 <VL53L1_WrWord>
 800d568:	4603      	mov	r3, r0
 800d56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d572:	2b00      	cmp	r3, #0
 800d574:	d108      	bne.n	800d588 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d576:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d578:	461a      	mov	r2, r3
 800d57a:	2166      	movs	r1, #102	; 0x66
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f007 f997 	bl	80148b0 <VL53L1_WrWord>
 800d582:	4603      	mov	r3, r0
 800d584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3728      	adds	r7, #40	; 0x28
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d598:	b0a2      	sub	sp, #136	; 0x88
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a6:	3318      	adds	r3, #24
 800d5a8:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ac:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5b6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d5ba:	3318      	adds	r3, #24
 800d5bc:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d5be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5c0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d5c4:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d5c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5c8:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d5d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d5d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d4:	69db      	ldr	r3, [r3, #28]
 800d5d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d5da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d5e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d5e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d5ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d5ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d5f2:	4413      	add	r3, r2
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	4615      	mov	r5, r2
 800d5fa:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d5fe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d602:	4622      	mov	r2, r4
 800d604:	462b      	mov	r3, r5
 800d606:	f04f 0000 	mov.w	r0, #0
 800d60a:	f04f 0100 	mov.w	r1, #0
 800d60e:	0159      	lsls	r1, r3, #5
 800d610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d614:	0150      	lsls	r0, r2, #5
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	ebb2 0804 	subs.w	r8, r2, r4
 800d61e:	eb63 0905 	sbc.w	r9, r3, r5
 800d622:	f04f 0200 	mov.w	r2, #0
 800d626:	f04f 0300 	mov.w	r3, #0
 800d62a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d62e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d632:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d636:	4690      	mov	r8, r2
 800d638:	4699      	mov	r9, r3
 800d63a:	eb18 0304 	adds.w	r3, r8, r4
 800d63e:	633b      	str	r3, [r7, #48]	; 0x30
 800d640:	eb49 0305 	adc.w	r3, r9, r5
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	f04f 0300 	mov.w	r3, #0
 800d64e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d652:	4629      	mov	r1, r5
 800d654:	00cb      	lsls	r3, r1, #3
 800d656:	4621      	mov	r1, r4
 800d658:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d65c:	4621      	mov	r1, r4
 800d65e:	00ca      	lsls	r2, r1, #3
 800d660:	4610      	mov	r0, r2
 800d662:	4619      	mov	r1, r3
 800d664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d668:	2200      	movs	r2, #0
 800d66a:	643b      	str	r3, [r7, #64]	; 0x40
 800d66c:	647a      	str	r2, [r7, #68]	; 0x44
 800d66e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d672:	f7f2 fe25 	bl	80002c0 <__aeabi_uldivmod>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d67e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	f04f 0000 	mov.w	r0, #0
 800d68a:	f04f 0100 	mov.w	r1, #0
 800d68e:	0159      	lsls	r1, r3, #5
 800d690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d694:	0150      	lsls	r0, r2, #5
 800d696:	4602      	mov	r2, r0
 800d698:	460b      	mov	r3, r1
 800d69a:	ebb2 0a04 	subs.w	sl, r2, r4
 800d69e:	eb63 0b05 	sbc.w	fp, r3, r5
 800d6a2:	f04f 0200 	mov.w	r2, #0
 800d6a6:	f04f 0300 	mov.w	r3, #0
 800d6aa:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d6ae:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d6b2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d6b6:	4692      	mov	sl, r2
 800d6b8:	469b      	mov	fp, r3
 800d6ba:	eb1a 0304 	adds.w	r3, sl, r4
 800d6be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6c0:	eb4b 0305 	adc.w	r3, fp, r5
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6c6:	f04f 0200 	mov.w	r2, #0
 800d6ca:	f04f 0300 	mov.w	r3, #0
 800d6ce:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	00cb      	lsls	r3, r1, #3
 800d6d6:	4621      	mov	r1, r4
 800d6d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d6dc:	4621      	mov	r1, r4
 800d6de:	00ca      	lsls	r2, r1, #3
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d6ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d6f2:	f7f2 fde5 	bl	80002c0 <__aeabi_uldivmod>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d6fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d704:	8ad2      	ldrh	r2, [r2, #22]
 800d706:	fb02 f303 	mul.w	r3, r2, r3
 800d70a:	2200      	movs	r2, #0
 800d70c:	623b      	str	r3, [r7, #32]
 800d70e:	627a      	str	r2, [r7, #36]	; 0x24
 800d710:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d714:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d718:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d71c:	4313      	orrs	r3, r2
 800d71e:	d105      	bne.n	800d72c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d720:	f04f 0201 	mov.w	r2, #1
 800d724:	f04f 0300 	mov.w	r3, #0
 800d728:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d72c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	f04f 0400 	mov.w	r4, #0
 800d738:	f04f 0500 	mov.w	r5, #0
 800d73c:	015d      	lsls	r5, r3, #5
 800d73e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d742:	0154      	lsls	r4, r2, #5
 800d744:	4622      	mov	r2, r4
 800d746:	462b      	mov	r3, r5
 800d748:	1a14      	subs	r4, r2, r0
 800d74a:	61bc      	str	r4, [r7, #24]
 800d74c:	eb63 0301 	sbc.w	r3, r3, r1
 800d750:	61fb      	str	r3, [r7, #28]
 800d752:	f04f 0200 	mov.w	r2, #0
 800d756:	f04f 0300 	mov.w	r3, #0
 800d75a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d75e:	464c      	mov	r4, r9
 800d760:	00a3      	lsls	r3, r4, #2
 800d762:	4644      	mov	r4, r8
 800d764:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d768:	4644      	mov	r4, r8
 800d76a:	00a2      	lsls	r2, r4, #2
 800d76c:	4614      	mov	r4, r2
 800d76e:	461d      	mov	r5, r3
 800d770:	4623      	mov	r3, r4
 800d772:	181b      	adds	r3, r3, r0
 800d774:	613b      	str	r3, [r7, #16]
 800d776:	462b      	mov	r3, r5
 800d778:	eb41 0303 	adc.w	r3, r1, r3
 800d77c:	617b      	str	r3, [r7, #20]
 800d77e:	f04f 0200 	mov.w	r2, #0
 800d782:	f04f 0300 	mov.w	r3, #0
 800d786:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d78a:	4629      	mov	r1, r5
 800d78c:	02cb      	lsls	r3, r1, #11
 800d78e:	4621      	mov	r1, r4
 800d790:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d794:	4621      	mov	r1, r4
 800d796:	02ca      	lsls	r2, r1, #11
 800d798:	461c      	mov	r4, r3
 800d79a:	4613      	mov	r3, r2
 800d79c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d7a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d7a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7a8:	f7f2 fd8a 	bl	80002c0 <__aeabi_uldivmod>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d7b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	f04f 0400 	mov.w	r4, #0
 800d7c0:	f04f 0500 	mov.w	r5, #0
 800d7c4:	015d      	lsls	r5, r3, #5
 800d7c6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d7ca:	0154      	lsls	r4, r2, #5
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	1a14      	subs	r4, r2, r0
 800d7d2:	60bc      	str	r4, [r7, #8]
 800d7d4:	eb63 0301 	sbc.w	r3, r3, r1
 800d7d8:	60fb      	str	r3, [r7, #12]
 800d7da:	f04f 0200 	mov.w	r2, #0
 800d7de:	f04f 0300 	mov.w	r3, #0
 800d7e2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d7e6:	464c      	mov	r4, r9
 800d7e8:	00a3      	lsls	r3, r4, #2
 800d7ea:	4644      	mov	r4, r8
 800d7ec:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d7f0:	4644      	mov	r4, r8
 800d7f2:	00a2      	lsls	r2, r4, #2
 800d7f4:	4614      	mov	r4, r2
 800d7f6:	461d      	mov	r5, r3
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	181b      	adds	r3, r3, r0
 800d7fc:	603b      	str	r3, [r7, #0]
 800d7fe:	462b      	mov	r3, r5
 800d800:	eb41 0303 	adc.w	r3, r1, r3
 800d804:	607b      	str	r3, [r7, #4]
 800d806:	f04f 0200 	mov.w	r2, #0
 800d80a:	f04f 0300 	mov.w	r3, #0
 800d80e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d812:	4629      	mov	r1, r5
 800d814:	02cb      	lsls	r3, r1, #11
 800d816:	4621      	mov	r1, r4
 800d818:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d81c:	4621      	mov	r1, r4
 800d81e:	02ca      	lsls	r2, r1, #11
 800d820:	461c      	mov	r4, r3
 800d822:	4613      	mov	r3, r2
 800d824:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d828:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d82c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d830:	f7f2 fd46 	bl	80002c0 <__aeabi_uldivmod>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d83c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d840:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d802      	bhi.n	800d850 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d84a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d84c:	2202      	movs	r2, #2
 800d84e:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d850:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d854:	4618      	mov	r0, r3
 800d856:	3788      	adds	r7, #136	; 0x88
 800d858:	46bd      	mov	sp, r7
 800d85a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d860 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b096      	sub	sp, #88	; 0x58
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d86e:	2300      	movs	r3, #0
 800d870:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3318      	adds	r3, #24
 800d878:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d880:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d884:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d888:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88c:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d890:	2b01      	cmp	r3, #1
 800d892:	d108      	bne.n	800d8a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d89a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d101      	bne.n	800d8a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d8ac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d107      	bne.n	800d8c4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	889b      	ldrh	r3, [r3, #4]
 800d8b8:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	609a      	str	r2, [r3, #8]
 800d8c2:	e002      	b.n	800d8ca <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d2:	899b      	ldrh	r3, [r3, #12]
 800d8d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	89db      	ldrh	r3, [r3, #14]
 800d8dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d004      	beq.n	800d8f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d125      	bne.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d021      	beq.n	800d940 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d8fc:	f107 0313 	add.w	r3, r7, #19
 800d900:	4619      	mov	r1, r3
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f000 fe44 	bl	800e590 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d908:	7cfb      	ldrb	r3, [r7, #19]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d90e:	2301      	movs	r3, #1
 800d910:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d916:	2b00      	cmp	r3, #0
 800d918:	d103      	bne.n	800d922 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	653b      	str	r3, [r7, #80]	; 0x50
 800d920:	e006      	b.n	800d930 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d922:	7cfb      	ldrb	r3, [r7, #19]
 800d924:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	3202      	adds	r2, #2
 800d92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92e:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	889b      	ldrh	r3, [r3, #4]
 800d934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	88db      	ldrh	r3, [r3, #6]
 800d93c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d946:	2b00      	cmp	r3, #0
 800d948:	d10a      	bne.n	800d960 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d94a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	795b      	ldrb	r3, [r3, #5]
 800d956:	f043 0301 	orr.w	r3, r3, #1
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d96a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	795b      	ldrb	r3, [r3, #5]
 800d976:	f043 0302 	orr.w	r3, r3, #2
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d986:	2301      	movs	r3, #1
 800d988:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d990:	2b01      	cmp	r3, #1
 800d992:	d108      	bne.n	800d9a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d998:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d9a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d9a4:	e019      	b.n	800d9da <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d9a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d9aa:	019b      	lsls	r3, r3, #6
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d9be:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d9c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d9c4:	019b      	lsls	r3, r3, #6
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d9d8:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d12a      	bne.n	800da3a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d9ec:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d9f0:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9f4:	119b      	asrs	r3, r3, #6
 800d9f6:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9fe:	db02      	blt.n	800da06 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800da00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da04:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800da06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da08:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800da16:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800da1a:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800da1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da1e:	119b      	asrs	r3, r3, #6
 800da20:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800da22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da28:	db02      	blt.n	800da30 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800da2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da2e:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800da30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da32:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	81da      	strh	r2, [r3, #14]
 800da38:	e042      	b.n	800dac0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da40:	2b01      	cmp	r3, #1
 800da42:	d13d      	bne.n	800dac0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800da48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800da4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da50:	2b00      	cmp	r3, #0
 800da52:	da00      	bge.n	800da56 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800da54:	330f      	adds	r3, #15
 800da56:	111b      	asrs	r3, r3, #4
 800da58:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800da5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800da60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800da64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da66:	4413      	add	r3, r2
 800da68:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800da6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da70:	db02      	blt.n	800da78 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800da72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da76:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800da78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da7a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800da84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800da8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da8c:	4a51      	ldr	r2, [pc, #324]	; (800dbd4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800da8e:	fb82 1203 	smull	r1, r2, r2, r3
 800da92:	1152      	asrs	r2, r2, #5
 800da94:	17db      	asrs	r3, r3, #31
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800da9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800daa0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800daa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800daa6:	4413      	add	r3, r2
 800daa8:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800daaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dab0:	db02      	blt.n	800dab8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800dab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dab6:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800dab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daba:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	785b      	ldrb	r3, [r3, #1]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d177      	bne.n	800dbb8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800dac8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d073      	beq.n	800dbb8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2201      	movs	r2, #1
 800dad4:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800dadc:	f107 0313 	add.w	r3, r7, #19
 800dae0:	4619      	mov	r1, r3
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fd54 	bl	800e590 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800dae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daea:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800daee:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf2:	3308      	adds	r3, #8
 800daf4:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800daf6:	7cfb      	ldrb	r3, [r7, #19]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d041      	beq.n	800db80 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800dafc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db00:	2b00      	cmp	r3, #0
 800db02:	d03d      	beq.n	800db80 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	2b00      	cmp	r3, #0
 800db08:	d03a      	beq.n	800db80 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800db0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db16:	fb03 f202 	mul.w	r2, r3, r2
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db20:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800db2c:	69ba      	ldr	r2, [r7, #24]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d303      	bcc.n	800db3a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2200      	movs	r2, #0
 800db36:	719a      	strb	r2, [r3, #6]
 800db38:	e022      	b.n	800db80 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800db3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db42:	617b      	str	r3, [r7, #20]
				cval = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800db48:	2300      	movs	r3, #0
 800db4a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800db4e:	e00e      	b.n	800db6e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800db50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	4413      	add	r3, r2
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800db58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db5c:	601a      	str	r2, [r3, #0]
					pcpo++;
 800db5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db60:	3304      	adds	r3, #4
 800db62:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800db64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800db68:	3301      	adds	r3, #1
 800db6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800db6e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	3b01      	subs	r3, #1
 800db76:	429a      	cmp	r2, r3
 800db78:	d3ea      	bcc.n	800db50 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800db7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db7e:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	799b      	ldrb	r3, [r3, #6]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d017      	beq.n	800dbb8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	789b      	ldrb	r3, [r3, #2]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d105      	bne.n	800dbb8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800dbb8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d002      	beq.n	800dbc6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800dbc6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3758      	adds	r7, #88	; 0x58
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	66666667 	.word	0x66666667

0800dbd8 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800dbd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbdc:	b0a2      	sub	sp, #136	; 0x88
 800dbde:	af02      	add	r7, sp, #8
 800dbe0:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	3318      	adds	r3, #24
 800dbec:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800dbf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbfa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800dbfe:	3318      	adds	r3, #24
 800dc00:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800dc02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc04:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dc08:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800dc0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc0c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dc10:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800dc12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc14:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800dc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc18:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dc1c:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800dc3a:	f04f 0200 	mov.w	r2, #0
 800dc3e:	f04f 0300 	mov.w	r3, #0
 800dc42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800dc50:	2300      	movs	r3, #0
 800dc52:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dc68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc6a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d108      	bne.n	800dc84 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dc78:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d101      	bne.n	800dc84 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800dc80:	2301      	movs	r3, #1
 800dc82:	e000      	b.n	800dc86 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800dc84:	2300      	movs	r3, #0
 800dc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800dc8a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc92:	f000 fc7d 	bl	800e590 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800dc96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d003      	beq.n	800dca6 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800dc9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d102      	bne.n	800dcac <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dcac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800dcae:	f000 fb15 	bl	800e2dc <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dcb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00a      	beq.n	800dcd0 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800dcba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcc2:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800dcc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcc8:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d901      	bls.n	800dcd4 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e000      	b.n	800dcd6 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800dcda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d006      	beq.n	800dcf0 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800dce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dce4:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800dce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d101      	bne.n	800dcf4 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e000      	b.n	800dcf6 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800dcfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dcfc:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d10e      	bne.n	800dd20 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dd02:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800dd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd0c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800dd10:	2b09      	cmp	r3, #9
 800dd12:	d105      	bne.n	800dd20 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dd14:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e000      	b.n	800dd22 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dd20:	2300      	movs	r3, #0
	run_smudge_detection =
 800dd22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd28:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800dd2c:	2b09      	cmp	r3, #9
 800dd2e:	f000 80a6 	beq.w	800de7e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800dd32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd34:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	f040 80a1 	bne.w	800de7e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800dd42:	2300      	movs	r3, #0
 800dd44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dd48:	e02d      	b.n	800dda6 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800dd4a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dd4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd50:	234c      	movs	r3, #76	; 0x4c
 800dd52:	fb01 f303 	mul.w	r3, r1, r3
 800dd56:	4413      	add	r3, r2
 800dd58:	335e      	adds	r3, #94	; 0x5e
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	2b09      	cmp	r3, #9
 800dd5e:	d11d      	bne.n	800dd9c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800dd60:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dd64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd66:	234c      	movs	r3, #76	; 0x4c
 800dd68:	fb01 f303 	mul.w	r3, r1, r3
 800dd6c:	4413      	add	r3, r2
 800dd6e:	335a      	adds	r3, #90	; 0x5a
 800dd70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd74:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800dd76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	dc03      	bgt.n	800dd86 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dd84:	e00a      	b.n	800dd9c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800dd86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d106      	bne.n	800dd9c <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800dd94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dd98:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800dd9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dda0:	3301      	adds	r3, #1
 800dda2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dda6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dda8:	7c9a      	ldrb	r2, [r3, #18]
 800ddaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d3cb      	bcc.n	800dd4a <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ddb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d102      	bne.n	800ddc0 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800ddc0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800ddc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddc6:	234c      	movs	r3, #76	; 0x4c
 800ddc8:	fb01 f303 	mul.w	r3, r1, r3
 800ddcc:	4413      	add	r3, r2
 800ddce:	3348      	adds	r3, #72	; 0x48
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800ddd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d150      	bne.n	800de7e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800dddc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ddde:	2200      	movs	r2, #0
 800dde0:	469a      	mov	sl, r3
 800dde2:	4693      	mov	fp, r2
 800dde4:	4652      	mov	r2, sl
 800dde6:	465b      	mov	r3, fp
 800dde8:	f04f 0000 	mov.w	r0, #0
 800ddec:	f04f 0100 	mov.w	r1, #0
 800ddf0:	0159      	lsls	r1, r3, #5
 800ddf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ddf6:	0150      	lsls	r0, r2, #5
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	ebb2 040a 	subs.w	r4, r2, sl
 800de00:	eb63 050b 	sbc.w	r5, r3, fp
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	00ab      	lsls	r3, r5, #2
 800de0e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800de12:	00a2      	lsls	r2, r4, #2
 800de14:	4614      	mov	r4, r2
 800de16:	461d      	mov	r5, r3
 800de18:	eb14 080a 	adds.w	r8, r4, sl
 800de1c:	eb45 090b 	adc.w	r9, r5, fp
 800de20:	f04f 0200 	mov.w	r2, #0
 800de24:	f04f 0300 	mov.w	r3, #0
 800de28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800de2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800de30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800de34:	4690      	mov	r8, r2
 800de36:	4699      	mov	r9, r3
 800de38:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800de3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800de40:	f04f 0200 	mov.w	r2, #0
 800de44:	f04f 0300 	mov.w	r3, #0
 800de48:	024b      	lsls	r3, r1, #9
 800de4a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800de4e:	0242      	lsls	r2, r0, #9
 800de50:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800de54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de58:	2200      	movs	r2, #0
 800de5a:	61bb      	str	r3, [r7, #24]
 800de5c:	61fa      	str	r2, [r7, #28]
 800de5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de62:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800de66:	4621      	mov	r1, r4
 800de68:	428a      	cmp	r2, r1
 800de6a:	4629      	mov	r1, r5
 800de6c:	418b      	sbcs	r3, r1
 800de6e:	d203      	bcs.n	800de78 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800de70:	2301      	movs	r3, #1
 800de72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800de76:	e002      	b.n	800de7e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800de7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 810b 	beq.w	800e09e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800de88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8a:	2200      	movs	r2, #0
 800de8c:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800de8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de90:	f7ff fb80 	bl	800d594 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800de94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de96:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800de9a:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800de9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800dea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deaa:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800deb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800deb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb4:	1ad2      	subs	r2, r2, r3
 800deb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb8:	4413      	add	r3, r2
 800deba:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800debc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800debe:	2b00      	cmp	r3, #0
 800dec0:	da02      	bge.n	800dec8 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800dec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dec4:	425b      	negs	r3, r3
 800dec6:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800dec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	461a      	mov	r2, r3
 800dece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ded0:	4293      	cmp	r3, r2
 800ded2:	dd0c      	ble.n	800deee <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ded4:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ded6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800ded8:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800deda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dedc:	429a      	cmp	r2, r3
 800dede:	da03      	bge.n	800dee8 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800dee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dee2:	2201      	movs	r2, #1
 800dee4:	709a      	strb	r2, [r3, #2]
 800dee6:	e002      	b.n	800deee <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800dee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deea:	2202      	movs	r2, #2
 800deec:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800deee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800def6:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800def8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	429a      	cmp	r2, r3
 800df02:	d906      	bls.n	800df12 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800df04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df06:	2201      	movs	r2, #1
 800df08:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800df0a:	2302      	movs	r3, #2
 800df0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800df10:	e014      	b.n	800df3c <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800df12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800df18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df1a:	2000      	movs	r0, #0
 800df1c:	6139      	str	r1, [r7, #16]
 800df1e:	6178      	str	r0, [r7, #20]
 800df20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800df24:	4621      	mov	r1, r4
 800df26:	1851      	adds	r1, r2, r1
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	4629      	mov	r1, r5
 800df2c:	eb43 0101 	adc.w	r1, r3, r1
 800df30:	60f9      	str	r1, [r7, #12]
 800df32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800df38:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800df3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	429a      	cmp	r2, r3
 800df46:	d202      	bcs.n	800df4e <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800df48:	2301      	movs	r3, #1
 800df4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800df4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df50:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800df54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2200      	movs	r2, #0
 800df5a:	603b      	str	r3, [r7, #0]
 800df5c:	607a      	str	r2, [r7, #4]
 800df5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df62:	f7f2 f9ad 	bl	80002c0 <__aeabi_uldivmod>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
		xtalk_offset_out =
 800df6a:	4613      	mov	r3, r2
 800df6c:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800df6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	1ad2      	subs	r2, r2, r3
 800df74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df76:	4413      	add	r3, r2
 800df78:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800df7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	da02      	bge.n	800df86 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800df80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df82:	425b      	negs	r3, r3
 800df84:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800df86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d112      	bne.n	800dfb4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800df8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df90:	69db      	ldr	r3, [r3, #28]
 800df92:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800df94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df96:	4293      	cmp	r3, r2
 800df98:	db0c      	blt.n	800dfb4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800df9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800df9e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800dfa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	da03      	bge.n	800dfae <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800dfa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	70da      	strb	r2, [r3, #3]
 800dfac:	e002      	b.n	800dfb4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800dfae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800dfb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d108      	bne.n	800dfce <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800dfbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfbe:	69db      	ldr	r3, [r3, #28]
 800dfc0:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800dfc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	da02      	bge.n	800dfce <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800dfc8:	2302      	movs	r3, #2
 800dfca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800dfce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800dfd4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d112      	bne.n	800e002 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800dfdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfde:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00e      	beq.n	800e002 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800dfe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800dfec:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800dff0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d905      	bls.n	800e002 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800dff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dff8:	2201      	movs	r2, #1
 800dffa:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800dffc:	2302      	movs	r3, #2
 800dffe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800e002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e004:	7c1b      	ldrb	r3, [r3, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d007      	beq.n	800e01a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800e00a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e00c:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800e00e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e010:	429a      	cmp	r2, r3
 800e012:	d902      	bls.n	800e01a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800e014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e01a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e01c:	7c1b      	ldrb	r3, [r3, #16]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d107      	bne.n	800e032 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800e022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e024:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800e026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e028:	429a      	cmp	r2, r3
 800e02a:	d202      	bcs.n	800e032 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800e02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800e032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e034:	089b      	lsrs	r3, r3, #2
 800e036:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800e038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e03a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e03e:	d301      	bcc.n	800e044 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800e040:	4b3e      	ldr	r3, [pc, #248]	; (800e13c <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800e042:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800e044:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10d      	bne.n	800e068 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e04c:	2300      	movs	r3, #0
 800e04e:	9301      	str	r3, [sp, #4]
 800e050:	2301      	movs	r3, #1
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e056:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e058:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e05a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e05c:	f7ff fc00 	bl	800d860 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800e060:	2302      	movs	r3, #2
 800e062:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e066:	e009      	b.n	800e07c <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e068:	2301      	movs	r3, #1
 800e06a:	9301      	str	r3, [sp, #4]
 800e06c:	2301      	movs	r3, #1
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e072:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e074:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e078:	f7ff fbf2 	bl	800d860 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e07c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e080:	2b02      	cmp	r3, #2
 800e082:	d10c      	bne.n	800e09e <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800e084:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e086:	f04f 0200 	mov.w	r2, #0
 800e08a:	f04f 0300 	mov.w	r3, #0
 800e08e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e094:	2200      	movs	r2, #0
 800e096:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e09a:	2200      	movs	r2, #0
 800e09c:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800e0a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d140      	bne.n	800e12e <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800e0ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b4:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800e0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b8:	691a      	ldr	r2, [r3, #16]
 800e0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d202      	bcs.n	800e0c8 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800e0c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0cc:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800e0ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d110      	bne.n	800e0f8 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e0e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0e6:	f7ff fbbb 	bl	800d860 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800e0ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800e0f6:	e009      	b.n	800e10c <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e102:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e104:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e108:	f7ff fbaa 	bl	800d860 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800e10c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800e110:	2b02      	cmp	r3, #2
 800e112:	d10c      	bne.n	800e12e <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800e114:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e116:	f04f 0200 	mov.w	r2, #0
 800e11a:	f04f 0300 	mov.w	r3, #0
 800e11e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800e122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e12a:	2200      	movs	r2, #0
 800e12c:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e12e:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800e132:	4618      	mov	r0, r3
 800e134:	3780      	adds	r7, #128	; 0x80
 800e136:	46bd      	mov	sp, r7
 800e138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e13c:	0003ffff 	.word	0x0003ffff

0800e140 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e148:	2300      	movs	r3, #0
 800e14a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	3318      	adds	r3, #24
 800e150:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e158:	3308      	adds	r3, #8
 800e15a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e162:	2201      	movs	r2, #1
 800e164:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e18a:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e194:	461a      	mov	r2, r3
 800e196:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e19a:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1be:	461a      	mov	r2, r3
 800e1c0:	23c8      	movs	r3, #200	; 0xc8
 800e1c2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1d2:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1dc:	461a      	mov	r2, r3
 800e1de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1e2:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	4b3a      	ldr	r3, [pc, #232]	; (800e2d8 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800e1f0:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e200:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e216:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e21a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e224:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e228:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23e:	461a      	mov	r2, r3
 800e240:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e244:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24e:	461a      	mov	r2, r3
 800e250:	230a      	movs	r3, #10
 800e252:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e25c:	461a      	mov	r2, r3
 800e25e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e262:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e26c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e270:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e27a:	461a      	mov	r2, r3
 800e27c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e280:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e28a:	461a      	mov	r2, r3
 800e28c:	2300      	movs	r3, #0
 800e28e:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e298:	461a      	mov	r2, r3
 800e29a:	2300      	movs	r3, #0
 800e29c:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e2a6:	3310      	adds	r3, #16
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f04f 0200 	mov.w	r2, #0
 800e2ae:	f04f 0300 	mov.w	r3, #0
 800e2b2:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2bc:	461a      	mov	r2, r3
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f000 f809 	bl	800e2dc <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e2ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3718      	adds	r7, #24
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	000ff800 	.word	0x000ff800

0800e2dc <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e2ee:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	2200      	movs	r2, #0
 800e300:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2200      	movs	r2, #0
 800e306:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	2200      	movs	r2, #0
 800e30c:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	2200      	movs	r2, #0
 800e312:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2200      	movs	r2, #0
 800e318:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2200      	movs	r2, #0
 800e31e:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2200      	movs	r2, #0
 800e32a:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	3318      	adds	r3, #24
 800e34c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e354:	461a      	mov	r2, r3
 800e356:	2300      	movs	r3, #0
 800e358:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e362:	2200      	movs	r2, #0
 800e364:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e36e:	2200      	movs	r2, #0
 800e370:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e37a:	3308      	adds	r3, #8
 800e37c:	2218      	movs	r2, #24
 800e37e:	2100      	movs	r1, #0
 800e380:	4618      	mov	r0, r3
 800e382:	f00b fc81 	bl	8019c88 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e39a:	2300      	movs	r3, #0
 800e39c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3318      	adds	r3, #24
 800e3a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3aa:	2203      	movs	r2, #3
 800e3ac:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3fe:	461a      	mov	r2, r3
 800e400:	2300      	movs	r3, #0
 800e402:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e422:	b480      	push	{r7}
 800e424:	b085      	sub	sp, #20
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e42a:	2300      	movs	r3, #0
 800e42c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3318      	adds	r3, #24
 800e432:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e43a:	22ff      	movs	r2, #255	; 0xff
 800e43c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e446:	2200      	movs	r2, #0
 800e448:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e452:	461a      	mov	r2, r3
 800e454:	2300      	movs	r3, #0
 800e456:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e460:	2200      	movs	r2, #0
 800e462:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e46c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e470:	2b00      	cmp	r3, #0
 800e472:	d007      	beq.n	800e484 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e47a:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e48a:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d007      	beq.n	800e4a2 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e498:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b087      	sub	sp, #28
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	60f8      	str	r0, [r7, #12]
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	229b      	movs	r2, #155	; 0x9b
 800e4da:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3318      	adds	r3, #24
 800e4f8:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e50a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e51a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e536:	f003 0303 	and.w	r3, r3, #3
 800e53a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e542:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e54a:	4413      	add	r3, r2
 800e54c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e562:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e56c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e576:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e580:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3714      	adds	r7, #20
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr

0800e590 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e590:	b480      	push	{r7}
 800e592:	b087      	sub	sp, #28
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	3318      	adds	r3, #24
 800e59e:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e5ae:	2b07      	cmp	r3, #7
 800e5b0:	bf0c      	ite	eq
 800e5b2:	2301      	moveq	r3, #1
 800e5b4:	2300      	movne	r3, #0
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	75fb      	strb	r3, [r7, #23]
 800e5be:	e019      	b.n	800e5f4 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e5c0:	7df9      	ldrb	r1, [r7, #23]
 800e5c2:	7bbb      	ldrb	r3, [r7, #14]
 800e5c4:	6938      	ldr	r0, [r7, #16]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	0052      	lsls	r2, r2, #1
 800e5ca:	441a      	add	r2, r3
 800e5cc:	0153      	lsls	r3, r2, #5
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	005b      	lsls	r3, r3, #1
 800e5d4:	440b      	add	r3, r1
 800e5d6:	019b      	lsls	r3, r3, #6
 800e5d8:	4413      	add	r3, r2
 800e5da:	4403      	add	r3, r0
 800e5dc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e5e0:	3314      	adds	r3, #20
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	dd02      	ble.n	800e5ee <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e5e8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e5ee:	7dfb      	ldrb	r3, [r7, #23]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	75fb      	strb	r3, [r7, #23]
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	2b05      	cmp	r3, #5
 800e5f8:	d9e2      	bls.n	800e5c0 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	7dba      	ldrb	r2, [r7, #22]
 800e5fe:	701a      	strb	r2, [r3, #0]

	return status;
 800e600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e604:	4618      	mov	r0, r3
 800e606:	371c      	adds	r7, #28
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e61e:	88fb      	ldrh	r3, [r7, #6]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d005      	beq.n	800e630 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e62a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e62e:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e630:	68fb      	ldr	r3, [r7, #12]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e63e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e642:	b089      	sub	sp, #36	; 0x24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e64e:	f04f 0200 	mov.w	r2, #0
 800e652:	f04f 0300 	mov.w	r3, #0
 800e656:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e65a:	2300      	movs	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	fb02 f303 	mul.w	r3, r2, r3
 800e666:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	0b1b      	lsrs	r3, r3, #12
 800e66c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2200      	movs	r2, #0
 800e672:	469a      	mov	sl, r3
 800e674:	4693      	mov	fp, r2
 800e676:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	fb02 f303 	mul.w	r3, r2, r3
 800e682:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	091b      	lsrs	r3, r3, #4
 800e688:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2200      	movs	r2, #0
 800e68e:	4698      	mov	r8, r3
 800e690:	4691      	mov	r9, r2
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	fb08 f203 	mul.w	r2, r8, r3
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	fb09 f303 	mul.w	r3, r9, r3
 800e69e:	4413      	add	r3, r2
 800e6a0:	69ba      	ldr	r2, [r7, #24]
 800e6a2:	fba2 4508 	umull	r4, r5, r2, r8
 800e6a6:	442b      	add	r3, r5
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e6ae:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e6b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e6b6:	f04f 0200 	mov.w	r2, #0
 800e6ba:	f04f 0300 	mov.w	r3, #0
 800e6be:	0b02      	lsrs	r2, r0, #12
 800e6c0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e6c4:	0b0b      	lsrs	r3, r1, #12
 800e6c6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e6ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d305      	bcc.n	800e6de <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d6:	f04f 0300 	mov.w	r3, #0
 800e6da:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e6e2:	697b      	ldr	r3, [r7, #20]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3724      	adds	r7, #36	; 0x24
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e6ee:	4770      	bx	lr

0800e6f0 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e6f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6f4:	b096      	sub	sp, #88	; 0x58
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e6fa:	460b      	mov	r3, r1
 800e6fc:	627a      	str	r2, [r7, #36]	; 0x24
 800e6fe:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e700:	f04f 0200 	mov.w	r2, #0
 800e704:	f04f 0300 	mov.w	r3, #0
 800e708:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e70c:	f04f 0200 	mov.w	r2, #0
 800e710:	f04f 0300 	mov.w	r3, #0
 800e714:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	17da      	asrs	r2, r3, #31
 800e720:	469a      	mov	sl, r3
 800e722:	4693      	mov	fp, r2
 800e724:	4652      	mov	r2, sl
 800e726:	465b      	mov	r3, fp
 800e728:	f04f 0000 	mov.w	r0, #0
 800e72c:	f04f 0100 	mov.w	r1, #0
 800e730:	0159      	lsls	r1, r3, #5
 800e732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e736:	0150      	lsls	r0, r2, #5
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	ebb2 040a 	subs.w	r4, r2, sl
 800e740:	eb63 050b 	sbc.w	r5, r3, fp
 800e744:	f04f 0200 	mov.w	r2, #0
 800e748:	f04f 0300 	mov.w	r3, #0
 800e74c:	00ab      	lsls	r3, r5, #2
 800e74e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e752:	00a2      	lsls	r2, r4, #2
 800e754:	4614      	mov	r4, r2
 800e756:	461d      	mov	r5, r3
 800e758:	eb14 080a 	adds.w	r8, r4, sl
 800e75c:	eb45 090b 	adc.w	r9, r5, fp
 800e760:	f04f 0200 	mov.w	r2, #0
 800e764:	f04f 0300 	mov.w	r3, #0
 800e768:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e76c:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e770:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e774:	4690      	mov	r8, r2
 800e776:	4699      	mov	r9, r3
 800e778:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e77c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00d      	beq.n	800e79e <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e782:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e784:	2200      	movs	r2, #0
 800e786:	61bb      	str	r3, [r7, #24]
 800e788:	61fa      	str	r2, [r7, #28]
 800e78a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e78e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e792:	f7f1 fd95 	bl	80002c0 <__aeabi_uldivmod>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02a      	beq.n	800e7fa <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e7a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e7a8:	f04f 0200 	mov.w	r2, #0
 800e7ac:	f04f 0300 	mov.w	r3, #0
 800e7b0:	02cb      	lsls	r3, r1, #11
 800e7b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e7b6:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e7b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7ba:	0849      	lsrs	r1, r1, #1
 800e7bc:	2000      	movs	r0, #0
 800e7be:	6139      	str	r1, [r7, #16]
 800e7c0:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e7c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	1851      	adds	r1, r2, r1
 800e7ca:	6039      	str	r1, [r7, #0]
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	eb43 0101 	adc.w	r1, r3, r1
 800e7d2:	6079      	str	r1, [r7, #4]
 800e7d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e7d8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	2200      	movs	r2, #0
 800e7e0:	60bb      	str	r3, [r7, #8]
 800e7e2:	60fa      	str	r2, [r7, #12]
 800e7e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e7e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e7ec:	f7f1 fd68 	bl	80002c0 <__aeabi_uldivmod>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e7f8:	e00b      	b.n	800e812 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e7fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e7fe:	f04f 0200 	mov.w	r2, #0
 800e802:	f04f 0300 	mov.w	r3, #0
 800e806:	02cb      	lsls	r3, r1, #11
 800e808:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e80c:	02c2      	lsls	r2, r0, #11
 800e80e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e814:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3758      	adds	r7, #88	; 0x58
 800e81c:	46bd      	mov	sp, r7
 800e81e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e822 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e822:	b480      	push	{r7}
 800e824:	b085      	sub	sp, #20
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e82a:	2300      	movs	r3, #0
 800e82c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e832:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e834:	e002      	b.n	800e83c <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	089b      	lsrs	r3, r3, #2
 800e83a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d8f8      	bhi.n	800e836 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e844:	e017      	b.n	800e876 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	4413      	add	r3, r2
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d30b      	bcc.n	800e86a <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	4413      	add	r3, r2
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	085b      	lsrs	r3, r3, #1
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	4413      	add	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	e002      	b.n	800e870 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	085b      	lsrs	r3, r3, #1
 800e86e:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	089b      	lsrs	r3, r3, #2
 800e874:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1e4      	bne.n	800e846 <VL53L1_isqrt+0x24>
	}

	return res;
 800e87c:	68fb      	ldr	r3, [r7, #12]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f000 faa5 	bl	800edf0 <VL53L1_decode_vcsel_period>
 800e8a6:	4603      	mov	r3, r0
	period = 2048 *
 800e8a8:	02db      	lsls	r3, r3, #11
 800e8aa:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8c4:	02db      	lsls	r3, r3, #11
 800e8c6:	68fa      	ldr	r2, [r7, #12]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8d2:	02db      	lsls	r3, r3, #11
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d009      	beq.n	800e8f4 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	fb01 f202 	mul.w	r2, r1, r2
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	e001      	b.n	800e8f8 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e902:	bf00      	nop
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e91c:	6838      	ldr	r0, [r7, #0]
 800e91e:	f000 fb90 	bl	800f042 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff ff7a 	bl	800e822 <VL53L1_isqrt>
 800e92e:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e930:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	fb02 f303 	mul.w	r3, r2, r3
 800e93a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	3307      	adds	r3, #7
 800e940:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	111b      	asrs	r3, r3, #4
 800e946:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	4413      	add	r3, r2
 800e952:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2200      	movs	r2, #0
 800e960:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
 800e968:	e01e      	b.n	800e9a8 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e96a:	7bfa      	ldrb	r2, [r7, #15]
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	3206      	adds	r2, #6
 800e970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	429a      	cmp	r2, r3
 800e978:	dd13      	ble.n	800e9a2 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e980:	7bf9      	ldrb	r1, [r7, #15]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	3106      	adds	r1, #6
 800e986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e98a:	441a      	add	r2, r3
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e998:	3301      	adds	r3, #1
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	73fb      	strb	r3, [r7, #15]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	7a9b      	ldrb	r3, [r3, #10]
 800e9ac:	7bfa      	ldrb	r2, [r7, #15]
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d3db      	bcc.n	800e96a <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01c      	beq.n	800e9f6 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e9ce:	683a      	ldr	r2, [r7, #0]
 800e9d0:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e9d4:	0852      	lsrs	r2, r2, #1
 800e9d6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e9d8:	441a      	add	r2, r3
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e9e6:	683a      	ldr	r2, [r7, #0]
 800e9e8:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e9ec:	fb93 f2f2 	sdiv	r2, r3, r2
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e9fe:	b480      	push	{r7}
 800ea00:	b085      	sub	sp, #20
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7b1b      	ldrb	r3, [r3, #12]
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b07      	cmp	r3, #7
 800ea1c:	d13a      	bne.n	800ea94 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ea22:	2300      	movs	r3, #0
 800ea24:	73bb      	strb	r3, [r7, #14]
 800ea26:	e01f      	b.n	800ea68 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	7b1b      	ldrb	r3, [r3, #12]
 800ea30:	f003 0307 	and.w	r3, r3, #7
 800ea34:	2b07      	cmp	r3, #7
 800ea36:	d014      	beq.n	800ea62 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800ea38:	7bba      	ldrb	r2, [r7, #14]
 800ea3a:	7b7b      	ldrb	r3, [r7, #13]
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	440a      	add	r2, r1
 800ea40:	7b11      	ldrb	r1, [r2, #12]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	460a      	mov	r2, r1
 800ea48:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800ea4a:	7bba      	ldrb	r2, [r7, #14]
 800ea4c:	7b7b      	ldrb	r3, [r7, #13]
 800ea4e:	6879      	ldr	r1, [r7, #4]
 800ea50:	440a      	add	r2, r1
 800ea52:	7c91      	ldrb	r1, [r2, #18]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	4413      	add	r3, r2
 800ea58:	460a      	mov	r2, r1
 800ea5a:	749a      	strb	r2, [r3, #18]
				i++;
 800ea5c:	7b7b      	ldrb	r3, [r7, #13]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ea62:	7bbb      	ldrb	r3, [r7, #14]
 800ea64:	3301      	adds	r3, #1
 800ea66:	73bb      	strb	r3, [r7, #14]
 800ea68:	7bbb      	ldrb	r3, [r7, #14]
 800ea6a:	2b05      	cmp	r3, #5
 800ea6c:	d9dc      	bls.n	800ea28 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ea6e:	7b7b      	ldrb	r3, [r7, #13]
 800ea70:	73bb      	strb	r3, [r7, #14]
 800ea72:	e00c      	b.n	800ea8e <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	4413      	add	r3, r2
 800ea7a:	2210      	movs	r2, #16
 800ea7c:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800ea7e:	7bbb      	ldrb	r3, [r7, #14]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	4413      	add	r3, r2
 800ea84:	2200      	movs	r2, #0
 800ea86:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ea88:	7bbb      	ldrb	r3, [r7, #14]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	73bb      	strb	r3, [r7, #14]
 800ea8e:	7bbb      	ldrb	r3, [r7, #14]
 800ea90:	2b05      	cmp	r3, #5
 800ea92:	d9ef      	bls.n	800ea74 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	7adb      	ldrb	r3, [r3, #11]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d023      	beq.n	800eae4 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7adb      	ldrb	r3, [r3, #11]
 800eaa0:	73fb      	strb	r3, [r7, #15]
 800eaa2:	e00f      	b.n	800eac4 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800eaa4:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	7ad2      	ldrb	r2, [r2, #11]
 800eaac:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3106      	adds	r1, #6
 800eab2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3206      	adds	r2, #6
 800eaba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800eabe:	7bfb      	ldrb	r3, [r7, #15]
 800eac0:	3301      	adds	r3, #1
 800eac2:	73fb      	strb	r3, [r7, #15]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800eac8:	7bfa      	ldrb	r2, [r7, #15]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d3ea      	bcc.n	800eaa4 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	72da      	strb	r2, [r3, #11]
	}
}
 800eae4:	bf00      	nop
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800eb02:	88fb      	ldrh	r3, [r7, #6]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fd83 	bl	800e610 <VL53L1_calc_pll_period_us>
 800eb0a:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800eb10:	f249 2257 	movw	r2, #37463	; 0x9257
 800eb14:	fb02 f303 	mul.w	r3, r2, r3
 800eb18:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800eb20:	0c1b      	lsrs	r3, r3, #16
 800eb22:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800eb24:	68bb      	ldr	r3, [r7, #8]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b087      	sub	sp, #28
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800eb3c:	2307      	movs	r3, #7
 800eb3e:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800eb40:	2300      	movs	r3, #0
 800eb42:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb4a:	db03      	blt.n	800eb54 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800eb4c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800eb50:	617b      	str	r3, [r7, #20]
 800eb52:	e004      	b.n	800eb5e <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dd01      	ble.n	800eb5e <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb64:	dd02      	ble.n	800eb6c <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800eb66:	2303      	movs	r3, #3
 800eb68:	613b      	str	r3, [r7, #16]
 800eb6a:	e001      	b.n	800eb70 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800eb6c:	2307      	movs	r3, #7
 800eb6e:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d009      	beq.n	800eb8a <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	409a      	lsls	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	085b      	lsrs	r3, r3, #1
 800eb80:	441a      	add	r2, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb88:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eb90:	dd02      	ble.n	800eb98 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb9e:	d302      	bcc.n	800eba6 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800eba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eba4:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ebaa:	89fb      	ldrh	r3, [r7, #14]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	371c      	adds	r7, #28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b087      	sub	sp, #28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	603b      	str	r3, [r7, #0]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800ebd0:	88fb      	ldrh	r3, [r7, #6]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d010      	beq.n	800ebf8 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	021a      	lsls	r2, r3, #8
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe0:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800ebe2:	88fb      	ldrh	r3, [r7, #6]
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800ebee:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800ebf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]
 800ebf6:	e004      	b.n	800ec02 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ec00:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d901      	bls.n	800ec0e <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800ec12:	8a7b      	ldrh	r3, [r7, #18]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	371c      	adds	r7, #28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	b093      	sub	sp, #76	; 0x4c
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	461e      	mov	r6, r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ec2e:	460b      	mov	r3, r1
 800ec30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ec32:	4613      	mov	r3, r2
 800ec34:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ec36:	4633      	mov	r3, r6
 800ec38:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800ec40:	f04f 0200 	mov.w	r2, #0
 800ec44:	f04f 0300 	mov.w	r3, #0
 800ec48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800ec50:	2300      	movs	r3, #0
 800ec52:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800ec54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fcda 	bl	800e610 <VL53L1_calc_pll_period_us>
 800ec5c:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800ec5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ec60:	2200      	movs	r2, #0
 800ec62:	623b      	str	r3, [r7, #32]
 800ec64:	627a      	str	r2, [r7, #36]	; 0x24
 800ec66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec68:	2200      	movs	r2, #0
 800ec6a:	61bb      	str	r3, [r7, #24]
 800ec6c:	61fa      	str	r2, [r7, #28]
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ec74:	4602      	mov	r2, r0
 800ec76:	1a9b      	subs	r3, r3, r2
 800ec78:	613b      	str	r3, [r7, #16]
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	460a      	mov	r2, r1
 800ec7e:	eb63 0302 	sbc.w	r3, r3, r2
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ec88:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800ec8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec8e:	2200      	movs	r2, #0
 800ec90:	469a      	mov	sl, r3
 800ec92:	4693      	mov	fp, r2
 800ec94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec96:	fb0a f203 	mul.w	r2, sl, r3
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9c:	fb0b f303 	mul.w	r3, fp, r3
 800eca0:	4413      	add	r3, r2
 800eca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eca4:	fba2 890a 	umull	r8, r9, r2, sl
 800eca8:	444b      	add	r3, r9
 800ecaa:	4699      	mov	r9, r3
 800ecac:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800ecb0:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800ecb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	da08      	bge.n	800ecce <VL53L1_range_maths+0xae>
 800ecbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ecc0:	1851      	adds	r1, r2, r1
 800ecc2:	60b9      	str	r1, [r7, #8]
 800ecc4:	f143 0300 	adc.w	r3, r3, #0
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ecce:	f04f 0000 	mov.w	r0, #0
 800ecd2:	f04f 0100 	mov.w	r1, #0
 800ecd6:	0a50      	lsrs	r0, r2, #9
 800ecd8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ecdc:	1259      	asrs	r1, r3, #9
 800ecde:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ece2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece4:	f249 2257 	movw	r2, #37463	; 0x9257
 800ece8:	fb03 f202 	mul.w	r2, r3, r2
 800ecec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecee:	2100      	movs	r1, #0
 800ecf0:	fb01 f303 	mul.w	r3, r1, r3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecf8:	f249 2157 	movw	r1, #37463	; 0x9257
 800ecfc:	fba2 4501 	umull	r4, r5, r2, r1
 800ed00:	442b      	add	r3, r5
 800ed02:	461d      	mov	r5, r3
 800ed04:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800ed08:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800ed0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da07      	bge.n	800ed24 <VL53L1_range_maths+0x104>
 800ed14:	4934      	ldr	r1, [pc, #208]	; (800ede8 <VL53L1_range_maths+0x1c8>)
 800ed16:	1851      	adds	r1, r2, r1
 800ed18:	6039      	str	r1, [r7, #0]
 800ed1a:	f143 0300 	adc.w	r3, r3, #0
 800ed1e:	607b      	str	r3, [r7, #4]
 800ed20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed24:	f04f 0000 	mov.w	r0, #0
 800ed28:	f04f 0100 	mov.w	r1, #0
 800ed2c:	0d90      	lsrs	r0, r2, #22
 800ed2e:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800ed32:	1599      	asrs	r1, r3, #22
 800ed34:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800ed38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ed3c:	4413      	add	r3, r2
 800ed3e:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800ed40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ed44:	fb02 f303 	mul.w	r3, r2, r3
 800ed48:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800ed4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ed50:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800ed52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da01      	bge.n	800ed5c <VL53L1_range_maths+0x13c>
 800ed58:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ed5c:	12db      	asrs	r3, r3, #11
 800ed5e:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ed60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d130      	bne.n	800edca <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800ed68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	009b      	lsls	r3, r3, #2
 800ed6e:	4413      	add	r3, r2
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ed74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	da00      	bge.n	800ed7c <VL53L1_range_maths+0x15c>
 800ed7a:	3303      	adds	r3, #3
 800ed7c:	109b      	asrs	r3, r3, #2
 800ed7e:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ed80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed82:	4b1a      	ldr	r3, [pc, #104]	; (800edec <VL53L1_range_maths+0x1cc>)
 800ed84:	fb83 2301 	smull	r2, r3, r3, r1
 800ed88:	109a      	asrs	r2, r3, #2
 800ed8a:	17cb      	asrs	r3, r1, #31
 800ed8c:	1ad2      	subs	r2, r2, r3
 800ed8e:	4613      	mov	r3, r2
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	4413      	add	r3, r2
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	1aca      	subs	r2, r1, r3
 800ed98:	2a04      	cmp	r2, #4
 800ed9a:	dc09      	bgt.n	800edb0 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9e:	4a13      	ldr	r2, [pc, #76]	; (800edec <VL53L1_range_maths+0x1cc>)
 800eda0:	fb82 1203 	smull	r1, r2, r2, r3
 800eda4:	1092      	asrs	r2, r2, #2
 800eda6:	17db      	asrs	r3, r3, #31
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	b21b      	sxth	r3, r3
 800edac:	647b      	str	r3, [r7, #68]	; 0x44
 800edae:	e015      	b.n	800eddc <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800edb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb2:	4a0e      	ldr	r2, [pc, #56]	; (800edec <VL53L1_range_maths+0x1cc>)
 800edb4:	fb82 1203 	smull	r1, r2, r2, r3
 800edb8:	1092      	asrs	r2, r2, #2
 800edba:	17db      	asrs	r3, r3, #31
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	3301      	adds	r3, #1
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	b21b      	sxth	r3, r3
 800edc6:	647b      	str	r3, [r7, #68]	; 0x44
 800edc8:	e008      	b.n	800eddc <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800edca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d104      	bne.n	800eddc <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800edd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd4:	0fda      	lsrs	r2, r3, #31
 800edd6:	4413      	add	r3, r2
 800edd8:	105b      	asrs	r3, r3, #1
 800edda:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800eddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800edde:	4618      	mov	r0, r3
 800ede0:	374c      	adds	r7, #76	; 0x4c
 800ede2:	46bd      	mov	sp, r7
 800ede4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede8:	003fffff 	.word	0x003fffff
 800edec:	66666667 	.word	0x66666667

0800edf0 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	3301      	adds	r3, #1
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800ee16:	b480      	push	{r7}
 800ee18:	b083      	sub	sp, #12
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	781a      	ldrb	r2, [r3, #0]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	7a5a      	ldrb	r2, [r3, #9]
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	685a      	ldr	r2, [r3, #4]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	605a      	str	r2, [r3, #4]
}
 800ee86:	bf00      	nop
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr

0800ee92 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b087      	sub	sp, #28
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	60f8      	str	r0, [r7, #12]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	607a      	str	r2, [r7, #4]
 800ee9e:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2203      	movs	r2, #3
 800eea8:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2203      	movs	r2, #3
 800eeae:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2218      	movs	r2, #24
 800eec6:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800eec8:	897b      	ldrh	r3, [r7, #10]
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2200      	movs	r2, #0
 800ef42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ef66:	2300      	movs	r3, #0
 800ef68:	82fb      	strh	r3, [r7, #22]
 800ef6a:	e009      	b.n	800ef80 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ef6c:	8afb      	ldrh	r3, [r7, #22]
 800ef6e:	8afa      	ldrh	r2, [r7, #22]
 800ef70:	b2d1      	uxtb	r1, r2
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	4413      	add	r3, r2
 800ef76:	460a      	mov	r2, r1
 800ef78:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ef7a:	8afb      	ldrh	r3, [r7, #22]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	82fb      	strh	r3, [r7, #22]
 800ef80:	8afb      	ldrh	r3, [r7, #22]
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d9f2      	bls.n	800ef6c <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ef86:	2300      	movs	r3, #0
 800ef88:	82fb      	strh	r3, [r7, #22]
 800ef8a:	e007      	b.n	800ef9c <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ef8c:	8afb      	ldrh	r3, [r7, #22]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	4413      	add	r3, r2
 800ef92:	2201      	movs	r2, #1
 800ef94:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ef96:	8afb      	ldrh	r3, [r7, #22]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	82fb      	strh	r3, [r7, #22]
 800ef9c:	8afb      	ldrh	r3, [r7, #22]
 800ef9e:	2b05      	cmp	r3, #5
 800efa0:	d9f4      	bls.n	800ef8c <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800efa2:	2300      	movs	r3, #0
 800efa4:	82fb      	strh	r3, [r7, #22]
 800efa6:	e013      	b.n	800efd0 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800efa8:	8afa      	ldrh	r2, [r7, #22]
 800efaa:	897b      	ldrh	r3, [r7, #10]
 800efac:	429a      	cmp	r2, r3
 800efae:	d206      	bcs.n	800efbe <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800efb0:	8afa      	ldrh	r2, [r7, #22]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	3206      	adds	r2, #6
 800efb6:	68f9      	ldr	r1, [r7, #12]
 800efb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800efbc:	e005      	b.n	800efca <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800efbe:	8afa      	ldrh	r2, [r7, #22]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	3206      	adds	r2, #6
 800efc4:	2100      	movs	r1, #0
 800efc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800efca:	8afb      	ldrh	r3, [r7, #22]
 800efcc:	3301      	adds	r3, #1
 800efce:	82fb      	strh	r3, [r7, #22]
 800efd0:	8afb      	ldrh	r3, [r7, #22]
 800efd2:	2b17      	cmp	r3, #23
 800efd4:	d9e8      	bls.n	800efa8 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800efd6:	bf00      	nop
 800efd8:	bf00      	nop
 800efda:	371c      	adds	r7, #28
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800eff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	da10      	bge.n	800f01c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	43db      	mvns	r3, r3
 800effe:	b2db      	uxtb	r3, r3
 800f000:	f003 0307 	and.w	r3, r3, #7
 800f004:	b2db      	uxtb	r3, r3
 800f006:	3308      	adds	r3, #8
 800f008:	b2da      	uxtb	r2, r3
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800f00e:	7bfb      	ldrb	r3, [r7, #15]
 800f010:	3b80      	subs	r3, #128	; 0x80
 800f012:	10db      	asrs	r3, r3, #3
 800f014:	b2da      	uxtb	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800f01a:	e00c      	b.n	800f036 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	f003 0307 	and.w	r3, r3, #7
 800f022:	b2da      	uxtb	r2, r3
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800f028:	7bfb      	ldrb	r3, [r7, #15]
 800f02a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f02e:	10db      	asrs	r3, r3, #3
 800f030:	b2da      	uxtb	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	701a      	strb	r2, [r3, #0]
}
 800f036:	bf00      	nop
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr

0800f042 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f042:	b480      	push	{r7}
 800f044:	b085      	sub	sp, #20
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f04e:	2300      	movs	r3, #0
 800f050:	73fb      	strb	r3, [r7, #15]
 800f052:	e02c      	b.n	800f0ae <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800f054:	7bfb      	ldrb	r3, [r7, #15]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d009      	beq.n	800f06e <VL53L1_hist_find_min_max_bin_values+0x2c>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800f060:	7bf9      	ldrb	r1, [r7, #15]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3106      	adds	r1, #6
 800f066:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	db07      	blt.n	800f07e <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800f06e:	7bfa      	ldrb	r2, [r7, #15]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	3206      	adds	r2, #6
 800f074:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d009      	beq.n	800f098 <VL53L1_hist_find_min_max_bin_values+0x56>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f08a:	7bf9      	ldrb	r1, [r7, #15]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	3106      	adds	r1, #6
 800f090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f094:	429a      	cmp	r2, r3
 800f096:	dc07      	bgt.n	800f0a8 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800f098:	7bfa      	ldrb	r2, [r7, #15]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	3206      	adds	r2, #6
 800f09e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	73fb      	strb	r3, [r7, #15]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	7a9b      	ldrb	r3, [r3, #10]
 800f0b2:	7bfa      	ldrb	r2, [r7, #15]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d3cd      	bcc.n	800f054 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	7adb      	ldrb	r3, [r3, #11]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d03a      	beq.n	800f150 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	73fb      	strb	r3, [r7, #15]
 800f0f0:	e00e      	b.n	800f110 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f0f8:	7bf9      	ldrb	r1, [r7, #15]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	3106      	adds	r1, #6
 800f0fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f102:	441a      	add	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	3301      	adds	r3, #1
 800f10e:	73fb      	strb	r3, [r7, #15]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	7adb      	ldrb	r3, [r3, #11]
 800f114:	7bfa      	ldrb	r2, [r7, #15]
 800f116:	429a      	cmp	r2, r3
 800f118:	d3eb      	bcc.n	800f0f2 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800f12c:	687a      	ldr	r2, [r7, #4]
 800f12e:	7ad2      	ldrb	r2, [r2, #11]
 800f130:	0852      	lsrs	r2, r2, #1
 800f132:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f134:	441a      	add	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800f146:	fb93 f2f2 	sdiv	r2, r3, r2
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800f150:	bf00      	nop
 800f152:	3714      	adds	r7, #20
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800f15c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f160:	b0ca      	sub	sp, #296	; 0x128
 800f162:	af00      	add	r7, sp, #0
 800f164:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f168:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f16c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f170:	4603      	mov	r3, r0
 800f172:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f176:	2300      	movs	r3, #0
 800f178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800f18e:	f04f 0200 	mov.w	r2, #0
 800f192:	f04f 0300 	mov.w	r3, #0
 800f196:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800f1a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800f1a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800f1b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800f1b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1bc:	2300      	movs	r3, #0
 800f1be:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800f1c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800f1c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800f1d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800f1d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f1dc:	2300      	movs	r3, #0
 800f1de:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800f1e0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800f1e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f1ec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f000 80e1 	beq.w	800f3b8 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800f1f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 80da 	beq.w	800f3b8 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800f204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f208:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff f9ff 	bl	800e610 <VL53L1_calc_pll_period_us>
 800f212:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800f216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f21e:	3301      	adds	r3, #1
 800f220:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800f224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f22c:	2110      	movs	r1, #16
 800f22e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f232:	f7ff fa04 	bl	800e63e <VL53L1_duration_maths>
 800f236:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800f238:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f23c:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800f23e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f242:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f246:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f7ff fc6d 	bl	800eb2e <VL53L1_rate_maths>
 800f254:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f256:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f25a:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f25c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f260:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f268:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f26c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	f7ff fa3c 	bl	800e6f0 <VL53L1_events_per_spad_maths>
 800f278:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f27a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f27e:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f284:	8adb      	ldrh	r3, [r3, #22]
 800f286:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f28a:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f28c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f290:	8adb      	ldrh	r3, [r3, #22]
 800f292:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f296:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f298:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f29c:	695b      	ldr	r3, [r3, #20]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 808a 	beq.w	800f3b8 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f2a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2a8:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	461c      	mov	r4, r3
 800f2b0:	4615      	mov	r5, r2
 800f2b2:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f2b6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	462b      	mov	r3, r5
 800f2be:	f04f 0000 	mov.w	r0, #0
 800f2c2:	f04f 0100 	mov.w	r1, #0
 800f2c6:	0159      	lsls	r1, r3, #5
 800f2c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f2cc:	0150      	lsls	r0, r2, #5
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	ebb2 0804 	subs.w	r8, r2, r4
 800f2d6:	eb63 0905 	sbc.w	r9, r3, r5
 800f2da:	f04f 0200 	mov.w	r2, #0
 800f2de:	f04f 0300 	mov.w	r3, #0
 800f2e2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f2e6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f2ea:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f2ee:	4690      	mov	r8, r2
 800f2f0:	4699      	mov	r9, r3
 800f2f2:	eb18 0a04 	adds.w	sl, r8, r4
 800f2f6:	eb49 0b05 	adc.w	fp, r9, r5
 800f2fa:	f04f 0200 	mov.w	r2, #0
 800f2fe:	f04f 0300 	mov.w	r3, #0
 800f302:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f306:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f30a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f30e:	4692      	mov	sl, r2
 800f310:	469b      	mov	fp, r3
 800f312:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f316:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f31a:	f04f 0000 	mov.w	r0, #0
 800f31e:	f04f 0100 	mov.w	r1, #0
 800f322:	0319      	lsls	r1, r3, #12
 800f324:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f328:	0310      	lsls	r0, r2, #12
 800f32a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f32e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f332:	695b      	ldr	r3, [r3, #20]
 800f334:	085b      	lsrs	r3, r3, #1
 800f336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f33a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f33e:	2200      	movs	r2, #0
 800f340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f348:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f34c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f350:	4621      	mov	r1, r4
 800f352:	1851      	adds	r1, r2, r1
 800f354:	65b9      	str	r1, [r7, #88]	; 0x58
 800f356:	4629      	mov	r1, r5
 800f358:	eb43 0101 	adc.w	r1, r3, r1
 800f35c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f35e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f362:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f366:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f36a:	695b      	ldr	r3, [r3, #20]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f372:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f376:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f37a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f37e:	f7f0 ff9f 	bl	80002c0 <__aeabi_uldivmod>
 800f382:	4602      	mov	r2, r0
 800f384:	460b      	mov	r3, r1
 800f386:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f38a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f38e:	8adb      	ldrh	r3, [r3, #22]
 800f390:	b29b      	uxth	r3, r3
 800f392:	2200      	movs	r2, #0
 800f394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f398:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f39c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f3a0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	428a      	cmp	r2, r1
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	418b      	sbcs	r3, r1
 800f3ac:	d204      	bcs.n	800f3b8 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f3ae:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f3b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f3b6:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f3b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f000 82e9 	beq.w	800f996 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f3c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f3c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f000 82e2 	beq.w	800f996 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f3d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3d6:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 82dc 	beq.w	800f996 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f3de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 82d5 	beq.w	800f996 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f3ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f3f0:	885b      	ldrh	r3, [r3, #2]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3f8:	657a      	str	r2, [r7, #84]	; 0x54
 800f3fa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f3fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f402:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f406:	4622      	mov	r2, r4
 800f408:	462b      	mov	r3, r5
 800f40a:	f04f 0000 	mov.w	r0, #0
 800f40e:	f04f 0100 	mov.w	r1, #0
 800f412:	0159      	lsls	r1, r3, #5
 800f414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f418:	0150      	lsls	r0, r2, #5
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	1b11      	subs	r1, r2, r4
 800f420:	64b9      	str	r1, [r7, #72]	; 0x48
 800f422:	eb63 0305 	sbc.w	r3, r3, r5
 800f426:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f428:	f04f 0200 	mov.w	r2, #0
 800f42c:	f04f 0300 	mov.w	r3, #0
 800f430:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f434:	4649      	mov	r1, r9
 800f436:	008b      	lsls	r3, r1, #2
 800f438:	4641      	mov	r1, r8
 800f43a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f43e:	4641      	mov	r1, r8
 800f440:	008a      	lsls	r2, r1, #2
 800f442:	4611      	mov	r1, r2
 800f444:	461a      	mov	r2, r3
 800f446:	460b      	mov	r3, r1
 800f448:	191b      	adds	r3, r3, r4
 800f44a:	643b      	str	r3, [r7, #64]	; 0x40
 800f44c:	4613      	mov	r3, r2
 800f44e:	eb45 0303 	adc.w	r3, r5, r3
 800f452:	647b      	str	r3, [r7, #68]	; 0x44
 800f454:	f04f 0200 	mov.w	r2, #0
 800f458:	f04f 0300 	mov.w	r3, #0
 800f45c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f460:	4629      	mov	r1, r5
 800f462:	02cb      	lsls	r3, r1, #11
 800f464:	4621      	mov	r1, r4
 800f466:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f46a:	4621      	mov	r1, r4
 800f46c:	02ca      	lsls	r2, r1, #11
 800f46e:	461c      	mov	r4, r3
 800f470:	4613      	mov	r3, r2
 800f472:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f476:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f47a:	881b      	ldrh	r3, [r3, #0]
 800f47c:	085b      	lsrs	r3, r3, #1
 800f47e:	b29b      	uxth	r3, r3
 800f480:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f484:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f488:	2200      	movs	r2, #0
 800f48a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f48e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f492:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f496:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f49a:	4621      	mov	r1, r4
 800f49c:	1851      	adds	r1, r2, r1
 800f49e:	63b9      	str	r1, [r7, #56]	; 0x38
 800f4a0:	4629      	mov	r1, r5
 800f4a2:	eb43 0101 	adc.w	r1, r3, r1
 800f4a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f4a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f4ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f4b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f4be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f4c2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f4c6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f4ca:	f7f0 fef9 	bl	80002c0 <__aeabi_uldivmod>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f4d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f4da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f4de:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f4e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	011a      	lsls	r2, r3, #4
 800f4e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f4ec:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f4ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	633b      	str	r3, [r7, #48]	; 0x30
 800f4f8:	637a      	str	r2, [r7, #52]	; 0x34
 800f4fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f4fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f502:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f506:	695b      	ldr	r3, [r3, #20]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f50e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f516:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f51a:	4622      	mov	r2, r4
 800f51c:	fb02 f203 	mul.w	r2, r2, r3
 800f520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f524:	4629      	mov	r1, r5
 800f526:	fb01 f303 	mul.w	r3, r1, r3
 800f52a:	441a      	add	r2, r3
 800f52c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f530:	4621      	mov	r1, r4
 800f532:	fba3 1301 	umull	r1, r3, r3, r1
 800f536:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f53a:	460b      	mov	r3, r1
 800f53c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f544:	18d3      	adds	r3, r2, r3
 800f546:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f54a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f54e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f552:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f556:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f55a:	8b5b      	ldrh	r3, [r3, #26]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2200      	movs	r2, #0
 800f560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f564:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f568:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f56c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f570:	4622      	mov	r2, r4
 800f572:	fb02 f203 	mul.w	r2, r2, r3
 800f576:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f57a:	4629      	mov	r1, r5
 800f57c:	fb01 f303 	mul.w	r3, r1, r3
 800f580:	441a      	add	r2, r3
 800f582:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f586:	4621      	mov	r1, r4
 800f588:	fba3 1301 	umull	r1, r3, r3, r1
 800f58c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f590:	460b      	mov	r3, r1
 800f592:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f59a:	18d3      	adds	r3, r2, r3
 800f59c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f5a0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f5a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f5a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f5ac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5b0:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f5b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800f5b6:	f143 0300 	adc.w	r3, r3, #0
 800f5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5bc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f5c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f5c4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5c8:	f04f 0000 	mov.w	r0, #0
 800f5cc:	f04f 0100 	mov.w	r1, #0
 800f5d0:	0cd0      	lsrs	r0, r2, #19
 800f5d2:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f5d6:	0cd9      	lsrs	r1, r3, #19
 800f5d8:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f5dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5e0:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f5e4:	6239      	str	r1, [r7, #32]
 800f5e6:	f143 0300 	adc.w	r3, r3, #0
 800f5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800f5ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f5f0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f5f4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f5f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f5fc:	f04f 0300 	mov.w	r3, #0
 800f600:	f7f0 fe5e 	bl	80002c0 <__aeabi_uldivmod>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f60c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f610:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f614:	f173 0300 	sbcs.w	r3, r3, #0
 800f618:	d305      	bcc.n	800f626 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f61a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f61e:	f04f 0300 	mov.w	r3, #0
 800f622:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f626:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f62a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f62e:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f630:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2200      	movs	r2, #0
 800f638:	61bb      	str	r3, [r7, #24]
 800f63a:	61fa      	str	r2, [r7, #28]
 800f63c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f640:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f644:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f648:	691b      	ldr	r3, [r3, #16]
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f658:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f65c:	4622      	mov	r2, r4
 800f65e:	fb02 f203 	mul.w	r2, r2, r3
 800f662:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f666:	4629      	mov	r1, r5
 800f668:	fb01 f303 	mul.w	r3, r1, r3
 800f66c:	441a      	add	r2, r3
 800f66e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f672:	4621      	mov	r1, r4
 800f674:	fba3 1301 	umull	r1, r3, r3, r1
 800f678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f67c:	460b      	mov	r3, r1
 800f67e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f686:	18d3      	adds	r3, r2, r3
 800f688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f68c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f690:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f694:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f698:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f69c:	8b5b      	ldrh	r3, [r3, #26]
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f6a6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f6aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f6ae:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	fb02 f203 	mul.w	r2, r2, r3
 800f6b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f6bc:	4629      	mov	r1, r5
 800f6be:	fb01 f303 	mul.w	r3, r1, r3
 800f6c2:	441a      	add	r2, r3
 800f6c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	fba3 1301 	umull	r1, r3, r3, r1
 800f6ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f6d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6dc:	18d3      	adds	r3, r2, r3
 800f6de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f6e2:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f6e6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f6ea:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f6ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f6f2:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f6f6:	6139      	str	r1, [r7, #16]
 800f6f8:	f143 0300 	adc.w	r3, r3, #0
 800f6fc:	617b      	str	r3, [r7, #20]
 800f6fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f702:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f706:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f70a:	f04f 0000 	mov.w	r0, #0
 800f70e:	f04f 0100 	mov.w	r1, #0
 800f712:	0cd0      	lsrs	r0, r2, #19
 800f714:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f718:	0cd9      	lsrs	r1, r3, #19
 800f71a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f71e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f722:	2200      	movs	r2, #0
 800f724:	67bb      	str	r3, [r7, #120]	; 0x78
 800f726:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f728:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f72c:	891b      	ldrh	r3, [r3, #8]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	2200      	movs	r2, #0
 800f732:	673b      	str	r3, [r7, #112]	; 0x70
 800f734:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f736:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f73a:	462b      	mov	r3, r5
 800f73c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f740:	4642      	mov	r2, r8
 800f742:	fb02 f203 	mul.w	r2, r2, r3
 800f746:	464b      	mov	r3, r9
 800f748:	4621      	mov	r1, r4
 800f74a:	fb01 f303 	mul.w	r3, r1, r3
 800f74e:	4413      	add	r3, r2
 800f750:	4622      	mov	r2, r4
 800f752:	4641      	mov	r1, r8
 800f754:	fba2 1201 	umull	r1, r2, r2, r1
 800f758:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f75c:	460a      	mov	r2, r1
 800f75e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f762:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f766:	4413      	add	r3, r2
 800f768:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f76c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f770:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f774:	4622      	mov	r2, r4
 800f776:	fb02 f203 	mul.w	r2, r2, r3
 800f77a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f77e:	4629      	mov	r1, r5
 800f780:	fb01 f303 	mul.w	r3, r1, r3
 800f784:	4413      	add	r3, r2
 800f786:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f78a:	4621      	mov	r1, r4
 800f78c:	fba2 1201 	umull	r1, r2, r2, r1
 800f790:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f794:	460a      	mov	r2, r1
 800f796:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f79a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f79e:	4413      	add	r3, r2
 800f7a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f7a4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f7a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f7ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f7b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7b4:	88db      	ldrh	r3, [r3, #6]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f7be:	f04f 0200 	mov.w	r2, #0
 800f7c2:	f04f 0300 	mov.w	r3, #0
 800f7c6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f7ca:	4629      	mov	r1, r5
 800f7cc:	01cb      	lsls	r3, r1, #7
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	01ca      	lsls	r2, r1, #7
 800f7d8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f7dc:	1884      	adds	r4, r0, r2
 800f7de:	60bc      	str	r4, [r7, #8]
 800f7e0:	eb41 0303 	adc.w	r3, r1, r3
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f7ea:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f7ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7f2:	88db      	ldrh	r3, [r3, #6]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	663b      	str	r3, [r7, #96]	; 0x60
 800f7fa:	667a      	str	r2, [r7, #100]	; 0x64
 800f7fc:	f04f 0200 	mov.w	r2, #0
 800f800:	f04f 0300 	mov.w	r3, #0
 800f804:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f808:	4629      	mov	r1, r5
 800f80a:	020b      	lsls	r3, r1, #8
 800f80c:	4621      	mov	r1, r4
 800f80e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f812:	4621      	mov	r1, r4
 800f814:	020a      	lsls	r2, r1, #8
 800f816:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f81a:	f7f0 fd51 	bl	80002c0 <__aeabi_uldivmod>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f826:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f82a:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f82e:	6039      	str	r1, [r7, #0]
 800f830:	f143 0300 	adc.w	r3, r3, #0
 800f834:	607b      	str	r3, [r7, #4]
 800f836:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f83a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f83e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f846:	f04f 0300 	mov.w	r3, #0
 800f84a:	f7f0 fd39 	bl	80002c0 <__aeabi_uldivmod>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f856:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f85a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f85e:	f173 0300 	sbcs.w	r3, r3, #0
 800f862:	d305      	bcc.n	800f870 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f864:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f868:	f04f 0300 	mov.w	r3, #0
 800f86c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f870:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f874:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f878:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f87a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f87e:	69db      	ldr	r3, [r3, #28]
 800f880:	021b      	lsls	r3, r3, #8
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe ffcd 	bl	800e822 <VL53L1_isqrt>
 800f888:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f88c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f890:	785b      	ldrb	r3, [r3, #1]
 800f892:	461a      	mov	r2, r3
 800f894:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f898:	fb02 f303 	mul.w	r3, r2, r3
 800f89c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f8a0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8a4:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f8a6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f8aa:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d218      	bcs.n	800f8e2 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f8b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f8b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8bc:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f8c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f8c8:	021b      	lsls	r3, r3, #8
 800f8ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f8ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f8d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d203      	bcs.n	800f8e2 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f8da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f8de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f8e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f8e6:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f8e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f8ec:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f8ee:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f8f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f8f4:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f8f6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f8fa:	f000 f854 	bl	800f9a6 <VL53L1_f_002>
 800f8fe:	4603      	mov	r3, r0
 800f900:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f902:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f906:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f908:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f916:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f91a:	461a      	mov	r2, r3
 800f91c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f920:	fb02 f303 	mul.w	r3, r2, r3
 800f924:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f92c:	3308      	adds	r3, #8
 800f92e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f932:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f936:	091b      	lsrs	r3, r3, #4
 800f938:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f940:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f942:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f944:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f948:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f94a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f94c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f950:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f952:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f956:	f000 f826 	bl	800f9a6 <VL53L1_f_002>
 800f95a:	4603      	mov	r3, r0
 800f95c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f95e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f962:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f964:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f968:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f96c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f970:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f974:	429a      	cmp	r2, r3
 800f976:	da07      	bge.n	800f988 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f978:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f97c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f984:	801a      	strh	r2, [r3, #0]
 800f986:	e006      	b.n	800f996 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f988:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f98c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f994:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f996:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f99a:	4618      	mov	r0, r3
 800f99c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f9a6 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b086      	sub	sp, #24
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	60f8      	str	r0, [r7, #12]
 800f9ae:	60b9      	str	r1, [r7, #8]
 800f9b0:	607a      	str	r2, [r7, #4]
 800f9b2:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	fb03 f303 	mul.w	r3, r3, r3
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f9ce:	6938      	ldr	r0, [r7, #16]
 800f9d0:	f7fe ff27 	bl	800e822 <VL53L1_isqrt>
 800f9d4:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	4413      	add	r3, r2
 800f9dc:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	011b      	lsls	r3, r3, #4
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe ff1d 	bl	800e822 <VL53L1_isqrt>
 800f9e8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	fb02 f303 	mul.w	r3, r2, r3
 800f9f2:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d009      	beq.n	800fa0e <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	4413      	add	r3, r2
 800fa00:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa0c:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800fa0e:	697b      	ldr	r3, [r7, #20]

}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3718      	adds	r7, #24
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800fa20:	2300      	movs	r3, #0
 800fa22:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2218      	movs	r2, #24
 800fa28:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	73fb      	strb	r3, [r7, #15]
 800fa4e:	e01f      	b.n	800fa90 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	4413      	add	r3, r2
 800fa56:	2200      	movs	r2, #0
 800fa58:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	4413      	add	r3, r2
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800fa66:	7bfb      	ldrb	r3, [r7, #15]
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800fa72:	7bfa      	ldrb	r2, [r7, #15]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	322e      	adds	r2, #46	; 0x2e
 800fa78:	2100      	movs	r1, #0
 800fa7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800fa7e:	7bfa      	ldrb	r2, [r7, #15]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3246      	adds	r2, #70	; 0x46
 800fa84:	2100      	movs	r1, #0
 800fa86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800fa8a:	7bfb      	ldrb	r3, [r7, #15]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	73fb      	strb	r3, [r7, #15]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	785b      	ldrb	r3, [r3, #1]
 800fa94:	7bfa      	ldrb	r2, [r7, #15]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d3da      	bcc.n	800fa50 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2208      	movs	r2, #8
 800faa6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fab8:	461a      	mov	r2, r3
 800faba:	2118      	movs	r1, #24
 800fabc:	2000      	movs	r0, #0
 800fabe:	f7ff f9e8 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800fac8:	461a      	mov	r2, r3
 800faca:	2118      	movs	r1, #24
 800facc:	2000      	movs	r0, #0
 800face:	f7ff f9e0 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800fad8:	461a      	mov	r2, r3
 800fada:	2118      	movs	r1, #24
 800fadc:	2000      	movs	r0, #0
 800fade:	f7ff f9d8 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800fae8:	461a      	mov	r2, r3
 800faea:	2118      	movs	r1, #24
 800faec:	2000      	movs	r0, #0
 800faee:	f7ff f9d0 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800faf8:	461a      	mov	r2, r3
 800fafa:	2118      	movs	r1, #24
 800fafc:	2000      	movs	r0, #0
 800fafe:	f7ff f9c8 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800fb02:	bf00      	nop
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fb0a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb0e:	b090      	sub	sp, #64	; 0x40
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	61b9      	str	r1, [r7, #24]
 800fb14:	617a      	str	r2, [r7, #20]
 800fb16:	461a      	mov	r2, r3
 800fb18:	4603      	mov	r3, r0
 800fb1a:	83fb      	strh	r3, [r7, #30]
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fb20:	2300      	movs	r3, #0
 800fb22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800fb26:	2300      	movs	r3, #0
 800fb28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800fb32:	f04f 0200 	mov.w	r2, #0
 800fb36:	f04f 0300 	mov.w	r3, #0
 800fb3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800fb42:	2300      	movs	r3, #0
 800fb44:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800fb46:	2300      	movs	r3, #0
 800fb48:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800fb4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb4c:	7a5a      	ldrb	r2, [r3, #9]
 800fb4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb50:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800fb52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb54:	7a1a      	ldrb	r2, [r3, #8]
 800fb56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb58:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800fb5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb5c:	7a9a      	ldrb	r2, [r3, #10]
 800fb5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb60:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800fb62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb64:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fb68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb6a:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800fb6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff f93c 	bl	800edf0 <VL53L1_decode_vcsel_period>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800fb7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb7e:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800fb80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fb86:	17da      	asrs	r2, r3, #31
 800fb88:	60bb      	str	r3, [r7, #8]
 800fb8a:	60fa      	str	r2, [r7, #12]
 800fb8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fb90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800fb94:	8bfb      	ldrh	r3, [r7, #30]
 800fb96:	2200      	movs	r2, #0
 800fb98:	4698      	mov	r8, r3
 800fb9a:	4691      	mov	r9, r2
 800fb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9e:	fb08 f203 	mul.w	r2, r8, r3
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	fb09 f303 	mul.w	r3, r9, r3
 800fba8:	4413      	add	r3, r2
 800fbaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbac:	fba2 4508 	umull	r4, r5, r2, r8
 800fbb0:	442b      	add	r3, r5
 800fbb2:	461d      	mov	r5, r3
 800fbb4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800fbb8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800fbbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fbc0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800fbc4:	f143 0b00 	adc.w	fp, r3, #0
 800fbc8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800fbcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	da08      	bge.n	800fbe6 <VL53L1_f_018+0xdc>
 800fbd4:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fbd8:	1851      	adds	r1, r2, r1
 800fbda:	6039      	str	r1, [r7, #0]
 800fbdc:	f143 0300 	adc.w	r3, r3, #0
 800fbe0:	607b      	str	r3, [r7, #4]
 800fbe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbe6:	f04f 0000 	mov.w	r0, #0
 800fbea:	f04f 0100 	mov.w	r1, #0
 800fbee:	0b10      	lsrs	r0, r2, #12
 800fbf0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800fbf4:	1319      	asrs	r1, r3, #12
 800fbf6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800fbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfc:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fbfe:	2300      	movs	r3, #0
 800fc00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc04:	e062      	b.n	800fccc <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800fc06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc0a:	089b      	lsrs	r3, r3, #2
 800fc0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800fc10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fc14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc16:	4413      	add	r3, r2
 800fc18:	7c9b      	ldrb	r3, [r3, #18]
 800fc1a:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800fc1c:	6a3b      	ldr	r3, [r7, #32]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	dd4f      	ble.n	800fcc2 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800fc22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc24:	7a9b      	ldrb	r3, [r3, #10]
 800fc26:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d20f      	bcs.n	800fc4e <VL53L1_f_018+0x144>
 800fc2e:	7f7b      	ldrb	r3, [r7, #29]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d00c      	beq.n	800fc4e <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800fc34:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc3a:	3206      	adds	r2, #6
 800fc3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	441a      	add	r2, r3
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	fb02 f303 	mul.w	r3, r2, r3
 800fc4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc4c:	e004      	b.n	800fc58 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc52:	fb02 f303 	mul.w	r3, r2, r3
 800fc56:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fe fde1 	bl	800e822 <VL53L1_isqrt>
 800fc60:	4603      	mov	r3, r0
 800fc62:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fc64:	6a3b      	ldr	r3, [r7, #32]
 800fc66:	0fda      	lsrs	r2, r3, #31
 800fc68:	4413      	add	r3, r2
 800fc6a:	105b      	asrs	r3, r3, #1
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	4413      	add	r3, r2
 800fc72:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc76:	6a3b      	ldr	r3, [r7, #32]
 800fc78:	fb92 f3f3 	sdiv	r3, r2, r3
 800fc7c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc80:	69ba      	ldr	r2, [r7, #24]
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
 800fc86:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	3308      	adds	r3, #8
 800fc8c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da00      	bge.n	800fc96 <VL53L1_f_018+0x18c>
 800fc94:	330f      	adds	r3, #15
 800fc96:	111b      	asrs	r3, r3, #4
 800fc98:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fc9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9e:	4413      	add	r3, r2
 800fca0:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	da01      	bge.n	800fcae <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fcae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcb4:	3216      	adds	r2, #22
 800fcb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fcb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fcbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcc0:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fcc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcce:	7a9b      	ldrb	r3, [r3, #10]
 800fcd0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d396      	bcc.n	800fc06 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fcd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcda:	2200      	movs	r2, #0
 800fcdc:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fcde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fce0:	7a1b      	ldrb	r3, [r3, #8]
 800fce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fce6:	e033      	b.n	800fd50 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fce8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fcec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcee:	3206      	adds	r2, #6
 800fcf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fcf4:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fcf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcfa:	3116      	adds	r1, #22
 800fcfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	dd13      	ble.n	800fd2c <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fd04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd0a:	4413      	add	r3, r2
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fd10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd16:	4413      	add	r3, r2
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fd1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd20:	791b      	ldrb	r3, [r3, #4]
 800fd22:	3301      	adds	r3, #1
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd28:	711a      	strb	r2, [r3, #4]
 800fd2a:	e00c      	b.n	800fd46 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fd2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd32:	4413      	add	r3, r2
 800fd34:	2200      	movs	r2, #0
 800fd36:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800fd38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fd3e:	4413      	add	r3, r2
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fd46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd52:	7a9b      	ldrb	r3, [r3, #10]
 800fd54:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	d3c5      	bcc.n	800fce8 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fd5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3740      	adds	r7, #64	; 0x40
 800fd64:	46bd      	mov	sp, r7
 800fd66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fd6a <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fd6a:	b480      	push	{r7}
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fd72:	2300      	movs	r3, #0
 800fd74:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fd76:	2300      	movs	r3, #0
 800fd78:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]
 800fd8e:	e02d      	b.n	800fdec <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	3301      	adds	r3, #1
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	78d2      	ldrb	r2, [r2, #3]
 800fd98:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd9c:	fb01 f202 	mul.w	r2, r1, r2
 800fda0:	1a9b      	subs	r3, r3, r2
 800fda2:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	789b      	ldrb	r3, [r3, #2]
 800fda8:	7bfa      	ldrb	r2, [r7, #15]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d21b      	bcs.n	800fde6 <VL53L1_f_019+0x7c>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	789b      	ldrb	r3, [r3, #2]
 800fdb2:	7b3a      	ldrb	r2, [r7, #12]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d216      	bcs.n	800fde6 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d10f      	bne.n	800fde6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fdc6:	7b3b      	ldrb	r3, [r7, #12]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	4413      	add	r3, r2
 800fdcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d108      	bne.n	800fde6 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fdd4:	7bbb      	ldrb	r3, [r7, #14]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d105      	bne.n	800fde6 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	7bfa      	ldrb	r2, [r7, #15]
 800fdde:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fde2:	2301      	movs	r3, #1
 800fde4:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	3301      	adds	r3, #1
 800fdea:	73fb      	strb	r3, [r7, #15]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	78db      	ldrb	r3, [r3, #3]
 800fdf0:	7bfa      	ldrb	r2, [r7, #15]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d3cc      	bcc.n	800fd90 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fdf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3714      	adds	r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fe06:	b480      	push	{r7}
 800fe08:	b085      	sub	sp, #20
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe24:	73fb      	strb	r3, [r7, #15]
 800fe26:	e05a      	b.n	800fede <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	78da      	ldrb	r2, [r3, #3]
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe32:	fb01 f202 	mul.w	r2, r1, r2
 800fe36:	1a9b      	subs	r3, r3, r2
 800fe38:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	78d2      	ldrb	r2, [r2, #3]
 800fe42:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe46:	fb01 f202 	mul.w	r2, r1, r2
 800fe4a:	1a9b      	subs	r3, r3, r2
 800fe4c:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	789b      	ldrb	r3, [r3, #2]
 800fe52:	7b7a      	ldrb	r2, [r7, #13]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d23f      	bcs.n	800fed8 <VL53L1_f_020+0xd2>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	789b      	ldrb	r3, [r3, #2]
 800fe5c:	7b3a      	ldrb	r2, [r7, #12]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d23a      	bcs.n	800fed8 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe62:	7b7b      	ldrb	r3, [r7, #13]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d10e      	bne.n	800fe8e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800fe70:	7b3b      	ldrb	r3, [r7, #12]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	4413      	add	r3, r2
 800fe76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d107      	bne.n	800fe8e <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fe84:	3301      	adds	r3, #1
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d905      	bls.n	800feaa <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800feaa:	7b7b      	ldrb	r3, [r7, #13]
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	4413      	add	r3, r2
 800feb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d009      	beq.n	800fecc <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800feb8:	7b7b      	ldrb	r3, [r7, #13]
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	4413      	add	r3, r2
 800fec4:	460a      	mov	r2, r1
 800fec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800feca:	e005      	b.n	800fed8 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800fecc:	7b7b      	ldrb	r3, [r7, #13]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	4413      	add	r3, r2
 800fed2:	2200      	movs	r2, #0
 800fed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
 800feda:	3301      	adds	r3, #1
 800fedc:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800fede:	7bfa      	ldrb	r2, [r7, #15]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fee6:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800feec:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800feee:	429a      	cmp	r2, r3
 800fef0:	db9a      	blt.n	800fe28 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fef2:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ff02:	b480      	push	{r7}
 800ff04:	b087      	sub	sp, #28
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800ff16:	2300      	movs	r3, #0
 800ff18:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	78db      	ldrb	r3, [r3, #3]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800ff2a:	7cbb      	ldrb	r3, [r7, #18]
 800ff2c:	085b      	lsrs	r3, r3, #1
 800ff2e:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ff36:	75fb      	strb	r3, [r7, #23]
 800ff38:	e0a2      	b.n	8010080 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	78da      	ldrb	r2, [r3, #3]
 800ff3e:	7dfb      	ldrb	r3, [r7, #23]
 800ff40:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff44:	fb01 f202 	mul.w	r2, r1, r2
 800ff48:	1a9b      	subs	r3, r3, r2
 800ff4a:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	78d2      	ldrb	r2, [r2, #3]
 800ff54:	fb93 f1f2 	sdiv	r1, r3, r2
 800ff58:	fb01 f202 	mul.w	r2, r1, r2
 800ff5c:	1a9b      	subs	r3, r3, r2
 800ff5e:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	789b      	ldrb	r3, [r3, #2]
 800ff64:	7d7a      	ldrb	r2, [r7, #21]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	f080 8087 	bcs.w	801007a <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800ff70:	7d3a      	ldrb	r2, [r7, #20]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	f080 8081 	bcs.w	801007a <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800ff78:	7d7b      	ldrb	r3, [r7, #21]
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d12f      	bne.n	800ffe6 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800ff86:	7d3b      	ldrb	r3, [r7, #20]
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d028      	beq.n	800ffe6 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800ff94:	7d3b      	ldrb	r3, [r7, #20]
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	4413      	add	r3, r2
 800ff9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ffa8:	7cfa      	ldrb	r2, [r7, #19]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d21b      	bcs.n	800ffe6 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800ffae:	7cfa      	ldrb	r2, [r7, #19]
 800ffb0:	4613      	mov	r3, r2
 800ffb2:	00db      	lsls	r3, r3, #3
 800ffb4:	4413      	add	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	7dfa      	ldrb	r2, [r7, #23]
 800ffc8:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	22ff      	movs	r2, #255	; 0xff
 800ffd8:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800ffe6:	7d7b      	ldrb	r3, [r7, #21]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	4413      	add	r3, r2
 800ffec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d042      	beq.n	801007a <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800fff4:	7d3b      	ldrb	r3, [r7, #20]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d13b      	bne.n	801007a <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 8010002:	7d7b      	ldrb	r3, [r7, #21]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	4413      	add	r3, r2
 8010008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801000c:	3b01      	subs	r3, #1
 801000e:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8010016:	7cfa      	ldrb	r2, [r7, #19]
 8010018:	429a      	cmp	r2, r3
 801001a:	d22e      	bcs.n	801007a <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801001c:	7cfa      	ldrb	r2, [r7, #19]
 801001e:	4613      	mov	r3, r2
 8010020:	00db      	lsls	r3, r3, #3
 8010022:	4413      	add	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	4413      	add	r3, r2
 801002e:	3304      	adds	r3, #4
 8010030:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	7dfa      	ldrb	r2, [r7, #23]
 8010036:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 8010038:	7dfb      	ldrb	r3, [r7, #23]
 801003a:	3301      	adds	r3, #1
 801003c:	b2da      	uxtb	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b2db      	uxtb	r3, r3
 801004e:	3301      	adds	r3, #1
 8010050:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	b2db      	uxtb	r3, r3
 8010062:	3301      	adds	r3, #1
 8010064:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	799b      	ldrb	r3, [r3, #6]
 801006e:	7cba      	ldrb	r2, [r7, #18]
 8010070:	429a      	cmp	r2, r3
 8010072:	d202      	bcs.n	801007a <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	7cba      	ldrb	r2, [r7, #18]
 8010078:	719a      	strb	r2, [r3, #6]
		blb++) {
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	3301      	adds	r3, #1
 801007e:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 8010080:	7dfa      	ldrb	r2, [r7, #23]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010088:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 801008e:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 8010090:	429a      	cmp	r2, r3
 8010092:	f6ff af52 	blt.w	800ff3a <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010096:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 801009a:	4618      	mov	r0, r3
 801009c:	371c      	adds	r7, #28
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b090      	sub	sp, #64	; 0x40
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	4603      	mov	r3, r0
 80100ae:	6039      	str	r1, [r7, #0]
 80100b0:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80100b2:	2300      	movs	r3, #0
 80100b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 80100b8:	f107 030c 	add.w	r3, r7, #12
 80100bc:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 80100c4:	2301      	movs	r3, #1
 80100c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d965      	bls.n	80101a0 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 80100d4:	e05f      	b.n	8010196 <VL53L1_f_028+0xf0>

		swapped = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 80100dc:	2301      	movs	r3, #1
 80100de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80100e2:	e051      	b.n	8010188 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 80100e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100e8:	1e5a      	subs	r2, r3, #1
 80100ea:	4613      	mov	r3, r2
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	4413      	add	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4413      	add	r3, r2
 80100fa:	3304      	adds	r3, #4
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 80100fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010102:	4613      	mov	r3, r2
 8010104:	00db      	lsls	r3, r3, #3
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	4413      	add	r3, r2
 8010112:	3304      	adds	r3, #4
 8010114:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 8010116:	79fb      	ldrb	r3, [r7, #7]
 8010118:	2b02      	cmp	r3, #2
 801011a:	d118      	bne.n	801014e <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 801011c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801011e:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8010124:	429a      	cmp	r2, r3
 8010126:	da2a      	bge.n	801017e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010128:	2224      	movs	r2, #36	; 0x24
 801012a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801012c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801012e:	f009 fd9d 	bl	8019c6c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010132:	2224      	movs	r2, #36	; 0x24
 8010134:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010138:	f009 fd98 	bl	8019c6c <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 801013c:	2224      	movs	r2, #36	; 0x24
 801013e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010140:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010142:	f009 fd93 	bl	8019c6c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010146:	2301      	movs	r3, #1
 8010148:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801014c:	e017      	b.n	801017e <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 801014e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010150:	699a      	ldr	r2, [r3, #24]
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	699b      	ldr	r3, [r3, #24]
 8010156:	429a      	cmp	r2, r3
 8010158:	d911      	bls.n	801017e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 801015a:	2224      	movs	r2, #36	; 0x24
 801015c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801015e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010160:	f009 fd84 	bl	8019c6c <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010164:	2224      	movs	r2, #36	; 0x24
 8010166:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801016a:	f009 fd7f 	bl	8019c6c <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 801016e:	2224      	movs	r2, #36	; 0x24
 8010170:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010172:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010174:	f009 fd7a 	bl	8019c6c <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010178:	2301      	movs	r3, #1
 801017a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 801017e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010182:	3301      	adds	r3, #1
 8010184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801018e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010192:	429a      	cmp	r2, r3
 8010194:	d3a6      	bcc.n	80100e4 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8010196:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801019a:	2b00      	cmp	r3, #0
 801019c:	d19b      	bne.n	80100d6 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 801019e:	e000      	b.n	80101a2 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 80101a0:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 80101a2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3740      	adds	r7, #64	; 0x40
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b087      	sub	sp, #28
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	4603      	mov	r3, r0
 80101b6:	60b9      	str	r1, [r7, #8]
 80101b8:	607a      	str	r2, [r7, #4]
 80101ba:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80101bc:	2300      	movs	r3, #0
 80101be:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80101c8:	7bfa      	ldrb	r2, [r7, #15]
 80101ca:	4613      	mov	r3, r2
 80101cc:	00db      	lsls	r3, r3, #3
 80101ce:	4413      	add	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	4413      	add	r3, r2
 80101da:	3304      	adds	r3, #4
 80101dc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	2200      	movs	r2, #0
 80101e2:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	2200      	movs	r2, #0
 80101e8:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	75fb      	strb	r3, [r7, #23]
 80101f0:	e01c      	b.n	801022c <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	78da      	ldrb	r2, [r3, #3]
 80101f6:	7dfb      	ldrb	r3, [r7, #23]
 80101f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80101fc:	fb01 f202 	mul.w	r2, r1, r2
 8010200:	1a9b      	subs	r3, r3, r2
 8010202:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	68da      	ldr	r2, [r3, #12]
 8010208:	7d79      	ldrb	r1, [r7, #21]
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	3106      	adds	r1, #6
 801020e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010212:	441a      	add	r2, r3
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	689a      	ldr	r2, [r3, #8]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	689b      	ldr	r3, [r3, #8]
 8010220:	441a      	add	r2, r3
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010226:	7dfb      	ldrb	r3, [r7, #23]
 8010228:	3301      	adds	r3, #1
 801022a:	75fb      	strb	r3, [r7, #23]
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	791b      	ldrb	r3, [r3, #4]
 8010230:	7dfa      	ldrb	r2, [r7, #23]
 8010232:	429a      	cmp	r2, r3
 8010234:	d9dd      	bls.n	80101f2 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	68da      	ldr	r2, [r3, #12]
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8010244:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010248:	4618      	mov	r0, r3
 801024a:	371c      	adds	r7, #28
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010254:	b590      	push	{r4, r7, lr}
 8010256:	b08d      	sub	sp, #52	; 0x34
 8010258:	af02      	add	r7, sp, #8
 801025a:	60ba      	str	r2, [r7, #8]
 801025c:	607b      	str	r3, [r7, #4]
 801025e:	4603      	mov	r3, r0
 8010260:	73fb      	strb	r3, [r7, #15]
 8010262:	460b      	mov	r3, r1
 8010264:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010266:	2300      	movs	r3, #0
 8010268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 801026c:	2300      	movs	r3, #0
 801026e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 8010272:	2300      	movs	r3, #0
 8010274:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 801027e:	2300      	movs	r3, #0
 8010280:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010282:	7bfa      	ldrb	r2, [r7, #15]
 8010284:	4613      	mov	r3, r2
 8010286:	00db      	lsls	r3, r3, #3
 8010288:	4413      	add	r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	4413      	add	r3, r2
 8010294:	3304      	adds	r3, #4
 8010296:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	789b      	ldrb	r3, [r3, #2]
 801029c:	2bff      	cmp	r3, #255	; 0xff
 801029e:	d102      	bne.n	80102a6 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	2201      	movs	r2, #1
 80102a4:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	789b      	ldrb	r3, [r3, #2]
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	78d2      	ldrb	r2, [r2, #3]
 80102ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80102b2:	fb01 f202 	mul.w	r2, r1, r2
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 80102bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80102c0:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	8c3b      	ldrh	r3, [r7, #32]
 80102ca:	4413      	add	r3, r2
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 80102d0:	8c3a      	ldrh	r2, [r7, #32]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	789b      	ldrb	r3, [r3, #2]
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b29b      	uxth	r3, r3
 80102dc:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 80102de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80102e2:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	791b      	ldrb	r3, [r3, #4]
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	8bfb      	ldrh	r3, [r7, #30]
 80102ec:	4413      	add	r3, r2
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80102f2:	8bfa      	ldrh	r2, [r7, #30]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	789b      	ldrb	r3, [r3, #2]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	b29b      	uxth	r3, r3
 80102fe:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 8010300:	8bfa      	ldrh	r2, [r7, #30]
 8010302:	8c3b      	ldrh	r3, [r7, #32]
 8010304:	1ad3      	subs	r3, r2, r3
 8010306:	b29b      	uxth	r3, r3
 8010308:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 801030a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801030e:	2b03      	cmp	r3, #3
 8010310:	dd01      	ble.n	8010316 <VL53L1_f_027+0xc2>
		window_width = 3;
 8010312:	2303      	movs	r3, #3
 8010314:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 8010316:	8c3a      	ldrh	r2, [r7, #32]
 8010318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801031a:	4413      	add	r3, r2
 801031c:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 801031e:	b219      	sxth	r1, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	78da      	ldrb	r2, [r3, #3]
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	3314      	adds	r3, #20
 8010328:	7bbc      	ldrb	r4, [r7, #14]
 801032a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801032e:	9301      	str	r3, [sp, #4]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	4623      	mov	r3, r4
 8010336:	f000 f846 	bl	80103c6 <VL53L1_f_030>
 801033a:	4603      	mov	r3, r0
 801033c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 8010340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010344:	2b00      	cmp	r3, #0
 8010346:	d114      	bne.n	8010372 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8010348:	8bfa      	ldrh	r2, [r7, #30]
 801034a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801034c:	1ad3      	subs	r3, r2, r3
 801034e:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 8010350:	b218      	sxth	r0, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	78da      	ldrb	r2, [r3, #3]
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	331c      	adds	r3, #28
 801035a:	7bbc      	ldrb	r4, [r7, #14]
 801035c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8010360:	9301      	str	r3, [sp, #4]
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	4623      	mov	r3, r4
 8010368:	f000 f82d 	bl	80103c6 <VL53L1_f_030>
 801036c:	4603      	mov	r3, r0
 801036e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	695a      	ldr	r2, [r3, #20]
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	69db      	ldr	r3, [r3, #28]
 801037a:	429a      	cmp	r2, r3
 801037c:	d909      	bls.n	8010392 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	695b      	ldr	r3, [r3, #20]
 8010382:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	69da      	ldr	r2, [r3, #28]
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	699a      	ldr	r2, [r3, #24]
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	695b      	ldr	r3, [r3, #20]
 801039a:	429a      	cmp	r2, r3
 801039c:	d203      	bcs.n	80103a6 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	699a      	ldr	r2, [r3, #24]
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	699a      	ldr	r2, [r3, #24]
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	69db      	ldr	r3, [r3, #28]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d903      	bls.n	80103ba <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	699a      	ldr	r2, [r3, #24]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 80103ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80103be:	4618      	mov	r0, r3
 80103c0:	372c      	adds	r7, #44	; 0x2c
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}

080103c6 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 80103c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ca:	b09d      	sub	sp, #116	; 0x74
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	461c      	mov	r4, r3
 80103d0:	4603      	mov	r3, r0
 80103d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80103d6:	460b      	mov	r3, r1
 80103d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80103dc:	4613      	mov	r3, r2
 80103de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80103e2:	4623      	mov	r3, r4
 80103e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80103e8:	2300      	movs	r3, #0
 80103ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80103ee:	2300      	movs	r3, #0
 80103f0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80103f4:	2300      	movs	r3, #0
 80103f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80103fa:	f04f 0200 	mov.w	r2, #0
 80103fe:	f04f 0300 	mov.w	r3, #0
 8010402:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 8010406:	f04f 0200 	mov.w	r2, #0
 801040a:	f04f 0300 	mov.w	r3, #0
 801040e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 8010412:	f04f 0200 	mov.w	r2, #0
 8010416:	f04f 0300 	mov.w	r3, #0
 801041a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 801041e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010426:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8010428:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801042c:	2b00      	cmp	r3, #0
 801042e:	f000 809c 	beq.w	801056a <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 8010432:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010436:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801043a:	e08f      	b.n	801055c <VL53L1_f_030+0x196>

		if (lb < 0)
 801043c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010440:	2b00      	cmp	r3, #0
 8010442:	da09      	bge.n	8010458 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8010444:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010448:	b29a      	uxth	r2, r3
 801044a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801044e:	4413      	add	r3, r2
 8010450:	b29b      	uxth	r3, r3
 8010452:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010456:	e00a      	b.n	801046e <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8010458:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 801045c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8010460:	fb91 f3f2 	sdiv	r3, r1, r2
 8010464:	fb02 f303 	mul.w	r3, r2, r3
 8010468:	1acb      	subs	r3, r1, r3
 801046a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 801046e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010472:	2b00      	cmp	r3, #0
 8010474:	db6b      	blt.n	801054e <VL53L1_f_030+0x188>
 8010476:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801047a:	2b17      	cmp	r3, #23
 801047c:	dc67      	bgt.n	801054e <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 801047e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010482:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010486:	3306      	adds	r3, #6
 8010488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801048c:	17da      	asrs	r2, r3, #31
 801048e:	633b      	str	r3, [r7, #48]	; 0x30
 8010490:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 8010492:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801049a:	17da      	asrs	r2, r3, #31
 801049c:	62bb      	str	r3, [r7, #40]	; 0x28
 801049e:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 80104a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80104a6:	4602      	mov	r2, r0
 80104a8:	1a9b      	subs	r3, r3, r2
 80104aa:	623b      	str	r3, [r7, #32]
 80104ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ae:	460a      	mov	r2, r1
 80104b0:	eb63 0302 	sbc.w	r3, r3, r2
 80104b4:	627b      	str	r3, [r7, #36]	; 0x24
 80104b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80104ba:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 80104be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d009      	beq.n	80104da <VL53L1_f_030+0x114>
 80104c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	da05      	bge.n	80104da <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 80104ce:	f04f 0200 	mov.w	r2, #0
 80104d2:	f04f 0300 	mov.w	r3, #0
 80104d6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 80104da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80104de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80104e2:	1884      	adds	r4, r0, r2
 80104e4:	61bc      	str	r4, [r7, #24]
 80104e6:	eb41 0303 	adc.w	r3, r1, r3
 80104ea:	61fb      	str	r3, [r7, #28]
 80104ec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80104f0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80104f4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80104f8:	17da      	asrs	r2, r3, #31
 80104fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80104fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80104fe:	f04f 0200 	mov.w	r2, #0
 8010502:	f04f 0300 	mov.w	r3, #0
 8010506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010508:	02cb      	lsls	r3, r1, #11
 801050a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801050c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8010510:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010512:	02ca      	lsls	r2, r1, #11
 8010514:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 8010518:	f143 0600 	adc.w	r6, r3, #0
 801051c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801051e:	fb06 f203 	mul.w	r2, r6, r3
 8010522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010524:	fb05 f303 	mul.w	r3, r5, r3
 8010528:	441a      	add	r2, r3
 801052a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801052c:	fba3 ab05 	umull	sl, fp, r3, r5
 8010530:	eb02 030b 	add.w	r3, r2, fp
 8010534:	469b      	mov	fp, r3
			weighted_sum +=
 8010536:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801053a:	eb12 010a 	adds.w	r1, r2, sl
 801053e:	6139      	str	r1, [r7, #16]
 8010540:	eb43 030b 	adc.w	r3, r3, fp
 8010544:	617b      	str	r3, [r7, #20]
 8010546:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801054a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801054e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8010552:	b29b      	uxth	r3, r3
 8010554:	3301      	adds	r3, #1
 8010556:	b29b      	uxth	r3, r3
 8010558:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801055c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8010560:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010564:	429a      	cmp	r2, r3
 8010566:	f77f af69 	ble.w	801043c <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 801056a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801056e:	2a01      	cmp	r2, #1
 8010570:	f173 0300 	sbcs.w	r3, r3, #0
 8010574:	db3b      	blt.n	80105ee <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8010576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801057a:	0fd9      	lsrs	r1, r3, #31
 801057c:	2000      	movs	r0, #0
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	60f8      	str	r0, [r7, #12]
 8010582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010586:	4621      	mov	r1, r4
 8010588:	eb11 0802 	adds.w	r8, r1, r2
 801058c:	4629      	mov	r1, r5
 801058e:	eb41 0903 	adc.w	r9, r1, r3
 8010592:	f04f 0200 	mov.w	r2, #0
 8010596:	f04f 0300 	mov.w	r3, #0
 801059a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 801059e:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 80105a2:	ea4f 0369 	mov.w	r3, r9, asr #1
 80105a6:	4610      	mov	r0, r2
 80105a8:	4619      	mov	r1, r3
 80105aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80105ae:	1814      	adds	r4, r2, r0
 80105b0:	603c      	str	r4, [r7, #0]
 80105b2:	414b      	adcs	r3, r1
 80105b4:	607b      	str	r3, [r7, #4]
 80105b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80105ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 80105be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80105c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80105c6:	f7ef fe2b 	bl	8000220 <__aeabi_ldivmod>
 80105ca:	4602      	mov	r2, r0
 80105cc:	460b      	mov	r3, r1
 80105ce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 80105d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	da05      	bge.n	80105e6 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 80105da:	f04f 0200 	mov.w	r2, #0
 80105de:	f04f 0300 	mov.w	r3, #0
 80105e2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 80105e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105ec:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80105ee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3774      	adds	r7, #116	; 0x74
 80105f6:	46bd      	mov	sp, r7
 80105f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105fc <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b086      	sub	sp, #24
 8010600:	af00      	add	r7, sp, #0
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	607a      	str	r2, [r7, #4]
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	4603      	mov	r3, r0
 801060a:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801060c:	2300      	movs	r3, #0
 801060e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010610:	2300      	movs	r3, #0
 8010612:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010614:	2300      	movs	r3, #0
 8010616:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010618:	7bfa      	ldrb	r2, [r7, #15]
 801061a:	4613      	mov	r3, r2
 801061c:	00db      	lsls	r3, r3, #3
 801061e:	4413      	add	r3, r2
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	4413      	add	r3, r2
 801062a:	3304      	adds	r3, #4
 801062c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801062e:	22ac      	movs	r2, #172	; 0xac
 8010630:	68b9      	ldr	r1, [r7, #8]
 8010632:	6a38      	ldr	r0, [r7, #32]
 8010634:	f009 fb1a 	bl	8019c6c <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801063e:	75fb      	strb	r3, [r7, #23]
 8010640:	e020      	b.n	8010684 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	7dfa      	ldrb	r2, [r7, #23]
 8010648:	429a      	cmp	r2, r3
 801064a:	d304      	bcc.n	8010656 <VL53L1_f_023+0x5a>
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	791b      	ldrb	r3, [r3, #4]
 8010650:	7dfa      	ldrb	r2, [r7, #23]
 8010652:	429a      	cmp	r2, r3
 8010654:	d913      	bls.n	801067e <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	78da      	ldrb	r2, [r3, #3]
 801065a:	7dfb      	ldrb	r3, [r7, #23]
 801065c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010660:	fb01 f202 	mul.w	r2, r1, r2
 8010664:	1a9b      	subs	r3, r3, r2
 8010666:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010668:	6a3b      	ldr	r3, [r7, #32]
 801066a:	7a9b      	ldrb	r3, [r3, #10]
 801066c:	7d7a      	ldrb	r2, [r7, #21]
 801066e:	429a      	cmp	r2, r3
 8010670:	d205      	bcs.n	801067e <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010672:	7d7a      	ldrb	r2, [r7, #21]
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	3206      	adds	r2, #6
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801067e:	7dfb      	ldrb	r3, [r7, #23]
 8010680:	3301      	adds	r3, #1
 8010682:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010684:	7dfa      	ldrb	r2, [r7, #23]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801068c:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 8010692:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010694:	429a      	cmp	r2, r3
 8010696:	dbd4      	blt.n	8010642 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010698:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 80106a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a8:	b096      	sub	sp, #88	; 0x58
 80106aa:	af08      	add	r7, sp, #32
 80106ac:	4604      	mov	r4, r0
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	461a      	mov	r2, r3
 80106b4:	4623      	mov	r3, r4
 80106b6:	73fb      	strb	r3, [r7, #15]
 80106b8:	4603      	mov	r3, r0
 80106ba:	73bb      	strb	r3, [r7, #14]
 80106bc:	460b      	mov	r3, r1
 80106be:	737b      	strb	r3, [r7, #13]
 80106c0:	4613      	mov	r3, r2
 80106c2:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 80106c4:	2300      	movs	r3, #0
 80106c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 80106ca:	2300      	movs	r3, #0
 80106cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 80106d0:	2300      	movs	r3, #0
 80106d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 80106d6:	2300      	movs	r3, #0
 80106d8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80106e6:	2300      	movs	r3, #0
 80106e8:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80106f6:	7b7b      	ldrb	r3, [r7, #13]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d106      	bne.n	801070a <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80106fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010702:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8010704:	f06f 030e 	mvn.w	r3, #14
 8010708:	e06f      	b.n	80107ea <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	7b7a      	ldrb	r2, [r7, #13]
 801070e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010712:	fb01 f202 	mul.w	r2, r1, r2
 8010716:	1a9b      	subs	r3, r3, r2
 8010718:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 801071c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010720:	7b39      	ldrb	r1, [r7, #12]
 8010722:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010726:	f107 0320 	add.w	r3, r7, #32
 801072a:	9301      	str	r3, [sp, #4]
 801072c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010730:	9300      	str	r3, [sp, #0]
 8010732:	4613      	mov	r3, r2
 8010734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010736:	f000 fddb 	bl	80112f0 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801073a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801073e:	7b39      	ldrb	r1, [r7, #12]
 8010740:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4613      	mov	r3, r2
 8010752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010754:	f000 fdcc 	bl	80112f0 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010758:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010760:	f107 021c 	add.w	r2, r7, #28
 8010764:	7b39      	ldrb	r1, [r7, #12]
 8010766:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801076a:	f107 0314 	add.w	r3, r7, #20
 801076e:	9301      	str	r3, [sp, #4]
 8010770:	f107 0318 	add.w	r3, r7, #24
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	4613      	mov	r3, r2
 8010778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801077a:	f000 fdb9 	bl	80112f0 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801077e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010780:	469c      	mov	ip, r3
 8010782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010784:	469e      	mov	lr, r3
 8010786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010788:	4698      	mov	r8, r3
 801078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078c:	4619      	mov	r1, r3
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	461c      	mov	r4, r3
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	461d      	mov	r5, r3
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	461e      	mov	r6, r3
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 801079e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 80107a4:	607b      	str	r3, [r7, #4]
 80107a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80107ac:	7bb8      	ldrb	r0, [r7, #14]
 80107ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107b0:	9207      	str	r2, [sp, #28]
 80107b2:	9306      	str	r3, [sp, #24]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	9205      	str	r2, [sp, #20]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	9304      	str	r3, [sp, #16]
 80107bc:	9603      	str	r6, [sp, #12]
 80107be:	9502      	str	r5, [sp, #8]
 80107c0:	9401      	str	r4, [sp, #4]
 80107c2:	9100      	str	r1, [sp, #0]
 80107c4:	4643      	mov	r3, r8
 80107c6:	4672      	mov	r2, lr
 80107c8:	4661      	mov	r1, ip
 80107ca:	f002 ff30 	bl	801362e <VL53L1_f_014>
 80107ce:	4603      	mov	r3, r0
 80107d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80107d4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80107d8:	f113 0f0f 	cmn.w	r3, #15
 80107dc:	d103      	bne.n	80107e6 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80107de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107e4:	801a      	strh	r2, [r3, #0]


	return status;
 80107e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3738      	adds	r7, #56	; 0x38
 80107ee:	46bd      	mov	sp, r7
 80107f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107f4 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80107f4:	b490      	push	{r4, r7}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	4604      	mov	r4, r0
 80107fc:	4608      	mov	r0, r1
 80107fe:	4611      	mov	r1, r2
 8010800:	461a      	mov	r2, r3
 8010802:	4623      	mov	r3, r4
 8010804:	71fb      	strb	r3, [r7, #7]
 8010806:	4603      	mov	r3, r0
 8010808:	71bb      	strb	r3, [r7, #6]
 801080a:	460b      	mov	r3, r1
 801080c:	717b      	strb	r3, [r7, #5]
 801080e:	4613      	mov	r3, r2
 8010810:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8010812:	2300      	movs	r3, #0
 8010814:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 801081a:	6a3b      	ldr	r3, [r7, #32]
 801081c:	79fa      	ldrb	r2, [r7, #7]
 801081e:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	2200      	movs	r2, #0
 8010824:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	781a      	ldrb	r2, [r3, #0]
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	785a      	ldrb	r2, [r3, #1]
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	789a      	ldrb	r2, [r3, #2]
 801083a:	6a3b      	ldr	r3, [r7, #32]
 801083c:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801083e:	69fb      	ldr	r3, [r7, #28]
 8010840:	78da      	ldrb	r2, [r3, #3]
 8010842:	6a3b      	ldr	r3, [r7, #32]
 8010844:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	791a      	ldrb	r2, [r3, #4]
 801084a:	6a3b      	ldr	r3, [r7, #32]
 801084c:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	795a      	ldrb	r2, [r3, #5]
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	791a      	ldrb	r2, [r3, #4]
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	b2db      	uxtb	r3, r3
 8010862:	3301      	adds	r3, #1
 8010864:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	8c1a      	ldrh	r2, [r3, #32]
 8010878:	6a3b      	ldr	r3, [r7, #32]
 801087a:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	695b      	ldr	r3, [r3, #20]
 8010880:	b29a      	uxth	r2, r3
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	699b      	ldr	r3, [r3, #24]
 801088a:	b29a      	uxth	r2, r3
 801088c:	6a3b      	ldr	r3, [r7, #32]
 801088e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 8010892:	69fb      	ldr	r3, [r7, #28]
 8010894:	69db      	ldr	r3, [r3, #28]
 8010896:	b29a      	uxth	r2, r3
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	461a      	mov	r2, r3
 80108a4:	6a3b      	ldr	r3, [r7, #32]
 80108a6:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	691a      	ldr	r2, [r3, #16]
 80108ac:	6a3b      	ldr	r3, [r7, #32]
 80108ae:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	689b      	ldr	r3, [r3, #8]
 80108b4:	461a      	mov	r2, r3
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80108c0:	6a3b      	ldr	r3, [r7, #32]
 80108c2:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	2213      	movs	r2, #19
 80108c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 80108cc:	887b      	ldrh	r3, [r7, #2]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00a      	beq.n	80108e8 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	8c1b      	ldrh	r3, [r3, #32]
 80108d6:	461a      	mov	r2, r3
 80108d8:	887b      	ldrh	r3, [r7, #2]
 80108da:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80108dc:	429a      	cmp	r2, r3
 80108de:	d903      	bls.n	80108e8 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	2206      	movs	r2, #6
 80108e4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80108e8:	79bb      	ldrb	r3, [r7, #6]
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	021b      	lsls	r3, r3, #8
 80108ee:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	8a9b      	ldrh	r3, [r3, #20]
 80108f4:	89fa      	ldrh	r2, [r7, #14]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d205      	bcs.n	8010906 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80108fe:	89fb      	ldrh	r3, [r7, #14]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	81fb      	strh	r3, [r7, #14]
 8010904:	e001      	b.n	801090a <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 801090a:	797b      	ldrb	r3, [r7, #5]
 801090c:	b29b      	uxth	r3, r3
 801090e:	021b      	lsls	r3, r3, #8
 8010910:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010918:	89bb      	ldrh	r3, [r7, #12]
 801091a:	4413      	add	r3, r2
 801091c:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010924:	89fa      	ldrh	r2, [r7, #14]
 8010926:	429a      	cmp	r2, r3
 8010928:	d805      	bhi.n	8010936 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 801092a:	6a3b      	ldr	r3, [r7, #32]
 801092c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8010930:	89ba      	ldrh	r2, [r7, #12]
 8010932:	429a      	cmp	r2, r3
 8010934:	d203      	bcs.n	801093e <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	2205      	movs	r2, #5
 801093a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801093e:	bf00      	nop
 8010940:	3710      	adds	r7, #16
 8010942:	46bd      	mov	sp, r7
 8010944:	bc90      	pop	{r4, r7}
 8010946:	4770      	bx	lr

08010948 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801094a:	b08f      	sub	sp, #60	; 0x3c
 801094c:	af06      	add	r7, sp, #24
 801094e:	60f8      	str	r0, [r7, #12]
 8010950:	60b9      	str	r1, [r7, #8]
 8010952:	607a      	str	r2, [r7, #4]
 8010954:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010956:	2300      	movs	r3, #0
 8010958:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801095e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010960:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010964:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010968:	f7ff f856 	bl	800fa18 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 801096c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010972:	22ac      	movs	r2, #172	; 0xac
 8010974:	6839      	ldr	r1, [r7, #0]
 8010976:	4618      	mov	r0, r3
 8010978:	f009 f978 	bl	8019c6c <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	781a      	ldrb	r2, [r3, #0]
 8010980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010982:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	785a      	ldrb	r2, [r3, #1]
 8010988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801098a:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	789a      	ldrb	r2, [r3, #2]
 8010990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010992:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 801099a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801099c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 801099e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109a0:	2200      	movs	r2, #0
 80109a2:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 80109a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109a6:	2204      	movs	r2, #4
 80109a8:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 80109aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ac:	2200      	movs	r2, #0
 80109ae:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80109b0:	2300      	movs	r3, #0
 80109b2:	77bb      	strb	r3, [r7, #30]
 80109b4:	e008      	b.n	80109c8 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 80109b6:	7fbb      	ldrb	r3, [r7, #30]
 80109b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	4413      	add	r3, r2
 80109be:	2200      	movs	r2, #0
 80109c0:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80109c2:	7fbb      	ldrb	r3, [r7, #30]
 80109c4:	3301      	adds	r3, #1
 80109c6:	77bb      	strb	r3, [r7, #30]
 80109c8:	7fbb      	ldrb	r3, [r7, #30]
 80109ca:	2b04      	cmp	r3, #4
 80109cc:	d9f3      	bls.n	80109b6 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 80109ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fd ff58 	bl	800e88a <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 80109de:	461a      	mov	r2, r3
 80109e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109e2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80109e6:	4619      	mov	r1, r3
 80109e8:	4610      	mov	r0, r2
 80109ea:	f7fd ff8e 	bl	800e90a <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80109ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fe fb66 	bl	800f0c6 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80109fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fd fffc 	bl	800e9fe <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d009      	beq.n	8010a24 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8010a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a12:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a18:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a20:	f000 fdae 	bl	8011580 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	77bb      	strb	r3, [r7, #30]
 8010a30:	e01e      	b.n	8010a70 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8010a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d117      	bne.n	8010a6a <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8010a3a:	7fbb      	ldrb	r3, [r7, #30]
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	4413      	add	r3, r2
 8010a44:	8898      	ldrh	r0, [r3, #4]
 8010a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a48:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010a4c:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a52:	4413      	add	r3, r2
 8010a54:	3304      	adds	r3, #4
 8010a56:	9301      	str	r3, [sp, #4]
 8010a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	68f9      	ldr	r1, [r7, #12]
 8010a62:	f7fe fb7b 	bl	800f15c <VL53L1_f_001>
 8010a66:	4603      	mov	r3, r0
 8010a68:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010a6a:	7fbb      	ldrb	r3, [r7, #30]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	77bb      	strb	r3, [r7, #30]
 8010a70:	7fbb      	ldrb	r3, [r7, #30]
 8010a72:	2b04      	cmp	r3, #4
 8010a74:	d9dd      	bls.n	8010a32 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010a76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d11a      	bne.n	8010ab4 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010a86:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 8010a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010a98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a9a:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8010a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010aa0:	9102      	str	r1, [sp, #8]
 8010aa2:	9201      	str	r2, [sp, #4]
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	462b      	mov	r3, r5
 8010aa8:	4622      	mov	r2, r4
 8010aaa:	4631      	mov	r1, r6
 8010aac:	f7ff f82d 	bl	800fb0a <VL53L1_f_018>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d104      	bne.n	8010ac6 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8010abc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010abe:	f7ff f954 	bl	800fd6a <VL53L1_f_019>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010ac6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d104      	bne.n	8010ad8 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 8010ace:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ad0:	f7ff f999 	bl	800fe06 <VL53L1_f_020>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8010ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d104      	bne.n	8010aea <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010ae0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ae2:	f7ff fa0e 	bl	800ff02 <VL53L1_f_021>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010aea:	2300      	movs	r3, #0
 8010aec:	77bb      	strb	r3, [r7, #30]
 8010aee:	e0a6      	b.n	8010c3e <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010af0:	7fba      	ldrb	r2, [r7, #30]
 8010af2:	4613      	mov	r3, r2
 8010af4:	00db      	lsls	r3, r3, #3
 8010af6:	4413      	add	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b00:	4413      	add	r3, r2
 8010b02:	3304      	adds	r3, #4
 8010b04:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8010b06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d109      	bne.n	8010b22 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 8010b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b10:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010b14:	7fbb      	ldrb	r3, [r7, #30]
 8010b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff fb48 	bl	80101ae <VL53L1_f_022>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8010b22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d110      	bne.n	8010b4c <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8010b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b2c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010b30:	69bb      	ldr	r3, [r7, #24]
 8010b32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b38:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010b3c:	7fb8      	ldrb	r0, [r7, #30]
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	4613      	mov	r3, r2
 8010b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b44:	f7ff fd5a 	bl	80105fc <VL53L1_f_023>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010b4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d10d      	bne.n	8010b70 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b56:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010b60:	7fb8      	ldrb	r0, [r7, #30]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	2300      	movs	r3, #0
 8010b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b68:	f7ff fd48 	bl	80105fc <VL53L1_f_023>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10d      	bne.n	8010b94 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b7a:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b80:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010b84:	7fb8      	ldrb	r0, [r7, #30]
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	2300      	movs	r3, #0
 8010b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b8c:	f7ff fd36 	bl	80105fc <VL53L1_f_023>
 8010b90:	4603      	mov	r3, r0
 8010b92:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010b94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b9e:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010ba2:	7fb8      	ldrb	r0, [r7, #30]
 8010ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010ba8:	f000 f8dd 	bl	8010d66 <VL53L1_f_034>
 8010bac:	4603      	mov	r3, r0
 8010bae:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010bb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d108      	bne.n	8010bca <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	8a19      	ldrh	r1, [r3, #16]
 8010bbc:	7fb8      	ldrb	r0, [r7, #30]
 8010bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bc2:	f000 f95c 	bl	8010e7e <VL53L1_f_035>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8010bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d124      	bne.n	8010c1c <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	789d      	ldrb	r5, [r3, #2]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	7e1e      	ldrb	r6, [r3, #24]
 8010bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bdc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010bee:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010bf4:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010bf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bfa:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8010bfe:	697c      	ldr	r4, [r7, #20]
 8010c00:	3420      	adds	r4, #32
 8010c02:	9404      	str	r4, [sp, #16]
 8010c04:	9003      	str	r0, [sp, #12]
 8010c06:	9102      	str	r1, [sp, #8]
 8010c08:	9201      	str	r2, [sp, #4]
 8010c0a:	9300      	str	r3, [sp, #0]
 8010c0c:	4673      	mov	r3, lr
 8010c0e:	4662      	mov	r2, ip
 8010c10:	4631      	mov	r1, r6
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7ff fd46 	bl	80106a4 <VL53L1_f_026>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8010c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d109      	bne.n	8010c38 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c26:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8010c2a:	7fb8      	ldrb	r0, [r7, #30]
 8010c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c2e:	2101      	movs	r1, #1
 8010c30:	f7ff fb10 	bl	8010254 <VL53L1_f_027>
 8010c34:	4603      	mov	r3, r0
 8010c36:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010c38:	7fbb      	ldrb	r3, [r7, #30]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	77bb      	strb	r3, [r7, #30]
 8010c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c40:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010c44:	7fba      	ldrb	r2, [r7, #30]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	f4ff af52 	bcc.w	8010af0 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010c4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d107      	bne.n	8010c64 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	785b      	ldrb	r3, [r3, #1]
 8010c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ff fa23 	bl	80100a6 <VL53L1_f_028>
 8010c60:	4603      	mov	r3, r0
 8010c62:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010c64:	2300      	movs	r3, #0
 8010c66:	77bb      	strb	r3, [r7, #30]
 8010c68:	e071      	b.n	8010d4e <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010c6a:	7fba      	ldrb	r2, [r7, #30]
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	00db      	lsls	r3, r3, #3
 8010c70:	4413      	add	r3, r2
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c7a:	4413      	add	r3, r2
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c82:	7c9a      	ldrb	r2, [r3, #18]
 8010c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c86:	7c5b      	ldrb	r3, [r3, #17]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d25c      	bcs.n	8010d46 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010c94:	429a      	cmp	r2, r3
 8010c96:	dd57      	ble.n	8010d48 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010c9c:	2bff      	cmp	r3, #255	; 0xff
 8010c9e:	d053      	beq.n	8010d48 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ca2:	7c9b      	ldrb	r3, [r3, #18]
 8010ca4:	461a      	mov	r2, r3
			prange_data =
 8010ca6:	234c      	movs	r3, #76	; 0x4c
 8010ca8:	fb02 f303 	mul.w	r3, r2, r3
 8010cac:	3310      	adds	r3, #16
 8010cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cb0:	4413      	add	r3, r2
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d115      	bne.n	8010cea <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cc0:	7c98      	ldrb	r0, [r3, #18]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	8b5d      	ldrh	r5, [r3, #26]
 8010cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cd4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	9202      	str	r2, [sp, #8]
 8010cdc:	697a      	ldr	r2, [r7, #20]
 8010cde:	9201      	str	r2, [sp, #4]
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	462b      	mov	r3, r5
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	f7ff fd85 	bl	80107f4 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010cea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d115      	bne.n	8010d1e <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010cf8:	69bb      	ldr	r3, [r7, #24]
 8010cfa:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010d04:	69bb      	ldr	r3, [r7, #24]
 8010d06:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010d0a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	4623      	mov	r3, r4
 8010d16:	f000 fb44 	bl	80113a2 <VL53L1_f_011>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010d1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d108      	bne.n	8010d38 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8bd8      	ldrh	r0, [r3, #30]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	4619      	mov	r1, r3
 8010d34:	f000 fbda 	bl	80114ec <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d3a:	7c9b      	ldrb	r3, [r3, #18]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	b2da      	uxtb	r2, r3
 8010d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d42:	749a      	strb	r2, [r3, #18]
 8010d44:	e000      	b.n	8010d48 <VL53L1_f_033+0x400>
			continue;
 8010d46:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010d48:	7fbb      	ldrb	r3, [r7, #30]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	77bb      	strb	r3, [r7, #30]
 8010d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d50:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010d54:	7fba      	ldrb	r2, [r7, #30]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d387      	bcc.n	8010c6a <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3724      	adds	r7, #36	; 0x24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d66 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b08c      	sub	sp, #48	; 0x30
 8010d6a:	af02      	add	r7, sp, #8
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
 8010d70:	603b      	str	r3, [r7, #0]
 8010d72:	4603      	mov	r3, r0
 8010d74:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010d76:	2300      	movs	r3, #0
 8010d78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010d7c:	7bfa      	ldrb	r2, [r7, #15]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	00db      	lsls	r3, r3, #3
 8010d82:	4413      	add	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	3304      	adds	r3, #4
 8010d90:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010d92:	2300      	movs	r3, #0
 8010d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	785a      	ldrb	r2, [r3, #1]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	781a      	ldrb	r2, [r3, #0]
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	789a      	ldrb	r2, [r3, #2]
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010dc0:	6a3b      	ldr	r3, [r7, #32]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010dc8:	e04d      	b.n	8010e66 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	78da      	ldrb	r2, [r3, #3]
 8010dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dd6:	fb01 f202 	mul.w	r2, r1, r2
 8010dda:	1a9b      	subs	r3, r3, r2
 8010ddc:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	7999      	ldrb	r1, [r3, #6]
 8010de2:	f107 0218 	add.w	r2, r7, #24
 8010de6:	7ff8      	ldrb	r0, [r7, #31]
 8010de8:	f107 0310 	add.w	r3, r7, #16
 8010dec:	9301      	str	r3, [sp, #4]
 8010dee:	f107 0314 	add.w	r3, r7, #20
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	4613      	mov	r3, r2
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	f000 fa7a 	bl	80112f0 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010dfc:	7ffb      	ldrb	r3, [r7, #31]
 8010dfe:	69ba      	ldr	r2, [r7, #24]
 8010e00:	6839      	ldr	r1, [r7, #0]
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	440b      	add	r3, r1
 8010e06:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010e08:	7ffb      	ldrb	r3, [r7, #31]
 8010e0a:	697a      	ldr	r2, [r7, #20]
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	3318      	adds	r3, #24
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	440b      	add	r3, r1
 8010e14:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010e16:	7ffb      	ldrb	r3, [r7, #31]
 8010e18:	693a      	ldr	r2, [r7, #16]
 8010e1a:	6839      	ldr	r1, [r7, #0]
 8010e1c:	3330      	adds	r3, #48	; 0x30
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	440b      	add	r3, r1
 8010e22:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010e24:	69ba      	ldr	r2, [r7, #24]
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	689a      	ldr	r2, [r3, #8]
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010e32:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010e34:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010e36:	6839      	ldr	r1, [r7, #0]
 8010e38:	3348      	adds	r3, #72	; 0x48
 8010e3a:	009b      	lsls	r3, r3, #2
 8010e3c:	440b      	add	r3, r1
 8010e3e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010e40:	697a      	ldr	r2, [r7, #20]
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	689a      	ldr	r2, [r3, #8]
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010e4e:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010e50:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010e52:	6839      	ldr	r1, [r7, #0]
 8010e54:	3360      	adds	r3, #96	; 0x60
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	440b      	add	r3, r1
 8010e5a:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e60:	3301      	adds	r3, #1
 8010e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	791b      	ldrb	r3, [r3, #4]
 8010e6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d9ab      	bls.n	8010dca <VL53L1_f_034+0x64>
	}

	return status;
 8010e72:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3728      	adds	r7, #40	; 0x28
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e80:	b08f      	sub	sp, #60	; 0x3c
 8010e82:	af06      	add	r7, sp, #24
 8010e84:	60ba      	str	r2, [r7, #8]
 8010e86:	607b      	str	r3, [r7, #4]
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73fb      	strb	r3, [r7, #15]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010e90:	2300      	movs	r3, #0
 8010e92:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010e98:	7bfa      	ldrb	r2, [r7, #15]
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	4413      	add	r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	4413      	add	r3, r2
 8010eaa:	3304      	adds	r3, #4
 8010eac:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	77fb      	strb	r3, [r7, #31]
 8010ec0:	e0b9      	b.n	8011036 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	78da      	ldrb	r2, [r3, #3]
 8010ec6:	7ffb      	ldrb	r3, [r7, #31]
 8010ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ecc:	fb01 f202 	mul.w	r2, r1, r2
 8010ed0:	1a9b      	subs	r3, r3, r2
 8010ed2:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010ed4:	7ffb      	ldrb	r3, [r7, #31]
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	78d2      	ldrb	r2, [r2, #3]
 8010edc:	fb93 f1f2 	sdiv	r1, r3, r2
 8010ee0:	fb01 f202 	mul.w	r2, r1, r2
 8010ee4:	1a9b      	subs	r3, r3, r2
 8010ee6:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	789b      	ldrb	r3, [r3, #2]
 8010eec:	7dfa      	ldrb	r2, [r7, #23]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	f080 809e 	bcs.w	8011030 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010ef8:	7dba      	ldrb	r2, [r7, #22]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	f080 8098 	bcs.w	8011030 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010f00:	7dfb      	ldrb	r3, [r7, #23]
 8010f02:	68ba      	ldr	r2, [r7, #8]
 8010f04:	3348      	adds	r3, #72	; 0x48
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d10e      	bne.n	8010f2e <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	3360      	adds	r3, #96	; 0x60
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	4413      	add	r3, r2
 8010f1a:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d106      	bne.n	8010f2e <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
 8010f22:	68ba      	ldr	r2, [r7, #8]
 8010f24:	4413      	add	r3, r2
 8010f26:	2200      	movs	r2, #0
 8010f28:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010f2c:	e043      	b.n	8010fb6 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	68ba      	ldr	r2, [r7, #8]
 8010f32:	3348      	adds	r3, #72	; 0x48
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	4413      	add	r3, r2
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	db0e      	blt.n	8010f5c <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
 8010f40:	68ba      	ldr	r2, [r7, #8]
 8010f42:	3360      	adds	r3, #96	; 0x60
 8010f44:	009b      	lsls	r3, r3, #2
 8010f46:	4413      	add	r3, r2
 8010f48:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	db06      	blt.n	8010f5c <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010f4e:	7dfb      	ldrb	r3, [r7, #23]
 8010f50:	68ba      	ldr	r2, [r7, #8]
 8010f52:	4413      	add	r3, r2
 8010f54:	2201      	movs	r2, #1
 8010f56:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010f5a:	e02c      	b.n	8010fb6 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010f5c:	7dfb      	ldrb	r3, [r7, #23]
 8010f5e:	68ba      	ldr	r2, [r7, #8]
 8010f60:	3348      	adds	r3, #72	; 0x48
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	4413      	add	r3, r2
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	da1e      	bge.n	8010faa <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010f6c:	7dfb      	ldrb	r3, [r7, #23]
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	3360      	adds	r3, #96	; 0x60
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db16      	blt.n	8010faa <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010f7c:	7dbb      	ldrb	r3, [r7, #22]
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	3348      	adds	r3, #72	; 0x48
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	4413      	add	r3, r2
 8010f86:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	db0e      	blt.n	8010faa <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8010f8c:	7dbb      	ldrb	r3, [r7, #22]
 8010f8e:	68ba      	ldr	r2, [r7, #8]
 8010f90:	3360      	adds	r3, #96	; 0x60
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	4413      	add	r3, r2
 8010f96:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	da06      	bge.n	8010faa <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8010f9c:	7dfb      	ldrb	r3, [r7, #23]
 8010f9e:	68ba      	ldr	r2, [r7, #8]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010fa8:	e005      	b.n	8010fb6 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8010faa:	7dfb      	ldrb	r3, [r7, #23]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	4413      	add	r3, r2
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	4413      	add	r3, r2
 8010fbc:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d035      	beq.n	8011030 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010fc4:	69bb      	ldr	r3, [r7, #24]
 8010fc6:	7ffa      	ldrb	r2, [r7, #31]
 8010fc8:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	685c      	ldr	r4, [r3, #4]
 8010fd4:	7dfb      	ldrb	r3, [r7, #23]
 8010fd6:	68ba      	ldr	r2, [r7, #8]
 8010fd8:	3318      	adds	r3, #24
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	4413      	add	r3, r2
 8010fde:	685d      	ldr	r5, [r3, #4]
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	3330      	adds	r3, #48	; 0x30
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	4413      	add	r3, r2
 8010fea:	685e      	ldr	r6, [r3, #4]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	78d2      	ldrb	r2, [r2, #3]
 8010ff4:	69b9      	ldr	r1, [r7, #24]
 8010ff6:	3118      	adds	r1, #24
 8010ff8:	7ff8      	ldrb	r0, [r7, #31]
 8010ffa:	9105      	str	r1, [sp, #20]
 8010ffc:	9204      	str	r2, [sp, #16]
 8010ffe:	9303      	str	r3, [sp, #12]
 8011000:	2300      	movs	r3, #0
 8011002:	9302      	str	r3, [sp, #8]
 8011004:	2300      	movs	r3, #0
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	2300      	movs	r3, #0
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4633      	mov	r3, r6
 801100e:	462a      	mov	r2, r5
 8011010:	4621      	mov	r1, r4
 8011012:	f000 f81c 	bl	801104e <VL53L1_f_036>
 8011016:	4603      	mov	r3, r0
 8011018:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 801101a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801101e:	f113 0f0f 	cmn.w	r3, #15
 8011022:	d105      	bne.n	8011030 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8011024:	7dfb      	ldrb	r3, [r7, #23]
 8011026:	68ba      	ldr	r2, [r7, #8]
 8011028:	4413      	add	r3, r2
 801102a:	2200      	movs	r2, #0
 801102c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8011030:	7ffb      	ldrb	r3, [r7, #31]
 8011032:	3301      	adds	r3, #1
 8011034:	77fb      	strb	r3, [r7, #31]
 8011036:	69bb      	ldr	r3, [r7, #24]
 8011038:	791b      	ldrb	r3, [r3, #4]
 801103a:	7ffa      	ldrb	r2, [r7, #31]
 801103c:	429a      	cmp	r2, r3
 801103e:	f4ff af40 	bcc.w	8010ec2 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8011042:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8011046:	4618      	mov	r0, r3
 8011048:	3724      	adds	r7, #36	; 0x24
 801104a:	46bd      	mov	sp, r7
 801104c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801104e <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 801104e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011052:	b0b2      	sub	sp, #200	; 0xc8
 8011054:	af00      	add	r7, sp, #0
 8011056:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 801105a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801105e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011062:	4603      	mov	r3, r0
 8011064:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8011068:	23f1      	movs	r3, #241	; 0xf1
 801106a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 801106e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011072:	f04f 0300 	mov.w	r3, #0
 8011076:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 801107a:	f04f 0200 	mov.w	r2, #0
 801107e:	f04f 0300 	mov.w	r3, #0
 8011082:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8011086:	f04f 0200 	mov.w	r2, #0
 801108a:	f04f 0300 	mov.w	r3, #0
 801108e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8011092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011096:	17da      	asrs	r2, r3, #31
 8011098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801109c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 80110a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80110a4:	17da      	asrs	r2, r3, #31
 80110a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80110aa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80110ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80110b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80110b6:	4602      	mov	r2, r0
 80110b8:	ebb3 0802 	subs.w	r8, r3, r2
 80110bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110c0:	460a      	mov	r2, r1
 80110c2:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 80110c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110ca:	17da      	asrs	r2, r3, #31
 80110cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80110ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80110d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80110d4:	460b      	mov	r3, r1
 80110d6:	ebb8 0a03 	subs.w	sl, r8, r3
 80110da:	4613      	mov	r3, r2
 80110dc:	eb69 0b03 	sbc.w	fp, r9, r3
 80110e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80110e4:	17da      	asrs	r2, r3, #31
 80110e6:	673b      	str	r3, [r7, #112]	; 0x70
 80110e8:	677a      	str	r2, [r7, #116]	; 0x74
 80110ea:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80110ee:	460b      	mov	r3, r1
 80110f0:	ebba 0403 	subs.w	r4, sl, r3
 80110f4:	4613      	mov	r3, r2
 80110f6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 80110fa:	f04f 0200 	mov.w	r2, #0
 80110fe:	f04f 0300 	mov.w	r3, #0
 8011102:	032b      	lsls	r3, r5, #12
 8011104:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8011108:	0322      	lsls	r2, r4, #12
 801110a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801110e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011112:	17da      	asrs	r2, r3, #31
 8011114:	66bb      	str	r3, [r7, #104]	; 0x68
 8011116:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011118:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801111c:	17da      	asrs	r2, r3, #31
 801111e:	663b      	str	r3, [r7, #96]	; 0x60
 8011120:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011122:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011126:	4623      	mov	r3, r4
 8011128:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801112c:	4602      	mov	r2, r0
 801112e:	1a9b      	subs	r3, r3, r2
 8011130:	65bb      	str	r3, [r7, #88]	; 0x58
 8011132:	462b      	mov	r3, r5
 8011134:	460a      	mov	r2, r1
 8011136:	eb63 0302 	sbc.w	r3, r3, r2
 801113a:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 801113c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011140:	17da      	asrs	r2, r3, #31
 8011142:	653b      	str	r3, [r7, #80]	; 0x50
 8011144:	657a      	str	r2, [r7, #84]	; 0x54
 8011146:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801114a:	4623      	mov	r3, r4
 801114c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8011150:	4602      	mov	r2, r0
 8011152:	1a9b      	subs	r3, r3, r2
 8011154:	64bb      	str	r3, [r7, #72]	; 0x48
 8011156:	462b      	mov	r3, r5
 8011158:	460a      	mov	r2, r1
 801115a:	eb63 0302 	sbc.w	r3, r3, r2
 801115e:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8011160:	f04f 0200 	mov.w	r2, #0
 8011164:	f04f 0300 	mov.w	r3, #0
 8011168:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 801116c:	4629      	mov	r1, r5
 801116e:	030b      	lsls	r3, r1, #12
 8011170:	4621      	mov	r1, r4
 8011172:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011176:	4621      	mov	r1, r4
 8011178:	030a      	lsls	r2, r1, #12
 801117a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 801117e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011182:	4313      	orrs	r3, r2
 8011184:	f000 80a8 	beq.w	80112d8 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8011188:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801118c:	f04f 0000 	mov.w	r0, #0
 8011190:	f04f 0100 	mov.w	r1, #0
 8011194:	0319      	lsls	r1, r3, #12
 8011196:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 801119a:	0310      	lsls	r0, r2, #12
 801119c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80111a0:	1814      	adds	r4, r2, r0
 80111a2:	633c      	str	r4, [r7, #48]	; 0x30
 80111a4:	414b      	adcs	r3, r1
 80111a6:	637b      	str	r3, [r7, #52]	; 0x34
 80111a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80111ac:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 80111b0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80111b4:	1891      	adds	r1, r2, r2
 80111b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80111b8:	415b      	adcs	r3, r3
 80111ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80111c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80111c4:	f7ef f82c 	bl	8000220 <__aeabi_ldivmod>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 80111d0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80111d4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80111d8:	6239      	str	r1, [r7, #32]
 80111da:	f143 0300 	adc.w	r3, r3, #0
 80111de:	627b      	str	r3, [r7, #36]	; 0x24
 80111e0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80111e4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 80111e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80111ec:	2200      	movs	r2, #0
 80111ee:	643b      	str	r3, [r7, #64]	; 0x40
 80111f0:	647a      	str	r2, [r7, #68]	; 0x44
 80111f2:	f04f 0200 	mov.w	r2, #0
 80111f6:	f04f 0300 	mov.w	r3, #0
 80111fa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80111fe:	4629      	mov	r1, r5
 8011200:	030b      	lsls	r3, r1, #12
 8011202:	4621      	mov	r1, r4
 8011204:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011208:	4621      	mov	r1, r4
 801120a:	030a      	lsls	r2, r1, #12
 801120c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011210:	1884      	adds	r4, r0, r2
 8011212:	61bc      	str	r4, [r7, #24]
 8011214:	eb41 0303 	adc.w	r3, r1, r3
 8011218:	61fb      	str	r3, [r7, #28]
 801121a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801121e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8011222:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011226:	1c51      	adds	r1, r2, #1
 8011228:	63b9      	str	r1, [r7, #56]	; 0x38
 801122a:	f143 0300 	adc.w	r3, r3, #0
 801122e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011230:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011234:	460b      	mov	r3, r1
 8011236:	0fdb      	lsrs	r3, r3, #31
 8011238:	2200      	movs	r2, #0
 801123a:	613b      	str	r3, [r7, #16]
 801123c:	617a      	str	r2, [r7, #20]
 801123e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011242:	4623      	mov	r3, r4
 8011244:	4602      	mov	r2, r0
 8011246:	189b      	adds	r3, r3, r2
 8011248:	60bb      	str	r3, [r7, #8]
 801124a:	460b      	mov	r3, r1
 801124c:	462a      	mov	r2, r5
 801124e:	eb42 0303 	adc.w	r3, r2, r3
 8011252:	60fb      	str	r3, [r7, #12]
 8011254:	f04f 0200 	mov.w	r2, #0
 8011258:	f04f 0300 	mov.w	r3, #0
 801125c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011260:	4621      	mov	r1, r4
 8011262:	084a      	lsrs	r2, r1, #1
 8011264:	4629      	mov	r1, r5
 8011266:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801126a:	4629      	mov	r1, r5
 801126c:	104b      	asrs	r3, r1, #1
 801126e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8011272:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011276:	2b00      	cmp	r3, #0
 8011278:	da05      	bge.n	8011286 <VL53L1_f_036+0x238>
			mean_phase = 0;
 801127a:	f04f 0200 	mov.w	r2, #0
 801127e:	f04f 0300 	mov.w	r3, #0
 8011282:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8011286:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 801128a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801128e:	f173 0300 	sbcs.w	r3, r3, #0
 8011292:	db05      	blt.n	80112a0 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011298:	f04f 0300 	mov.w	r3, #0
 801129c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 80112a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80112a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 80112a8:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 80112ac:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 80112ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80112b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80112b6:	fb01 f202 	mul.w	r2, r1, r2
 80112ba:	1a9b      	subs	r3, r3, r2
 80112bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 80112c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80112c4:	17da      	asrs	r2, r3, #31
 80112c6:	603b      	str	r3, [r7, #0]
 80112c8:	607a      	str	r2, [r7, #4]
 80112ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80112ce:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 80112d2:	2300      	movs	r3, #0
 80112d4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 80112d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80112dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80112e0:	601a      	str	r2, [r3, #0]

	return status;
 80112e2:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	37c8      	adds	r7, #200	; 0xc8
 80112ea:	46bd      	mov	sp, r7
 80112ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080112f0 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b087      	sub	sp, #28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60ba      	str	r2, [r7, #8]
 80112f8:	607b      	str	r3, [r7, #4]
 80112fa:	4603      	mov	r3, r0
 80112fc:	73fb      	strb	r3, [r7, #15]
 80112fe:	460b      	mov	r3, r1
 8011300:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2200      	movs	r2, #0
 801130e:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8011310:	7bfa      	ldrb	r2, [r7, #15]
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	3206      	adds	r2, #6
 8011316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801131a:	6a3b      	ldr	r3, [r7, #32]
 801131c:	601a      	str	r2, [r3, #0]
	*pc = 0;
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011324:	2300      	movs	r3, #0
 8011326:	75fb      	strb	r3, [r7, #23]
 8011328:	e02f      	b.n	801138a <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 801132a:	7bfa      	ldrb	r2, [r7, #15]
 801132c:	7dfb      	ldrb	r3, [r7, #23]
 801132e:	4413      	add	r3, r2
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	7a92      	ldrb	r2, [r2, #10]
 8011334:	441a      	add	r2, r3
 8011336:	7bbb      	ldrb	r3, [r7, #14]
 8011338:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 801133a:	68ba      	ldr	r2, [r7, #8]
 801133c:	7a92      	ldrb	r2, [r2, #10]
 801133e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011342:	fb01 f202 	mul.w	r2, r1, r2
 8011346:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011348:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 801134a:	7dfa      	ldrb	r2, [r7, #23]
 801134c:	7bbb      	ldrb	r3, [r7, #14]
 801134e:	429a      	cmp	r2, r3
 8011350:	d20a      	bcs.n	8011368 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	7db9      	ldrb	r1, [r7, #22]
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	3106      	adds	r1, #6
 801135c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011360:	441a      	add	r2, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
 8011366:	e00d      	b.n	8011384 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8011368:	7dfa      	ldrb	r2, [r7, #23]
 801136a:	7bbb      	ldrb	r3, [r7, #14]
 801136c:	429a      	cmp	r2, r3
 801136e:	d909      	bls.n	8011384 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	7db9      	ldrb	r1, [r7, #22]
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3106      	adds	r1, #6
 801137a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801137e:	441a      	add	r2, r3
 8011380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011382:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011384:	7dfb      	ldrb	r3, [r7, #23]
 8011386:	3301      	adds	r3, #1
 8011388:	75fb      	strb	r3, [r7, #23]
 801138a:	7bbb      	ldrb	r3, [r7, #14]
 801138c:	005a      	lsls	r2, r3, #1
 801138e:	7dfb      	ldrb	r3, [r7, #23]
 8011390:	429a      	cmp	r2, r3
 8011392:	daca      	bge.n	801132a <VL53L1_f_013+0x3a>
	}
}
 8011394:	bf00      	nop
 8011396:	bf00      	nop
 8011398:	371c      	adds	r7, #28
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr

080113a2 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b088      	sub	sp, #32
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	60ba      	str	r2, [r7, #8]
 80113aa:	461a      	mov	r2, r3
 80113ac:	4603      	mov	r3, r0
 80113ae:	81fb      	strh	r3, [r7, #14]
 80113b0:	460b      	mov	r3, r1
 80113b2:	81bb      	strh	r3, [r7, #12]
 80113b4:	4613      	mov	r3, r2
 80113b6:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 80113b8:	2300      	movs	r3, #0
 80113ba:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 80113c0:	2300      	movs	r3, #0
 80113c2:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 80113c4:	2300      	movs	r3, #0
 80113c6:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 80113c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ca:	89fa      	ldrh	r2, [r7, #14]
 80113cc:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 80113ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d0:	89ba      	ldrh	r2, [r7, #12]
 80113d2:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 80113d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d6:	68ba      	ldr	r2, [r7, #8]
 80113d8:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	88fa      	ldrh	r2, [r7, #6]
 80113de:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 80113e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e2:	8a5b      	ldrh	r3, [r3, #18]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d101      	bne.n	80113ec <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80113e8:	23f1      	movs	r3, #241	; 0xf1
 80113ea:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80113ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ee:	699b      	ldr	r3, [r3, #24]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d101      	bne.n	80113f8 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80113f4:	23f1      	movs	r3, #241	; 0xf1
 80113f6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80113f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d16f      	bne.n	80114e0 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	8a5b      	ldrh	r3, [r3, #18]
 8011404:	4618      	mov	r0, r3
 8011406:	f7fd f903 	bl	800e610 <VL53L1_calc_pll_period_us>
 801140a:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	699b      	ldr	r3, [r3, #24]
 8011410:	3301      	adds	r3, #1
 8011412:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8011414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011416:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8011418:	4619      	mov	r1, r3
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011420:	6978      	ldr	r0, [r7, #20]
 8011422:	f7fd f90c 	bl	800e63e <VL53L1_duration_maths>
 8011426:	4602      	mov	r2, r0
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 801142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142e:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8011430:	0119      	lsls	r1, r3, #4
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011438:	6978      	ldr	r0, [r7, #20]
 801143a:	f7fd f900 	bl	800e63e <VL53L1_duration_maths>
 801143e:	4602      	mov	r2, r0
 8011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011442:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8011448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801144a:	69db      	ldr	r3, [r3, #28]
 801144c:	4619      	mov	r1, r3
 801144e:	4610      	mov	r0, r2
 8011450:	f7fd fb6d 	bl	800eb2e <VL53L1_rate_maths>
 8011454:	4603      	mov	r3, r0
 8011456:	461a      	mov	r2, r3
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	6a1b      	ldr	r3, [r3, #32]
 8011464:	4619      	mov	r1, r3
 8011466:	4610      	mov	r0, r2
 8011468:	f7fd fb61 	bl	800eb2e <VL53L1_rate_maths>
 801146c:	4603      	mov	r3, r0
 801146e:	461a      	mov	r2, r3
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8011478:	461a      	mov	r2, r3
 801147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	4619      	mov	r1, r3
 8011480:	4610      	mov	r0, r2
 8011482:	f7fd fb54 	bl	800eb2e <VL53L1_rate_maths>
 8011486:	4603      	mov	r3, r0
 8011488:	461a      	mov	r2, r3
 801148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801148e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011490:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8011492:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011496:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8011498:	4413      	add	r3, r2
 801149a:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 801149c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d905      	bls.n	80114b0 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 80114a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80114ae:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	8ada      	ldrh	r2, [r3, #22]
 80114b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114b8:	69b9      	ldr	r1, [r7, #24]
 80114ba:	2006      	movs	r0, #6
 80114bc:	f7fd fb7c 	bl	800ebb8 <VL53L1_rate_per_spad_maths>
 80114c0:	4603      	mov	r3, r0
 80114c2:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 80114c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c6:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 80114c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80114cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ce:	8ad9      	ldrh	r1, [r3, #22]
 80114d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d2:	69db      	ldr	r3, [r3, #28]
 80114d4:	461a      	mov	r2, r3
 80114d6:	f7fd f90b 	bl	800e6f0 <VL53L1_events_per_spad_maths>
 80114da:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 80114dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114de:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 80114e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3720      	adds	r7, #32
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80114ec:	b590      	push	{r4, r7, lr}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af02      	add	r7, sp, #8
 80114f2:	4603      	mov	r3, r0
 80114f4:	603a      	str	r2, [r7, #0]
 80114f6:	80fb      	strh	r3, [r7, #6]
 80114f8:	460b      	mov	r3, r1
 80114fa:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	8a58      	ldrh	r0, [r3, #18]
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	8a9c      	ldrh	r4, [r3, #20]
 8011508:	88fb      	ldrh	r3, [r7, #6]
 801150a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801150e:	9201      	str	r2, [sp, #4]
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	2300      	movs	r3, #0
 8011514:	4622      	mov	r2, r4
 8011516:	f7fd fb83 	bl	800ec20 <VL53L1_range_maths>
 801151a:	4603      	mov	r3, r0
 801151c:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	8a58      	ldrh	r0, [r3, #18]
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	8a9c      	ldrh	r4, [r3, #20]
 8011532:	88fb      	ldrh	r3, [r7, #6]
 8011534:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011538:	9201      	str	r2, [sp, #4]
 801153a:	9300      	str	r3, [sp, #0]
 801153c:	2300      	movs	r3, #0
 801153e:	4622      	mov	r2, r4
 8011540:	f7fd fb6e 	bl	800ec20 <VL53L1_range_maths>
 8011544:	4603      	mov	r3, r0
 8011546:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	8a58      	ldrh	r0, [r3, #18]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	8a9c      	ldrh	r4, [r3, #20]
 801155c:	88fb      	ldrh	r3, [r7, #6]
 801155e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011562:	9201      	str	r2, [sp, #4]
 8011564:	9300      	str	r3, [sp, #0]
 8011566:	2300      	movs	r3, #0
 8011568:	4622      	mov	r2, r4
 801156a:	f7fd fb59 	bl	800ec20 <VL53L1_range_maths>
 801156e:	4603      	mov	r3, r0
 8011570:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	bd90      	pop	{r4, r7, pc}

08011580 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 801158c:	2300      	movs	r3, #0
 801158e:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8011590:	2300      	movs	r3, #0
 8011592:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8011598:	2300      	movs	r3, #0
 801159a:	757b      	strb	r3, [r7, #21]





	memcpy(
 801159c:	22ac      	movs	r2, #172	; 0xac
 801159e:	68b9      	ldr	r1, [r7, #8]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f008 fb63 	bl	8019c6c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]
 80115aa:	e008      	b.n	80115be <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 80115ac:	7dfa      	ldrb	r2, [r7, #23]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	3206      	adds	r2, #6
 80115b2:	2100      	movs	r1, #0
 80115b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 80115b8:	7dfb      	ldrb	r3, [r7, #23]
 80115ba:	3301      	adds	r3, #1
 80115bc:	75fb      	strb	r3, [r7, #23]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	7a5b      	ldrb	r3, [r3, #9]
 80115c2:	7dfa      	ldrb	r2, [r7, #23]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d3f1      	bcc.n	80115ac <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 80115c8:	68f9      	ldr	r1, [r7, #12]
 80115ca:	68b8      	ldr	r0, [r7, #8]
 80115cc:	f000 f878 	bl	80116c0 <VL53L1_f_038>
 80115d0:	4603      	mov	r3, r0
 80115d2:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	7a9a      	ldrb	r2, [r3, #10]
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	7a9b      	ldrb	r3, [r3, #10]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d203      	bcs.n	80115e8 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	7a9b      	ldrb	r3, [r3, #10]
 80115e4:	75bb      	strb	r3, [r7, #22]
 80115e6:	e002      	b.n	80115ee <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	7a9b      	ldrb	r3, [r3, #10]
 80115ec:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80115ee:	2300      	movs	r3, #0
 80115f0:	75fb      	strb	r3, [r7, #23]
 80115f2:	e05c      	b.n	80116ae <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80115f4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	db0f      	blt.n	801161c <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80115fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011600:	461a      	mov	r2, r3
 8011602:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011606:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	7a92      	ldrb	r2, [r2, #10]
 801160c:	b252      	sxtb	r2, r2
 801160e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011612:	fb01 f202 	mul.w	r2, r1, r2
 8011616:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8011618:	757b      	strb	r3, [r7, #21]
 801161a:	e013      	b.n	8011644 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	7a9b      	ldrb	r3, [r3, #10]
 8011620:	b25b      	sxtb	r3, r3
 8011622:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8011624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011628:	4619      	mov	r1, r3
 801162a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801162e:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011630:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8011632:	68ba      	ldr	r2, [r7, #8]
 8011634:	7a92      	ldrb	r2, [r2, #10]
 8011636:	b252      	sxtb	r2, r2
 8011638:	fb93 f1f2 	sdiv	r1, r3, r2
 801163c:	fb01 f202 	mul.w	r2, r1, r2
 8011640:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011642:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011644:	7d7b      	ldrb	r3, [r7, #21]
 8011646:	461a      	mov	r2, r3
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	3206      	adds	r2, #6
 801164c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8011650:	7df9      	ldrb	r1, [r7, #23]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	3106      	adds	r1, #6
 8011656:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801165a:	429a      	cmp	r2, r3
 801165c:	dd12      	ble.n	8011684 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801165e:	7d7b      	ldrb	r3, [r7, #21]
 8011660:	461a      	mov	r2, r3
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	3206      	adds	r2, #6
 8011666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801166a:	7df9      	ldrb	r1, [r7, #23]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	3106      	adds	r1, #6
 8011670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011674:	7d79      	ldrb	r1, [r7, #21]
 8011676:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011678:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	1d82      	adds	r2, r0, #6
 801167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011682:	e006      	b.n	8011692 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011684:	7d7b      	ldrb	r3, [r7, #21]
 8011686:	461a      	mov	r2, r3
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	3206      	adds	r2, #6
 801168c:	2100      	movs	r1, #0
 801168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 8011692:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011694:	7d7b      	ldrb	r3, [r7, #21]
 8011696:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3206      	adds	r2, #6
 801169c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	1d82      	adds	r2, r0, #6
 80116a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	3301      	adds	r3, #1
 80116ac:	75fb      	strb	r3, [r7, #23]
 80116ae:	7dfa      	ldrb	r2, [r7, #23]
 80116b0:	7dbb      	ldrb	r3, [r7, #22]
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d39e      	bcc.n	80115f4 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 80116b6:	bf00      	nop
 80116b8:	bf00      	nop
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 80116ca:	2300      	movs	r3, #0
 80116cc:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fd fb85 	bl	800edf0 <VL53L1_decode_vcsel_period>
 80116e6:	4603      	mov	r3, r0
	period = 2048 *
 80116e8:	02db      	lsls	r3, r3, #11
 80116ea:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00a      	beq.n	8011708 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80116f8:	68ba      	ldr	r2, [r7, #8]
 80116fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80116fe:	68b9      	ldr	r1, [r7, #8]
 8011700:	fb01 f202 	mul.w	r2, r1, r2
 8011704:	1a9b      	subs	r3, r3, r2
 8011706:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801170e:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8011710:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	dd09      	ble.n	8011730 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011722:	2b00      	cmp	r3, #0
 8011724:	da01      	bge.n	801172a <VL53L1_f_038+0x6a>
 8011726:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801172a:	12db      	asrs	r3, r3, #11
 801172c:	75fb      	strb	r3, [r7, #23]
 801172e:	e008      	b.n	8011742 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011736:	2b00      	cmp	r3, #0
 8011738:	da01      	bge.n	801173e <VL53L1_f_038+0x7e>
 801173a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801173e:	12db      	asrs	r3, r3, #11
 8011740:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8011742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011746:	4618      	mov	r0, r3
 8011748:	3718      	adds	r7, #24
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801174e:	b580      	push	{r7, lr}
 8011750:	b08e      	sub	sp, #56	; 0x38
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
 8011756:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011758:	2300      	movs	r3, #0
 801175a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011764:	2300      	movs	r3, #0
 8011766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011774:	2300      	movs	r3, #0
 8011776:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801177a:	2300      	movs	r3, #0
 801177c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 8011780:	22ac      	movs	r2, #172	; 0xac
 8011782:	6879      	ldr	r1, [r7, #4]
 8011784:	6838      	ldr	r0, [r7, #0]
 8011786:	f008 fa71 	bl	8019c6c <memcpy>


	podata->VL53L1_p_024 = 0;
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	2200      	movs	r2, #0
 801178e:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011790:	2300      	movs	r3, #0
 8011792:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011796:	e00a      	b.n	80117ae <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8011798:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801179c:	683a      	ldr	r2, [r7, #0]
 801179e:	4413      	add	r3, r2
 80117a0:	2210      	movs	r2, #16
 80117a2:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80117a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117a8:	3301      	adds	r3, #1
 80117aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117b2:	2b05      	cmp	r3, #5
 80117b4:	d9f0      	bls.n	8011798 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80117b6:	2300      	movs	r3, #0
 80117b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117bc:	e00b      	b.n	80117d6 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 80117be:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	3206      	adds	r2, #6
 80117c6:	2100      	movs	r1, #0
 80117c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80117cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117d0:	3301      	adds	r3, #1
 80117d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	7a5b      	ldrb	r3, [r3, #9]
 80117da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80117de:	429a      	cmp	r2, r3
 80117e0:	d3ed      	bcc.n	80117be <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80117e2:	2300      	movs	r3, #0
 80117e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117e8:	e012      	b.n	8011810 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80117ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117ee:	3338      	adds	r3, #56	; 0x38
 80117f0:	443b      	add	r3, r7
 80117f2:	2200      	movs	r2, #0
 80117f4:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80117f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117fc:	3338      	adds	r3, #56	; 0x38
 80117fe:	443b      	add	r3, r7
 8011800:	2200      	movs	r2, #0
 8011802:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011806:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801180a:	3301      	adds	r3, #1
 801180c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011810:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011814:	2b0f      	cmp	r3, #15
 8011816:	d9e8      	bls.n	80117ea <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8011818:	2300      	movs	r3, #0
 801181a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801181e:	2300      	movs	r3, #0
 8011820:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011824:	e068      	b.n	80118f8 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8011826:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	4413      	add	r3, r2
 801182e:	7b1b      	ldrb	r3, [r3, #12]
 8011830:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8011834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011838:	3338      	adds	r3, #56	; 0x38
 801183a:	443b      	add	r3, r7
 801183c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d115      	bne.n	8011870 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011844:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011848:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801184c:	0092      	lsls	r2, r2, #2
 801184e:	b2d2      	uxtb	r2, r2
 8011850:	3338      	adds	r3, #56	; 0x38
 8011852:	443b      	add	r3, r7
 8011854:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011858:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801185c:	683a      	ldr	r2, [r7, #0]
 801185e:	4413      	add	r3, r2
 8011860:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011864:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801186a:	3301      	adds	r3, #1
 801186c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011870:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011874:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011878:	443a      	add	r2, r7
 801187a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801187e:	3201      	adds	r2, #1
 8011880:	b2d2      	uxtb	r2, r2
 8011882:	3338      	adds	r3, #56	; 0x38
 8011884:	443b      	add	r3, r7
 8011886:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 801188a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801188e:	3338      	adds	r3, #56	; 0x38
 8011890:	443b      	add	r3, r7
 8011892:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 801189a:	2300      	movs	r3, #0
 801189c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80118a0:	e021      	b.n	80118e6 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 80118a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80118a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118aa:	441a      	add	r2, r3
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	3206      	adds	r2, #6
 80118b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 80118b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118b8:	009a      	lsls	r2, r3, #2
 80118ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118be:	441a      	add	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	3206      	adds	r2, #6
 80118c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 80118c8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 80118cc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80118d0:	4402      	add	r2, r0
 80118d2:	4419      	add	r1, r3
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	3206      	adds	r2, #6
 80118d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80118dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118e0:	3301      	adds	r3, #1
 80118e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80118e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118ea:	2b03      	cmp	r3, #3
 80118ec:	d9d9      	bls.n	80118a2 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80118ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118f2:	3301      	adds	r3, #1
 80118f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118fc:	2b05      	cmp	r3, #5
 80118fe:	d992      	bls.n	8011826 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011900:	2300      	movs	r3, #0
 8011902:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011906:	e022      	b.n	801194e <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8011908:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801190c:	683a      	ldr	r2, [r7, #0]
 801190e:	4413      	add	r3, r2
 8011910:	7b1b      	ldrb	r3, [r3, #12]
 8011912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8011916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801191a:	2b0f      	cmp	r3, #15
 801191c:	d80c      	bhi.n	8011938 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801191e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8011922:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8011926:	3238      	adds	r2, #56	; 0x38
 8011928:	443a      	add	r2, r7
 801192a:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	4413      	add	r3, r2
 8011932:	460a      	mov	r2, r1
 8011934:	749a      	strb	r2, [r3, #18]
 8011936:	e005      	b.n	8011944 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8011938:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801193c:	683a      	ldr	r2, [r7, #0]
 801193e:	4413      	add	r3, r2
 8011940:	2200      	movs	r2, #0
 8011942:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011944:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011948:	3301      	adds	r3, #1
 801194a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801194e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011952:	2b05      	cmp	r3, #5
 8011954:	d9d8      	bls.n	8011908 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	b2da      	uxtb	r2, r3
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011962:	2300      	movs	r3, #0
 8011964:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011968:	e050      	b.n	8011a0c <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801196a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801196e:	3338      	adds	r3, #56	; 0x38
 8011970:	443b      	add	r3, r7
 8011972:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011976:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	2b00      	cmp	r3, #0
 801197c:	dd41      	ble.n	8011a02 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 801197e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011982:	3338      	adds	r3, #56	; 0x38
 8011984:	443b      	add	r3, r7
 8011986:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801198a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 801198e:	2300      	movs	r3, #0
 8011990:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011994:	e031      	b.n	80119fa <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011996:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801199a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801199e:	441a      	add	r2, r3
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	3206      	adds	r2, #6
 80119a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	0fda      	lsrs	r2, r3, #31
 80119ac:	4413      	add	r3, r2
 80119ae:	105b      	asrs	r3, r3, #1
 80119b0:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 80119b2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80119b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119ba:	441a      	add	r2, r3
 80119bc:	4401      	add	r1, r0
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	3206      	adds	r2, #6
 80119c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 80119c6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80119ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119ce:	441a      	add	r2, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	3206      	adds	r2, #6
 80119d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80119dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119e0:	441a      	add	r2, r3
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	fb91 f1f3 	sdiv	r1, r1, r3
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	3206      	adds	r2, #6
 80119ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80119f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119f4:	3301      	adds	r3, #1
 80119f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80119fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80119fe:	2b03      	cmp	r3, #3
 8011a00:	d9c9      	bls.n	8011996 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011a02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a06:	3301      	adds	r3, #1
 8011a08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011a0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a10:	2b0f      	cmp	r3, #15
 8011a12:	d9aa      	bls.n	801196a <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2200      	movs	r2, #0
 8011a18:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 8011a1a:	7bfb      	ldrb	r3, [r7, #15]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d102      	bne.n	8011a26 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d002      	beq.n	8011a2c <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	2204      	movs	r2, #4
 8011a2a:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8011a2c:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3738      	adds	r7, #56	; 0x38
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3a:	b0cb      	sub	sp, #300	; 0x12c
 8011a3c:	af06      	add	r7, sp, #24
 8011a3e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011a42:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011a46:	6020      	str	r0, [r4, #0]
 8011a48:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011a4c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011a50:	6001      	str	r1, [r0, #0]
 8011a52:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011a56:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8011a5a:	600a      	str	r2, [r1, #0]
 8011a5c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011a60:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011a64:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011a66:	2300      	movs	r3, #0
 8011a68:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8011a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8011a7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011a80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011a84:	f107 0318 	add.w	r3, r7, #24
 8011a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 8011a90:	2300      	movs	r3, #0
 8011a92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011a96:	2300      	movs	r3, #0
 8011a98:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ab8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011abc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8011ac0:	6818      	ldr	r0, [r3, #0]
 8011ac2:	f7ff fe44 	bl	801174e <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 8011ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011aca:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 8011acc:	b299      	uxth	r1, r3
 8011ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ad2:	3348      	adds	r3, #72	; 0x48
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	f7fd f9db 	bl	800ee92 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 8011adc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ae4:	3348      	adds	r3, #72	; 0x48
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	4610      	mov	r0, r2
 8011aea:	f7fd f994 	bl	800ee16 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 8011aee:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d142      	bne.n	8011b7c <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011afa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d039      	beq.n	8011b7c <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8011b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8011b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011b30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011b3e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b42:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011b46:	6812      	ldr	r2, [r2, #0]
 8011b48:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011b4c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011b50:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011b54:	6809      	ldr	r1, [r1, #0]
 8011b56:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8011b5a:	f107 0014 	add.w	r0, r7, #20
 8011b5e:	9004      	str	r0, [sp, #16]
 8011b60:	9103      	str	r1, [sp, #12]
 8011b62:	9202      	str	r2, [sp, #8]
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	2300      	movs	r3, #0
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	4632      	mov	r2, r6
 8011b6e:	4629      	mov	r1, r5
 8011b70:	4620      	mov	r0, r4
 8011b72:	f002 f98c 	bl	8013e8e <VL53L1_f_040>
 8011b76:	4603      	mov	r3, r0
 8011b78:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011b7c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d115      	bne.n	8011bb0 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00c      	beq.n	8011bb0 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011b96:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011ba0:	3348      	adds	r3, #72	; 0x48
 8011ba2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011ba6:	f002 fbe4 	bl	8014372 <VL53L1_f_041>
 8011baa:	4603      	mov	r3, r0
 8011bac:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011bb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011bb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011bc4:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bcc:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8011bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bde:	2200      	movs	r2, #0
 8011be0:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011be4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8011bee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011c10:	2301      	movs	r3, #1
 8011c12:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011c16:	2300      	movs	r3, #0
 8011c18:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011c1c:	e108      	b.n	8011e30 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8011c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011c34:	3348      	adds	r3, #72	; 0x48
 8011c36:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011c3a:	7814      	ldrb	r4, [r2, #0]
 8011c3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011c40:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011c44:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011c48:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011c4c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011c50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c54:	9405      	str	r4, [sp, #20]
 8011c56:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011c5a:	9404      	str	r4, [sp, #16]
 8011c5c:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011c60:	9403      	str	r4, [sp, #12]
 8011c62:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011c66:	9402      	str	r4, [sp, #8]
 8011c68:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011c6c:	9401      	str	r4, [sp, #4]
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	6809      	ldr	r1, [r1, #0]
 8011c78:	6800      	ldr	r0, [r0, #0]
 8011c7a:	f7fe fe65 	bl	8010948 <VL53L1_f_033>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011c84:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f040 80cb 	bne.w	8011e24 <VL53L1_hist_process_data+0x3ec>
 8011c8e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f040 80c6 	bne.w	8011e24 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011c9c:	7c9b      	ldrb	r3, [r3, #18]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d110      	bne.n	8011cc4 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011ca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ca6:	3314      	adds	r3, #20
 8011ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011cb0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011cb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011cb6:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011cbc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011cbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011cc2:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011cc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011cc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011cd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011cd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	461a      	mov	r2, r3
 8011cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011ce0:	fb02 f303 	mul.w	r3, r2, r3
 8011ce4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011cec:	011b      	lsls	r3, r3, #4
 8011cee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011cf8:	e08b      	b.n	8011e12 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011cfa:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011cfe:	224c      	movs	r2, #76	; 0x4c
 8011d00:	fb02 f303 	mul.w	r3, r2, r3
 8011d04:	3310      	adds	r3, #16
 8011d06:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011d0a:	4413      	add	r3, r2
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011d12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d16:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011d1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d1e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011d22:	429a      	cmp	r2, r3
 8011d24:	dd0e      	ble.n	8011d44 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011d26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d2a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011d2e:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011d30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d34:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011d38:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	b29b      	uxth	r3, r3
				delta_mm =
 8011d3e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011d42:	e00d      	b.n	8011d60 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011d44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d48:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011d4c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d52:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011d56:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011d58:	1ad3      	subs	r3, r2, r3
 8011d5a:	b29b      	uxth	r3, r3
				delta_mm =
 8011d5c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011d60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011d70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011d74:	781b      	ldrb	r3, [r3, #0]
 8011d76:	461a      	mov	r2, r3
 8011d78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d7c:	fb02 f303 	mul.w	r3, r2, r3
 8011d80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011d84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011d88:	015b      	lsls	r3, r3, #5
 8011d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011d8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011d92:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011da4:	429a      	cmp	r2, r3
 8011da6:	dd2f      	ble.n	8011e08 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011da8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dac:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011db0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011db4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	da22      	bge.n	8011e08 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011dc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011dc8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d91b      	bls.n	8011e08 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011dd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011dd6:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d913      	bls.n	8011e08 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011de0:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011de4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011de8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011dec:	6812      	ldr	r2, [r2, #0]
 8011dee:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011df0:	4293      	cmp	r3, r2
 8011df2:	da09      	bge.n	8011e08 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011df4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011df8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011dfc:	224c      	movs	r2, #76	; 0x4c
 8011dfe:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011e02:	4618      	mov	r0, r3
 8011e04:	f007 ff32 	bl	8019c6c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011e08:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011e16:	7c9b      	ldrb	r3, [r3, #18]
 8011e18:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	f4ff af6c 	bcc.w	8011cfa <VL53L1_hist_process_data+0x2c2>
 8011e22:	e000      	b.n	8011e26 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011e24:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011e26:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011e30:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011e34:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	f67f aef0 	bls.w	8011c1e <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011e3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011e42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011e50:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e5e <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b086      	sub	sp, #24
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	60f8      	str	r0, [r7, #12]
 8011e66:	460b      	mov	r3, r1
 8011e68:	607a      	str	r2, [r7, #4]
 8011e6a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d104      	bne.n	8011e82 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f7f9 fb5a 	bl	800b532 <VL53L1_disable_firmware>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d104      	bne.n	8011e94 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f7f9 fb82 	bl	800b594 <VL53L1_enable_powerforce>
 8011e90:	4603      	mov	r3, r0
 8011e92:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d105      	bne.n	8011ea8 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011e9c:	21fa      	movs	r1, #250	; 0xfa
 8011e9e:	68f8      	ldr	r0, [r7, #12]
 8011ea0:	f002 fdd0 	bl	8014a44 <VL53L1_WaitUs>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d107      	bne.n	8011ec0 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	f240 7181 	movw	r1, #1921	; 0x781
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f002 fcd0 	bl	801485c <VL53L1_WrByte>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d107      	bne.n	8011ed8 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011ec8:	2205      	movs	r2, #5
 8011eca:	f240 6183 	movw	r1, #1667	; 0x683
 8011ece:	68f8      	ldr	r0, [r7, #12]
 8011ed0:	f002 fcc4 	bl	801485c <VL53L1_WrByte>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011ed8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d105      	bne.n	8011eec <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011ee0:	6879      	ldr	r1, [r7, #4]
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	f002 fdae 	bl	8014a44 <VL53L1_WaitUs>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d107      	bne.n	8011f04 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f002 fcae 	bl	801485c <VL53L1_WrByte>
 8011f00:	4603      	mov	r3, r0
 8011f02:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d108      	bne.n	8011f1e <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011f0c:	897b      	ldrh	r3, [r7, #10]
 8011f0e:	461a      	mov	r2, r3
 8011f10:	f240 7184 	movw	r1, #1924	; 0x784
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f002 fccb 	bl	80148b0 <VL53L1_WrWord>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3718      	adds	r7, #24
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}

08011f2a <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011f2a:	b580      	push	{r7, lr}
 8011f2c:	b086      	sub	sp, #24
 8011f2e:	af00      	add	r7, sp, #0
 8011f30:	60f8      	str	r0, [r7, #12]
 8011f32:	607b      	str	r3, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	72fb      	strb	r3, [r7, #11]
 8011f38:	4613      	mov	r3, r2
 8011f3a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011f44:	7afb      	ldrb	r3, [r7, #11]
 8011f46:	75bb      	strb	r3, [r7, #22]
 8011f48:	e041      	b.n	8011fce <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011f52:	7dbb      	ldrb	r3, [r7, #22]
 8011f54:	461a      	mov	r2, r3
 8011f56:	f240 7194 	movw	r1, #1940	; 0x794
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f002 fc7e 	bl	801485c <VL53L1_WrByte>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d107      	bne.n	8011f7c <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	f240 7183 	movw	r1, #1923	; 0x783
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f002 fc72 	bl	801485c <VL53L1_WrByte>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8011f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d105      	bne.n	8011f90 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011f84:	2105      	movs	r1, #5
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f002 fd5c 	bl	8014a44 <VL53L1_WaitUs>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d107      	bne.n	8011fa8 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011f98:	2201      	movs	r2, #1
 8011f9a:	f240 7183 	movw	r1, #1923	; 0x783
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f002 fc5c 	bl	801485c <VL53L1_WrByte>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d108      	bne.n	8011fc2 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011fb0:	2304      	movs	r3, #4
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f002 fc19 	bl	80147f0 <VL53L1_ReadMulti>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011fc8:	7dbb      	ldrb	r3, [r7, #22]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	75bb      	strb	r3, [r7, #22]
 8011fce:	7dba      	ldrb	r2, [r7, #22]
 8011fd0:	7af9      	ldrb	r1, [r7, #11]
 8011fd2:	7abb      	ldrb	r3, [r7, #10]
 8011fd4:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	dbb7      	blt.n	8011f4a <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8011fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	3718      	adds	r7, #24
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}

08011fe6 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011fe6:	b580      	push	{r7, lr}
 8011fe8:	b084      	sub	sp, #16
 8011fea:	af00      	add	r7, sp, #0
 8011fec:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d107      	bne.n	801200a <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	f240 7183 	movw	r1, #1923	; 0x783
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f002 fc2b 	bl	801485c <VL53L1_WrByte>
 8012006:	4603      	mov	r3, r0
 8012008:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 801200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d107      	bne.n	8012022 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8012012:	2200      	movs	r2, #0
 8012014:	f240 7181 	movw	r1, #1921	; 0x781
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f002 fc1f 	bl	801485c <VL53L1_WrByte>
 801201e:	4603      	mov	r3, r0
 8012020:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8012022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d104      	bne.n	8012034 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7f9 fac4 	bl	800b5b8 <VL53L1_disable_powerforce>
 8012030:	4603      	mov	r3, r0
 8012032:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8012034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d104      	bne.n	8012046 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7f9 fa66 	bl	800b50e <VL53L1_enable_firmware>
 8012042:	4603      	mov	r3, r0
 8012044:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8012046:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8012052:	b480      	push	{r7}
 8012054:	b087      	sub	sp, #28
 8012056:	af00      	add	r7, sp, #0
 8012058:	4603      	mov	r3, r0
 801205a:	60b9      	str	r1, [r7, #8]
 801205c:	607a      	str	r2, [r7, #4]
 801205e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012060:	2300      	movs	r3, #0
 8012062:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8012064:	2300      	movs	r3, #0
 8012066:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8012068:	89fb      	ldrh	r3, [r7, #14]
 801206a:	2b03      	cmp	r3, #3
 801206c:	d802      	bhi.n	8012074 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 801206e:	f06f 0308 	mvn.w	r3, #8
 8012072:	e018      	b.n	80120a6 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8012074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012078:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	3302      	adds	r3, #2
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	b29b      	uxth	r3, r3
 8012082:	8afa      	ldrh	r2, [r7, #22]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8012088:	8afb      	ldrh	r3, [r7, #22]
 801208a:	2bff      	cmp	r3, #255	; 0xff
 801208c:	d901      	bls.n	8012092 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 801208e:	2300      	movs	r3, #0
 8012090:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8012092:	8afb      	ldrh	r3, [r7, #22]
 8012094:	b2da      	uxtb	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	78da      	ldrb	r2, [r3, #3]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	705a      	strb	r2, [r3, #1]

	return status;
 80120a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	371c      	adds	r7, #28
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr

080120b2 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 80120b2:	b590      	push	{r4, r7, lr}
 80120b4:	b087      	sub	sp, #28
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	4603      	mov	r3, r0
 80120ba:	60b9      	str	r1, [r7, #8]
 80120bc:	607a      	str	r2, [r7, #4]
 80120be:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80120c0:	2300      	movs	r3, #0
 80120c2:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 80120c4:	2300      	movs	r3, #0
 80120c6:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 80120c8:	2300      	movs	r3, #0
 80120ca:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 80120cc:	89fb      	ldrh	r3, [r7, #14]
 80120ce:	2b37      	cmp	r3, #55	; 0x37
 80120d0:	d802      	bhi.n	80120d8 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80120d2:	f06f 0308 	mvn.w	r3, #8
 80120d6:	e03e      	b.n	8012156 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80120d8:	68b9      	ldr	r1, [r7, #8]
 80120da:	2002      	movs	r0, #2
 80120dc:	f7f9 f8fd 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80120e0:	4603      	mov	r3, r0
 80120e2:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	3302      	adds	r3, #2
 80120ec:	4619      	mov	r1, r3
 80120ee:	2002      	movs	r0, #2
 80120f0:	f7f9 f8f3 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80120f4:	4603      	mov	r3, r0
 80120f6:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8012100:	099b      	lsrs	r3, r3, #6
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2219      	movs	r2, #25
 801210c:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2205      	movs	r2, #5
 8012112:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2205      	movs	r2, #5
 8012118:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	3304      	adds	r3, #4
 801211e:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012120:	2300      	movs	r3, #0
 8012122:	74fb      	strb	r3, [r7, #19]
 8012124:	e012      	b.n	801214c <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8012126:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8012128:	6979      	ldr	r1, [r7, #20]
 801212a:	2002      	movs	r0, #2
 801212c:	f7f9 f8d5 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012130:	4603      	mov	r3, r0
 8012132:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	1d23      	adds	r3, r4, #4
 8012138:	005b      	lsls	r3, r3, #1
 801213a:	4413      	add	r3, r2
 801213c:	460a      	mov	r2, r1
 801213e:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	3302      	adds	r3, #2
 8012144:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012146:	7cfb      	ldrb	r3, [r7, #19]
 8012148:	3301      	adds	r3, #1
 801214a:	74fb      	strb	r3, [r7, #19]
 801214c:	7cfb      	ldrb	r3, [r7, #19]
 801214e:	2b18      	cmp	r3, #24
 8012150:	d9e9      	bls.n	8012126 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8012152:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012156:	4618      	mov	r0, r3
 8012158:	371c      	adds	r7, #28
 801215a:	46bd      	mov	sp, r7
 801215c:	bd90      	pop	{r4, r7, pc}

0801215e <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b086      	sub	sp, #24
 8012162:	af00      	add	r7, sp, #0
 8012164:	4603      	mov	r3, r0
 8012166:	60b9      	str	r1, [r7, #8]
 8012168:	607a      	str	r2, [r7, #4]
 801216a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801216c:	2300      	movs	r3, #0
 801216e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8012170:	89fb      	ldrh	r3, [r7, #14]
 8012172:	2b07      	cmp	r3, #7
 8012174:	d802      	bhi.n	801217c <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012176:	f06f 0308 	mvn.w	r3, #8
 801217a:	e027      	b.n	80121cc <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 801217c:	68b9      	ldr	r1, [r7, #8]
 801217e:	2002      	movs	r0, #2
 8012180:	f7f9 f8ab 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012184:	4603      	mov	r3, r0
 8012186:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	3302      	adds	r3, #2
 8012190:	4619      	mov	r1, r3
 8012192:	2002      	movs	r0, #2
 8012194:	f7f9 f8a1 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012198:	4603      	mov	r3, r0
 801219a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	3304      	adds	r3, #4
 80121a4:	4619      	mov	r1, r3
 80121a6:	2002      	movs	r0, #2
 80121a8:	f7f9 f897 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80121ac:	4603      	mov	r3, r0
 80121ae:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	3306      	adds	r3, #6
 80121b8:	4619      	mov	r1, r3
 80121ba:	2002      	movs	r0, #2
 80121bc:	f7f9 f88d 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80121c0:	4603      	mov	r3, r0
 80121c2:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	80da      	strh	r2, [r3, #6]

	return status;
 80121c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	4603      	mov	r3, r0
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80121e2:	2300      	movs	r3, #0
 80121e4:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 80121e6:	89fb      	ldrh	r3, [r7, #14]
 80121e8:	2b0f      	cmp	r3, #15
 80121ea:	d802      	bhi.n	80121f2 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80121ec:	f06f 0308 	mvn.w	r3, #8
 80121f0:	e04d      	b.n	801228e <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80121f2:	68b9      	ldr	r1, [r7, #8]
 80121f4:	2002      	movs	r0, #2
 80121f6:	f7f9 f870 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80121fa:	4603      	mov	r3, r0
 80121fc:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	789a      	ldrb	r2, [r3, #2]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	78da      	ldrb	r2, [r3, #3]
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	3304      	adds	r3, #4
 8012216:	4619      	mov	r1, r3
 8012218:	2002      	movs	r0, #2
 801221a:	f7f9 f85e 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 801221e:	4603      	mov	r3, r0
 8012220:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	3306      	adds	r3, #6
 801222a:	4619      	mov	r1, r3
 801222c:	2002      	movs	r0, #2
 801222e:	f7f9 f854 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012232:	4603      	mov	r3, r0
 8012234:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	3308      	adds	r3, #8
 801223e:	4619      	mov	r1, r3
 8012240:	2002      	movs	r0, #2
 8012242:	f7f9 f84a 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012246:	4603      	mov	r3, r0
 8012248:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	330a      	adds	r3, #10
 8012252:	4619      	mov	r1, r3
 8012254:	2002      	movs	r0, #2
 8012256:	f7f9 f840 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 801225a:	4603      	mov	r3, r0
 801225c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	330c      	adds	r3, #12
 8012266:	4619      	mov	r1, r3
 8012268:	2002      	movs	r0, #2
 801226a:	f7f9 f836 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 801226e:	4603      	mov	r3, r0
 8012270:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	330e      	adds	r3, #14
 801227a:	4619      	mov	r1, r3
 801227c:	2002      	movs	r0, #2
 801227e:	f7f9 f82c 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012282:	4603      	mov	r3, r0
 8012284:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	81da      	strh	r2, [r3, #14]

	return status;
 801228a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3718      	adds	r7, #24
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b086      	sub	sp, #24
 801229a:	af00      	add	r7, sp, #0
 801229c:	60f8      	str	r0, [r7, #12]
 801229e:	607b      	str	r3, [r7, #4]
 80122a0:	460b      	mov	r3, r1
 80122a2:	72fb      	strb	r3, [r7, #11]
 80122a4:	4613      	mov	r3, r2
 80122a6:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80122a8:	2300      	movs	r3, #0
 80122aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 80122ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d106      	bne.n	80122c2 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 80122b4:	2232      	movs	r2, #50	; 0x32
 80122b6:	2104      	movs	r1, #4
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7ff fdd0 	bl	8011e5e <VL53L1_nvm_enable>
 80122be:	4603      	mov	r3, r0
 80122c0:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 80122c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d107      	bne.n	80122da <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 80122ca:	7aba      	ldrb	r2, [r7, #10]
 80122cc:	7af9      	ldrb	r1, [r7, #11]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7ff fe2a 	bl	8011f2a <VL53L1_nvm_read>
 80122d6:	4603      	mov	r3, r0
 80122d8:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 80122da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d104      	bne.n	80122ec <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	f7ff fe7f 	bl	8011fe6 <VL53L1_nvm_disable>
 80122e8:	4603      	mov	r3, r0
 80122ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80122ec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3718      	adds	r7, #24
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}

080122f8 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012302:	2300      	movs	r3, #0
 8012304:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012306:	f107 0308 	add.w	r3, r7, #8
 801230a:	2201      	movs	r2, #1
 801230c:	212e      	movs	r1, #46	; 0x2e
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7ff ffc1 	bl	8012296 <VL53L1_read_nvm_raw_data>
 8012314:	4603      	mov	r3, r0
 8012316:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d108      	bne.n	8012332 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8012320:	f107 0308 	add.w	r3, r7, #8
 8012324:	683a      	ldr	r2, [r7, #0]
 8012326:	4619      	mov	r1, r3
 8012328:	2004      	movs	r0, #4
 801232a:	f7ff fe92 	bl	8012052 <VL53L1_nvm_decode_optical_centre>
 801232e:	4603      	mov	r3, r0
 8012330:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8012332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801233e:	b580      	push	{r7, lr}
 8012340:	b092      	sub	sp, #72	; 0x48
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
 8012346:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012348:	2300      	movs	r3, #0
 801234a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801234e:	f107 030c 	add.w	r3, r7, #12
 8012352:	220e      	movs	r2, #14
 8012354:	2157      	movs	r1, #87	; 0x57
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ff ff9d 	bl	8012296 <VL53L1_read_nvm_raw_data>
 801235c:	4603      	mov	r3, r0
 801235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012362:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012366:	2b00      	cmp	r3, #0
 8012368:	d109      	bne.n	801237e <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 801236a:	f107 030c 	add.w	r3, r7, #12
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	4619      	mov	r1, r3
 8012372:	2038      	movs	r0, #56	; 0x38
 8012374:	f7ff fe9d 	bl	80120b2 <VL53L1_nvm_decode_cal_peak_rate_map>
 8012378:	4603      	mov	r3, r0
 801237a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 801237e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8012382:	4618      	mov	r0, r3
 8012384:	3748      	adds	r7, #72	; 0x48
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b086      	sub	sp, #24
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
 8012392:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012394:	2300      	movs	r3, #0
 8012396:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012398:	f107 030c 	add.w	r3, r7, #12
 801239c:	2202      	movs	r2, #2
 801239e:	2165      	movs	r1, #101	; 0x65
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ff ff78 	bl	8012296 <VL53L1_read_nvm_raw_data>
 80123a6:	4603      	mov	r3, r0
 80123a8:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80123aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d108      	bne.n	80123c4 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 80123b2:	f107 030c 	add.w	r3, r7, #12
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	4619      	mov	r1, r3
 80123ba:	2008      	movs	r0, #8
 80123bc:	f7ff fecf 	bl	801215e <VL53L1_nvm_decode_additional_offset_cal_data>
 80123c0:	4603      	mov	r3, r0
 80123c2:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80123c4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	460b      	mov	r3, r1
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123de:	2300      	movs	r3, #0
 80123e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80123e4:	897b      	ldrh	r3, [r7, #10]
 80123e6:	089b      	lsrs	r3, r3, #2
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	b2d9      	uxtb	r1, r3
 80123ec:	f107 0314 	add.w	r3, r7, #20
 80123f0:	2204      	movs	r2, #4
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f7ff ff4f 	bl	8012296 <VL53L1_read_nvm_raw_data>
 80123f8:	4603      	mov	r3, r0
 80123fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80123fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012402:	2b00      	cmp	r3, #0
 8012404:	d109      	bne.n	801241a <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8012406:	f107 0314 	add.w	r3, r7, #20
 801240a:	687a      	ldr	r2, [r7, #4]
 801240c:	4619      	mov	r1, r3
 801240e:	2010      	movs	r0, #16
 8012410:	f7ff fee0 	bl	80121d4 <VL53L1_nvm_decode_fmt_range_results_data>
 8012414:	4603      	mov	r3, r0
 8012416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 801241a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 801241e:	4618      	mov	r0, r3
 8012420:	3728      	adds	r7, #40	; 0x28
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}

08012426 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b086      	sub	sp, #24
 801242a:	af00      	add	r7, sp, #0
 801242c:	60f8      	str	r0, [r7, #12]
 801242e:	460b      	mov	r3, r1
 8012430:	607a      	str	r2, [r7, #4]
 8012432:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012434:	2300      	movs	r3, #0
 8012436:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8012438:	897b      	ldrh	r3, [r7, #10]
 801243a:	2b0a      	cmp	r3, #10
 801243c:	d802      	bhi.n	8012444 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801243e:	f06f 0309 	mvn.w	r3, #9
 8012442:	e047      	b.n	80124d4 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801244c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801245a:	f002 020f 	and.w	r2, r2, #15
 801245e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012460:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801246a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801246e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012470:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801247a:	f002 0203 	and.w	r2, r2, #3
 801247e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012480:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 801248a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801248e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012490:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	88d8      	ldrh	r0, [r3, #6]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	3305      	adds	r3, #5
 801249a:	461a      	mov	r2, r3
 801249c:	2102      	movs	r1, #2
 801249e:	f7f8 fef1 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80124a6:	68fa      	ldr	r2, [r7, #12]
 80124a8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80124aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80124b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80124be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80124c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80124c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80124ce:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80124d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3718      	adds	r7, #24
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b086      	sub	sp, #24
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
 80124e8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124ea:	2300      	movs	r3, #0
 80124ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80124ee:	89fb      	ldrh	r3, [r7, #14]
 80124f0:	2b0a      	cmp	r3, #10
 80124f2:	d802      	bhi.n	80124fa <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124f4:	f06f 0309 	mvn.w	r3, #9
 80124f8:	e046      	b.n	8012588 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012502:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	3301      	adds	r3, #1
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	f003 030f 	and.w	r3, r3, #15
 8012512:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	3302      	adds	r3, #2
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012522:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	3303      	adds	r3, #3
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	f003 0303 	and.w	r3, r3, #3
 8012532:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	3304      	adds	r3, #4
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012542:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	3305      	adds	r3, #5
 801254c:	4619      	mov	r1, r3
 801254e:	2002      	movs	r0, #2
 8012550:	f7f8 fec3 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012554:	4603      	mov	r3, r0
 8012556:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	79da      	ldrb	r2, [r3, #7]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	7a1a      	ldrb	r2, [r3, #8]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	3309      	adds	r3, #9
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012576:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	7a9a      	ldrb	r2, [r3, #10]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3718      	adds	r7, #24
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b086      	sub	sp, #24
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801259a:	2300      	movs	r3, #0
 801259c:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801259e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d108      	bne.n	80125b8 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80125a6:	f107 020c 	add.w	r2, r7, #12
 80125aa:	230b      	movs	r3, #11
 80125ac:	2101      	movs	r1, #1
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f002 f91e 	bl	80147f0 <VL53L1_ReadMulti>
 80125b4:	4603      	mov	r3, r0
 80125b6:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80125b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d108      	bne.n	80125d2 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80125c0:	f107 030c 	add.w	r3, r7, #12
 80125c4:	683a      	ldr	r2, [r7, #0]
 80125c6:	4619      	mov	r1, r3
 80125c8:	200b      	movs	r0, #11
 80125ca:	f7ff ff87 	bl	80124dc <VL53L1_i2c_decode_static_nvm_managed>
 80125ce:	4603      	mov	r3, r0
 80125d0:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80125d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3718      	adds	r7, #24
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80125de:	b580      	push	{r7, lr}
 80125e0:	b086      	sub	sp, #24
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	60f8      	str	r0, [r7, #12]
 80125e6:	460b      	mov	r3, r1
 80125e8:	607a      	str	r2, [r7, #4]
 80125ea:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125ec:	2300      	movs	r3, #0
 80125ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80125f0:	897b      	ldrh	r3, [r7, #10]
 80125f2:	2b16      	cmp	r3, #22
 80125f4:	d802      	bhi.n	80125fc <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80125f6:	f06f 0309 	mvn.w	r3, #9
 80125fa:	e076      	b.n	80126ea <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801260c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8012612:	68fa      	ldr	r2, [r7, #12]
 8012614:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012616:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012620:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801262a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012634:	f002 020f 	and.w	r2, r2, #15
 8012638:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801263a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8012640:	68fa      	ldr	r2, [r7, #12]
 8012642:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012644:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801264e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012652:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012654:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801265e:	f002 0203 	and.w	r2, r2, #3
 8012662:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012664:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	8958      	ldrh	r0, [r3, #10]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	3309      	adds	r3, #9
 801266e:	461a      	mov	r2, r3
 8012670:	2102      	movs	r1, #2
 8012672:	f7f8 fe07 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	330b      	adds	r3, #11
 8012680:	461a      	mov	r2, r3
 8012682:	2102      	movs	r1, #2
 8012684:	f7f8 fe49 	bl	800b31a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	330d      	adds	r3, #13
 8012692:	461a      	mov	r2, r3
 8012694:	2102      	movs	r1, #2
 8012696:	f7f8 fe40 	bl	800b31a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	8a18      	ldrh	r0, [r3, #16]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	330f      	adds	r3, #15
 80126a2:	461a      	mov	r2, r3
 80126a4:	2102      	movs	r1, #2
 80126a6:	f7f8 fded 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80126b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126b4:	b218      	sxth	r0, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	3311      	adds	r3, #17
 80126ba:	461a      	mov	r2, r3
 80126bc:	2102      	movs	r1, #2
 80126be:	f7f8 fe2c 	bl	800b31a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	3313      	adds	r3, #19
 80126cc:	461a      	mov	r2, r3
 80126ce:	2102      	movs	r1, #2
 80126d0:	f7f8 fe23 	bl	800b31a <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	3315      	adds	r3, #21
 80126de:	461a      	mov	r2, r3
 80126e0:	2102      	movs	r1, #2
 80126e2:	f7f8 fe1a 	bl	800b31a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80126e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3718      	adds	r7, #24
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b086      	sub	sp, #24
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	4603      	mov	r3, r0
 80126fa:	60b9      	str	r1, [r7, #8]
 80126fc:	607a      	str	r2, [r7, #4]
 80126fe:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012700:	2300      	movs	r3, #0
 8012702:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8012704:	89fb      	ldrh	r3, [r7, #14]
 8012706:	2b16      	cmp	r3, #22
 8012708:	d802      	bhi.n	8012710 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801270a:	f06f 0309 	mvn.w	r3, #9
 801270e:	e079      	b.n	8012804 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8012718:	68bb      	ldr	r3, [r7, #8]
 801271a:	785a      	ldrb	r2, [r3, #1]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	789a      	ldrb	r2, [r3, #2]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	78da      	ldrb	r2, [r3, #3]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	791a      	ldrb	r2, [r3, #4]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	3305      	adds	r3, #5
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	f003 030f 	and.w	r3, r3, #15
 8012742:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	799a      	ldrb	r2, [r3, #6]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	3307      	adds	r3, #7
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801275a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	3308      	adds	r3, #8
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	f003 0303 	and.w	r3, r3, #3
 801276a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	3309      	adds	r3, #9
 8012774:	4619      	mov	r1, r3
 8012776:	2002      	movs	r0, #2
 8012778:	f7f8 fdaf 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 801277c:	4603      	mov	r3, r0
 801277e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	330b      	adds	r3, #11
 8012788:	4619      	mov	r1, r3
 801278a:	2002      	movs	r0, #2
 801278c:	f7f8 fdf1 	bl	800b372 <VL53L1_i2c_decode_int16_t>
 8012790:	4603      	mov	r3, r0
 8012792:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	330d      	adds	r3, #13
 801279c:	4619      	mov	r1, r3
 801279e:	2002      	movs	r0, #2
 80127a0:	f7f8 fde7 	bl	800b372 <VL53L1_i2c_decode_int16_t>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	330f      	adds	r3, #15
 80127b0:	4619      	mov	r1, r3
 80127b2:	2002      	movs	r0, #2
 80127b4:	f7f8 fd91 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80127b8:	4603      	mov	r3, r0
 80127ba:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	3311      	adds	r3, #17
 80127c4:	4619      	mov	r1, r3
 80127c6:	2002      	movs	r0, #2
 80127c8:	f7f8 fdd3 	bl	800b372 <VL53L1_i2c_decode_int16_t>
 80127cc:	4603      	mov	r3, r0
 80127ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127d2:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	3313      	adds	r3, #19
 80127dc:	4619      	mov	r1, r3
 80127de:	2002      	movs	r0, #2
 80127e0:	f7f8 fdc7 	bl	800b372 <VL53L1_i2c_decode_int16_t>
 80127e4:	4603      	mov	r3, r0
 80127e6:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	3315      	adds	r3, #21
 80127f0:	4619      	mov	r1, r3
 80127f2:	2002      	movs	r0, #2
 80127f4:	f7f8 fdbd 	bl	800b372 <VL53L1_i2c_decode_int16_t>
 80127f8:	4603      	mov	r3, r0
 80127fa:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8012800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b088      	sub	sp, #32
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012816:	2300      	movs	r3, #0
 8012818:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801281a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d108      	bne.n	8012834 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012822:	f107 0208 	add.w	r2, r7, #8
 8012826:	2317      	movs	r3, #23
 8012828:	210d      	movs	r1, #13
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f001 ffe0 	bl	80147f0 <VL53L1_ReadMulti>
 8012830:	4603      	mov	r3, r0
 8012832:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d108      	bne.n	801284e <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801283c:	f107 0308 	add.w	r3, r7, #8
 8012840:	683a      	ldr	r2, [r7, #0]
 8012842:	4619      	mov	r1, r3
 8012844:	2017      	movs	r0, #23
 8012846:	f7ff ff54 	bl	80126f2 <VL53L1_i2c_decode_customer_nvm_managed>
 801284a:	4603      	mov	r3, r0
 801284c:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801284e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3720      	adds	r7, #32
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}

0801285a <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801285a:	b580      	push	{r7, lr}
 801285c:	b086      	sub	sp, #24
 801285e:	af00      	add	r7, sp, #0
 8012860:	60f8      	str	r0, [r7, #12]
 8012862:	460b      	mov	r3, r1
 8012864:	607a      	str	r2, [r7, #4]
 8012866:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012868:	2300      	movs	r3, #0
 801286a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 801286c:	897b      	ldrh	r3, [r7, #10]
 801286e:	2b1f      	cmp	r3, #31
 8012870:	d802      	bhi.n	8012878 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012872:	f06f 0309 	mvn.w	r3, #9
 8012876:	e0cf      	b.n	8012a18 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	881b      	ldrh	r3, [r3, #0]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	2102      	movs	r1, #2
 8012880:	4618      	mov	r0, r3
 8012882:	f7f8 fcff 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801288e:	f002 0201 	and.w	r2, r2, #1
 8012892:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012894:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801289e:	f002 020f 	and.w	r2, r2, #15
 80128a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80128a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80128ae:	f002 020f 	and.w	r2, r2, #15
 80128b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80128b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80128be:	f002 021f 	and.w	r2, r2, #31
 80128c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80128c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80128ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80128d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80128d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80128de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80128e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80128e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80128ee:	f002 0201 	and.w	r2, r2, #1
 80128f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80128f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80128fa:	68fa      	ldr	r2, [r7, #12]
 80128fc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80128fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8012908:	f002 0201 	and.w	r2, r2, #1
 801290c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801290e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8012918:	f002 0203 	and.w	r2, r2, #3
 801291c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801291e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012928:	f002 021f 	and.w	r2, r2, #31
 801292c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801292e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8012938:	f002 0203 	and.w	r2, r2, #3
 801293c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801293e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012948:	f002 0203 	and.w	r2, r2, #3
 801294c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801294e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012958:	f002 0207 	and.w	r2, r2, #7
 801295c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801295e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012968:	f002 021f 	and.w	r2, r2, #31
 801296c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801296e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012978:	f002 0201 	and.w	r2, r2, #1
 801297c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801297e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012988:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012992:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012998:	68fa      	ldr	r2, [r7, #12]
 801299a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801299c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80129a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80129b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80129ba:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	8b18      	ldrh	r0, [r3, #24]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3318      	adds	r3, #24
 80129c4:	461a      	mov	r2, r3
 80129c6:	2102      	movs	r1, #2
 80129c8:	f7f8 fc5c 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80129d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80129da:	68fa      	ldr	r2, [r7, #12]
 80129dc:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80129de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80129e8:	f002 020f 	and.w	r2, r2, #15
 80129ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80129ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80129f4:	68fa      	ldr	r2, [r7, #12]
 80129f6:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80129f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8012a02:	f002 020f 	and.w	r2, r2, #15
 8012a06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8012a08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8012a12:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3718      	adds	r7, #24
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	607a      	str	r2, [r7, #4]
 8012a2c:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8012a32:	897b      	ldrh	r3, [r7, #10]
 8012a34:	2b15      	cmp	r3, #21
 8012a36:	d802      	bhi.n	8012a3e <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a38:	f06f 0309 	mvn.w	r3, #9
 8012a3c:	e070      	b.n	8012b20 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012a4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012a58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a66:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012a68:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8012a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012a72:	b298      	uxth	r0, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	3304      	adds	r3, #4
 8012a78:	461a      	mov	r2, r3
 8012a7a:	2102      	movs	r1, #2
 8012a7c:	f7f8 fc02 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012a8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012a98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8012aac:	f002 0201 	and.w	r2, r2, #1
 8012ab0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012ab2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8012abc:	f002 0207 	and.w	r2, r2, #7
 8012ac0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012ac2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	8998      	ldrh	r0, [r3, #12]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	330c      	adds	r3, #12
 8012acc:	461a      	mov	r2, r3
 8012ace:	2102      	movs	r1, #2
 8012ad0:	f7f8 fbd8 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	89d8      	ldrh	r0, [r3, #14]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	330e      	adds	r3, #14
 8012adc:	461a      	mov	r2, r3
 8012ade:	2102      	movs	r1, #2
 8012ae0:	f7f8 fbd0 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	8a18      	ldrh	r0, [r3, #16]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	3310      	adds	r3, #16
 8012aec:	461a      	mov	r2, r3
 8012aee:	2102      	movs	r1, #2
 8012af0:	f7f8 fbc8 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012afc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8012b02:	68fa      	ldr	r2, [r7, #12]
 8012b04:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012b06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012b10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012b1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	3718      	adds	r7, #24
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	460b      	mov	r3, r1
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b36:	2300      	movs	r3, #0
 8012b38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8012b3a:	897b      	ldrh	r3, [r7, #10]
 8012b3c:	2b16      	cmp	r3, #22
 8012b3e:	d802      	bhi.n	8012b46 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012b40:	f06f 0309 	mvn.w	r3, #9
 8012b44:	e06e      	b.n	8012c24 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f003 030f 	and.w	r3, r3, #15
 8012b4e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012b5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012b66:	f002 020f 	and.w	r2, r2, #15
 8012b6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012b6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012b72:	68fa      	ldr	r2, [r7, #12]
 8012b74:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012b76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012b80:	f002 020f 	and.w	r2, r2, #15
 8012b84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012b86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012b90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012b9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012b9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012ba0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012baa:	f002 020f 	and.w	r2, r2, #15
 8012bae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012bb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012bb6:	68fa      	ldr	r2, [r7, #12]
 8012bb8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012bba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012bc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012bc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012bca:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	8958      	ldrh	r0, [r3, #10]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	330a      	adds	r3, #10
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	2102      	movs	r1, #2
 8012bd8:	f7f8 fb54 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	8998      	ldrh	r0, [r3, #12]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	330c      	adds	r3, #12
 8012be4:	461a      	mov	r2, r3
 8012be6:	2102      	movs	r1, #2
 8012be8:	f7f8 fb4c 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012bf0:	68fa      	ldr	r2, [r7, #12]
 8012bf2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012bf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012bfa:	68fa      	ldr	r2, [r7, #12]
 8012bfc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012bfe:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	6918      	ldr	r0, [r3, #16]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	3312      	adds	r3, #18
 8012c08:	461a      	mov	r2, r3
 8012c0a:	2104      	movs	r1, #4
 8012c0c:	f7f8 fbda 	bl	800b3c4 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012c18:	f002 0201 	and.w	r2, r2, #1
 8012c1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012c1e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3718      	adds	r7, #24
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	460b      	mov	r3, r1
 8012c36:	607a      	str	r2, [r7, #4]
 8012c38:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8012c3e:	897b      	ldrh	r3, [r7, #10]
 8012c40:	2b11      	cmp	r3, #17
 8012c42:	d802      	bhi.n	8012c4a <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012c44:	f06f 0309 	mvn.w	r3, #9
 8012c48:	e071      	b.n	8012d2e <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	f003 0303 	and.w	r3, r3, #3
 8012c52:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	8858      	ldrh	r0, [r3, #2]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	461a      	mov	r2, r3
 8012c62:	2102      	movs	r1, #2
 8012c64:	f7f8 fb0e 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	8898      	ldrh	r0, [r3, #4]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	3303      	adds	r3, #3
 8012c70:	461a      	mov	r2, r3
 8012c72:	2102      	movs	r1, #2
 8012c74:	f7f8 fb06 	bl	800b284 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012c80:	f002 0201 	and.w	r2, r2, #1
 8012c84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012c86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012c90:	f002 0207 	and.w	r2, r2, #7
 8012c94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012ca0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012ca6:	68fa      	ldr	r2, [r7, #12]
 8012ca8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012caa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012cb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012cba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012cc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012cca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012cd4:	f002 0203 	and.w	r2, r2, #3
 8012cd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012cda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012ce4:	f002 0203 	and.w	r2, r2, #3
 8012ce8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012cea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012cf4:	f002 020f 	and.w	r2, r2, #15
 8012cf8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012cfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012d04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012d14:	68fa      	ldr	r2, [r7, #12]
 8012d16:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012d18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012d22:	f002 0203 	and.w	r2, r2, #3
 8012d26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012d28:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}

08012d36 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012d36:	b480      	push	{r7}
 8012d38:	b087      	sub	sp, #28
 8012d3a:	af00      	add	r7, sp, #0
 8012d3c:	60f8      	str	r0, [r7, #12]
 8012d3e:	460b      	mov	r3, r1
 8012d40:	607a      	str	r2, [r7, #4]
 8012d42:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012d44:	2300      	movs	r3, #0
 8012d46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012d48:	897b      	ldrh	r3, [r7, #10]
 8012d4a:	2b04      	cmp	r3, #4
 8012d4c:	d802      	bhi.n	8012d54 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012d4e:	f06f 0309 	mvn.w	r3, #9
 8012d52:	e025      	b.n	8012da0 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	f003 0301 	and.w	r3, r3, #1
 8012d5c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012d6a:	f002 0201 	and.w	r2, r2, #1
 8012d6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012d70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012d7a:	f002 0201 	and.w	r2, r2, #1
 8012d7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012d80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012d8a:	f002 0203 	and.w	r2, r2, #3
 8012d8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012d90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012d96:	68fa      	ldr	r2, [r7, #12]
 8012d98:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012d9a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	371c      	adds	r7, #28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012daa:	4770      	bx	lr

08012dac <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
 8012db4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012db6:	2300      	movs	r3, #0
 8012db8:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d108      	bne.n	8012dd4 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012dc2:	f107 0308 	add.w	r3, r7, #8
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	2105      	movs	r1, #5
 8012dca:	6838      	ldr	r0, [r7, #0]
 8012dcc:	f7ff ffb3 	bl	8012d36 <VL53L1_i2c_encode_system_control>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d108      	bne.n	8012dee <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012ddc:	f107 0208 	add.w	r2, r7, #8
 8012de0:	2305      	movs	r3, #5
 8012de2:	2183      	movs	r1, #131	; 0x83
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f001 fccd 	bl	8014784 <VL53L1_WriteMulti>
 8012dea:	4603      	mov	r3, r0
 8012dec:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b086      	sub	sp, #24
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	4603      	mov	r3, r0
 8012e02:	60b9      	str	r1, [r7, #8]
 8012e04:	607a      	str	r2, [r7, #4]
 8012e06:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012e0c:	89fb      	ldrh	r3, [r7, #14]
 8012e0e:	2b2b      	cmp	r3, #43	; 0x2b
 8012e10:	d802      	bhi.n	8012e18 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012e12:	f06f 0309 	mvn.w	r3, #9
 8012e16:	e0e2      	b.n	8012fde <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e20:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	785a      	ldrb	r2, [r3, #1]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	3302      	adds	r3, #2
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	f003 030f 	and.w	r3, r3, #15
 8012e38:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	78da      	ldrb	r2, [r3, #3]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	3304      	adds	r3, #4
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	2002      	movs	r0, #2
 8012e4e:	f7f8 fa44 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012e52:	4603      	mov	r3, r0
 8012e54:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	3306      	adds	r3, #6
 8012e5e:	4619      	mov	r1, r3
 8012e60:	2002      	movs	r0, #2
 8012e62:	f7f8 fa3a 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012e66:	4603      	mov	r3, r0
 8012e68:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	3308      	adds	r3, #8
 8012e72:	4619      	mov	r1, r3
 8012e74:	2002      	movs	r0, #2
 8012e76:	f7f8 fa30 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	330a      	adds	r3, #10
 8012e86:	4619      	mov	r1, r3
 8012e88:	2002      	movs	r0, #2
 8012e8a:	f7f8 fa26 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	330c      	adds	r3, #12
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	2002      	movs	r0, #2
 8012e9e:	f7f8 fa1c 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	330e      	adds	r3, #14
 8012eae:	4619      	mov	r1, r3
 8012eb0:	2002      	movs	r0, #2
 8012eb2:	f7f8 fa12 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	3310      	adds	r3, #16
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	2002      	movs	r0, #2
 8012ec6:	f7f8 fa08 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	3312      	adds	r3, #18
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	2002      	movs	r0, #2
 8012eda:	f7f8 f9fe 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	3314      	adds	r3, #20
 8012eea:	4619      	mov	r1, r3
 8012eec:	2002      	movs	r0, #2
 8012eee:	f7f8 f9f4 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	3316      	adds	r3, #22
 8012efe:	4619      	mov	r1, r3
 8012f00:	2002      	movs	r0, #2
 8012f02:	f7f8 f9ea 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f06:	4603      	mov	r3, r0
 8012f08:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	3318      	adds	r3, #24
 8012f12:	4619      	mov	r1, r3
 8012f14:	2002      	movs	r0, #2
 8012f16:	f7f8 f9e0 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	331a      	adds	r3, #26
 8012f26:	4619      	mov	r1, r3
 8012f28:	2002      	movs	r0, #2
 8012f2a:	f7f8 f9d6 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	331c      	adds	r3, #28
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	2002      	movs	r0, #2
 8012f3e:	f7f8 f9cc 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f42:	4603      	mov	r3, r0
 8012f44:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	331e      	adds	r3, #30
 8012f4e:	4619      	mov	r1, r3
 8012f50:	2002      	movs	r0, #2
 8012f52:	f7f8 f9c2 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f56:	4603      	mov	r3, r0
 8012f58:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	3320      	adds	r3, #32
 8012f62:	4619      	mov	r1, r3
 8012f64:	2002      	movs	r0, #2
 8012f66:	f7f8 f9b8 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	3322      	adds	r3, #34	; 0x22
 8012f76:	4619      	mov	r1, r3
 8012f78:	2002      	movs	r0, #2
 8012f7a:	f7f8 f9ae 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	3324      	adds	r3, #36	; 0x24
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	2002      	movs	r0, #2
 8012f8e:	f7f8 f9a4 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012f92:	4603      	mov	r3, r0
 8012f94:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	3326      	adds	r3, #38	; 0x26
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	2002      	movs	r0, #2
 8012fa2:	f7f8 f99a 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	3328      	adds	r3, #40	; 0x28
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	2002      	movs	r0, #2
 8012fb6:	f7f8 f990 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3718      	adds	r7, #24
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b086      	sub	sp, #24
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	4603      	mov	r3, r0
 8012fee:	60b9      	str	r1, [r7, #8]
 8012ff0:	607a      	str	r2, [r7, #4]
 8012ff2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012ff8:	89fb      	ldrh	r3, [r7, #14]
 8012ffa:	2b20      	cmp	r3, #32
 8012ffc:	d802      	bhi.n	8013004 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012ffe:	f06f 0309 	mvn.w	r3, #9
 8013002:	e04d      	b.n	80130a0 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8013004:	68b9      	ldr	r1, [r7, #8]
 8013006:	2004      	movs	r0, #4
 8013008:	f7f8 fa06 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 801300c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	3304      	adds	r3, #4
 8013016:	4619      	mov	r1, r3
 8013018:	2004      	movs	r0, #4
 801301a:	f7f8 f9fd 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 801301e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	3308      	adds	r3, #8
 8013028:	4619      	mov	r1, r3
 801302a:	2004      	movs	r0, #4
 801302c:	f7f8 fa11 	bl	800b452 <VL53L1_i2c_decode_int32_t>
 8013030:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	330c      	adds	r3, #12
 801303a:	4619      	mov	r1, r3
 801303c:	2004      	movs	r0, #4
 801303e:	f7f8 f9eb 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8013042:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8013048:	68bb      	ldr	r3, [r7, #8]
 801304a:	3310      	adds	r3, #16
 801304c:	4619      	mov	r1, r3
 801304e:	2004      	movs	r0, #4
 8013050:	f7f8 f9e2 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8013054:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	3314      	adds	r3, #20
 801305e:	4619      	mov	r1, r3
 8013060:	2004      	movs	r0, #4
 8013062:	f7f8 f9d9 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8013066:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	3318      	adds	r3, #24
 8013070:	4619      	mov	r1, r3
 8013072:	2004      	movs	r0, #4
 8013074:	f7f8 f9ed 	bl	800b452 <VL53L1_i2c_decode_int32_t>
 8013078:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	331c      	adds	r3, #28
 8013082:	4619      	mov	r1, r3
 8013084:	2004      	movs	r0, #4
 8013086:	f7f8 f9c7 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 801308a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 801309c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3718      	adds	r7, #24
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b086      	sub	sp, #24
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	4603      	mov	r3, r0
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
 80130b4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80130b6:	2300      	movs	r3, #0
 80130b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 80130ba:	89fb      	ldrh	r3, [r7, #14]
 80130bc:	2b37      	cmp	r3, #55	; 0x37
 80130be:	d802      	bhi.n	80130c6 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80130c0:	f06f 0309 	mvn.w	r3, #9
 80130c4:	e15e      	b.n	8013384 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80130c6:	68b9      	ldr	r1, [r7, #8]
 80130c8:	2002      	movs	r0, #2
 80130ca:	f7f8 f906 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80130ce:	4603      	mov	r3, r0
 80130d0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	3302      	adds	r3, #2
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130e0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	3303      	adds	r3, #3
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130f0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	3304      	adds	r3, #4
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	f003 0303 	and.w	r3, r3, #3
 8013100:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	3305      	adds	r3, #5
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	3306      	adds	r3, #6
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013120:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	3307      	adds	r3, #7
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013130:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	3308      	adds	r3, #8
 801313a:	4619      	mov	r1, r3
 801313c:	2002      	movs	r0, #2
 801313e:	f7f8 f8cc 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 8013142:	4603      	mov	r3, r0
 8013144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013148:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	330a      	adds	r3, #10
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f003 0303 	and.w	r3, r3, #3
 8013158:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	330b      	adds	r3, #11
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	f003 0303 	and.w	r3, r3, #3
 8013168:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	330c      	adds	r3, #12
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	f003 030f 	and.w	r3, r3, #15
 8013178:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	330d      	adds	r3, #13
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	f003 0307 	and.w	r3, r3, #7
 8013188:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	330e      	adds	r3, #14
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	f003 0301 	and.w	r3, r3, #1
 8013198:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	330f      	adds	r3, #15
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	f003 0303 	and.w	r3, r3, #3
 80131a8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	7c1a      	ldrb	r2, [r3, #16]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	7c5a      	ldrb	r2, [r3, #17]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	3312      	adds	r3, #18
 80131c2:	4619      	mov	r1, r3
 80131c4:	2002      	movs	r0, #2
 80131c6:	f7f8 f888 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80131ca:	4603      	mov	r3, r0
 80131cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80131d0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	3316      	adds	r3, #22
 80131da:	4619      	mov	r1, r3
 80131dc:	2002      	movs	r0, #2
 80131de:	f7f8 f87c 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80131e2:	4603      	mov	r3, r0
 80131e4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	3318      	adds	r3, #24
 80131ee:	4619      	mov	r1, r3
 80131f0:	2002      	movs	r0, #2
 80131f2:	f7f8 f872 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80131f6:	4603      	mov	r3, r0
 80131f8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	331a      	adds	r3, #26
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	331b      	adds	r3, #27
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	f003 0307 	and.w	r3, r3, #7
 8013218:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	7f1a      	ldrb	r2, [r3, #28]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	7f5a      	ldrb	r2, [r3, #29]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	331e      	adds	r3, #30
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013238:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	331f      	adds	r3, #31
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013248:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	3320      	adds	r3, #32
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	f003 0303 	and.w	r3, r3, #3
 8013258:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	3321      	adds	r3, #33	; 0x21
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f003 030f 	and.w	r3, r3, #15
 8013268:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	3325      	adds	r3, #37	; 0x25
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	3326      	adds	r3, #38	; 0x26
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	f003 0303 	and.w	r3, r3, #3
 80132ae:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	3327      	adds	r3, #39	; 0x27
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	f003 031f 	and.w	r3, r3, #31
 80132c0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	3328      	adds	r3, #40	; 0x28
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	f003 031f 	and.w	r3, r3, #31
 80132d2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	3329      	adds	r3, #41	; 0x29
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	f003 031f 	and.w	r3, r3, #31
 80132e4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	332a      	adds	r3, #42	; 0x2a
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	f003 0301 	and.w	r3, r3, #1
 80132f6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	332b      	adds	r3, #43	; 0x2b
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	f003 0301 	and.w	r3, r3, #1
 8013308:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	332c      	adds	r3, #44	; 0x2c
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	f003 0303 	and.w	r3, r3, #3
 801331a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	332d      	adds	r3, #45	; 0x2d
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801332c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	332e      	adds	r3, #46	; 0x2e
 8013338:	4619      	mov	r1, r3
 801333a:	2004      	movs	r0, #4
 801333c:	f7f8 f86c 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8013340:	4603      	mov	r3, r0
 8013342:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	3332      	adds	r3, #50	; 0x32
 801334e:	4619      	mov	r1, r3
 8013350:	2004      	movs	r0, #4
 8013352:	f7f8 f861 	bl	800b418 <VL53L1_i2c_decode_uint32_t>
 8013356:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	3336      	adds	r3, #54	; 0x36
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	f003 0301 	and.w	r3, r3, #1
 8013366:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801336e:	68bb      	ldr	r3, [r7, #8]
 8013370:	3337      	adds	r3, #55	; 0x37
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	f003 0301 	and.w	r3, r3, #1
 8013378:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8013380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013384:	4618      	mov	r0, r3
 8013386:	3718      	adds	r7, #24
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b086      	sub	sp, #24
 8013390:	af00      	add	r7, sp, #0
 8013392:	4603      	mov	r3, r0
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801339a:	2300      	movs	r3, #0
 801339c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801339e:	89fb      	ldrh	r3, [r7, #14]
 80133a0:	2b30      	cmp	r3, #48	; 0x30
 80133a2:	d802      	bhi.n	80133aa <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80133a4:	f06f 0309 	mvn.w	r3, #9
 80133a8:	e112      	b.n	80135d0 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	785a      	ldrb	r2, [r3, #1]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	789a      	ldrb	r2, [r3, #2]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	3303      	adds	r3, #3
 80133c6:	4619      	mov	r1, r3
 80133c8:	2002      	movs	r0, #2
 80133ca:	f7f7 ff86 	bl	800b2da <VL53L1_i2c_decode_uint16_t>
 80133ce:	4603      	mov	r3, r0
 80133d0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	3305      	adds	r3, #5
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	3306      	adds	r3, #6
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	f003 0307 	and.w	r3, r3, #7
 80133f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	3307      	adds	r3, #7
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	f003 0307 	and.w	r3, r3, #7
 8013400:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	3308      	adds	r3, #8
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013410:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	3309      	adds	r3, #9
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013420:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	330a      	adds	r3, #10
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	f003 0301 	and.w	r3, r3, #1
 8013430:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	330b      	adds	r3, #11
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013440:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	330c      	adds	r3, #12
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	f003 0301 	and.w	r3, r3, #1
 8013450:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	330d      	adds	r3, #13
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013460:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8013466:	68bb      	ldr	r3, [r7, #8]
 8013468:	330e      	adds	r3, #14
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013470:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	7bda      	ldrb	r2, [r3, #15]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	7c1a      	ldrb	r2, [r3, #16]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8013486:	68bb      	ldr	r3, [r7, #8]
 8013488:	7c5a      	ldrb	r2, [r3, #17]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	7c9a      	ldrb	r2, [r3, #18]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	7cda      	ldrb	r2, [r3, #19]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	7d1a      	ldrb	r2, [r3, #20]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	7d5a      	ldrb	r2, [r3, #21]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	7d9a      	ldrb	r2, [r3, #22]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	7dda      	ldrb	r2, [r3, #23]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	7e1a      	ldrb	r2, [r3, #24]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	7e5a      	ldrb	r2, [r3, #25]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	7e9a      	ldrb	r2, [r3, #26]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	7eda      	ldrb	r2, [r3, #27]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	7f1a      	ldrb	r2, [r3, #28]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	7f5a      	ldrb	r2, [r3, #29]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	7f9a      	ldrb	r2, [r3, #30]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	7fda      	ldrb	r2, [r3, #31]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8013578:	68bb      	ldr	r3, [r7, #8]
 801357a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80135cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3718      	adds	r7, #24
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}

080135d8 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b090      	sub	sp, #64	; 0x40
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80135e2:	2300      	movs	r3, #0
 80135e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80135e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10a      	bne.n	8013606 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80135f0:	f107 020c 	add.w	r2, r7, #12
 80135f4:	2331      	movs	r3, #49	; 0x31
 80135f6:	f240 110f 	movw	r1, #271	; 0x10f
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f001 f8f8 	bl	80147f0 <VL53L1_ReadMulti>
 8013600:	4603      	mov	r3, r0
 8013602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013606:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801360a:	2b00      	cmp	r3, #0
 801360c:	d109      	bne.n	8013622 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801360e:	f107 030c 	add.w	r3, r7, #12
 8013612:	683a      	ldr	r2, [r7, #0]
 8013614:	4619      	mov	r1, r3
 8013616:	2031      	movs	r0, #49	; 0x31
 8013618:	f7ff feb8 	bl	801338c <VL53L1_i2c_decode_nvm_copy_data>
 801361c:	4603      	mov	r3, r0
 801361e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8013622:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013626:	4618      	mov	r0, r3
 8013628:	3740      	adds	r7, #64	; 0x40
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801362e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013632:	b0d6      	sub	sp, #344	; 0x158
 8013634:	af00      	add	r7, sp, #0
 8013636:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801363a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801363e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013642:	4603      	mov	r3, r0
 8013644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013648:	23f1      	movs	r3, #241	; 0xf1
 801364a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801364e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013652:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013656:	2300      	movs	r3, #0
 8013658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 801365c:	f04f 0200 	mov.w	r2, #0
 8013660:	f04f 0300 	mov.w	r3, #0
 8013664:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013668:	f04f 0200 	mov.w	r2, #0
 801366c:	f04f 0300 	mov.w	r3, #0
 8013670:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013674:	f04f 0200 	mov.w	r2, #0
 8013678:	f04f 0300 	mov.w	r3, #0
 801367c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 8013680:	f04f 0200 	mov.w	r2, #0
 8013684:	f04f 0300 	mov.w	r3, #0
 8013688:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 801368c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013694:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8013696:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 801369a:	2b00      	cmp	r3, #0
 801369c:	f000 8322 	beq.w	8013ce4 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 80136a0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fb fa23 	bl	800eaf0 <VL53L1_calc_pll_period_mm>
 80136aa:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 80136ae:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80136b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d91a      	bls.n	80136f0 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80136ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80136be:	2200      	movs	r2, #0
 80136c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80136c4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 80136c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80136cc:	2200      	movs	r2, #0
 80136ce:	4698      	mov	r8, r3
 80136d0:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80136d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80136d6:	460b      	mov	r3, r1
 80136d8:	ebb3 0308 	subs.w	r3, r3, r8
 80136dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80136de:	4613      	mov	r3, r2
 80136e0:	eb63 0309 	sbc.w	r3, r3, r9
 80136e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80136ea:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80136ee:	e013      	b.n	8013718 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80136f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80136f4:	2200      	movs	r2, #0
 80136f6:	469a      	mov	sl, r3
 80136f8:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80136fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80136fe:	2200      	movs	r2, #0
 8013700:	461c      	mov	r4, r3
 8013702:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8013704:	ebba 0304 	subs.w	r3, sl, r4
 8013708:	633b      	str	r3, [r7, #48]	; 0x30
 801370a:	eb6b 0305 	sbc.w	r3, fp, r5
 801370e:	637b      	str	r3, [r7, #52]	; 0x34
 8013710:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013714:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8013718:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801371c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013720:	429a      	cmp	r2, r3
 8013722:	d91f      	bls.n	8013764 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013724:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013728:	2200      	movs	r2, #0
 801372a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801372e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8013732:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013736:	2200      	movs	r2, #0
 8013738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801373c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013740:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013744:	4623      	mov	r3, r4
 8013746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801374a:	4602      	mov	r2, r0
 801374c:	1a9b      	subs	r3, r3, r2
 801374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013750:	462b      	mov	r3, r5
 8013752:	460a      	mov	r2, r1
 8013754:	eb63 0302 	sbc.w	r3, r3, r2
 8013758:	62fb      	str	r3, [r7, #44]	; 0x2c
 801375a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801375e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013762:	e01e      	b.n	80137a2 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013768:	2200      	movs	r2, #0
 801376a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801376e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013772:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013776:	2200      	movs	r2, #0
 8013778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801377c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013780:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013784:	4623      	mov	r3, r4
 8013786:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801378a:	4602      	mov	r2, r0
 801378c:	1a9b      	subs	r3, r3, r2
 801378e:	623b      	str	r3, [r7, #32]
 8013790:	462b      	mov	r3, r5
 8013792:	460a      	mov	r2, r1
 8013794:	eb63 0302 	sbc.w	r3, r3, r2
 8013798:	627b      	str	r3, [r7, #36]	; 0x24
 801379a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801379e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 80137a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80137a6:	4313      	orrs	r3, r2
 80137a8:	f000 829c 	beq.w	8013ce4 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80137ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80137b0:	2200      	movs	r2, #0
 80137b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80137b6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80137ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80137be:	2200      	movs	r2, #0
 80137c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80137c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80137c8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80137cc:	4623      	mov	r3, r4
 80137ce:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80137d2:	4602      	mov	r2, r0
 80137d4:	189b      	adds	r3, r3, r2
 80137d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80137da:	460b      	mov	r3, r1
 80137dc:	462a      	mov	r2, r5
 80137de:	eb42 0303 	adc.w	r3, r2, r3
 80137e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80137e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80137ea:	2200      	movs	r2, #0
 80137ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80137f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80137f4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80137f8:	4623      	mov	r3, r4
 80137fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80137fe:	4602      	mov	r2, r0
 8013800:	189b      	adds	r3, r3, r2
 8013802:	61bb      	str	r3, [r7, #24]
 8013804:	460b      	mov	r3, r1
 8013806:	462a      	mov	r2, r5
 8013808:	eb42 0303 	adc.w	r3, r2, r3
 801380c:	61fb      	str	r3, [r7, #28]
 801380e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013812:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8013816:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801381a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801381e:	f173 0300 	sbcs.w	r3, r3, #0
 8013822:	d305      	bcc.n	8013830 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8013824:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013828:	f04f 0300 	mov.w	r3, #0
 801382c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8013830:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013838:	fb03 f102 	mul.w	r1, r3, r2
 801383c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013840:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013844:	fb02 f303 	mul.w	r3, r2, r3
 8013848:	18ca      	adds	r2, r1, r3
 801384a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801384e:	fba3 1303 	umull	r1, r3, r3, r3
 8013852:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013856:	460b      	mov	r3, r1
 8013858:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013860:	18d3      	adds	r3, r2, r3
 8013862:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013866:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801386a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801386e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013872:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013876:	f04f 0000 	mov.w	r0, #0
 801387a:	f04f 0100 	mov.w	r1, #0
 801387e:	0219      	lsls	r1, r3, #8
 8013880:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013884:	0210      	lsls	r0, r2, #8
 8013886:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 801388a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801388e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013892:	d305      	bcc.n	80138a0 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013894:	f04f 32ff 	mov.w	r2, #4294967295
 8013898:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801389c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80138a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80138a4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80138a8:	f7ec fd0a 	bl	80002c0 <__aeabi_uldivmod>
 80138ac:	4602      	mov	r2, r0
 80138ae:	460b      	mov	r3, r1
 80138b0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80138b4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80138b8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80138bc:	f7ec fd00 	bl	80002c0 <__aeabi_uldivmod>
 80138c0:	4602      	mov	r2, r0
 80138c2:	460b      	mov	r3, r1
 80138c4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 80138c8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80138cc:	2b80      	cmp	r3, #128	; 0x80
 80138ce:	d305      	bcc.n	80138dc <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80138d0:	f04f 32ff 	mov.w	r2, #4294967295
 80138d4:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80138d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80138dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80138e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80138e4:	fb03 f102 	mul.w	r1, r3, r2
 80138e8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80138ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80138f0:	fb02 f303 	mul.w	r3, r2, r3
 80138f4:	4419      	add	r1, r3
 80138f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80138fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80138fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013902:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013906:	4613      	mov	r3, r2
 8013908:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013910:	18cb      	adds	r3, r1, r3
 8013912:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013916:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 801391a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801391e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013922:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013926:	2200      	movs	r2, #0
 8013928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801392c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013930:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013934:	2200      	movs	r2, #0
 8013936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801393a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801393e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013942:	4623      	mov	r3, r4
 8013944:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013948:	4602      	mov	r2, r0
 801394a:	189b      	adds	r3, r3, r2
 801394c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013950:	460b      	mov	r3, r1
 8013952:	462a      	mov	r2, r5
 8013954:	eb42 0303 	adc.w	r3, r2, r3
 8013958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801395c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013960:	2200      	movs	r2, #0
 8013962:	67bb      	str	r3, [r7, #120]	; 0x78
 8013964:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013966:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801396a:	4623      	mov	r3, r4
 801396c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013970:	4602      	mov	r2, r0
 8013972:	189b      	adds	r3, r3, r2
 8013974:	673b      	str	r3, [r7, #112]	; 0x70
 8013976:	460b      	mov	r3, r1
 8013978:	462a      	mov	r2, r5
 801397a:	eb42 0303 	adc.w	r3, r2, r3
 801397e:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013980:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013984:	2200      	movs	r2, #0
 8013986:	66bb      	str	r3, [r7, #104]	; 0x68
 8013988:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801398a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801398e:	4623      	mov	r3, r4
 8013990:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013994:	4602      	mov	r2, r0
 8013996:	189b      	adds	r3, r3, r2
 8013998:	613b      	str	r3, [r7, #16]
 801399a:	460b      	mov	r3, r1
 801399c:	462a      	mov	r2, r5
 801399e:	eb42 0303 	adc.w	r3, r2, r3
 80139a2:	617b      	str	r3, [r7, #20]
 80139a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80139a8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 80139ac:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80139b0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80139b4:	f173 0300 	sbcs.w	r3, r3, #0
 80139b8:	d305      	bcc.n	80139c6 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 80139ba:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80139be:	f04f 0300 	mov.w	r3, #0
 80139c2:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 80139c6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80139ca:	f04f 0000 	mov.w	r0, #0
 80139ce:	f04f 0100 	mov.w	r1, #0
 80139d2:	0219      	lsls	r1, r3, #8
 80139d4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80139d8:	0210      	lsls	r0, r2, #8
 80139da:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 80139de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139e2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80139e6:	1884      	adds	r4, r0, r2
 80139e8:	60bc      	str	r4, [r7, #8]
 80139ea:	eb41 0303 	adc.w	r3, r1, r3
 80139ee:	60fb      	str	r3, [r7, #12]
 80139f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80139f4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80139f8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	da05      	bge.n	8013a0c <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013a00:	f04f 32ff 	mov.w	r2, #4294967295
 8013a04:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013a08:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013a0c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013a10:	2b01      	cmp	r3, #1
 8013a12:	d331      	bcc.n	8013a78 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013a14:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013a18:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013a1c:	f7ec fc50 	bl	80002c0 <__aeabi_uldivmod>
 8013a20:	4602      	mov	r2, r0
 8013a22:	460b      	mov	r3, r1
 8013a24:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8013a30:	667a      	str	r2, [r7, #100]	; 0x64
 8013a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a36:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013a3a:	4622      	mov	r2, r4
 8013a3c:	fb02 f203 	mul.w	r2, r2, r3
 8013a40:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a44:	4629      	mov	r1, r5
 8013a46:	fb01 f303 	mul.w	r3, r1, r3
 8013a4a:	441a      	add	r2, r3
 8013a4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a50:	4621      	mov	r1, r4
 8013a52:	fba3 1301 	umull	r1, r3, r3, r1
 8013a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013a64:	18d3      	adds	r3, r2, r3
 8013a66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013a6a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8013a6e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013a72:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013a76:	e030      	b.n	8013ada <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013a80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a86:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013a8a:	4622      	mov	r2, r4
 8013a8c:	fb02 f203 	mul.w	r2, r2, r3
 8013a90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a94:	4629      	mov	r1, r5
 8013a96:	fb01 f303 	mul.w	r3, r1, r3
 8013a9a:	441a      	add	r2, r3
 8013a9c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	fba3 1301 	umull	r1, r3, r3, r1
 8013aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013aaa:	460b      	mov	r3, r1
 8013aac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013ab4:	18d3      	adds	r3, r2, r3
 8013ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013aba:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8013abe:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013ac2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013ac6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013aca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ace:	f7ec fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013ada:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	da05      	bge.n	8013aee <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013aea:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 8013aee:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d33d      	bcc.n	8013b72 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013af6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013afa:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013afe:	f7ec fbdf 	bl	80002c0 <__aeabi_uldivmod>
 8013b02:	4602      	mov	r2, r0
 8013b04:	460b      	mov	r3, r1
 8013b06:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013b0a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b0e:	f04f 0200 	mov.w	r2, #0
 8013b12:	f04f 0300 	mov.w	r3, #0
 8013b16:	0882      	lsrs	r2, r0, #2
 8013b18:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013b1c:	088b      	lsrs	r3, r1, #2
 8013b1e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b26:	2200      	movs	r2, #0
 8013b28:	653b      	str	r3, [r7, #80]	; 0x50
 8013b2a:	657a      	str	r2, [r7, #84]	; 0x54
 8013b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013b34:	4622      	mov	r2, r4
 8013b36:	fb02 f203 	mul.w	r2, r2, r3
 8013b3a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b3e:	4629      	mov	r1, r5
 8013b40:	fb01 f303 	mul.w	r3, r1, r3
 8013b44:	4413      	add	r3, r2
 8013b46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013b4a:	4621      	mov	r1, r4
 8013b4c:	fba2 1201 	umull	r1, r2, r2, r1
 8013b50:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013b54:	460a      	mov	r2, r1
 8013b56:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013b5a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013b5e:	4413      	add	r3, r2
 8013b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013b64:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013b68:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b6c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013b70:	e03c      	b.n	8013bec <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b76:	2200      	movs	r2, #0
 8013b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b80:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013b84:	4622      	mov	r2, r4
 8013b86:	fb02 f203 	mul.w	r2, r2, r3
 8013b8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b8e:	4629      	mov	r1, r5
 8013b90:	fb01 f303 	mul.w	r3, r1, r3
 8013b94:	4413      	add	r3, r2
 8013b96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013b9a:	4621      	mov	r1, r4
 8013b9c:	fba2 1201 	umull	r1, r2, r2, r1
 8013ba0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013ba4:	460a      	mov	r2, r1
 8013ba6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8013baa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013bae:	4413      	add	r3, r2
 8013bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013bb4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013bb8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013bbc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013bc0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013bc4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bc8:	f7ec fb7a 	bl	80002c0 <__aeabi_uldivmod>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	460b      	mov	r3, r1
 8013bd0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013bd4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013bd8:	f04f 0200 	mov.w	r2, #0
 8013bdc:	f04f 0300 	mov.w	r3, #0
 8013be0:	0882      	lsrs	r2, r0, #2
 8013be2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013be6:	088b      	lsrs	r3, r1, #2
 8013be8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013bec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	da05      	bge.n	8013c00 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013bfc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013c00:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c04:	f04f 0200 	mov.w	r2, #0
 8013c08:	f04f 0300 	mov.w	r3, #0
 8013c0c:	0882      	lsrs	r2, r0, #2
 8013c0e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013c12:	088b      	lsrs	r3, r1, #2
 8013c14:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013c18:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d305      	bcc.n	8013c2c <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013c20:	f04f 32ff 	mov.w	r2, #4294967295
 8013c24:	f04f 0300 	mov.w	r3, #0
 8013c28:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8013c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013c30:	2200      	movs	r2, #0
 8013c32:	643b      	str	r3, [r7, #64]	; 0x40
 8013c34:	647a      	str	r2, [r7, #68]	; 0x44
 8013c36:	f04f 0200 	mov.w	r2, #0
 8013c3a:	f04f 0300 	mov.w	r3, #0
 8013c3e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013c42:	4629      	mov	r1, r5
 8013c44:	01cb      	lsls	r3, r1, #7
 8013c46:	4621      	mov	r1, r4
 8013c48:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013c4c:	4621      	mov	r1, r4
 8013c4e:	01ca      	lsls	r2, r1, #7
 8013c50:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013c54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013c58:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013c5c:	fb03 f202 	mul.w	r2, r3, r2
 8013c60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013c64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013c68:	fb01 f303 	mul.w	r3, r1, r3
 8013c6c:	441a      	add	r2, r3
 8013c6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013c72:	fba3 1303 	umull	r1, r3, r3, r3
 8013c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c84:	18d3      	adds	r3, r2, r3
 8013c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013c8a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013c8e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013c92:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013c96:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013c9a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013c9e:	1884      	adds	r4, r0, r2
 8013ca0:	603c      	str	r4, [r7, #0]
 8013ca2:	eb41 0303 	adc.w	r3, r1, r3
 8013ca6:	607b      	str	r3, [r7, #4]
 8013ca8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013cac:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013cb0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d305      	bcc.n	8013cc4 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013cbc:	f04f 0300 	mov.w	r3, #0
 8013cc0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013cc4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7fa fdaa 	bl	800e822 <VL53L1_isqrt>
 8013cce:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013cdc:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013ce4:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013cf4 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	3318      	adds	r3, #24
 8013d04:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d107      	bne.n	8013d22 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013d12:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 f88b 	bl	8013e32 <VL53L1_poll_for_range_completion>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	75fb      	strb	r3, [r7, #23]
 8013d20:	e01b      	b.n	8013d5a <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013d26:	e011      	b.n	8013d4c <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013d28:	f107 030f 	add.w	r3, r7, #15
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f000 f819 	bl	8013d66 <VL53L1_is_new_data_ready>
 8013d34:	4603      	mov	r3, r0
 8013d36:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d105      	bne.n	8013d4c <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013d40:	2101      	movs	r1, #1
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f000 fe6e 	bl	8014a24 <VL53L1_WaitMs>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013d4c:	7bfb      	ldrb	r3, [r7, #15]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d103      	bne.n	8013d5a <VL53L1_wait_for_test_completion+0x66>
 8013d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d0e6      	beq.n	8013d28 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b086      	sub	sp, #24
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
 8013d6e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013d70:	2300      	movs	r3, #0
 8013d72:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	3318      	adds	r3, #24
 8013d78:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013d82:	2300      	movs	r3, #0
 8013d84:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013d8c:	f003 0310 	and.w	r3, r3, #16
 8013d90:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013d92:	7bfb      	ldrb	r3, [r7, #15]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	75fb      	strb	r3, [r7, #23]
 8013d9c:	e001      	b.n	8013da2 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013d9e:	2300      	movs	r3, #0
 8013da0:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013da2:	f107 030e 	add.w	r3, r7, #14
 8013da6:	461a      	mov	r2, r3
 8013da8:	2131      	movs	r1, #49	; 0x31
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f000 fdb2 	bl	8014914 <VL53L1_RdByte>
 8013db0:	4603      	mov	r3, r0
 8013db2:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013db4:	7bbb      	ldrb	r3, [r7, #14]
 8013db6:	f003 0201 	and.w	r2, r3, #1
 8013dba:	7dfb      	ldrb	r3, [r7, #23]
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	d103      	bne.n	8013dc8 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	701a      	strb	r2, [r3, #0]
 8013dc6:	e002      	b.n	8013dce <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013dce:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3718      	adds	r7, #24
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b086      	sub	sp, #24
 8013dde:	af02      	add	r7, sp, #8
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013de4:	2300      	movs	r3, #0
 8013de6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013de8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f000 fe29 	bl	8014a44 <VL53L1_WaitUs>
 8013df2:	4603      	mov	r3, r0
 8013df4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d10b      	bne.n	8013e16 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013dfe:	2301      	movs	r3, #1
 8013e00:	9301      	str	r3, [sp, #4]
 8013e02:	2301      	movs	r3, #1
 8013e04:	9300      	str	r3, [sp, #0]
 8013e06:	2301      	movs	r3, #1
 8013e08:	22e5      	movs	r2, #229	; 0xe5
 8013e0a:	6839      	ldr	r1, [r7, #0]
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 fe31 	bl	8014a74 <VL53L1_WaitValueMaskEx>
 8013e12:	4603      	mov	r3, r0
 8013e14:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d103      	bne.n	8013e26 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013e1e:	2103      	movs	r1, #3
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f7f6 fc38 	bl	800a696 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3710      	adds	r7, #16
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b088      	sub	sp, #32
 8013e36:	af02      	add	r7, sp, #8
 8013e38:	6078      	str	r0, [r7, #4]
 8013e3a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	3318      	adds	r3, #24
 8013e44:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013e46:	2300      	movs	r3, #0
 8013e48:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013e54:	f003 0310 	and.w	r3, r3, #16
 8013e58:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013e5a:	7bfb      	ldrb	r3, [r7, #15]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d102      	bne.n	8013e66 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013e60:	2301      	movs	r3, #1
 8013e62:	75fb      	strb	r3, [r7, #23]
 8013e64:	e001      	b.n	8013e6a <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013e66:	2300      	movs	r3, #0
 8013e68:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013e6a:	7dfb      	ldrb	r3, [r7, #23]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	9201      	str	r2, [sp, #4]
 8013e70:	2201      	movs	r2, #1
 8013e72:	9200      	str	r2, [sp, #0]
 8013e74:	2231      	movs	r2, #49	; 0x31
 8013e76:	6839      	ldr	r1, [r7, #0]
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f000 fdfb 	bl	8014a74 <VL53L1_WaitValueMaskEx>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013e82:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3718      	adds	r7, #24
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}

08013e8e <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013e8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013e92:	b0c0      	sub	sp, #256	; 0x100
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013ed8:	f04f 0200 	mov.w	r2, #0
 8013edc:	f04f 0300 	mov.w	r3, #0
 8013ee0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013ee4:	f04f 0200 	mov.w	r2, #0
 8013ee8:	f04f 0300 	mov.w	r3, #0
 8013eec:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013ef0:	f04f 0200 	mov.w	r2, #0
 8013ef4:	f04f 0300 	mov.w	r3, #0
 8013ef8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013efc:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d108      	bne.n	8013f16 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013f04:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013f08:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013f0c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fb f867 	bl	800efe4 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013f16:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d165      	bne.n	8013fea <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013f1e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f22:	091b      	lsrs	r3, r3, #4
 8013f24:	b2db      	uxtb	r3, r3
 8013f26:	f003 0301 	and.w	r3, r3, #1
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d00e      	beq.n	8013f4c <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013f2e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f38:	095b      	lsrs	r3, r3, #5
 8013f3a:	b2db      	uxtb	r3, r3
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	1ad3      	subs	r3, r2, r3
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	3b01      	subs	r3, #1
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013f4a:	e00b      	b.n	8013f64 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013f4c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f56:	095b      	lsrs	r3, r3, #5
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	1ad3      	subs	r3, r2, r3
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013f64:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013f68:	b29a      	uxth	r2, r3
 8013f6a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f6e:	095b      	lsrs	r3, r3, #5
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	4413      	add	r3, r2
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8013f7c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d011      	beq.n	8013fac <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013f88:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013f8c:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8013f8e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013f92:	f003 020f 	and.w	r2, r3, #15
 8013f96:	0fd3      	lsrs	r3, r2, #31
 8013f98:	4413      	add	r3, r2
 8013f9a:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	1acb      	subs	r3, r1, r3
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	3b01      	subs	r3, #1
 8013fa4:	b29b      	uxth	r3, r3
 8013fa6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8013faa:	e00f      	b.n	8013fcc <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8013fac:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013fb0:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013fb2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013fb6:	f003 020f 	and.w	r2, r3, #15
 8013fba:	0fd3      	lsrs	r3, r2, #31
 8013fbc:	4413      	add	r3, r2
 8013fbe:	105b      	asrs	r3, r3, #1
 8013fc0:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8013fcc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013fd0:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8013fd2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013fd6:	f003 020f 	and.w	r2, r3, #15
 8013fda:	0fd3      	lsrs	r3, r2, #31
 8013fdc:	4413      	add	r3, r2
 8013fde:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	440b      	add	r3, r1
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013fea:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d133      	bne.n	801405a <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013ff2:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013ffc:	4413      	add	r3, r2
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	b29b      	uxth	r3, r3
 8014004:	3b0f      	subs	r3, #15
 8014006:	b29b      	uxth	r3, r3
 8014008:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 801400c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8014010:	b29a      	uxth	r2, r3
 8014012:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8014016:	4413      	add	r3, r2
 8014018:	b29b      	uxth	r3, r3
 801401a:	005b      	lsls	r3, r3, #1
 801401c:	b29b      	uxth	r3, r3
 801401e:	3b0f      	subs	r3, #15
 8014020:	b29b      	uxth	r3, r3
 8014022:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8014026:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 801402a:	b29a      	uxth	r2, r3
 801402c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8014030:	4413      	add	r3, r2
 8014032:	b29b      	uxth	r3, r3
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	b29b      	uxth	r3, r3
 8014038:	3b0f      	subs	r3, #15
 801403a:	b29b      	uxth	r3, r3
 801403c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8014040:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8014044:	b29a      	uxth	r2, r3
 8014046:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801404a:	4413      	add	r3, r2
 801404c:	b29b      	uxth	r3, r3
 801404e:	005b      	lsls	r3, r3, #1
 8014050:	b29b      	uxth	r3, r3
 8014052:	3b0f      	subs	r3, #15
 8014054:	b29b      	uxth	r3, r3
 8014056:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 801405a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801405e:	2b00      	cmp	r3, #0
 8014060:	f040 8135 	bne.w	80142ce <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014064:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8014068:	17da      	asrs	r2, r3, #31
 801406a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801406e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8014072:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8014076:	17da      	asrs	r2, r3, #31
 8014078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801407c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8014080:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8014084:	460b      	mov	r3, r1
 8014086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801408a:	fb02 f203 	mul.w	r2, r2, r3
 801408e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014092:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8014096:	4601      	mov	r1, r0
 8014098:	fb01 f303 	mul.w	r3, r1, r3
 801409c:	4413      	add	r3, r2
 801409e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80140a2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80140a6:	fba2 4501 	umull	r4, r5, r2, r1
 80140aa:	442b      	add	r3, r5
 80140ac:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80140ae:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 80140b2:	17da      	asrs	r2, r3, #31
 80140b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80140b8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 80140bc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80140c0:	17da      	asrs	r2, r3, #31
 80140c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80140c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 80140ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80140ce:	460b      	mov	r3, r1
 80140d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80140d4:	fb02 f203 	mul.w	r2, r2, r3
 80140d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80140dc:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 80140e0:	4601      	mov	r1, r0
 80140e2:	fb01 f303 	mul.w	r3, r1, r3
 80140e6:	4413      	add	r3, r2
 80140e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80140ec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80140f0:	fba2 8901 	umull	r8, r9, r2, r1
 80140f4:	444b      	add	r3, r9
 80140f6:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 80140f8:	eb14 0308 	adds.w	r3, r4, r8
 80140fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80140fe:	eb45 0309 	adc.w	r3, r5, r9
 8014102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014104:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014108:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801410c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014110:	1c51      	adds	r1, r2, #1
 8014112:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8014116:	f143 0300 	adc.w	r3, r3, #0
 801411a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801411e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8014122:	460b      	mov	r3, r1
 8014124:	0fdb      	lsrs	r3, r3, #31
 8014126:	2200      	movs	r2, #0
 8014128:	643b      	str	r3, [r7, #64]	; 0x40
 801412a:	647a      	str	r2, [r7, #68]	; 0x44
 801412c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8014130:	4623      	mov	r3, r4
 8014132:	4602      	mov	r2, r0
 8014134:	189b      	adds	r3, r3, r2
 8014136:	63bb      	str	r3, [r7, #56]	; 0x38
 8014138:	460b      	mov	r3, r1
 801413a:	462a      	mov	r2, r5
 801413c:	eb42 0303 	adc.w	r3, r2, r3
 8014140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014142:	f04f 0200 	mov.w	r2, #0
 8014146:	f04f 0300 	mov.w	r3, #0
 801414a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801414e:	4621      	mov	r1, r4
 8014150:	084a      	lsrs	r2, r1, #1
 8014152:	4629      	mov	r1, r5
 8014154:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014158:	4629      	mov	r1, r5
 801415a:	104b      	asrs	r3, r1, #1
 801415c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8014160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014164:	2200      	movs	r2, #0
 8014166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801416a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801416e:	f04f 0000 	mov.w	r0, #0
 8014172:	f04f 0100 	mov.w	r1, #0
 8014176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801417a:	462b      	mov	r3, r5
 801417c:	0099      	lsls	r1, r3, #2
 801417e:	4623      	mov	r3, r4
 8014180:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8014184:	4623      	mov	r3, r4
 8014186:	0098      	lsls	r0, r3, #2
 8014188:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801418c:	1814      	adds	r4, r2, r0
 801418e:	633c      	str	r4, [r7, #48]	; 0x30
 8014190:	414b      	adcs	r3, r1
 8014192:	637b      	str	r3, [r7, #52]	; 0x34
 8014194:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014198:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801419c:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80141a0:	17da      	asrs	r2, r3, #31
 80141a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80141a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80141aa:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 80141ae:	17da      	asrs	r2, r3, #31
 80141b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80141b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80141b8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80141bc:	462b      	mov	r3, r5
 80141be:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80141c2:	4642      	mov	r2, r8
 80141c4:	fb02 f203 	mul.w	r2, r2, r3
 80141c8:	464b      	mov	r3, r9
 80141ca:	4621      	mov	r1, r4
 80141cc:	fb01 f303 	mul.w	r3, r1, r3
 80141d0:	4413      	add	r3, r2
 80141d2:	4622      	mov	r2, r4
 80141d4:	4641      	mov	r1, r8
 80141d6:	fba2 ab01 	umull	sl, fp, r2, r1
 80141da:	445b      	add	r3, fp
 80141dc:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80141de:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 80141e2:	17da      	asrs	r2, r3, #31
 80141e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80141e6:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 80141e8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80141ec:	17da      	asrs	r2, r3, #31
 80141ee:	673b      	str	r3, [r7, #112]	; 0x70
 80141f0:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80141f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80141f6:	462b      	mov	r3, r5
 80141f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80141fc:	4642      	mov	r2, r8
 80141fe:	fb02 f203 	mul.w	r2, r2, r3
 8014202:	464b      	mov	r3, r9
 8014204:	4621      	mov	r1, r4
 8014206:	fb01 f303 	mul.w	r3, r1, r3
 801420a:	4413      	add	r3, r2
 801420c:	4622      	mov	r2, r4
 801420e:	4641      	mov	r1, r8
 8014210:	fba2 1201 	umull	r1, r2, r2, r1
 8014214:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014218:	460a      	mov	r2, r1
 801421a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 801421e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014222:	4413      	add	r3, r2
 8014224:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801422c:	460b      	mov	r3, r1
 801422e:	eb1a 0303 	adds.w	r3, sl, r3
 8014232:	62bb      	str	r3, [r7, #40]	; 0x28
 8014234:	4613      	mov	r3, r2
 8014236:	eb4b 0303 	adc.w	r3, fp, r3
 801423a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801423c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8014240:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8014244:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014248:	1c51      	adds	r1, r2, #1
 801424a:	66b9      	str	r1, [r7, #104]	; 0x68
 801424c:	f143 0300 	adc.w	r3, r3, #0
 8014250:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014252:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014256:	460b      	mov	r3, r1
 8014258:	0fdb      	lsrs	r3, r3, #31
 801425a:	2200      	movs	r2, #0
 801425c:	623b      	str	r3, [r7, #32]
 801425e:	627a      	str	r2, [r7, #36]	; 0x24
 8014260:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014264:	4623      	mov	r3, r4
 8014266:	4602      	mov	r2, r0
 8014268:	189b      	adds	r3, r3, r2
 801426a:	61bb      	str	r3, [r7, #24]
 801426c:	460b      	mov	r3, r1
 801426e:	462a      	mov	r2, r5
 8014270:	eb42 0303 	adc.w	r3, r2, r3
 8014274:	61fb      	str	r3, [r7, #28]
 8014276:	f04f 0200 	mov.w	r2, #0
 801427a:	f04f 0300 	mov.w	r3, #0
 801427e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014282:	4621      	mov	r1, r4
 8014284:	084a      	lsrs	r2, r1, #1
 8014286:	4629      	mov	r1, r5
 8014288:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801428c:	4629      	mov	r1, r5
 801428e:	104b      	asrs	r3, r1, #1
 8014290:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014298:	2200      	movs	r2, #0
 801429a:	663b      	str	r3, [r7, #96]	; 0x60
 801429c:	667a      	str	r2, [r7, #100]	; 0x64
 801429e:	f04f 0200 	mov.w	r2, #0
 80142a2:	f04f 0300 	mov.w	r3, #0
 80142a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80142aa:	4629      	mov	r1, r5
 80142ac:	008b      	lsls	r3, r1, #2
 80142ae:	4621      	mov	r1, r4
 80142b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80142b4:	4621      	mov	r1, r4
 80142b6:	008a      	lsls	r2, r1, #2
 80142b8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80142bc:	1884      	adds	r4, r0, r2
 80142be:	613c      	str	r4, [r7, #16]
 80142c0:	eb41 0303 	adc.w	r3, r1, r3
 80142c4:	617b      	str	r3, [r7, #20]
 80142c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80142ca:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 80142ce:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d132      	bne.n	801433c <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 80142d6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80142da:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80142de:	1884      	adds	r4, r0, r2
 80142e0:	65bc      	str	r4, [r7, #88]	; 0x58
 80142e2:	eb41 0303 	adc.w	r3, r1, r3
 80142e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80142e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80142ec:	460b      	mov	r3, r1
 80142ee:	3301      	adds	r3, #1
 80142f0:	653b      	str	r3, [r7, #80]	; 0x50
 80142f2:	4613      	mov	r3, r2
 80142f4:	f143 0300 	adc.w	r3, r3, #0
 80142f8:	657b      	str	r3, [r7, #84]	; 0x54
 80142fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80142fe:	460b      	mov	r3, r1
 8014300:	0fdb      	lsrs	r3, r3, #31
 8014302:	2200      	movs	r2, #0
 8014304:	60bb      	str	r3, [r7, #8]
 8014306:	60fa      	str	r2, [r7, #12]
 8014308:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801430c:	4623      	mov	r3, r4
 801430e:	4602      	mov	r2, r0
 8014310:	189b      	adds	r3, r3, r2
 8014312:	603b      	str	r3, [r7, #0]
 8014314:	460b      	mov	r3, r1
 8014316:	462a      	mov	r2, r5
 8014318:	eb42 0303 	adc.w	r3, r2, r3
 801431c:	607b      	str	r3, [r7, #4]
 801431e:	f04f 0200 	mov.w	r2, #0
 8014322:	f04f 0300 	mov.w	r3, #0
 8014326:	e9d7 4500 	ldrd	r4, r5, [r7]
 801432a:	4621      	mov	r1, r4
 801432c:	084a      	lsrs	r2, r1, #1
 801432e:	4629      	mov	r1, r5
 8014330:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014334:	4629      	mov	r1, r5
 8014336:	104b      	asrs	r3, r1, #1
 8014338:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 801433c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8014340:	2b00      	cmp	r3, #0
 8014342:	d109      	bne.n	8014358 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8014344:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8014348:	2b00      	cmp	r3, #0
 801434a:	da05      	bge.n	8014358 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 801434c:	f04f 0200 	mov.w	r2, #0
 8014350:	f04f 0300 	mov.w	r3, #0
 8014354:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8014358:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801435c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014360:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8014362:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8014366:	4618      	mov	r0, r3
 8014368:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801436c:	46bd      	mov	sp, r7
 801436e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014372 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8014372:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014376:	b09a      	sub	sp, #104	; 0x68
 8014378:	af00      	add	r7, sp, #0
 801437a:	6478      	str	r0, [r7, #68]	; 0x44
 801437c:	6439      	str	r1, [r7, #64]	; 0x40
 801437e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014380:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8014382:	2300      	movs	r3, #0
 8014384:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8014388:	f04f 0200 	mov.w	r2, #0
 801438c:	f04f 0300 	mov.w	r3, #0
 8014390:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014394:	f04f 0200 	mov.w	r2, #0
 8014398:	f04f 0300 	mov.w	r3, #0
 801439c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 80143a0:	f04f 0200 	mov.w	r2, #0
 80143a4:	f04f 0300 	mov.w	r3, #0
 80143a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 80143ac:	2300      	movs	r3, #0
 80143ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80143b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143b4:	2200      	movs	r2, #0
 80143b6:	633b      	str	r3, [r7, #48]	; 0x30
 80143b8:	637a      	str	r2, [r7, #52]	; 0x34
 80143ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143c0:	2200      	movs	r2, #0
 80143c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80143c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80143c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80143ca:	460b      	mov	r3, r1
 80143cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143ce:	fb02 f203 	mul.w	r2, r2, r3
 80143d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80143d8:	4601      	mov	r1, r0
 80143da:	fb01 f303 	mul.w	r3, r1, r3
 80143de:	4413      	add	r3, r2
 80143e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143e4:	fba2 4501 	umull	r4, r5, r2, r1
 80143e8:	442b      	add	r3, r5
 80143ea:	461d      	mov	r5, r3
 80143ec:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80143f0:	623b      	str	r3, [r7, #32]
 80143f2:	f145 0300 	adc.w	r3, r5, #0
 80143f6:	627b      	str	r3, [r7, #36]	; 0x24
 80143f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80143fc:	f04f 0300 	mov.w	r3, #0
 8014400:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8014404:	f7eb ff5c 	bl	80002c0 <__aeabi_uldivmod>
 8014408:	4602      	mov	r2, r0
 801440a:	460b      	mov	r3, r1
 801440c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8014410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014412:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8014416:	b29b      	uxth	r3, r3
 8014418:	2200      	movs	r2, #0
 801441a:	61bb      	str	r3, [r7, #24]
 801441c:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 801441e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014420:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014424:	4622      	mov	r2, r4
 8014426:	fb02 f203 	mul.w	r2, r2, r3
 801442a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801442c:	4629      	mov	r1, r5
 801442e:	fb01 f303 	mul.w	r3, r1, r3
 8014432:	4413      	add	r3, r2
 8014434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014436:	4621      	mov	r1, r4
 8014438:	fba2 ab01 	umull	sl, fp, r2, r1
 801443c:	445b      	add	r3, fp
 801443e:	469b      	mov	fp, r3
 8014440:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8014444:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8014448:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801444c:	f04f 0200 	mov.w	r2, #0
 8014450:	f04f 0300 	mov.w	r3, #0
 8014454:	0a02      	lsrs	r2, r0, #8
 8014456:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801445a:	0a0b      	lsrs	r3, r1, #8
 801445c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8014460:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014464:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8014468:	6139      	str	r1, [r7, #16]
 801446a:	f143 0300 	adc.w	r3, r3, #0
 801446e:	617b      	str	r3, [r7, #20]
 8014470:	f04f 0200 	mov.w	r2, #0
 8014474:	f04f 0300 	mov.w	r3, #0
 8014478:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801447c:	4621      	mov	r1, r4
 801447e:	0aca      	lsrs	r2, r1, #11
 8014480:	4629      	mov	r1, r5
 8014482:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8014486:	4629      	mov	r1, r5
 8014488:	0acb      	lsrs	r3, r1, #11
 801448a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801448e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014492:	2b01      	cmp	r3, #1
 8014494:	d305      	bcc.n	80144a2 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8014496:	f04f 32ff 	mov.w	r2, #4294967295
 801449a:	f04f 0300 	mov.w	r3, #0
 801449e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 80144a2:	2300      	movs	r3, #0
 80144a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80144a8:	e041      	b.n	801452e <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 80144aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80144ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80144b0:	3302      	adds	r3, #2
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	4413      	add	r3, r2
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	60bb      	str	r3, [r7, #8]
 80144bc:	60fa      	str	r2, [r7, #12]
 80144be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80144c4:	4622      	mov	r2, r4
 80144c6:	fb02 f203 	mul.w	r2, r2, r3
 80144ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144cc:	4629      	mov	r1, r5
 80144ce:	fb01 f303 	mul.w	r3, r1, r3
 80144d2:	4413      	add	r3, r2
 80144d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144d6:	4621      	mov	r1, r4
 80144d8:	fba2 8901 	umull	r8, r9, r2, r1
 80144dc:	444b      	add	r3, r9
 80144de:	4699      	mov	r9, r3
 80144e0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80144e4:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80144e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80144ec:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80144f0:	6039      	str	r1, [r7, #0]
 80144f2:	f143 0300 	adc.w	r3, r3, #0
 80144f6:	607b      	str	r3, [r7, #4]
 80144f8:	f04f 0200 	mov.w	r2, #0
 80144fc:	f04f 0300 	mov.w	r3, #0
 8014500:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014504:	4621      	mov	r1, r4
 8014506:	0a8a      	lsrs	r2, r1, #10
 8014508:	4629      	mov	r1, r5
 801450a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801450e:	4629      	mov	r1, r5
 8014510:	0a8b      	lsrs	r3, r1, #10
 8014512:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8014516:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801451a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451e:	3206      	adds	r2, #6
 8014520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014528:	3301      	adds	r3, #1
 801452a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801452e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014530:	7a9b      	ldrb	r3, [r3, #10]
 8014532:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014536:	429a      	cmp	r2, r3
 8014538:	d3b7      	bcc.n	80144aa <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801453a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801453e:	4618      	mov	r0, r3
 8014540:	3768      	adds	r7, #104	; 0x68
 8014542:	46bd      	mov	sp, r7
 8014544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014548 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8014548:	b590      	push	{r4, r7, lr}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	4604      	mov	r4, r0
 8014550:	4608      	mov	r0, r1
 8014552:	4611      	mov	r1, r2
 8014554:	461a      	mov	r2, r3
 8014556:	4623      	mov	r3, r4
 8014558:	71fb      	strb	r3, [r7, #7]
 801455a:	4603      	mov	r3, r0
 801455c:	71bb      	strb	r3, [r7, #6]
 801455e:	460b      	mov	r3, r1
 8014560:	717b      	strb	r3, [r7, #5]
 8014562:	4613      	mov	r3, r2
 8014564:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014566:	2300      	movs	r3, #0
 8014568:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 801456a:	2300      	movs	r3, #0
 801456c:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8014572:	2300      	movs	r3, #0
 8014574:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	2210      	movs	r2, #16
 801457a:	701a      	strb	r2, [r3, #0]

	i = 0;
 801457c:	2300      	movs	r3, #0
 801457e:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8014580:	2300      	movs	r3, #0
 8014582:	73fb      	strb	r3, [r7, #15]
 8014584:	e046      	b.n	8014614 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8014586:	2300      	movs	r3, #0
 8014588:	73bb      	strb	r3, [r7, #14]
 801458a:	e03b      	b.n	8014604 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 801458c:	89bb      	ldrh	r3, [r7, #12]
 801458e:	2b0f      	cmp	r3, #15
 8014590:	d832      	bhi.n	80145f8 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8014592:	89bb      	ldrh	r3, [r7, #12]
 8014594:	b2da      	uxtb	r2, r3
 8014596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014598:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 801459a:	89bb      	ldrh	r3, [r7, #12]
 801459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801459e:	3306      	adds	r3, #6
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4413      	add	r3, r2
 80145a4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80145a8:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 80145aa:	89bb      	ldrh	r3, [r7, #12]
 80145ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145ae:	3306      	adds	r3, #6
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	4413      	add	r3, r2
 80145b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80145b8:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 80145ba:	7bfa      	ldrb	r2, [r7, #15]
 80145bc:	79bb      	ldrb	r3, [r7, #6]
 80145be:	fb12 f303 	smulbb	r3, r2, r3
 80145c2:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 80145c4:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 80145c6:	79fa      	ldrb	r2, [r7, #7]
 80145c8:	440a      	add	r2, r1
 80145ca:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 80145cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145ce:	3306      	adds	r3, #6
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	4413      	add	r3, r2
 80145d4:	460a      	mov	r2, r1
 80145d6:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 80145d8:	7bba      	ldrb	r2, [r7, #14]
 80145da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80145de:	fb12 f303 	smulbb	r3, r2, r3
 80145e2:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 80145e4:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 80145e6:	793a      	ldrb	r2, [r7, #4]
 80145e8:	440a      	add	r2, r1
 80145ea:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80145ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145ee:	3306      	adds	r3, #6
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	4413      	add	r3, r2
 80145f4:	460a      	mov	r2, r1
 80145f6:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80145f8:	89bb      	ldrh	r3, [r7, #12]
 80145fa:	3301      	adds	r3, #1
 80145fc:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80145fe:	7bbb      	ldrb	r3, [r7, #14]
 8014600:	3301      	adds	r3, #1
 8014602:	73bb      	strb	r3, [r7, #14]
 8014604:	7bba      	ldrb	r2, [r7, #14]
 8014606:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801460a:	429a      	cmp	r2, r3
 801460c:	d3be      	bcc.n	801458c <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801460e:	7bfb      	ldrb	r3, [r7, #15]
 8014610:	3301      	adds	r3, #1
 8014612:	73fb      	strb	r3, [r7, #15]
 8014614:	7bfa      	ldrb	r2, [r7, #15]
 8014616:	797b      	ldrb	r3, [r7, #5]
 8014618:	429a      	cmp	r2, r3
 801461a:	d3b4      	bcc.n	8014586 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 801461c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801461e:	f000 f86c 	bl	80146fa <VL53L1_init_zone_config_histogram_bins>
 8014622:	4603      	mov	r3, r0
 8014624:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8014626:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801462a:	4618      	mov	r0, r3
 801462c:	3714      	adds	r7, #20
 801462e:	46bd      	mov	sp, r7
 8014630:	bd90      	pop	{r4, r7, pc}

08014632 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8014632:	b580      	push	{r7, lr}
 8014634:	b084      	sub	sp, #16
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801463c:	2300      	movs	r3, #0
 801463e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2205      	movs	r2, #5
 8014644:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	2204      	movs	r2, #4
 801464a:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	220f      	movs	r2, #15
 8014650:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	2207      	movs	r2, #7
 8014656:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	2204      	movs	r2, #4
 801465c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	2208      	movs	r2, #8
 8014662:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	220f      	movs	r2, #15
 8014668:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	2207      	movs	r2, #7
 8014670:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	220c      	movs	r2, #12
 8014678:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	2208      	movs	r2, #8
 8014680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	2207      	movs	r2, #7
 8014688:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	220f      	movs	r2, #15
 8014690:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	2208      	movs	r2, #8
 8014698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	2204      	movs	r2, #4
 80146a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 80146a4:	683b      	ldr	r3, [r7, #0]
 80146a6:	2207      	movs	r2, #7
 80146a8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	220f      	movs	r2, #15
 80146b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	2208      	movs	r2, #8
 80146b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	220c      	movs	r2, #12
 80146c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	220f      	movs	r2, #15
 80146c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	220f      	movs	r2, #15
 80146d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 80146d4:	683b      	ldr	r3, [r7, #0]
 80146d6:	2208      	movs	r2, #8
 80146d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	2208      	movs	r2, #8
 80146e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80146e4:	6838      	ldr	r0, [r7, #0]
 80146e6:	f000 f808 	bl	80146fa <VL53L1_init_zone_config_histogram_bins>
 80146ea:	4603      	mov	r3, r0
 80146ec:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80146ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}

080146fa <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80146fa:	b480      	push	{r7}
 80146fc:	b085      	sub	sp, #20
 80146fe:	af00      	add	r7, sp, #0
 8014700:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014702:	2300      	movs	r3, #0
 8014704:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8014706:	2300      	movs	r3, #0
 8014708:	73fb      	strb	r3, [r7, #15]
 801470a:	e008      	b.n	801471e <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 801470c:	7bfb      	ldrb	r3, [r7, #15]
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4413      	add	r3, r2
 8014712:	2201      	movs	r2, #1
 8014714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8014718:	7bfb      	ldrb	r3, [r7, #15]
 801471a:	3301      	adds	r3, #1
 801471c:	73fb      	strb	r3, [r7, #15]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	7bfa      	ldrb	r2, [r7, #15]
 8014724:	429a      	cmp	r2, r3
 8014726:	d3f1      	bcc.n	801470c <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8014728:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3714      	adds	r7, #20
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr

08014738 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	60b9      	str	r1, [r7, #8]
 8014742:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	8910      	ldrh	r0, [r2, #8]
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	b292      	uxth	r2, r2
 8014750:	68b9      	ldr	r1, [r7, #8]
 8014752:	4798      	blx	r3
 8014754:	4603      	mov	r3, r0
}
 8014756:	4618      	mov	r0, r3
 8014758:	3710      	adds	r7, #16
 801475a:	46bd      	mov	sp, r7
 801475c:	bd80      	pop	{r7, pc}

0801475e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801475e:	b580      	push	{r7, lr}
 8014760:	b084      	sub	sp, #16
 8014762:	af00      	add	r7, sp, #0
 8014764:	60f8      	str	r0, [r7, #12]
 8014766:	60b9      	str	r1, [r7, #8]
 8014768:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	691b      	ldr	r3, [r3, #16]
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	8910      	ldrh	r0, [r2, #8]
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	b292      	uxth	r2, r2
 8014776:	68b9      	ldr	r1, [r7, #8]
 8014778:	4798      	blx	r3
 801477a:	4603      	mov	r3, r0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}

08014784 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	607a      	str	r2, [r7, #4]
 801478e:	603b      	str	r3, [r7, #0]
 8014790:	460b      	mov	r3, r1
 8014792:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014794:	2300      	movs	r3, #0
 8014796:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	2bff      	cmp	r3, #255	; 0xff
 801479c:	d902      	bls.n	80147a4 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801479e:	f06f 0303 	mvn.w	r3, #3
 80147a2:	e01d      	b.n	80147e0 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80147a4:	897b      	ldrh	r3, [r7, #10]
 80147a6:	0a1b      	lsrs	r3, r3, #8
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	b2da      	uxtb	r2, r3
 80147ac:	4b0e      	ldr	r3, [pc, #56]	; (80147e8 <VL53L1_WriteMulti+0x64>)
 80147ae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80147b0:	897b      	ldrh	r3, [r7, #10]
 80147b2:	b2da      	uxtb	r2, r3
 80147b4:	4b0c      	ldr	r3, [pc, #48]	; (80147e8 <VL53L1_WriteMulti+0x64>)
 80147b6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80147b8:	683a      	ldr	r2, [r7, #0]
 80147ba:	6879      	ldr	r1, [r7, #4]
 80147bc:	480b      	ldr	r0, [pc, #44]	; (80147ec <VL53L1_WriteMulti+0x68>)
 80147be:	f005 fa55 	bl	8019c6c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	3302      	adds	r3, #2
 80147c6:	461a      	mov	r2, r3
 80147c8:	4907      	ldr	r1, [pc, #28]	; (80147e8 <VL53L1_WriteMulti+0x64>)
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f7ff ffb4 	bl	8014738 <_I2CWrite>
 80147d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80147d2:	693b      	ldr	r3, [r7, #16]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d001      	beq.n	80147dc <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80147d8:	23f3      	movs	r3, #243	; 0xf3
 80147da:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80147dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3718      	adds	r7, #24
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	20008538 	.word	0x20008538
 80147ec:	2000853a 	.word	0x2000853a

080147f0 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	607a      	str	r2, [r7, #4]
 80147fa:	603b      	str	r3, [r7, #0]
 80147fc:	460b      	mov	r3, r1
 80147fe:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014800:	2300      	movs	r3, #0
 8014802:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014804:	897b      	ldrh	r3, [r7, #10]
 8014806:	0a1b      	lsrs	r3, r3, #8
 8014808:	b29b      	uxth	r3, r3
 801480a:	b2da      	uxtb	r2, r3
 801480c:	4b12      	ldr	r3, [pc, #72]	; (8014858 <VL53L1_ReadMulti+0x68>)
 801480e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014810:	897b      	ldrh	r3, [r7, #10]
 8014812:	b2da      	uxtb	r2, r3
 8014814:	4b10      	ldr	r3, [pc, #64]	; (8014858 <VL53L1_ReadMulti+0x68>)
 8014816:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014818:	2202      	movs	r2, #2
 801481a:	490f      	ldr	r1, [pc, #60]	; (8014858 <VL53L1_ReadMulti+0x68>)
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f7ff ff8b 	bl	8014738 <_I2CWrite>
 8014822:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d002      	beq.n	8014830 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801482a:	23f3      	movs	r3, #243	; 0xf3
 801482c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801482e:	e00c      	b.n	801484a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8014830:	683a      	ldr	r2, [r7, #0]
 8014832:	6879      	ldr	r1, [r7, #4]
 8014834:	68f8      	ldr	r0, [r7, #12]
 8014836:	f7ff ff92 	bl	801475e <_I2CRead>
 801483a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d002      	beq.n	8014848 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014842:	23f3      	movs	r3, #243	; 0xf3
 8014844:	75fb      	strb	r3, [r7, #23]
 8014846:	e000      	b.n	801484a <VL53L1_ReadMulti+0x5a>
    }
done:
 8014848:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801484a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801484e:	4618      	mov	r0, r3
 8014850:	3718      	adds	r7, #24
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	20008538 	.word	0x20008538

0801485c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
 8014864:	460b      	mov	r3, r1
 8014866:	807b      	strh	r3, [r7, #2]
 8014868:	4613      	mov	r3, r2
 801486a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801486c:	2300      	movs	r3, #0
 801486e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014870:	887b      	ldrh	r3, [r7, #2]
 8014872:	0a1b      	lsrs	r3, r3, #8
 8014874:	b29b      	uxth	r3, r3
 8014876:	b2da      	uxtb	r2, r3
 8014878:	4b0c      	ldr	r3, [pc, #48]	; (80148ac <VL53L1_WrByte+0x50>)
 801487a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801487c:	887b      	ldrh	r3, [r7, #2]
 801487e:	b2da      	uxtb	r2, r3
 8014880:	4b0a      	ldr	r3, [pc, #40]	; (80148ac <VL53L1_WrByte+0x50>)
 8014882:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014884:	4a09      	ldr	r2, [pc, #36]	; (80148ac <VL53L1_WrByte+0x50>)
 8014886:	787b      	ldrb	r3, [r7, #1]
 8014888:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801488a:	2203      	movs	r2, #3
 801488c:	4907      	ldr	r1, [pc, #28]	; (80148ac <VL53L1_WrByte+0x50>)
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	f7ff ff52 	bl	8014738 <_I2CWrite>
 8014894:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d001      	beq.n	80148a0 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801489c:	23f3      	movs	r3, #243	; 0xf3
 801489e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80148a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3710      	adds	r7, #16
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20008538 	.word	0x20008538

080148b0 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	460b      	mov	r3, r1
 80148ba:	807b      	strh	r3, [r7, #2]
 80148bc:	4613      	mov	r3, r2
 80148be:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80148c0:	2300      	movs	r3, #0
 80148c2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80148c4:	887b      	ldrh	r3, [r7, #2]
 80148c6:	0a1b      	lsrs	r3, r3, #8
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	4b10      	ldr	r3, [pc, #64]	; (8014910 <VL53L1_WrWord+0x60>)
 80148ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80148d0:	887b      	ldrh	r3, [r7, #2]
 80148d2:	b2da      	uxtb	r2, r3
 80148d4:	4b0e      	ldr	r3, [pc, #56]	; (8014910 <VL53L1_WrWord+0x60>)
 80148d6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80148d8:	883b      	ldrh	r3, [r7, #0]
 80148da:	0a1b      	lsrs	r3, r3, #8
 80148dc:	b29b      	uxth	r3, r3
 80148de:	b2da      	uxtb	r2, r3
 80148e0:	4b0b      	ldr	r3, [pc, #44]	; (8014910 <VL53L1_WrWord+0x60>)
 80148e2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80148e4:	883b      	ldrh	r3, [r7, #0]
 80148e6:	b2da      	uxtb	r2, r3
 80148e8:	4b09      	ldr	r3, [pc, #36]	; (8014910 <VL53L1_WrWord+0x60>)
 80148ea:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80148ec:	2204      	movs	r2, #4
 80148ee:	4908      	ldr	r1, [pc, #32]	; (8014910 <VL53L1_WrWord+0x60>)
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f7ff ff21 	bl	8014738 <_I2CWrite>
 80148f6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d001      	beq.n	8014902 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148fe:	23f3      	movs	r3, #243	; 0xf3
 8014900:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014906:	4618      	mov	r0, r3
 8014908:	3710      	adds	r7, #16
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	20008538 	.word	0x20008538

08014914 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8014914:	b580      	push	{r7, lr}
 8014916:	b086      	sub	sp, #24
 8014918:	af00      	add	r7, sp, #0
 801491a:	60f8      	str	r0, [r7, #12]
 801491c:	460b      	mov	r3, r1
 801491e:	607a      	str	r2, [r7, #4]
 8014920:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014922:	2300      	movs	r3, #0
 8014924:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8014926:	897b      	ldrh	r3, [r7, #10]
 8014928:	0a1b      	lsrs	r3, r3, #8
 801492a:	b29b      	uxth	r3, r3
 801492c:	b2da      	uxtb	r2, r3
 801492e:	4b12      	ldr	r3, [pc, #72]	; (8014978 <VL53L1_RdByte+0x64>)
 8014930:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014932:	897b      	ldrh	r3, [r7, #10]
 8014934:	b2da      	uxtb	r2, r3
 8014936:	4b10      	ldr	r3, [pc, #64]	; (8014978 <VL53L1_RdByte+0x64>)
 8014938:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801493a:	2202      	movs	r2, #2
 801493c:	490e      	ldr	r1, [pc, #56]	; (8014978 <VL53L1_RdByte+0x64>)
 801493e:	68f8      	ldr	r0, [r7, #12]
 8014940:	f7ff fefa 	bl	8014738 <_I2CWrite>
 8014944:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d002      	beq.n	8014952 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801494c:	23f3      	movs	r3, #243	; 0xf3
 801494e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014950:	e00c      	b.n	801496c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014952:	2201      	movs	r2, #1
 8014954:	6879      	ldr	r1, [r7, #4]
 8014956:	68f8      	ldr	r0, [r7, #12]
 8014958:	f7ff ff01 	bl	801475e <_I2CRead>
 801495c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d002      	beq.n	801496a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014964:	23f3      	movs	r3, #243	; 0xf3
 8014966:	75fb      	strb	r3, [r7, #23]
 8014968:	e000      	b.n	801496c <VL53L1_RdByte+0x58>
    }
done:
 801496a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801496c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3718      	adds	r7, #24
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	20008538 	.word	0x20008538

0801497c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 801497c:	b580      	push	{r7, lr}
 801497e:	b086      	sub	sp, #24
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	460b      	mov	r3, r1
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801498a:	2300      	movs	r3, #0
 801498c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801498e:	897b      	ldrh	r3, [r7, #10]
 8014990:	0a1b      	lsrs	r3, r3, #8
 8014992:	b29b      	uxth	r3, r3
 8014994:	b2da      	uxtb	r2, r3
 8014996:	4b18      	ldr	r3, [pc, #96]	; (80149f8 <VL53L1_RdWord+0x7c>)
 8014998:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801499a:	897b      	ldrh	r3, [r7, #10]
 801499c:	b2da      	uxtb	r2, r3
 801499e:	4b16      	ldr	r3, [pc, #88]	; (80149f8 <VL53L1_RdWord+0x7c>)
 80149a0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80149a2:	2202      	movs	r2, #2
 80149a4:	4914      	ldr	r1, [pc, #80]	; (80149f8 <VL53L1_RdWord+0x7c>)
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f7ff fec6 	bl	8014738 <_I2CWrite>
 80149ac:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80149b4:	23f3      	movs	r3, #243	; 0xf3
 80149b6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80149b8:	e017      	b.n	80149ea <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80149ba:	2202      	movs	r2, #2
 80149bc:	490e      	ldr	r1, [pc, #56]	; (80149f8 <VL53L1_RdWord+0x7c>)
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f7ff fecd 	bl	801475e <_I2CRead>
 80149c4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d002      	beq.n	80149d2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80149cc:	23f3      	movs	r3, #243	; 0xf3
 80149ce:	75fb      	strb	r3, [r7, #23]
        goto done;
 80149d0:	e00b      	b.n	80149ea <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80149d2:	4b09      	ldr	r3, [pc, #36]	; (80149f8 <VL53L1_RdWord+0x7c>)
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	021b      	lsls	r3, r3, #8
 80149da:	b29a      	uxth	r2, r3
 80149dc:	4b06      	ldr	r3, [pc, #24]	; (80149f8 <VL53L1_RdWord+0x7c>)
 80149de:	785b      	ldrb	r3, [r3, #1]
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	4413      	add	r3, r2
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80149ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3718      	adds	r7, #24
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	20008538 	.word	0x20008538

080149fc <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b084      	sub	sp, #16
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8014a06:	2300      	movs	r3, #0
 8014a08:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	695b      	ldr	r3, [r3, #20]
 8014a0e:	4798      	blx	r3
 8014a10:	4603      	mov	r3, r0
 8014a12:	461a      	mov	r2, r3
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8014a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3710      	adds	r7, #16
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	4619      	mov	r1, r3
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 f8d2 	bl	8014bdc <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014a38:	2300      	movs	r3, #0
}
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
	...

08014a44 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	4a07      	ldr	r2, [pc, #28]	; (8014a70 <VL53L1_WaitUs+0x2c>)
 8014a52:	fb82 1203 	smull	r1, r2, r2, r3
 8014a56:	1192      	asrs	r2, r2, #6
 8014a58:	17db      	asrs	r3, r3, #31
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f000 f8bc 	bl	8014bdc <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014a64:	2300      	movs	r3, #0
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	10624dd3 	.word	0x10624dd3

08014a74 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014a74:	b590      	push	{r4, r7, lr}
 8014a76:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8014a80:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014a84:	6020      	str	r0, [r4, #0]
 8014a86:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8014a8a:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8014a8e:	6001      	str	r1, [r0, #0]
 8014a90:	4619      	mov	r1, r3
 8014a92:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a96:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014a9a:	801a      	strh	r2, [r3, #0]
 8014a9c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014aa0:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014aa4:	460a      	mov	r2, r1
 8014aa6:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8014aba:	2300      	movs	r3, #0
 8014abc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8014acc:	f107 0310 	add.w	r3, r7, #16
 8014ad0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014ad4:	4940      	ldr	r1, [pc, #256]	; (8014bd8 <VL53L1_WaitValueMaskEx+0x164>)
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f005 f982 	bl	8019de0 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 8014adc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014ae0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014ae4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014ae8:	4611      	mov	r1, r2
 8014aea:	6818      	ldr	r0, [r3, #0]
 8014aec:	f7ff ff86 	bl	80149fc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8014af0:	e04e      	b.n	8014b90 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8014af2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d110      	bne.n	8014b1c <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 8014afa:	f207 2213 	addw	r2, r7, #531	; 0x213
 8014afe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b02:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014b06:	8819      	ldrh	r1, [r3, #0]
 8014b08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b0c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014b10:	6818      	ldr	r0, [r3, #0]
 8014b12:	f7ff feff 	bl	8014914 <VL53L1_RdByte>
 8014b16:	4603      	mov	r3, r0
 8014b18:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8014b1c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8014b20:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014b24:	4013      	ands	r3, r2
 8014b26:	b2db      	uxtb	r3, r3
 8014b28:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8014b2c:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014b30:	7812      	ldrb	r2, [r2, #0]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d102      	bne.n	8014b3c <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014b36:	2301      	movs	r3, #1
 8014b38:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8014b3c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d114      	bne.n	8014b6e <VL53L1_WaitValueMaskEx+0xfa>
 8014b44:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d110      	bne.n	8014b6e <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014b4c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d00c      	beq.n	8014b6e <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014b54:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014b58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b5c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014b60:	4611      	mov	r1, r2
 8014b62:	6818      	ldr	r0, [r3, #0]
 8014b64:	f7ff ff5e 	bl	8014a24 <VL53L1_WaitMs>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014b6e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014b72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b76:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	6818      	ldr	r0, [r3, #0]
 8014b7e:	f7ff ff3d 	bl	80149fc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014b82:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014b86:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014b90:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10c      	bne.n	8014bb2 <VL53L1_WaitValueMaskEx+0x13e>
 8014b98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014b9c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014ba0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d203      	bcs.n	8014bb2 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8014baa:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d09f      	beq.n	8014af2 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014bb2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d106      	bne.n	8014bc8 <VL53L1_WaitValueMaskEx+0x154>
 8014bba:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d102      	bne.n	8014bc8 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014bc2:	23f9      	movs	r3, #249	; 0xf9
 8014bc4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014bc8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd90      	pop	{r4, r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	0801b074 	.word	0x0801b074

08014bdc <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	695b      	ldr	r3, [r3, #20]
 8014bea:	4798      	blx	r3
 8014bec:	4603      	mov	r3, r0
 8014bee:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014bf0:	bf00      	nop
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	695b      	ldr	r3, [r3, #20]
 8014bf6:	4798      	blx	r3
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	1ad3      	subs	r3, r2, r3
 8014c00:	683a      	ldr	r2, [r7, #0]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d8f5      	bhi.n	8014bf2 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014c06:	2300      	movs	r3, #0
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b08c      	sub	sp, #48	; 0x30
 8014c14:	af06      	add	r7, sp, #24
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
 8014c1c:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c24:	9304      	str	r3, [sp, #16]
 8014c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c28:	9303      	str	r3, [sp, #12]
 8014c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2c:	9302      	str	r3, [sp, #8]
 8014c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c30:	9301      	str	r3, [sp, #4]
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	683a      	ldr	r2, [r7, #0]
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	68b8      	ldr	r0, [r7, #8]
 8014c3e:	f7fc fefb 	bl	8011a38 <VL53L1_hist_process_data>
 8014c42:	4603      	mov	r3, r0
 8014c44:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3718      	adds	r7, #24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b084      	sub	sp, #16
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d103      	bne.n	8014c6a <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014c62:	f06f 0301 	mvn.w	r3, #1
 8014c66:	60fb      	str	r3, [r7, #12]
 8014c68:	e023      	b.n	8014cb2 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	685a      	ldr	r2, [r3, #4]
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	891a      	ldrh	r2, [r3, #8]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	68da      	ldr	r2, [r3, #12]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	691a      	ldr	r2, [r3, #16]
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	695a      	ldr	r2, [r3, #20]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d004      	beq.n	8014cac <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4798      	blx	r3
 8014ca8:	60f8      	str	r0, [r7, #12]
 8014caa:	e002      	b.n	8014cb2 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014cac:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014cca:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d003      	beq.n	8014cda <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd6:	60fb      	str	r3, [r7, #12]
 8014cd8:	e04d      	b.n	8014d76 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ed f8d1 	bl	8001e82 <VL53L1_WaitDeviceBooted>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d003      	beq.n	8014cee <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cea:	60fb      	str	r3, [r7, #12]
 8014cec:	e043      	b.n	8014d76 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7ed f847 	bl	8001d82 <VL53L1_DataInit>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d003      	beq.n	8014d02 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8014cfe:	60fb      	str	r3, [r7, #12]
 8014d00:	e039      	b.n	8014d76 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f7ed f892 	bl	8001e2c <VL53L1_StaticInit>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d003      	beq.n	8014d16 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d12:	60fb      	str	r3, [r7, #12]
 8014d14:	e02f      	b.n	8014d76 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7ee fe8a 	bl	8003a30 <VL53L1_PerformRefSpadManagement>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d003      	beq.n	8014d2a <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014d22:	f04f 33ff 	mov.w	r3, #4294967295
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	e025      	b.n	8014d76 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d30:	2200      	movs	r2, #0
 8014d32:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d54:	2200      	movs	r2, #0
 8014d56:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d60:	2200      	movs	r2, #0
 8014d62:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014d72:	2300      	movs	r3, #0
 8014d74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014d76:	68fb      	ldr	r3, [r7, #12]
}
 8014d78:	4618      	mov	r0, r3
 8014d7a:	3710      	adds	r7, #16
 8014d7c:	46bd      	mov	sp, r7
 8014d7e:	bd80      	pop	{r7, pc}

08014d80 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014d88:	f04f 33ff 	mov.w	r3, #4294967295
 8014d8c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d94:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d111      	bne.n	8014dc0 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	4798      	blx	r3
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d003      	beq.n	8014db0 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014da8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dac:	60fb      	str	r3, [r7, #12]
 8014dae:	e007      	b.n	8014dc0 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014db0:	2300      	movs	r3, #0
 8014db2:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dba:	2200      	movs	r2, #0
 8014dbc:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3710      	adds	r7, #16
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}

08014dca <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014dca:	b580      	push	{r7, lr}
 8014dcc:	b084      	sub	sp, #16
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	6078      	str	r0, [r7, #4]
 8014dd2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d002      	beq.n	8014de0 <VL53L1CB_ReadID+0x16>
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d103      	bne.n	8014de8 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014de0:	f06f 0301 	mvn.w	r3, #1
 8014de4:	60fb      	str	r3, [r7, #12]
 8014de6:	e00a      	b.n	8014dfe <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	2200      	movs	r2, #0
 8014dec:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014dee:	683a      	ldr	r2, [r7, #0]
 8014df0:	f240 110f 	movw	r1, #271	; 0x10f
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7ff fdc1 	bl	801497c <VL53L1_RdWord>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b085      	sub	sp, #20
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d002      	beq.n	8014e1e <VL53L1CB_GetCapabilities+0x16>
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d103      	bne.n	8014e26 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e1e:	f06f 0301 	mvn.w	r3, #1
 8014e22:	60fb      	str	r3, [r7, #12]
 8014e24:	e00d      	b.n	8014e42 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	2201      	movs	r2, #1
 8014e2a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2204      	movs	r2, #4
 8014e30:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	2201      	movs	r2, #1
 8014e36:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014e42:	68fb      	ldr	r3, [r7, #12]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3714      	adds	r7, #20
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr

08014e50 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d009      	beq.n	8014e74 <VL53L1CB_ConfigProfile+0x24>
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d006      	beq.n	8014e74 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	781b      	ldrb	r3, [r3, #0]
 8014e6a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014e6c:	7afb      	ldrb	r3, [r7, #11]
 8014e6e:	2b01      	cmp	r3, #1
 8014e70:	d103      	bne.n	8014e7a <VL53L1CB_ConfigProfile+0x2a>
 8014e72:	e00c      	b.n	8014e8e <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014e74:	f06f 0301 	mvn.w	r3, #1
 8014e78:	e043      	b.n	8014f02 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014e7a:	7afb      	ldrb	r3, [r7, #11]
 8014e7c:	2b02      	cmp	r3, #2
 8014e7e:	d006      	beq.n	8014e8e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014e80:	7afb      	ldrb	r3, [r7, #11]
 8014e82:	2b03      	cmp	r3, #3
 8014e84:	d003      	beq.n	8014e8e <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e86:	f06f 0301 	mvn.w	r3, #1
 8014e8a:	60fb      	str	r3, [r7, #12]
 8014e8c:	e038      	b.n	8014f00 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014e8e:	7afb      	ldrb	r3, [r7, #11]
 8014e90:	4619      	mov	r1, r3
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ed f970 	bl	8002178 <VL53L1_SetDistanceMode>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d003      	beq.n	8014ea6 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea2:	60fb      	str	r3, [r7, #12]
 8014ea4:	e02c      	b.n	8014f00 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014eae:	fb02 f303 	mul.w	r3, r2, r3
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7ed f9ed 	bl	8002294 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d003      	beq.n	8014ec8 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec4:	60fb      	str	r3, [r7, #12]
 8014ec6:	e01b      	b.n	8014f00 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	bf14      	ite	ne
 8014ed0:	2301      	movne	r3, #1
 8014ed2:	2300      	moveq	r3, #0
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ede:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	bf14      	ite	ne
 8014eea:	2301      	movne	r3, #1
 8014eec:	2300      	moveq	r3, #0
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ef8:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014efc:	2300      	movs	r3, #0
 8014efe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014f00:	68fb      	ldr	r3, [r7, #12]
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	3710      	adds	r7, #16
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b094      	sub	sp, #80	; 0x50
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
 8014f12:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d002      	beq.n	8014f20 <VL53L1CB_ConfigROI+0x16>
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d103      	bne.n	8014f28 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f20:	f06f 0301 	mvn.w	r3, #1
 8014f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f26:	e01c      	b.n	8014f62 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	789b      	ldrb	r3, [r3, #2]
 8014f30:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	78db      	ldrb	r3, [r3, #3]
 8014f36:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	785b      	ldrb	r3, [r3, #1]
 8014f42:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014f44:	f107 0308 	add.w	r3, r7, #8
 8014f48:	4619      	mov	r1, r3
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ed fca6 	bl	800289c <VL53L1_SetROI>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d003      	beq.n	8014f5e <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014f56:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014f5c:	e001      	b.n	8014f62 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3750      	adds	r7, #80	; 0x50
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}

08014f6c <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8014f6c:	b480      	push	{r7}
 8014f6e:	b083      	sub	sp, #12
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014f76:	f06f 0303 	mvn.w	r3, #3
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	370c      	adds	r7, #12
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr

08014f86 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014f86:	b580      	push	{r7, lr}
 8014f88:	b084      	sub	sp, #16
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <VL53L1CB_GetDistance+0x16>
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d103      	bne.n	8014fa4 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f9c:	f06f 0301 	mvn.w	r3, #1
 8014fa0:	60fb      	str	r3, [r7, #12]
 8014fa2:	e03a      	b.n	801501a <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014faa:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d103      	bne.n	8014fba <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb6:	60fb      	str	r3, [r7, #12]
 8014fb8:	e02f      	b.n	801501a <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fc0:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d106      	bne.n	8014fd6 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f000 f92b 	bl	8015228 <vl53l1cb_poll_for_measurement>
 8014fd2:	60f8      	str	r0, [r7, #12]
 8014fd4:	e004      	b.n	8014fe0 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f000 f925 	bl	8015228 <vl53l1cb_poll_for_measurement>
 8014fde:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d119      	bne.n	801501a <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014fe6:	6839      	ldr	r1, [r7, #0]
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f000 f94b 	bl	8015284 <vl53l1cb_get_result>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d003      	beq.n	8014ffc <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff8:	60fb      	str	r3, [r7, #12]
 8014ffa:	e00e      	b.n	801501a <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015002:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8015006:	2b01      	cmp	r3, #1
 8015008:	d105      	bne.n	8015016 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ed fdde 	bl	8002bcc <VL53L1_ClearInterruptAndStartMeasurement>
 8015010:	4603      	mov	r3, r0
 8015012:	60fb      	str	r3, [r7, #12]
 8015014:	e001      	b.n	801501a <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8015016:	2300      	movs	r3, #0
 8015018:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 801501a:	68fb      	ldr	r3, [r7, #12]
}
 801501c:	4618      	mov	r0, r3
 801501e:	3710      	adds	r7, #16
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d103      	bne.n	801503c <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015034:	f06f 0301 	mvn.w	r3, #1
 8015038:	60fb      	str	r3, [r7, #12]
 801503a:	e068      	b.n	801510e <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015042:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015046:	2b01      	cmp	r3, #1
 8015048:	d103      	bne.n	8015052 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 801504a:	f04f 33ff 	mov.w	r3, #4294967295
 801504e:	60fb      	str	r3, [r7, #12]
 8015050:	e05d      	b.n	801510e <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f7ed fcf6 	bl	8002a44 <VL53L1_StartMeasurement>
 8015058:	4603      	mov	r3, r0
 801505a:	2b00      	cmp	r3, #0
 801505c:	d154      	bne.n	8015108 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015064:	2201      	movs	r2, #1
 8015066:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801506a:	2300      	movs	r3, #0
 801506c:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	3b01      	subs	r3, #1
 8015072:	2b03      	cmp	r3, #3
 8015074:	d83e      	bhi.n	80150f4 <VL53L1CB_Start+0xd0>
 8015076:	a201      	add	r2, pc, #4	; (adr r2, 801507c <VL53L1CB_Start+0x58>)
 8015078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801507c:	0801508d 	.word	0x0801508d
 8015080:	080150a7 	.word	0x080150a7
 8015084:	080150c1 	.word	0x080150c1
 8015088:	080150db 	.word	0x080150db
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015092:	2201      	movs	r2, #1
 8015094:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801509e:	2201      	movs	r2, #1
 80150a0:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80150a4:	e033      	b.n	801510e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150ac:	2200      	movs	r2, #0
 80150ae:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150b8:	2201      	movs	r2, #1
 80150ba:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80150be:	e026      	b.n	801510e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150c6:	2201      	movs	r2, #1
 80150c8:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150d2:	2200      	movs	r2, #0
 80150d4:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80150d8:	e019      	b.n	801510e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150e0:	2200      	movs	r2, #0
 80150e2:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150ec:	2200      	movs	r2, #0
 80150ee:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 80150f2:	e00c      	b.n	801510e <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80150fa:	2200      	movs	r2, #0
 80150fc:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8015100:	f06f 0301 	mvn.w	r3, #1
 8015104:	60fb      	str	r3, [r7, #12]
      break;
 8015106:	e002      	b.n	801510e <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015108:	f04f 33ff 	mov.w	r3, #4294967295
 801510c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801510e:	68fb      	ldr	r3, [r7, #12]
}
 8015110:	4618      	mov	r0, r3
 8015112:	3710      	adds	r7, #16
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}

08015118 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d103      	bne.n	801512e <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015126:	f06f 0301 	mvn.w	r3, #1
 801512a:	60fb      	str	r3, [r7, #12]
 801512c:	e01c      	b.n	8015168 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015134:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015138:	2b00      	cmp	r3, #0
 801513a:	d103      	bne.n	8015144 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 801513c:	f04f 33ff 	mov.w	r3, #4294967295
 8015140:	60fb      	str	r3, [r7, #12]
 8015142:	e011      	b.n	8015168 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7ed fd1d 	bl	8002b84 <VL53L1_StopMeasurement>
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	d108      	bne.n	8015162 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015156:	2200      	movs	r2, #0
 8015158:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 801515c:	2300      	movs	r3, #0
 801515e:	60fb      	str	r3, [r7, #12]
 8015160:	e002      	b.n	8015168 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8015162:	f04f 33ff 	mov.w	r3, #4294967295
 8015166:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015168:	68fb      	ldr	r3, [r7, #12]
}
 801516a:	4618      	mov	r0, r3
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}

08015172 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8015172:	b580      	push	{r7, lr}
 8015174:	b084      	sub	sp, #16
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
 801517a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2b00      	cmp	r3, #0
 8015180:	d103      	bne.n	801518a <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015182:	f06f 0301 	mvn.w	r3, #1
 8015186:	60fb      	str	r3, [r7, #12]
 8015188:	e012      	b.n	80151b0 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	b2db      	uxtb	r3, r3
 801518e:	4619      	mov	r1, r3
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f7ec fdcf 	bl	8001d34 <VL53L1_SetDeviceAddress>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	d003      	beq.n	80151a4 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 801519c:	f04f 33ff 	mov.w	r3, #4294967295
 80151a0:	60fb      	str	r3, [r7, #12]
 80151a2:	e005      	b.n	80151b0 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 80151ac:	2300      	movs	r3, #0
 80151ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80151b0:	68fb      	ldr	r3, [r7, #12]
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3710      	adds	r7, #16
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}

080151ba <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 80151ba:	b480      	push	{r7}
 80151bc:	b085      	sub	sp, #20
 80151be:	af00      	add	r7, sp, #0
 80151c0:	6078      	str	r0, [r7, #4]
 80151c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d002      	beq.n	80151d0 <VL53L1CB_GetAddress+0x16>
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d103      	bne.n	80151d8 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80151d0:	f06f 0301 	mvn.w	r3, #1
 80151d4:	60fb      	str	r3, [r7, #12]
 80151d6:	e006      	b.n	80151e6 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	891b      	ldrh	r3, [r3, #8]
 80151dc:	461a      	mov	r2, r3
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 80151e2:	2300      	movs	r3, #0
 80151e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80151e6:	68fb      	ldr	r3, [r7, #12]
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	3714      	adds	r7, #20
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr

080151f4 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b083      	sub	sp, #12
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80151fe:	f06f 0303 	mvn.w	r3, #3
}
 8015202:	4618      	mov	r0, r3
 8015204:	370c      	adds	r7, #12
 8015206:	46bd      	mov	sp, r7
 8015208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520c:	4770      	bx	lr

0801520e <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 801520e:	b480      	push	{r7}
 8015210:	b083      	sub	sp, #12
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
 8015216:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8015218:	f06f 0303 	mvn.w	r3, #3
}
 801521c:	4618      	mov	r0, r3
 801521e:	370c      	adds	r7, #12
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8015232:	2300      	movs	r3, #0
 8015234:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d102      	bne.n	8015242 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 801523c:	f06f 0301 	mvn.w	r3, #1
 8015240:	e01b      	b.n	801527a <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	695b      	ldr	r3, [r3, #20]
 8015246:	4798      	blx	r3
 8015248:	4603      	mov	r3, r0
 801524a:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 801524c:	f107 030b 	add.w	r3, r7, #11
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7ed fcd0 	bl	8002bf8 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8015258:	7afb      	ldrb	r3, [r7, #11]
 801525a:	2b01      	cmp	r3, #1
 801525c:	d101      	bne.n	8015262 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801525e:	2300      	movs	r3, #0
 8015260:	e00b      	b.n	801527a <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	695b      	ldr	r3, [r3, #20]
 8015266:	4798      	blx	r3
 8015268:	4603      	mov	r3, r0
 801526a:	461a      	mov	r2, r3
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	683a      	ldr	r2, [r7, #0]
 8015272:	429a      	cmp	r2, r3
 8015274:	d8ea      	bhi.n	801524c <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8015276:	f06f 0302 	mvn.w	r3, #2
}
 801527a:	4618      	mov	r0, r3
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
	...

08015284 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015284:	b590      	push	{r4, r7, lr}
 8015286:	b089      	sub	sp, #36	; 0x24
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d002      	beq.n	801529a <vl53l1cb_get_result+0x16>
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d103      	bne.n	80152a2 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801529a:	f06f 0301 	mvn.w	r3, #1
 801529e:	61fb      	str	r3, [r7, #28]
 80152a0:	e100      	b.n	80154a4 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 80152a2:	4983      	ldr	r1, [pc, #524]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f7ee fb85 	bl	80039b4 <VL53L1_GetMultiRangingData>
 80152aa:	4603      	mov	r3, r0
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d003      	beq.n	80152b8 <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 80152b0:	f04f 33ff 	mov.w	r3, #4294967295
 80152b4:	61fb      	str	r3, [r7, #28]
 80152b6:	e0f5      	b.n	80154a4 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 80152b8:	2300      	movs	r3, #0
 80152ba:	76fb      	strb	r3, [r7, #27]
 80152bc:	e0ec      	b.n	8015498 <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 80152be:	4b7c      	ldr	r3, [pc, #496]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 80152c0:	799b      	ldrb	r3, [r3, #6]
 80152c2:	7efa      	ldrb	r2, [r7, #27]
 80152c4:	4618      	mov	r0, r3
 80152c6:	6839      	ldr	r1, [r7, #0]
 80152c8:	4613      	mov	r3, r2
 80152ca:	011b      	lsls	r3, r3, #4
 80152cc:	4413      	add	r3, r2
 80152ce:	009b      	lsls	r3, r3, #2
 80152d0:	440b      	add	r3, r1
 80152d2:	3304      	adds	r3, #4
 80152d4:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80152d6:	2300      	movs	r3, #0
 80152d8:	76bb      	strb	r3, [r7, #26]
 80152da:	e0d4      	b.n	8015486 <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80152dc:	7eba      	ldrb	r2, [r7, #26]
 80152de:	4974      	ldr	r1, [pc, #464]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 80152e0:	4613      	mov	r3, r2
 80152e2:	00db      	lsls	r3, r3, #3
 80152e4:	1a9b      	subs	r3, r3, r2
 80152e6:	009b      	lsls	r3, r3, #2
 80152e8:	440b      	add	r3, r1
 80152ea:	331c      	adds	r3, #28
 80152ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	da0b      	bge.n	801530c <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80152f4:	7efa      	ldrb	r2, [r7, #27]
 80152f6:	7eb8      	ldrb	r0, [r7, #26]
 80152f8:	6839      	ldr	r1, [r7, #0]
 80152fa:	4613      	mov	r3, r2
 80152fc:	011b      	lsls	r3, r3, #4
 80152fe:	4413      	add	r3, r2
 8015300:	4403      	add	r3, r0
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	440b      	add	r3, r1
 8015306:	2200      	movs	r2, #0
 8015308:	609a      	str	r2, [r3, #8]
 801530a:	e014      	b.n	8015336 <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 801530c:	7eba      	ldrb	r2, [r7, #26]
 801530e:	4968      	ldr	r1, [pc, #416]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 8015310:	4613      	mov	r3, r2
 8015312:	00db      	lsls	r3, r3, #3
 8015314:	1a9b      	subs	r3, r3, r2
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	440b      	add	r3, r1
 801531a:	331c      	adds	r3, #28
 801531c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015320:	7efa      	ldrb	r2, [r7, #27]
 8015322:	7eb8      	ldrb	r0, [r7, #26]
 8015324:	461c      	mov	r4, r3
 8015326:	6839      	ldr	r1, [r7, #0]
 8015328:	4613      	mov	r3, r2
 801532a:	011b      	lsls	r3, r3, #4
 801532c:	4413      	add	r3, r2
 801532e:	4403      	add	r3, r0
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	440b      	add	r3, r1
 8015334:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801533c:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8015340:	2b01      	cmp	r3, #1
 8015342:	d132      	bne.n	80153aa <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015344:	7eba      	ldrb	r2, [r7, #26]
 8015346:	495a      	ldr	r1, [pc, #360]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 8015348:	4613      	mov	r3, r2
 801534a:	00db      	lsls	r3, r3, #3
 801534c:	1a9b      	subs	r3, r3, r2
 801534e:	009b      	lsls	r3, r3, #2
 8015350:	440b      	add	r3, r1
 8015352:	3314      	adds	r3, #20
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	ee07 3a90 	vmov	s15, r3
 801535a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801535e:	eddf 6a55 	vldr	s13, [pc, #340]	; 80154b4 <vl53l1cb_get_result+0x230>
 8015362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015366:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80154b8 <vl53l1cb_get_result+0x234>
 801536a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801536e:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015372:	4b4f      	ldr	r3, [pc, #316]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 8015374:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015378:	0a1b      	lsrs	r3, r3, #8
 801537a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 801537c:	8a7b      	ldrh	r3, [r7, #18]
 801537e:	ee07 3a90 	vmov	s15, r3
 8015382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015386:	7efa      	ldrb	r2, [r7, #27]
 8015388:	7eb8      	ldrb	r0, [r7, #26]
 801538a:	edd7 6a05 	vldr	s13, [r7, #20]
 801538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015392:	6839      	ldr	r1, [r7, #0]
 8015394:	4613      	mov	r3, r2
 8015396:	011b      	lsls	r3, r3, #4
 8015398:	4413      	add	r3, r2
 801539a:	4403      	add	r3, r0
 801539c:	3308      	adds	r3, #8
 801539e:	009b      	lsls	r3, r3, #2
 80153a0:	440b      	add	r3, r1
 80153a2:	3308      	adds	r3, #8
 80153a4:	edc3 7a00 	vstr	s15, [r3]
 80153a8:	e00d      	b.n	80153c6 <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80153aa:	7efa      	ldrb	r2, [r7, #27]
 80153ac:	7eb8      	ldrb	r0, [r7, #26]
 80153ae:	6839      	ldr	r1, [r7, #0]
 80153b0:	4613      	mov	r3, r2
 80153b2:	011b      	lsls	r3, r3, #4
 80153b4:	4413      	add	r3, r2
 80153b6:	4403      	add	r3, r0
 80153b8:	3308      	adds	r3, #8
 80153ba:	009b      	lsls	r3, r3, #2
 80153bc:	440b      	add	r3, r1
 80153be:	3308      	adds	r3, #8
 80153c0:	f04f 0200 	mov.w	r2, #0
 80153c4:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80153cc:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80153d0:	2b01      	cmp	r3, #1
 80153d2:	d132      	bne.n	801543a <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80153d4:	7eba      	ldrb	r2, [r7, #26]
 80153d6:	4936      	ldr	r1, [pc, #216]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 80153d8:	4613      	mov	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	1a9b      	subs	r3, r3, r2
 80153de:	009b      	lsls	r3, r3, #2
 80153e0:	440b      	add	r3, r1
 80153e2:	3310      	adds	r3, #16
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	ee07 3a90 	vmov	s15, r3
 80153ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80153ee:	eddf 6a31 	vldr	s13, [pc, #196]	; 80154b4 <vl53l1cb_get_result+0x230>
 80153f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80153f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80154b8 <vl53l1cb_get_result+0x234>
 80153fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80153fe:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015402:	4b2b      	ldr	r3, [pc, #172]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 8015404:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8015408:	0a1b      	lsrs	r3, r3, #8
 801540a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801540c:	8a7b      	ldrh	r3, [r7, #18]
 801540e:	ee07 3a90 	vmov	s15, r3
 8015412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015416:	7efa      	ldrb	r2, [r7, #27]
 8015418:	7eb8      	ldrb	r0, [r7, #26]
 801541a:	edd7 6a03 	vldr	s13, [r7, #12]
 801541e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015422:	6839      	ldr	r1, [r7, #0]
 8015424:	4613      	mov	r3, r2
 8015426:	011b      	lsls	r3, r3, #4
 8015428:	4413      	add	r3, r2
 801542a:	4403      	add	r3, r0
 801542c:	330c      	adds	r3, #12
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	440b      	add	r3, r1
 8015432:	3308      	adds	r3, #8
 8015434:	edc3 7a00 	vstr	s15, [r3]
 8015438:	e00d      	b.n	8015456 <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 801543a:	7efa      	ldrb	r2, [r7, #27]
 801543c:	7eb8      	ldrb	r0, [r7, #26]
 801543e:	6839      	ldr	r1, [r7, #0]
 8015440:	4613      	mov	r3, r2
 8015442:	011b      	lsls	r3, r3, #4
 8015444:	4413      	add	r3, r2
 8015446:	4403      	add	r3, r0
 8015448:	330c      	adds	r3, #12
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	440b      	add	r3, r1
 801544e:	3308      	adds	r3, #8
 8015450:	f04f 0200 	mov.w	r2, #0
 8015454:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8015456:	7eba      	ldrb	r2, [r7, #26]
 8015458:	4915      	ldr	r1, [pc, #84]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 801545a:	4613      	mov	r3, r2
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	1a9b      	subs	r3, r3, r2
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	440b      	add	r3, r1
 8015464:	331f      	adds	r3, #31
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	7efa      	ldrb	r2, [r7, #27]
 801546a:	7eb8      	ldrb	r0, [r7, #26]
 801546c:	461c      	mov	r4, r3
 801546e:	6839      	ldr	r1, [r7, #0]
 8015470:	4613      	mov	r3, r2
 8015472:	011b      	lsls	r3, r3, #4
 8015474:	4413      	add	r3, r2
 8015476:	4403      	add	r3, r0
 8015478:	3304      	adds	r3, #4
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	440b      	add	r3, r1
 801547e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015480:	7ebb      	ldrb	r3, [r7, #26]
 8015482:	3301      	adds	r3, #1
 8015484:	76bb      	strb	r3, [r7, #26]
 8015486:	4b0a      	ldr	r3, [pc, #40]	; (80154b0 <vl53l1cb_get_result+0x22c>)
 8015488:	799b      	ldrb	r3, [r3, #6]
 801548a:	7eba      	ldrb	r2, [r7, #26]
 801548c:	429a      	cmp	r2, r3
 801548e:	f4ff af25 	bcc.w	80152dc <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8015492:	7efb      	ldrb	r3, [r7, #27]
 8015494:	3301      	adds	r3, #1
 8015496:	76fb      	strb	r3, [r7, #27]
 8015498:	7efb      	ldrb	r3, [r7, #27]
 801549a:	2b00      	cmp	r3, #0
 801549c:	f43f af0f 	beq.w	80152be <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 80154a0:	2300      	movs	r3, #0
 80154a2:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80154a4:	69fb      	ldr	r3, [r7, #28]
}
 80154a6:	4618      	mov	r0, r3
 80154a8:	3724      	adds	r7, #36	; 0x24
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bd90      	pop	{r4, r7, pc}
 80154ae:	bf00      	nop
 80154b0:	20008638 	.word	0x20008638
 80154b4:	47800000 	.word	0x47800000
 80154b8:	447a0000 	.word	0x447a0000

080154bc <LL_AHB2_GRP1_EnableClock>:
{
 80154bc:	b480      	push	{r7}
 80154be:	b085      	sub	sp, #20
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80154c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	4313      	orrs	r3, r2
 80154d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80154d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	4013      	ands	r3, r2
 80154de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80154e0:	68fb      	ldr	r3, [r7, #12]
}
 80154e2:	bf00      	nop
 80154e4:	3714      	adds	r7, #20
 80154e6:	46bd      	mov	sp, r7
 80154e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ec:	4770      	bx	lr

080154ee <LL_APB2_GRP1_EnableClock>:
{
 80154ee:	b480      	push	{r7}
 80154f0:	b085      	sub	sp, #20
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80154f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80154fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80154fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	4313      	orrs	r3, r2
 8015504:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8015506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801550a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	4013      	ands	r3, r2
 8015510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015512:	68fb      	ldr	r3, [r7, #12]
}
 8015514:	bf00      	nop
 8015516:	3714      	adds	r7, #20
 8015518:	46bd      	mov	sp, r7
 801551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551e:	4770      	bx	lr

08015520 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	4603      	mov	r3, r0
 8015528:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 801552a:	2300      	movs	r3, #0
 801552c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 801552e:	79fb      	ldrb	r3, [r7, #7]
 8015530:	2b01      	cmp	r3, #1
 8015532:	d903      	bls.n	801553c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015534:	f06f 0301 	mvn.w	r3, #1
 8015538:	60fb      	str	r3, [r7, #12]
 801553a:	e022      	b.n	8015582 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 801553c:	79fa      	ldrb	r2, [r7, #7]
 801553e:	79fb      	ldrb	r3, [r7, #7]
 8015540:	4912      	ldr	r1, [pc, #72]	; (801558c <BSP_COM_Init+0x6c>)
 8015542:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015546:	4912      	ldr	r1, [pc, #72]	; (8015590 <BSP_COM_Init+0x70>)
 8015548:	2094      	movs	r0, #148	; 0x94
 801554a:	fb00 f303 	mul.w	r3, r0, r3
 801554e:	440b      	add	r3, r1
 8015550:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8015552:	79fb      	ldrb	r3, [r7, #7]
 8015554:	2294      	movs	r2, #148	; 0x94
 8015556:	fb02 f303 	mul.w	r3, r2, r3
 801555a:	4a0d      	ldr	r2, [pc, #52]	; (8015590 <BSP_COM_Init+0x70>)
 801555c:	4413      	add	r3, r2
 801555e:	4618      	mov	r0, r3
 8015560:	f000 f86a 	bl	8015638 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8015564:	79fb      	ldrb	r3, [r7, #7]
 8015566:	2294      	movs	r2, #148	; 0x94
 8015568:	fb02 f303 	mul.w	r3, r2, r3
 801556c:	4a08      	ldr	r2, [pc, #32]	; (8015590 <BSP_COM_Init+0x70>)
 801556e:	4413      	add	r3, r2
 8015570:	4618      	mov	r0, r3
 8015572:	f000 f80f 	bl	8015594 <MX_USART1_UART_Init>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	d002      	beq.n	8015582 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 801557c:	f06f 0303 	mvn.w	r3, #3
 8015580:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8015582:	68fb      	ldr	r3, [r7, #12]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	20000070 	.word	0x20000070
 8015590:	200086b8 	.word	0x200086b8

08015594 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801559c:	2300      	movs	r3, #0
 801559e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	4a24      	ldr	r2, [pc, #144]	; (8015634 <MX_USART1_UART_Init+0xa0>)
 80155a4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80155ac:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155b4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2200      	movs	r2, #0
 80155ba:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2200      	movs	r2, #0
 80155c0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	220c      	movs	r2, #12
 80155c6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2200      	movs	r2, #0
 80155cc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	2200      	movs	r2, #0
 80155d2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2200      	movs	r2, #0
 80155de:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2200      	movs	r2, #0
 80155e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f003 fc3c 	bl	8018e64 <HAL_UART_Init>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d001      	beq.n	80155f6 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 80155f2:	2301      	movs	r3, #1
 80155f4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80155f6:	2100      	movs	r1, #0
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f004 f8fd 	bl	80197f8 <HAL_UARTEx_SetTxFifoThreshold>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d001      	beq.n	8015608 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8015604:	2301      	movs	r3, #1
 8015606:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8015608:	2100      	movs	r1, #0
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f004 f932 	bl	8019874 <HAL_UARTEx_SetRxFifoThreshold>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d001      	beq.n	801561a <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8015616:	2301      	movs	r3, #1
 8015618:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f004 f8b3 	bl	8019786 <HAL_UARTEx_DisableFifoMode>
 8015620:	4603      	mov	r3, r0
 8015622:	2b00      	cmp	r3, #0
 8015624:	d001      	beq.n	801562a <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8015626:	2301      	movs	r3, #1
 8015628:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801562a:	7bfb      	ldrb	r3, [r7, #15]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3710      	adds	r7, #16
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}
 8015634:	40013800 	.word	0x40013800

08015638 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b09c      	sub	sp, #112	; 0x70
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015640:	f107 030c 	add.w	r3, r7, #12
 8015644:	2250      	movs	r2, #80	; 0x50
 8015646:	2100      	movs	r1, #0
 8015648:	4618      	mov	r0, r3
 801564a:	f004 fb1d 	bl	8019c88 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801564e:	2301      	movs	r3, #1
 8015650:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8015652:	2300      	movs	r3, #0
 8015654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8015656:	f107 030c 	add.w	r3, r7, #12
 801565a:	4618      	mov	r0, r3
 801565c:	f002 fedc 	bl	8018418 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015660:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015664:	f7ff ff43 	bl	80154ee <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015668:	2002      	movs	r0, #2
 801566a:	f7ff ff27 	bl	80154bc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 801566e:	2340      	movs	r3, #64	; 0x40
 8015670:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015672:	2302      	movs	r3, #2
 8015674:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015676:	2301      	movs	r3, #1
 8015678:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801567a:	2300      	movs	r3, #0
 801567c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 801567e:	2307      	movs	r3, #7
 8015680:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8015682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015686:	4619      	mov	r1, r3
 8015688:	480b      	ldr	r0, [pc, #44]	; (80156b8 <USART1_MspInit+0x80>)
 801568a:	f000 f999 	bl	80159c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 801568e:	2380      	movs	r3, #128	; 0x80
 8015690:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015692:	2302      	movs	r3, #2
 8015694:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015696:	2301      	movs	r3, #1
 8015698:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801569a:	2300      	movs	r3, #0
 801569c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 801569e:	2307      	movs	r3, #7
 80156a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80156a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80156a6:	4619      	mov	r1, r3
 80156a8:	4803      	ldr	r0, [pc, #12]	; (80156b8 <USART1_MspInit+0x80>)
 80156aa:	f000 f989 	bl	80159c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80156ae:	bf00      	nop
 80156b0:	3770      	adds	r7, #112	; 0x70
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}
 80156b6:	bf00      	nop
 80156b8:	48000400 	.word	0x48000400

080156bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b082      	sub	sp, #8
 80156c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80156c2:	2300      	movs	r3, #0
 80156c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80156c6:	4b0c      	ldr	r3, [pc, #48]	; (80156f8 <HAL_Init+0x3c>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4a0b      	ldr	r2, [pc, #44]	; (80156f8 <HAL_Init+0x3c>)
 80156cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80156d2:	2003      	movs	r0, #3
 80156d4:	f000 f933 	bl	801593e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80156d8:	200f      	movs	r0, #15
 80156da:	f7eb fa79 	bl	8000bd0 <HAL_InitTick>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80156e4:	2301      	movs	r3, #1
 80156e6:	71fb      	strb	r3, [r7, #7]
 80156e8:	e001      	b.n	80156ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80156ea:	f7eb fa50 	bl	8000b8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80156ee:	79fb      	ldrb	r3, [r7, #7]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}
 80156f8:	58004000 	.word	0x58004000

080156fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80156fc:	b480      	push	{r7}
 80156fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015700:	4b06      	ldr	r3, [pc, #24]	; (801571c <HAL_IncTick+0x20>)
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	461a      	mov	r2, r3
 8015706:	4b06      	ldr	r3, [pc, #24]	; (8015720 <HAL_IncTick+0x24>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	4413      	add	r3, r2
 801570c:	4a04      	ldr	r2, [pc, #16]	; (8015720 <HAL_IncTick+0x24>)
 801570e:	6013      	str	r3, [r2, #0]
}
 8015710:	bf00      	nop
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr
 801571a:	bf00      	nop
 801571c:	20000078 	.word	0x20000078
 8015720:	2000874c 	.word	0x2000874c

08015724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015724:	b480      	push	{r7}
 8015726:	af00      	add	r7, sp, #0
  return uwTick;
 8015728:	4b03      	ldr	r3, [pc, #12]	; (8015738 <HAL_GetTick+0x14>)
 801572a:	681b      	ldr	r3, [r3, #0]
}
 801572c:	4618      	mov	r0, r3
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop
 8015738:	2000874c 	.word	0x2000874c

0801573c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 801573c:	b480      	push	{r7}
 801573e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8015740:	4b03      	ldr	r3, [pc, #12]	; (8015750 <HAL_GetTickPrio+0x14>)
 8015742:	681b      	ldr	r3, [r3, #0]
}
 8015744:	4618      	mov	r0, r3
 8015746:	46bd      	mov	sp, r7
 8015748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574c:	4770      	bx	lr
 801574e:	bf00      	nop
 8015750:	20000074 	.word	0x20000074

08015754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801575c:	f7ff ffe2 	bl	8015724 <HAL_GetTick>
 8015760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801576c:	d005      	beq.n	801577a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801576e:	4b0a      	ldr	r3, [pc, #40]	; (8015798 <HAL_Delay+0x44>)
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	461a      	mov	r2, r3
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	4413      	add	r3, r2
 8015778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801577a:	bf00      	nop
 801577c:	f7ff ffd2 	bl	8015724 <HAL_GetTick>
 8015780:	4602      	mov	r2, r0
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	1ad3      	subs	r3, r2, r3
 8015786:	68fa      	ldr	r2, [r7, #12]
 8015788:	429a      	cmp	r2, r3
 801578a:	d8f7      	bhi.n	801577c <HAL_Delay+0x28>
  {
  }
}
 801578c:	bf00      	nop
 801578e:	bf00      	nop
 8015790:	3710      	adds	r7, #16
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	20000078 	.word	0x20000078

0801579c <__NVIC_SetPriorityGrouping>:
{
 801579c:	b480      	push	{r7}
 801579e:	b085      	sub	sp, #20
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f003 0307 	and.w	r3, r3, #7
 80157aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80157ac:	4b0c      	ldr	r3, [pc, #48]	; (80157e0 <__NVIC_SetPriorityGrouping+0x44>)
 80157ae:	68db      	ldr	r3, [r3, #12]
 80157b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80157b2:	68ba      	ldr	r2, [r7, #8]
 80157b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80157b8:	4013      	ands	r3, r2
 80157ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80157c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80157c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80157ce:	4a04      	ldr	r2, [pc, #16]	; (80157e0 <__NVIC_SetPriorityGrouping+0x44>)
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	60d3      	str	r3, [r2, #12]
}
 80157d4:	bf00      	nop
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr
 80157e0:	e000ed00 	.word	0xe000ed00

080157e4 <__NVIC_GetPriorityGrouping>:
{
 80157e4:	b480      	push	{r7}
 80157e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80157e8:	4b04      	ldr	r3, [pc, #16]	; (80157fc <__NVIC_GetPriorityGrouping+0x18>)
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	0a1b      	lsrs	r3, r3, #8
 80157ee:	f003 0307 	and.w	r3, r3, #7
}
 80157f2:	4618      	mov	r0, r3
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr
 80157fc:	e000ed00 	.word	0xe000ed00

08015800 <__NVIC_EnableIRQ>:
{
 8015800:	b480      	push	{r7}
 8015802:	b083      	sub	sp, #12
 8015804:	af00      	add	r7, sp, #0
 8015806:	4603      	mov	r3, r0
 8015808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801580a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801580e:	2b00      	cmp	r3, #0
 8015810:	db0b      	blt.n	801582a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015812:	79fb      	ldrb	r3, [r7, #7]
 8015814:	f003 021f 	and.w	r2, r3, #31
 8015818:	4907      	ldr	r1, [pc, #28]	; (8015838 <__NVIC_EnableIRQ+0x38>)
 801581a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801581e:	095b      	lsrs	r3, r3, #5
 8015820:	2001      	movs	r0, #1
 8015822:	fa00 f202 	lsl.w	r2, r0, r2
 8015826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801582a:	bf00      	nop
 801582c:	370c      	adds	r7, #12
 801582e:	46bd      	mov	sp, r7
 8015830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	e000e100 	.word	0xe000e100

0801583c <__NVIC_DisableIRQ>:
{
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
 8015842:	4603      	mov	r3, r0
 8015844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801584a:	2b00      	cmp	r3, #0
 801584c:	db12      	blt.n	8015874 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801584e:	79fb      	ldrb	r3, [r7, #7]
 8015850:	f003 021f 	and.w	r2, r3, #31
 8015854:	490a      	ldr	r1, [pc, #40]	; (8015880 <__NVIC_DisableIRQ+0x44>)
 8015856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801585a:	095b      	lsrs	r3, r3, #5
 801585c:	2001      	movs	r0, #1
 801585e:	fa00 f202 	lsl.w	r2, r0, r2
 8015862:	3320      	adds	r3, #32
 8015864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015868:	f3bf 8f4f 	dsb	sy
}
 801586c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801586e:	f3bf 8f6f 	isb	sy
}
 8015872:	bf00      	nop
}
 8015874:	bf00      	nop
 8015876:	370c      	adds	r7, #12
 8015878:	46bd      	mov	sp, r7
 801587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587e:	4770      	bx	lr
 8015880:	e000e100 	.word	0xe000e100

08015884 <__NVIC_SetPriority>:
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	4603      	mov	r3, r0
 801588c:	6039      	str	r1, [r7, #0]
 801588e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015894:	2b00      	cmp	r3, #0
 8015896:	db0a      	blt.n	80158ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	b2da      	uxtb	r2, r3
 801589c:	490c      	ldr	r1, [pc, #48]	; (80158d0 <__NVIC_SetPriority+0x4c>)
 801589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158a2:	0112      	lsls	r2, r2, #4
 80158a4:	b2d2      	uxtb	r2, r2
 80158a6:	440b      	add	r3, r1
 80158a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80158ac:	e00a      	b.n	80158c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	b2da      	uxtb	r2, r3
 80158b2:	4908      	ldr	r1, [pc, #32]	; (80158d4 <__NVIC_SetPriority+0x50>)
 80158b4:	79fb      	ldrb	r3, [r7, #7]
 80158b6:	f003 030f 	and.w	r3, r3, #15
 80158ba:	3b04      	subs	r3, #4
 80158bc:	0112      	lsls	r2, r2, #4
 80158be:	b2d2      	uxtb	r2, r2
 80158c0:	440b      	add	r3, r1
 80158c2:	761a      	strb	r2, [r3, #24]
}
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr
 80158d0:	e000e100 	.word	0xe000e100
 80158d4:	e000ed00 	.word	0xe000ed00

080158d8 <NVIC_EncodePriority>:
{
 80158d8:	b480      	push	{r7}
 80158da:	b089      	sub	sp, #36	; 0x24
 80158dc:	af00      	add	r7, sp, #0
 80158de:	60f8      	str	r0, [r7, #12]
 80158e0:	60b9      	str	r1, [r7, #8]
 80158e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	f003 0307 	and.w	r3, r3, #7
 80158ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80158ec:	69fb      	ldr	r3, [r7, #28]
 80158ee:	f1c3 0307 	rsb	r3, r3, #7
 80158f2:	2b04      	cmp	r3, #4
 80158f4:	bf28      	it	cs
 80158f6:	2304      	movcs	r3, #4
 80158f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80158fa:	69fb      	ldr	r3, [r7, #28]
 80158fc:	3304      	adds	r3, #4
 80158fe:	2b06      	cmp	r3, #6
 8015900:	d902      	bls.n	8015908 <NVIC_EncodePriority+0x30>
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	3b03      	subs	r3, #3
 8015906:	e000      	b.n	801590a <NVIC_EncodePriority+0x32>
 8015908:	2300      	movs	r3, #0
 801590a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801590c:	f04f 32ff 	mov.w	r2, #4294967295
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	fa02 f303 	lsl.w	r3, r2, r3
 8015916:	43da      	mvns	r2, r3
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	401a      	ands	r2, r3
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015920:	f04f 31ff 	mov.w	r1, #4294967295
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	fa01 f303 	lsl.w	r3, r1, r3
 801592a:	43d9      	mvns	r1, r3
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015930:	4313      	orrs	r3, r2
}
 8015932:	4618      	mov	r0, r3
 8015934:	3724      	adds	r7, #36	; 0x24
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr

0801593e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801593e:	b580      	push	{r7, lr}
 8015940:	b082      	sub	sp, #8
 8015942:	af00      	add	r7, sp, #0
 8015944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f7ff ff28 	bl	801579c <__NVIC_SetPriorityGrouping>
}
 801594c:	bf00      	nop
 801594e:	3708      	adds	r7, #8
 8015950:	46bd      	mov	sp, r7
 8015952:	bd80      	pop	{r7, pc}

08015954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b086      	sub	sp, #24
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
 8015960:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015962:	f7ff ff3f 	bl	80157e4 <__NVIC_GetPriorityGrouping>
 8015966:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015968:	687a      	ldr	r2, [r7, #4]
 801596a:	68b9      	ldr	r1, [r7, #8]
 801596c:	6978      	ldr	r0, [r7, #20]
 801596e:	f7ff ffb3 	bl	80158d8 <NVIC_EncodePriority>
 8015972:	4602      	mov	r2, r0
 8015974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015978:	4611      	mov	r1, r2
 801597a:	4618      	mov	r0, r3
 801597c:	f7ff ff82 	bl	8015884 <__NVIC_SetPriority>
}
 8015980:	bf00      	nop
 8015982:	3718      	adds	r7, #24
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	4603      	mov	r3, r0
 8015990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015996:	4618      	mov	r0, r3
 8015998:	f7ff ff32 	bl	8015800 <__NVIC_EnableIRQ>
}
 801599c:	bf00      	nop
 801599e:	3708      	adds	r7, #8
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	4603      	mov	r3, r0
 80159ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80159ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7ff ff42 	bl	801583c <__NVIC_DisableIRQ>
}
 80159b8:	bf00      	nop
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b087      	sub	sp, #28
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80159ca:	2300      	movs	r3, #0
 80159cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80159ce:	e14c      	b.n	8015c6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	681a      	ldr	r2, [r3, #0]
 80159d4:	2101      	movs	r1, #1
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	fa01 f303 	lsl.w	r3, r1, r3
 80159dc:	4013      	ands	r3, r2
 80159de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	f000 813e 	beq.w	8015c64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	f003 0303 	and.w	r3, r3, #3
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d005      	beq.n	8015a00 <HAL_GPIO_Init+0x40>
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	f003 0303 	and.w	r3, r3, #3
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d130      	bne.n	8015a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	689b      	ldr	r3, [r3, #8]
 8015a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	2203      	movs	r2, #3
 8015a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8015a10:	43db      	mvns	r3, r3
 8015a12:	693a      	ldr	r2, [r7, #16]
 8015a14:	4013      	ands	r3, r2
 8015a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	68da      	ldr	r2, [r3, #12]
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	005b      	lsls	r3, r3, #1
 8015a20:	fa02 f303 	lsl.w	r3, r2, r3
 8015a24:	693a      	ldr	r2, [r7, #16]
 8015a26:	4313      	orrs	r3, r2
 8015a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	693a      	ldr	r2, [r7, #16]
 8015a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8015a36:	2201      	movs	r2, #1
 8015a38:	697b      	ldr	r3, [r7, #20]
 8015a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a3e:	43db      	mvns	r3, r3
 8015a40:	693a      	ldr	r2, [r7, #16]
 8015a42:	4013      	ands	r3, r2
 8015a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015a46:	683b      	ldr	r3, [r7, #0]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	091b      	lsrs	r3, r3, #4
 8015a4c:	f003 0201 	and.w	r2, r3, #1
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	fa02 f303 	lsl.w	r3, r2, r3
 8015a56:	693a      	ldr	r2, [r7, #16]
 8015a58:	4313      	orrs	r3, r2
 8015a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	693a      	ldr	r2, [r7, #16]
 8015a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	f003 0303 	and.w	r3, r3, #3
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	d017      	beq.n	8015a9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	68db      	ldr	r3, [r3, #12]
 8015a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	005b      	lsls	r3, r3, #1
 8015a78:	2203      	movs	r2, #3
 8015a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a7e:	43db      	mvns	r3, r3
 8015a80:	693a      	ldr	r2, [r7, #16]
 8015a82:	4013      	ands	r3, r2
 8015a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	689a      	ldr	r2, [r3, #8]
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	005b      	lsls	r3, r3, #1
 8015a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8015a92:	693a      	ldr	r2, [r7, #16]
 8015a94:	4313      	orrs	r3, r2
 8015a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	693a      	ldr	r2, [r7, #16]
 8015a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	f003 0303 	and.w	r3, r3, #3
 8015aa6:	2b02      	cmp	r3, #2
 8015aa8:	d123      	bne.n	8015af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	08da      	lsrs	r2, r3, #3
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3208      	adds	r2, #8
 8015ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	f003 0307 	and.w	r3, r3, #7
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	220f      	movs	r2, #15
 8015ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ac6:	43db      	mvns	r3, r3
 8015ac8:	693a      	ldr	r2, [r7, #16]
 8015aca:	4013      	ands	r3, r2
 8015acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	691a      	ldr	r2, [r3, #16]
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	f003 0307 	and.w	r3, r3, #7
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	fa02 f303 	lsl.w	r3, r2, r3
 8015ade:	693a      	ldr	r2, [r7, #16]
 8015ae0:	4313      	orrs	r3, r2
 8015ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	08da      	lsrs	r2, r3, #3
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	3208      	adds	r2, #8
 8015aec:	6939      	ldr	r1, [r7, #16]
 8015aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	2203      	movs	r2, #3
 8015afe:	fa02 f303 	lsl.w	r3, r2, r3
 8015b02:	43db      	mvns	r3, r3
 8015b04:	693a      	ldr	r2, [r7, #16]
 8015b06:	4013      	ands	r3, r2
 8015b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	f003 0203 	and.w	r2, r3, #3
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	005b      	lsls	r3, r3, #1
 8015b16:	fa02 f303 	lsl.w	r3, r2, r3
 8015b1a:	693a      	ldr	r2, [r7, #16]
 8015b1c:	4313      	orrs	r3, r2
 8015b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	693a      	ldr	r2, [r7, #16]
 8015b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f000 8098 	beq.w	8015c64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8015b34:	4a54      	ldr	r2, [pc, #336]	; (8015c88 <HAL_GPIO_Init+0x2c8>)
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	089b      	lsrs	r3, r3, #2
 8015b3a:	3302      	adds	r3, #2
 8015b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	f003 0303 	and.w	r3, r3, #3
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	220f      	movs	r2, #15
 8015b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8015b50:	43db      	mvns	r3, r3
 8015b52:	693a      	ldr	r2, [r7, #16]
 8015b54:	4013      	ands	r3, r2
 8015b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015b5e:	d019      	beq.n	8015b94 <HAL_GPIO_Init+0x1d4>
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	4a4a      	ldr	r2, [pc, #296]	; (8015c8c <HAL_GPIO_Init+0x2cc>)
 8015b64:	4293      	cmp	r3, r2
 8015b66:	d013      	beq.n	8015b90 <HAL_GPIO_Init+0x1d0>
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	4a49      	ldr	r2, [pc, #292]	; (8015c90 <HAL_GPIO_Init+0x2d0>)
 8015b6c:	4293      	cmp	r3, r2
 8015b6e:	d00d      	beq.n	8015b8c <HAL_GPIO_Init+0x1cc>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	4a48      	ldr	r2, [pc, #288]	; (8015c94 <HAL_GPIO_Init+0x2d4>)
 8015b74:	4293      	cmp	r3, r2
 8015b76:	d007      	beq.n	8015b88 <HAL_GPIO_Init+0x1c8>
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	4a47      	ldr	r2, [pc, #284]	; (8015c98 <HAL_GPIO_Init+0x2d8>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d101      	bne.n	8015b84 <HAL_GPIO_Init+0x1c4>
 8015b80:	2304      	movs	r3, #4
 8015b82:	e008      	b.n	8015b96 <HAL_GPIO_Init+0x1d6>
 8015b84:	2307      	movs	r3, #7
 8015b86:	e006      	b.n	8015b96 <HAL_GPIO_Init+0x1d6>
 8015b88:	2303      	movs	r3, #3
 8015b8a:	e004      	b.n	8015b96 <HAL_GPIO_Init+0x1d6>
 8015b8c:	2302      	movs	r3, #2
 8015b8e:	e002      	b.n	8015b96 <HAL_GPIO_Init+0x1d6>
 8015b90:	2301      	movs	r3, #1
 8015b92:	e000      	b.n	8015b96 <HAL_GPIO_Init+0x1d6>
 8015b94:	2300      	movs	r3, #0
 8015b96:	697a      	ldr	r2, [r7, #20]
 8015b98:	f002 0203 	and.w	r2, r2, #3
 8015b9c:	0092      	lsls	r2, r2, #2
 8015b9e:	4093      	lsls	r3, r2
 8015ba0:	693a      	ldr	r2, [r7, #16]
 8015ba2:	4313      	orrs	r3, r2
 8015ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8015ba6:	4938      	ldr	r1, [pc, #224]	; (8015c88 <HAL_GPIO_Init+0x2c8>)
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	089b      	lsrs	r3, r3, #2
 8015bac:	3302      	adds	r3, #2
 8015bae:	693a      	ldr	r2, [r7, #16]
 8015bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8015bb4:	4b39      	ldr	r3, [pc, #228]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	43db      	mvns	r3, r3
 8015bbe:	693a      	ldr	r2, [r7, #16]
 8015bc0:	4013      	ands	r3, r2
 8015bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d003      	beq.n	8015bd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015bd0:	693a      	ldr	r2, [r7, #16]
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	4313      	orrs	r3, r2
 8015bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015bd8:	4a30      	ldr	r2, [pc, #192]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015bde:	4b2f      	ldr	r3, [pc, #188]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	43db      	mvns	r3, r3
 8015be8:	693a      	ldr	r2, [r7, #16]
 8015bea:	4013      	ands	r3, r2
 8015bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	685b      	ldr	r3, [r3, #4]
 8015bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d003      	beq.n	8015c02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015bfa:	693a      	ldr	r2, [r7, #16]
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	4313      	orrs	r3, r2
 8015c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015c02:	4a26      	ldr	r2, [pc, #152]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015c08:	4b24      	ldr	r3, [pc, #144]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	43db      	mvns	r3, r3
 8015c14:	693a      	ldr	r2, [r7, #16]
 8015c16:	4013      	ands	r3, r2
 8015c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d003      	beq.n	8015c2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8015c26:	693a      	ldr	r2, [r7, #16]
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	4313      	orrs	r3, r2
 8015c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015c2e:	4a1b      	ldr	r2, [pc, #108]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8015c36:	4b19      	ldr	r3, [pc, #100]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	43db      	mvns	r3, r3
 8015c42:	693a      	ldr	r2, [r7, #16]
 8015c44:	4013      	ands	r3, r2
 8015c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d003      	beq.n	8015c5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8015c54:	693a      	ldr	r2, [r7, #16]
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015c5c:	4a0f      	ldr	r2, [pc, #60]	; (8015c9c <HAL_GPIO_Init+0x2dc>)
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	3301      	adds	r3, #1
 8015c68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	fa22 f303 	lsr.w	r3, r2, r3
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	f47f aeab 	bne.w	80159d0 <HAL_GPIO_Init+0x10>
  }
}
 8015c7a:	bf00      	nop
 8015c7c:	bf00      	nop
 8015c7e:	371c      	adds	r7, #28
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr
 8015c88:	40010000 	.word	0x40010000
 8015c8c:	48000400 	.word	0x48000400
 8015c90:	48000800 	.word	0x48000800
 8015c94:	48000c00 	.word	0x48000c00
 8015c98:	48001000 	.word	0x48001000
 8015c9c:	58000800 	.word	0x58000800

08015ca0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b087      	sub	sp, #28
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015caa:	2300      	movs	r3, #0
 8015cac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8015cae:	e0bb      	b.n	8015e28 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8015cb8:	683a      	ldr	r2, [r7, #0]
 8015cba:	4013      	ands	r3, r2
 8015cbc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	f000 80ae 	beq.w	8015e22 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8015cc6:	4a5f      	ldr	r2, [pc, #380]	; (8015e44 <HAL_GPIO_DeInit+0x1a4>)
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	089b      	lsrs	r3, r3, #2
 8015ccc:	3302      	adds	r3, #2
 8015cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cd2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	f003 0303 	and.w	r3, r3, #3
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	220f      	movs	r2, #15
 8015cde:	fa02 f303 	lsl.w	r3, r2, r3
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	4013      	ands	r3, r2
 8015ce6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015cee:	d019      	beq.n	8015d24 <HAL_GPIO_DeInit+0x84>
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	4a55      	ldr	r2, [pc, #340]	; (8015e48 <HAL_GPIO_DeInit+0x1a8>)
 8015cf4:	4293      	cmp	r3, r2
 8015cf6:	d013      	beq.n	8015d20 <HAL_GPIO_DeInit+0x80>
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	4a54      	ldr	r2, [pc, #336]	; (8015e4c <HAL_GPIO_DeInit+0x1ac>)
 8015cfc:	4293      	cmp	r3, r2
 8015cfe:	d00d      	beq.n	8015d1c <HAL_GPIO_DeInit+0x7c>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	4a53      	ldr	r2, [pc, #332]	; (8015e50 <HAL_GPIO_DeInit+0x1b0>)
 8015d04:	4293      	cmp	r3, r2
 8015d06:	d007      	beq.n	8015d18 <HAL_GPIO_DeInit+0x78>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4a52      	ldr	r2, [pc, #328]	; (8015e54 <HAL_GPIO_DeInit+0x1b4>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d101      	bne.n	8015d14 <HAL_GPIO_DeInit+0x74>
 8015d10:	2304      	movs	r3, #4
 8015d12:	e008      	b.n	8015d26 <HAL_GPIO_DeInit+0x86>
 8015d14:	2307      	movs	r3, #7
 8015d16:	e006      	b.n	8015d26 <HAL_GPIO_DeInit+0x86>
 8015d18:	2303      	movs	r3, #3
 8015d1a:	e004      	b.n	8015d26 <HAL_GPIO_DeInit+0x86>
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	e002      	b.n	8015d26 <HAL_GPIO_DeInit+0x86>
 8015d20:	2301      	movs	r3, #1
 8015d22:	e000      	b.n	8015d26 <HAL_GPIO_DeInit+0x86>
 8015d24:	2300      	movs	r3, #0
 8015d26:	697a      	ldr	r2, [r7, #20]
 8015d28:	f002 0203 	and.w	r2, r2, #3
 8015d2c:	0092      	lsls	r2, r2, #2
 8015d2e:	4093      	lsls	r3, r2
 8015d30:	68fa      	ldr	r2, [r7, #12]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d136      	bne.n	8015da4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8015d36:	4b48      	ldr	r3, [pc, #288]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d38:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	43db      	mvns	r3, r3
 8015d40:	4945      	ldr	r1, [pc, #276]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d42:	4013      	ands	r3, r2
 8015d44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015d48:	4b43      	ldr	r3, [pc, #268]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	43db      	mvns	r3, r3
 8015d52:	4941      	ldr	r1, [pc, #260]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d54:	4013      	ands	r3, r2
 8015d56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015d5a:	4b3f      	ldr	r3, [pc, #252]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	43db      	mvns	r3, r3
 8015d62:	493d      	ldr	r1, [pc, #244]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d64:	4013      	ands	r3, r2
 8015d66:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015d68:	4b3b      	ldr	r3, [pc, #236]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d6a:	685a      	ldr	r2, [r3, #4]
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	43db      	mvns	r3, r3
 8015d70:	4939      	ldr	r1, [pc, #228]	; (8015e58 <HAL_GPIO_DeInit+0x1b8>)
 8015d72:	4013      	ands	r3, r2
 8015d74:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	f003 0303 	and.w	r3, r3, #3
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	220f      	movs	r2, #15
 8015d80:	fa02 f303 	lsl.w	r3, r2, r3
 8015d84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015d86:	4a2f      	ldr	r2, [pc, #188]	; (8015e44 <HAL_GPIO_DeInit+0x1a4>)
 8015d88:	697b      	ldr	r3, [r7, #20]
 8015d8a:	089b      	lsrs	r3, r3, #2
 8015d8c:	3302      	adds	r3, #2
 8015d8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	43da      	mvns	r2, r3
 8015d96:	482b      	ldr	r0, [pc, #172]	; (8015e44 <HAL_GPIO_DeInit+0x1a4>)
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	089b      	lsrs	r3, r3, #2
 8015d9c:	400a      	ands	r2, r1
 8015d9e:	3302      	adds	r3, #2
 8015da0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681a      	ldr	r2, [r3, #0]
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	005b      	lsls	r3, r3, #1
 8015dac:	2103      	movs	r1, #3
 8015dae:	fa01 f303 	lsl.w	r3, r1, r3
 8015db2:	431a      	orrs	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	08da      	lsrs	r2, r3, #3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	3208      	adds	r2, #8
 8015dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	f003 0307 	and.w	r3, r3, #7
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	220f      	movs	r2, #15
 8015dce:	fa02 f303 	lsl.w	r3, r2, r3
 8015dd2:	43db      	mvns	r3, r3
 8015dd4:	697a      	ldr	r2, [r7, #20]
 8015dd6:	08d2      	lsrs	r2, r2, #3
 8015dd8:	4019      	ands	r1, r3
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	3208      	adds	r2, #8
 8015dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	68da      	ldr	r2, [r3, #12]
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	005b      	lsls	r3, r3, #1
 8015dea:	2103      	movs	r1, #3
 8015dec:	fa01 f303 	lsl.w	r3, r1, r3
 8015df0:	43db      	mvns	r3, r3
 8015df2:	401a      	ands	r2, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	685a      	ldr	r2, [r3, #4]
 8015dfc:	2101      	movs	r1, #1
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	fa01 f303 	lsl.w	r3, r1, r3
 8015e04:	43db      	mvns	r3, r3
 8015e06:	401a      	ands	r2, r3
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	689a      	ldr	r2, [r3, #8]
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	005b      	lsls	r3, r3, #1
 8015e14:	2103      	movs	r1, #3
 8015e16:	fa01 f303 	lsl.w	r3, r1, r3
 8015e1a:	43db      	mvns	r3, r3
 8015e1c:	401a      	ands	r2, r3
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	3301      	adds	r3, #1
 8015e26:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015e28:	683a      	ldr	r2, [r7, #0]
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	f47f af3d 	bne.w	8015cb0 <HAL_GPIO_DeInit+0x10>
  }
}
 8015e36:	bf00      	nop
 8015e38:	bf00      	nop
 8015e3a:	371c      	adds	r7, #28
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr
 8015e44:	40010000 	.word	0x40010000
 8015e48:	48000400 	.word	0x48000400
 8015e4c:	48000800 	.word	0x48000800
 8015e50:	48000c00 	.word	0x48000c00
 8015e54:	48001000 	.word	0x48001000
 8015e58:	58000800 	.word	0x58000800

08015e5c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b085      	sub	sp, #20
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	460b      	mov	r3, r1
 8015e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	691a      	ldr	r2, [r3, #16]
 8015e6c:	887b      	ldrh	r3, [r7, #2]
 8015e6e:	4013      	ands	r3, r2
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d002      	beq.n	8015e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015e74:	2301      	movs	r3, #1
 8015e76:	73fb      	strb	r3, [r7, #15]
 8015e78:	e001      	b.n	8015e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3714      	adds	r7, #20
 8015e84:	46bd      	mov	sp, r7
 8015e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8a:	4770      	bx	lr

08015e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	460b      	mov	r3, r1
 8015e96:	807b      	strh	r3, [r7, #2]
 8015e98:	4613      	mov	r3, r2
 8015e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015e9c:	787b      	ldrb	r3, [r7, #1]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d003      	beq.n	8015eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015ea2:	887a      	ldrh	r2, [r7, #2]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015ea8:	e002      	b.n	8015eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015eaa:	887a      	ldrh	r2, [r7, #2]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015eb0:	bf00      	nop
 8015eb2:	370c      	adds	r7, #12
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eba:	4770      	bx	lr

08015ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d101      	bne.n	8015ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015eca:	2301      	movs	r3, #1
 8015ecc:	e081      	b.n	8015fd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015ed4:	b2db      	uxtb	r3, r3
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d106      	bne.n	8015ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2200      	movs	r2, #0
 8015ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f000 f8a8 	bl	8016038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2224      	movs	r2, #36	; 0x24
 8015eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f022 0201 	bic.w	r2, r2, #1
 8015efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	685a      	ldr	r2, [r3, #4]
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015f0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	689a      	ldr	r2, [r3, #8]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015f1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	68db      	ldr	r3, [r3, #12]
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	d107      	bne.n	8015f36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	689a      	ldr	r2, [r3, #8]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015f32:	609a      	str	r2, [r3, #8]
 8015f34:	e006      	b.n	8015f44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	689a      	ldr	r2, [r3, #8]
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015f42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	68db      	ldr	r3, [r3, #12]
 8015f48:	2b02      	cmp	r3, #2
 8015f4a:	d104      	bne.n	8015f56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	6812      	ldr	r2, [r2, #0]
 8015f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	68da      	ldr	r2, [r3, #12]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	691a      	ldr	r2, [r3, #16]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	695b      	ldr	r3, [r3, #20]
 8015f82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	699b      	ldr	r3, [r3, #24]
 8015f8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	430a      	orrs	r2, r1
 8015f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	69d9      	ldr	r1, [r3, #28]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6a1a      	ldr	r2, [r3, #32]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	430a      	orrs	r2, r1
 8015fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	681a      	ldr	r2, [r3, #0]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	f042 0201 	orr.w	r2, r2, #1
 8015fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2220      	movs	r2, #32
 8015fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3708      	adds	r7, #8
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}

08015fda <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015fda:	b580      	push	{r7, lr}
 8015fdc:	b082      	sub	sp, #8
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d101      	bne.n	8015fec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015fe8:	2301      	movs	r3, #1
 8015fea:	e021      	b.n	8016030 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2224      	movs	r2, #36	; 0x24
 8015ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	f022 0201 	bic.w	r2, r2, #1
 8016002:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 f821 	bl	801604c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	2200      	movs	r2, #0
 801600e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2200      	movs	r2, #0
 8016014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2200      	movs	r2, #0
 801601c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2200      	movs	r2, #0
 8016022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2200      	movs	r2, #0
 801602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801602e:	2300      	movs	r3, #0
}
 8016030:	4618      	mov	r0, r3
 8016032:	3708      	adds	r7, #8
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}

08016038 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8016038:	b480      	push	{r7}
 801603a:	b083      	sub	sp, #12
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8016040:	bf00      	nop
 8016042:	370c      	adds	r7, #12
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8016054:	bf00      	nop
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b088      	sub	sp, #32
 8016064:	af02      	add	r7, sp, #8
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	607a      	str	r2, [r7, #4]
 801606a:	461a      	mov	r2, r3
 801606c:	460b      	mov	r3, r1
 801606e:	817b      	strh	r3, [r7, #10]
 8016070:	4613      	mov	r3, r2
 8016072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801607a:	b2db      	uxtb	r3, r3
 801607c:	2b20      	cmp	r3, #32
 801607e:	f040 80da 	bne.w	8016236 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016088:	2b01      	cmp	r3, #1
 801608a:	d101      	bne.n	8016090 <HAL_I2C_Master_Transmit+0x30>
 801608c:	2302      	movs	r3, #2
 801608e:	e0d3      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2201      	movs	r2, #1
 8016094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016098:	f7ff fb44 	bl	8015724 <HAL_GetTick>
 801609c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	2319      	movs	r3, #25
 80160a4:	2201      	movs	r2, #1
 80160a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	f000 fa1a 	bl	80164e4 <I2C_WaitOnFlagUntilTimeout>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d001      	beq.n	80160ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80160b6:	2301      	movs	r3, #1
 80160b8:	e0be      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2221      	movs	r2, #33	; 0x21
 80160be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2210      	movs	r2, #16
 80160c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	2200      	movs	r2, #0
 80160ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	687a      	ldr	r2, [r7, #4]
 80160d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	893a      	ldrh	r2, [r7, #8]
 80160da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2200      	movs	r2, #0
 80160e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	2bff      	cmp	r3, #255	; 0xff
 80160ea:	d90e      	bls.n	801610a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	22ff      	movs	r2, #255	; 0xff
 80160f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160f6:	b2da      	uxtb	r2, r3
 80160f8:	8979      	ldrh	r1, [r7, #10]
 80160fa:	4b51      	ldr	r3, [pc, #324]	; (8016240 <HAL_I2C_Master_Transmit+0x1e0>)
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016102:	68f8      	ldr	r0, [r7, #12]
 8016104:	f000 fc2a 	bl	801695c <I2C_TransferConfig>
 8016108:	e06c      	b.n	80161e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801610e:	b29a      	uxth	r2, r3
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016118:	b2da      	uxtb	r2, r3
 801611a:	8979      	ldrh	r1, [r7, #10]
 801611c:	4b48      	ldr	r3, [pc, #288]	; (8016240 <HAL_I2C_Master_Transmit+0x1e0>)
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016124:	68f8      	ldr	r0, [r7, #12]
 8016126:	f000 fc19 	bl	801695c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801612a:	e05b      	b.n	80161e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801612c:	697a      	ldr	r2, [r7, #20]
 801612e:	6a39      	ldr	r1, [r7, #32]
 8016130:	68f8      	ldr	r0, [r7, #12]
 8016132:	f000 fa26 	bl	8016582 <I2C_WaitOnTXISFlagUntilTimeout>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d001      	beq.n	8016140 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801613c:	2301      	movs	r3, #1
 801613e:	e07b      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016144:	781a      	ldrb	r2, [r3, #0]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016150:	1c5a      	adds	r2, r3, #1
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801615a:	b29b      	uxth	r3, r3
 801615c:	3b01      	subs	r3, #1
 801615e:	b29a      	uxth	r2, r3
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016168:	3b01      	subs	r3, #1
 801616a:	b29a      	uxth	r2, r3
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016174:	b29b      	uxth	r3, r3
 8016176:	2b00      	cmp	r3, #0
 8016178:	d034      	beq.n	80161e4 <HAL_I2C_Master_Transmit+0x184>
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801617e:	2b00      	cmp	r3, #0
 8016180:	d130      	bne.n	80161e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	9300      	str	r3, [sp, #0]
 8016186:	6a3b      	ldr	r3, [r7, #32]
 8016188:	2200      	movs	r2, #0
 801618a:	2180      	movs	r1, #128	; 0x80
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 f9a9 	bl	80164e4 <I2C_WaitOnFlagUntilTimeout>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d001      	beq.n	801619c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016198:	2301      	movs	r3, #1
 801619a:	e04d      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	2bff      	cmp	r3, #255	; 0xff
 80161a4:	d90e      	bls.n	80161c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	22ff      	movs	r2, #255	; 0xff
 80161aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161b0:	b2da      	uxtb	r2, r3
 80161b2:	8979      	ldrh	r1, [r7, #10]
 80161b4:	2300      	movs	r3, #0
 80161b6:	9300      	str	r3, [sp, #0]
 80161b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f000 fbcd 	bl	801695c <I2C_TransferConfig>
 80161c2:	e00f      	b.n	80161e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161d2:	b2da      	uxtb	r2, r3
 80161d4:	8979      	ldrh	r1, [r7, #10]
 80161d6:	2300      	movs	r3, #0
 80161d8:	9300      	str	r3, [sp, #0]
 80161da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80161de:	68f8      	ldr	r0, [r7, #12]
 80161e0:	f000 fbbc 	bl	801695c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d19e      	bne.n	801612c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80161ee:	697a      	ldr	r2, [r7, #20]
 80161f0:	6a39      	ldr	r1, [r7, #32]
 80161f2:	68f8      	ldr	r0, [r7, #12]
 80161f4:	f000 fa0c 	bl	8016610 <I2C_WaitOnSTOPFlagUntilTimeout>
 80161f8:	4603      	mov	r3, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d001      	beq.n	8016202 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80161fe:	2301      	movs	r3, #1
 8016200:	e01a      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	2220      	movs	r2, #32
 8016208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	6859      	ldr	r1, [r3, #4]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	4b0b      	ldr	r3, [pc, #44]	; (8016244 <HAL_I2C_Master_Transmit+0x1e4>)
 8016216:	400b      	ands	r3, r1
 8016218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2220      	movs	r2, #32
 801621e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	2200      	movs	r2, #0
 8016226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2200      	movs	r2, #0
 801622e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016232:	2300      	movs	r3, #0
 8016234:	e000      	b.n	8016238 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8016236:	2302      	movs	r3, #2
  }
}
 8016238:	4618      	mov	r0, r3
 801623a:	3718      	adds	r7, #24
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}
 8016240:	80002000 	.word	0x80002000
 8016244:	fe00e800 	.word	0xfe00e800

08016248 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b088      	sub	sp, #32
 801624c:	af02      	add	r7, sp, #8
 801624e:	60f8      	str	r0, [r7, #12]
 8016250:	607a      	str	r2, [r7, #4]
 8016252:	461a      	mov	r2, r3
 8016254:	460b      	mov	r3, r1
 8016256:	817b      	strh	r3, [r7, #10]
 8016258:	4613      	mov	r3, r2
 801625a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b20      	cmp	r3, #32
 8016266:	f040 80db 	bne.w	8016420 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016270:	2b01      	cmp	r3, #1
 8016272:	d101      	bne.n	8016278 <HAL_I2C_Master_Receive+0x30>
 8016274:	2302      	movs	r3, #2
 8016276:	e0d4      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2201      	movs	r2, #1
 801627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016280:	f7ff fa50 	bl	8015724 <HAL_GetTick>
 8016284:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	2319      	movs	r3, #25
 801628c:	2201      	movs	r2, #1
 801628e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016292:	68f8      	ldr	r0, [r7, #12]
 8016294:	f000 f926 	bl	80164e4 <I2C_WaitOnFlagUntilTimeout>
 8016298:	4603      	mov	r3, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801629e:	2301      	movs	r3, #1
 80162a0:	e0bf      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2222      	movs	r2, #34	; 0x22
 80162a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2210      	movs	r2, #16
 80162ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2200      	movs	r2, #0
 80162b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	893a      	ldrh	r2, [r7, #8]
 80162c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	2200      	movs	r2, #0
 80162c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	2bff      	cmp	r3, #255	; 0xff
 80162d2:	d90e      	bls.n	80162f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	22ff      	movs	r2, #255	; 0xff
 80162d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162de:	b2da      	uxtb	r2, r3
 80162e0:	8979      	ldrh	r1, [r7, #10]
 80162e2:	4b52      	ldr	r3, [pc, #328]	; (801642c <HAL_I2C_Master_Receive+0x1e4>)
 80162e4:	9300      	str	r3, [sp, #0]
 80162e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f000 fb36 	bl	801695c <I2C_TransferConfig>
 80162f0:	e06d      	b.n	80163ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016300:	b2da      	uxtb	r2, r3
 8016302:	8979      	ldrh	r1, [r7, #10]
 8016304:	4b49      	ldr	r3, [pc, #292]	; (801642c <HAL_I2C_Master_Receive+0x1e4>)
 8016306:	9300      	str	r3, [sp, #0]
 8016308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801630c:	68f8      	ldr	r0, [r7, #12]
 801630e:	f000 fb25 	bl	801695c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016312:	e05c      	b.n	80163ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016314:	697a      	ldr	r2, [r7, #20]
 8016316:	6a39      	ldr	r1, [r7, #32]
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f000 f9bd 	bl	8016698 <I2C_WaitOnRXNEFlagUntilTimeout>
 801631e:	4603      	mov	r3, r0
 8016320:	2b00      	cmp	r3, #0
 8016322:	d001      	beq.n	8016328 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8016324:	2301      	movs	r3, #1
 8016326:	e07c      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016332:	b2d2      	uxtb	r2, r2
 8016334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016344:	3b01      	subs	r3, #1
 8016346:	b29a      	uxth	r2, r3
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016350:	b29b      	uxth	r3, r3
 8016352:	3b01      	subs	r3, #1
 8016354:	b29a      	uxth	r2, r3
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801635e:	b29b      	uxth	r3, r3
 8016360:	2b00      	cmp	r3, #0
 8016362:	d034      	beq.n	80163ce <HAL_I2C_Master_Receive+0x186>
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016368:	2b00      	cmp	r3, #0
 801636a:	d130      	bne.n	80163ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	6a3b      	ldr	r3, [r7, #32]
 8016372:	2200      	movs	r2, #0
 8016374:	2180      	movs	r1, #128	; 0x80
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	f000 f8b4 	bl	80164e4 <I2C_WaitOnFlagUntilTimeout>
 801637c:	4603      	mov	r3, r0
 801637e:	2b00      	cmp	r3, #0
 8016380:	d001      	beq.n	8016386 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8016382:	2301      	movs	r3, #1
 8016384:	e04d      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801638a:	b29b      	uxth	r3, r3
 801638c:	2bff      	cmp	r3, #255	; 0xff
 801638e:	d90e      	bls.n	80163ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	22ff      	movs	r2, #255	; 0xff
 8016394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801639a:	b2da      	uxtb	r2, r3
 801639c:	8979      	ldrh	r1, [r7, #10]
 801639e:	2300      	movs	r3, #0
 80163a0:	9300      	str	r3, [sp, #0]
 80163a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80163a6:	68f8      	ldr	r0, [r7, #12]
 80163a8:	f000 fad8 	bl	801695c <I2C_TransferConfig>
 80163ac:	e00f      	b.n	80163ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163bc:	b2da      	uxtb	r2, r3
 80163be:	8979      	ldrh	r1, [r7, #10]
 80163c0:	2300      	movs	r3, #0
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f000 fac7 	bl	801695c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d19d      	bne.n	8016314 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80163d8:	697a      	ldr	r2, [r7, #20]
 80163da:	6a39      	ldr	r1, [r7, #32]
 80163dc:	68f8      	ldr	r0, [r7, #12]
 80163de:	f000 f917 	bl	8016610 <I2C_WaitOnSTOPFlagUntilTimeout>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e01a      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2220      	movs	r2, #32
 80163f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	6859      	ldr	r1, [r3, #4]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	4b0c      	ldr	r3, [pc, #48]	; (8016430 <HAL_I2C_Master_Receive+0x1e8>)
 8016400:	400b      	ands	r3, r1
 8016402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2220      	movs	r2, #32
 8016408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2200      	movs	r2, #0
 8016418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801641c:	2300      	movs	r3, #0
 801641e:	e000      	b.n	8016422 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8016420:	2302      	movs	r3, #2
  }
}
 8016422:	4618      	mov	r0, r3
 8016424:	3718      	adds	r7, #24
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	80002400 	.word	0x80002400
 8016430:	fe00e800 	.word	0xfe00e800

08016434 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	699b      	ldr	r3, [r3, #24]
 8016442:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016450:	2b00      	cmp	r3, #0
 8016452:	d005      	beq.n	8016460 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	68f9      	ldr	r1, [r7, #12]
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	4798      	blx	r3
  }
}
 8016460:	bf00      	nop
 8016462:	3710      	adds	r7, #16
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8016468:	b480      	push	{r7}
 801646a:	b083      	sub	sp, #12
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016476:	b2db      	uxtb	r3, r3
}
 8016478:	4618      	mov	r0, r3
 801647a:	370c      	adds	r7, #12
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr

08016484 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8016484:	b480      	push	{r7}
 8016486:	b083      	sub	sp, #12
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8016490:	4618      	mov	r0, r3
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr

0801649c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	699b      	ldr	r3, [r3, #24]
 80164aa:	f003 0302 	and.w	r3, r3, #2
 80164ae:	2b02      	cmp	r3, #2
 80164b0:	d103      	bne.n	80164ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2200      	movs	r2, #0
 80164b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	699b      	ldr	r3, [r3, #24]
 80164c0:	f003 0301 	and.w	r3, r3, #1
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	d007      	beq.n	80164d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	699a      	ldr	r2, [r3, #24]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f042 0201 	orr.w	r2, r2, #1
 80164d6:	619a      	str	r2, [r3, #24]
  }
}
 80164d8:	bf00      	nop
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	603b      	str	r3, [r7, #0]
 80164f0:	4613      	mov	r3, r2
 80164f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80164f4:	e031      	b.n	801655a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80164f6:	683b      	ldr	r3, [r7, #0]
 80164f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164fc:	d02d      	beq.n	801655a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80164fe:	f7ff f911 	bl	8015724 <HAL_GetTick>
 8016502:	4602      	mov	r2, r0
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	1ad3      	subs	r3, r2, r3
 8016508:	683a      	ldr	r2, [r7, #0]
 801650a:	429a      	cmp	r2, r3
 801650c:	d302      	bcc.n	8016514 <I2C_WaitOnFlagUntilTimeout+0x30>
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d122      	bne.n	801655a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	699a      	ldr	r2, [r3, #24]
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	4013      	ands	r3, r2
 801651e:	68ba      	ldr	r2, [r7, #8]
 8016520:	429a      	cmp	r2, r3
 8016522:	bf0c      	ite	eq
 8016524:	2301      	moveq	r3, #1
 8016526:	2300      	movne	r3, #0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	461a      	mov	r2, r3
 801652c:	79fb      	ldrb	r3, [r7, #7]
 801652e:	429a      	cmp	r2, r3
 8016530:	d113      	bne.n	801655a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016536:	f043 0220 	orr.w	r2, r3, #32
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2220      	movs	r2, #32
 8016542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	2200      	movs	r2, #0
 801654a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	2200      	movs	r2, #0
 8016552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8016556:	2301      	movs	r3, #1
 8016558:	e00f      	b.n	801657a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	699a      	ldr	r2, [r3, #24]
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	4013      	ands	r3, r2
 8016564:	68ba      	ldr	r2, [r7, #8]
 8016566:	429a      	cmp	r2, r3
 8016568:	bf0c      	ite	eq
 801656a:	2301      	moveq	r3, #1
 801656c:	2300      	movne	r3, #0
 801656e:	b2db      	uxtb	r3, r3
 8016570:	461a      	mov	r2, r3
 8016572:	79fb      	ldrb	r3, [r7, #7]
 8016574:	429a      	cmp	r2, r3
 8016576:	d0be      	beq.n	80164f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016578:	2300      	movs	r3, #0
}
 801657a:	4618      	mov	r0, r3
 801657c:	3710      	adds	r7, #16
 801657e:	46bd      	mov	sp, r7
 8016580:	bd80      	pop	{r7, pc}

08016582 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016582:	b580      	push	{r7, lr}
 8016584:	b084      	sub	sp, #16
 8016586:	af00      	add	r7, sp, #0
 8016588:	60f8      	str	r0, [r7, #12]
 801658a:	60b9      	str	r1, [r7, #8]
 801658c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801658e:	e033      	b.n	80165f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	68b9      	ldr	r1, [r7, #8]
 8016594:	68f8      	ldr	r0, [r7, #12]
 8016596:	f000 f901 	bl	801679c <I2C_IsErrorOccurred>
 801659a:	4603      	mov	r3, r0
 801659c:	2b00      	cmp	r3, #0
 801659e:	d001      	beq.n	80165a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80165a0:	2301      	movs	r3, #1
 80165a2:	e031      	b.n	8016608 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165aa:	d025      	beq.n	80165f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80165ac:	f7ff f8ba 	bl	8015724 <HAL_GetTick>
 80165b0:	4602      	mov	r2, r0
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	1ad3      	subs	r3, r2, r3
 80165b6:	68ba      	ldr	r2, [r7, #8]
 80165b8:	429a      	cmp	r2, r3
 80165ba:	d302      	bcc.n	80165c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d11a      	bne.n	80165f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	699b      	ldr	r3, [r3, #24]
 80165c8:	f003 0302 	and.w	r3, r3, #2
 80165cc:	2b02      	cmp	r3, #2
 80165ce:	d013      	beq.n	80165f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165d4:	f043 0220 	orr.w	r2, r3, #32
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	2220      	movs	r2, #32
 80165e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2200      	movs	r2, #0
 80165e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2200      	movs	r2, #0
 80165f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80165f4:	2301      	movs	r3, #1
 80165f6:	e007      	b.n	8016608 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	699b      	ldr	r3, [r3, #24]
 80165fe:	f003 0302 	and.w	r3, r3, #2
 8016602:	2b02      	cmp	r3, #2
 8016604:	d1c4      	bne.n	8016590 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8016606:	2300      	movs	r3, #0
}
 8016608:	4618      	mov	r0, r3
 801660a:	3710      	adds	r7, #16
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	60b9      	str	r1, [r7, #8]
 801661a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801661c:	e02f      	b.n	801667e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	68b9      	ldr	r1, [r7, #8]
 8016622:	68f8      	ldr	r0, [r7, #12]
 8016624:	f000 f8ba 	bl	801679c <I2C_IsErrorOccurred>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801662e:	2301      	movs	r3, #1
 8016630:	e02d      	b.n	801668e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016632:	f7ff f877 	bl	8015724 <HAL_GetTick>
 8016636:	4602      	mov	r2, r0
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	1ad3      	subs	r3, r2, r3
 801663c:	68ba      	ldr	r2, [r7, #8]
 801663e:	429a      	cmp	r2, r3
 8016640:	d302      	bcc.n	8016648 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d11a      	bne.n	801667e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	699b      	ldr	r3, [r3, #24]
 801664e:	f003 0320 	and.w	r3, r3, #32
 8016652:	2b20      	cmp	r3, #32
 8016654:	d013      	beq.n	801667e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801665a:	f043 0220 	orr.w	r2, r3, #32
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	2220      	movs	r2, #32
 8016666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	2200      	movs	r2, #0
 801666e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2200      	movs	r2, #0
 8016676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801667a:	2301      	movs	r3, #1
 801667c:	e007      	b.n	801668e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	699b      	ldr	r3, [r3, #24]
 8016684:	f003 0320 	and.w	r3, r3, #32
 8016688:	2b20      	cmp	r3, #32
 801668a:	d1c8      	bne.n	801661e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
	...

08016698 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b084      	sub	sp, #16
 801669c:	af00      	add	r7, sp, #0
 801669e:	60f8      	str	r0, [r7, #12]
 80166a0:	60b9      	str	r1, [r7, #8]
 80166a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80166a4:	e06b      	b.n	801677e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80166a6:	687a      	ldr	r2, [r7, #4]
 80166a8:	68b9      	ldr	r1, [r7, #8]
 80166aa:	68f8      	ldr	r0, [r7, #12]
 80166ac:	f000 f876 	bl	801679c <I2C_IsErrorOccurred>
 80166b0:	4603      	mov	r3, r0
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d001      	beq.n	80166ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80166b6:	2301      	movs	r3, #1
 80166b8:	e069      	b.n	801678e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	699b      	ldr	r3, [r3, #24]
 80166c0:	f003 0320 	and.w	r3, r3, #32
 80166c4:	2b20      	cmp	r3, #32
 80166c6:	d138      	bne.n	801673a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	699b      	ldr	r3, [r3, #24]
 80166ce:	f003 0304 	and.w	r3, r3, #4
 80166d2:	2b04      	cmp	r3, #4
 80166d4:	d105      	bne.n	80166e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d001      	beq.n	80166e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80166de:	2300      	movs	r3, #0
 80166e0:	e055      	b.n	801678e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	699b      	ldr	r3, [r3, #24]
 80166e8:	f003 0310 	and.w	r3, r3, #16
 80166ec:	2b10      	cmp	r3, #16
 80166ee:	d107      	bne.n	8016700 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	2210      	movs	r2, #16
 80166f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2204      	movs	r2, #4
 80166fc:	645a      	str	r2, [r3, #68]	; 0x44
 80166fe:	e002      	b.n	8016706 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	2200      	movs	r2, #0
 8016704:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2220      	movs	r2, #32
 801670c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	6859      	ldr	r1, [r3, #4]
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	4b1f      	ldr	r3, [pc, #124]	; (8016798 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801671a:	400b      	ands	r3, r1
 801671c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	2220      	movs	r2, #32
 8016722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2200      	movs	r2, #0
 801672a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	2200      	movs	r2, #0
 8016732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016736:	2301      	movs	r3, #1
 8016738:	e029      	b.n	801678e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801673a:	f7fe fff3 	bl	8015724 <HAL_GetTick>
 801673e:	4602      	mov	r2, r0
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	68ba      	ldr	r2, [r7, #8]
 8016746:	429a      	cmp	r2, r3
 8016748:	d302      	bcc.n	8016750 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d116      	bne.n	801677e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	699b      	ldr	r3, [r3, #24]
 8016756:	f003 0304 	and.w	r3, r3, #4
 801675a:	2b04      	cmp	r3, #4
 801675c:	d00f      	beq.n	801677e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016762:	f043 0220 	orr.w	r2, r3, #32
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	2220      	movs	r2, #32
 801676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	2200      	movs	r2, #0
 8016776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801677a:	2301      	movs	r3, #1
 801677c:	e007      	b.n	801678e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	699b      	ldr	r3, [r3, #24]
 8016784:	f003 0304 	and.w	r3, r3, #4
 8016788:	2b04      	cmp	r3, #4
 801678a:	d18c      	bne.n	80166a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801678c:	2300      	movs	r3, #0
}
 801678e:	4618      	mov	r0, r3
 8016790:	3710      	adds	r7, #16
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}
 8016796:	bf00      	nop
 8016798:	fe00e800 	.word	0xfe00e800

0801679c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b08a      	sub	sp, #40	; 0x28
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	60f8      	str	r0, [r7, #12]
 80167a4:	60b9      	str	r1, [r7, #8]
 80167a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80167a8:	2300      	movs	r3, #0
 80167aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	699b      	ldr	r3, [r3, #24]
 80167b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80167b6:	2300      	movs	r3, #0
 80167b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80167be:	69bb      	ldr	r3, [r7, #24]
 80167c0:	f003 0310 	and.w	r3, r3, #16
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d068      	beq.n	801689a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2210      	movs	r2, #16
 80167ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80167d0:	e049      	b.n	8016866 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167d8:	d045      	beq.n	8016866 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80167da:	f7fe ffa3 	bl	8015724 <HAL_GetTick>
 80167de:	4602      	mov	r2, r0
 80167e0:	69fb      	ldr	r3, [r7, #28]
 80167e2:	1ad3      	subs	r3, r2, r3
 80167e4:	68ba      	ldr	r2, [r7, #8]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d302      	bcc.n	80167f0 <I2C_IsErrorOccurred+0x54>
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d13a      	bne.n	8016866 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80167fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016802:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	699b      	ldr	r3, [r3, #24]
 801680a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801680e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016812:	d121      	bne.n	8016858 <I2C_IsErrorOccurred+0xbc>
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801681a:	d01d      	beq.n	8016858 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801681c:	7cfb      	ldrb	r3, [r7, #19]
 801681e:	2b20      	cmp	r3, #32
 8016820:	d01a      	beq.n	8016858 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	685a      	ldr	r2, [r3, #4]
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016830:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016832:	f7fe ff77 	bl	8015724 <HAL_GetTick>
 8016836:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016838:	e00e      	b.n	8016858 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801683a:	f7fe ff73 	bl	8015724 <HAL_GetTick>
 801683e:	4602      	mov	r2, r0
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	1ad3      	subs	r3, r2, r3
 8016844:	2b19      	cmp	r3, #25
 8016846:	d907      	bls.n	8016858 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8016848:	6a3b      	ldr	r3, [r7, #32]
 801684a:	f043 0320 	orr.w	r3, r3, #32
 801684e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016850:	2301      	movs	r3, #1
 8016852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8016856:	e006      	b.n	8016866 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	699b      	ldr	r3, [r3, #24]
 801685e:	f003 0320 	and.w	r3, r3, #32
 8016862:	2b20      	cmp	r3, #32
 8016864:	d1e9      	bne.n	801683a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	699b      	ldr	r3, [r3, #24]
 801686c:	f003 0320 	and.w	r3, r3, #32
 8016870:	2b20      	cmp	r3, #32
 8016872:	d003      	beq.n	801687c <I2C_IsErrorOccurred+0xe0>
 8016874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016878:	2b00      	cmp	r3, #0
 801687a:	d0aa      	beq.n	80167d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801687c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016880:	2b00      	cmp	r3, #0
 8016882:	d103      	bne.n	801688c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	2220      	movs	r2, #32
 801688a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801688c:	6a3b      	ldr	r3, [r7, #32]
 801688e:	f043 0304 	orr.w	r3, r3, #4
 8016892:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8016894:	2301      	movs	r3, #1
 8016896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	699b      	ldr	r3, [r3, #24]
 80168a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80168a2:	69bb      	ldr	r3, [r7, #24]
 80168a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00b      	beq.n	80168c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80168ac:	6a3b      	ldr	r3, [r7, #32]
 80168ae:	f043 0301 	orr.w	r3, r3, #1
 80168b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80168bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80168be:	2301      	movs	r3, #1
 80168c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d00b      	beq.n	80168e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80168ce:	6a3b      	ldr	r3, [r7, #32]
 80168d0:	f043 0308 	orr.w	r3, r3, #8
 80168d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80168de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80168e0:	2301      	movs	r3, #1
 80168e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80168e6:	69bb      	ldr	r3, [r7, #24]
 80168e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d00b      	beq.n	8016908 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80168f0:	6a3b      	ldr	r3, [r7, #32]
 80168f2:	f043 0302 	orr.w	r3, r3, #2
 80168f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016902:	2301      	movs	r3, #1
 8016904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801690c:	2b00      	cmp	r3, #0
 801690e:	d01c      	beq.n	801694a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f7ff fdc3 	bl	801649c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	6859      	ldr	r1, [r3, #4]
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	4b0d      	ldr	r3, [pc, #52]	; (8016958 <I2C_IsErrorOccurred+0x1bc>)
 8016922:	400b      	ands	r3, r1
 8016924:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	431a      	orrs	r2, r3
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	2220      	movs	r2, #32
 8016936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2200      	movs	r2, #0
 801693e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	2200      	movs	r2, #0
 8016946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801694a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801694e:	4618      	mov	r0, r3
 8016950:	3728      	adds	r7, #40	; 0x28
 8016952:	46bd      	mov	sp, r7
 8016954:	bd80      	pop	{r7, pc}
 8016956:	bf00      	nop
 8016958:	fe00e800 	.word	0xfe00e800

0801695c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801695c:	b480      	push	{r7}
 801695e:	b087      	sub	sp, #28
 8016960:	af00      	add	r7, sp, #0
 8016962:	60f8      	str	r0, [r7, #12]
 8016964:	607b      	str	r3, [r7, #4]
 8016966:	460b      	mov	r3, r1
 8016968:	817b      	strh	r3, [r7, #10]
 801696a:	4613      	mov	r3, r2
 801696c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801696e:	897b      	ldrh	r3, [r7, #10]
 8016970:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016974:	7a7b      	ldrb	r3, [r7, #9]
 8016976:	041b      	lsls	r3, r3, #16
 8016978:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801697c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016982:	6a3b      	ldr	r3, [r7, #32]
 8016984:	4313      	orrs	r3, r2
 8016986:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801698a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	685a      	ldr	r2, [r3, #4]
 8016992:	6a3b      	ldr	r3, [r7, #32]
 8016994:	0d5b      	lsrs	r3, r3, #21
 8016996:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801699a:	4b08      	ldr	r3, [pc, #32]	; (80169bc <I2C_TransferConfig+0x60>)
 801699c:	430b      	orrs	r3, r1
 801699e:	43db      	mvns	r3, r3
 80169a0:	ea02 0103 	and.w	r1, r2, r3
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	697a      	ldr	r2, [r7, #20]
 80169aa:	430a      	orrs	r2, r1
 80169ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80169ae:	bf00      	nop
 80169b0:	371c      	adds	r7, #28
 80169b2:	46bd      	mov	sp, r7
 80169b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop
 80169bc:	03ff63ff 	.word	0x03ff63ff

080169c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80169c0:	b480      	push	{r7}
 80169c2:	b083      	sub	sp, #12
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	2b20      	cmp	r3, #32
 80169d4:	d138      	bne.n	8016a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80169dc:	2b01      	cmp	r3, #1
 80169de:	d101      	bne.n	80169e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80169e0:	2302      	movs	r3, #2
 80169e2:	e032      	b.n	8016a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2201      	movs	r2, #1
 80169e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2224      	movs	r2, #36	; 0x24
 80169f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f022 0201 	bic.w	r2, r2, #1
 8016a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	6819      	ldr	r1, [r3, #0]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	683a      	ldr	r2, [r7, #0]
 8016a20:	430a      	orrs	r2, r1
 8016a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	f042 0201 	orr.w	r2, r2, #1
 8016a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2220      	movs	r2, #32
 8016a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016a44:	2300      	movs	r3, #0
 8016a46:	e000      	b.n	8016a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016a48:	2302      	movs	r3, #2
  }
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	370c      	adds	r7, #12
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr

08016a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016a56:	b480      	push	{r7}
 8016a58:	b085      	sub	sp, #20
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	2b20      	cmp	r3, #32
 8016a6a:	d139      	bne.n	8016ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d101      	bne.n	8016a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016a76:	2302      	movs	r3, #2
 8016a78:	e033      	b.n	8016ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2224      	movs	r2, #36	; 0x24
 8016a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	f022 0201 	bic.w	r2, r2, #1
 8016a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8016aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	021b      	lsls	r3, r3, #8
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	4313      	orrs	r3, r2
 8016ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	68fa      	ldr	r2, [r7, #12]
 8016aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f042 0201 	orr.w	r2, r2, #1
 8016aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2220      	movs	r2, #32
 8016ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016adc:	2300      	movs	r3, #0
 8016ade:	e000      	b.n	8016ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016ae0:	2302      	movs	r3, #2
  }
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3714      	adds	r7, #20
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr

08016aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016af0:	b08b      	sub	sp, #44	; 0x2c
 8016af2:	af06      	add	r7, sp, #24
 8016af4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d101      	bne.n	8016b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016afc:	2301      	movs	r3, #1
 8016afe:	e0cb      	b.n	8016c98 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d106      	bne.n	8016b1a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	2200      	movs	r2, #0
 8016b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f7ea fc91 	bl	800143c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2203      	movs	r2, #3
 8016b1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f002 ff30 	bl	801998c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	73fb      	strb	r3, [r7, #15]
 8016b30:	e040      	b.n	8016bb4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016b32:	7bfb      	ldrb	r3, [r7, #15]
 8016b34:	6879      	ldr	r1, [r7, #4]
 8016b36:	1c5a      	adds	r2, r3, #1
 8016b38:	4613      	mov	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	4413      	add	r3, r2
 8016b3e:	00db      	lsls	r3, r3, #3
 8016b40:	440b      	add	r3, r1
 8016b42:	3301      	adds	r3, #1
 8016b44:	2201      	movs	r2, #1
 8016b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016b48:	7bfb      	ldrb	r3, [r7, #15]
 8016b4a:	6879      	ldr	r1, [r7, #4]
 8016b4c:	1c5a      	adds	r2, r3, #1
 8016b4e:	4613      	mov	r3, r2
 8016b50:	009b      	lsls	r3, r3, #2
 8016b52:	4413      	add	r3, r2
 8016b54:	00db      	lsls	r3, r3, #3
 8016b56:	440b      	add	r3, r1
 8016b58:	7bfa      	ldrb	r2, [r7, #15]
 8016b5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016b5c:	7bfb      	ldrb	r3, [r7, #15]
 8016b5e:	6879      	ldr	r1, [r7, #4]
 8016b60:	1c5a      	adds	r2, r3, #1
 8016b62:	4613      	mov	r3, r2
 8016b64:	009b      	lsls	r3, r3, #2
 8016b66:	4413      	add	r3, r2
 8016b68:	00db      	lsls	r3, r3, #3
 8016b6a:	440b      	add	r3, r1
 8016b6c:	3303      	adds	r3, #3
 8016b6e:	2200      	movs	r2, #0
 8016b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016b72:	7bfa      	ldrb	r2, [r7, #15]
 8016b74:	6879      	ldr	r1, [r7, #4]
 8016b76:	4613      	mov	r3, r2
 8016b78:	009b      	lsls	r3, r3, #2
 8016b7a:	4413      	add	r3, r2
 8016b7c:	00db      	lsls	r3, r3, #3
 8016b7e:	440b      	add	r3, r1
 8016b80:	3338      	adds	r3, #56	; 0x38
 8016b82:	2200      	movs	r2, #0
 8016b84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016b86:	7bfa      	ldrb	r2, [r7, #15]
 8016b88:	6879      	ldr	r1, [r7, #4]
 8016b8a:	4613      	mov	r3, r2
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	4413      	add	r3, r2
 8016b90:	00db      	lsls	r3, r3, #3
 8016b92:	440b      	add	r3, r1
 8016b94:	333c      	adds	r3, #60	; 0x3c
 8016b96:	2200      	movs	r2, #0
 8016b98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016b9a:	7bfa      	ldrb	r2, [r7, #15]
 8016b9c:	6879      	ldr	r1, [r7, #4]
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	009b      	lsls	r3, r3, #2
 8016ba2:	4413      	add	r3, r2
 8016ba4:	00db      	lsls	r3, r3, #3
 8016ba6:	440b      	add	r3, r1
 8016ba8:	3340      	adds	r3, #64	; 0x40
 8016baa:	2200      	movs	r2, #0
 8016bac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016bae:	7bfb      	ldrb	r3, [r7, #15]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	73fb      	strb	r3, [r7, #15]
 8016bb4:	7bfa      	ldrb	r2, [r7, #15]
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d3b9      	bcc.n	8016b32 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	73fb      	strb	r3, [r7, #15]
 8016bc2:	e044      	b.n	8016c4e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016bc4:	7bfa      	ldrb	r2, [r7, #15]
 8016bc6:	6879      	ldr	r1, [r7, #4]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	4413      	add	r3, r2
 8016bce:	00db      	lsls	r3, r3, #3
 8016bd0:	440b      	add	r3, r1
 8016bd2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016bda:	7bfa      	ldrb	r2, [r7, #15]
 8016bdc:	6879      	ldr	r1, [r7, #4]
 8016bde:	4613      	mov	r3, r2
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	4413      	add	r3, r2
 8016be4:	00db      	lsls	r3, r3, #3
 8016be6:	440b      	add	r3, r1
 8016be8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8016bec:	7bfa      	ldrb	r2, [r7, #15]
 8016bee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016bf0:	7bfa      	ldrb	r2, [r7, #15]
 8016bf2:	6879      	ldr	r1, [r7, #4]
 8016bf4:	4613      	mov	r3, r2
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	4413      	add	r3, r2
 8016bfa:	00db      	lsls	r3, r3, #3
 8016bfc:	440b      	add	r3, r1
 8016bfe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8016c02:	2200      	movs	r2, #0
 8016c04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016c06:	7bfa      	ldrb	r2, [r7, #15]
 8016c08:	6879      	ldr	r1, [r7, #4]
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	4413      	add	r3, r2
 8016c10:	00db      	lsls	r3, r3, #3
 8016c12:	440b      	add	r3, r1
 8016c14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016c18:	2200      	movs	r2, #0
 8016c1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016c1c:	7bfa      	ldrb	r2, [r7, #15]
 8016c1e:	6879      	ldr	r1, [r7, #4]
 8016c20:	4613      	mov	r3, r2
 8016c22:	009b      	lsls	r3, r3, #2
 8016c24:	4413      	add	r3, r2
 8016c26:	00db      	lsls	r3, r3, #3
 8016c28:	440b      	add	r3, r1
 8016c2a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016c2e:	2200      	movs	r2, #0
 8016c30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016c32:	7bfa      	ldrb	r2, [r7, #15]
 8016c34:	6879      	ldr	r1, [r7, #4]
 8016c36:	4613      	mov	r3, r2
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	4413      	add	r3, r2
 8016c3c:	00db      	lsls	r3, r3, #3
 8016c3e:	440b      	add	r3, r1
 8016c40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016c44:	2200      	movs	r2, #0
 8016c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016c48:	7bfb      	ldrb	r3, [r7, #15]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	73fb      	strb	r3, [r7, #15]
 8016c4e:	7bfa      	ldrb	r2, [r7, #15]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d3b5      	bcc.n	8016bc4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	603b      	str	r3, [r7, #0]
 8016c5e:	687e      	ldr	r6, [r7, #4]
 8016c60:	466d      	mov	r5, sp
 8016c62:	f106 0410 	add.w	r4, r6, #16
 8016c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016c6a:	6823      	ldr	r3, [r4, #0]
 8016c6c:	602b      	str	r3, [r5, #0]
 8016c6e:	1d33      	adds	r3, r6, #4
 8016c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016c72:	6838      	ldr	r0, [r7, #0]
 8016c74:	f002 fea5 	bl	80199c2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	2201      	movs	r2, #1
 8016c84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	69db      	ldr	r3, [r3, #28]
 8016c8c:	2b01      	cmp	r3, #1
 8016c8e:	d102      	bne.n	8016c96 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 f805 	bl	8016ca0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016c96:	2300      	movs	r3, #0
}
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3714      	adds	r7, #20
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ca0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016ca0:	b480      	push	{r7}
 8016ca2:	b085      	sub	sp, #20
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016cc4:	b29b      	uxth	r3, r3
 8016cc6:	f043 0301 	orr.w	r3, r3, #1
 8016cca:	b29a      	uxth	r2, r3
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016cd8:	b29b      	uxth	r3, r3
 8016cda:	f043 0302 	orr.w	r3, r3, #2
 8016cde:	b29a      	uxth	r2, r3
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8016ce6:	2300      	movs	r3, #0
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3714      	adds	r7, #20
 8016cec:	46bd      	mov	sp, r7
 8016cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf2:	4770      	bx	lr

08016cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016cf8:	4b05      	ldr	r3, [pc, #20]	; (8016d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	4a04      	ldr	r2, [pc, #16]	; (8016d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016d02:	6013      	str	r3, [r2, #0]
}
 8016d04:	bf00      	nop
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	58000400 	.word	0x58000400

08016d14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016d14:	b480      	push	{r7}
 8016d16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016d18:	4b04      	ldr	r3, [pc, #16]	; (8016d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016d20:	4618      	mov	r0, r3
 8016d22:	46bd      	mov	sp, r7
 8016d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d28:	4770      	bx	lr
 8016d2a:	bf00      	nop
 8016d2c:	58000400 	.word	0x58000400

08016d30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016d30:	b480      	push	{r7}
 8016d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016d42:	d101      	bne.n	8016d48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016d44:	2301      	movs	r3, #1
 8016d46:	e000      	b.n	8016d4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8016d48:	2300      	movs	r3, #0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr

08016d54 <LL_RCC_HSE_Enable>:
{
 8016d54:	b480      	push	{r7}
 8016d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8016d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016d66:	6013      	str	r3, [r2, #0]
}
 8016d68:	bf00      	nop
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr

08016d72 <LL_RCC_HSE_Disable>:
{
 8016d72:	b480      	push	{r7}
 8016d74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8016d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016d84:	6013      	str	r3, [r2, #0]
}
 8016d86:	bf00      	nop
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8e:	4770      	bx	lr

08016d90 <LL_RCC_HSE_IsReady>:
{
 8016d90:	b480      	push	{r7}
 8016d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016da2:	d101      	bne.n	8016da8 <LL_RCC_HSE_IsReady+0x18>
 8016da4:	2301      	movs	r3, #1
 8016da6:	e000      	b.n	8016daa <LL_RCC_HSE_IsReady+0x1a>
 8016da8:	2300      	movs	r3, #0
}
 8016daa:	4618      	mov	r0, r3
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr

08016db4 <LL_RCC_HSI_Enable>:
{
 8016db4:	b480      	push	{r7}
 8016db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016dc6:	6013      	str	r3, [r2, #0]
}
 8016dc8:	bf00      	nop
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr

08016dd2 <LL_RCC_HSI_Disable>:
{
 8016dd2:	b480      	push	{r7}
 8016dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8016dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016de4:	6013      	str	r3, [r2, #0]
}
 8016de6:	bf00      	nop
 8016de8:	46bd      	mov	sp, r7
 8016dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dee:	4770      	bx	lr

08016df0 <LL_RCC_HSI_IsReady>:
{
 8016df0:	b480      	push	{r7}
 8016df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e02:	d101      	bne.n	8016e08 <LL_RCC_HSI_IsReady+0x18>
 8016e04:	2301      	movs	r3, #1
 8016e06:	e000      	b.n	8016e0a <LL_RCC_HSI_IsReady+0x1a>
 8016e08:	2300      	movs	r3, #0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e12:	4770      	bx	lr

08016e14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	061b      	lsls	r3, r3, #24
 8016e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	604b      	str	r3, [r1, #4]
}
 8016e32:	bf00      	nop
 8016e34:	370c      	adds	r7, #12
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr

08016e3e <LL_RCC_HSI48_Enable>:
{
 8016e3e:	b480      	push	{r7}
 8016e40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e4e:	f043 0301 	orr.w	r3, r3, #1
 8016e52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016e56:	bf00      	nop
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <LL_RCC_HSI48_Disable>:
{
 8016e60:	b480      	push	{r7}
 8016e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016e70:	f023 0301 	bic.w	r3, r3, #1
 8016e74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016e78:	bf00      	nop
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr

08016e82 <LL_RCC_HSI48_IsReady>:
{
 8016e82:	b480      	push	{r7}
 8016e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016e8e:	f003 0302 	and.w	r3, r3, #2
 8016e92:	2b02      	cmp	r3, #2
 8016e94:	d101      	bne.n	8016e9a <LL_RCC_HSI48_IsReady+0x18>
 8016e96:	2301      	movs	r3, #1
 8016e98:	e000      	b.n	8016e9c <LL_RCC_HSI48_IsReady+0x1a>
 8016e9a:	2300      	movs	r3, #0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr

08016ea6 <LL_RCC_LSE_Enable>:
{
 8016ea6:	b480      	push	{r7}
 8016ea8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016eb6:	f043 0301 	orr.w	r3, r3, #1
 8016eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016ebe:	bf00      	nop
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <LL_RCC_LSE_Disable>:
{
 8016ec8:	b480      	push	{r7}
 8016eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ed8:	f023 0301 	bic.w	r3, r3, #1
 8016edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016ee0:	bf00      	nop
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee8:	4770      	bx	lr

08016eea <LL_RCC_LSE_EnableBypass>:
{
 8016eea:	b480      	push	{r7}
 8016eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016efa:	f043 0304 	orr.w	r3, r3, #4
 8016efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016f02:	bf00      	nop
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr

08016f0c <LL_RCC_LSE_DisableBypass>:
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f1c:	f023 0304 	bic.w	r3, r3, #4
 8016f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016f24:	bf00      	nop
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr

08016f2e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016f2e:	b480      	push	{r7}
 8016f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f3a:	f003 0302 	and.w	r3, r3, #2
 8016f3e:	2b02      	cmp	r3, #2
 8016f40:	d101      	bne.n	8016f46 <LL_RCC_LSE_IsReady+0x18>
 8016f42:	2301      	movs	r3, #1
 8016f44:	e000      	b.n	8016f48 <LL_RCC_LSE_IsReady+0x1a>
 8016f46:	2300      	movs	r3, #0
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f50:	4770      	bx	lr

08016f52 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016f52:	b480      	push	{r7}
 8016f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f62:	f043 0301 	orr.w	r3, r3, #1
 8016f66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016f6a:	bf00      	nop
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016f74:	b480      	push	{r7}
 8016f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f84:	f023 0301 	bic.w	r3, r3, #1
 8016f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016f8c:	bf00      	nop
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f94:	4770      	bx	lr

08016f96 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016f96:	b480      	push	{r7}
 8016f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016fa2:	f003 0302 	and.w	r3, r3, #2
 8016fa6:	2b02      	cmp	r3, #2
 8016fa8:	d101      	bne.n	8016fae <LL_RCC_LSI1_IsReady+0x18>
 8016faa:	2301      	movs	r3, #1
 8016fac:	e000      	b.n	8016fb0 <LL_RCC_LSI1_IsReady+0x1a>
 8016fae:	2300      	movs	r3, #0
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016fba:	b480      	push	{r7}
 8016fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016fca:	f043 0304 	orr.w	r3, r3, #4
 8016fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016fd2:	bf00      	nop
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016fdc:	b480      	push	{r7}
 8016fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016fec:	f023 0304 	bic.w	r3, r3, #4
 8016ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016ff4:	bf00      	nop
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr

08016ffe <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016ffe:	b480      	push	{r7}
 8017000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8017002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801700a:	f003 0308 	and.w	r3, r3, #8
 801700e:	2b08      	cmp	r3, #8
 8017010:	d101      	bne.n	8017016 <LL_RCC_LSI2_IsReady+0x18>
 8017012:	2301      	movs	r3, #1
 8017014:	e000      	b.n	8017018 <LL_RCC_LSI2_IsReady+0x1a>
 8017016:	2300      	movs	r3, #0
}
 8017018:	4618      	mov	r0, r3
 801701a:	46bd      	mov	sp, r7
 801701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017020:	4770      	bx	lr

08017022 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8017022:	b480      	push	{r7}
 8017024:	b083      	sub	sp, #12
 8017026:	af00      	add	r7, sp, #0
 8017028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 801702a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801702e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017032:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	021b      	lsls	r3, r3, #8
 801703a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801703e:	4313      	orrs	r3, r2
 8017040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017044:	bf00      	nop
 8017046:	370c      	adds	r7, #12
 8017048:	46bd      	mov	sp, r7
 801704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801704e:	4770      	bx	lr

08017050 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8017050:	b480      	push	{r7}
 8017052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8017054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801705e:	f043 0301 	orr.w	r3, r3, #1
 8017062:	6013      	str	r3, [r2, #0]
}
 8017064:	bf00      	nop
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 801706e:	b480      	push	{r7}
 8017070:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8017072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801707c:	f023 0301 	bic.w	r3, r3, #1
 8017080:	6013      	str	r3, [r2, #0]
}
 8017082:	bf00      	nop
 8017084:	46bd      	mov	sp, r7
 8017086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708a:	4770      	bx	lr

0801708c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 801708c:	b480      	push	{r7}
 801708e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8017090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	f003 0302 	and.w	r3, r3, #2
 801709a:	2b02      	cmp	r3, #2
 801709c:	d101      	bne.n	80170a2 <LL_RCC_MSI_IsReady+0x16>
 801709e:	2301      	movs	r3, #1
 80170a0:	e000      	b.n	80170a4 <LL_RCC_MSI_IsReady+0x18>
 80170a2:	2300      	movs	r3, #0
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr

080170ae <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80170ae:	b480      	push	{r7}
 80170b0:	b083      	sub	sp, #12
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80170b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80170c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	4313      	orrs	r3, r2
 80170c8:	600b      	str	r3, [r1, #0]
}
 80170ca:	bf00      	nop
 80170cc:	370c      	adds	r7, #12
 80170ce:	46bd      	mov	sp, r7
 80170d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d4:	4770      	bx	lr

080170d6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80170d6:	b480      	push	{r7}
 80170d8:	b083      	sub	sp, #12
 80170da:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80170dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170e6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2bb0      	cmp	r3, #176	; 0xb0
 80170ec:	d901      	bls.n	80170f2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80170ee:	23b0      	movs	r3, #176	; 0xb0
 80170f0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80170f2:	687b      	ldr	r3, [r7, #4]
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	370c      	adds	r7, #12
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8017100:	b480      	push	{r7}
 8017102:	b083      	sub	sp, #12
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8017108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	021b      	lsls	r3, r3, #8
 8017116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801711a:	4313      	orrs	r3, r2
 801711c:	604b      	str	r3, [r1, #4]
}
 801711e:	bf00      	nop
 8017120:	370c      	adds	r7, #12
 8017122:	46bd      	mov	sp, r7
 8017124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017128:	4770      	bx	lr

0801712a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 801712a:	b480      	push	{r7}
 801712c:	b083      	sub	sp, #12
 801712e:	af00      	add	r7, sp, #0
 8017130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8017132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017136:	689b      	ldr	r3, [r3, #8]
 8017138:	f023 0203 	bic.w	r2, r3, #3
 801713c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4313      	orrs	r3, r2
 8017144:	608b      	str	r3, [r1, #8]
}
 8017146:	bf00      	nop
 8017148:	370c      	adds	r7, #12
 801714a:	46bd      	mov	sp, r7
 801714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017150:	4770      	bx	lr

08017152 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8017152:	b480      	push	{r7}
 8017154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8017156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801715a:	689b      	ldr	r3, [r3, #8]
 801715c:	f003 030c 	and.w	r3, r3, #12
}
 8017160:	4618      	mov	r0, r3
 8017162:	46bd      	mov	sp, r7
 8017164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017168:	4770      	bx	lr

0801716a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 801716a:	b480      	push	{r7}
 801716c:	b083      	sub	sp, #12
 801716e:	af00      	add	r7, sp, #0
 8017170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8017172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017176:	689b      	ldr	r3, [r3, #8]
 8017178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801717c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	4313      	orrs	r3, r2
 8017184:	608b      	str	r3, [r1, #8]
}
 8017186:	bf00      	nop
 8017188:	370c      	adds	r7, #12
 801718a:	46bd      	mov	sp, r7
 801718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017190:	4770      	bx	lr

08017192 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8017192:	b480      	push	{r7}
 8017194:	b083      	sub	sp, #12
 8017196:	af00      	add	r7, sp, #0
 8017198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 801719a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801719e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80171a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80171a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4313      	orrs	r3, r2
 80171ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80171b2:	bf00      	nop
 80171b4:	370c      	adds	r7, #12
 80171b6:	46bd      	mov	sp, r7
 80171b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171bc:	4770      	bx	lr

080171be <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80171be:	b480      	push	{r7}
 80171c0:	b083      	sub	sp, #12
 80171c2:	af00      	add	r7, sp, #0
 80171c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80171c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80171ce:	f023 020f 	bic.w	r2, r3, #15
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	091b      	lsrs	r3, r3, #4
 80171d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80171da:	4313      	orrs	r3, r2
 80171dc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80171e0:	bf00      	nop
 80171e2:	370c      	adds	r7, #12
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80171ec:	b480      	push	{r7}
 80171ee:	b083      	sub	sp, #12
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80171f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80171f8:	689b      	ldr	r3, [r3, #8]
 80171fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80171fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	4313      	orrs	r3, r2
 8017206:	608b      	str	r3, [r1, #8]
}
 8017208:	bf00      	nop
 801720a:	370c      	adds	r7, #12
 801720c:	46bd      	mov	sp, r7
 801720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017212:	4770      	bx	lr

08017214 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8017214:	b480      	push	{r7}
 8017216:	b083      	sub	sp, #12
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 801721c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017220:	689b      	ldr	r3, [r3, #8]
 8017222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8017226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4313      	orrs	r3, r2
 801722e:	608b      	str	r3, [r1, #8]
}
 8017230:	bf00      	nop
 8017232:	370c      	adds	r7, #12
 8017234:	46bd      	mov	sp, r7
 8017236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723a:	4770      	bx	lr

0801723c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801723c:	b480      	push	{r7}
 801723e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8017240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017244:	689b      	ldr	r3, [r3, #8]
 8017246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 801724a:	4618      	mov	r0, r3
 801724c:	46bd      	mov	sp, r7
 801724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017252:	4770      	bx	lr

08017254 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8017254:	b480      	push	{r7}
 8017256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8017258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801725c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8017264:	4618      	mov	r0, r3
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr

0801726e <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 801726e:	b480      	push	{r7}
 8017270:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8017272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017276:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 801727a:	011b      	lsls	r3, r3, #4
 801727c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8017280:	4618      	mov	r0, r3
 8017282:	46bd      	mov	sp, r7
 8017284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017288:	4770      	bx	lr

0801728a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 801728a:	b480      	push	{r7}
 801728c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801728e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017292:	689b      	ldr	r3, [r3, #8]
 8017294:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8017298:	4618      	mov	r0, r3
 801729a:	46bd      	mov	sp, r7
 801729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a0:	4770      	bx	lr

080172a2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80172a2:	b480      	push	{r7}
 80172a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80172a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80172aa:	689b      	ldr	r3, [r3, #8]
 80172ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr

080172ba <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80172ba:	b480      	push	{r7}
 80172bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80172be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80172c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80172cc:	6013      	str	r3, [r2, #0]
}
 80172ce:	bf00      	nop
 80172d0:	46bd      	mov	sp, r7
 80172d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d6:	4770      	bx	lr

080172d8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80172d8:	b480      	push	{r7}
 80172da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80172dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80172e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80172ea:	6013      	str	r3, [r2, #0]
}
 80172ec:	bf00      	nop
 80172ee:	46bd      	mov	sp, r7
 80172f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f4:	4770      	bx	lr

080172f6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80172f6:	b480      	push	{r7}
 80172f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80172fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017308:	d101      	bne.n	801730e <LL_RCC_PLL_IsReady+0x18>
 801730a:	2301      	movs	r3, #1
 801730c:	e000      	b.n	8017310 <LL_RCC_PLL_IsReady+0x1a>
 801730e:	2300      	movs	r3, #0
}
 8017310:	4618      	mov	r0, r3
 8017312:	46bd      	mov	sp, r7
 8017314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017318:	4770      	bx	lr

0801731a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801731a:	b480      	push	{r7}
 801731c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 801731e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017322:	68db      	ldr	r3, [r3, #12]
 8017324:	0a1b      	lsrs	r3, r3, #8
 8017326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 801732a:	4618      	mov	r0, r3
 801732c:	46bd      	mov	sp, r7
 801732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017332:	4770      	bx	lr

08017334 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8017334:	b480      	push	{r7}
 8017336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8017338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801733c:	68db      	ldr	r3, [r3, #12]
 801733e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8017342:	4618      	mov	r0, r3
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr

0801734c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801734c:	b480      	push	{r7}
 801734e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8017350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 801735a:	4618      	mov	r0, r3
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr

08017364 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8017364:	b480      	push	{r7}
 8017366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8017368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801736c:	68db      	ldr	r3, [r3, #12]
 801736e:	f003 0303 	and.w	r3, r3, #3
}
 8017372:	4618      	mov	r0, r3
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr

0801737c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 801737c:	b480      	push	{r7}
 801737e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8017380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017384:	689b      	ldr	r3, [r3, #8]
 8017386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801738a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801738e:	d101      	bne.n	8017394 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8017390:	2301      	movs	r3, #1
 8017392:	e000      	b.n	8017396 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8017394:	2300      	movs	r3, #0
}
 8017396:	4618      	mov	r0, r3
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr

080173a0 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80173a0:	b480      	push	{r7}
 80173a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80173a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80173ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80173b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80173b4:	d101      	bne.n	80173ba <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80173b6:	2301      	movs	r3, #1
 80173b8:	e000      	b.n	80173bc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80173ba:	2300      	movs	r3, #0
}
 80173bc:	4618      	mov	r0, r3
 80173be:	46bd      	mov	sp, r7
 80173c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c4:	4770      	bx	lr

080173c6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80173c6:	b480      	push	{r7}
 80173c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80173ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80173d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80173d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173da:	d101      	bne.n	80173e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80173dc:	2301      	movs	r3, #1
 80173de:	e000      	b.n	80173e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80173e0:	2300      	movs	r3, #0
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr

080173ec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80173ec:	b480      	push	{r7}
 80173ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80173f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173f4:	689b      	ldr	r3, [r3, #8]
 80173f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80173fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80173fe:	d101      	bne.n	8017404 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8017400:	2301      	movs	r3, #1
 8017402:	e000      	b.n	8017406 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8017404:	2300      	movs	r3, #0
}
 8017406:	4618      	mov	r0, r3
 8017408:	46bd      	mov	sp, r7
 801740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740e:	4770      	bx	lr

08017410 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8017410:	b480      	push	{r7}
 8017412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8017414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017418:	689b      	ldr	r3, [r3, #8]
 801741a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801741e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017422:	d101      	bne.n	8017428 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8017424:	2301      	movs	r3, #1
 8017426:	e000      	b.n	801742a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8017428:	2300      	movs	r3, #0
}
 801742a:	4618      	mov	r0, r3
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017434:	b590      	push	{r4, r7, lr}
 8017436:	b08d      	sub	sp, #52	; 0x34
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d101      	bne.n	8017446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8017442:	2301      	movs	r3, #1
 8017444:	e363      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f003 0320 	and.w	r3, r3, #32
 801744e:	2b00      	cmp	r3, #0
 8017450:	f000 808d 	beq.w	801756e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017454:	f7ff fe7d 	bl	8017152 <LL_RCC_GetSysClkSource>
 8017458:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801745a:	f7ff ff83 	bl	8017364 <LL_RCC_PLL_GetMainSource>
 801745e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8017460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017462:	2b00      	cmp	r3, #0
 8017464:	d005      	beq.n	8017472 <HAL_RCC_OscConfig+0x3e>
 8017466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017468:	2b0c      	cmp	r3, #12
 801746a:	d147      	bne.n	80174fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 801746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801746e:	2b01      	cmp	r3, #1
 8017470:	d144      	bne.n	80174fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	69db      	ldr	r3, [r3, #28]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d101      	bne.n	801747e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 801747a:	2301      	movs	r3, #1
 801747c:	e347      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017482:	f7ff fe28 	bl	80170d6 <LL_RCC_MSI_GetRange>
 8017486:	4603      	mov	r3, r0
 8017488:	429c      	cmp	r4, r3
 801748a:	d914      	bls.n	80174b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017490:	4618      	mov	r0, r3
 8017492:	f000 fd61 	bl	8017f58 <RCC_SetFlashLatencyFromMSIRange>
 8017496:	4603      	mov	r3, r0
 8017498:	2b00      	cmp	r3, #0
 801749a:	d001      	beq.n	80174a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 801749c:	2301      	movs	r3, #1
 801749e:	e336      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7ff fe02 	bl	80170ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	6a1b      	ldr	r3, [r3, #32]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7ff fe26 	bl	8017100 <LL_RCC_MSI_SetCalibTrimming>
 80174b4:	e013      	b.n	80174de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	4618      	mov	r0, r3
 80174bc:	f7ff fdf7 	bl	80170ae <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	6a1b      	ldr	r3, [r3, #32]
 80174c4:	4618      	mov	r0, r3
 80174c6:	f7ff fe1b 	bl	8017100 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ce:	4618      	mov	r0, r3
 80174d0:	f000 fd42 	bl	8017f58 <RCC_SetFlashLatencyFromMSIRange>
 80174d4:	4603      	mov	r3, r0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d001      	beq.n	80174de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80174da:	2301      	movs	r3, #1
 80174dc:	e317      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80174de:	f000 fcc9 	bl	8017e74 <HAL_RCC_GetHCLKFreq>
 80174e2:	4603      	mov	r3, r0
 80174e4:	4aa4      	ldr	r2, [pc, #656]	; (8017778 <HAL_RCC_OscConfig+0x344>)
 80174e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80174e8:	4ba4      	ldr	r3, [pc, #656]	; (801777c <HAL_RCC_OscConfig+0x348>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7e9 fb6f 	bl	8000bd0 <HAL_InitTick>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d039      	beq.n	801756c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80174f8:	2301      	movs	r3, #1
 80174fa:	e308      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	69db      	ldr	r3, [r3, #28]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d01e      	beq.n	8017542 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017504:	f7ff fda4 	bl	8017050 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017508:	f7fe f90c 	bl	8015724 <HAL_GetTick>
 801750c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 801750e:	e008      	b.n	8017522 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017510:	f7fe f908 	bl	8015724 <HAL_GetTick>
 8017514:	4602      	mov	r2, r0
 8017516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017518:	1ad3      	subs	r3, r2, r3
 801751a:	2b02      	cmp	r3, #2
 801751c:	d901      	bls.n	8017522 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 801751e:	2303      	movs	r3, #3
 8017520:	e2f5      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8017522:	f7ff fdb3 	bl	801708c <LL_RCC_MSI_IsReady>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	d0f1      	beq.n	8017510 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017530:	4618      	mov	r0, r3
 8017532:	f7ff fdbc 	bl	80170ae <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6a1b      	ldr	r3, [r3, #32]
 801753a:	4618      	mov	r0, r3
 801753c:	f7ff fde0 	bl	8017100 <LL_RCC_MSI_SetCalibTrimming>
 8017540:	e015      	b.n	801756e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017542:	f7ff fd94 	bl	801706e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017546:	f7fe f8ed 	bl	8015724 <HAL_GetTick>
 801754a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 801754c:	e008      	b.n	8017560 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801754e:	f7fe f8e9 	bl	8015724 <HAL_GetTick>
 8017552:	4602      	mov	r2, r0
 8017554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017556:	1ad3      	subs	r3, r2, r3
 8017558:	2b02      	cmp	r3, #2
 801755a:	d901      	bls.n	8017560 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 801755c:	2303      	movs	r3, #3
 801755e:	e2d6      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8017560:	f7ff fd94 	bl	801708c <LL_RCC_MSI_IsReady>
 8017564:	4603      	mov	r3, r0
 8017566:	2b00      	cmp	r3, #0
 8017568:	d1f1      	bne.n	801754e <HAL_RCC_OscConfig+0x11a>
 801756a:	e000      	b.n	801756e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801756c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f003 0301 	and.w	r3, r3, #1
 8017576:	2b00      	cmp	r3, #0
 8017578:	d047      	beq.n	801760a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801757a:	f7ff fdea 	bl	8017152 <LL_RCC_GetSysClkSource>
 801757e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017580:	f7ff fef0 	bl	8017364 <LL_RCC_PLL_GetMainSource>
 8017584:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8017586:	6a3b      	ldr	r3, [r7, #32]
 8017588:	2b08      	cmp	r3, #8
 801758a:	d005      	beq.n	8017598 <HAL_RCC_OscConfig+0x164>
 801758c:	6a3b      	ldr	r3, [r7, #32]
 801758e:	2b0c      	cmp	r3, #12
 8017590:	d108      	bne.n	80175a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8017592:	69fb      	ldr	r3, [r7, #28]
 8017594:	2b03      	cmp	r3, #3
 8017596:	d105      	bne.n	80175a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d134      	bne.n	801760a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80175a0:	2301      	movs	r3, #1
 80175a2:	e2b4      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80175ac:	d102      	bne.n	80175b4 <HAL_RCC_OscConfig+0x180>
 80175ae:	f7ff fbd1 	bl	8016d54 <LL_RCC_HSE_Enable>
 80175b2:	e001      	b.n	80175b8 <HAL_RCC_OscConfig+0x184>
 80175b4:	f7ff fbdd 	bl	8016d72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	685b      	ldr	r3, [r3, #4]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d012      	beq.n	80175e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175c0:	f7fe f8b0 	bl	8015724 <HAL_GetTick>
 80175c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80175c6:	e008      	b.n	80175da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80175c8:	f7fe f8ac 	bl	8015724 <HAL_GetTick>
 80175cc:	4602      	mov	r2, r0
 80175ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	2b64      	cmp	r3, #100	; 0x64
 80175d4:	d901      	bls.n	80175da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80175d6:	2303      	movs	r3, #3
 80175d8:	e299      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80175da:	f7ff fbd9 	bl	8016d90 <LL_RCC_HSE_IsReady>
 80175de:	4603      	mov	r3, r0
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d0f1      	beq.n	80175c8 <HAL_RCC_OscConfig+0x194>
 80175e4:	e011      	b.n	801760a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80175e6:	f7fe f89d 	bl	8015724 <HAL_GetTick>
 80175ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80175ec:	e008      	b.n	8017600 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80175ee:	f7fe f899 	bl	8015724 <HAL_GetTick>
 80175f2:	4602      	mov	r2, r0
 80175f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f6:	1ad3      	subs	r3, r2, r3
 80175f8:	2b64      	cmp	r3, #100	; 0x64
 80175fa:	d901      	bls.n	8017600 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80175fc:	2303      	movs	r3, #3
 80175fe:	e286      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017600:	f7ff fbc6 	bl	8016d90 <LL_RCC_HSE_IsReady>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d1f1      	bne.n	80175ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f003 0302 	and.w	r3, r3, #2
 8017612:	2b00      	cmp	r3, #0
 8017614:	d04c      	beq.n	80176b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017616:	f7ff fd9c 	bl	8017152 <LL_RCC_GetSysClkSource>
 801761a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 801761c:	f7ff fea2 	bl	8017364 <LL_RCC_PLL_GetMainSource>
 8017620:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017622:	69bb      	ldr	r3, [r7, #24]
 8017624:	2b04      	cmp	r3, #4
 8017626:	d005      	beq.n	8017634 <HAL_RCC_OscConfig+0x200>
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	2b0c      	cmp	r3, #12
 801762c:	d10e      	bne.n	801764c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	2b02      	cmp	r3, #2
 8017632:	d10b      	bne.n	801764c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	68db      	ldr	r3, [r3, #12]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d101      	bne.n	8017640 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 801763c:	2301      	movs	r3, #1
 801763e:	e266      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	691b      	ldr	r3, [r3, #16]
 8017644:	4618      	mov	r0, r3
 8017646:	f7ff fbe5 	bl	8016e14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801764a:	e031      	b.n	80176b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	68db      	ldr	r3, [r3, #12]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d019      	beq.n	8017688 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017654:	f7ff fbae 	bl	8016db4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017658:	f7fe f864 	bl	8015724 <HAL_GetTick>
 801765c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801765e:	e008      	b.n	8017672 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017660:	f7fe f860 	bl	8015724 <HAL_GetTick>
 8017664:	4602      	mov	r2, r0
 8017666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017668:	1ad3      	subs	r3, r2, r3
 801766a:	2b02      	cmp	r3, #2
 801766c:	d901      	bls.n	8017672 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801766e:	2303      	movs	r3, #3
 8017670:	e24d      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8017672:	f7ff fbbd 	bl	8016df0 <LL_RCC_HSI_IsReady>
 8017676:	4603      	mov	r3, r0
 8017678:	2b00      	cmp	r3, #0
 801767a:	d0f1      	beq.n	8017660 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	691b      	ldr	r3, [r3, #16]
 8017680:	4618      	mov	r0, r3
 8017682:	f7ff fbc7 	bl	8016e14 <LL_RCC_HSI_SetCalibTrimming>
 8017686:	e013      	b.n	80176b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017688:	f7ff fba3 	bl	8016dd2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801768c:	f7fe f84a 	bl	8015724 <HAL_GetTick>
 8017690:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8017692:	e008      	b.n	80176a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017694:	f7fe f846 	bl	8015724 <HAL_GetTick>
 8017698:	4602      	mov	r2, r0
 801769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801769c:	1ad3      	subs	r3, r2, r3
 801769e:	2b02      	cmp	r3, #2
 80176a0:	d901      	bls.n	80176a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80176a2:	2303      	movs	r3, #3
 80176a4:	e233      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80176a6:	f7ff fba3 	bl	8016df0 <LL_RCC_HSI_IsReady>
 80176aa:	4603      	mov	r3, r0
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d1f1      	bne.n	8017694 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	f003 0308 	and.w	r3, r3, #8
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d106      	bne.n	80176ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 80a3 	beq.w	8017810 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	695b      	ldr	r3, [r3, #20]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d076      	beq.n	80177c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	f003 0310 	and.w	r3, r3, #16
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d046      	beq.n	801776c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80176de:	f7ff fc5a 	bl	8016f96 <LL_RCC_LSI1_IsReady>
 80176e2:	4603      	mov	r3, r0
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d113      	bne.n	8017710 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80176e8:	f7ff fc33 	bl	8016f52 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80176ec:	f7fe f81a 	bl	8015724 <HAL_GetTick>
 80176f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80176f2:	e008      	b.n	8017706 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80176f4:	f7fe f816 	bl	8015724 <HAL_GetTick>
 80176f8:	4602      	mov	r2, r0
 80176fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176fc:	1ad3      	subs	r3, r2, r3
 80176fe:	2b02      	cmp	r3, #2
 8017700:	d901      	bls.n	8017706 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8017702:	2303      	movs	r3, #3
 8017704:	e203      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8017706:	f7ff fc46 	bl	8016f96 <LL_RCC_LSI1_IsReady>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d0f1      	beq.n	80176f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017710:	f7ff fc53 	bl	8016fba <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017714:	f7fe f806 	bl	8015724 <HAL_GetTick>
 8017718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801771a:	e008      	b.n	801772e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801771c:	f7fe f802 	bl	8015724 <HAL_GetTick>
 8017720:	4602      	mov	r2, r0
 8017722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017724:	1ad3      	subs	r3, r2, r3
 8017726:	2b03      	cmp	r3, #3
 8017728:	d901      	bls.n	801772e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801772a:	2303      	movs	r3, #3
 801772c:	e1ef      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801772e:	f7ff fc66 	bl	8016ffe <LL_RCC_LSI2_IsReady>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d0f1      	beq.n	801771c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	699b      	ldr	r3, [r3, #24]
 801773c:	4618      	mov	r0, r3
 801773e:	f7ff fc70 	bl	8017022 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8017742:	f7ff fc17 	bl	8016f74 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017746:	f7fd ffed 	bl	8015724 <HAL_GetTick>
 801774a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 801774c:	e008      	b.n	8017760 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801774e:	f7fd ffe9 	bl	8015724 <HAL_GetTick>
 8017752:	4602      	mov	r2, r0
 8017754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017756:	1ad3      	subs	r3, r2, r3
 8017758:	2b02      	cmp	r3, #2
 801775a:	d901      	bls.n	8017760 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 801775c:	2303      	movs	r3, #3
 801775e:	e1d6      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017760:	f7ff fc19 	bl	8016f96 <LL_RCC_LSI1_IsReady>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d1f1      	bne.n	801774e <HAL_RCC_OscConfig+0x31a>
 801776a:	e051      	b.n	8017810 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 801776c:	f7ff fbf1 	bl	8016f52 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017770:	f7fd ffd8 	bl	8015724 <HAL_GetTick>
 8017774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017776:	e00c      	b.n	8017792 <HAL_RCC_OscConfig+0x35e>
 8017778:	20000008 	.word	0x20000008
 801777c:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017780:	f7fd ffd0 	bl	8015724 <HAL_GetTick>
 8017784:	4602      	mov	r2, r0
 8017786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017788:	1ad3      	subs	r3, r2, r3
 801778a:	2b02      	cmp	r3, #2
 801778c:	d901      	bls.n	8017792 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801778e:	2303      	movs	r3, #3
 8017790:	e1bd      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017792:	f7ff fc00 	bl	8016f96 <LL_RCC_LSI1_IsReady>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d0f1      	beq.n	8017780 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 801779c:	f7ff fc1e 	bl	8016fdc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80177a0:	e008      	b.n	80177b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80177a2:	f7fd ffbf 	bl	8015724 <HAL_GetTick>
 80177a6:	4602      	mov	r2, r0
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	1ad3      	subs	r3, r2, r3
 80177ac:	2b03      	cmp	r3, #3
 80177ae:	d901      	bls.n	80177b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80177b0:	2303      	movs	r3, #3
 80177b2:	e1ac      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80177b4:	f7ff fc23 	bl	8016ffe <LL_RCC_LSI2_IsReady>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d1f1      	bne.n	80177a2 <HAL_RCC_OscConfig+0x36e>
 80177be:	e027      	b.n	8017810 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80177c0:	f7ff fc0c 	bl	8016fdc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80177c4:	f7fd ffae 	bl	8015724 <HAL_GetTick>
 80177c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80177ca:	e008      	b.n	80177de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80177cc:	f7fd ffaa 	bl	8015724 <HAL_GetTick>
 80177d0:	4602      	mov	r2, r0
 80177d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d4:	1ad3      	subs	r3, r2, r3
 80177d6:	2b03      	cmp	r3, #3
 80177d8:	d901      	bls.n	80177de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80177da:	2303      	movs	r3, #3
 80177dc:	e197      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80177de:	f7ff fc0e 	bl	8016ffe <LL_RCC_LSI2_IsReady>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d1f1      	bne.n	80177cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80177e8:	f7ff fbc4 	bl	8016f74 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80177ec:	f7fd ff9a 	bl	8015724 <HAL_GetTick>
 80177f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80177f2:	e008      	b.n	8017806 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80177f4:	f7fd ff96 	bl	8015724 <HAL_GetTick>
 80177f8:	4602      	mov	r2, r0
 80177fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fc:	1ad3      	subs	r3, r2, r3
 80177fe:	2b02      	cmp	r3, #2
 8017800:	d901      	bls.n	8017806 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8017802:	2303      	movs	r3, #3
 8017804:	e183      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8017806:	f7ff fbc6 	bl	8016f96 <LL_RCC_LSI1_IsReady>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d1f1      	bne.n	80177f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	f003 0304 	and.w	r3, r3, #4
 8017818:	2b00      	cmp	r3, #0
 801781a:	d05b      	beq.n	80178d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801781c:	4ba7      	ldr	r3, [pc, #668]	; (8017abc <HAL_RCC_OscConfig+0x688>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017824:	2b00      	cmp	r3, #0
 8017826:	d114      	bne.n	8017852 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017828:	f7ff fa64 	bl	8016cf4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801782c:	f7fd ff7a 	bl	8015724 <HAL_GetTick>
 8017830:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017832:	e008      	b.n	8017846 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017834:	f7fd ff76 	bl	8015724 <HAL_GetTick>
 8017838:	4602      	mov	r2, r0
 801783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783c:	1ad3      	subs	r3, r2, r3
 801783e:	2b02      	cmp	r3, #2
 8017840:	d901      	bls.n	8017846 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8017842:	2303      	movs	r3, #3
 8017844:	e163      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017846:	4b9d      	ldr	r3, [pc, #628]	; (8017abc <HAL_RCC_OscConfig+0x688>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801784e:	2b00      	cmp	r3, #0
 8017850:	d0f0      	beq.n	8017834 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	689b      	ldr	r3, [r3, #8]
 8017856:	2b01      	cmp	r3, #1
 8017858:	d102      	bne.n	8017860 <HAL_RCC_OscConfig+0x42c>
 801785a:	f7ff fb24 	bl	8016ea6 <LL_RCC_LSE_Enable>
 801785e:	e00c      	b.n	801787a <HAL_RCC_OscConfig+0x446>
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	2b05      	cmp	r3, #5
 8017866:	d104      	bne.n	8017872 <HAL_RCC_OscConfig+0x43e>
 8017868:	f7ff fb3f 	bl	8016eea <LL_RCC_LSE_EnableBypass>
 801786c:	f7ff fb1b 	bl	8016ea6 <LL_RCC_LSE_Enable>
 8017870:	e003      	b.n	801787a <HAL_RCC_OscConfig+0x446>
 8017872:	f7ff fb29 	bl	8016ec8 <LL_RCC_LSE_Disable>
 8017876:	f7ff fb49 	bl	8016f0c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	689b      	ldr	r3, [r3, #8]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d014      	beq.n	80178ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017882:	f7fd ff4f 	bl	8015724 <HAL_GetTick>
 8017886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8017888:	e00a      	b.n	80178a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801788a:	f7fd ff4b 	bl	8015724 <HAL_GetTick>
 801788e:	4602      	mov	r2, r0
 8017890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017892:	1ad3      	subs	r3, r2, r3
 8017894:	f241 3288 	movw	r2, #5000	; 0x1388
 8017898:	4293      	cmp	r3, r2
 801789a:	d901      	bls.n	80178a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 801789c:	2303      	movs	r3, #3
 801789e:	e136      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80178a0:	f7ff fb45 	bl	8016f2e <LL_RCC_LSE_IsReady>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d0ef      	beq.n	801788a <HAL_RCC_OscConfig+0x456>
 80178aa:	e013      	b.n	80178d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80178ac:	f7fd ff3a 	bl	8015724 <HAL_GetTick>
 80178b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80178b2:	e00a      	b.n	80178ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80178b4:	f7fd ff36 	bl	8015724 <HAL_GetTick>
 80178b8:	4602      	mov	r2, r0
 80178ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178bc:	1ad3      	subs	r3, r2, r3
 80178be:	f241 3288 	movw	r2, #5000	; 0x1388
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d901      	bls.n	80178ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80178c6:	2303      	movs	r3, #3
 80178c8:	e121      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80178ca:	f7ff fb30 	bl	8016f2e <LL_RCC_LSE_IsReady>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d1ef      	bne.n	80178b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d02c      	beq.n	801793a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d014      	beq.n	8017912 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80178e8:	f7ff faa9 	bl	8016e3e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80178ec:	f7fd ff1a 	bl	8015724 <HAL_GetTick>
 80178f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80178f2:	e008      	b.n	8017906 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80178f4:	f7fd ff16 	bl	8015724 <HAL_GetTick>
 80178f8:	4602      	mov	r2, r0
 80178fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fc:	1ad3      	subs	r3, r2, r3
 80178fe:	2b02      	cmp	r3, #2
 8017900:	d901      	bls.n	8017906 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8017902:	2303      	movs	r3, #3
 8017904:	e103      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8017906:	f7ff fabc 	bl	8016e82 <LL_RCC_HSI48_IsReady>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d0f1      	beq.n	80178f4 <HAL_RCC_OscConfig+0x4c0>
 8017910:	e013      	b.n	801793a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017912:	f7ff faa5 	bl	8016e60 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017916:	f7fd ff05 	bl	8015724 <HAL_GetTick>
 801791a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 801791c:	e008      	b.n	8017930 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801791e:	f7fd ff01 	bl	8015724 <HAL_GetTick>
 8017922:	4602      	mov	r2, r0
 8017924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017926:	1ad3      	subs	r3, r2, r3
 8017928:	2b02      	cmp	r3, #2
 801792a:	d901      	bls.n	8017930 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 801792c:	2303      	movs	r3, #3
 801792e:	e0ee      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017930:	f7ff faa7 	bl	8016e82 <LL_RCC_HSI48_IsReady>
 8017934:	4603      	mov	r3, r0
 8017936:	2b00      	cmp	r3, #0
 8017938:	d1f1      	bne.n	801791e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801793e:	2b00      	cmp	r3, #0
 8017940:	f000 80e4 	beq.w	8017b0c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017944:	f7ff fc05 	bl	8017152 <LL_RCC_GetSysClkSource>
 8017948:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 801794a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801794e:	68db      	ldr	r3, [r3, #12]
 8017950:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017956:	2b02      	cmp	r3, #2
 8017958:	f040 80b4 	bne.w	8017ac4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f003 0203 	and.w	r2, r3, #3
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017966:	429a      	cmp	r2, r3
 8017968:	d123      	bne.n	80179b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017974:	429a      	cmp	r2, r3
 8017976:	d11c      	bne.n	80179b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	0a1b      	lsrs	r3, r3, #8
 801797c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017984:	429a      	cmp	r2, r3
 8017986:	d114      	bne.n	80179b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017992:	429a      	cmp	r2, r3
 8017994:	d10d      	bne.n	80179b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d106      	bne.n	80179b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d05d      	beq.n	8017a6e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	2b0c      	cmp	r3, #12
 80179b6:	d058      	beq.n	8017a6a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80179b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d001      	beq.n	80179ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80179c6:	2301      	movs	r3, #1
 80179c8:	e0a1      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80179ca:	f7ff fc85 	bl	80172d8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80179ce:	f7fd fea9 	bl	8015724 <HAL_GetTick>
 80179d2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80179d4:	e008      	b.n	80179e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80179d6:	f7fd fea5 	bl	8015724 <HAL_GetTick>
 80179da:	4602      	mov	r2, r0
 80179dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	2b02      	cmp	r3, #2
 80179e2:	d901      	bls.n	80179e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80179e4:	2303      	movs	r3, #3
 80179e6:	e092      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80179e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d1ef      	bne.n	80179d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80179f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80179fa:	68da      	ldr	r2, [r3, #12]
 80179fc:	4b30      	ldr	r3, [pc, #192]	; (8017ac0 <HAL_RCC_OscConfig+0x68c>)
 80179fe:	4013      	ands	r3, r2
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017a04:	687a      	ldr	r2, [r7, #4]
 8017a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017a08:	4311      	orrs	r1, r2
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017a0e:	0212      	lsls	r2, r2, #8
 8017a10:	4311      	orrs	r1, r2
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017a16:	4311      	orrs	r1, r2
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017a1c:	4311      	orrs	r1, r2
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017a22:	430a      	orrs	r2, r1
 8017a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017a28:	4313      	orrs	r3, r2
 8017a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017a2c:	f7ff fc45 	bl	80172ba <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a34:	68db      	ldr	r3, [r3, #12]
 8017a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017a40:	f7fd fe70 	bl	8015724 <HAL_GetTick>
 8017a44:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017a46:	e008      	b.n	8017a5a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017a48:	f7fd fe6c 	bl	8015724 <HAL_GetTick>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	2b02      	cmp	r3, #2
 8017a54:	d901      	bls.n	8017a5a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8017a56:	2303      	movs	r3, #3
 8017a58:	e059      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d0ef      	beq.n	8017a48 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017a68:	e050      	b.n	8017b0c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	e04f      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d147      	bne.n	8017b0c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8017a7c:	f7ff fc1d 	bl	80172ba <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a84:	68db      	ldr	r3, [r3, #12]
 8017a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017a90:	f7fd fe48 	bl	8015724 <HAL_GetTick>
 8017a94:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017a96:	e008      	b.n	8017aaa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017a98:	f7fd fe44 	bl	8015724 <HAL_GetTick>
 8017a9c:	4602      	mov	r2, r0
 8017a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa0:	1ad3      	subs	r3, r2, r3
 8017aa2:	2b02      	cmp	r3, #2
 8017aa4:	d901      	bls.n	8017aaa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8017aa6:	2303      	movs	r3, #3
 8017aa8:	e031      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d0ef      	beq.n	8017a98 <HAL_RCC_OscConfig+0x664>
 8017ab8:	e028      	b.n	8017b0c <HAL_RCC_OscConfig+0x6d8>
 8017aba:	bf00      	nop
 8017abc:	58000400 	.word	0x58000400
 8017ac0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	2b0c      	cmp	r3, #12
 8017ac8:	d01e      	beq.n	8017b08 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017aca:	f7ff fc05 	bl	80172d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017ace:	f7fd fe29 	bl	8015724 <HAL_GetTick>
 8017ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017ad4:	e008      	b.n	8017ae8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017ad6:	f7fd fe25 	bl	8015724 <HAL_GetTick>
 8017ada:	4602      	mov	r2, r0
 8017adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ade:	1ad3      	subs	r3, r2, r3
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d901      	bls.n	8017ae8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8017ae4:	2303      	movs	r3, #3
 8017ae6:	e012      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d1ef      	bne.n	8017ad6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8017af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017afa:	68da      	ldr	r2, [r3, #12]
 8017afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b00:	4b05      	ldr	r3, [pc, #20]	; (8017b18 <HAL_RCC_OscConfig+0x6e4>)
 8017b02:	4013      	ands	r3, r2
 8017b04:	60cb      	str	r3, [r1, #12]
 8017b06:	e001      	b.n	8017b0c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8017b08:	2301      	movs	r3, #1
 8017b0a:	e000      	b.n	8017b0e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8017b0c:	2300      	movs	r3, #0
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3734      	adds	r7, #52	; 0x34
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd90      	pop	{r4, r7, pc}
 8017b16:	bf00      	nop
 8017b18:	eefefffc 	.word	0xeefefffc

08017b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d101      	bne.n	8017b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	e12d      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017b30:	4b98      	ldr	r3, [pc, #608]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	f003 0307 	and.w	r3, r3, #7
 8017b38:	683a      	ldr	r2, [r7, #0]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d91b      	bls.n	8017b76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017b3e:	4b95      	ldr	r3, [pc, #596]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	f023 0207 	bic.w	r2, r3, #7
 8017b46:	4993      	ldr	r1, [pc, #588]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	4313      	orrs	r3, r2
 8017b4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017b4e:	f7fd fde9 	bl	8015724 <HAL_GetTick>
 8017b52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b54:	e008      	b.n	8017b68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017b56:	f7fd fde5 	bl	8015724 <HAL_GetTick>
 8017b5a:	4602      	mov	r2, r0
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	1ad3      	subs	r3, r2, r3
 8017b60:	2b02      	cmp	r3, #2
 8017b62:	d901      	bls.n	8017b68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017b64:	2303      	movs	r3, #3
 8017b66:	e111      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017b68:	4b8a      	ldr	r3, [pc, #552]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	f003 0307 	and.w	r3, r3, #7
 8017b70:	683a      	ldr	r2, [r7, #0]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d1ef      	bne.n	8017b56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	f003 0302 	and.w	r3, r3, #2
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d016      	beq.n	8017bb0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	689b      	ldr	r3, [r3, #8]
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7ff faef 	bl	801716a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017b8c:	f7fd fdca 	bl	8015724 <HAL_GetTick>
 8017b90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017b92:	e008      	b.n	8017ba6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017b94:	f7fd fdc6 	bl	8015724 <HAL_GetTick>
 8017b98:	4602      	mov	r2, r0
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	1ad3      	subs	r3, r2, r3
 8017b9e:	2b02      	cmp	r3, #2
 8017ba0:	d901      	bls.n	8017ba6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8017ba2:	2303      	movs	r3, #3
 8017ba4:	e0f2      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017ba6:	f7ff fbe9 	bl	801737c <LL_RCC_IsActiveFlag_HPRE>
 8017baa:	4603      	mov	r3, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d0f1      	beq.n	8017b94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	f003 0320 	and.w	r3, r3, #32
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d016      	beq.n	8017bea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	695b      	ldr	r3, [r3, #20]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7ff fae6 	bl	8017192 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017bc6:	f7fd fdad 	bl	8015724 <HAL_GetTick>
 8017bca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017bcc:	e008      	b.n	8017be0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017bce:	f7fd fda9 	bl	8015724 <HAL_GetTick>
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	1ad3      	subs	r3, r2, r3
 8017bd8:	2b02      	cmp	r3, #2
 8017bda:	d901      	bls.n	8017be0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8017bdc:	2303      	movs	r3, #3
 8017bde:	e0d5      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017be0:	f7ff fbde 	bl	80173a0 <LL_RCC_IsActiveFlag_C2HPRE>
 8017be4:	4603      	mov	r3, r0
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d0f1      	beq.n	8017bce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d016      	beq.n	8017c24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	699b      	ldr	r3, [r3, #24]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7ff fadf 	bl	80171be <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017c00:	f7fd fd90 	bl	8015724 <HAL_GetTick>
 8017c04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017c06:	e008      	b.n	8017c1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017c08:	f7fd fd8c 	bl	8015724 <HAL_GetTick>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	1ad3      	subs	r3, r2, r3
 8017c12:	2b02      	cmp	r3, #2
 8017c14:	d901      	bls.n	8017c1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8017c16:	2303      	movs	r3, #3
 8017c18:	e0b8      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017c1a:	f7ff fbd4 	bl	80173c6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d0f1      	beq.n	8017c08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	f003 0304 	and.w	r3, r3, #4
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d016      	beq.n	8017c5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	68db      	ldr	r3, [r3, #12]
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7ff fad9 	bl	80171ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017c3a:	f7fd fd73 	bl	8015724 <HAL_GetTick>
 8017c3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017c40:	e008      	b.n	8017c54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017c42:	f7fd fd6f 	bl	8015724 <HAL_GetTick>
 8017c46:	4602      	mov	r2, r0
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	1ad3      	subs	r3, r2, r3
 8017c4c:	2b02      	cmp	r3, #2
 8017c4e:	d901      	bls.n	8017c54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8017c50:	2303      	movs	r3, #3
 8017c52:	e09b      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017c54:	f7ff fbca 	bl	80173ec <LL_RCC_IsActiveFlag_PPRE1>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d0f1      	beq.n	8017c42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	f003 0308 	and.w	r3, r3, #8
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d017      	beq.n	8017c9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	691b      	ldr	r3, [r3, #16]
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7ff facf 	bl	8017214 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017c76:	f7fd fd55 	bl	8015724 <HAL_GetTick>
 8017c7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017c7c:	e008      	b.n	8017c90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017c7e:	f7fd fd51 	bl	8015724 <HAL_GetTick>
 8017c82:	4602      	mov	r2, r0
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	1ad3      	subs	r3, r2, r3
 8017c88:	2b02      	cmp	r3, #2
 8017c8a:	d901      	bls.n	8017c90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017c8c:	2303      	movs	r3, #3
 8017c8e:	e07d      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017c90:	f7ff fbbe 	bl	8017410 <LL_RCC_IsActiveFlag_PPRE2>
 8017c94:	4603      	mov	r3, r0
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d0f1      	beq.n	8017c7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f003 0301 	and.w	r3, r3, #1
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d043      	beq.n	8017d2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	685b      	ldr	r3, [r3, #4]
 8017caa:	2b02      	cmp	r3, #2
 8017cac:	d106      	bne.n	8017cbc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8017cae:	f7ff f86f 	bl	8016d90 <LL_RCC_HSE_IsReady>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d11e      	bne.n	8017cf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017cb8:	2301      	movs	r3, #1
 8017cba:	e067      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	685b      	ldr	r3, [r3, #4]
 8017cc0:	2b03      	cmp	r3, #3
 8017cc2:	d106      	bne.n	8017cd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017cc4:	f7ff fb17 	bl	80172f6 <LL_RCC_PLL_IsReady>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d113      	bne.n	8017cf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017cce:	2301      	movs	r3, #1
 8017cd0:	e05c      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d106      	bne.n	8017ce8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8017cda:	f7ff f9d7 	bl	801708c <LL_RCC_MSI_IsReady>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d108      	bne.n	8017cf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	e051      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8017ce8:	f7ff f882 	bl	8016df0 <LL_RCC_HSI_IsReady>
 8017cec:	4603      	mov	r3, r0
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d101      	bne.n	8017cf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	e04a      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	685b      	ldr	r3, [r3, #4]
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff fa15 	bl	801712a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017d00:	f7fd fd10 	bl	8015724 <HAL_GetTick>
 8017d04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017d06:	e00a      	b.n	8017d1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8017d08:	f7fd fd0c 	bl	8015724 <HAL_GetTick>
 8017d0c:	4602      	mov	r2, r0
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	1ad3      	subs	r3, r2, r3
 8017d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8017d16:	4293      	cmp	r3, r2
 8017d18:	d901      	bls.n	8017d1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	e036      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017d1e:	f7ff fa18 	bl	8017152 <LL_RCC_GetSysClkSource>
 8017d22:	4602      	mov	r2, r0
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	009b      	lsls	r3, r3, #2
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d1ec      	bne.n	8017d08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8017d2e:	4b19      	ldr	r3, [pc, #100]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f003 0307 	and.w	r3, r3, #7
 8017d36:	683a      	ldr	r2, [r7, #0]
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d21b      	bcs.n	8017d74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017d3c:	4b15      	ldr	r3, [pc, #84]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f023 0207 	bic.w	r2, r3, #7
 8017d44:	4913      	ldr	r1, [pc, #76]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017d4c:	f7fd fcea 	bl	8015724 <HAL_GetTick>
 8017d50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017d52:	e008      	b.n	8017d66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017d54:	f7fd fce6 	bl	8015724 <HAL_GetTick>
 8017d58:	4602      	mov	r2, r0
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	1ad3      	subs	r3, r2, r3
 8017d5e:	2b02      	cmp	r3, #2
 8017d60:	d901      	bls.n	8017d66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8017d62:	2303      	movs	r3, #3
 8017d64:	e012      	b.n	8017d8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017d66:	4b0b      	ldr	r3, [pc, #44]	; (8017d94 <HAL_RCC_ClockConfig+0x278>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f003 0307 	and.w	r3, r3, #7
 8017d6e:	683a      	ldr	r2, [r7, #0]
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d1ef      	bne.n	8017d54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017d74:	f000 f87e 	bl	8017e74 <HAL_RCC_GetHCLKFreq>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	4a07      	ldr	r2, [pc, #28]	; (8017d98 <HAL_RCC_ClockConfig+0x27c>)
 8017d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8017d7e:	f7fd fcdd 	bl	801573c <HAL_GetTickPrio>
 8017d82:	4603      	mov	r3, r0
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7e8 ff23 	bl	8000bd0 <HAL_InitTick>
 8017d8a:	4603      	mov	r3, r0
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3710      	adds	r7, #16
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	58004000 	.word	0x58004000
 8017d98:	20000008 	.word	0x20000008

08017d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017d9c:	b590      	push	{r4, r7, lr}
 8017d9e:	b085      	sub	sp, #20
 8017da0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017da2:	f7ff f9d6 	bl	8017152 <LL_RCC_GetSysClkSource>
 8017da6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d10a      	bne.n	8017dc4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017dae:	f7ff f992 	bl	80170d6 <LL_RCC_MSI_GetRange>
 8017db2:	4603      	mov	r3, r0
 8017db4:	091b      	lsrs	r3, r3, #4
 8017db6:	f003 030f 	and.w	r3, r3, #15
 8017dba:	4a2b      	ldr	r2, [pc, #172]	; (8017e68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017dc0:	60fb      	str	r3, [r7, #12]
 8017dc2:	e04b      	b.n	8017e5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2b04      	cmp	r3, #4
 8017dc8:	d102      	bne.n	8017dd0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017dca:	4b28      	ldr	r3, [pc, #160]	; (8017e6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017dcc:	60fb      	str	r3, [r7, #12]
 8017dce:	e045      	b.n	8017e5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2b08      	cmp	r3, #8
 8017dd4:	d10a      	bne.n	8017dec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017dd6:	f7fe ffab 	bl	8016d30 <LL_RCC_HSE_IsEnabledDiv2>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	d102      	bne.n	8017de6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017de0:	4b22      	ldr	r3, [pc, #136]	; (8017e6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017de2:	60fb      	str	r3, [r7, #12]
 8017de4:	e03a      	b.n	8017e5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8017de6:	4b22      	ldr	r3, [pc, #136]	; (8017e70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017de8:	60fb      	str	r3, [r7, #12]
 8017dea:	e037      	b.n	8017e5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017dec:	f7ff faba 	bl	8017364 <LL_RCC_PLL_GetMainSource>
 8017df0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d003      	beq.n	8017e00 <HAL_RCC_GetSysClockFreq+0x64>
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	2b03      	cmp	r3, #3
 8017dfc:	d003      	beq.n	8017e06 <HAL_RCC_GetSysClockFreq+0x6a>
 8017dfe:	e00d      	b.n	8017e1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017e00:	4b1a      	ldr	r3, [pc, #104]	; (8017e6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017e02:	60bb      	str	r3, [r7, #8]
        break;
 8017e04:	e015      	b.n	8017e32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017e06:	f7fe ff93 	bl	8016d30 <LL_RCC_HSE_IsEnabledDiv2>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b01      	cmp	r3, #1
 8017e0e:	d102      	bne.n	8017e16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017e10:	4b16      	ldr	r3, [pc, #88]	; (8017e6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8017e12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017e14:	e00d      	b.n	8017e32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017e16:	4b16      	ldr	r3, [pc, #88]	; (8017e70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017e18:	60bb      	str	r3, [r7, #8]
        break;
 8017e1a:	e00a      	b.n	8017e32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017e1c:	f7ff f95b 	bl	80170d6 <LL_RCC_MSI_GetRange>
 8017e20:	4603      	mov	r3, r0
 8017e22:	091b      	lsrs	r3, r3, #4
 8017e24:	f003 030f 	and.w	r3, r3, #15
 8017e28:	4a0f      	ldr	r2, [pc, #60]	; (8017e68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e2e:	60bb      	str	r3, [r7, #8]
        break;
 8017e30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017e32:	f7ff fa72 	bl	801731a <LL_RCC_PLL_GetN>
 8017e36:	4602      	mov	r2, r0
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	fb03 f402 	mul.w	r4, r3, r2
 8017e3e:	f7ff fa85 	bl	801734c <LL_RCC_PLL_GetDivider>
 8017e42:	4603      	mov	r3, r0
 8017e44:	091b      	lsrs	r3, r3, #4
 8017e46:	3301      	adds	r3, #1
 8017e48:	fbb4 f4f3 	udiv	r4, r4, r3
 8017e4c:	f7ff fa72 	bl	8017334 <LL_RCC_PLL_GetR>
 8017e50:	4603      	mov	r3, r0
 8017e52:	0f5b      	lsrs	r3, r3, #29
 8017e54:	3301      	adds	r3, #1
 8017e56:	fbb4 f3f3 	udiv	r3, r4, r3
 8017e5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017e5c:	68fb      	ldr	r3, [r7, #12]
}
 8017e5e:	4618      	mov	r0, r3
 8017e60:	3714      	adds	r7, #20
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd90      	pop	{r4, r7, pc}
 8017e66:	bf00      	nop
 8017e68:	0801b1bc 	.word	0x0801b1bc
 8017e6c:	00f42400 	.word	0x00f42400
 8017e70:	01e84800 	.word	0x01e84800

08017e74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017e74:	b598      	push	{r3, r4, r7, lr}
 8017e76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017e78:	f7ff ff90 	bl	8017d9c <HAL_RCC_GetSysClockFreq>
 8017e7c:	4604      	mov	r4, r0
 8017e7e:	f7ff f9dd 	bl	801723c <LL_RCC_GetAHBPrescaler>
 8017e82:	4603      	mov	r3, r0
 8017e84:	091b      	lsrs	r3, r3, #4
 8017e86:	f003 030f 	and.w	r3, r3, #15
 8017e8a:	4a03      	ldr	r2, [pc, #12]	; (8017e98 <HAL_RCC_GetHCLKFreq+0x24>)
 8017e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017e94:	4618      	mov	r0, r3
 8017e96:	bd98      	pop	{r3, r4, r7, pc}
 8017e98:	0801b15c 	.word	0x0801b15c

08017e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017e9c:	b598      	push	{r3, r4, r7, lr}
 8017e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017ea0:	f7ff ffe8 	bl	8017e74 <HAL_RCC_GetHCLKFreq>
 8017ea4:	4604      	mov	r4, r0
 8017ea6:	f7ff f9f0 	bl	801728a <LL_RCC_GetAPB1Prescaler>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	0a1b      	lsrs	r3, r3, #8
 8017eae:	f003 0307 	and.w	r3, r3, #7
 8017eb2:	4a04      	ldr	r2, [pc, #16]	; (8017ec4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017eb8:	f003 031f 	and.w	r3, r3, #31
 8017ebc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	bd98      	pop	{r3, r4, r7, pc}
 8017ec4:	0801b19c 	.word	0x0801b19c

08017ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017ec8:	b598      	push	{r3, r4, r7, lr}
 8017eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017ecc:	f7ff ffd2 	bl	8017e74 <HAL_RCC_GetHCLKFreq>
 8017ed0:	4604      	mov	r4, r0
 8017ed2:	f7ff f9e6 	bl	80172a2 <LL_RCC_GetAPB2Prescaler>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	0adb      	lsrs	r3, r3, #11
 8017eda:	f003 0307 	and.w	r3, r3, #7
 8017ede:	4a04      	ldr	r2, [pc, #16]	; (8017ef0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ee4:	f003 031f 	and.w	r3, r3, #31
 8017ee8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017eec:	4618      	mov	r0, r3
 8017eee:	bd98      	pop	{r3, r4, r7, pc}
 8017ef0:	0801b19c 	.word	0x0801b19c

08017ef4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b082      	sub	sp, #8
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
 8017efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	226f      	movs	r2, #111	; 0x6f
 8017f02:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017f04:	f7ff f925 	bl	8017152 <LL_RCC_GetSysClkSource>
 8017f08:	4602      	mov	r2, r0
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017f0e:	f7ff f995 	bl	801723c <LL_RCC_GetAHBPrescaler>
 8017f12:	4602      	mov	r2, r0
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017f18:	f7ff f9b7 	bl	801728a <LL_RCC_GetAPB1Prescaler>
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017f22:	f7ff f9be 	bl	80172a2 <LL_RCC_GetAPB2Prescaler>
 8017f26:	4602      	mov	r2, r0
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017f2c:	f7ff f992 	bl	8017254 <LL_C2_RCC_GetAHBPrescaler>
 8017f30:	4602      	mov	r2, r0
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017f36:	f7ff f99a 	bl	801726e <LL_RCC_GetAHB4Prescaler>
 8017f3a:	4602      	mov	r2, r0
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017f40:	4b04      	ldr	r3, [pc, #16]	; (8017f54 <HAL_RCC_GetClockConfig+0x60>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	f003 0207 	and.w	r2, r3, #7
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	601a      	str	r2, [r3, #0]
}
 8017f4c:	bf00      	nop
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	58004000 	.word	0x58004000

08017f58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017f58:	b590      	push	{r4, r7, lr}
 8017f5a:	b085      	sub	sp, #20
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	2bb0      	cmp	r3, #176	; 0xb0
 8017f64:	d903      	bls.n	8017f6e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017f66:	4b15      	ldr	r3, [pc, #84]	; (8017fbc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f6a:	60fb      	str	r3, [r7, #12]
 8017f6c:	e007      	b.n	8017f7e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	091b      	lsrs	r3, r3, #4
 8017f72:	f003 030f 	and.w	r3, r3, #15
 8017f76:	4a11      	ldr	r2, [pc, #68]	; (8017fbc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f7c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017f7e:	f7ff f976 	bl	801726e <LL_RCC_GetAHB4Prescaler>
 8017f82:	4603      	mov	r3, r0
 8017f84:	091b      	lsrs	r3, r3, #4
 8017f86:	f003 030f 	and.w	r3, r3, #15
 8017f8a:	4a0d      	ldr	r2, [pc, #52]	; (8017fc0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f90:	68fa      	ldr	r2, [r7, #12]
 8017f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f96:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017f98:	68bb      	ldr	r3, [r7, #8]
 8017f9a:	4a0a      	ldr	r2, [pc, #40]	; (8017fc4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8017fa0:	0c9c      	lsrs	r4, r3, #18
 8017fa2:	f7fe feb7 	bl	8016d14 <HAL_PWREx_GetVoltageRange>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	4619      	mov	r1, r3
 8017faa:	4620      	mov	r0, r4
 8017fac:	f000 f80c 	bl	8017fc8 <RCC_SetFlashLatency>
 8017fb0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3714      	adds	r7, #20
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd90      	pop	{r4, r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	0801b1bc 	.word	0x0801b1bc
 8017fc0:	0801b15c 	.word	0x0801b15c
 8017fc4:	431bde83 	.word	0x431bde83

08017fc8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017fc8:	b590      	push	{r4, r7, lr}
 8017fca:	b093      	sub	sp, #76	; 0x4c
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017fd2:	4b37      	ldr	r3, [pc, #220]	; (80180b0 <RCC_SetFlashLatency+0xe8>)
 8017fd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017fde:	4a35      	ldr	r2, [pc, #212]	; (80180b4 <RCC_SetFlashLatency+0xec>)
 8017fe0:	f107 031c 	add.w	r3, r7, #28
 8017fe4:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017fea:	4b33      	ldr	r3, [pc, #204]	; (80180b8 <RCC_SetFlashLatency+0xf0>)
 8017fec:	f107 040c 	add.w	r4, r7, #12
 8017ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018000:	d11a      	bne.n	8018038 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8018002:	2300      	movs	r3, #0
 8018004:	643b      	str	r3, [r7, #64]	; 0x40
 8018006:	e013      	b.n	8018030 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8018008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801800a:	009b      	lsls	r3, r3, #2
 801800c:	3348      	adds	r3, #72	; 0x48
 801800e:	443b      	add	r3, r7
 8018010:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8018014:	687a      	ldr	r2, [r7, #4]
 8018016:	429a      	cmp	r2, r3
 8018018:	d807      	bhi.n	801802a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 801801a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801801c:	009b      	lsls	r3, r3, #2
 801801e:	3348      	adds	r3, #72	; 0x48
 8018020:	443b      	add	r3, r7
 8018022:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8018026:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8018028:	e020      	b.n	801806c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801802a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801802c:	3301      	adds	r3, #1
 801802e:	643b      	str	r3, [r7, #64]	; 0x40
 8018030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018032:	2b03      	cmp	r3, #3
 8018034:	d9e8      	bls.n	8018008 <RCC_SetFlashLatency+0x40>
 8018036:	e019      	b.n	801806c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8018038:	2300      	movs	r3, #0
 801803a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801803c:	e013      	b.n	8018066 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 801803e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018040:	009b      	lsls	r3, r3, #2
 8018042:	3348      	adds	r3, #72	; 0x48
 8018044:	443b      	add	r3, r7
 8018046:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801804a:	687a      	ldr	r2, [r7, #4]
 801804c:	429a      	cmp	r2, r3
 801804e:	d807      	bhi.n	8018060 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8018050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	3348      	adds	r3, #72	; 0x48
 8018056:	443b      	add	r3, r7
 8018058:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801805c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 801805e:	e005      	b.n	801806c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8018060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018062:	3301      	adds	r3, #1
 8018064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018068:	2b02      	cmp	r3, #2
 801806a:	d9e8      	bls.n	801803e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 801806c:	4b13      	ldr	r3, [pc, #76]	; (80180bc <RCC_SetFlashLatency+0xf4>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f023 0207 	bic.w	r2, r3, #7
 8018074:	4911      	ldr	r1, [pc, #68]	; (80180bc <RCC_SetFlashLatency+0xf4>)
 8018076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018078:	4313      	orrs	r3, r2
 801807a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801807c:	f7fd fb52 	bl	8015724 <HAL_GetTick>
 8018080:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8018082:	e008      	b.n	8018096 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8018084:	f7fd fb4e 	bl	8015724 <HAL_GetTick>
 8018088:	4602      	mov	r2, r0
 801808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808c:	1ad3      	subs	r3, r2, r3
 801808e:	2b02      	cmp	r3, #2
 8018090:	d901      	bls.n	8018096 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8018092:	2303      	movs	r3, #3
 8018094:	e007      	b.n	80180a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8018096:	4b09      	ldr	r3, [pc, #36]	; (80180bc <RCC_SetFlashLatency+0xf4>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	f003 0307 	and.w	r3, r3, #7
 801809e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d1ef      	bne.n	8018084 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80180a4:	2300      	movs	r3, #0
}
 80180a6:	4618      	mov	r0, r3
 80180a8:	374c      	adds	r7, #76	; 0x4c
 80180aa:	46bd      	mov	sp, r7
 80180ac:	bd90      	pop	{r4, r7, pc}
 80180ae:	bf00      	nop
 80180b0:	0801b078 	.word	0x0801b078
 80180b4:	0801b088 	.word	0x0801b088
 80180b8:	0801b094 	.word	0x0801b094
 80180bc:	58004000 	.word	0x58004000

080180c0 <LL_RCC_LSE_IsEnabled>:
{
 80180c0:	b480      	push	{r7}
 80180c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80180c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180cc:	f003 0301 	and.w	r3, r3, #1
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	d101      	bne.n	80180d8 <LL_RCC_LSE_IsEnabled+0x18>
 80180d4:	2301      	movs	r3, #1
 80180d6:	e000      	b.n	80180da <LL_RCC_LSE_IsEnabled+0x1a>
 80180d8:	2300      	movs	r3, #0
}
 80180da:	4618      	mov	r0, r3
 80180dc:	46bd      	mov	sp, r7
 80180de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e2:	4770      	bx	lr

080180e4 <LL_RCC_LSE_IsReady>:
{
 80180e4:	b480      	push	{r7}
 80180e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80180e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80180f0:	f003 0302 	and.w	r3, r3, #2
 80180f4:	2b02      	cmp	r3, #2
 80180f6:	d101      	bne.n	80180fc <LL_RCC_LSE_IsReady+0x18>
 80180f8:	2301      	movs	r3, #1
 80180fa:	e000      	b.n	80180fe <LL_RCC_LSE_IsReady+0x1a>
 80180fc:	2300      	movs	r3, #0
}
 80180fe:	4618      	mov	r0, r3
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr

08018108 <LL_RCC_MSI_EnablePLLMode>:
{
 8018108:	b480      	push	{r7}
 801810a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 801810c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018116:	f043 0304 	orr.w	r3, r3, #4
 801811a:	6013      	str	r3, [r2, #0]
}
 801811c:	bf00      	nop
 801811e:	46bd      	mov	sp, r7
 8018120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018124:	4770      	bx	lr

08018126 <LL_RCC_SetRFWKPClockSource>:
{
 8018126:	b480      	push	{r7}
 8018128:	b083      	sub	sp, #12
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 801812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018136:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801813a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	4313      	orrs	r3, r2
 8018142:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8018146:	bf00      	nop
 8018148:	370c      	adds	r7, #12
 801814a:	46bd      	mov	sp, r7
 801814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018150:	4770      	bx	lr

08018152 <LL_RCC_SetSMPSClockSource>:
{
 8018152:	b480      	push	{r7}
 8018154:	b083      	sub	sp, #12
 8018156:	af00      	add	r7, sp, #0
 8018158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 801815a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018160:	f023 0203 	bic.w	r2, r3, #3
 8018164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	4313      	orrs	r3, r2
 801816c:	624b      	str	r3, [r1, #36]	; 0x24
}
 801816e:	bf00      	nop
 8018170:	370c      	adds	r7, #12
 8018172:	46bd      	mov	sp, r7
 8018174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018178:	4770      	bx	lr

0801817a <LL_RCC_SetSMPSPrescaler>:
{
 801817a:	b480      	push	{r7}
 801817c:	b083      	sub	sp, #12
 801817e:	af00      	add	r7, sp, #0
 8018180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8018182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018188:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801818c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	4313      	orrs	r3, r2
 8018194:	624b      	str	r3, [r1, #36]	; 0x24
}
 8018196:	bf00      	nop
 8018198:	370c      	adds	r7, #12
 801819a:	46bd      	mov	sp, r7
 801819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a0:	4770      	bx	lr

080181a2 <LL_RCC_SetUSARTClockSource>:
{
 80181a2:	b480      	push	{r7}
 80181a4:	b083      	sub	sp, #12
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80181aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80181b2:	f023 0203 	bic.w	r2, r3, #3
 80181b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	4313      	orrs	r3, r2
 80181be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80181c2:	bf00      	nop
 80181c4:	370c      	adds	r7, #12
 80181c6:	46bd      	mov	sp, r7
 80181c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181cc:	4770      	bx	lr

080181ce <LL_RCC_SetLPUARTClockSource>:
{
 80181ce:	b480      	push	{r7}
 80181d0:	b083      	sub	sp, #12
 80181d2:	af00      	add	r7, sp, #0
 80181d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80181d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80181de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80181e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	4313      	orrs	r3, r2
 80181ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80181ee:	bf00      	nop
 80181f0:	370c      	adds	r7, #12
 80181f2:	46bd      	mov	sp, r7
 80181f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f8:	4770      	bx	lr

080181fa <LL_RCC_SetI2CClockSource>:
{
 80181fa:	b480      	push	{r7}
 80181fc:	b083      	sub	sp, #12
 80181fe:	af00      	add	r7, sp, #0
 8018200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8018202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	091b      	lsrs	r3, r3, #4
 801820e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8018212:	43db      	mvns	r3, r3
 8018214:	401a      	ands	r2, r3
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	011b      	lsls	r3, r3, #4
 801821a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801821e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018222:	4313      	orrs	r3, r2
 8018224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018228:	bf00      	nop
 801822a:	370c      	adds	r7, #12
 801822c:	46bd      	mov	sp, r7
 801822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018232:	4770      	bx	lr

08018234 <LL_RCC_SetLPTIMClockSource>:
{
 8018234:	b480      	push	{r7}
 8018236:	b083      	sub	sp, #12
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801823c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	0c1b      	lsrs	r3, r3, #16
 8018248:	041b      	lsls	r3, r3, #16
 801824a:	43db      	mvns	r3, r3
 801824c:	401a      	ands	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	041b      	lsls	r3, r3, #16
 8018252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018256:	4313      	orrs	r3, r2
 8018258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801825c:	bf00      	nop
 801825e:	370c      	adds	r7, #12
 8018260:	46bd      	mov	sp, r7
 8018262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018266:	4770      	bx	lr

08018268 <LL_RCC_SetSAIClockSource>:
{
 8018268:	b480      	push	{r7}
 801826a:	b083      	sub	sp, #12
 801826c:	af00      	add	r7, sp, #0
 801826e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8018270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018278:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801827c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	4313      	orrs	r3, r2
 8018284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018288:	bf00      	nop
 801828a:	370c      	adds	r7, #12
 801828c:	46bd      	mov	sp, r7
 801828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018292:	4770      	bx	lr

08018294 <LL_RCC_SetRNGClockSource>:
{
 8018294:	b480      	push	{r7}
 8018296:	b083      	sub	sp, #12
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801829c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80182a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80182a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	4313      	orrs	r3, r2
 80182b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80182b4:	bf00      	nop
 80182b6:	370c      	adds	r7, #12
 80182b8:	46bd      	mov	sp, r7
 80182ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182be:	4770      	bx	lr

080182c0 <LL_RCC_SetCLK48ClockSource>:
{
 80182c0:	b480      	push	{r7}
 80182c2:	b083      	sub	sp, #12
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80182c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80182d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80182d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	4313      	orrs	r3, r2
 80182dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80182e0:	bf00      	nop
 80182e2:	370c      	adds	r7, #12
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr

080182ec <LL_RCC_SetUSBClockSource>:
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b082      	sub	sp, #8
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7ff ffe3 	bl	80182c0 <LL_RCC_SetCLK48ClockSource>
}
 80182fa:	bf00      	nop
 80182fc:	3708      	adds	r7, #8
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}

08018302 <LL_RCC_SetADCClockSource>:
{
 8018302:	b480      	push	{r7}
 8018304:	b083      	sub	sp, #12
 8018306:	af00      	add	r7, sp, #0
 8018308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 801830a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8018316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	4313      	orrs	r3, r2
 801831e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8018322:	bf00      	nop
 8018324:	370c      	adds	r7, #12
 8018326:	46bd      	mov	sp, r7
 8018328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832c:	4770      	bx	lr

0801832e <LL_RCC_SetRTCClockSource>:
{
 801832e:	b480      	push	{r7}
 8018330:	b083      	sub	sp, #12
 8018332:	af00      	add	r7, sp, #0
 8018334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8018336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801833a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801833e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	4313      	orrs	r3, r2
 801834a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801834e:	bf00      	nop
 8018350:	370c      	adds	r7, #12
 8018352:	46bd      	mov	sp, r7
 8018354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018358:	4770      	bx	lr

0801835a <LL_RCC_GetRTCClockSource>:
{
 801835a:	b480      	push	{r7}
 801835c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801835e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018366:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 801836a:	4618      	mov	r0, r3
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr

08018374 <LL_RCC_ForceBackupDomainReset>:
{
 8018374:	b480      	push	{r7}
 8018376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8018378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801838c:	bf00      	nop
 801838e:	46bd      	mov	sp, r7
 8018390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018394:	4770      	bx	lr

08018396 <LL_RCC_ReleaseBackupDomainReset>:
{
 8018396:	b480      	push	{r7}
 8018398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801839a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801839e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80183a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80183a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80183aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80183ae:	bf00      	nop
 80183b0:	46bd      	mov	sp, r7
 80183b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b6:	4770      	bx	lr

080183b8 <LL_RCC_PLLSAI1_Enable>:
{
 80183b8:	b480      	push	{r7}
 80183ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80183bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80183c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80183ca:	6013      	str	r3, [r2, #0]
}
 80183cc:	bf00      	nop
 80183ce:	46bd      	mov	sp, r7
 80183d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d4:	4770      	bx	lr

080183d6 <LL_RCC_PLLSAI1_Disable>:
{
 80183d6:	b480      	push	{r7}
 80183d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80183da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80183e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80183e8:	6013      	str	r3, [r2, #0]
}
 80183ea:	bf00      	nop
 80183ec:	46bd      	mov	sp, r7
 80183ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f2:	4770      	bx	lr

080183f4 <LL_RCC_PLLSAI1_IsReady>:
{
 80183f4:	b480      	push	{r7}
 80183f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80183f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018406:	d101      	bne.n	801840c <LL_RCC_PLLSAI1_IsReady+0x18>
 8018408:	2301      	movs	r3, #1
 801840a:	e000      	b.n	801840e <LL_RCC_PLLSAI1_IsReady+0x1a>
 801840c:	2300      	movs	r3, #0
}
 801840e:	4618      	mov	r0, r3
 8018410:	46bd      	mov	sp, r7
 8018412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018416:	4770      	bx	lr

08018418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b088      	sub	sp, #32
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8018420:	2300      	movs	r3, #0
 8018422:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8018424:	2300      	movs	r3, #0
 8018426:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018430:	2b00      	cmp	r3, #0
 8018432:	d034      	beq.n	801849e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018438:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801843c:	d021      	beq.n	8018482 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 801843e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8018442:	d81b      	bhi.n	801847c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018448:	d01d      	beq.n	8018486 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 801844a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801844e:	d815      	bhi.n	801847c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8018450:	2b00      	cmp	r3, #0
 8018452:	d00b      	beq.n	801846c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8018454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018458:	d110      	bne.n	801847c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 801845a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018468:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 801846a:	e00d      	b.n	8018488 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	3304      	adds	r3, #4
 8018470:	4618      	mov	r0, r3
 8018472:	f000 f94d 	bl	8018710 <RCCEx_PLLSAI1_ConfigNP>
 8018476:	4603      	mov	r3, r0
 8018478:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801847a:	e005      	b.n	8018488 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 801847c:	2301      	movs	r3, #1
 801847e:	77fb      	strb	r3, [r7, #31]
        break;
 8018480:	e002      	b.n	8018488 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8018482:	bf00      	nop
 8018484:	e000      	b.n	8018488 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8018486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018488:	7ffb      	ldrb	r3, [r7, #31]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d105      	bne.n	801849a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018492:	4618      	mov	r0, r3
 8018494:	f7ff fee8 	bl	8018268 <LL_RCC_SetSAIClockSource>
 8018498:	e001      	b.n	801849e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801849a:	7ffb      	ldrb	r3, [r7, #31]
 801849c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d046      	beq.n	8018538 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80184aa:	f7ff ff56 	bl	801835a <LL_RCC_GetRTCClockSource>
 80184ae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184b4:	69ba      	ldr	r2, [r7, #24]
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d03c      	beq.n	8018534 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80184ba:	f7fe fc1b 	bl	8016cf4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d105      	bne.n	80184d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184c8:	4618      	mov	r0, r3
 80184ca:	f7ff ff30 	bl	801832e <LL_RCC_SetRTCClockSource>
 80184ce:	e02e      	b.n	801852e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80184d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80184d8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80184da:	f7ff ff4b 	bl	8018374 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80184de:	f7ff ff5a 	bl	8018396 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184ec:	4313      	orrs	r3, r2
 80184ee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80184f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80184f4:	697b      	ldr	r3, [r7, #20]
 80184f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80184fa:	f7ff fde1 	bl	80180c0 <LL_RCC_LSE_IsEnabled>
 80184fe:	4603      	mov	r3, r0
 8018500:	2b01      	cmp	r3, #1
 8018502:	d114      	bne.n	801852e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018504:	f7fd f90e 	bl	8015724 <HAL_GetTick>
 8018508:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801850a:	e00b      	b.n	8018524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801850c:	f7fd f90a 	bl	8015724 <HAL_GetTick>
 8018510:	4602      	mov	r2, r0
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	1ad3      	subs	r3, r2, r3
 8018516:	f241 3288 	movw	r2, #5000	; 0x1388
 801851a:	4293      	cmp	r3, r2
 801851c:	d902      	bls.n	8018524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 801851e:	2303      	movs	r3, #3
 8018520:	77fb      	strb	r3, [r7, #31]
              break;
 8018522:	e004      	b.n	801852e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8018524:	f7ff fdde 	bl	80180e4 <LL_RCC_LSE_IsReady>
 8018528:	4603      	mov	r3, r0
 801852a:	2b01      	cmp	r3, #1
 801852c:	d1ee      	bne.n	801850c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 801852e:	7ffb      	ldrb	r3, [r7, #31]
 8018530:	77bb      	strb	r3, [r7, #30]
 8018532:	e001      	b.n	8018538 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018534:	7ffb      	ldrb	r3, [r7, #31]
 8018536:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	f003 0301 	and.w	r3, r3, #1
 8018540:	2b00      	cmp	r3, #0
 8018542:	d004      	beq.n	801854e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	699b      	ldr	r3, [r3, #24]
 8018548:	4618      	mov	r0, r3
 801854a:	f7ff fe2a 	bl	80181a2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	f003 0302 	and.w	r3, r3, #2
 8018556:	2b00      	cmp	r3, #0
 8018558:	d004      	beq.n	8018564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	69db      	ldr	r3, [r3, #28]
 801855e:	4618      	mov	r0, r3
 8018560:	f7ff fe35 	bl	80181ce <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	f003 0310 	and.w	r3, r3, #16
 801856c:	2b00      	cmp	r3, #0
 801856e:	d004      	beq.n	801857a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018574:	4618      	mov	r0, r3
 8018576:	f7ff fe5d 	bl	8018234 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	f003 0320 	and.w	r3, r3, #32
 8018582:	2b00      	cmp	r3, #0
 8018584:	d004      	beq.n	8018590 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801858a:	4618      	mov	r0, r3
 801858c:	f7ff fe52 	bl	8018234 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f003 0304 	and.w	r3, r3, #4
 8018598:	2b00      	cmp	r3, #0
 801859a:	d004      	beq.n	80185a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	6a1b      	ldr	r3, [r3, #32]
 80185a0:	4618      	mov	r0, r3
 80185a2:	f7ff fe2a 	bl	80181fa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f003 0308 	and.w	r3, r3, #8
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d004      	beq.n	80185bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b6:	4618      	mov	r0, r3
 80185b8:	f7ff fe1f 	bl	80181fa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d022      	beq.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7ff fe8d 	bl	80182ec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80185da:	d107      	bne.n	80185ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80185dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80185e0:	68db      	ldr	r3, [r3, #12]
 80185e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80185e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80185ea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80185f4:	d10b      	bne.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	3304      	adds	r3, #4
 80185fa:	4618      	mov	r0, r3
 80185fc:	f000 f8e3 	bl	80187c6 <RCCEx_PLLSAI1_ConfigNQ>
 8018600:	4603      	mov	r3, r0
 8018602:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018604:	7ffb      	ldrb	r3, [r7, #31]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d001      	beq.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801860a:	7ffb      	ldrb	r3, [r7, #31]
 801860c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018616:	2b00      	cmp	r3, #0
 8018618:	d02b      	beq.n	8018672 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801861e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018622:	d008      	beq.n	8018636 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801862c:	d003      	beq.n	8018636 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018632:	2b00      	cmp	r3, #0
 8018634:	d105      	bne.n	8018642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801863a:	4618      	mov	r0, r3
 801863c:	f7ff fe2a 	bl	8018294 <LL_RCC_SetRNGClockSource>
 8018640:	e00a      	b.n	8018658 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801864a:	60fb      	str	r3, [r7, #12]
 801864c:	2000      	movs	r0, #0
 801864e:	f7ff fe21 	bl	8018294 <LL_RCC_SetRNGClockSource>
 8018652:	68f8      	ldr	r0, [r7, #12]
 8018654:	f7ff fe34 	bl	80182c0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801865c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8018660:	d107      	bne.n	8018672 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8018662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801866c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018670:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801867a:	2b00      	cmp	r3, #0
 801867c:	d022      	beq.n	80186c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018682:	4618      	mov	r0, r3
 8018684:	f7ff fe3d 	bl	8018302 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801868c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018690:	d107      	bne.n	80186a2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8018692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018696:	68db      	ldr	r3, [r3, #12]
 8018698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801869c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80186a0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80186aa:	d10b      	bne.n	80186c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	3304      	adds	r3, #4
 80186b0:	4618      	mov	r0, r3
 80186b2:	f000 f8e3 	bl	801887c <RCCEx_PLLSAI1_ConfigNR>
 80186b6:	4603      	mov	r3, r0
 80186b8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80186ba:	7ffb      	ldrb	r3, [r7, #31]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d001      	beq.n	80186c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80186c0:	7ffb      	ldrb	r3, [r7, #31]
 80186c2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d004      	beq.n	80186da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7ff fd26 	bl	8018126 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d009      	beq.n	80186fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186ea:	4618      	mov	r0, r3
 80186ec:	f7ff fd45 	bl	801817a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186f4:	4618      	mov	r0, r3
 80186f6:	f7ff fd2c 	bl	8018152 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80186fa:	7fbb      	ldrb	r3, [r7, #30]
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	3720      	adds	r7, #32
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018708:	f7ff fcfe 	bl	8018108 <LL_RCC_MSI_EnablePLLMode>
}
 801870c:	bf00      	nop
 801870e:	bd80      	pop	{r7, pc}

08018710 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b084      	sub	sp, #16
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018718:	2300      	movs	r3, #0
 801871a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801871c:	f7ff fe5b 	bl	80183d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018720:	f7fd f800 	bl	8015724 <HAL_GetTick>
 8018724:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018726:	e009      	b.n	801873c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018728:	f7fc fffc 	bl	8015724 <HAL_GetTick>
 801872c:	4602      	mov	r2, r0
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	2b02      	cmp	r3, #2
 8018734:	d902      	bls.n	801873c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8018736:	2303      	movs	r3, #3
 8018738:	73fb      	strb	r3, [r7, #15]
      break;
 801873a:	e004      	b.n	8018746 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801873c:	f7ff fe5a 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 8018740:	4603      	mov	r3, r0
 8018742:	2b00      	cmp	r3, #0
 8018744:	d1f0      	bne.n	8018728 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8018746:	7bfb      	ldrb	r3, [r7, #15]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d137      	bne.n	80187bc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801874c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018750:	691b      	ldr	r3, [r3, #16]
 8018752:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	021b      	lsls	r3, r3, #8
 801875c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018760:	4313      	orrs	r3, r2
 8018762:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8018764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018768:	691b      	ldr	r3, [r3, #16]
 801876a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	685b      	ldr	r3, [r3, #4]
 8018772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018776:	4313      	orrs	r3, r2
 8018778:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801877a:	f7ff fe1d 	bl	80183b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801877e:	f7fc ffd1 	bl	8015724 <HAL_GetTick>
 8018782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018784:	e009      	b.n	801879a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018786:	f7fc ffcd 	bl	8015724 <HAL_GetTick>
 801878a:	4602      	mov	r2, r0
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	1ad3      	subs	r3, r2, r3
 8018790:	2b02      	cmp	r3, #2
 8018792:	d902      	bls.n	801879a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8018794:	2303      	movs	r3, #3
 8018796:	73fb      	strb	r3, [r7, #15]
        break;
 8018798:	e004      	b.n	80187a4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801879a:	f7ff fe2b 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 801879e:	4603      	mov	r3, r0
 80187a0:	2b01      	cmp	r3, #1
 80187a2:	d1f0      	bne.n	8018786 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80187a4:	7bfb      	ldrb	r3, [r7, #15]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d108      	bne.n	80187bc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80187aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80187ae:	691a      	ldr	r2, [r3, #16]
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	691b      	ldr	r3, [r3, #16]
 80187b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80187b8:	4313      	orrs	r3, r2
 80187ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80187bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80187be:	4618      	mov	r0, r3
 80187c0:	3710      	adds	r7, #16
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bd80      	pop	{r7, pc}

080187c6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80187c6:	b580      	push	{r7, lr}
 80187c8:	b084      	sub	sp, #16
 80187ca:	af00      	add	r7, sp, #0
 80187cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80187ce:	2300      	movs	r3, #0
 80187d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80187d2:	f7ff fe00 	bl	80183d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80187d6:	f7fc ffa5 	bl	8015724 <HAL_GetTick>
 80187da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80187dc:	e009      	b.n	80187f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80187de:	f7fc ffa1 	bl	8015724 <HAL_GetTick>
 80187e2:	4602      	mov	r2, r0
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	1ad3      	subs	r3, r2, r3
 80187e8:	2b02      	cmp	r3, #2
 80187ea:	d902      	bls.n	80187f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80187ec:	2303      	movs	r3, #3
 80187ee:	73fb      	strb	r3, [r7, #15]
      break;
 80187f0:	e004      	b.n	80187fc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80187f2:	f7ff fdff 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d1f0      	bne.n	80187de <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80187fc:	7bfb      	ldrb	r3, [r7, #15]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d137      	bne.n	8018872 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018806:	691b      	ldr	r3, [r3, #16]
 8018808:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	021b      	lsls	r3, r3, #8
 8018812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018816:	4313      	orrs	r3, r2
 8018818:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801881a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801881e:	691b      	ldr	r3, [r3, #16]
 8018820:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	689b      	ldr	r3, [r3, #8]
 8018828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801882c:	4313      	orrs	r3, r2
 801882e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018830:	f7ff fdc2 	bl	80183b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018834:	f7fc ff76 	bl	8015724 <HAL_GetTick>
 8018838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801883a:	e009      	b.n	8018850 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801883c:	f7fc ff72 	bl	8015724 <HAL_GetTick>
 8018840:	4602      	mov	r2, r0
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	2b02      	cmp	r3, #2
 8018848:	d902      	bls.n	8018850 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 801884a:	2303      	movs	r3, #3
 801884c:	73fb      	strb	r3, [r7, #15]
        break;
 801884e:	e004      	b.n	801885a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018850:	f7ff fdd0 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 8018854:	4603      	mov	r3, r0
 8018856:	2b01      	cmp	r3, #1
 8018858:	d1f0      	bne.n	801883c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 801885a:	7bfb      	ldrb	r3, [r7, #15]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d108      	bne.n	8018872 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018864:	691a      	ldr	r2, [r3, #16]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	691b      	ldr	r3, [r3, #16]
 801886a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801886e:	4313      	orrs	r3, r2
 8018870:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018872:	7bfb      	ldrb	r3, [r7, #15]
}
 8018874:	4618      	mov	r0, r3
 8018876:	3710      	adds	r7, #16
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}

0801887c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801887c:	b580      	push	{r7, lr}
 801887e:	b084      	sub	sp, #16
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018884:	2300      	movs	r3, #0
 8018886:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018888:	f7ff fda5 	bl	80183d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801888c:	f7fc ff4a 	bl	8015724 <HAL_GetTick>
 8018890:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018892:	e009      	b.n	80188a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018894:	f7fc ff46 	bl	8015724 <HAL_GetTick>
 8018898:	4602      	mov	r2, r0
 801889a:	68bb      	ldr	r3, [r7, #8]
 801889c:	1ad3      	subs	r3, r2, r3
 801889e:	2b02      	cmp	r3, #2
 80188a0:	d902      	bls.n	80188a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80188a2:	2303      	movs	r3, #3
 80188a4:	73fb      	strb	r3, [r7, #15]
      break;
 80188a6:	e004      	b.n	80188b2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80188a8:	f7ff fda4 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 80188ac:	4603      	mov	r3, r0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d1f0      	bne.n	8018894 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80188b2:	7bfb      	ldrb	r3, [r7, #15]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d137      	bne.n	8018928 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80188b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80188bc:	691b      	ldr	r3, [r3, #16]
 80188be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	021b      	lsls	r3, r3, #8
 80188c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80188cc:	4313      	orrs	r3, r2
 80188ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80188d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80188d4:	691b      	ldr	r3, [r3, #16]
 80188d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	68db      	ldr	r3, [r3, #12]
 80188de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80188e2:	4313      	orrs	r3, r2
 80188e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80188e6:	f7ff fd67 	bl	80183b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80188ea:	f7fc ff1b 	bl	8015724 <HAL_GetTick>
 80188ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80188f0:	e009      	b.n	8018906 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80188f2:	f7fc ff17 	bl	8015724 <HAL_GetTick>
 80188f6:	4602      	mov	r2, r0
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	1ad3      	subs	r3, r2, r3
 80188fc:	2b02      	cmp	r3, #2
 80188fe:	d902      	bls.n	8018906 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018900:	2303      	movs	r3, #3
 8018902:	73fb      	strb	r3, [r7, #15]
        break;
 8018904:	e004      	b.n	8018910 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018906:	f7ff fd75 	bl	80183f4 <LL_RCC_PLLSAI1_IsReady>
 801890a:	4603      	mov	r3, r0
 801890c:	2b01      	cmp	r3, #1
 801890e:	d1f0      	bne.n	80188f2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018910:	7bfb      	ldrb	r3, [r7, #15]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d108      	bne.n	8018928 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801891a:	691a      	ldr	r2, [r3, #16]
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018924:	4313      	orrs	r3, r2
 8018926:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018928:	7bfb      	ldrb	r3, [r7, #15]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3710      	adds	r7, #16
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}

08018932 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018932:	b580      	push	{r7, lr}
 8018934:	b082      	sub	sp, #8
 8018936:	af00      	add	r7, sp, #0
 8018938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d101      	bne.n	8018944 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018940:	2301      	movs	r3, #1
 8018942:	e049      	b.n	80189d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801894a:	b2db      	uxtb	r3, r3
 801894c:	2b00      	cmp	r3, #0
 801894e:	d106      	bne.n	801895e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	2200      	movs	r2, #0
 8018954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f000 f841 	bl	80189e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	2202      	movs	r2, #2
 8018962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681a      	ldr	r2, [r3, #0]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	3304      	adds	r3, #4
 801896e:	4619      	mov	r1, r3
 8018970:	4610      	mov	r0, r2
 8018972:	f000 f9d5 	bl	8018d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2201      	movs	r2, #1
 801897a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2201      	movs	r2, #1
 8018982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2201      	movs	r2, #1
 801898a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	2201      	movs	r2, #1
 8018992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2201      	movs	r2, #1
 801899a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	2201      	movs	r2, #1
 80189a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2201      	movs	r2, #1
 80189aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2201      	movs	r2, #1
 80189b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	2201      	movs	r2, #1
 80189ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	2201      	movs	r2, #1
 80189c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	2201      	movs	r2, #1
 80189ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2201      	movs	r2, #1
 80189d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80189d6:	2300      	movs	r3, #0
}
 80189d8:	4618      	mov	r0, r3
 80189da:	3708      	adds	r7, #8
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd80      	pop	{r7, pc}

080189e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80189e0:	b480      	push	{r7}
 80189e2:	b083      	sub	sp, #12
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr

080189f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80189f4:	b480      	push	{r7}
 80189f6:	b085      	sub	sp, #20
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d001      	beq.n	8018a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018a08:	2301      	movs	r3, #1
 8018a0a:	e036      	b.n	8018a7a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	2202      	movs	r2, #2
 8018a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	68da      	ldr	r2, [r3, #12]
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	f042 0201 	orr.w	r2, r2, #1
 8018a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	4a17      	ldr	r2, [pc, #92]	; (8018a88 <HAL_TIM_Base_Start_IT+0x94>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d004      	beq.n	8018a38 <HAL_TIM_Base_Start_IT+0x44>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018a36:	d115      	bne.n	8018a64 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	689a      	ldr	r2, [r3, #8]
 8018a3e:	4b13      	ldr	r3, [pc, #76]	; (8018a8c <HAL_TIM_Base_Start_IT+0x98>)
 8018a40:	4013      	ands	r3, r2
 8018a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	2b06      	cmp	r3, #6
 8018a48:	d015      	beq.n	8018a76 <HAL_TIM_Base_Start_IT+0x82>
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a50:	d011      	beq.n	8018a76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	681a      	ldr	r2, [r3, #0]
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	f042 0201 	orr.w	r2, r2, #1
 8018a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a62:	e008      	b.n	8018a76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	f042 0201 	orr.w	r2, r2, #1
 8018a72:	601a      	str	r2, [r3, #0]
 8018a74:	e000      	b.n	8018a78 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8018a78:	2300      	movs	r3, #0
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3714      	adds	r7, #20
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a84:	4770      	bx	lr
 8018a86:	bf00      	nop
 8018a88:	40012c00 	.word	0x40012c00
 8018a8c:	00010007 	.word	0x00010007

08018a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	691b      	ldr	r3, [r3, #16]
 8018a9e:	f003 0302 	and.w	r3, r3, #2
 8018aa2:	2b02      	cmp	r3, #2
 8018aa4:	d122      	bne.n	8018aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	f003 0302 	and.w	r3, r3, #2
 8018ab0:	2b02      	cmp	r3, #2
 8018ab2:	d11b      	bne.n	8018aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	f06f 0202 	mvn.w	r2, #2
 8018abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	699b      	ldr	r3, [r3, #24]
 8018aca:	f003 0303 	and.w	r3, r3, #3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d003      	beq.n	8018ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f000 f905 	bl	8018ce2 <HAL_TIM_IC_CaptureCallback>
 8018ad8:	e005      	b.n	8018ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f000 f8f7 	bl	8018cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018ae0:	6878      	ldr	r0, [r7, #4]
 8018ae2:	f000 f908 	bl	8018cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	691b      	ldr	r3, [r3, #16]
 8018af2:	f003 0304 	and.w	r3, r3, #4
 8018af6:	2b04      	cmp	r3, #4
 8018af8:	d122      	bne.n	8018b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	f003 0304 	and.w	r3, r3, #4
 8018b04:	2b04      	cmp	r3, #4
 8018b06:	d11b      	bne.n	8018b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	f06f 0204 	mvn.w	r2, #4
 8018b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	2202      	movs	r2, #2
 8018b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	699b      	ldr	r3, [r3, #24]
 8018b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d003      	beq.n	8018b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018b26:	6878      	ldr	r0, [r7, #4]
 8018b28:	f000 f8db 	bl	8018ce2 <HAL_TIM_IC_CaptureCallback>
 8018b2c:	e005      	b.n	8018b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f000 f8cd 	bl	8018cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018b34:	6878      	ldr	r0, [r7, #4]
 8018b36:	f000 f8de 	bl	8018cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	691b      	ldr	r3, [r3, #16]
 8018b46:	f003 0308 	and.w	r3, r3, #8
 8018b4a:	2b08      	cmp	r3, #8
 8018b4c:	d122      	bne.n	8018b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	68db      	ldr	r3, [r3, #12]
 8018b54:	f003 0308 	and.w	r3, r3, #8
 8018b58:	2b08      	cmp	r3, #8
 8018b5a:	d11b      	bne.n	8018b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	f06f 0208 	mvn.w	r2, #8
 8018b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2204      	movs	r2, #4
 8018b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	69db      	ldr	r3, [r3, #28]
 8018b72:	f003 0303 	and.w	r3, r3, #3
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d003      	beq.n	8018b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018b7a:	6878      	ldr	r0, [r7, #4]
 8018b7c:	f000 f8b1 	bl	8018ce2 <HAL_TIM_IC_CaptureCallback>
 8018b80:	e005      	b.n	8018b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	f000 f8a3 	bl	8018cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018b88:	6878      	ldr	r0, [r7, #4]
 8018b8a:	f000 f8b4 	bl	8018cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	691b      	ldr	r3, [r3, #16]
 8018b9a:	f003 0310 	and.w	r3, r3, #16
 8018b9e:	2b10      	cmp	r3, #16
 8018ba0:	d122      	bne.n	8018be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	f003 0310 	and.w	r3, r3, #16
 8018bac:	2b10      	cmp	r3, #16
 8018bae:	d11b      	bne.n	8018be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f06f 0210 	mvn.w	r2, #16
 8018bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2208      	movs	r2, #8
 8018bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	69db      	ldr	r3, [r3, #28]
 8018bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d003      	beq.n	8018bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	f000 f887 	bl	8018ce2 <HAL_TIM_IC_CaptureCallback>
 8018bd4:	e005      	b.n	8018be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018bd6:	6878      	ldr	r0, [r7, #4]
 8018bd8:	f000 f879 	bl	8018cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018bdc:	6878      	ldr	r0, [r7, #4]
 8018bde:	f000 f88a 	bl	8018cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	2200      	movs	r2, #0
 8018be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	691b      	ldr	r3, [r3, #16]
 8018bee:	f003 0301 	and.w	r3, r3, #1
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	d10e      	bne.n	8018c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	f003 0301 	and.w	r3, r3, #1
 8018c00:	2b01      	cmp	r3, #1
 8018c02:	d107      	bne.n	8018c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	f06f 0201 	mvn.w	r2, #1
 8018c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018c0e:	6878      	ldr	r0, [r7, #4]
 8018c10:	f7e7 ffa6 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	691b      	ldr	r3, [r3, #16]
 8018c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c1e:	2b80      	cmp	r3, #128	; 0x80
 8018c20:	d10e      	bne.n	8018c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	68db      	ldr	r3, [r3, #12]
 8018c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c2c:	2b80      	cmp	r3, #128	; 0x80
 8018c2e:	d107      	bne.n	8018c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018c3a:	6878      	ldr	r0, [r7, #4]
 8018c3c:	f000 f8de 	bl	8018dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	691b      	ldr	r3, [r3, #16]
 8018c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c4e:	d10e      	bne.n	8018c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c5a:	2b80      	cmp	r3, #128	; 0x80
 8018c5c:	d107      	bne.n	8018c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f000 f8d1 	bl	8018e10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	691b      	ldr	r3, [r3, #16]
 8018c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c78:	2b40      	cmp	r3, #64	; 0x40
 8018c7a:	d10e      	bne.n	8018c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	68db      	ldr	r3, [r3, #12]
 8018c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c86:	2b40      	cmp	r3, #64	; 0x40
 8018c88:	d107      	bne.n	8018c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f000 f838 	bl	8018d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	691b      	ldr	r3, [r3, #16]
 8018ca0:	f003 0320 	and.w	r3, r3, #32
 8018ca4:	2b20      	cmp	r3, #32
 8018ca6:	d10e      	bne.n	8018cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	68db      	ldr	r3, [r3, #12]
 8018cae:	f003 0320 	and.w	r3, r3, #32
 8018cb2:	2b20      	cmp	r3, #32
 8018cb4:	d107      	bne.n	8018cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	f06f 0220 	mvn.w	r2, #32
 8018cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018cc0:	6878      	ldr	r0, [r7, #4]
 8018cc2:	f000 f891 	bl	8018de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018cc6:	bf00      	nop
 8018cc8:	3708      	adds	r7, #8
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}

08018cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018cce:	b480      	push	{r7}
 8018cd0:	b083      	sub	sp, #12
 8018cd2:	af00      	add	r7, sp, #0
 8018cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018cd6:	bf00      	nop
 8018cd8:	370c      	adds	r7, #12
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce0:	4770      	bx	lr

08018ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018ce2:	b480      	push	{r7}
 8018ce4:	b083      	sub	sp, #12
 8018ce6:	af00      	add	r7, sp, #0
 8018ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018cea:	bf00      	nop
 8018cec:	370c      	adds	r7, #12
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr

08018cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018cf6:	b480      	push	{r7}
 8018cf8:	b083      	sub	sp, #12
 8018cfa:	af00      	add	r7, sp, #0
 8018cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018cfe:	bf00      	nop
 8018d00:	370c      	adds	r7, #12
 8018d02:	46bd      	mov	sp, r7
 8018d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d08:	4770      	bx	lr

08018d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018d0a:	b480      	push	{r7}
 8018d0c:	b083      	sub	sp, #12
 8018d0e:	af00      	add	r7, sp, #0
 8018d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018d12:	bf00      	nop
 8018d14:	370c      	adds	r7, #12
 8018d16:	46bd      	mov	sp, r7
 8018d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1c:	4770      	bx	lr
	...

08018d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018d20:	b480      	push	{r7}
 8018d22:	b085      	sub	sp, #20
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	4a2a      	ldr	r2, [pc, #168]	; (8018ddc <TIM_Base_SetConfig+0xbc>)
 8018d34:	4293      	cmp	r3, r2
 8018d36:	d003      	beq.n	8018d40 <TIM_Base_SetConfig+0x20>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018d3e:	d108      	bne.n	8018d52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	68fa      	ldr	r2, [r7, #12]
 8018d4e:	4313      	orrs	r3, r2
 8018d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	4a21      	ldr	r2, [pc, #132]	; (8018ddc <TIM_Base_SetConfig+0xbc>)
 8018d56:	4293      	cmp	r3, r2
 8018d58:	d00b      	beq.n	8018d72 <TIM_Base_SetConfig+0x52>
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018d60:	d007      	beq.n	8018d72 <TIM_Base_SetConfig+0x52>
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	4a1e      	ldr	r2, [pc, #120]	; (8018de0 <TIM_Base_SetConfig+0xc0>)
 8018d66:	4293      	cmp	r3, r2
 8018d68:	d003      	beq.n	8018d72 <TIM_Base_SetConfig+0x52>
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	4a1d      	ldr	r2, [pc, #116]	; (8018de4 <TIM_Base_SetConfig+0xc4>)
 8018d6e:	4293      	cmp	r3, r2
 8018d70:	d108      	bne.n	8018d84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018d7a:	683b      	ldr	r3, [r7, #0]
 8018d7c:	68db      	ldr	r3, [r3, #12]
 8018d7e:	68fa      	ldr	r2, [r7, #12]
 8018d80:	4313      	orrs	r3, r2
 8018d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	695b      	ldr	r3, [r3, #20]
 8018d8e:	4313      	orrs	r3, r2
 8018d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	68fa      	ldr	r2, [r7, #12]
 8018d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	689a      	ldr	r2, [r3, #8]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	681a      	ldr	r2, [r3, #0]
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	4a0c      	ldr	r2, [pc, #48]	; (8018ddc <TIM_Base_SetConfig+0xbc>)
 8018dac:	4293      	cmp	r3, r2
 8018dae:	d007      	beq.n	8018dc0 <TIM_Base_SetConfig+0xa0>
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	4a0b      	ldr	r2, [pc, #44]	; (8018de0 <TIM_Base_SetConfig+0xc0>)
 8018db4:	4293      	cmp	r3, r2
 8018db6:	d003      	beq.n	8018dc0 <TIM_Base_SetConfig+0xa0>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	4a0a      	ldr	r2, [pc, #40]	; (8018de4 <TIM_Base_SetConfig+0xc4>)
 8018dbc:	4293      	cmp	r3, r2
 8018dbe:	d103      	bne.n	8018dc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	691a      	ldr	r2, [r3, #16]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2201      	movs	r2, #1
 8018dcc:	615a      	str	r2, [r3, #20]
}
 8018dce:	bf00      	nop
 8018dd0:	3714      	adds	r7, #20
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd8:	4770      	bx	lr
 8018dda:	bf00      	nop
 8018ddc:	40012c00 	.word	0x40012c00
 8018de0:	40014400 	.word	0x40014400
 8018de4:	40014800 	.word	0x40014800

08018de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018de8:	b480      	push	{r7}
 8018dea:	b083      	sub	sp, #12
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018df0:	bf00      	nop
 8018df2:	370c      	adds	r7, #12
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b083      	sub	sp, #12
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018e04:	bf00      	nop
 8018e06:	370c      	adds	r7, #12
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr

08018e10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018e18:	bf00      	nop
 8018e1a:	370c      	adds	r7, #12
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e22:	4770      	bx	lr

08018e24 <LL_RCC_GetUSARTClockSource>:
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018e30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	4013      	ands	r3, r2
}
 8018e38:	4618      	mov	r0, r3
 8018e3a:	370c      	adds	r7, #12
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e42:	4770      	bx	lr

08018e44 <LL_RCC_GetLPUARTClockSource>:
{
 8018e44:	b480      	push	{r7}
 8018e46:	b083      	sub	sp, #12
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	4013      	ands	r3, r2
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	370c      	adds	r7, #12
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e62:	4770      	bx	lr

08018e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b082      	sub	sp, #8
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d101      	bne.n	8018e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018e72:	2301      	movs	r3, #1
 8018e74:	e042      	b.n	8018efc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d106      	bne.n	8018e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2200      	movs	r2, #0
 8018e84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	f7e8 fa39 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2224      	movs	r2, #36	; 0x24
 8018e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	f022 0201 	bic.w	r2, r2, #1
 8018ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018ea6:	6878      	ldr	r0, [r7, #4]
 8018ea8:	f000 f82c 	bl	8018f04 <UART_SetConfig>
 8018eac:	4603      	mov	r3, r0
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	d101      	bne.n	8018eb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	e022      	b.n	8018efc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d002      	beq.n	8018ec4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018ebe:	6878      	ldr	r0, [r7, #4]
 8018ec0:	f000 fa48 	bl	8019354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	685a      	ldr	r2, [r3, #4]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	689a      	ldr	r2, [r3, #8]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	681a      	ldr	r2, [r3, #0]
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	f042 0201 	orr.w	r2, r2, #1
 8018ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	f000 facf 	bl	8019498 <UART_CheckIdleState>
 8018efa:	4603      	mov	r3, r0
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3708      	adds	r7, #8
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd80      	pop	{r7, pc}

08018f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018f08:	b08c      	sub	sp, #48	; 0x30
 8018f0a:	af00      	add	r7, sp, #0
 8018f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	689a      	ldr	r2, [r3, #8]
 8018f18:	697b      	ldr	r3, [r7, #20]
 8018f1a:	691b      	ldr	r3, [r3, #16]
 8018f1c:	431a      	orrs	r2, r3
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	695b      	ldr	r3, [r3, #20]
 8018f22:	431a      	orrs	r2, r3
 8018f24:	697b      	ldr	r3, [r7, #20]
 8018f26:	69db      	ldr	r3, [r3, #28]
 8018f28:	4313      	orrs	r3, r2
 8018f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018f2c:	697b      	ldr	r3, [r7, #20]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	681a      	ldr	r2, [r3, #0]
 8018f32:	4baf      	ldr	r3, [pc, #700]	; (80191f0 <UART_SetConfig+0x2ec>)
 8018f34:	4013      	ands	r3, r2
 8018f36:	697a      	ldr	r2, [r7, #20]
 8018f38:	6812      	ldr	r2, [r2, #0]
 8018f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f3c:	430b      	orrs	r3, r1
 8018f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	685b      	ldr	r3, [r3, #4]
 8018f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	68da      	ldr	r2, [r3, #12]
 8018f4e:	697b      	ldr	r3, [r7, #20]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	430a      	orrs	r2, r1
 8018f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018f56:	697b      	ldr	r3, [r7, #20]
 8018f58:	699b      	ldr	r3, [r3, #24]
 8018f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018f5c:	697b      	ldr	r3, [r7, #20]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	4aa4      	ldr	r2, [pc, #656]	; (80191f4 <UART_SetConfig+0x2f0>)
 8018f62:	4293      	cmp	r3, r2
 8018f64:	d004      	beq.n	8018f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	6a1b      	ldr	r3, [r3, #32]
 8018f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f6c:	4313      	orrs	r3, r2
 8018f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	689b      	ldr	r3, [r3, #8]
 8018f76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018f7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018f7e:	697a      	ldr	r2, [r7, #20]
 8018f80:	6812      	ldr	r2, [r2, #0]
 8018f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f84:	430b      	orrs	r3, r1
 8018f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f8e:	f023 010f 	bic.w	r1, r3, #15
 8018f92:	697b      	ldr	r3, [r7, #20]
 8018f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	430a      	orrs	r2, r1
 8018f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	4a95      	ldr	r2, [pc, #596]	; (80191f8 <UART_SetConfig+0x2f4>)
 8018fa4:	4293      	cmp	r3, r2
 8018fa6:	d125      	bne.n	8018ff4 <UART_SetConfig+0xf0>
 8018fa8:	2003      	movs	r0, #3
 8018faa:	f7ff ff3b 	bl	8018e24 <LL_RCC_GetUSARTClockSource>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	2b03      	cmp	r3, #3
 8018fb2:	d81b      	bhi.n	8018fec <UART_SetConfig+0xe8>
 8018fb4:	a201      	add	r2, pc, #4	; (adr r2, 8018fbc <UART_SetConfig+0xb8>)
 8018fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fba:	bf00      	nop
 8018fbc:	08018fcd 	.word	0x08018fcd
 8018fc0:	08018fdd 	.word	0x08018fdd
 8018fc4:	08018fd5 	.word	0x08018fd5
 8018fc8:	08018fe5 	.word	0x08018fe5
 8018fcc:	2301      	movs	r3, #1
 8018fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018fd2:	e042      	b.n	801905a <UART_SetConfig+0x156>
 8018fd4:	2302      	movs	r3, #2
 8018fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018fda:	e03e      	b.n	801905a <UART_SetConfig+0x156>
 8018fdc:	2304      	movs	r3, #4
 8018fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018fe2:	e03a      	b.n	801905a <UART_SetConfig+0x156>
 8018fe4:	2308      	movs	r3, #8
 8018fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018fea:	e036      	b.n	801905a <UART_SetConfig+0x156>
 8018fec:	2310      	movs	r3, #16
 8018fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018ff2:	e032      	b.n	801905a <UART_SetConfig+0x156>
 8018ff4:	697b      	ldr	r3, [r7, #20]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	4a7e      	ldr	r2, [pc, #504]	; (80191f4 <UART_SetConfig+0x2f0>)
 8018ffa:	4293      	cmp	r3, r2
 8018ffc:	d12a      	bne.n	8019054 <UART_SetConfig+0x150>
 8018ffe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8019002:	f7ff ff1f 	bl	8018e44 <LL_RCC_GetLPUARTClockSource>
 8019006:	4603      	mov	r3, r0
 8019008:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801900c:	d01a      	beq.n	8019044 <UART_SetConfig+0x140>
 801900e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8019012:	d81b      	bhi.n	801904c <UART_SetConfig+0x148>
 8019014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019018:	d00c      	beq.n	8019034 <UART_SetConfig+0x130>
 801901a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801901e:	d815      	bhi.n	801904c <UART_SetConfig+0x148>
 8019020:	2b00      	cmp	r3, #0
 8019022:	d003      	beq.n	801902c <UART_SetConfig+0x128>
 8019024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019028:	d008      	beq.n	801903c <UART_SetConfig+0x138>
 801902a:	e00f      	b.n	801904c <UART_SetConfig+0x148>
 801902c:	2300      	movs	r3, #0
 801902e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8019032:	e012      	b.n	801905a <UART_SetConfig+0x156>
 8019034:	2302      	movs	r3, #2
 8019036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801903a:	e00e      	b.n	801905a <UART_SetConfig+0x156>
 801903c:	2304      	movs	r3, #4
 801903e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8019042:	e00a      	b.n	801905a <UART_SetConfig+0x156>
 8019044:	2308      	movs	r3, #8
 8019046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801904a:	e006      	b.n	801905a <UART_SetConfig+0x156>
 801904c:	2310      	movs	r3, #16
 801904e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8019052:	e002      	b.n	801905a <UART_SetConfig+0x156>
 8019054:	2310      	movs	r3, #16
 8019056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	4a65      	ldr	r2, [pc, #404]	; (80191f4 <UART_SetConfig+0x2f0>)
 8019060:	4293      	cmp	r3, r2
 8019062:	f040 8097 	bne.w	8019194 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8019066:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801906a:	2b08      	cmp	r3, #8
 801906c:	d823      	bhi.n	80190b6 <UART_SetConfig+0x1b2>
 801906e:	a201      	add	r2, pc, #4	; (adr r2, 8019074 <UART_SetConfig+0x170>)
 8019070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019074:	08019099 	.word	0x08019099
 8019078:	080190b7 	.word	0x080190b7
 801907c:	080190a1 	.word	0x080190a1
 8019080:	080190b7 	.word	0x080190b7
 8019084:	080190a7 	.word	0x080190a7
 8019088:	080190b7 	.word	0x080190b7
 801908c:	080190b7 	.word	0x080190b7
 8019090:	080190b7 	.word	0x080190b7
 8019094:	080190af 	.word	0x080190af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019098:	f7fe ff00 	bl	8017e9c <HAL_RCC_GetPCLK1Freq>
 801909c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801909e:	e010      	b.n	80190c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80190a0:	4b56      	ldr	r3, [pc, #344]	; (80191fc <UART_SetConfig+0x2f8>)
 80190a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190a4:	e00d      	b.n	80190c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80190a6:	f7fe fe79 	bl	8017d9c <HAL_RCC_GetSysClockFreq>
 80190aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80190ac:	e009      	b.n	80190c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80190ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80190b4:	e005      	b.n	80190c2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80190b6:	2300      	movs	r3, #0
 80190b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80190ba:	2301      	movs	r3, #1
 80190bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80190c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80190c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 812b 	beq.w	8019320 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190ce:	4a4c      	ldr	r2, [pc, #304]	; (8019200 <UART_SetConfig+0x2fc>)
 80190d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80190d4:	461a      	mov	r2, r3
 80190d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80190dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	685a      	ldr	r2, [r3, #4]
 80190e2:	4613      	mov	r3, r2
 80190e4:	005b      	lsls	r3, r3, #1
 80190e6:	4413      	add	r3, r2
 80190e8:	69ba      	ldr	r2, [r7, #24]
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d305      	bcc.n	80190fa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80190ee:	697b      	ldr	r3, [r7, #20]
 80190f0:	685b      	ldr	r3, [r3, #4]
 80190f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80190f4:	69ba      	ldr	r2, [r7, #24]
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d903      	bls.n	8019102 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80190fa:	2301      	movs	r3, #1
 80190fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8019100:	e10e      	b.n	8019320 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019104:	2200      	movs	r2, #0
 8019106:	60bb      	str	r3, [r7, #8]
 8019108:	60fa      	str	r2, [r7, #12]
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801910e:	4a3c      	ldr	r2, [pc, #240]	; (8019200 <UART_SetConfig+0x2fc>)
 8019110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019114:	b29b      	uxth	r3, r3
 8019116:	2200      	movs	r2, #0
 8019118:	603b      	str	r3, [r7, #0]
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019124:	f7e7 f8cc 	bl	80002c0 <__aeabi_uldivmod>
 8019128:	4602      	mov	r2, r0
 801912a:	460b      	mov	r3, r1
 801912c:	4610      	mov	r0, r2
 801912e:	4619      	mov	r1, r3
 8019130:	f04f 0200 	mov.w	r2, #0
 8019134:	f04f 0300 	mov.w	r3, #0
 8019138:	020b      	lsls	r3, r1, #8
 801913a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801913e:	0202      	lsls	r2, r0, #8
 8019140:	6979      	ldr	r1, [r7, #20]
 8019142:	6849      	ldr	r1, [r1, #4]
 8019144:	0849      	lsrs	r1, r1, #1
 8019146:	2000      	movs	r0, #0
 8019148:	460c      	mov	r4, r1
 801914a:	4605      	mov	r5, r0
 801914c:	eb12 0804 	adds.w	r8, r2, r4
 8019150:	eb43 0905 	adc.w	r9, r3, r5
 8019154:	697b      	ldr	r3, [r7, #20]
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	2200      	movs	r2, #0
 801915a:	469a      	mov	sl, r3
 801915c:	4693      	mov	fp, r2
 801915e:	4652      	mov	r2, sl
 8019160:	465b      	mov	r3, fp
 8019162:	4640      	mov	r0, r8
 8019164:	4649      	mov	r1, r9
 8019166:	f7e7 f8ab 	bl	80002c0 <__aeabi_uldivmod>
 801916a:	4602      	mov	r2, r0
 801916c:	460b      	mov	r3, r1
 801916e:	4613      	mov	r3, r2
 8019170:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019172:	6a3b      	ldr	r3, [r7, #32]
 8019174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019178:	d308      	bcc.n	801918c <UART_SetConfig+0x288>
 801917a:	6a3b      	ldr	r3, [r7, #32]
 801917c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019180:	d204      	bcs.n	801918c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	6a3a      	ldr	r2, [r7, #32]
 8019188:	60da      	str	r2, [r3, #12]
 801918a:	e0c9      	b.n	8019320 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801918c:	2301      	movs	r3, #1
 801918e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8019192:	e0c5      	b.n	8019320 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019194:	697b      	ldr	r3, [r7, #20]
 8019196:	69db      	ldr	r3, [r3, #28]
 8019198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801919c:	d16d      	bne.n	801927a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801919e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80191a2:	3b01      	subs	r3, #1
 80191a4:	2b07      	cmp	r3, #7
 80191a6:	d82d      	bhi.n	8019204 <UART_SetConfig+0x300>
 80191a8:	a201      	add	r2, pc, #4	; (adr r2, 80191b0 <UART_SetConfig+0x2ac>)
 80191aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191ae:	bf00      	nop
 80191b0:	080191d1 	.word	0x080191d1
 80191b4:	080191d9 	.word	0x080191d9
 80191b8:	08019205 	.word	0x08019205
 80191bc:	080191df 	.word	0x080191df
 80191c0:	08019205 	.word	0x08019205
 80191c4:	08019205 	.word	0x08019205
 80191c8:	08019205 	.word	0x08019205
 80191cc:	080191e7 	.word	0x080191e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80191d0:	f7fe fe7a 	bl	8017ec8 <HAL_RCC_GetPCLK2Freq>
 80191d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80191d6:	e01b      	b.n	8019210 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80191d8:	4b08      	ldr	r3, [pc, #32]	; (80191fc <UART_SetConfig+0x2f8>)
 80191da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80191dc:	e018      	b.n	8019210 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80191de:	f7fe fddd 	bl	8017d9c <HAL_RCC_GetSysClockFreq>
 80191e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80191e4:	e014      	b.n	8019210 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80191e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80191ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80191ec:	e010      	b.n	8019210 <UART_SetConfig+0x30c>
 80191ee:	bf00      	nop
 80191f0:	cfff69f3 	.word	0xcfff69f3
 80191f4:	40008000 	.word	0x40008000
 80191f8:	40013800 	.word	0x40013800
 80191fc:	00f42400 	.word	0x00f42400
 8019200:	0801b1fc 	.word	0x0801b1fc
      default:
        pclk = 0U;
 8019204:	2300      	movs	r3, #0
 8019206:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8019208:	2301      	movs	r3, #1
 801920a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801920e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019212:	2b00      	cmp	r3, #0
 8019214:	f000 8084 	beq.w	8019320 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019218:	697b      	ldr	r3, [r7, #20]
 801921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801921c:	4a4b      	ldr	r2, [pc, #300]	; (801934c <UART_SetConfig+0x448>)
 801921e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019222:	461a      	mov	r2, r3
 8019224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019226:	fbb3 f3f2 	udiv	r3, r3, r2
 801922a:	005a      	lsls	r2, r3, #1
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	685b      	ldr	r3, [r3, #4]
 8019230:	085b      	lsrs	r3, r3, #1
 8019232:	441a      	add	r2, r3
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	685b      	ldr	r3, [r3, #4]
 8019238:	fbb2 f3f3 	udiv	r3, r2, r3
 801923c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801923e:	6a3b      	ldr	r3, [r7, #32]
 8019240:	2b0f      	cmp	r3, #15
 8019242:	d916      	bls.n	8019272 <UART_SetConfig+0x36e>
 8019244:	6a3b      	ldr	r3, [r7, #32]
 8019246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801924a:	d212      	bcs.n	8019272 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801924c:	6a3b      	ldr	r3, [r7, #32]
 801924e:	b29b      	uxth	r3, r3
 8019250:	f023 030f 	bic.w	r3, r3, #15
 8019254:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019256:	6a3b      	ldr	r3, [r7, #32]
 8019258:	085b      	lsrs	r3, r3, #1
 801925a:	b29b      	uxth	r3, r3
 801925c:	f003 0307 	and.w	r3, r3, #7
 8019260:	b29a      	uxth	r2, r3
 8019262:	8bfb      	ldrh	r3, [r7, #30]
 8019264:	4313      	orrs	r3, r2
 8019266:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	8bfa      	ldrh	r2, [r7, #30]
 801926e:	60da      	str	r2, [r3, #12]
 8019270:	e056      	b.n	8019320 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8019272:	2301      	movs	r3, #1
 8019274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8019278:	e052      	b.n	8019320 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801927a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801927e:	3b01      	subs	r3, #1
 8019280:	2b07      	cmp	r3, #7
 8019282:	d822      	bhi.n	80192ca <UART_SetConfig+0x3c6>
 8019284:	a201      	add	r2, pc, #4	; (adr r2, 801928c <UART_SetConfig+0x388>)
 8019286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801928a:	bf00      	nop
 801928c:	080192ad 	.word	0x080192ad
 8019290:	080192b5 	.word	0x080192b5
 8019294:	080192cb 	.word	0x080192cb
 8019298:	080192bb 	.word	0x080192bb
 801929c:	080192cb 	.word	0x080192cb
 80192a0:	080192cb 	.word	0x080192cb
 80192a4:	080192cb 	.word	0x080192cb
 80192a8:	080192c3 	.word	0x080192c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80192ac:	f7fe fe0c 	bl	8017ec8 <HAL_RCC_GetPCLK2Freq>
 80192b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80192b2:	e010      	b.n	80192d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80192b4:	4b26      	ldr	r3, [pc, #152]	; (8019350 <UART_SetConfig+0x44c>)
 80192b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80192b8:	e00d      	b.n	80192d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80192ba:	f7fe fd6f 	bl	8017d9c <HAL_RCC_GetSysClockFreq>
 80192be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80192c0:	e009      	b.n	80192d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80192c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80192c8:	e005      	b.n	80192d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80192ca:	2300      	movs	r3, #0
 80192cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80192ce:	2301      	movs	r3, #1
 80192d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80192d4:	bf00      	nop
    }

    if (pclk != 0U)
 80192d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d021      	beq.n	8019320 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192dc:	697b      	ldr	r3, [r7, #20]
 80192de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e0:	4a1a      	ldr	r2, [pc, #104]	; (801934c <UART_SetConfig+0x448>)
 80192e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192e6:	461a      	mov	r2, r3
 80192e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80192ee:	697b      	ldr	r3, [r7, #20]
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	085b      	lsrs	r3, r3, #1
 80192f4:	441a      	add	r2, r3
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80192fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019300:	6a3b      	ldr	r3, [r7, #32]
 8019302:	2b0f      	cmp	r3, #15
 8019304:	d909      	bls.n	801931a <UART_SetConfig+0x416>
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801930c:	d205      	bcs.n	801931a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801930e:	6a3b      	ldr	r3, [r7, #32]
 8019310:	b29a      	uxth	r2, r3
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	60da      	str	r2, [r3, #12]
 8019318:	e002      	b.n	8019320 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801931a:	2301      	movs	r3, #1
 801931c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	2201      	movs	r2, #1
 8019324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8019328:	697b      	ldr	r3, [r7, #20]
 801932a:	2201      	movs	r2, #1
 801932c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019330:	697b      	ldr	r3, [r7, #20]
 8019332:	2200      	movs	r2, #0
 8019334:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	2200      	movs	r2, #0
 801933a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801933c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8019340:	4618      	mov	r0, r3
 8019342:	3730      	adds	r7, #48	; 0x30
 8019344:	46bd      	mov	sp, r7
 8019346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801934a:	bf00      	nop
 801934c:	0801b1fc 	.word	0x0801b1fc
 8019350:	00f42400 	.word	0x00f42400

08019354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019354:	b480      	push	{r7}
 8019356:	b083      	sub	sp, #12
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	2b00      	cmp	r3, #0
 8019366:	d00a      	beq.n	801937e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	430a      	orrs	r2, r1
 801937c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019382:	f003 0302 	and.w	r3, r3, #2
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00a      	beq.n	80193a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	685b      	ldr	r3, [r3, #4]
 8019390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	430a      	orrs	r2, r1
 801939e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193a4:	f003 0304 	and.w	r3, r3, #4
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d00a      	beq.n	80193c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	685b      	ldr	r3, [r3, #4]
 80193b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	430a      	orrs	r2, r1
 80193c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193c6:	f003 0308 	and.w	r3, r3, #8
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d00a      	beq.n	80193e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	685b      	ldr	r3, [r3, #4]
 80193d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	430a      	orrs	r2, r1
 80193e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193e8:	f003 0310 	and.w	r3, r3, #16
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d00a      	beq.n	8019406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	689b      	ldr	r3, [r3, #8]
 80193f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	430a      	orrs	r2, r1
 8019404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801940a:	f003 0320 	and.w	r3, r3, #32
 801940e:	2b00      	cmp	r3, #0
 8019410:	d00a      	beq.n	8019428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	689b      	ldr	r3, [r3, #8]
 8019418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	430a      	orrs	r2, r1
 8019426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801942c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019430:	2b00      	cmp	r3, #0
 8019432:	d01a      	beq.n	801946a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	430a      	orrs	r2, r1
 8019448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801944e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019452:	d10a      	bne.n	801946a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	685b      	ldr	r3, [r3, #4]
 801945a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	430a      	orrs	r2, r1
 8019468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019472:	2b00      	cmp	r3, #0
 8019474:	d00a      	beq.n	801948c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	685b      	ldr	r3, [r3, #4]
 801947c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	430a      	orrs	r2, r1
 801948a:	605a      	str	r2, [r3, #4]
  }
}
 801948c:	bf00      	nop
 801948e:	370c      	adds	r7, #12
 8019490:	46bd      	mov	sp, r7
 8019492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019496:	4770      	bx	lr

08019498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b098      	sub	sp, #96	; 0x60
 801949c:	af02      	add	r7, sp, #8
 801949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2200      	movs	r2, #0
 80194a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80194a8:	f7fc f93c 	bl	8015724 <HAL_GetTick>
 80194ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	f003 0308 	and.w	r3, r3, #8
 80194b8:	2b08      	cmp	r3, #8
 80194ba:	d12f      	bne.n	801951c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80194bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80194c0:	9300      	str	r3, [sp, #0]
 80194c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194c4:	2200      	movs	r2, #0
 80194c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80194ca:	6878      	ldr	r0, [r7, #4]
 80194cc:	f000 f88e 	bl	80195ec <UART_WaitOnFlagUntilTimeout>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d022      	beq.n	801951c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194de:	e853 3f00 	ldrex	r3, [r3]
 80194e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80194e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80194ea:	653b      	str	r3, [r7, #80]	; 0x50
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	461a      	mov	r2, r3
 80194f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194f4:	647b      	str	r3, [r7, #68]	; 0x44
 80194f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80194fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194fc:	e841 2300 	strex	r3, r2, [r1]
 8019500:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8019502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019504:	2b00      	cmp	r3, #0
 8019506:	d1e6      	bne.n	80194d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	2220      	movs	r2, #32
 801950c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	2200      	movs	r2, #0
 8019514:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019518:	2303      	movs	r3, #3
 801951a:	e063      	b.n	80195e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f003 0304 	and.w	r3, r3, #4
 8019526:	2b04      	cmp	r3, #4
 8019528:	d149      	bne.n	80195be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801952a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801952e:	9300      	str	r3, [sp, #0]
 8019530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019532:	2200      	movs	r2, #0
 8019534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8019538:	6878      	ldr	r0, [r7, #4]
 801953a:	f000 f857 	bl	80195ec <UART_WaitOnFlagUntilTimeout>
 801953e:	4603      	mov	r3, r0
 8019540:	2b00      	cmp	r3, #0
 8019542:	d03c      	beq.n	80195be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801954c:	e853 3f00 	ldrex	r3, [r3]
 8019550:	623b      	str	r3, [r7, #32]
   return(result);
 8019552:	6a3b      	ldr	r3, [r7, #32]
 8019554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8019558:	64fb      	str	r3, [r7, #76]	; 0x4c
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	461a      	mov	r2, r3
 8019560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019562:	633b      	str	r3, [r7, #48]	; 0x30
 8019564:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801956a:	e841 2300 	strex	r3, r2, [r1]
 801956e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8019570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019572:	2b00      	cmp	r3, #0
 8019574:	d1e6      	bne.n	8019544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	3308      	adds	r3, #8
 801957c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801957e:	693b      	ldr	r3, [r7, #16]
 8019580:	e853 3f00 	ldrex	r3, [r3]
 8019584:	60fb      	str	r3, [r7, #12]
   return(result);
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	f023 0301 	bic.w	r3, r3, #1
 801958c:	64bb      	str	r3, [r7, #72]	; 0x48
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	3308      	adds	r3, #8
 8019594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019596:	61fa      	str	r2, [r7, #28]
 8019598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801959a:	69b9      	ldr	r1, [r7, #24]
 801959c:	69fa      	ldr	r2, [r7, #28]
 801959e:	e841 2300 	strex	r3, r2, [r1]
 80195a2:	617b      	str	r3, [r7, #20]
   return(result);
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d1e5      	bne.n	8019576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	2220      	movs	r2, #32
 80195ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	2200      	movs	r2, #0
 80195b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80195ba:	2303      	movs	r3, #3
 80195bc:	e012      	b.n	80195e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	2220      	movs	r2, #32
 80195c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	2220      	movs	r2, #32
 80195ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	2200      	movs	r2, #0
 80195d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2200      	movs	r2, #0
 80195d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	2200      	movs	r2, #0
 80195de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80195e2:	2300      	movs	r3, #0
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	3758      	adds	r7, #88	; 0x58
 80195e8:	46bd      	mov	sp, r7
 80195ea:	bd80      	pop	{r7, pc}

080195ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b084      	sub	sp, #16
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	60f8      	str	r0, [r7, #12]
 80195f4:	60b9      	str	r1, [r7, #8]
 80195f6:	603b      	str	r3, [r7, #0]
 80195f8:	4613      	mov	r3, r2
 80195fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80195fc:	e049      	b.n	8019692 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80195fe:	69bb      	ldr	r3, [r7, #24]
 8019600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019604:	d045      	beq.n	8019692 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019606:	f7fc f88d 	bl	8015724 <HAL_GetTick>
 801960a:	4602      	mov	r2, r0
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	1ad3      	subs	r3, r2, r3
 8019610:	69ba      	ldr	r2, [r7, #24]
 8019612:	429a      	cmp	r2, r3
 8019614:	d302      	bcc.n	801961c <UART_WaitOnFlagUntilTimeout+0x30>
 8019616:	69bb      	ldr	r3, [r7, #24]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d101      	bne.n	8019620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801961c:	2303      	movs	r3, #3
 801961e:	e048      	b.n	80196b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	f003 0304 	and.w	r3, r3, #4
 801962a:	2b00      	cmp	r3, #0
 801962c:	d031      	beq.n	8019692 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	69db      	ldr	r3, [r3, #28]
 8019634:	f003 0308 	and.w	r3, r3, #8
 8019638:	2b08      	cmp	r3, #8
 801963a:	d110      	bne.n	801965e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2208      	movs	r2, #8
 8019642:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8019644:	68f8      	ldr	r0, [r7, #12]
 8019646:	f000 f838 	bl	80196ba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	2208      	movs	r2, #8
 801964e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	2200      	movs	r2, #0
 8019656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801965a:	2301      	movs	r3, #1
 801965c:	e029      	b.n	80196b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	69db      	ldr	r3, [r3, #28]
 8019664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801966c:	d111      	bne.n	8019692 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019678:	68f8      	ldr	r0, [r7, #12]
 801967a:	f000 f81e 	bl	80196ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	2220      	movs	r2, #32
 8019682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	2200      	movs	r2, #0
 801968a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801968e:	2303      	movs	r3, #3
 8019690:	e00f      	b.n	80196b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	69da      	ldr	r2, [r3, #28]
 8019698:	68bb      	ldr	r3, [r7, #8]
 801969a:	4013      	ands	r3, r2
 801969c:	68ba      	ldr	r2, [r7, #8]
 801969e:	429a      	cmp	r2, r3
 80196a0:	bf0c      	ite	eq
 80196a2:	2301      	moveq	r3, #1
 80196a4:	2300      	movne	r3, #0
 80196a6:	b2db      	uxtb	r3, r3
 80196a8:	461a      	mov	r2, r3
 80196aa:	79fb      	ldrb	r3, [r7, #7]
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d0a6      	beq.n	80195fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80196b0:	2300      	movs	r3, #0
}
 80196b2:	4618      	mov	r0, r3
 80196b4:	3710      	adds	r7, #16
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}

080196ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80196ba:	b480      	push	{r7}
 80196bc:	b095      	sub	sp, #84	; 0x54
 80196be:	af00      	add	r7, sp, #0
 80196c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ca:	e853 3f00 	ldrex	r3, [r3]
 80196ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80196d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80196d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	461a      	mov	r2, r3
 80196de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80196e0:	643b      	str	r3, [r7, #64]	; 0x40
 80196e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80196e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80196e8:	e841 2300 	strex	r3, r2, [r1]
 80196ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80196ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d1e6      	bne.n	80196c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	3308      	adds	r3, #8
 80196fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196fc:	6a3b      	ldr	r3, [r7, #32]
 80196fe:	e853 3f00 	ldrex	r3, [r3]
 8019702:	61fb      	str	r3, [r7, #28]
   return(result);
 8019704:	69fb      	ldr	r3, [r7, #28]
 8019706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801970a:	f023 0301 	bic.w	r3, r3, #1
 801970e:	64bb      	str	r3, [r7, #72]	; 0x48
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	3308      	adds	r3, #8
 8019716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019718:	62fa      	str	r2, [r7, #44]	; 0x2c
 801971a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801971c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801971e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019720:	e841 2300 	strex	r3, r2, [r1]
 8019724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019728:	2b00      	cmp	r3, #0
 801972a:	d1e3      	bne.n	80196f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019730:	2b01      	cmp	r3, #1
 8019732:	d118      	bne.n	8019766 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	e853 3f00 	ldrex	r3, [r3]
 8019740:	60bb      	str	r3, [r7, #8]
   return(result);
 8019742:	68bb      	ldr	r3, [r7, #8]
 8019744:	f023 0310 	bic.w	r3, r3, #16
 8019748:	647b      	str	r3, [r7, #68]	; 0x44
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	461a      	mov	r2, r3
 8019750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019752:	61bb      	str	r3, [r7, #24]
 8019754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019756:	6979      	ldr	r1, [r7, #20]
 8019758:	69ba      	ldr	r2, [r7, #24]
 801975a:	e841 2300 	strex	r3, r2, [r1]
 801975e:	613b      	str	r3, [r7, #16]
   return(result);
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d1e6      	bne.n	8019734 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	2220      	movs	r2, #32
 801976a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	2200      	movs	r2, #0
 8019772:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2200      	movs	r2, #0
 8019778:	675a      	str	r2, [r3, #116]	; 0x74
}
 801977a:	bf00      	nop
 801977c:	3754      	adds	r7, #84	; 0x54
 801977e:	46bd      	mov	sp, r7
 8019780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019784:	4770      	bx	lr

08019786 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8019786:	b480      	push	{r7}
 8019788:	b085      	sub	sp, #20
 801978a:	af00      	add	r7, sp, #0
 801978c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019794:	2b01      	cmp	r3, #1
 8019796:	d101      	bne.n	801979c <HAL_UARTEx_DisableFifoMode+0x16>
 8019798:	2302      	movs	r3, #2
 801979a:	e027      	b.n	80197ec <HAL_UARTEx_DisableFifoMode+0x66>
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2201      	movs	r2, #1
 80197a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2224      	movs	r2, #36	; 0x24
 80197a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	681a      	ldr	r2, [r3, #0]
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	f022 0201 	bic.w	r2, r2, #1
 80197c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80197ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	2200      	movs	r2, #0
 80197d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	68fa      	ldr	r2, [r7, #12]
 80197d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	2220      	movs	r2, #32
 80197de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	2200      	movs	r2, #0
 80197e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80197ea:	2300      	movs	r3, #0
}
 80197ec:	4618      	mov	r0, r3
 80197ee:	3714      	adds	r7, #20
 80197f0:	46bd      	mov	sp, r7
 80197f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f6:	4770      	bx	lr

080197f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b084      	sub	sp, #16
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
 8019800:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019808:	2b01      	cmp	r3, #1
 801980a:	d101      	bne.n	8019810 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801980c:	2302      	movs	r3, #2
 801980e:	e02d      	b.n	801986c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2201      	movs	r2, #1
 8019814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	2224      	movs	r2, #36	; 0x24
 801981c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	681a      	ldr	r2, [r3, #0]
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	f022 0201 	bic.w	r2, r2, #1
 8019836:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	689b      	ldr	r3, [r3, #8]
 801983e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	683a      	ldr	r2, [r7, #0]
 8019848:	430a      	orrs	r2, r1
 801984a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801984c:	6878      	ldr	r0, [r7, #4]
 801984e:	f000 f84f 	bl	80198f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	68fa      	ldr	r2, [r7, #12]
 8019858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	2220      	movs	r2, #32
 801985e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	2200      	movs	r2, #0
 8019866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801986a:	2300      	movs	r3, #0
}
 801986c:	4618      	mov	r0, r3
 801986e:	3710      	adds	r7, #16
 8019870:	46bd      	mov	sp, r7
 8019872:	bd80      	pop	{r7, pc}

08019874 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b084      	sub	sp, #16
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
 801987c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8019884:	2b01      	cmp	r3, #1
 8019886:	d101      	bne.n	801988c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019888:	2302      	movs	r3, #2
 801988a:	e02d      	b.n	80198e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	2201      	movs	r2, #1
 8019890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2224      	movs	r2, #36	; 0x24
 8019898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	681a      	ldr	r2, [r3, #0]
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	f022 0201 	bic.w	r2, r2, #1
 80198b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	689b      	ldr	r3, [r3, #8]
 80198ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	683a      	ldr	r2, [r7, #0]
 80198c4:	430a      	orrs	r2, r1
 80198c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80198c8:	6878      	ldr	r0, [r7, #4]
 80198ca:	f000 f811 	bl	80198f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	68fa      	ldr	r2, [r7, #12]
 80198d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	2220      	movs	r2, #32
 80198da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	2200      	movs	r2, #0
 80198e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80198e6:	2300      	movs	r3, #0
}
 80198e8:	4618      	mov	r0, r3
 80198ea:	3710      	adds	r7, #16
 80198ec:	46bd      	mov	sp, r7
 80198ee:	bd80      	pop	{r7, pc}

080198f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80198f0:	b480      	push	{r7}
 80198f2:	b085      	sub	sp, #20
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d108      	bne.n	8019912 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2201      	movs	r2, #1
 8019904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2201      	movs	r2, #1
 801990c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019910:	e031      	b.n	8019976 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8019912:	2308      	movs	r3, #8
 8019914:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8019916:	2308      	movs	r3, #8
 8019918:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	689b      	ldr	r3, [r3, #8]
 8019920:	0e5b      	lsrs	r3, r3, #25
 8019922:	b2db      	uxtb	r3, r3
 8019924:	f003 0307 	and.w	r3, r3, #7
 8019928:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	689b      	ldr	r3, [r3, #8]
 8019930:	0f5b      	lsrs	r3, r3, #29
 8019932:	b2db      	uxtb	r3, r3
 8019934:	f003 0307 	and.w	r3, r3, #7
 8019938:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801993a:	7bbb      	ldrb	r3, [r7, #14]
 801993c:	7b3a      	ldrb	r2, [r7, #12]
 801993e:	4911      	ldr	r1, [pc, #68]	; (8019984 <UARTEx_SetNbDataToProcess+0x94>)
 8019940:	5c8a      	ldrb	r2, [r1, r2]
 8019942:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8019946:	7b3a      	ldrb	r2, [r7, #12]
 8019948:	490f      	ldr	r1, [pc, #60]	; (8019988 <UARTEx_SetNbDataToProcess+0x98>)
 801994a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801994c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019950:	b29a      	uxth	r2, r3
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019958:	7bfb      	ldrb	r3, [r7, #15]
 801995a:	7b7a      	ldrb	r2, [r7, #13]
 801995c:	4909      	ldr	r1, [pc, #36]	; (8019984 <UARTEx_SetNbDataToProcess+0x94>)
 801995e:	5c8a      	ldrb	r2, [r1, r2]
 8019960:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8019964:	7b7a      	ldrb	r2, [r7, #13]
 8019966:	4908      	ldr	r1, [pc, #32]	; (8019988 <UARTEx_SetNbDataToProcess+0x98>)
 8019968:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801996a:	fb93 f3f2 	sdiv	r3, r3, r2
 801996e:	b29a      	uxth	r2, r3
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8019976:	bf00      	nop
 8019978:	3714      	adds	r7, #20
 801997a:	46bd      	mov	sp, r7
 801997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019980:	4770      	bx	lr
 8019982:	bf00      	nop
 8019984:	0801b214 	.word	0x0801b214
 8019988:	0801b21c 	.word	0x0801b21c

0801998c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801998c:	b480      	push	{r7}
 801998e:	b085      	sub	sp, #20
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019994:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8019998:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	43db      	mvns	r3, r3
 80199a8:	b29b      	uxth	r3, r3
 80199aa:	4013      	ands	r3, r2
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80199b4:	2300      	movs	r3, #0
}
 80199b6:	4618      	mov	r0, r3
 80199b8:	3714      	adds	r7, #20
 80199ba:	46bd      	mov	sp, r7
 80199bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199c0:	4770      	bx	lr

080199c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80199c2:	b084      	sub	sp, #16
 80199c4:	b480      	push	{r7}
 80199c6:	b083      	sub	sp, #12
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
 80199cc:	f107 0014 	add.w	r0, r7, #20
 80199d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	2201      	movs	r2, #1
 80199d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	2200      	movs	r2, #0
 80199e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	2200      	movs	r2, #0
 80199e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	2200      	movs	r2, #0
 80199f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80199f4:	2300      	movs	r3, #0
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	370c      	adds	r7, #12
 80199fa:	46bd      	mov	sp, r7
 80199fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a00:	b004      	add	sp, #16
 8019a02:	4770      	bx	lr

08019a04 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 8019a08:	f000 f808 	bl	8019a1c <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8019a0c:	bf00      	nop
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8019a10:	b580      	push	{r7, lr}
 8019a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 8019a14:	f000 f866 	bl	8019ae4 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8019a18:	bf00      	nop
 8019a1a:	bd80      	pop	{r7, pc}

08019a1c <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b082      	sub	sp, #8
 8019a20:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8019a22:	2000      	movs	r0, #0
 8019a24:	f7fb fd7c 	bl	8015520 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 8019a28:	482a      	ldr	r0, [pc, #168]	; (8019ad4 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 8019a2a:	f000 f9d1 	bl	8019dd0 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8019a2e:	2300      	movs	r3, #0
 8019a30:	71fb      	strb	r3, [r7, #7]
 8019a32:	e007      	b.n	8019a44 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8019a34:	79fb      	ldrb	r3, [r7, #7]
 8019a36:	2101      	movs	r1, #1
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7e8 f889 	bl	8001b50 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8019a3e:	79fb      	ldrb	r3, [r7, #7]
 8019a40:	3301      	adds	r3, #1
 8019a42:	71fb      	strb	r3, [r7, #7]
 8019a44:	79fb      	ldrb	r3, [r7, #7]
 8019a46:	2b02      	cmp	r3, #2
 8019a48:	d9f4      	bls.n	8019a34 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	71fb      	strb	r3, [r7, #7]
 8019a4e:	e039      	b.n	8019ac4 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8019a50:	79fb      	ldrb	r3, [r7, #7]
 8019a52:	2100      	movs	r1, #0
 8019a54:	4618      	mov	r0, r3
 8019a56:	f7e8 f87b 	bl	8001b50 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 8019a5a:	79fb      	ldrb	r3, [r7, #7]
 8019a5c:	4618      	mov	r0, r3
 8019a5e:	f7e7 ff63 	bl	8001928 <VL53L1A2_RANGING_SENSOR_Init>
 8019a62:	4603      	mov	r3, r0
 8019a64:	4a1c      	ldr	r2, [pc, #112]	; (8019ad8 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8019a66:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8019a68:	4b1b      	ldr	r3, [pc, #108]	; (8019ad8 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	bf0c      	ite	eq
 8019a70:	2301      	moveq	r3, #1
 8019a72:	2300      	movne	r3, #0
 8019a74:	b2da      	uxtb	r2, r3
 8019a76:	79fb      	ldrb	r3, [r7, #7]
 8019a78:	4611      	mov	r1, r2
 8019a7a:	4a18      	ldr	r2, [pc, #96]	; (8019adc <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8019a7c:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 8019a7e:	79fb      	ldrb	r3, [r7, #7]
 8019a80:	4a16      	ldr	r2, [pc, #88]	; (8019adc <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8019a82:	5cd3      	ldrb	r3, [r2, r3]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d019      	beq.n	8019abc <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 8019a88:	79fb      	ldrb	r3, [r7, #7]
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	b29b      	uxth	r3, r3
 8019a8e:	3329      	adds	r3, #41	; 0x29
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	005b      	lsls	r3, r3, #1
 8019a94:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8019a96:	79fb      	ldrb	r3, [r7, #7]
 8019a98:	88ba      	ldrh	r2, [r7, #4]
 8019a9a:	4611      	mov	r1, r2
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	f7e8 f82f 	bl	8001b00 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 8019aa2:	79fb      	ldrb	r3, [r7, #7]
 8019aa4:	463a      	mov	r2, r7
 8019aa6:	4611      	mov	r1, r2
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7e7 ff63 	bl	8001974 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 8019aae:	79fb      	ldrb	r3, [r7, #7]
 8019ab0:	683a      	ldr	r2, [r7, #0]
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	480a      	ldr	r0, [pc, #40]	; (8019ae0 <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 8019ab6:	f000 f8ef 	bl	8019c98 <iprintf>
 8019aba:	e000      	b.n	8019abe <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8019abc:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8019abe:	79fb      	ldrb	r3, [r7, #7]
 8019ac0:	3301      	adds	r3, #1
 8019ac2:	71fb      	strb	r3, [r7, #7]
 8019ac4:	79fb      	ldrb	r3, [r7, #7]
 8019ac6:	2b02      	cmp	r3, #2
 8019ac8:	d9c2      	bls.n	8019a50 <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 8019aca:	bf00      	nop
 8019acc:	bf00      	nop
 8019ace:	3708      	adds	r7, #8
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}
 8019ad4:	0801b0bc 	.word	0x0801b0bc
 8019ad8:	20008750 	.word	0x20008750
 8019adc:	20008754 	.word	0x20008754
 8019ae0:	0801b0ec 	.word	0x0801b0ec

08019ae4 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8019aea:	4b2d      	ldr	r3, [pc, #180]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019aec:	2202      	movs	r2, #2
 8019aee:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 8019af0:	4b2b      	ldr	r3, [pc, #172]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019af2:	221e      	movs	r2, #30
 8019af4:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 8019af6:	4b2a      	ldr	r3, [pc, #168]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019af8:	2200      	movs	r2, #0
 8019afa:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8019afc:	4b28      	ldr	r3, [pc, #160]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019afe:	2200      	movs	r2, #0
 8019b00:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8019b02:	4b27      	ldr	r3, [pc, #156]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019b04:	2200      	movs	r2, #0
 8019b06:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019b08:	2300      	movs	r3, #0
 8019b0a:	71fb      	strb	r3, [r7, #7]
 8019b0c:	e01d      	b.n	8019b4a <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 8019b0e:	79fb      	ldrb	r3, [r7, #7]
 8019b10:	4a24      	ldr	r2, [pc, #144]	; (8019ba4 <MX_53L1A2_MultiSensorRanging_Process+0xc0>)
 8019b12:	5cd3      	ldrb	r3, [r2, r3]
 8019b14:	2b01      	cmp	r3, #1
 8019b16:	d114      	bne.n	8019b42 <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 8019b18:	79fb      	ldrb	r3, [r7, #7]
 8019b1a:	4921      	ldr	r1, [pc, #132]	; (8019ba0 <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7e7 ff51 	bl	80019c4 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 8019b22:	79fb      	ldrb	r3, [r7, #7]
 8019b24:	2101      	movs	r1, #1
 8019b26:	4618      	mov	r0, r3
 8019b28:	f7e7 ff9c 	bl	8001a64 <VL53L1A2_RANGING_SENSOR_Start>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	4a1e      	ldr	r2, [pc, #120]	; (8019ba8 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019b30:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 8019b32:	4b1d      	ldr	r3, [pc, #116]	; (8019ba8 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d004      	beq.n	8019b44 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 8019b3a:	481c      	ldr	r0, [pc, #112]	; (8019bac <MX_53L1A2_MultiSensorRanging_Process+0xc8>)
 8019b3c:	f000 f948 	bl	8019dd0 <puts>
      while(1);
 8019b40:	e7fe      	b.n	8019b40 <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 8019b42:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019b44:	79fb      	ldrb	r3, [r7, #7]
 8019b46:	3301      	adds	r3, #1
 8019b48:	71fb      	strb	r3, [r7, #7]
 8019b4a:	79fb      	ldrb	r3, [r7, #7]
 8019b4c:	2b02      	cmp	r3, #2
 8019b4e:	d9de      	bls.n	8019b0e <MX_53L1A2_MultiSensorRanging_Process+0x2a>
  }

  while (1)
  {
    /* polling mode */
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019b50:	2300      	movs	r3, #0
 8019b52:	71fb      	strb	r3, [r7, #7]
 8019b54:	e01c      	b.n	8019b90 <MX_53L1A2_MultiSensorRanging_Process+0xac>
    {
      status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 8019b56:	79fb      	ldrb	r3, [r7, #7]
 8019b58:	4915      	ldr	r1, [pc, #84]	; (8019bb0 <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7e7 ff5a 	bl	8001a14 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8019b60:	4603      	mov	r3, r0
 8019b62:	4a11      	ldr	r2, [pc, #68]	; (8019ba8 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019b64:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 8019b66:	4b10      	ldr	r3, [pc, #64]	; (8019ba8 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d10d      	bne.n	8019b8a <MX_53L1A2_MultiSensorRanging_Process+0xa6>
      {
        printf("%s\t - ", TofDevStr[i]);
 8019b6e:	79fb      	ldrb	r3, [r7, #7]
 8019b70:	4a10      	ldr	r2, [pc, #64]	; (8019bb4 <MX_53L1A2_MultiSensorRanging_Process+0xd0>)
 8019b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019b76:	4619      	mov	r1, r3
 8019b78:	480f      	ldr	r0, [pc, #60]	; (8019bb8 <MX_53L1A2_MultiSensorRanging_Process+0xd4>)
 8019b7a:	f000 f88d 	bl	8019c98 <iprintf>
        print_result(&Result);
 8019b7e:	480c      	ldr	r0, [pc, #48]	; (8019bb0 <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 8019b80:	f000 f81c 	bl	8019bbc <print_result>
        HAL_Delay(POLLING_PERIOD);
 8019b84:	20fa      	movs	r0, #250	; 0xfa
 8019b86:	f7fb fde5 	bl	8015754 <HAL_Delay>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019b8a:	79fb      	ldrb	r3, [r7, #7]
 8019b8c:	3301      	adds	r3, #1
 8019b8e:	71fb      	strb	r3, [r7, #7]
 8019b90:	79fb      	ldrb	r3, [r7, #7]
 8019b92:	2b02      	cmp	r3, #2
 8019b94:	d9df      	bls.n	8019b56 <MX_53L1A2_MultiSensorRanging_Process+0x72>
      }
    }
    printf ("\n");
 8019b96:	200a      	movs	r0, #10
 8019b98:	f000 f896 	bl	8019cc8 <putchar>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019b9c:	e7d8      	b.n	8019b50 <MX_53L1A2_MultiSensorRanging_Process+0x6c>
 8019b9e:	bf00      	nop
 8019ba0:	20008758 	.word	0x20008758
 8019ba4:	20008754 	.word	0x20008754
 8019ba8:	20008750 	.word	0x20008750
 8019bac:	0801b108 	.word	0x0801b108
 8019bb0:	2000876c 	.word	0x2000876c
 8019bb4:	2000007c 	.word	0x2000007c
 8019bb8:	0801b130 	.word	0x0801b130

08019bbc <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b084      	sub	sp, #16
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	73fb      	strb	r3, [r7, #15]
 8019bc8:	e01a      	b.n	8019c00 <print_result+0x44>
  {
    printf("Status = %2ld, Distance = %5ld mm",
      (long)Result->ZoneResult[i].Status[0],
 8019bca:	7bfa      	ldrb	r2, [r7, #15]
 8019bcc:	6879      	ldr	r1, [r7, #4]
 8019bce:	4613      	mov	r3, r2
 8019bd0:	011b      	lsls	r3, r3, #4
 8019bd2:	4413      	add	r3, r2
 8019bd4:	009b      	lsls	r3, r3, #2
 8019bd6:	440b      	add	r3, r1
 8019bd8:	3318      	adds	r3, #24
 8019bda:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 8019bdc:	4618      	mov	r0, r3
      (long)Result->ZoneResult[i].Distance[0]);
 8019bde:	7bfa      	ldrb	r2, [r7, #15]
 8019be0:	6879      	ldr	r1, [r7, #4]
 8019be2:	4613      	mov	r3, r2
 8019be4:	011b      	lsls	r3, r3, #4
 8019be6:	4413      	add	r3, r2
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	440b      	add	r3, r1
 8019bec:	3308      	adds	r3, #8
 8019bee:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 8019bf0:	461a      	mov	r2, r3
 8019bf2:	4601      	mov	r1, r0
 8019bf4:	4807      	ldr	r0, [pc, #28]	; (8019c14 <print_result+0x58>)
 8019bf6:	f000 f84f 	bl	8019c98 <iprintf>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8019bfa:	7bfb      	ldrb	r3, [r7, #15]
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	73fb      	strb	r3, [r7, #15]
 8019c00:	7bfb      	ldrb	r3, [r7, #15]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d0e1      	beq.n	8019bca <print_result+0xe>
  }
  printf ("\n");
 8019c06:	200a      	movs	r0, #10
 8019c08:	f000 f85e 	bl	8019cc8 <putchar>
}
 8019c0c:	bf00      	nop
 8019c0e:	3710      	adds	r7, #16
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	0801b138 	.word	0x0801b138

08019c18 <__errno>:
 8019c18:	4b01      	ldr	r3, [pc, #4]	; (8019c20 <__errno+0x8>)
 8019c1a:	6818      	ldr	r0, [r3, #0]
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop
 8019c20:	20000088 	.word	0x20000088

08019c24 <__libc_init_array>:
 8019c24:	b570      	push	{r4, r5, r6, lr}
 8019c26:	4d0d      	ldr	r5, [pc, #52]	; (8019c5c <__libc_init_array+0x38>)
 8019c28:	4c0d      	ldr	r4, [pc, #52]	; (8019c60 <__libc_init_array+0x3c>)
 8019c2a:	1b64      	subs	r4, r4, r5
 8019c2c:	10a4      	asrs	r4, r4, #2
 8019c2e:	2600      	movs	r6, #0
 8019c30:	42a6      	cmp	r6, r4
 8019c32:	d109      	bne.n	8019c48 <__libc_init_array+0x24>
 8019c34:	4d0b      	ldr	r5, [pc, #44]	; (8019c64 <__libc_init_array+0x40>)
 8019c36:	4c0c      	ldr	r4, [pc, #48]	; (8019c68 <__libc_init_array+0x44>)
 8019c38:	f001 f8a4 	bl	801ad84 <_init>
 8019c3c:	1b64      	subs	r4, r4, r5
 8019c3e:	10a4      	asrs	r4, r4, #2
 8019c40:	2600      	movs	r6, #0
 8019c42:	42a6      	cmp	r6, r4
 8019c44:	d105      	bne.n	8019c52 <__libc_init_array+0x2e>
 8019c46:	bd70      	pop	{r4, r5, r6, pc}
 8019c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c4c:	4798      	blx	r3
 8019c4e:	3601      	adds	r6, #1
 8019c50:	e7ee      	b.n	8019c30 <__libc_init_array+0xc>
 8019c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c56:	4798      	blx	r3
 8019c58:	3601      	adds	r6, #1
 8019c5a:	e7f2      	b.n	8019c42 <__libc_init_array+0x1e>
 8019c5c:	0801b2c4 	.word	0x0801b2c4
 8019c60:	0801b2c4 	.word	0x0801b2c4
 8019c64:	0801b2c4 	.word	0x0801b2c4
 8019c68:	0801b2c8 	.word	0x0801b2c8

08019c6c <memcpy>:
 8019c6c:	440a      	add	r2, r1
 8019c6e:	4291      	cmp	r1, r2
 8019c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c74:	d100      	bne.n	8019c78 <memcpy+0xc>
 8019c76:	4770      	bx	lr
 8019c78:	b510      	push	{r4, lr}
 8019c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c82:	4291      	cmp	r1, r2
 8019c84:	d1f9      	bne.n	8019c7a <memcpy+0xe>
 8019c86:	bd10      	pop	{r4, pc}

08019c88 <memset>:
 8019c88:	4402      	add	r2, r0
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	4293      	cmp	r3, r2
 8019c8e:	d100      	bne.n	8019c92 <memset+0xa>
 8019c90:	4770      	bx	lr
 8019c92:	f803 1b01 	strb.w	r1, [r3], #1
 8019c96:	e7f9      	b.n	8019c8c <memset+0x4>

08019c98 <iprintf>:
 8019c98:	b40f      	push	{r0, r1, r2, r3}
 8019c9a:	4b0a      	ldr	r3, [pc, #40]	; (8019cc4 <iprintf+0x2c>)
 8019c9c:	b513      	push	{r0, r1, r4, lr}
 8019c9e:	681c      	ldr	r4, [r3, #0]
 8019ca0:	b124      	cbz	r4, 8019cac <iprintf+0x14>
 8019ca2:	69a3      	ldr	r3, [r4, #24]
 8019ca4:	b913      	cbnz	r3, 8019cac <iprintf+0x14>
 8019ca6:	4620      	mov	r0, r4
 8019ca8:	f000 fa88 	bl	801a1bc <__sinit>
 8019cac:	ab05      	add	r3, sp, #20
 8019cae:	9a04      	ldr	r2, [sp, #16]
 8019cb0:	68a1      	ldr	r1, [r4, #8]
 8019cb2:	9301      	str	r3, [sp, #4]
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	f000 fc91 	bl	801a5dc <_vfiprintf_r>
 8019cba:	b002      	add	sp, #8
 8019cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cc0:	b004      	add	sp, #16
 8019cc2:	4770      	bx	lr
 8019cc4:	20000088 	.word	0x20000088

08019cc8 <putchar>:
 8019cc8:	4b09      	ldr	r3, [pc, #36]	; (8019cf0 <putchar+0x28>)
 8019cca:	b513      	push	{r0, r1, r4, lr}
 8019ccc:	681c      	ldr	r4, [r3, #0]
 8019cce:	4601      	mov	r1, r0
 8019cd0:	b134      	cbz	r4, 8019ce0 <putchar+0x18>
 8019cd2:	69a3      	ldr	r3, [r4, #24]
 8019cd4:	b923      	cbnz	r3, 8019ce0 <putchar+0x18>
 8019cd6:	9001      	str	r0, [sp, #4]
 8019cd8:	4620      	mov	r0, r4
 8019cda:	f000 fa6f 	bl	801a1bc <__sinit>
 8019cde:	9901      	ldr	r1, [sp, #4]
 8019ce0:	68a2      	ldr	r2, [r4, #8]
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	b002      	add	sp, #8
 8019ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cea:	f000 bf3b 	b.w	801ab64 <_putc_r>
 8019cee:	bf00      	nop
 8019cf0:	20000088 	.word	0x20000088

08019cf4 <_puts_r>:
 8019cf4:	b570      	push	{r4, r5, r6, lr}
 8019cf6:	460e      	mov	r6, r1
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	b118      	cbz	r0, 8019d04 <_puts_r+0x10>
 8019cfc:	6983      	ldr	r3, [r0, #24]
 8019cfe:	b90b      	cbnz	r3, 8019d04 <_puts_r+0x10>
 8019d00:	f000 fa5c 	bl	801a1bc <__sinit>
 8019d04:	69ab      	ldr	r3, [r5, #24]
 8019d06:	68ac      	ldr	r4, [r5, #8]
 8019d08:	b913      	cbnz	r3, 8019d10 <_puts_r+0x1c>
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	f000 fa56 	bl	801a1bc <__sinit>
 8019d10:	4b2c      	ldr	r3, [pc, #176]	; (8019dc4 <_puts_r+0xd0>)
 8019d12:	429c      	cmp	r4, r3
 8019d14:	d120      	bne.n	8019d58 <_puts_r+0x64>
 8019d16:	686c      	ldr	r4, [r5, #4]
 8019d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d1a:	07db      	lsls	r3, r3, #31
 8019d1c:	d405      	bmi.n	8019d2a <_puts_r+0x36>
 8019d1e:	89a3      	ldrh	r3, [r4, #12]
 8019d20:	0598      	lsls	r0, r3, #22
 8019d22:	d402      	bmi.n	8019d2a <_puts_r+0x36>
 8019d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d26:	f000 fae7 	bl	801a2f8 <__retarget_lock_acquire_recursive>
 8019d2a:	89a3      	ldrh	r3, [r4, #12]
 8019d2c:	0719      	lsls	r1, r3, #28
 8019d2e:	d51d      	bpl.n	8019d6c <_puts_r+0x78>
 8019d30:	6923      	ldr	r3, [r4, #16]
 8019d32:	b1db      	cbz	r3, 8019d6c <_puts_r+0x78>
 8019d34:	3e01      	subs	r6, #1
 8019d36:	68a3      	ldr	r3, [r4, #8]
 8019d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019d3c:	3b01      	subs	r3, #1
 8019d3e:	60a3      	str	r3, [r4, #8]
 8019d40:	bb39      	cbnz	r1, 8019d92 <_puts_r+0x9e>
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	da38      	bge.n	8019db8 <_puts_r+0xc4>
 8019d46:	4622      	mov	r2, r4
 8019d48:	210a      	movs	r1, #10
 8019d4a:	4628      	mov	r0, r5
 8019d4c:	f000 f85c 	bl	8019e08 <__swbuf_r>
 8019d50:	3001      	adds	r0, #1
 8019d52:	d011      	beq.n	8019d78 <_puts_r+0x84>
 8019d54:	250a      	movs	r5, #10
 8019d56:	e011      	b.n	8019d7c <_puts_r+0x88>
 8019d58:	4b1b      	ldr	r3, [pc, #108]	; (8019dc8 <_puts_r+0xd4>)
 8019d5a:	429c      	cmp	r4, r3
 8019d5c:	d101      	bne.n	8019d62 <_puts_r+0x6e>
 8019d5e:	68ac      	ldr	r4, [r5, #8]
 8019d60:	e7da      	b.n	8019d18 <_puts_r+0x24>
 8019d62:	4b1a      	ldr	r3, [pc, #104]	; (8019dcc <_puts_r+0xd8>)
 8019d64:	429c      	cmp	r4, r3
 8019d66:	bf08      	it	eq
 8019d68:	68ec      	ldreq	r4, [r5, #12]
 8019d6a:	e7d5      	b.n	8019d18 <_puts_r+0x24>
 8019d6c:	4621      	mov	r1, r4
 8019d6e:	4628      	mov	r0, r5
 8019d70:	f000 f89c 	bl	8019eac <__swsetup_r>
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d0dd      	beq.n	8019d34 <_puts_r+0x40>
 8019d78:	f04f 35ff 	mov.w	r5, #4294967295
 8019d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d7e:	07da      	lsls	r2, r3, #31
 8019d80:	d405      	bmi.n	8019d8e <_puts_r+0x9a>
 8019d82:	89a3      	ldrh	r3, [r4, #12]
 8019d84:	059b      	lsls	r3, r3, #22
 8019d86:	d402      	bmi.n	8019d8e <_puts_r+0x9a>
 8019d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d8a:	f000 fab6 	bl	801a2fa <__retarget_lock_release_recursive>
 8019d8e:	4628      	mov	r0, r5
 8019d90:	bd70      	pop	{r4, r5, r6, pc}
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	da04      	bge.n	8019da0 <_puts_r+0xac>
 8019d96:	69a2      	ldr	r2, [r4, #24]
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	dc06      	bgt.n	8019daa <_puts_r+0xb6>
 8019d9c:	290a      	cmp	r1, #10
 8019d9e:	d004      	beq.n	8019daa <_puts_r+0xb6>
 8019da0:	6823      	ldr	r3, [r4, #0]
 8019da2:	1c5a      	adds	r2, r3, #1
 8019da4:	6022      	str	r2, [r4, #0]
 8019da6:	7019      	strb	r1, [r3, #0]
 8019da8:	e7c5      	b.n	8019d36 <_puts_r+0x42>
 8019daa:	4622      	mov	r2, r4
 8019dac:	4628      	mov	r0, r5
 8019dae:	f000 f82b 	bl	8019e08 <__swbuf_r>
 8019db2:	3001      	adds	r0, #1
 8019db4:	d1bf      	bne.n	8019d36 <_puts_r+0x42>
 8019db6:	e7df      	b.n	8019d78 <_puts_r+0x84>
 8019db8:	6823      	ldr	r3, [r4, #0]
 8019dba:	250a      	movs	r5, #10
 8019dbc:	1c5a      	adds	r2, r3, #1
 8019dbe:	6022      	str	r2, [r4, #0]
 8019dc0:	701d      	strb	r5, [r3, #0]
 8019dc2:	e7db      	b.n	8019d7c <_puts_r+0x88>
 8019dc4:	0801b248 	.word	0x0801b248
 8019dc8:	0801b268 	.word	0x0801b268
 8019dcc:	0801b228 	.word	0x0801b228

08019dd0 <puts>:
 8019dd0:	4b02      	ldr	r3, [pc, #8]	; (8019ddc <puts+0xc>)
 8019dd2:	4601      	mov	r1, r0
 8019dd4:	6818      	ldr	r0, [r3, #0]
 8019dd6:	f7ff bf8d 	b.w	8019cf4 <_puts_r>
 8019dda:	bf00      	nop
 8019ddc:	20000088 	.word	0x20000088

08019de0 <strncpy>:
 8019de0:	b510      	push	{r4, lr}
 8019de2:	3901      	subs	r1, #1
 8019de4:	4603      	mov	r3, r0
 8019de6:	b132      	cbz	r2, 8019df6 <strncpy+0x16>
 8019de8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019dec:	f803 4b01 	strb.w	r4, [r3], #1
 8019df0:	3a01      	subs	r2, #1
 8019df2:	2c00      	cmp	r4, #0
 8019df4:	d1f7      	bne.n	8019de6 <strncpy+0x6>
 8019df6:	441a      	add	r2, r3
 8019df8:	2100      	movs	r1, #0
 8019dfa:	4293      	cmp	r3, r2
 8019dfc:	d100      	bne.n	8019e00 <strncpy+0x20>
 8019dfe:	bd10      	pop	{r4, pc}
 8019e00:	f803 1b01 	strb.w	r1, [r3], #1
 8019e04:	e7f9      	b.n	8019dfa <strncpy+0x1a>
	...

08019e08 <__swbuf_r>:
 8019e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e0a:	460e      	mov	r6, r1
 8019e0c:	4614      	mov	r4, r2
 8019e0e:	4605      	mov	r5, r0
 8019e10:	b118      	cbz	r0, 8019e1a <__swbuf_r+0x12>
 8019e12:	6983      	ldr	r3, [r0, #24]
 8019e14:	b90b      	cbnz	r3, 8019e1a <__swbuf_r+0x12>
 8019e16:	f000 f9d1 	bl	801a1bc <__sinit>
 8019e1a:	4b21      	ldr	r3, [pc, #132]	; (8019ea0 <__swbuf_r+0x98>)
 8019e1c:	429c      	cmp	r4, r3
 8019e1e:	d12b      	bne.n	8019e78 <__swbuf_r+0x70>
 8019e20:	686c      	ldr	r4, [r5, #4]
 8019e22:	69a3      	ldr	r3, [r4, #24]
 8019e24:	60a3      	str	r3, [r4, #8]
 8019e26:	89a3      	ldrh	r3, [r4, #12]
 8019e28:	071a      	lsls	r2, r3, #28
 8019e2a:	d52f      	bpl.n	8019e8c <__swbuf_r+0x84>
 8019e2c:	6923      	ldr	r3, [r4, #16]
 8019e2e:	b36b      	cbz	r3, 8019e8c <__swbuf_r+0x84>
 8019e30:	6923      	ldr	r3, [r4, #16]
 8019e32:	6820      	ldr	r0, [r4, #0]
 8019e34:	1ac0      	subs	r0, r0, r3
 8019e36:	6963      	ldr	r3, [r4, #20]
 8019e38:	b2f6      	uxtb	r6, r6
 8019e3a:	4283      	cmp	r3, r0
 8019e3c:	4637      	mov	r7, r6
 8019e3e:	dc04      	bgt.n	8019e4a <__swbuf_r+0x42>
 8019e40:	4621      	mov	r1, r4
 8019e42:	4628      	mov	r0, r5
 8019e44:	f000 f926 	bl	801a094 <_fflush_r>
 8019e48:	bb30      	cbnz	r0, 8019e98 <__swbuf_r+0x90>
 8019e4a:	68a3      	ldr	r3, [r4, #8]
 8019e4c:	3b01      	subs	r3, #1
 8019e4e:	60a3      	str	r3, [r4, #8]
 8019e50:	6823      	ldr	r3, [r4, #0]
 8019e52:	1c5a      	adds	r2, r3, #1
 8019e54:	6022      	str	r2, [r4, #0]
 8019e56:	701e      	strb	r6, [r3, #0]
 8019e58:	6963      	ldr	r3, [r4, #20]
 8019e5a:	3001      	adds	r0, #1
 8019e5c:	4283      	cmp	r3, r0
 8019e5e:	d004      	beq.n	8019e6a <__swbuf_r+0x62>
 8019e60:	89a3      	ldrh	r3, [r4, #12]
 8019e62:	07db      	lsls	r3, r3, #31
 8019e64:	d506      	bpl.n	8019e74 <__swbuf_r+0x6c>
 8019e66:	2e0a      	cmp	r6, #10
 8019e68:	d104      	bne.n	8019e74 <__swbuf_r+0x6c>
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	f000 f911 	bl	801a094 <_fflush_r>
 8019e72:	b988      	cbnz	r0, 8019e98 <__swbuf_r+0x90>
 8019e74:	4638      	mov	r0, r7
 8019e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e78:	4b0a      	ldr	r3, [pc, #40]	; (8019ea4 <__swbuf_r+0x9c>)
 8019e7a:	429c      	cmp	r4, r3
 8019e7c:	d101      	bne.n	8019e82 <__swbuf_r+0x7a>
 8019e7e:	68ac      	ldr	r4, [r5, #8]
 8019e80:	e7cf      	b.n	8019e22 <__swbuf_r+0x1a>
 8019e82:	4b09      	ldr	r3, [pc, #36]	; (8019ea8 <__swbuf_r+0xa0>)
 8019e84:	429c      	cmp	r4, r3
 8019e86:	bf08      	it	eq
 8019e88:	68ec      	ldreq	r4, [r5, #12]
 8019e8a:	e7ca      	b.n	8019e22 <__swbuf_r+0x1a>
 8019e8c:	4621      	mov	r1, r4
 8019e8e:	4628      	mov	r0, r5
 8019e90:	f000 f80c 	bl	8019eac <__swsetup_r>
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d0cb      	beq.n	8019e30 <__swbuf_r+0x28>
 8019e98:	f04f 37ff 	mov.w	r7, #4294967295
 8019e9c:	e7ea      	b.n	8019e74 <__swbuf_r+0x6c>
 8019e9e:	bf00      	nop
 8019ea0:	0801b248 	.word	0x0801b248
 8019ea4:	0801b268 	.word	0x0801b268
 8019ea8:	0801b228 	.word	0x0801b228

08019eac <__swsetup_r>:
 8019eac:	4b32      	ldr	r3, [pc, #200]	; (8019f78 <__swsetup_r+0xcc>)
 8019eae:	b570      	push	{r4, r5, r6, lr}
 8019eb0:	681d      	ldr	r5, [r3, #0]
 8019eb2:	4606      	mov	r6, r0
 8019eb4:	460c      	mov	r4, r1
 8019eb6:	b125      	cbz	r5, 8019ec2 <__swsetup_r+0x16>
 8019eb8:	69ab      	ldr	r3, [r5, #24]
 8019eba:	b913      	cbnz	r3, 8019ec2 <__swsetup_r+0x16>
 8019ebc:	4628      	mov	r0, r5
 8019ebe:	f000 f97d 	bl	801a1bc <__sinit>
 8019ec2:	4b2e      	ldr	r3, [pc, #184]	; (8019f7c <__swsetup_r+0xd0>)
 8019ec4:	429c      	cmp	r4, r3
 8019ec6:	d10f      	bne.n	8019ee8 <__swsetup_r+0x3c>
 8019ec8:	686c      	ldr	r4, [r5, #4]
 8019eca:	89a3      	ldrh	r3, [r4, #12]
 8019ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ed0:	0719      	lsls	r1, r3, #28
 8019ed2:	d42c      	bmi.n	8019f2e <__swsetup_r+0x82>
 8019ed4:	06dd      	lsls	r5, r3, #27
 8019ed6:	d411      	bmi.n	8019efc <__swsetup_r+0x50>
 8019ed8:	2309      	movs	r3, #9
 8019eda:	6033      	str	r3, [r6, #0]
 8019edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ee0:	81a3      	strh	r3, [r4, #12]
 8019ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ee6:	e03e      	b.n	8019f66 <__swsetup_r+0xba>
 8019ee8:	4b25      	ldr	r3, [pc, #148]	; (8019f80 <__swsetup_r+0xd4>)
 8019eea:	429c      	cmp	r4, r3
 8019eec:	d101      	bne.n	8019ef2 <__swsetup_r+0x46>
 8019eee:	68ac      	ldr	r4, [r5, #8]
 8019ef0:	e7eb      	b.n	8019eca <__swsetup_r+0x1e>
 8019ef2:	4b24      	ldr	r3, [pc, #144]	; (8019f84 <__swsetup_r+0xd8>)
 8019ef4:	429c      	cmp	r4, r3
 8019ef6:	bf08      	it	eq
 8019ef8:	68ec      	ldreq	r4, [r5, #12]
 8019efa:	e7e6      	b.n	8019eca <__swsetup_r+0x1e>
 8019efc:	0758      	lsls	r0, r3, #29
 8019efe:	d512      	bpl.n	8019f26 <__swsetup_r+0x7a>
 8019f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f02:	b141      	cbz	r1, 8019f16 <__swsetup_r+0x6a>
 8019f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019f08:	4299      	cmp	r1, r3
 8019f0a:	d002      	beq.n	8019f12 <__swsetup_r+0x66>
 8019f0c:	4630      	mov	r0, r6
 8019f0e:	f000 fa5b 	bl	801a3c8 <_free_r>
 8019f12:	2300      	movs	r3, #0
 8019f14:	6363      	str	r3, [r4, #52]	; 0x34
 8019f16:	89a3      	ldrh	r3, [r4, #12]
 8019f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f1c:	81a3      	strh	r3, [r4, #12]
 8019f1e:	2300      	movs	r3, #0
 8019f20:	6063      	str	r3, [r4, #4]
 8019f22:	6923      	ldr	r3, [r4, #16]
 8019f24:	6023      	str	r3, [r4, #0]
 8019f26:	89a3      	ldrh	r3, [r4, #12]
 8019f28:	f043 0308 	orr.w	r3, r3, #8
 8019f2c:	81a3      	strh	r3, [r4, #12]
 8019f2e:	6923      	ldr	r3, [r4, #16]
 8019f30:	b94b      	cbnz	r3, 8019f46 <__swsetup_r+0x9a>
 8019f32:	89a3      	ldrh	r3, [r4, #12]
 8019f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f3c:	d003      	beq.n	8019f46 <__swsetup_r+0x9a>
 8019f3e:	4621      	mov	r1, r4
 8019f40:	4630      	mov	r0, r6
 8019f42:	f000 fa01 	bl	801a348 <__smakebuf_r>
 8019f46:	89a0      	ldrh	r0, [r4, #12]
 8019f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f4c:	f010 0301 	ands.w	r3, r0, #1
 8019f50:	d00a      	beq.n	8019f68 <__swsetup_r+0xbc>
 8019f52:	2300      	movs	r3, #0
 8019f54:	60a3      	str	r3, [r4, #8]
 8019f56:	6963      	ldr	r3, [r4, #20]
 8019f58:	425b      	negs	r3, r3
 8019f5a:	61a3      	str	r3, [r4, #24]
 8019f5c:	6923      	ldr	r3, [r4, #16]
 8019f5e:	b943      	cbnz	r3, 8019f72 <__swsetup_r+0xc6>
 8019f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f64:	d1ba      	bne.n	8019edc <__swsetup_r+0x30>
 8019f66:	bd70      	pop	{r4, r5, r6, pc}
 8019f68:	0781      	lsls	r1, r0, #30
 8019f6a:	bf58      	it	pl
 8019f6c:	6963      	ldrpl	r3, [r4, #20]
 8019f6e:	60a3      	str	r3, [r4, #8]
 8019f70:	e7f4      	b.n	8019f5c <__swsetup_r+0xb0>
 8019f72:	2000      	movs	r0, #0
 8019f74:	e7f7      	b.n	8019f66 <__swsetup_r+0xba>
 8019f76:	bf00      	nop
 8019f78:	20000088 	.word	0x20000088
 8019f7c:	0801b248 	.word	0x0801b248
 8019f80:	0801b268 	.word	0x0801b268
 8019f84:	0801b228 	.word	0x0801b228

08019f88 <__sflush_r>:
 8019f88:	898a      	ldrh	r2, [r1, #12]
 8019f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f8e:	4605      	mov	r5, r0
 8019f90:	0710      	lsls	r0, r2, #28
 8019f92:	460c      	mov	r4, r1
 8019f94:	d458      	bmi.n	801a048 <__sflush_r+0xc0>
 8019f96:	684b      	ldr	r3, [r1, #4]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	dc05      	bgt.n	8019fa8 <__sflush_r+0x20>
 8019f9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	dc02      	bgt.n	8019fa8 <__sflush_r+0x20>
 8019fa2:	2000      	movs	r0, #0
 8019fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019faa:	2e00      	cmp	r6, #0
 8019fac:	d0f9      	beq.n	8019fa2 <__sflush_r+0x1a>
 8019fae:	2300      	movs	r3, #0
 8019fb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fb4:	682f      	ldr	r7, [r5, #0]
 8019fb6:	602b      	str	r3, [r5, #0]
 8019fb8:	d032      	beq.n	801a020 <__sflush_r+0x98>
 8019fba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fbc:	89a3      	ldrh	r3, [r4, #12]
 8019fbe:	075a      	lsls	r2, r3, #29
 8019fc0:	d505      	bpl.n	8019fce <__sflush_r+0x46>
 8019fc2:	6863      	ldr	r3, [r4, #4]
 8019fc4:	1ac0      	subs	r0, r0, r3
 8019fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fc8:	b10b      	cbz	r3, 8019fce <__sflush_r+0x46>
 8019fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fcc:	1ac0      	subs	r0, r0, r3
 8019fce:	2300      	movs	r3, #0
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fd4:	6a21      	ldr	r1, [r4, #32]
 8019fd6:	4628      	mov	r0, r5
 8019fd8:	47b0      	blx	r6
 8019fda:	1c43      	adds	r3, r0, #1
 8019fdc:	89a3      	ldrh	r3, [r4, #12]
 8019fde:	d106      	bne.n	8019fee <__sflush_r+0x66>
 8019fe0:	6829      	ldr	r1, [r5, #0]
 8019fe2:	291d      	cmp	r1, #29
 8019fe4:	d82c      	bhi.n	801a040 <__sflush_r+0xb8>
 8019fe6:	4a2a      	ldr	r2, [pc, #168]	; (801a090 <__sflush_r+0x108>)
 8019fe8:	40ca      	lsrs	r2, r1
 8019fea:	07d6      	lsls	r6, r2, #31
 8019fec:	d528      	bpl.n	801a040 <__sflush_r+0xb8>
 8019fee:	2200      	movs	r2, #0
 8019ff0:	6062      	str	r2, [r4, #4]
 8019ff2:	04d9      	lsls	r1, r3, #19
 8019ff4:	6922      	ldr	r2, [r4, #16]
 8019ff6:	6022      	str	r2, [r4, #0]
 8019ff8:	d504      	bpl.n	801a004 <__sflush_r+0x7c>
 8019ffa:	1c42      	adds	r2, r0, #1
 8019ffc:	d101      	bne.n	801a002 <__sflush_r+0x7a>
 8019ffe:	682b      	ldr	r3, [r5, #0]
 801a000:	b903      	cbnz	r3, 801a004 <__sflush_r+0x7c>
 801a002:	6560      	str	r0, [r4, #84]	; 0x54
 801a004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a006:	602f      	str	r7, [r5, #0]
 801a008:	2900      	cmp	r1, #0
 801a00a:	d0ca      	beq.n	8019fa2 <__sflush_r+0x1a>
 801a00c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a010:	4299      	cmp	r1, r3
 801a012:	d002      	beq.n	801a01a <__sflush_r+0x92>
 801a014:	4628      	mov	r0, r5
 801a016:	f000 f9d7 	bl	801a3c8 <_free_r>
 801a01a:	2000      	movs	r0, #0
 801a01c:	6360      	str	r0, [r4, #52]	; 0x34
 801a01e:	e7c1      	b.n	8019fa4 <__sflush_r+0x1c>
 801a020:	6a21      	ldr	r1, [r4, #32]
 801a022:	2301      	movs	r3, #1
 801a024:	4628      	mov	r0, r5
 801a026:	47b0      	blx	r6
 801a028:	1c41      	adds	r1, r0, #1
 801a02a:	d1c7      	bne.n	8019fbc <__sflush_r+0x34>
 801a02c:	682b      	ldr	r3, [r5, #0]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d0c4      	beq.n	8019fbc <__sflush_r+0x34>
 801a032:	2b1d      	cmp	r3, #29
 801a034:	d001      	beq.n	801a03a <__sflush_r+0xb2>
 801a036:	2b16      	cmp	r3, #22
 801a038:	d101      	bne.n	801a03e <__sflush_r+0xb6>
 801a03a:	602f      	str	r7, [r5, #0]
 801a03c:	e7b1      	b.n	8019fa2 <__sflush_r+0x1a>
 801a03e:	89a3      	ldrh	r3, [r4, #12]
 801a040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a044:	81a3      	strh	r3, [r4, #12]
 801a046:	e7ad      	b.n	8019fa4 <__sflush_r+0x1c>
 801a048:	690f      	ldr	r7, [r1, #16]
 801a04a:	2f00      	cmp	r7, #0
 801a04c:	d0a9      	beq.n	8019fa2 <__sflush_r+0x1a>
 801a04e:	0793      	lsls	r3, r2, #30
 801a050:	680e      	ldr	r6, [r1, #0]
 801a052:	bf08      	it	eq
 801a054:	694b      	ldreq	r3, [r1, #20]
 801a056:	600f      	str	r7, [r1, #0]
 801a058:	bf18      	it	ne
 801a05a:	2300      	movne	r3, #0
 801a05c:	eba6 0807 	sub.w	r8, r6, r7
 801a060:	608b      	str	r3, [r1, #8]
 801a062:	f1b8 0f00 	cmp.w	r8, #0
 801a066:	dd9c      	ble.n	8019fa2 <__sflush_r+0x1a>
 801a068:	6a21      	ldr	r1, [r4, #32]
 801a06a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a06c:	4643      	mov	r3, r8
 801a06e:	463a      	mov	r2, r7
 801a070:	4628      	mov	r0, r5
 801a072:	47b0      	blx	r6
 801a074:	2800      	cmp	r0, #0
 801a076:	dc06      	bgt.n	801a086 <__sflush_r+0xfe>
 801a078:	89a3      	ldrh	r3, [r4, #12]
 801a07a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a07e:	81a3      	strh	r3, [r4, #12]
 801a080:	f04f 30ff 	mov.w	r0, #4294967295
 801a084:	e78e      	b.n	8019fa4 <__sflush_r+0x1c>
 801a086:	4407      	add	r7, r0
 801a088:	eba8 0800 	sub.w	r8, r8, r0
 801a08c:	e7e9      	b.n	801a062 <__sflush_r+0xda>
 801a08e:	bf00      	nop
 801a090:	20400001 	.word	0x20400001

0801a094 <_fflush_r>:
 801a094:	b538      	push	{r3, r4, r5, lr}
 801a096:	690b      	ldr	r3, [r1, #16]
 801a098:	4605      	mov	r5, r0
 801a09a:	460c      	mov	r4, r1
 801a09c:	b913      	cbnz	r3, 801a0a4 <_fflush_r+0x10>
 801a09e:	2500      	movs	r5, #0
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	bd38      	pop	{r3, r4, r5, pc}
 801a0a4:	b118      	cbz	r0, 801a0ae <_fflush_r+0x1a>
 801a0a6:	6983      	ldr	r3, [r0, #24]
 801a0a8:	b90b      	cbnz	r3, 801a0ae <_fflush_r+0x1a>
 801a0aa:	f000 f887 	bl	801a1bc <__sinit>
 801a0ae:	4b14      	ldr	r3, [pc, #80]	; (801a100 <_fflush_r+0x6c>)
 801a0b0:	429c      	cmp	r4, r3
 801a0b2:	d11b      	bne.n	801a0ec <_fflush_r+0x58>
 801a0b4:	686c      	ldr	r4, [r5, #4]
 801a0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d0ef      	beq.n	801a09e <_fflush_r+0xa>
 801a0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0c0:	07d0      	lsls	r0, r2, #31
 801a0c2:	d404      	bmi.n	801a0ce <_fflush_r+0x3a>
 801a0c4:	0599      	lsls	r1, r3, #22
 801a0c6:	d402      	bmi.n	801a0ce <_fflush_r+0x3a>
 801a0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0ca:	f000 f915 	bl	801a2f8 <__retarget_lock_acquire_recursive>
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	4621      	mov	r1, r4
 801a0d2:	f7ff ff59 	bl	8019f88 <__sflush_r>
 801a0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0d8:	07da      	lsls	r2, r3, #31
 801a0da:	4605      	mov	r5, r0
 801a0dc:	d4e0      	bmi.n	801a0a0 <_fflush_r+0xc>
 801a0de:	89a3      	ldrh	r3, [r4, #12]
 801a0e0:	059b      	lsls	r3, r3, #22
 801a0e2:	d4dd      	bmi.n	801a0a0 <_fflush_r+0xc>
 801a0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0e6:	f000 f908 	bl	801a2fa <__retarget_lock_release_recursive>
 801a0ea:	e7d9      	b.n	801a0a0 <_fflush_r+0xc>
 801a0ec:	4b05      	ldr	r3, [pc, #20]	; (801a104 <_fflush_r+0x70>)
 801a0ee:	429c      	cmp	r4, r3
 801a0f0:	d101      	bne.n	801a0f6 <_fflush_r+0x62>
 801a0f2:	68ac      	ldr	r4, [r5, #8]
 801a0f4:	e7df      	b.n	801a0b6 <_fflush_r+0x22>
 801a0f6:	4b04      	ldr	r3, [pc, #16]	; (801a108 <_fflush_r+0x74>)
 801a0f8:	429c      	cmp	r4, r3
 801a0fa:	bf08      	it	eq
 801a0fc:	68ec      	ldreq	r4, [r5, #12]
 801a0fe:	e7da      	b.n	801a0b6 <_fflush_r+0x22>
 801a100:	0801b248 	.word	0x0801b248
 801a104:	0801b268 	.word	0x0801b268
 801a108:	0801b228 	.word	0x0801b228

0801a10c <std>:
 801a10c:	2300      	movs	r3, #0
 801a10e:	b510      	push	{r4, lr}
 801a110:	4604      	mov	r4, r0
 801a112:	e9c0 3300 	strd	r3, r3, [r0]
 801a116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a11a:	6083      	str	r3, [r0, #8]
 801a11c:	8181      	strh	r1, [r0, #12]
 801a11e:	6643      	str	r3, [r0, #100]	; 0x64
 801a120:	81c2      	strh	r2, [r0, #14]
 801a122:	6183      	str	r3, [r0, #24]
 801a124:	4619      	mov	r1, r3
 801a126:	2208      	movs	r2, #8
 801a128:	305c      	adds	r0, #92	; 0x5c
 801a12a:	f7ff fdad 	bl	8019c88 <memset>
 801a12e:	4b05      	ldr	r3, [pc, #20]	; (801a144 <std+0x38>)
 801a130:	6263      	str	r3, [r4, #36]	; 0x24
 801a132:	4b05      	ldr	r3, [pc, #20]	; (801a148 <std+0x3c>)
 801a134:	62a3      	str	r3, [r4, #40]	; 0x28
 801a136:	4b05      	ldr	r3, [pc, #20]	; (801a14c <std+0x40>)
 801a138:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a13a:	4b05      	ldr	r3, [pc, #20]	; (801a150 <std+0x44>)
 801a13c:	6224      	str	r4, [r4, #32]
 801a13e:	6323      	str	r3, [r4, #48]	; 0x30
 801a140:	bd10      	pop	{r4, pc}
 801a142:	bf00      	nop
 801a144:	0801ac15 	.word	0x0801ac15
 801a148:	0801ac37 	.word	0x0801ac37
 801a14c:	0801ac6f 	.word	0x0801ac6f
 801a150:	0801ac93 	.word	0x0801ac93

0801a154 <_cleanup_r>:
 801a154:	4901      	ldr	r1, [pc, #4]	; (801a15c <_cleanup_r+0x8>)
 801a156:	f000 b8af 	b.w	801a2b8 <_fwalk_reent>
 801a15a:	bf00      	nop
 801a15c:	0801a095 	.word	0x0801a095

0801a160 <__sfmoreglue>:
 801a160:	b570      	push	{r4, r5, r6, lr}
 801a162:	2268      	movs	r2, #104	; 0x68
 801a164:	1e4d      	subs	r5, r1, #1
 801a166:	4355      	muls	r5, r2
 801a168:	460e      	mov	r6, r1
 801a16a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a16e:	f000 f997 	bl	801a4a0 <_malloc_r>
 801a172:	4604      	mov	r4, r0
 801a174:	b140      	cbz	r0, 801a188 <__sfmoreglue+0x28>
 801a176:	2100      	movs	r1, #0
 801a178:	e9c0 1600 	strd	r1, r6, [r0]
 801a17c:	300c      	adds	r0, #12
 801a17e:	60a0      	str	r0, [r4, #8]
 801a180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a184:	f7ff fd80 	bl	8019c88 <memset>
 801a188:	4620      	mov	r0, r4
 801a18a:	bd70      	pop	{r4, r5, r6, pc}

0801a18c <__sfp_lock_acquire>:
 801a18c:	4801      	ldr	r0, [pc, #4]	; (801a194 <__sfp_lock_acquire+0x8>)
 801a18e:	f000 b8b3 	b.w	801a2f8 <__retarget_lock_acquire_recursive>
 801a192:	bf00      	nop
 801a194:	200087b5 	.word	0x200087b5

0801a198 <__sfp_lock_release>:
 801a198:	4801      	ldr	r0, [pc, #4]	; (801a1a0 <__sfp_lock_release+0x8>)
 801a19a:	f000 b8ae 	b.w	801a2fa <__retarget_lock_release_recursive>
 801a19e:	bf00      	nop
 801a1a0:	200087b5 	.word	0x200087b5

0801a1a4 <__sinit_lock_acquire>:
 801a1a4:	4801      	ldr	r0, [pc, #4]	; (801a1ac <__sinit_lock_acquire+0x8>)
 801a1a6:	f000 b8a7 	b.w	801a2f8 <__retarget_lock_acquire_recursive>
 801a1aa:	bf00      	nop
 801a1ac:	200087b6 	.word	0x200087b6

0801a1b0 <__sinit_lock_release>:
 801a1b0:	4801      	ldr	r0, [pc, #4]	; (801a1b8 <__sinit_lock_release+0x8>)
 801a1b2:	f000 b8a2 	b.w	801a2fa <__retarget_lock_release_recursive>
 801a1b6:	bf00      	nop
 801a1b8:	200087b6 	.word	0x200087b6

0801a1bc <__sinit>:
 801a1bc:	b510      	push	{r4, lr}
 801a1be:	4604      	mov	r4, r0
 801a1c0:	f7ff fff0 	bl	801a1a4 <__sinit_lock_acquire>
 801a1c4:	69a3      	ldr	r3, [r4, #24]
 801a1c6:	b11b      	cbz	r3, 801a1d0 <__sinit+0x14>
 801a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1cc:	f7ff bff0 	b.w	801a1b0 <__sinit_lock_release>
 801a1d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a1d4:	6523      	str	r3, [r4, #80]	; 0x50
 801a1d6:	4b13      	ldr	r3, [pc, #76]	; (801a224 <__sinit+0x68>)
 801a1d8:	4a13      	ldr	r2, [pc, #76]	; (801a228 <__sinit+0x6c>)
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	62a2      	str	r2, [r4, #40]	; 0x28
 801a1de:	42a3      	cmp	r3, r4
 801a1e0:	bf04      	itt	eq
 801a1e2:	2301      	moveq	r3, #1
 801a1e4:	61a3      	streq	r3, [r4, #24]
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f000 f820 	bl	801a22c <__sfp>
 801a1ec:	6060      	str	r0, [r4, #4]
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	f000 f81c 	bl	801a22c <__sfp>
 801a1f4:	60a0      	str	r0, [r4, #8]
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f000 f818 	bl	801a22c <__sfp>
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	60e0      	str	r0, [r4, #12]
 801a200:	2104      	movs	r1, #4
 801a202:	6860      	ldr	r0, [r4, #4]
 801a204:	f7ff ff82 	bl	801a10c <std>
 801a208:	68a0      	ldr	r0, [r4, #8]
 801a20a:	2201      	movs	r2, #1
 801a20c:	2109      	movs	r1, #9
 801a20e:	f7ff ff7d 	bl	801a10c <std>
 801a212:	68e0      	ldr	r0, [r4, #12]
 801a214:	2202      	movs	r2, #2
 801a216:	2112      	movs	r1, #18
 801a218:	f7ff ff78 	bl	801a10c <std>
 801a21c:	2301      	movs	r3, #1
 801a21e:	61a3      	str	r3, [r4, #24]
 801a220:	e7d2      	b.n	801a1c8 <__sinit+0xc>
 801a222:	bf00      	nop
 801a224:	0801b224 	.word	0x0801b224
 801a228:	0801a155 	.word	0x0801a155

0801a22c <__sfp>:
 801a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a22e:	4607      	mov	r7, r0
 801a230:	f7ff ffac 	bl	801a18c <__sfp_lock_acquire>
 801a234:	4b1e      	ldr	r3, [pc, #120]	; (801a2b0 <__sfp+0x84>)
 801a236:	681e      	ldr	r6, [r3, #0]
 801a238:	69b3      	ldr	r3, [r6, #24]
 801a23a:	b913      	cbnz	r3, 801a242 <__sfp+0x16>
 801a23c:	4630      	mov	r0, r6
 801a23e:	f7ff ffbd 	bl	801a1bc <__sinit>
 801a242:	3648      	adds	r6, #72	; 0x48
 801a244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a248:	3b01      	subs	r3, #1
 801a24a:	d503      	bpl.n	801a254 <__sfp+0x28>
 801a24c:	6833      	ldr	r3, [r6, #0]
 801a24e:	b30b      	cbz	r3, 801a294 <__sfp+0x68>
 801a250:	6836      	ldr	r6, [r6, #0]
 801a252:	e7f7      	b.n	801a244 <__sfp+0x18>
 801a254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a258:	b9d5      	cbnz	r5, 801a290 <__sfp+0x64>
 801a25a:	4b16      	ldr	r3, [pc, #88]	; (801a2b4 <__sfp+0x88>)
 801a25c:	60e3      	str	r3, [r4, #12]
 801a25e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a262:	6665      	str	r5, [r4, #100]	; 0x64
 801a264:	f000 f847 	bl	801a2f6 <__retarget_lock_init_recursive>
 801a268:	f7ff ff96 	bl	801a198 <__sfp_lock_release>
 801a26c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a270:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a274:	6025      	str	r5, [r4, #0]
 801a276:	61a5      	str	r5, [r4, #24]
 801a278:	2208      	movs	r2, #8
 801a27a:	4629      	mov	r1, r5
 801a27c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a280:	f7ff fd02 	bl	8019c88 <memset>
 801a284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a28c:	4620      	mov	r0, r4
 801a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a290:	3468      	adds	r4, #104	; 0x68
 801a292:	e7d9      	b.n	801a248 <__sfp+0x1c>
 801a294:	2104      	movs	r1, #4
 801a296:	4638      	mov	r0, r7
 801a298:	f7ff ff62 	bl	801a160 <__sfmoreglue>
 801a29c:	4604      	mov	r4, r0
 801a29e:	6030      	str	r0, [r6, #0]
 801a2a0:	2800      	cmp	r0, #0
 801a2a2:	d1d5      	bne.n	801a250 <__sfp+0x24>
 801a2a4:	f7ff ff78 	bl	801a198 <__sfp_lock_release>
 801a2a8:	230c      	movs	r3, #12
 801a2aa:	603b      	str	r3, [r7, #0]
 801a2ac:	e7ee      	b.n	801a28c <__sfp+0x60>
 801a2ae:	bf00      	nop
 801a2b0:	0801b224 	.word	0x0801b224
 801a2b4:	ffff0001 	.word	0xffff0001

0801a2b8 <_fwalk_reent>:
 801a2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a2bc:	4606      	mov	r6, r0
 801a2be:	4688      	mov	r8, r1
 801a2c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a2c4:	2700      	movs	r7, #0
 801a2c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a2ca:	f1b9 0901 	subs.w	r9, r9, #1
 801a2ce:	d505      	bpl.n	801a2dc <_fwalk_reent+0x24>
 801a2d0:	6824      	ldr	r4, [r4, #0]
 801a2d2:	2c00      	cmp	r4, #0
 801a2d4:	d1f7      	bne.n	801a2c6 <_fwalk_reent+0xe>
 801a2d6:	4638      	mov	r0, r7
 801a2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2dc:	89ab      	ldrh	r3, [r5, #12]
 801a2de:	2b01      	cmp	r3, #1
 801a2e0:	d907      	bls.n	801a2f2 <_fwalk_reent+0x3a>
 801a2e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	d003      	beq.n	801a2f2 <_fwalk_reent+0x3a>
 801a2ea:	4629      	mov	r1, r5
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	47c0      	blx	r8
 801a2f0:	4307      	orrs	r7, r0
 801a2f2:	3568      	adds	r5, #104	; 0x68
 801a2f4:	e7e9      	b.n	801a2ca <_fwalk_reent+0x12>

0801a2f6 <__retarget_lock_init_recursive>:
 801a2f6:	4770      	bx	lr

0801a2f8 <__retarget_lock_acquire_recursive>:
 801a2f8:	4770      	bx	lr

0801a2fa <__retarget_lock_release_recursive>:
 801a2fa:	4770      	bx	lr

0801a2fc <__swhatbuf_r>:
 801a2fc:	b570      	push	{r4, r5, r6, lr}
 801a2fe:	460e      	mov	r6, r1
 801a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a304:	2900      	cmp	r1, #0
 801a306:	b096      	sub	sp, #88	; 0x58
 801a308:	4614      	mov	r4, r2
 801a30a:	461d      	mov	r5, r3
 801a30c:	da08      	bge.n	801a320 <__swhatbuf_r+0x24>
 801a30e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a312:	2200      	movs	r2, #0
 801a314:	602a      	str	r2, [r5, #0]
 801a316:	061a      	lsls	r2, r3, #24
 801a318:	d410      	bmi.n	801a33c <__swhatbuf_r+0x40>
 801a31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a31e:	e00e      	b.n	801a33e <__swhatbuf_r+0x42>
 801a320:	466a      	mov	r2, sp
 801a322:	f000 fcdd 	bl	801ace0 <_fstat_r>
 801a326:	2800      	cmp	r0, #0
 801a328:	dbf1      	blt.n	801a30e <__swhatbuf_r+0x12>
 801a32a:	9a01      	ldr	r2, [sp, #4]
 801a32c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a334:	425a      	negs	r2, r3
 801a336:	415a      	adcs	r2, r3
 801a338:	602a      	str	r2, [r5, #0]
 801a33a:	e7ee      	b.n	801a31a <__swhatbuf_r+0x1e>
 801a33c:	2340      	movs	r3, #64	; 0x40
 801a33e:	2000      	movs	r0, #0
 801a340:	6023      	str	r3, [r4, #0]
 801a342:	b016      	add	sp, #88	; 0x58
 801a344:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a348 <__smakebuf_r>:
 801a348:	898b      	ldrh	r3, [r1, #12]
 801a34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a34c:	079d      	lsls	r5, r3, #30
 801a34e:	4606      	mov	r6, r0
 801a350:	460c      	mov	r4, r1
 801a352:	d507      	bpl.n	801a364 <__smakebuf_r+0x1c>
 801a354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a358:	6023      	str	r3, [r4, #0]
 801a35a:	6123      	str	r3, [r4, #16]
 801a35c:	2301      	movs	r3, #1
 801a35e:	6163      	str	r3, [r4, #20]
 801a360:	b002      	add	sp, #8
 801a362:	bd70      	pop	{r4, r5, r6, pc}
 801a364:	ab01      	add	r3, sp, #4
 801a366:	466a      	mov	r2, sp
 801a368:	f7ff ffc8 	bl	801a2fc <__swhatbuf_r>
 801a36c:	9900      	ldr	r1, [sp, #0]
 801a36e:	4605      	mov	r5, r0
 801a370:	4630      	mov	r0, r6
 801a372:	f000 f895 	bl	801a4a0 <_malloc_r>
 801a376:	b948      	cbnz	r0, 801a38c <__smakebuf_r+0x44>
 801a378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a37c:	059a      	lsls	r2, r3, #22
 801a37e:	d4ef      	bmi.n	801a360 <__smakebuf_r+0x18>
 801a380:	f023 0303 	bic.w	r3, r3, #3
 801a384:	f043 0302 	orr.w	r3, r3, #2
 801a388:	81a3      	strh	r3, [r4, #12]
 801a38a:	e7e3      	b.n	801a354 <__smakebuf_r+0xc>
 801a38c:	4b0d      	ldr	r3, [pc, #52]	; (801a3c4 <__smakebuf_r+0x7c>)
 801a38e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a390:	89a3      	ldrh	r3, [r4, #12]
 801a392:	6020      	str	r0, [r4, #0]
 801a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a398:	81a3      	strh	r3, [r4, #12]
 801a39a:	9b00      	ldr	r3, [sp, #0]
 801a39c:	6163      	str	r3, [r4, #20]
 801a39e:	9b01      	ldr	r3, [sp, #4]
 801a3a0:	6120      	str	r0, [r4, #16]
 801a3a2:	b15b      	cbz	r3, 801a3bc <__smakebuf_r+0x74>
 801a3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3a8:	4630      	mov	r0, r6
 801a3aa:	f000 fcab 	bl	801ad04 <_isatty_r>
 801a3ae:	b128      	cbz	r0, 801a3bc <__smakebuf_r+0x74>
 801a3b0:	89a3      	ldrh	r3, [r4, #12]
 801a3b2:	f023 0303 	bic.w	r3, r3, #3
 801a3b6:	f043 0301 	orr.w	r3, r3, #1
 801a3ba:	81a3      	strh	r3, [r4, #12]
 801a3bc:	89a0      	ldrh	r0, [r4, #12]
 801a3be:	4305      	orrs	r5, r0
 801a3c0:	81a5      	strh	r5, [r4, #12]
 801a3c2:	e7cd      	b.n	801a360 <__smakebuf_r+0x18>
 801a3c4:	0801a155 	.word	0x0801a155

0801a3c8 <_free_r>:
 801a3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3ca:	2900      	cmp	r1, #0
 801a3cc:	d044      	beq.n	801a458 <_free_r+0x90>
 801a3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3d2:	9001      	str	r0, [sp, #4]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	f1a1 0404 	sub.w	r4, r1, #4
 801a3da:	bfb8      	it	lt
 801a3dc:	18e4      	addlt	r4, r4, r3
 801a3de:	f000 fcb3 	bl	801ad48 <__malloc_lock>
 801a3e2:	4a1e      	ldr	r2, [pc, #120]	; (801a45c <_free_r+0x94>)
 801a3e4:	9801      	ldr	r0, [sp, #4]
 801a3e6:	6813      	ldr	r3, [r2, #0]
 801a3e8:	b933      	cbnz	r3, 801a3f8 <_free_r+0x30>
 801a3ea:	6063      	str	r3, [r4, #4]
 801a3ec:	6014      	str	r4, [r2, #0]
 801a3ee:	b003      	add	sp, #12
 801a3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a3f4:	f000 bcae 	b.w	801ad54 <__malloc_unlock>
 801a3f8:	42a3      	cmp	r3, r4
 801a3fa:	d908      	bls.n	801a40e <_free_r+0x46>
 801a3fc:	6825      	ldr	r5, [r4, #0]
 801a3fe:	1961      	adds	r1, r4, r5
 801a400:	428b      	cmp	r3, r1
 801a402:	bf01      	itttt	eq
 801a404:	6819      	ldreq	r1, [r3, #0]
 801a406:	685b      	ldreq	r3, [r3, #4]
 801a408:	1949      	addeq	r1, r1, r5
 801a40a:	6021      	streq	r1, [r4, #0]
 801a40c:	e7ed      	b.n	801a3ea <_free_r+0x22>
 801a40e:	461a      	mov	r2, r3
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	b10b      	cbz	r3, 801a418 <_free_r+0x50>
 801a414:	42a3      	cmp	r3, r4
 801a416:	d9fa      	bls.n	801a40e <_free_r+0x46>
 801a418:	6811      	ldr	r1, [r2, #0]
 801a41a:	1855      	adds	r5, r2, r1
 801a41c:	42a5      	cmp	r5, r4
 801a41e:	d10b      	bne.n	801a438 <_free_r+0x70>
 801a420:	6824      	ldr	r4, [r4, #0]
 801a422:	4421      	add	r1, r4
 801a424:	1854      	adds	r4, r2, r1
 801a426:	42a3      	cmp	r3, r4
 801a428:	6011      	str	r1, [r2, #0]
 801a42a:	d1e0      	bne.n	801a3ee <_free_r+0x26>
 801a42c:	681c      	ldr	r4, [r3, #0]
 801a42e:	685b      	ldr	r3, [r3, #4]
 801a430:	6053      	str	r3, [r2, #4]
 801a432:	4421      	add	r1, r4
 801a434:	6011      	str	r1, [r2, #0]
 801a436:	e7da      	b.n	801a3ee <_free_r+0x26>
 801a438:	d902      	bls.n	801a440 <_free_r+0x78>
 801a43a:	230c      	movs	r3, #12
 801a43c:	6003      	str	r3, [r0, #0]
 801a43e:	e7d6      	b.n	801a3ee <_free_r+0x26>
 801a440:	6825      	ldr	r5, [r4, #0]
 801a442:	1961      	adds	r1, r4, r5
 801a444:	428b      	cmp	r3, r1
 801a446:	bf04      	itt	eq
 801a448:	6819      	ldreq	r1, [r3, #0]
 801a44a:	685b      	ldreq	r3, [r3, #4]
 801a44c:	6063      	str	r3, [r4, #4]
 801a44e:	bf04      	itt	eq
 801a450:	1949      	addeq	r1, r1, r5
 801a452:	6021      	streq	r1, [r4, #0]
 801a454:	6054      	str	r4, [r2, #4]
 801a456:	e7ca      	b.n	801a3ee <_free_r+0x26>
 801a458:	b003      	add	sp, #12
 801a45a:	bd30      	pop	{r4, r5, pc}
 801a45c:	200087b8 	.word	0x200087b8

0801a460 <sbrk_aligned>:
 801a460:	b570      	push	{r4, r5, r6, lr}
 801a462:	4e0e      	ldr	r6, [pc, #56]	; (801a49c <sbrk_aligned+0x3c>)
 801a464:	460c      	mov	r4, r1
 801a466:	6831      	ldr	r1, [r6, #0]
 801a468:	4605      	mov	r5, r0
 801a46a:	b911      	cbnz	r1, 801a472 <sbrk_aligned+0x12>
 801a46c:	f000 fbc2 	bl	801abf4 <_sbrk_r>
 801a470:	6030      	str	r0, [r6, #0]
 801a472:	4621      	mov	r1, r4
 801a474:	4628      	mov	r0, r5
 801a476:	f000 fbbd 	bl	801abf4 <_sbrk_r>
 801a47a:	1c43      	adds	r3, r0, #1
 801a47c:	d00a      	beq.n	801a494 <sbrk_aligned+0x34>
 801a47e:	1cc4      	adds	r4, r0, #3
 801a480:	f024 0403 	bic.w	r4, r4, #3
 801a484:	42a0      	cmp	r0, r4
 801a486:	d007      	beq.n	801a498 <sbrk_aligned+0x38>
 801a488:	1a21      	subs	r1, r4, r0
 801a48a:	4628      	mov	r0, r5
 801a48c:	f000 fbb2 	bl	801abf4 <_sbrk_r>
 801a490:	3001      	adds	r0, #1
 801a492:	d101      	bne.n	801a498 <sbrk_aligned+0x38>
 801a494:	f04f 34ff 	mov.w	r4, #4294967295
 801a498:	4620      	mov	r0, r4
 801a49a:	bd70      	pop	{r4, r5, r6, pc}
 801a49c:	200087bc 	.word	0x200087bc

0801a4a0 <_malloc_r>:
 801a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a4:	1ccd      	adds	r5, r1, #3
 801a4a6:	f025 0503 	bic.w	r5, r5, #3
 801a4aa:	3508      	adds	r5, #8
 801a4ac:	2d0c      	cmp	r5, #12
 801a4ae:	bf38      	it	cc
 801a4b0:	250c      	movcc	r5, #12
 801a4b2:	2d00      	cmp	r5, #0
 801a4b4:	4607      	mov	r7, r0
 801a4b6:	db01      	blt.n	801a4bc <_malloc_r+0x1c>
 801a4b8:	42a9      	cmp	r1, r5
 801a4ba:	d905      	bls.n	801a4c8 <_malloc_r+0x28>
 801a4bc:	230c      	movs	r3, #12
 801a4be:	603b      	str	r3, [r7, #0]
 801a4c0:	2600      	movs	r6, #0
 801a4c2:	4630      	mov	r0, r6
 801a4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c8:	4e2e      	ldr	r6, [pc, #184]	; (801a584 <_malloc_r+0xe4>)
 801a4ca:	f000 fc3d 	bl	801ad48 <__malloc_lock>
 801a4ce:	6833      	ldr	r3, [r6, #0]
 801a4d0:	461c      	mov	r4, r3
 801a4d2:	bb34      	cbnz	r4, 801a522 <_malloc_r+0x82>
 801a4d4:	4629      	mov	r1, r5
 801a4d6:	4638      	mov	r0, r7
 801a4d8:	f7ff ffc2 	bl	801a460 <sbrk_aligned>
 801a4dc:	1c43      	adds	r3, r0, #1
 801a4de:	4604      	mov	r4, r0
 801a4e0:	d14d      	bne.n	801a57e <_malloc_r+0xde>
 801a4e2:	6834      	ldr	r4, [r6, #0]
 801a4e4:	4626      	mov	r6, r4
 801a4e6:	2e00      	cmp	r6, #0
 801a4e8:	d140      	bne.n	801a56c <_malloc_r+0xcc>
 801a4ea:	6823      	ldr	r3, [r4, #0]
 801a4ec:	4631      	mov	r1, r6
 801a4ee:	4638      	mov	r0, r7
 801a4f0:	eb04 0803 	add.w	r8, r4, r3
 801a4f4:	f000 fb7e 	bl	801abf4 <_sbrk_r>
 801a4f8:	4580      	cmp	r8, r0
 801a4fa:	d13a      	bne.n	801a572 <_malloc_r+0xd2>
 801a4fc:	6821      	ldr	r1, [r4, #0]
 801a4fe:	3503      	adds	r5, #3
 801a500:	1a6d      	subs	r5, r5, r1
 801a502:	f025 0503 	bic.w	r5, r5, #3
 801a506:	3508      	adds	r5, #8
 801a508:	2d0c      	cmp	r5, #12
 801a50a:	bf38      	it	cc
 801a50c:	250c      	movcc	r5, #12
 801a50e:	4629      	mov	r1, r5
 801a510:	4638      	mov	r0, r7
 801a512:	f7ff ffa5 	bl	801a460 <sbrk_aligned>
 801a516:	3001      	adds	r0, #1
 801a518:	d02b      	beq.n	801a572 <_malloc_r+0xd2>
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	442b      	add	r3, r5
 801a51e:	6023      	str	r3, [r4, #0]
 801a520:	e00e      	b.n	801a540 <_malloc_r+0xa0>
 801a522:	6822      	ldr	r2, [r4, #0]
 801a524:	1b52      	subs	r2, r2, r5
 801a526:	d41e      	bmi.n	801a566 <_malloc_r+0xc6>
 801a528:	2a0b      	cmp	r2, #11
 801a52a:	d916      	bls.n	801a55a <_malloc_r+0xba>
 801a52c:	1961      	adds	r1, r4, r5
 801a52e:	42a3      	cmp	r3, r4
 801a530:	6025      	str	r5, [r4, #0]
 801a532:	bf18      	it	ne
 801a534:	6059      	strne	r1, [r3, #4]
 801a536:	6863      	ldr	r3, [r4, #4]
 801a538:	bf08      	it	eq
 801a53a:	6031      	streq	r1, [r6, #0]
 801a53c:	5162      	str	r2, [r4, r5]
 801a53e:	604b      	str	r3, [r1, #4]
 801a540:	4638      	mov	r0, r7
 801a542:	f104 060b 	add.w	r6, r4, #11
 801a546:	f000 fc05 	bl	801ad54 <__malloc_unlock>
 801a54a:	f026 0607 	bic.w	r6, r6, #7
 801a54e:	1d23      	adds	r3, r4, #4
 801a550:	1af2      	subs	r2, r6, r3
 801a552:	d0b6      	beq.n	801a4c2 <_malloc_r+0x22>
 801a554:	1b9b      	subs	r3, r3, r6
 801a556:	50a3      	str	r3, [r4, r2]
 801a558:	e7b3      	b.n	801a4c2 <_malloc_r+0x22>
 801a55a:	6862      	ldr	r2, [r4, #4]
 801a55c:	42a3      	cmp	r3, r4
 801a55e:	bf0c      	ite	eq
 801a560:	6032      	streq	r2, [r6, #0]
 801a562:	605a      	strne	r2, [r3, #4]
 801a564:	e7ec      	b.n	801a540 <_malloc_r+0xa0>
 801a566:	4623      	mov	r3, r4
 801a568:	6864      	ldr	r4, [r4, #4]
 801a56a:	e7b2      	b.n	801a4d2 <_malloc_r+0x32>
 801a56c:	4634      	mov	r4, r6
 801a56e:	6876      	ldr	r6, [r6, #4]
 801a570:	e7b9      	b.n	801a4e6 <_malloc_r+0x46>
 801a572:	230c      	movs	r3, #12
 801a574:	603b      	str	r3, [r7, #0]
 801a576:	4638      	mov	r0, r7
 801a578:	f000 fbec 	bl	801ad54 <__malloc_unlock>
 801a57c:	e7a1      	b.n	801a4c2 <_malloc_r+0x22>
 801a57e:	6025      	str	r5, [r4, #0]
 801a580:	e7de      	b.n	801a540 <_malloc_r+0xa0>
 801a582:	bf00      	nop
 801a584:	200087b8 	.word	0x200087b8

0801a588 <__sfputc_r>:
 801a588:	6893      	ldr	r3, [r2, #8]
 801a58a:	3b01      	subs	r3, #1
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	b410      	push	{r4}
 801a590:	6093      	str	r3, [r2, #8]
 801a592:	da08      	bge.n	801a5a6 <__sfputc_r+0x1e>
 801a594:	6994      	ldr	r4, [r2, #24]
 801a596:	42a3      	cmp	r3, r4
 801a598:	db01      	blt.n	801a59e <__sfputc_r+0x16>
 801a59a:	290a      	cmp	r1, #10
 801a59c:	d103      	bne.n	801a5a6 <__sfputc_r+0x1e>
 801a59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5a2:	f7ff bc31 	b.w	8019e08 <__swbuf_r>
 801a5a6:	6813      	ldr	r3, [r2, #0]
 801a5a8:	1c58      	adds	r0, r3, #1
 801a5aa:	6010      	str	r0, [r2, #0]
 801a5ac:	7019      	strb	r1, [r3, #0]
 801a5ae:	4608      	mov	r0, r1
 801a5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5b4:	4770      	bx	lr

0801a5b6 <__sfputs_r>:
 801a5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5b8:	4606      	mov	r6, r0
 801a5ba:	460f      	mov	r7, r1
 801a5bc:	4614      	mov	r4, r2
 801a5be:	18d5      	adds	r5, r2, r3
 801a5c0:	42ac      	cmp	r4, r5
 801a5c2:	d101      	bne.n	801a5c8 <__sfputs_r+0x12>
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	e007      	b.n	801a5d8 <__sfputs_r+0x22>
 801a5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5cc:	463a      	mov	r2, r7
 801a5ce:	4630      	mov	r0, r6
 801a5d0:	f7ff ffda 	bl	801a588 <__sfputc_r>
 801a5d4:	1c43      	adds	r3, r0, #1
 801a5d6:	d1f3      	bne.n	801a5c0 <__sfputs_r+0xa>
 801a5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5dc <_vfiprintf_r>:
 801a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5e0:	460d      	mov	r5, r1
 801a5e2:	b09d      	sub	sp, #116	; 0x74
 801a5e4:	4614      	mov	r4, r2
 801a5e6:	4698      	mov	r8, r3
 801a5e8:	4606      	mov	r6, r0
 801a5ea:	b118      	cbz	r0, 801a5f4 <_vfiprintf_r+0x18>
 801a5ec:	6983      	ldr	r3, [r0, #24]
 801a5ee:	b90b      	cbnz	r3, 801a5f4 <_vfiprintf_r+0x18>
 801a5f0:	f7ff fde4 	bl	801a1bc <__sinit>
 801a5f4:	4b89      	ldr	r3, [pc, #548]	; (801a81c <_vfiprintf_r+0x240>)
 801a5f6:	429d      	cmp	r5, r3
 801a5f8:	d11b      	bne.n	801a632 <_vfiprintf_r+0x56>
 801a5fa:	6875      	ldr	r5, [r6, #4]
 801a5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5fe:	07d9      	lsls	r1, r3, #31
 801a600:	d405      	bmi.n	801a60e <_vfiprintf_r+0x32>
 801a602:	89ab      	ldrh	r3, [r5, #12]
 801a604:	059a      	lsls	r2, r3, #22
 801a606:	d402      	bmi.n	801a60e <_vfiprintf_r+0x32>
 801a608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a60a:	f7ff fe75 	bl	801a2f8 <__retarget_lock_acquire_recursive>
 801a60e:	89ab      	ldrh	r3, [r5, #12]
 801a610:	071b      	lsls	r3, r3, #28
 801a612:	d501      	bpl.n	801a618 <_vfiprintf_r+0x3c>
 801a614:	692b      	ldr	r3, [r5, #16]
 801a616:	b9eb      	cbnz	r3, 801a654 <_vfiprintf_r+0x78>
 801a618:	4629      	mov	r1, r5
 801a61a:	4630      	mov	r0, r6
 801a61c:	f7ff fc46 	bl	8019eac <__swsetup_r>
 801a620:	b1c0      	cbz	r0, 801a654 <_vfiprintf_r+0x78>
 801a622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a624:	07dc      	lsls	r4, r3, #31
 801a626:	d50e      	bpl.n	801a646 <_vfiprintf_r+0x6a>
 801a628:	f04f 30ff 	mov.w	r0, #4294967295
 801a62c:	b01d      	add	sp, #116	; 0x74
 801a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a632:	4b7b      	ldr	r3, [pc, #492]	; (801a820 <_vfiprintf_r+0x244>)
 801a634:	429d      	cmp	r5, r3
 801a636:	d101      	bne.n	801a63c <_vfiprintf_r+0x60>
 801a638:	68b5      	ldr	r5, [r6, #8]
 801a63a:	e7df      	b.n	801a5fc <_vfiprintf_r+0x20>
 801a63c:	4b79      	ldr	r3, [pc, #484]	; (801a824 <_vfiprintf_r+0x248>)
 801a63e:	429d      	cmp	r5, r3
 801a640:	bf08      	it	eq
 801a642:	68f5      	ldreq	r5, [r6, #12]
 801a644:	e7da      	b.n	801a5fc <_vfiprintf_r+0x20>
 801a646:	89ab      	ldrh	r3, [r5, #12]
 801a648:	0598      	lsls	r0, r3, #22
 801a64a:	d4ed      	bmi.n	801a628 <_vfiprintf_r+0x4c>
 801a64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a64e:	f7ff fe54 	bl	801a2fa <__retarget_lock_release_recursive>
 801a652:	e7e9      	b.n	801a628 <_vfiprintf_r+0x4c>
 801a654:	2300      	movs	r3, #0
 801a656:	9309      	str	r3, [sp, #36]	; 0x24
 801a658:	2320      	movs	r3, #32
 801a65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a65e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a662:	2330      	movs	r3, #48	; 0x30
 801a664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a828 <_vfiprintf_r+0x24c>
 801a668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a66c:	f04f 0901 	mov.w	r9, #1
 801a670:	4623      	mov	r3, r4
 801a672:	469a      	mov	sl, r3
 801a674:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a678:	b10a      	cbz	r2, 801a67e <_vfiprintf_r+0xa2>
 801a67a:	2a25      	cmp	r2, #37	; 0x25
 801a67c:	d1f9      	bne.n	801a672 <_vfiprintf_r+0x96>
 801a67e:	ebba 0b04 	subs.w	fp, sl, r4
 801a682:	d00b      	beq.n	801a69c <_vfiprintf_r+0xc0>
 801a684:	465b      	mov	r3, fp
 801a686:	4622      	mov	r2, r4
 801a688:	4629      	mov	r1, r5
 801a68a:	4630      	mov	r0, r6
 801a68c:	f7ff ff93 	bl	801a5b6 <__sfputs_r>
 801a690:	3001      	adds	r0, #1
 801a692:	f000 80aa 	beq.w	801a7ea <_vfiprintf_r+0x20e>
 801a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a698:	445a      	add	r2, fp
 801a69a:	9209      	str	r2, [sp, #36]	; 0x24
 801a69c:	f89a 3000 	ldrb.w	r3, [sl]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	f000 80a2 	beq.w	801a7ea <_vfiprintf_r+0x20e>
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a6b0:	f10a 0a01 	add.w	sl, sl, #1
 801a6b4:	9304      	str	r3, [sp, #16]
 801a6b6:	9307      	str	r3, [sp, #28]
 801a6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a6bc:	931a      	str	r3, [sp, #104]	; 0x68
 801a6be:	4654      	mov	r4, sl
 801a6c0:	2205      	movs	r2, #5
 801a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6c6:	4858      	ldr	r0, [pc, #352]	; (801a828 <_vfiprintf_r+0x24c>)
 801a6c8:	f7e5 fd5a 	bl	8000180 <memchr>
 801a6cc:	9a04      	ldr	r2, [sp, #16]
 801a6ce:	b9d8      	cbnz	r0, 801a708 <_vfiprintf_r+0x12c>
 801a6d0:	06d1      	lsls	r1, r2, #27
 801a6d2:	bf44      	itt	mi
 801a6d4:	2320      	movmi	r3, #32
 801a6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6da:	0713      	lsls	r3, r2, #28
 801a6dc:	bf44      	itt	mi
 801a6de:	232b      	movmi	r3, #43	; 0x2b
 801a6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6e4:	f89a 3000 	ldrb.w	r3, [sl]
 801a6e8:	2b2a      	cmp	r3, #42	; 0x2a
 801a6ea:	d015      	beq.n	801a718 <_vfiprintf_r+0x13c>
 801a6ec:	9a07      	ldr	r2, [sp, #28]
 801a6ee:	4654      	mov	r4, sl
 801a6f0:	2000      	movs	r0, #0
 801a6f2:	f04f 0c0a 	mov.w	ip, #10
 801a6f6:	4621      	mov	r1, r4
 801a6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6fc:	3b30      	subs	r3, #48	; 0x30
 801a6fe:	2b09      	cmp	r3, #9
 801a700:	d94e      	bls.n	801a7a0 <_vfiprintf_r+0x1c4>
 801a702:	b1b0      	cbz	r0, 801a732 <_vfiprintf_r+0x156>
 801a704:	9207      	str	r2, [sp, #28]
 801a706:	e014      	b.n	801a732 <_vfiprintf_r+0x156>
 801a708:	eba0 0308 	sub.w	r3, r0, r8
 801a70c:	fa09 f303 	lsl.w	r3, r9, r3
 801a710:	4313      	orrs	r3, r2
 801a712:	9304      	str	r3, [sp, #16]
 801a714:	46a2      	mov	sl, r4
 801a716:	e7d2      	b.n	801a6be <_vfiprintf_r+0xe2>
 801a718:	9b03      	ldr	r3, [sp, #12]
 801a71a:	1d19      	adds	r1, r3, #4
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	9103      	str	r1, [sp, #12]
 801a720:	2b00      	cmp	r3, #0
 801a722:	bfbb      	ittet	lt
 801a724:	425b      	neglt	r3, r3
 801a726:	f042 0202 	orrlt.w	r2, r2, #2
 801a72a:	9307      	strge	r3, [sp, #28]
 801a72c:	9307      	strlt	r3, [sp, #28]
 801a72e:	bfb8      	it	lt
 801a730:	9204      	strlt	r2, [sp, #16]
 801a732:	7823      	ldrb	r3, [r4, #0]
 801a734:	2b2e      	cmp	r3, #46	; 0x2e
 801a736:	d10c      	bne.n	801a752 <_vfiprintf_r+0x176>
 801a738:	7863      	ldrb	r3, [r4, #1]
 801a73a:	2b2a      	cmp	r3, #42	; 0x2a
 801a73c:	d135      	bne.n	801a7aa <_vfiprintf_r+0x1ce>
 801a73e:	9b03      	ldr	r3, [sp, #12]
 801a740:	1d1a      	adds	r2, r3, #4
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	9203      	str	r2, [sp, #12]
 801a746:	2b00      	cmp	r3, #0
 801a748:	bfb8      	it	lt
 801a74a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a74e:	3402      	adds	r4, #2
 801a750:	9305      	str	r3, [sp, #20]
 801a752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a838 <_vfiprintf_r+0x25c>
 801a756:	7821      	ldrb	r1, [r4, #0]
 801a758:	2203      	movs	r2, #3
 801a75a:	4650      	mov	r0, sl
 801a75c:	f7e5 fd10 	bl	8000180 <memchr>
 801a760:	b140      	cbz	r0, 801a774 <_vfiprintf_r+0x198>
 801a762:	2340      	movs	r3, #64	; 0x40
 801a764:	eba0 000a 	sub.w	r0, r0, sl
 801a768:	fa03 f000 	lsl.w	r0, r3, r0
 801a76c:	9b04      	ldr	r3, [sp, #16]
 801a76e:	4303      	orrs	r3, r0
 801a770:	3401      	adds	r4, #1
 801a772:	9304      	str	r3, [sp, #16]
 801a774:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a778:	482c      	ldr	r0, [pc, #176]	; (801a82c <_vfiprintf_r+0x250>)
 801a77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a77e:	2206      	movs	r2, #6
 801a780:	f7e5 fcfe 	bl	8000180 <memchr>
 801a784:	2800      	cmp	r0, #0
 801a786:	d03f      	beq.n	801a808 <_vfiprintf_r+0x22c>
 801a788:	4b29      	ldr	r3, [pc, #164]	; (801a830 <_vfiprintf_r+0x254>)
 801a78a:	bb1b      	cbnz	r3, 801a7d4 <_vfiprintf_r+0x1f8>
 801a78c:	9b03      	ldr	r3, [sp, #12]
 801a78e:	3307      	adds	r3, #7
 801a790:	f023 0307 	bic.w	r3, r3, #7
 801a794:	3308      	adds	r3, #8
 801a796:	9303      	str	r3, [sp, #12]
 801a798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a79a:	443b      	add	r3, r7
 801a79c:	9309      	str	r3, [sp, #36]	; 0x24
 801a79e:	e767      	b.n	801a670 <_vfiprintf_r+0x94>
 801a7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a7a4:	460c      	mov	r4, r1
 801a7a6:	2001      	movs	r0, #1
 801a7a8:	e7a5      	b.n	801a6f6 <_vfiprintf_r+0x11a>
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	3401      	adds	r4, #1
 801a7ae:	9305      	str	r3, [sp, #20]
 801a7b0:	4619      	mov	r1, r3
 801a7b2:	f04f 0c0a 	mov.w	ip, #10
 801a7b6:	4620      	mov	r0, r4
 801a7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7bc:	3a30      	subs	r2, #48	; 0x30
 801a7be:	2a09      	cmp	r2, #9
 801a7c0:	d903      	bls.n	801a7ca <_vfiprintf_r+0x1ee>
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d0c5      	beq.n	801a752 <_vfiprintf_r+0x176>
 801a7c6:	9105      	str	r1, [sp, #20]
 801a7c8:	e7c3      	b.n	801a752 <_vfiprintf_r+0x176>
 801a7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	2301      	movs	r3, #1
 801a7d2:	e7f0      	b.n	801a7b6 <_vfiprintf_r+0x1da>
 801a7d4:	ab03      	add	r3, sp, #12
 801a7d6:	9300      	str	r3, [sp, #0]
 801a7d8:	462a      	mov	r2, r5
 801a7da:	4b16      	ldr	r3, [pc, #88]	; (801a834 <_vfiprintf_r+0x258>)
 801a7dc:	a904      	add	r1, sp, #16
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f3af 8000 	nop.w
 801a7e4:	4607      	mov	r7, r0
 801a7e6:	1c78      	adds	r0, r7, #1
 801a7e8:	d1d6      	bne.n	801a798 <_vfiprintf_r+0x1bc>
 801a7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7ec:	07d9      	lsls	r1, r3, #31
 801a7ee:	d405      	bmi.n	801a7fc <_vfiprintf_r+0x220>
 801a7f0:	89ab      	ldrh	r3, [r5, #12]
 801a7f2:	059a      	lsls	r2, r3, #22
 801a7f4:	d402      	bmi.n	801a7fc <_vfiprintf_r+0x220>
 801a7f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7f8:	f7ff fd7f 	bl	801a2fa <__retarget_lock_release_recursive>
 801a7fc:	89ab      	ldrh	r3, [r5, #12]
 801a7fe:	065b      	lsls	r3, r3, #25
 801a800:	f53f af12 	bmi.w	801a628 <_vfiprintf_r+0x4c>
 801a804:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a806:	e711      	b.n	801a62c <_vfiprintf_r+0x50>
 801a808:	ab03      	add	r3, sp, #12
 801a80a:	9300      	str	r3, [sp, #0]
 801a80c:	462a      	mov	r2, r5
 801a80e:	4b09      	ldr	r3, [pc, #36]	; (801a834 <_vfiprintf_r+0x258>)
 801a810:	a904      	add	r1, sp, #16
 801a812:	4630      	mov	r0, r6
 801a814:	f000 f880 	bl	801a918 <_printf_i>
 801a818:	e7e4      	b.n	801a7e4 <_vfiprintf_r+0x208>
 801a81a:	bf00      	nop
 801a81c:	0801b248 	.word	0x0801b248
 801a820:	0801b268 	.word	0x0801b268
 801a824:	0801b228 	.word	0x0801b228
 801a828:	0801b288 	.word	0x0801b288
 801a82c:	0801b292 	.word	0x0801b292
 801a830:	00000000 	.word	0x00000000
 801a834:	0801a5b7 	.word	0x0801a5b7
 801a838:	0801b28e 	.word	0x0801b28e

0801a83c <_printf_common>:
 801a83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a840:	4616      	mov	r6, r2
 801a842:	4699      	mov	r9, r3
 801a844:	688a      	ldr	r2, [r1, #8]
 801a846:	690b      	ldr	r3, [r1, #16]
 801a848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a84c:	4293      	cmp	r3, r2
 801a84e:	bfb8      	it	lt
 801a850:	4613      	movlt	r3, r2
 801a852:	6033      	str	r3, [r6, #0]
 801a854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a858:	4607      	mov	r7, r0
 801a85a:	460c      	mov	r4, r1
 801a85c:	b10a      	cbz	r2, 801a862 <_printf_common+0x26>
 801a85e:	3301      	adds	r3, #1
 801a860:	6033      	str	r3, [r6, #0]
 801a862:	6823      	ldr	r3, [r4, #0]
 801a864:	0699      	lsls	r1, r3, #26
 801a866:	bf42      	ittt	mi
 801a868:	6833      	ldrmi	r3, [r6, #0]
 801a86a:	3302      	addmi	r3, #2
 801a86c:	6033      	strmi	r3, [r6, #0]
 801a86e:	6825      	ldr	r5, [r4, #0]
 801a870:	f015 0506 	ands.w	r5, r5, #6
 801a874:	d106      	bne.n	801a884 <_printf_common+0x48>
 801a876:	f104 0a19 	add.w	sl, r4, #25
 801a87a:	68e3      	ldr	r3, [r4, #12]
 801a87c:	6832      	ldr	r2, [r6, #0]
 801a87e:	1a9b      	subs	r3, r3, r2
 801a880:	42ab      	cmp	r3, r5
 801a882:	dc26      	bgt.n	801a8d2 <_printf_common+0x96>
 801a884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a888:	1e13      	subs	r3, r2, #0
 801a88a:	6822      	ldr	r2, [r4, #0]
 801a88c:	bf18      	it	ne
 801a88e:	2301      	movne	r3, #1
 801a890:	0692      	lsls	r2, r2, #26
 801a892:	d42b      	bmi.n	801a8ec <_printf_common+0xb0>
 801a894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a898:	4649      	mov	r1, r9
 801a89a:	4638      	mov	r0, r7
 801a89c:	47c0      	blx	r8
 801a89e:	3001      	adds	r0, #1
 801a8a0:	d01e      	beq.n	801a8e0 <_printf_common+0xa4>
 801a8a2:	6823      	ldr	r3, [r4, #0]
 801a8a4:	68e5      	ldr	r5, [r4, #12]
 801a8a6:	6832      	ldr	r2, [r6, #0]
 801a8a8:	f003 0306 	and.w	r3, r3, #6
 801a8ac:	2b04      	cmp	r3, #4
 801a8ae:	bf08      	it	eq
 801a8b0:	1aad      	subeq	r5, r5, r2
 801a8b2:	68a3      	ldr	r3, [r4, #8]
 801a8b4:	6922      	ldr	r2, [r4, #16]
 801a8b6:	bf0c      	ite	eq
 801a8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a8bc:	2500      	movne	r5, #0
 801a8be:	4293      	cmp	r3, r2
 801a8c0:	bfc4      	itt	gt
 801a8c2:	1a9b      	subgt	r3, r3, r2
 801a8c4:	18ed      	addgt	r5, r5, r3
 801a8c6:	2600      	movs	r6, #0
 801a8c8:	341a      	adds	r4, #26
 801a8ca:	42b5      	cmp	r5, r6
 801a8cc:	d11a      	bne.n	801a904 <_printf_common+0xc8>
 801a8ce:	2000      	movs	r0, #0
 801a8d0:	e008      	b.n	801a8e4 <_printf_common+0xa8>
 801a8d2:	2301      	movs	r3, #1
 801a8d4:	4652      	mov	r2, sl
 801a8d6:	4649      	mov	r1, r9
 801a8d8:	4638      	mov	r0, r7
 801a8da:	47c0      	blx	r8
 801a8dc:	3001      	adds	r0, #1
 801a8de:	d103      	bne.n	801a8e8 <_printf_common+0xac>
 801a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8e8:	3501      	adds	r5, #1
 801a8ea:	e7c6      	b.n	801a87a <_printf_common+0x3e>
 801a8ec:	18e1      	adds	r1, r4, r3
 801a8ee:	1c5a      	adds	r2, r3, #1
 801a8f0:	2030      	movs	r0, #48	; 0x30
 801a8f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a8f6:	4422      	add	r2, r4
 801a8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a8fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a900:	3302      	adds	r3, #2
 801a902:	e7c7      	b.n	801a894 <_printf_common+0x58>
 801a904:	2301      	movs	r3, #1
 801a906:	4622      	mov	r2, r4
 801a908:	4649      	mov	r1, r9
 801a90a:	4638      	mov	r0, r7
 801a90c:	47c0      	blx	r8
 801a90e:	3001      	adds	r0, #1
 801a910:	d0e6      	beq.n	801a8e0 <_printf_common+0xa4>
 801a912:	3601      	adds	r6, #1
 801a914:	e7d9      	b.n	801a8ca <_printf_common+0x8e>
	...

0801a918 <_printf_i>:
 801a918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a91c:	7e0f      	ldrb	r7, [r1, #24]
 801a91e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a920:	2f78      	cmp	r7, #120	; 0x78
 801a922:	4691      	mov	r9, r2
 801a924:	4680      	mov	r8, r0
 801a926:	460c      	mov	r4, r1
 801a928:	469a      	mov	sl, r3
 801a92a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a92e:	d807      	bhi.n	801a940 <_printf_i+0x28>
 801a930:	2f62      	cmp	r7, #98	; 0x62
 801a932:	d80a      	bhi.n	801a94a <_printf_i+0x32>
 801a934:	2f00      	cmp	r7, #0
 801a936:	f000 80d8 	beq.w	801aaea <_printf_i+0x1d2>
 801a93a:	2f58      	cmp	r7, #88	; 0x58
 801a93c:	f000 80a3 	beq.w	801aa86 <_printf_i+0x16e>
 801a940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a948:	e03a      	b.n	801a9c0 <_printf_i+0xa8>
 801a94a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a94e:	2b15      	cmp	r3, #21
 801a950:	d8f6      	bhi.n	801a940 <_printf_i+0x28>
 801a952:	a101      	add	r1, pc, #4	; (adr r1, 801a958 <_printf_i+0x40>)
 801a954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a958:	0801a9b1 	.word	0x0801a9b1
 801a95c:	0801a9c5 	.word	0x0801a9c5
 801a960:	0801a941 	.word	0x0801a941
 801a964:	0801a941 	.word	0x0801a941
 801a968:	0801a941 	.word	0x0801a941
 801a96c:	0801a941 	.word	0x0801a941
 801a970:	0801a9c5 	.word	0x0801a9c5
 801a974:	0801a941 	.word	0x0801a941
 801a978:	0801a941 	.word	0x0801a941
 801a97c:	0801a941 	.word	0x0801a941
 801a980:	0801a941 	.word	0x0801a941
 801a984:	0801aad1 	.word	0x0801aad1
 801a988:	0801a9f5 	.word	0x0801a9f5
 801a98c:	0801aab3 	.word	0x0801aab3
 801a990:	0801a941 	.word	0x0801a941
 801a994:	0801a941 	.word	0x0801a941
 801a998:	0801aaf3 	.word	0x0801aaf3
 801a99c:	0801a941 	.word	0x0801a941
 801a9a0:	0801a9f5 	.word	0x0801a9f5
 801a9a4:	0801a941 	.word	0x0801a941
 801a9a8:	0801a941 	.word	0x0801a941
 801a9ac:	0801aabb 	.word	0x0801aabb
 801a9b0:	682b      	ldr	r3, [r5, #0]
 801a9b2:	1d1a      	adds	r2, r3, #4
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	602a      	str	r2, [r5, #0]
 801a9b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a9bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	e0a3      	b.n	801ab0c <_printf_i+0x1f4>
 801a9c4:	6820      	ldr	r0, [r4, #0]
 801a9c6:	6829      	ldr	r1, [r5, #0]
 801a9c8:	0606      	lsls	r6, r0, #24
 801a9ca:	f101 0304 	add.w	r3, r1, #4
 801a9ce:	d50a      	bpl.n	801a9e6 <_printf_i+0xce>
 801a9d0:	680e      	ldr	r6, [r1, #0]
 801a9d2:	602b      	str	r3, [r5, #0]
 801a9d4:	2e00      	cmp	r6, #0
 801a9d6:	da03      	bge.n	801a9e0 <_printf_i+0xc8>
 801a9d8:	232d      	movs	r3, #45	; 0x2d
 801a9da:	4276      	negs	r6, r6
 801a9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9e0:	485e      	ldr	r0, [pc, #376]	; (801ab5c <_printf_i+0x244>)
 801a9e2:	230a      	movs	r3, #10
 801a9e4:	e019      	b.n	801aa1a <_printf_i+0x102>
 801a9e6:	680e      	ldr	r6, [r1, #0]
 801a9e8:	602b      	str	r3, [r5, #0]
 801a9ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a9ee:	bf18      	it	ne
 801a9f0:	b236      	sxthne	r6, r6
 801a9f2:	e7ef      	b.n	801a9d4 <_printf_i+0xbc>
 801a9f4:	682b      	ldr	r3, [r5, #0]
 801a9f6:	6820      	ldr	r0, [r4, #0]
 801a9f8:	1d19      	adds	r1, r3, #4
 801a9fa:	6029      	str	r1, [r5, #0]
 801a9fc:	0601      	lsls	r1, r0, #24
 801a9fe:	d501      	bpl.n	801aa04 <_printf_i+0xec>
 801aa00:	681e      	ldr	r6, [r3, #0]
 801aa02:	e002      	b.n	801aa0a <_printf_i+0xf2>
 801aa04:	0646      	lsls	r6, r0, #25
 801aa06:	d5fb      	bpl.n	801aa00 <_printf_i+0xe8>
 801aa08:	881e      	ldrh	r6, [r3, #0]
 801aa0a:	4854      	ldr	r0, [pc, #336]	; (801ab5c <_printf_i+0x244>)
 801aa0c:	2f6f      	cmp	r7, #111	; 0x6f
 801aa0e:	bf0c      	ite	eq
 801aa10:	2308      	moveq	r3, #8
 801aa12:	230a      	movne	r3, #10
 801aa14:	2100      	movs	r1, #0
 801aa16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aa1a:	6865      	ldr	r5, [r4, #4]
 801aa1c:	60a5      	str	r5, [r4, #8]
 801aa1e:	2d00      	cmp	r5, #0
 801aa20:	bfa2      	ittt	ge
 801aa22:	6821      	ldrge	r1, [r4, #0]
 801aa24:	f021 0104 	bicge.w	r1, r1, #4
 801aa28:	6021      	strge	r1, [r4, #0]
 801aa2a:	b90e      	cbnz	r6, 801aa30 <_printf_i+0x118>
 801aa2c:	2d00      	cmp	r5, #0
 801aa2e:	d04d      	beq.n	801aacc <_printf_i+0x1b4>
 801aa30:	4615      	mov	r5, r2
 801aa32:	fbb6 f1f3 	udiv	r1, r6, r3
 801aa36:	fb03 6711 	mls	r7, r3, r1, r6
 801aa3a:	5dc7      	ldrb	r7, [r0, r7]
 801aa3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aa40:	4637      	mov	r7, r6
 801aa42:	42bb      	cmp	r3, r7
 801aa44:	460e      	mov	r6, r1
 801aa46:	d9f4      	bls.n	801aa32 <_printf_i+0x11a>
 801aa48:	2b08      	cmp	r3, #8
 801aa4a:	d10b      	bne.n	801aa64 <_printf_i+0x14c>
 801aa4c:	6823      	ldr	r3, [r4, #0]
 801aa4e:	07de      	lsls	r6, r3, #31
 801aa50:	d508      	bpl.n	801aa64 <_printf_i+0x14c>
 801aa52:	6923      	ldr	r3, [r4, #16]
 801aa54:	6861      	ldr	r1, [r4, #4]
 801aa56:	4299      	cmp	r1, r3
 801aa58:	bfde      	ittt	le
 801aa5a:	2330      	movle	r3, #48	; 0x30
 801aa5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aa60:	f105 35ff 	addle.w	r5, r5, #4294967295
 801aa64:	1b52      	subs	r2, r2, r5
 801aa66:	6122      	str	r2, [r4, #16]
 801aa68:	f8cd a000 	str.w	sl, [sp]
 801aa6c:	464b      	mov	r3, r9
 801aa6e:	aa03      	add	r2, sp, #12
 801aa70:	4621      	mov	r1, r4
 801aa72:	4640      	mov	r0, r8
 801aa74:	f7ff fee2 	bl	801a83c <_printf_common>
 801aa78:	3001      	adds	r0, #1
 801aa7a:	d14c      	bne.n	801ab16 <_printf_i+0x1fe>
 801aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa80:	b004      	add	sp, #16
 801aa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa86:	4835      	ldr	r0, [pc, #212]	; (801ab5c <_printf_i+0x244>)
 801aa88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801aa8c:	6829      	ldr	r1, [r5, #0]
 801aa8e:	6823      	ldr	r3, [r4, #0]
 801aa90:	f851 6b04 	ldr.w	r6, [r1], #4
 801aa94:	6029      	str	r1, [r5, #0]
 801aa96:	061d      	lsls	r5, r3, #24
 801aa98:	d514      	bpl.n	801aac4 <_printf_i+0x1ac>
 801aa9a:	07df      	lsls	r7, r3, #31
 801aa9c:	bf44      	itt	mi
 801aa9e:	f043 0320 	orrmi.w	r3, r3, #32
 801aaa2:	6023      	strmi	r3, [r4, #0]
 801aaa4:	b91e      	cbnz	r6, 801aaae <_printf_i+0x196>
 801aaa6:	6823      	ldr	r3, [r4, #0]
 801aaa8:	f023 0320 	bic.w	r3, r3, #32
 801aaac:	6023      	str	r3, [r4, #0]
 801aaae:	2310      	movs	r3, #16
 801aab0:	e7b0      	b.n	801aa14 <_printf_i+0xfc>
 801aab2:	6823      	ldr	r3, [r4, #0]
 801aab4:	f043 0320 	orr.w	r3, r3, #32
 801aab8:	6023      	str	r3, [r4, #0]
 801aaba:	2378      	movs	r3, #120	; 0x78
 801aabc:	4828      	ldr	r0, [pc, #160]	; (801ab60 <_printf_i+0x248>)
 801aabe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aac2:	e7e3      	b.n	801aa8c <_printf_i+0x174>
 801aac4:	0659      	lsls	r1, r3, #25
 801aac6:	bf48      	it	mi
 801aac8:	b2b6      	uxthmi	r6, r6
 801aaca:	e7e6      	b.n	801aa9a <_printf_i+0x182>
 801aacc:	4615      	mov	r5, r2
 801aace:	e7bb      	b.n	801aa48 <_printf_i+0x130>
 801aad0:	682b      	ldr	r3, [r5, #0]
 801aad2:	6826      	ldr	r6, [r4, #0]
 801aad4:	6961      	ldr	r1, [r4, #20]
 801aad6:	1d18      	adds	r0, r3, #4
 801aad8:	6028      	str	r0, [r5, #0]
 801aada:	0635      	lsls	r5, r6, #24
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	d501      	bpl.n	801aae4 <_printf_i+0x1cc>
 801aae0:	6019      	str	r1, [r3, #0]
 801aae2:	e002      	b.n	801aaea <_printf_i+0x1d2>
 801aae4:	0670      	lsls	r0, r6, #25
 801aae6:	d5fb      	bpl.n	801aae0 <_printf_i+0x1c8>
 801aae8:	8019      	strh	r1, [r3, #0]
 801aaea:	2300      	movs	r3, #0
 801aaec:	6123      	str	r3, [r4, #16]
 801aaee:	4615      	mov	r5, r2
 801aaf0:	e7ba      	b.n	801aa68 <_printf_i+0x150>
 801aaf2:	682b      	ldr	r3, [r5, #0]
 801aaf4:	1d1a      	adds	r2, r3, #4
 801aaf6:	602a      	str	r2, [r5, #0]
 801aaf8:	681d      	ldr	r5, [r3, #0]
 801aafa:	6862      	ldr	r2, [r4, #4]
 801aafc:	2100      	movs	r1, #0
 801aafe:	4628      	mov	r0, r5
 801ab00:	f7e5 fb3e 	bl	8000180 <memchr>
 801ab04:	b108      	cbz	r0, 801ab0a <_printf_i+0x1f2>
 801ab06:	1b40      	subs	r0, r0, r5
 801ab08:	6060      	str	r0, [r4, #4]
 801ab0a:	6863      	ldr	r3, [r4, #4]
 801ab0c:	6123      	str	r3, [r4, #16]
 801ab0e:	2300      	movs	r3, #0
 801ab10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab14:	e7a8      	b.n	801aa68 <_printf_i+0x150>
 801ab16:	6923      	ldr	r3, [r4, #16]
 801ab18:	462a      	mov	r2, r5
 801ab1a:	4649      	mov	r1, r9
 801ab1c:	4640      	mov	r0, r8
 801ab1e:	47d0      	blx	sl
 801ab20:	3001      	adds	r0, #1
 801ab22:	d0ab      	beq.n	801aa7c <_printf_i+0x164>
 801ab24:	6823      	ldr	r3, [r4, #0]
 801ab26:	079b      	lsls	r3, r3, #30
 801ab28:	d413      	bmi.n	801ab52 <_printf_i+0x23a>
 801ab2a:	68e0      	ldr	r0, [r4, #12]
 801ab2c:	9b03      	ldr	r3, [sp, #12]
 801ab2e:	4298      	cmp	r0, r3
 801ab30:	bfb8      	it	lt
 801ab32:	4618      	movlt	r0, r3
 801ab34:	e7a4      	b.n	801aa80 <_printf_i+0x168>
 801ab36:	2301      	movs	r3, #1
 801ab38:	4632      	mov	r2, r6
 801ab3a:	4649      	mov	r1, r9
 801ab3c:	4640      	mov	r0, r8
 801ab3e:	47d0      	blx	sl
 801ab40:	3001      	adds	r0, #1
 801ab42:	d09b      	beq.n	801aa7c <_printf_i+0x164>
 801ab44:	3501      	adds	r5, #1
 801ab46:	68e3      	ldr	r3, [r4, #12]
 801ab48:	9903      	ldr	r1, [sp, #12]
 801ab4a:	1a5b      	subs	r3, r3, r1
 801ab4c:	42ab      	cmp	r3, r5
 801ab4e:	dcf2      	bgt.n	801ab36 <_printf_i+0x21e>
 801ab50:	e7eb      	b.n	801ab2a <_printf_i+0x212>
 801ab52:	2500      	movs	r5, #0
 801ab54:	f104 0619 	add.w	r6, r4, #25
 801ab58:	e7f5      	b.n	801ab46 <_printf_i+0x22e>
 801ab5a:	bf00      	nop
 801ab5c:	0801b299 	.word	0x0801b299
 801ab60:	0801b2aa 	.word	0x0801b2aa

0801ab64 <_putc_r>:
 801ab64:	b570      	push	{r4, r5, r6, lr}
 801ab66:	460d      	mov	r5, r1
 801ab68:	4614      	mov	r4, r2
 801ab6a:	4606      	mov	r6, r0
 801ab6c:	b118      	cbz	r0, 801ab76 <_putc_r+0x12>
 801ab6e:	6983      	ldr	r3, [r0, #24]
 801ab70:	b90b      	cbnz	r3, 801ab76 <_putc_r+0x12>
 801ab72:	f7ff fb23 	bl	801a1bc <__sinit>
 801ab76:	4b1c      	ldr	r3, [pc, #112]	; (801abe8 <_putc_r+0x84>)
 801ab78:	429c      	cmp	r4, r3
 801ab7a:	d124      	bne.n	801abc6 <_putc_r+0x62>
 801ab7c:	6874      	ldr	r4, [r6, #4]
 801ab7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab80:	07d8      	lsls	r0, r3, #31
 801ab82:	d405      	bmi.n	801ab90 <_putc_r+0x2c>
 801ab84:	89a3      	ldrh	r3, [r4, #12]
 801ab86:	0599      	lsls	r1, r3, #22
 801ab88:	d402      	bmi.n	801ab90 <_putc_r+0x2c>
 801ab8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab8c:	f7ff fbb4 	bl	801a2f8 <__retarget_lock_acquire_recursive>
 801ab90:	68a3      	ldr	r3, [r4, #8]
 801ab92:	3b01      	subs	r3, #1
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	60a3      	str	r3, [r4, #8]
 801ab98:	da05      	bge.n	801aba6 <_putc_r+0x42>
 801ab9a:	69a2      	ldr	r2, [r4, #24]
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	db1c      	blt.n	801abda <_putc_r+0x76>
 801aba0:	b2eb      	uxtb	r3, r5
 801aba2:	2b0a      	cmp	r3, #10
 801aba4:	d019      	beq.n	801abda <_putc_r+0x76>
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	1c5a      	adds	r2, r3, #1
 801abaa:	6022      	str	r2, [r4, #0]
 801abac:	701d      	strb	r5, [r3, #0]
 801abae:	b2ed      	uxtb	r5, r5
 801abb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801abb2:	07da      	lsls	r2, r3, #31
 801abb4:	d405      	bmi.n	801abc2 <_putc_r+0x5e>
 801abb6:	89a3      	ldrh	r3, [r4, #12]
 801abb8:	059b      	lsls	r3, r3, #22
 801abba:	d402      	bmi.n	801abc2 <_putc_r+0x5e>
 801abbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801abbe:	f7ff fb9c 	bl	801a2fa <__retarget_lock_release_recursive>
 801abc2:	4628      	mov	r0, r5
 801abc4:	bd70      	pop	{r4, r5, r6, pc}
 801abc6:	4b09      	ldr	r3, [pc, #36]	; (801abec <_putc_r+0x88>)
 801abc8:	429c      	cmp	r4, r3
 801abca:	d101      	bne.n	801abd0 <_putc_r+0x6c>
 801abcc:	68b4      	ldr	r4, [r6, #8]
 801abce:	e7d6      	b.n	801ab7e <_putc_r+0x1a>
 801abd0:	4b07      	ldr	r3, [pc, #28]	; (801abf0 <_putc_r+0x8c>)
 801abd2:	429c      	cmp	r4, r3
 801abd4:	bf08      	it	eq
 801abd6:	68f4      	ldreq	r4, [r6, #12]
 801abd8:	e7d1      	b.n	801ab7e <_putc_r+0x1a>
 801abda:	4629      	mov	r1, r5
 801abdc:	4622      	mov	r2, r4
 801abde:	4630      	mov	r0, r6
 801abe0:	f7ff f912 	bl	8019e08 <__swbuf_r>
 801abe4:	4605      	mov	r5, r0
 801abe6:	e7e3      	b.n	801abb0 <_putc_r+0x4c>
 801abe8:	0801b248 	.word	0x0801b248
 801abec:	0801b268 	.word	0x0801b268
 801abf0:	0801b228 	.word	0x0801b228

0801abf4 <_sbrk_r>:
 801abf4:	b538      	push	{r3, r4, r5, lr}
 801abf6:	4d06      	ldr	r5, [pc, #24]	; (801ac10 <_sbrk_r+0x1c>)
 801abf8:	2300      	movs	r3, #0
 801abfa:	4604      	mov	r4, r0
 801abfc:	4608      	mov	r0, r1
 801abfe:	602b      	str	r3, [r5, #0]
 801ac00:	f7e6 fa78 	bl	80010f4 <_sbrk>
 801ac04:	1c43      	adds	r3, r0, #1
 801ac06:	d102      	bne.n	801ac0e <_sbrk_r+0x1a>
 801ac08:	682b      	ldr	r3, [r5, #0]
 801ac0a:	b103      	cbz	r3, 801ac0e <_sbrk_r+0x1a>
 801ac0c:	6023      	str	r3, [r4, #0]
 801ac0e:	bd38      	pop	{r3, r4, r5, pc}
 801ac10:	200087c0 	.word	0x200087c0

0801ac14 <__sread>:
 801ac14:	b510      	push	{r4, lr}
 801ac16:	460c      	mov	r4, r1
 801ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac1c:	f000 f8a0 	bl	801ad60 <_read_r>
 801ac20:	2800      	cmp	r0, #0
 801ac22:	bfab      	itete	ge
 801ac24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac26:	89a3      	ldrhlt	r3, [r4, #12]
 801ac28:	181b      	addge	r3, r3, r0
 801ac2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac2e:	bfac      	ite	ge
 801ac30:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac32:	81a3      	strhlt	r3, [r4, #12]
 801ac34:	bd10      	pop	{r4, pc}

0801ac36 <__swrite>:
 801ac36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac3a:	461f      	mov	r7, r3
 801ac3c:	898b      	ldrh	r3, [r1, #12]
 801ac3e:	05db      	lsls	r3, r3, #23
 801ac40:	4605      	mov	r5, r0
 801ac42:	460c      	mov	r4, r1
 801ac44:	4616      	mov	r6, r2
 801ac46:	d505      	bpl.n	801ac54 <__swrite+0x1e>
 801ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac4c:	2302      	movs	r3, #2
 801ac4e:	2200      	movs	r2, #0
 801ac50:	f000 f868 	bl	801ad24 <_lseek_r>
 801ac54:	89a3      	ldrh	r3, [r4, #12]
 801ac56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac5e:	81a3      	strh	r3, [r4, #12]
 801ac60:	4632      	mov	r2, r6
 801ac62:	463b      	mov	r3, r7
 801ac64:	4628      	mov	r0, r5
 801ac66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac6a:	f000 b817 	b.w	801ac9c <_write_r>

0801ac6e <__sseek>:
 801ac6e:	b510      	push	{r4, lr}
 801ac70:	460c      	mov	r4, r1
 801ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac76:	f000 f855 	bl	801ad24 <_lseek_r>
 801ac7a:	1c43      	adds	r3, r0, #1
 801ac7c:	89a3      	ldrh	r3, [r4, #12]
 801ac7e:	bf15      	itete	ne
 801ac80:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac8a:	81a3      	strheq	r3, [r4, #12]
 801ac8c:	bf18      	it	ne
 801ac8e:	81a3      	strhne	r3, [r4, #12]
 801ac90:	bd10      	pop	{r4, pc}

0801ac92 <__sclose>:
 801ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac96:	f000 b813 	b.w	801acc0 <_close_r>
	...

0801ac9c <_write_r>:
 801ac9c:	b538      	push	{r3, r4, r5, lr}
 801ac9e:	4d07      	ldr	r5, [pc, #28]	; (801acbc <_write_r+0x20>)
 801aca0:	4604      	mov	r4, r0
 801aca2:	4608      	mov	r0, r1
 801aca4:	4611      	mov	r1, r2
 801aca6:	2200      	movs	r2, #0
 801aca8:	602a      	str	r2, [r5, #0]
 801acaa:	461a      	mov	r2, r3
 801acac:	f7e5 fe85 	bl	80009ba <_write>
 801acb0:	1c43      	adds	r3, r0, #1
 801acb2:	d102      	bne.n	801acba <_write_r+0x1e>
 801acb4:	682b      	ldr	r3, [r5, #0]
 801acb6:	b103      	cbz	r3, 801acba <_write_r+0x1e>
 801acb8:	6023      	str	r3, [r4, #0]
 801acba:	bd38      	pop	{r3, r4, r5, pc}
 801acbc:	200087c0 	.word	0x200087c0

0801acc0 <_close_r>:
 801acc0:	b538      	push	{r3, r4, r5, lr}
 801acc2:	4d06      	ldr	r5, [pc, #24]	; (801acdc <_close_r+0x1c>)
 801acc4:	2300      	movs	r3, #0
 801acc6:	4604      	mov	r4, r0
 801acc8:	4608      	mov	r0, r1
 801acca:	602b      	str	r3, [r5, #0]
 801accc:	f7e6 f9dd 	bl	800108a <_close>
 801acd0:	1c43      	adds	r3, r0, #1
 801acd2:	d102      	bne.n	801acda <_close_r+0x1a>
 801acd4:	682b      	ldr	r3, [r5, #0]
 801acd6:	b103      	cbz	r3, 801acda <_close_r+0x1a>
 801acd8:	6023      	str	r3, [r4, #0]
 801acda:	bd38      	pop	{r3, r4, r5, pc}
 801acdc:	200087c0 	.word	0x200087c0

0801ace0 <_fstat_r>:
 801ace0:	b538      	push	{r3, r4, r5, lr}
 801ace2:	4d07      	ldr	r5, [pc, #28]	; (801ad00 <_fstat_r+0x20>)
 801ace4:	2300      	movs	r3, #0
 801ace6:	4604      	mov	r4, r0
 801ace8:	4608      	mov	r0, r1
 801acea:	4611      	mov	r1, r2
 801acec:	602b      	str	r3, [r5, #0]
 801acee:	f7e6 f9d8 	bl	80010a2 <_fstat>
 801acf2:	1c43      	adds	r3, r0, #1
 801acf4:	d102      	bne.n	801acfc <_fstat_r+0x1c>
 801acf6:	682b      	ldr	r3, [r5, #0]
 801acf8:	b103      	cbz	r3, 801acfc <_fstat_r+0x1c>
 801acfa:	6023      	str	r3, [r4, #0]
 801acfc:	bd38      	pop	{r3, r4, r5, pc}
 801acfe:	bf00      	nop
 801ad00:	200087c0 	.word	0x200087c0

0801ad04 <_isatty_r>:
 801ad04:	b538      	push	{r3, r4, r5, lr}
 801ad06:	4d06      	ldr	r5, [pc, #24]	; (801ad20 <_isatty_r+0x1c>)
 801ad08:	2300      	movs	r3, #0
 801ad0a:	4604      	mov	r4, r0
 801ad0c:	4608      	mov	r0, r1
 801ad0e:	602b      	str	r3, [r5, #0]
 801ad10:	f7e6 f9d7 	bl	80010c2 <_isatty>
 801ad14:	1c43      	adds	r3, r0, #1
 801ad16:	d102      	bne.n	801ad1e <_isatty_r+0x1a>
 801ad18:	682b      	ldr	r3, [r5, #0]
 801ad1a:	b103      	cbz	r3, 801ad1e <_isatty_r+0x1a>
 801ad1c:	6023      	str	r3, [r4, #0]
 801ad1e:	bd38      	pop	{r3, r4, r5, pc}
 801ad20:	200087c0 	.word	0x200087c0

0801ad24 <_lseek_r>:
 801ad24:	b538      	push	{r3, r4, r5, lr}
 801ad26:	4d07      	ldr	r5, [pc, #28]	; (801ad44 <_lseek_r+0x20>)
 801ad28:	4604      	mov	r4, r0
 801ad2a:	4608      	mov	r0, r1
 801ad2c:	4611      	mov	r1, r2
 801ad2e:	2200      	movs	r2, #0
 801ad30:	602a      	str	r2, [r5, #0]
 801ad32:	461a      	mov	r2, r3
 801ad34:	f7e6 f9d0 	bl	80010d8 <_lseek>
 801ad38:	1c43      	adds	r3, r0, #1
 801ad3a:	d102      	bne.n	801ad42 <_lseek_r+0x1e>
 801ad3c:	682b      	ldr	r3, [r5, #0]
 801ad3e:	b103      	cbz	r3, 801ad42 <_lseek_r+0x1e>
 801ad40:	6023      	str	r3, [r4, #0]
 801ad42:	bd38      	pop	{r3, r4, r5, pc}
 801ad44:	200087c0 	.word	0x200087c0

0801ad48 <__malloc_lock>:
 801ad48:	4801      	ldr	r0, [pc, #4]	; (801ad50 <__malloc_lock+0x8>)
 801ad4a:	f7ff bad5 	b.w	801a2f8 <__retarget_lock_acquire_recursive>
 801ad4e:	bf00      	nop
 801ad50:	200087b4 	.word	0x200087b4

0801ad54 <__malloc_unlock>:
 801ad54:	4801      	ldr	r0, [pc, #4]	; (801ad5c <__malloc_unlock+0x8>)
 801ad56:	f7ff bad0 	b.w	801a2fa <__retarget_lock_release_recursive>
 801ad5a:	bf00      	nop
 801ad5c:	200087b4 	.word	0x200087b4

0801ad60 <_read_r>:
 801ad60:	b538      	push	{r3, r4, r5, lr}
 801ad62:	4d07      	ldr	r5, [pc, #28]	; (801ad80 <_read_r+0x20>)
 801ad64:	4604      	mov	r4, r0
 801ad66:	4608      	mov	r0, r1
 801ad68:	4611      	mov	r1, r2
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	602a      	str	r2, [r5, #0]
 801ad6e:	461a      	mov	r2, r3
 801ad70:	f7e6 f96e 	bl	8001050 <_read>
 801ad74:	1c43      	adds	r3, r0, #1
 801ad76:	d102      	bne.n	801ad7e <_read_r+0x1e>
 801ad78:	682b      	ldr	r3, [r5, #0]
 801ad7a:	b103      	cbz	r3, 801ad7e <_read_r+0x1e>
 801ad7c:	6023      	str	r3, [r4, #0]
 801ad7e:	bd38      	pop	{r3, r4, r5, pc}
 801ad80:	200087c0 	.word	0x200087c0

0801ad84 <_init>:
 801ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad86:	bf00      	nop
 801ad88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad8a:	bc08      	pop	{r3}
 801ad8c:	469e      	mov	lr, r3
 801ad8e:	4770      	bx	lr

0801ad90 <_fini>:
 801ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad92:	bf00      	nop
 801ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad96:	bc08      	pop	{r3}
 801ad98:	469e      	mov	lr, r3
 801ad9a:	4770      	bx	lr
