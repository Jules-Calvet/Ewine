
Test_Multi_Tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5f0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0801a730  0801a730  0002a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a9fc  0801a9fc  0002a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801aa04  0801aa04  0002aa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801aa08  0801aa08  0002aa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000d4  20000004  0801aa0c  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000856c  200000d8  0801aae0  000300d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20008644  0801aae0  00038644  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00064693  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000698e  00000000  00000000  0009479b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032a8  00000000  00000000  0009b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002fe0  00000000  00000000  0009e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002edee  00000000  00000000  000a13b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039b5f  00000000  00000000  000d01a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011a8a5  00000000  00000000  00109d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002245aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000e3f0  00000000  00000000  002245fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d8 	.word	0x200000d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a718 	.word	0x0801a718

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000dc 	.word	0x200000dc
 800017c:	0801a718 	.word	0x0801a718

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <VL_TOF_Init>:
static void VL_53L1A2_SimpleRanging_Init(void);
static void VL_53L1A2_SimpleRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void VL_TOF_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  VL_53L1A2_SimpleRanging_Init();
 80005c8:	f000 f808 	bl	80005dc <VL_53L1A2_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <VL_TOF_Process>:

/*
 * LM background task
 */
void VL_TOF_Process(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  VL_53L1A2_SimpleRanging_Process();
 80005d4:	f000 f828 	bl	8000628 <VL_53L1A2_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <VL_53L1A2_SimpleRanging_Init>:

static void VL_53L1A2_SimpleRanging_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  // initialization of the center tof
  statusCenter = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_CENTER);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f001 f937 	bl	8001854 <VL53L1A2_RANGING_SENSOR_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <VL_53L1A2_SimpleRanging_Init+0x40>)
 80005ea:	6013      	str	r3, [r2, #0]
  statusLeft = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_LEFT);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f001 f931 	bl	8001854 <VL53L1A2_RANGING_SENSOR_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <VL_53L1A2_SimpleRanging_Init+0x44>)
 80005f6:	6013      	str	r3, [r2, #0]
  //statusRight = VL53L1A2_RANGING_SENSOR_Init(VL53L1A2_DEV_RIGHT);

  // DEBUG ERROR
  if (statusCenter != BSP_ERROR_NONE)
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <VL_53L1A2_SimpleRanging_Init+0x40>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <VL_53L1A2_SimpleRanging_Init+0x2c>
  {
    printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000600:	4808      	ldr	r0, [pc, #32]	; (8000624 <VL_53L1A2_SimpleRanging_Init+0x48>)
 8000602:	f019 f8af 	bl	8019764 <puts>
    while(1);
 8000606:	e7fe      	b.n	8000606 <VL_53L1A2_SimpleRanging_Init+0x2a>
  }

  if (statusLeft != BSP_ERROR_NONE)
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <VL_53L1A2_SimpleRanging_Init+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <VL_53L1A2_SimpleRanging_Init+0x3c>
    {
      printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <VL_53L1A2_SimpleRanging_Init+0x48>)
 8000612:	f019 f8a7 	bl	8019764 <puts>
      while(1);
 8000616:	e7fe      	b.n	8000616 <VL_53L1A2_SimpleRanging_Init+0x3a>
    {
      printf("VL53L1A2_RANGING_SENSOR_Init failed\n");
      while(1);
    }*/

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000011c 	.word	0x2000011c
 8000620:	20000120 	.word	0x20000120
 8000624:	0801a730 	.word	0x0801a730

08000628 <VL_53L1A2_SimpleRanging_Process>:

static void VL_53L1A2_SimpleRanging_Process(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0a6      	sub	sp, #152	; 0x98
 800062c:	af00      	add	r7, sp, #0
  RANGING_SENSOR_Result_t Result_Center;
  RANGING_SENSOR_Result_t Result_Left;
  //RANGING_SENSOR_Result_t Result_Right;

  // verify id of sensor
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_CENTER, &Id_Center);
 800062e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000632:	4619      	mov	r1, r3
 8000634:	2001      	movs	r0, #1
 8000636:	f001 f933 	bl	80018a0 <VL53L1A2_RANGING_SENSOR_ReadID>
  VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_LEFT, &Id_Left);
 800063a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800063e:	4619      	mov	r1, r3
 8000640:	2000      	movs	r0, #0
 8000642:	f001 f92d 	bl	80018a0 <VL53L1A2_RANGING_SENSOR_ReadID>
  //VL53L1A2_RANGING_SENSOR_ReadID(VL53L1A2_DEV_RIGHT, &Id_Right);

  // sensor configuration
  ProfileCenter.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
  ProfileCenter.TimingBudget = TIMING_BUDGET;
 800064c:	4b3e      	ldr	r3, [pc, #248]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 800064e:	221e      	movs	r2, #30
 8000650:	605a      	str	r2, [r3, #4]
  ProfileCenter.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  ProfileCenter.EnableAmbient = 0; // Enable: 1, Disable: 0
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  ProfileCenter.EnableSignal = 0; // Enable: 1, Disable: 0
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]


  ProfileLeft.RangingProfile = RS_MULTI_TARGET_SHORT_RANGE;
 8000664:	4b39      	ldr	r3, [pc, #228]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
  ProfileLeft.TimingBudget = TIMING_BUDGET;
 800066a:	4b38      	ldr	r3, [pc, #224]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 800066c:	221e      	movs	r2, #30
 800066e:	605a      	str	r2, [r3, #4]
  ProfileLeft.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
 8000670:	4b36      	ldr	r3, [pc, #216]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  ProfileLeft.EnableAmbient = 0; // Enable: 1, Disable: 0
 8000676:	4b35      	ldr	r3, [pc, #212]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  ProfileLeft.EnableSignal = 0; // Enable: 1, Disable: 0
 800067c:	4b33      	ldr	r3, [pc, #204]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  ProfileRight.Frequency = 0; // Induces intermeasurement period, set to ZERO for normal ranging
  ProfileRight.EnableAmbient = 0; // Enable: 1, Disable: 0
  ProfileRight.EnableSignal = 0; // Enable: 1, Disable: 0
*/
  // set the profile if different from default one
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_CENTER, &ProfileCenter);
 8000682:	4931      	ldr	r1, [pc, #196]	; (8000748 <VL_53L1A2_SimpleRanging_Process+0x120>)
 8000684:	2001      	movs	r0, #1
 8000686:	f001 f933 	bl	80018f0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
  VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_LEFT, &ProfileLeft);
 800068a:	4930      	ldr	r1, [pc, #192]	; (800074c <VL_53L1A2_SimpleRanging_Process+0x124>)
 800068c:	2000      	movs	r0, #0
 800068e:	f001 f92f 	bl	80018f0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
  //VL53L1A2_RANGING_SENSOR_ConfigProfile(VL53L1A2_DEV_RIGHT, &ProfileRight);

  statusCenter = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8000692:	2101      	movs	r1, #1
 8000694:	2001      	movs	r0, #1
 8000696:	f001 f97b 	bl	8001990 <VL53L1A2_RANGING_SENSOR_Start>
 800069a:	4603      	mov	r3, r0
 800069c:	4a2c      	ldr	r2, [pc, #176]	; (8000750 <VL_53L1A2_SimpleRanging_Process+0x128>)
 800069e:	6013      	str	r3, [r2, #0]
  statusLeft = VL53L1A2_RANGING_SENSOR_Start(VL53L1A2_DEV_LEFT, RS_MODE_BLOCKING_CONTINUOUS);
 80006a0:	2101      	movs	r1, #1
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 f974 	bl	8001990 <VL53L1A2_RANGING_SENSOR_Start>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <VL_53L1A2_SimpleRanging_Process+0x12c>)
 80006ac:	6013      	str	r3, [r2, #0]

  if (statusCenter != BSP_ERROR_NONE)
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <VL_53L1A2_SimpleRanging_Process+0x128>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <VL_53L1A2_SimpleRanging_Process+0x96>
  {
    printf("VL53L1A2_RANGING_SENSOR_Start_Center failed\n");
 80006b6:	4828      	ldr	r0, [pc, #160]	; (8000758 <VL_53L1A2_SimpleRanging_Process+0x130>)
 80006b8:	f019 f854 	bl	8019764 <puts>
    while(1);
 80006bc:	e7fe      	b.n	80006bc <VL_53L1A2_SimpleRanging_Process+0x94>
  }
  if (statusLeft != BSP_ERROR_NONE)
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <VL_53L1A2_SimpleRanging_Process+0x12c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <VL_53L1A2_SimpleRanging_Process+0xa6>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start_Left failed\n");
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <VL_53L1A2_SimpleRanging_Process+0x134>)
 80006c8:	f019 f84c 	bl	8019764 <puts>
      while(1);
 80006cc:	e7fe      	b.n	80006cc <VL_53L1A2_SimpleRanging_Process+0xa4>
  if (statusRight != BSP_ERROR_NONE)
    {
      printf("VL53L1A2_RANGING_SENSOR_Start_Right failed\n");
      while(1);
    }*/
  printf("Initialization OK ! \n");
 80006ce:	4824      	ldr	r0, [pc, #144]	; (8000760 <VL_53L1A2_SimpleRanging_Process+0x138>)
 80006d0:	f019 f848 	bl	8019764 <puts>
  while (1)
  {
	  printf("Start Loop ! \n");
 80006d4:	4823      	ldr	r0, [pc, #140]	; (8000764 <VL_53L1A2_SimpleRanging_Process+0x13c>)
 80006d6:	f019 f845 	bl	8019764 <puts>
    /* repetition mode */
	  statusCenter = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_CENTER, &Result_Center);
 80006da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006de:	4619      	mov	r1, r3
 80006e0:	2001      	movs	r0, #1
 80006e2:	f001 f92d 	bl	8001940 <VL53L1A2_RANGING_SENSOR_GetDistance>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <VL_53L1A2_SimpleRanging_Process+0x128>)
 80006ea:	6013      	str	r3, [r2, #0]
	  if (statusCenter == BSP_ERROR_NONE)
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <VL_53L1A2_SimpleRanging_Process+0x128>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d107      	bne.n	8000704 <VL_53L1A2_SimpleRanging_Process+0xdc>
	  {
		  printf("\n CENTER ");
 80006f4:	481c      	ldr	r0, [pc, #112]	; (8000768 <VL_53L1A2_SimpleRanging_Process+0x140>)
 80006f6:	f018 ff99 	bl	801962c <iprintf>
		  print_result(&Result_Center);
 80006fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f836 	bl	8000770 <print_result>
	  }
	  statusCenter = VL53L1A2_RANGING_SENSOR_Stop(VL53L1A2_DEV_CENTER);
 8000704:	2001      	movs	r0, #1
 8000706:	f001 f96b 	bl	80019e0 <VL53L1A2_RANGING_SENSOR_Stop>
 800070a:	4603      	mov	r3, r0
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <VL_53L1A2_SimpleRanging_Process+0x128>)
 800070e:	6013      	str	r3, [r2, #0]
	  HAL_Delay(REPETITION);
 8000710:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000714:	f014 feac 	bl	8015470 <HAL_Delay>


	  statusLeft = VL53L1A2_RANGING_SENSOR_GetDistance(VL53L1A2_DEV_LEFT, &Result_Left);
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	2000      	movs	r0, #0
 800071e:	f001 f90f 	bl	8001940 <VL53L1A2_RANGING_SENSOR_GetDistance>
 8000722:	4603      	mov	r3, r0
 8000724:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <VL_53L1A2_SimpleRanging_Process+0x12c>)
 8000726:	6013      	str	r3, [r2, #0]
	  if (statusLeft == BSP_ERROR_NONE)
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <VL_53L1A2_SimpleRanging_Process+0x12c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <VL_53L1A2_SimpleRanging_Process+0x116>
	  {
		  printf("\n LEFT ");
 8000730:	480e      	ldr	r0, [pc, #56]	; (800076c <VL_53L1A2_SimpleRanging_Process+0x144>)
 8000732:	f018 ff7b 	bl	801962c <iprintf>
		  print_result(&Result_Left);
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f819 	bl	8000770 <print_result>
	  }
	  HAL_Delay(REPETITION);
 800073e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000742:	f014 fe95 	bl	8015470 <HAL_Delay>
	  printf("Start Loop ! \n");
 8000746:	e7c5      	b.n	80006d4 <VL_53L1A2_SimpleRanging_Process+0xac>
 8000748:	200000f4 	.word	0x200000f4
 800074c:	20000108 	.word	0x20000108
 8000750:	2000011c 	.word	0x2000011c
 8000754:	20000120 	.word	0x20000120
 8000758:	0801a754 	.word	0x0801a754
 800075c:	0801a780 	.word	0x0801a780
 8000760:	0801a7ac 	.word	0x0801a7ac
 8000764:	0801a7c4 	.word	0x0801a7c4
 8000768:	0801a7d4 	.word	0x0801a7d4
 800076c:	0801a7e0 	.word	0x0801a7e0

08000770 <print_result>:

  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint8_t i, j;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e03f      	b.n	80007fe <print_result+0x8e>
  {
    printf("\nTargets = %lu", (unsigned long)Result->ZoneResult[i].NumberOfTargets);
 800077e:	7bfa      	ldrb	r2, [r7, #15]
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	440b      	add	r3, r1
 800078c:	3304      	adds	r3, #4
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4820      	ldr	r0, [pc, #128]	; (8000814 <print_result+0xa4>)
 8000794:	f018 ff4a 	bl	801962c <iprintf>

    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 8000798:	2300      	movs	r3, #0
 800079a:	73bb      	strb	r3, [r7, #14]
 800079c:	e020      	b.n	80007e0 <print_result+0x70>
    {
      printf("\n |---> ");
 800079e:	481e      	ldr	r0, [pc, #120]	; (8000818 <print_result+0xa8>)
 80007a0:	f018 ff44 	bl	801962c <iprintf>
      printf("Status = %ld, Distance = %5ld mm ",
        (long)Result->ZoneResult[i].Status[j],
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	7bb8      	ldrb	r0, [r7, #14]
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4613      	mov	r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	4413      	add	r3, r2
 80007b0:	4403      	add	r3, r0
 80007b2:	3304      	adds	r3, #4
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007ba:	461c      	mov	r4, r3
        (long)Result->ZoneResult[i].Distance[j]);
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	7bb8      	ldrb	r0, [r7, #14]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	4413      	add	r3, r2
 80007c8:	4403      	add	r3, r0
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	689b      	ldr	r3, [r3, #8]
      printf("Status = %ld, Distance = %5ld mm ",
 80007d0:	461a      	mov	r2, r3
 80007d2:	4621      	mov	r1, r4
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <print_result+0xac>)
 80007d6:	f018 ff29 	bl	801962c <iprintf>
    for (j = 0; j < Result->ZoneResult[i].NumberOfTargets; j++)
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	73bb      	strb	r3, [r7, #14]
 80007e0:	7bb9      	ldrb	r1, [r7, #14]
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4403      	add	r3, r0
 80007f0:	3304      	adds	r3, #4
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4299      	cmp	r1, r3
 80007f6:	d3d2      	bcc.n	800079e <print_result+0x2e>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	3301      	adds	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0bc      	beq.n	800077e <print_result+0xe>
    }
  }
  printf ("\n");
 8000804:	200a      	movs	r0, #10
 8000806:	f018 ff29 	bl	801965c <putchar>
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	bf00      	nop
 8000814:	0801a7e8 	.word	0x0801a7e8
 8000818:	0801a7f8 	.word	0x0801a7f8
 800081c:	0801a804 	.word	0x0801a804

08000820 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000828:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800082c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d013      	beq.n	8000860 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000838:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800083c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000840:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00b      	beq.n	8000860 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000848:	e000      	b.n	800084c <ITM_SendChar+0x2c>
    {
      __NOP();
 800084a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800084c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000856:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	b2d2      	uxtb	r2, r2
 800085e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800087e:	f023 0218 	bic.w	r2, r3, #24
 8000882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4013      	ands	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e009      	b.n	80008f2 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	60ba      	str	r2, [r7, #8]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff9a 	bl	8000820 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbf1      	blt.n	80008de <_write+0x12>
}
return len;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f014 fd66 	bl	80153d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f80e 	bl	800092c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000910:	f000 f882 	bl	8000a18 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f000 f914 	bl	8000b40 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000918:	f000 f89c 	bl	8000a54 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800091c:	f000 f8e8 	bl	8000af0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  //start the initialization of tof application
  VL_TOF_Init();
 8000920:	f7ff fe50 	bl	80005c4 <VL_TOF_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //start the process of tof application
	  VL_TOF_Process();
 8000924:	f7ff fe54 	bl	80005d0 <VL_TOF_Process>
 8000928:	e7fc      	b.n	8000924 <main+0x20>
	...

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09a      	sub	sp, #104	; 0x68
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2248      	movs	r2, #72	; 0x48
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f018 fe6e 	bl	801961c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800095c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000960:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	f023 0303 	bic.w	r3, r3, #3
 800096c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000976:	f015 fff7 	bl	8016968 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ff77 	bl	800086e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <SystemClock_Config+0xe8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <SystemClock_Config+0xe8>)
 800098a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <SystemClock_Config+0xe8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800099c:	2327      	movs	r3, #39	; 0x27
 800099e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009b0:	2301      	movs	r3, #1
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b4:	2340      	movs	r3, #64	; 0x40
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f016 fb6d 	bl	80170a8 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80009d4:	f000 f90e 	bl	8000bf4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80009d8:	236f      	movs	r3, #111	; 0x6f
 80009da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80009dc:	2302      	movs	r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2101      	movs	r1, #1
 80009f8:	4618      	mov	r0, r3
 80009fa:	f016 fec9 	bl	8017790 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a04:	f000 f8f6 	bl	8000bf4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a08:	f017 fcb6 	bl	8018378 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a0c:	bf00      	nop
 8000a0e:	3768      	adds	r7, #104	; 0x68
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58000400 	.word	0x58000400

08000a18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2250      	movs	r2, #80	; 0x50
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f018 fdf9 	bl	801961c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f017 fb26 	bl	801808c <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000a46:	f000 f8d5 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <MX_USART1_UART_Init+0x98>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000aa0:	f018 f81a 	bl	8018ad8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 f8a3 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000ab2:	f018 fc75 	bl	80193a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000abc:	f000 f89a 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000ac4:	f018 fcaa 	bl	801941c <HAL_UARTEx_SetRxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000ace:	f000 f891 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART1_UART_Init+0x94>)
 8000ad4:	f018 fc2b 	bl	801932e <HAL_UARTEx_DisableFifoMode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000ade:	f000 f889 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000124 	.word	0x20000124
 8000aec:	40013800 	.word	0x40013800

08000af0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <MX_USB_PCD_Init+0x4c>)
 8000af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000afc:	2208      	movs	r2, #8
 8000afe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000b26:	f015 fe0a 	bl	801673e <HAL_PCD_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b30:	f000 f860 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200001b4 	.word	0x200001b4
 8000b3c:	40006800 	.word	0x40006800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	2004      	movs	r0, #4
 8000b56:	f7ff fea0 	bl	800089a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f7ff fe9d 	bl	800089a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fe9a 	bl	800089a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	2008      	movs	r0, #8
 8000b68:	f7ff fe97 	bl	800089a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2123      	movs	r1, #35	; 0x23
 8000b70:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0x84>)
 8000b72:	f014 ffe7 	bl	8015b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b76:	2310      	movs	r3, #16
 8000b78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <MX_GPIO_Init+0x88>)
 8000b88:	f014 fd76 	bl	8015678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b8c:	2323      	movs	r3, #35	; 0x23
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_GPIO_Init+0x84>)
 8000ba2:	f014 fd69 	bl	8015678 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_GPIO_Init+0x8c>)
 8000bb8:	f014 fd5e 	bl	8015678 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000c00 	.word	0x48000c00

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f014 fc19 	bl	8015418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40014800 	.word	0x40014800

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>

08000bfe <LL_AHB2_GRP1_EnableClock>:
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c54:	68fb      	ldr	r3, [r7, #12]
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4013      	ands	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09c      	sub	sp, #112	; 0x70
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2250      	movs	r2, #80	; 0x50
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f018 fca9 	bl	801961c <memset>
  if(huart->Instance==USART1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d124      	bne.n	8000d1e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f017 f9d3 	bl	801808c <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff ff82 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cf4:	f7ff ffb5 	bl	8000c62 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff ff80 	bl	8000bfe <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000d1a:	f014 fcad 	bl	8015678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3770      	adds	r7, #112	; 0x70
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09c      	sub	sp, #112	; 0x70
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2250      	movs	r2, #80	; 0x50
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f018 fc63 	bl	801961c <memset>
  if(hpcd->Instance==USB)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <HAL_PCD_MspInit+0xa8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d136      	bne.n	8000dce <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000d66:	2318      	movs	r3, #24
 8000d68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f017 f97d 	bl	801808c <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000d98:	f7ff ff2c 	bl	8000bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff2e 	bl	8000bfe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000db4:	230a      	movs	r3, #10
 8000db6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f014 fc59 	bl	8015678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dc6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000dca:	f7ff ff31 	bl	8000c30 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3770      	adds	r7, #112	; 0x70
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40006800 	.word	0x40006800

08000ddc <LL_APB2_GRP1_EnableClock>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e00:	68fb      	ldr	r3, [r7, #12]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	201a      	movs	r0, #26
 8000e26:	f014 fbff 	bl	8015628 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e2a:	201a      	movs	r0, #26
 8000e2c:	f014 fc16 	bl	801565c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000e30:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e34:	f7ff ffd2 	bl	8000ddc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	f107 0208 	add.w	r2, r7, #8
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f016 fe90 	bl	8017b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e48:	f016 fe78 	bl	8017b3c <HAL_RCC_GetPCLK2Freq>
 8000e4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_InitTick+0x8c>)
 8000e52:	fba2 2303 	umull	r2, r3, r2, r3
 8000e56:	0c9b      	lsrs	r3, r3, #18
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <HAL_InitTick+0x94>)
 8000e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e68:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e7e:	f017 fb92 	bl	80185a6 <HAL_TIM_Base_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d104      	bne.n	8000e92 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_InitTick+0x90>)
 8000e8a:	f017 fbed 	bl	8018668 <HAL_TIM_Base_Start_IT>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	200004ac 	.word	0x200004ac
 8000ea4:	40014800 	.word	0x40014800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000f06:	f017 fbfd 	bl	8018704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200004ac 	.word	0x200004ac

08000f14 <LL_AHB2_GRP1_EnableClock>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_APB1_GRP1_EnableClock>:
{
 8000f46:	b480      	push	{r7}
 8000f48:	b085      	sub	sp, #20
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4013      	ands	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_APB1_GRP1_DisableClock>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8e:	4013      	ands	r3, r2
 8000f90:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <BSP_I2C1_Init+0x70>)
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <BSP_I2C1_Init+0x74>)
 8000fae:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <BSP_I2C1_Init+0x78>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	4918      	ldr	r1, [pc, #96]	; (8001018 <BSP_I2C1_Init+0x78>)
 8000fb8:	600a      	str	r2, [r1, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d122      	bne.n	8001004 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000fbe:	4814      	ldr	r0, [pc, #80]	; (8001010 <BSP_I2C1_Init+0x70>)
 8000fc0:	f015 f894 	bl	80160ec <HAL_I2C_GetState>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d11c      	bne.n	8001004 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <BSP_I2C1_Init+0x70>)
 8000fcc:	f000 f8ee 	bl	80011ac <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <BSP_I2C1_Init+0x70>)
 8000fd8:	f000 f8a4 	bl	8001124 <MX_I2C1_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000fe2:	f06f 0307 	mvn.w	r3, #7
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	e00c      	b.n	8001004 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <BSP_I2C1_Init+0x70>)
 8000fee:	f015 fb0f 	bl	8016610 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000ff8:	f06f 0307 	mvn.w	r3, #7
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	e001      	b.n	8001004 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200004f8 	.word	0x200004f8
 8001014:	40005400 	.word	0x40005400
 8001018:	2000054c 	.word	0x2000054c

0800101c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <BSP_I2C1_DeInit+0x48>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d014      	beq.n	8001058 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <BSP_I2C1_DeInit+0x48>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3b01      	subs	r3, #1
 8001034:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <BSP_I2C1_DeInit+0x48>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <BSP_I2C1_DeInit+0x48>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <BSP_I2C1_DeInit+0x4c>)
 8001042:	f000 f8f7 	bl	8001234 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <BSP_I2C1_DeInit+0x4c>)
 8001048:	f014 fe23 	bl	8015c92 <HAL_I2C_DeInit>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001052:	f06f 0307 	mvn.w	r3, #7
 8001056:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000054c 	.word	0x2000054c
 8001068:	200004f8 	.word	0x200004f8

0800106c <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	4613      	mov	r3, r2
 800107a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	88f9      	ldrh	r1, [r7, #6]
 8001084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001088:	9200      	str	r2, [sp, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <BSP_I2C1_Send+0x50>)
 800108e:	f014 fe43 	bl	8015d18 <HAL_I2C_Master_Transmit>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <BSP_I2C1_Send+0x50>)
 800109a:	f015 f835 	bl	8016108 <HAL_I2C_GetError>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d003      	beq.n	80010ac <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010a4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e002      	b.n	80010b2 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80010ac:	f06f 0303 	mvn.w	r3, #3
 80010b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200004f8 	.word	0x200004f8

080010c0 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	88f9      	ldrh	r1, [r7, #6]
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <BSP_I2C1_Recv+0x50>)
 80010e2:	f014 ff0d 	bl	8015f00 <HAL_I2C_Master_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <BSP_I2C1_Recv+0x50>)
 80010ee:	f015 f80b 	bl	8016108 <HAL_I2C_GetError>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d003      	beq.n	8001100 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010f8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e002      	b.n	8001106 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001100:	f06f 0303 	mvn.w	r3, #3
 8001104:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200004f8 	.word	0x200004f8

08001114 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001118:	f014 f992 	bl	8015440 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C1_Init+0x80>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C1_Init+0x84>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f014 fd04 	bl	8015b74 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f015 fa49 	bl	8016610 <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f015 fa8b 	bl	80166a6 <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800119a:	7bfb      	ldrb	r3, [r7, #15]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	00707cbb 	.word	0x00707cbb

080011ac <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	; 0x70
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2250      	movs	r2, #80	; 0x50
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f018 fa2d 	bl	801961c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011c2:	2304      	movs	r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4618      	mov	r0, r3
 80011d2:	f016 ff5b 	bl	801808c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2002      	movs	r0, #2
 80011d8:	f7ff fe9c 	bl	8000f14 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e2:	2312      	movs	r3, #18
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80011ee:	2304      	movs	r3, #4
 80011f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80011f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <I2C1_MspInit+0x84>)
 80011fa:	f014 fa3d 	bl	8015678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	2312      	movs	r3, #18
 8001206:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001210:	2304      	movs	r3, #4
 8001212:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001214:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <I2C1_MspInit+0x84>)
 800121c:	f014 fa2c 	bl	8015678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001224:	f7ff fe8f 	bl	8000f46 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3770      	adds	r7, #112	; 0x70
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000400 	.word	0x48000400

08001234 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800123c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001240:	f7ff fe9a 	bl	8000f78 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <I2C1_MspDeInit+0x2c>)
 800124a:	f014 fb85 	bl	8015958 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <I2C1_MspDeInit+0x2c>)
 8001254:	f014 fb80 	bl	8015958 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	48000400 	.word	0x48000400

08001264 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	e00a      	b.n	800128c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001276:	f3af 8000 	nop.w
 800127a:	4601      	mov	r1, r0
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf0      	blt.n	8001276 <_read+0x12>
	}

return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:
	}
	return len;
}

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
	return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
	return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
	return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f018 f938 	bl	80195ac <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20030000 	.word	0x20030000
 8001368:	00000400 	.word	0x00000400
 800136c:	20000550 	.word	0x20000550
 8001370:	20008648 	.word	0x20008648

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <SystemInit+0x98>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <SystemInit+0x98>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80013a0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <SystemInit+0x9c>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	f023 0305 	bic.w	r3, r3, #5
 80013c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013de:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <SystemInit+0xa0>)
 80013e0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <SystemInit+0xa0>)
 80013e8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	faf6fefb 	.word	0xfaf6fefb
 8001414:	22041000 	.word	0x22041000

08001418 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001418:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800141a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141c:	3304      	adds	r3, #4

0800141e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001420:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001422:	d3f9      	bcc.n	8001418 <CopyDataInit>
  bx lr
 8001424:	4770      	bx	lr

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001426:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001428:	3004      	adds	r0, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800142a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>
  bx lr
 800142e:	4770      	bx	lr

08001430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001434:	f7ff ff9e 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <LoopForever+0x8>)
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <LoopForever+0xc>)
 800143c:	4a0c      	ldr	r2, [pc, #48]	; (8001470 <LoopForever+0x10>)
 800143e:	2300      	movs	r3, #0
 8001440:	f7ff ffed 	bl	800141e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <LoopForever+0x14>)
 8001446:	490c      	ldr	r1, [pc, #48]	; (8001478 <LoopForever+0x18>)
 8001448:	2300      	movs	r3, #0
 800144a:	f7ff ffee 	bl	800142a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <LoopForever+0x1c>)
 8001450:	490b      	ldr	r1, [pc, #44]	; (8001480 <LoopForever+0x20>)
 8001452:	2300      	movs	r3, #0
 8001454:	f7ff ffe9 	bl	800142a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001458:	f018 f8ae 	bl	80195b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800145c:	f7ff fa52 	bl	8000904 <main>

08001460 <LoopForever>:

LoopForever:
  b LoopForever
 8001460:	e7fe      	b.n	8001460 <LoopForever>
 8001462:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001464:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001468:	20000004 	.word	0x20000004
 800146c:	200000d8 	.word	0x200000d8
 8001470:	0801aa0c 	.word	0x0801aa0c
  INIT_BSS _sbss, _ebss
 8001474:	200000d8 	.word	0x200000d8
 8001478:	20008644 	.word	0x20008644
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800147c:	20030000 	.word	0x20030000
 8001480:	20030000 	.word	0x20030000

08001484 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_IRQHandler>

08001486 <LL_AHB2_GRP1_EnableClock>:
{
 8001486:	b480      	push	{r7}
 8001488:	b085      	sub	sp, #20
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <VL53L1A2_Init+0xe4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	4934      	ldr	r1, [pc, #208]	; (800159c <VL53L1A2_Init+0xe4>)
 80014ca:	600a      	str	r2, [r1, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d154      	bne.n	800157a <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80014d0:	f000 f8d4 	bl	800167c <_I2cFailRecover>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 80014dc:	f7ff fd60 	bl	8000fa0 <BSP_I2C1_Init>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d147      	bne.n	800157e <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 80014ee:	463a      	mov	r2, r7
 80014f0:	2302      	movs	r3, #2
 80014f2:	2100      	movs	r1, #0
 80014f4:	2086      	movs	r0, #134	; 0x86
 80014f6:	f000 f953 	bl	80017a0 <_ExpanderRd>
 80014fa:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d13f      	bne.n	8001582 <VL53L1A2_Init+0xca>
 8001502:	783b      	ldrb	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d13c      	bne.n	8001582 <VL53L1A2_Init+0xca>
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b16      	cmp	r3, #22
 800150c:	d139      	bne.n	8001582 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800150e:	463a      	mov	r2, r7
 8001510:	2302      	movs	r3, #2
 8001512:	2100      	movs	r1, #0
 8001514:	2084      	movs	r0, #132	; 0x84
 8001516:	f000 f943 	bl	80017a0 <_ExpanderRd>
 800151a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d131      	bne.n	8001586 <VL53L1A2_Init+0xce>
 8001522:	783b      	ldrb	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d12e      	bne.n	8001586 <VL53L1A2_Init+0xce>
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b16      	cmp	r3, #22
 800152c:	d12b      	bne.n	8001586 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <VL53L1A2_Init+0xe8>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001534:	23ff      	movs	r3, #255	; 0xff
 8001536:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800153c:	463a      	mov	r2, r7
 800153e:	2302      	movs	r3, #2
 8001540:	2114      	movs	r1, #20
 8001542:	2086      	movs	r0, #134	; 0x86
 8001544:	f000 f95e 	bl	8001804 <_ExpanderWR>
 8001548:	6078      	str	r0, [r7, #4]

	  if (status)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11c      	bne.n	800158a <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001554:	23bf      	movs	r3, #191	; 0xbf
 8001556:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001558:	463a      	mov	r2, r7
 800155a:	2302      	movs	r3, #2
 800155c:	2114      	movs	r1, #20
 800155e:	2084      	movs	r0, #132	; 0x84
 8001560:	f000 f950 	bl	8001804 <_ExpanderWR>
 8001564:	6078      	str	r0, [r7, #4]

	  if (status)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d110      	bne.n	800158e <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <VL53L1A2_Init+0xe8>)
 800156e:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001572:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001574:	f000 f8f4 	bl	8001760 <_ExpandersSetAllIO>
 8001578:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800157a:	bf00      	nop
 800157c:	e008      	b.n	8001590 <VL53L1A2_Init+0xd8>
      goto done_err;
 800157e:	bf00      	nop
 8001580:	e006      	b.n	8001590 <VL53L1A2_Init+0xd8>
      goto done_err;
 8001582:	bf00      	nop
 8001584:	e004      	b.n	8001590 <VL53L1A2_Init+0xd8>
		  goto done_err;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <VL53L1A2_Init+0xd8>
		goto done_err;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <VL53L1A2_Init+0xd8>
		goto done_err;
 800158e:	bf00      	nop
  return status;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000554 	.word	0x20000554
 80015a0:	20000558 	.word	0x20000558

080015a4 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d037      	beq.n	800162a <VL53L1A2_ResetId+0x86>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	dc4e      	bgt.n	800165c <VL53L1A2_ResetId+0xb8>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01a      	beq.n	80015f8 <VL53L1A2_ResetId+0x54>
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d14a      	bne.n	800165c <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 80015d2:	70da      	strb	r2, [r3, #3]

      if (state)
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 80015dc:	78db      	ldrb	r3, [r3, #3]
 80015de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 80015e6:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80015e8:	2301      	movs	r3, #1
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <VL53L1A2_ResetId+0xd0>)
 80015ec:	2113      	movs	r1, #19
 80015ee:	2084      	movs	r0, #132	; 0x84
 80015f0:	f000 f908 	bl	8001804 <_ExpanderWR>
 80015f4:	60f8      	str	r0, [r7, #12]
      break;
 80015f6:	e035      	b.n	8001664 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 8001604:	705a      	strb	r2, [r3, #1]

      if (state)
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 8001618:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800161a:	2301      	movs	r3, #1
 800161c:	4a16      	ldr	r2, [pc, #88]	; (8001678 <VL53L1A2_ResetId+0xd4>)
 800161e:	2113      	movs	r1, #19
 8001620:	2086      	movs	r0, #134	; 0x86
 8001622:	f000 f8ef 	bl	8001804 <_ExpanderWR>
 8001626:	60f8      	str	r0, [r7, #12]
      break;
 8001628:	e01c      	b.n	8001664 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 8001636:	705a      	strb	r2, [r3, #1]

      if (state)
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <VL53L1A2_ResetId+0xcc>)
 800164a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800164c:	2301      	movs	r3, #1
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <VL53L1A2_ResetId+0xd4>)
 8001650:	2113      	movs	r1, #19
 8001652:	2086      	movs	r0, #134	; 0x86
 8001654:	f000 f8d6 	bl	8001804 <_ExpanderWR>
 8001658:	60f8      	str	r0, [r7, #12]
      break;
 800165a:	e003      	b.n	8001664 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	60fb      	str	r3, [r7, #12]
      goto done;
 8001662:	e000      	b.n	8001666 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001664:	bf00      	nop
  return status;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000558 	.word	0x20000558
 8001674:	2000055b 	.word	0x2000055b
 8001678:	20000559 	.word	0x20000559

0800167c <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <_I2cFailRecover+0xdc>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 800168e:	2300      	movs	r3, #0
 8001690:	e05e      	b.n	8001750 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff fef7 	bl	8001486 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 8001698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800169e:	2311      	movs	r3, #17
 80016a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	482c      	ldr	r0, [pc, #176]	; (800175c <_I2cFailRecover+0xe0>)
 80016ac:	f013 ffe4 	bl	8015678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80016b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016b6:	2311      	movs	r3, #17
 80016b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80016be:	463b      	mov	r3, r7
 80016c0:	4619      	mov	r1, r3
 80016c2:	4826      	ldr	r0, [pc, #152]	; (800175c <_I2cFailRecover+0xe0>)
 80016c4:	f013 ffd8 	bl	8015678 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	4823      	ldr	r0, [pc, #140]	; (800175c <_I2cFailRecover+0xe0>)
 80016d0:	f014 fa38 	bl	8015b44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016da:	4820      	ldr	r0, [pc, #128]	; (800175c <_I2cFailRecover+0xe0>)
 80016dc:	f014 fa32 	bl	8015b44 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	75fb      	strb	r3, [r7, #23]
 80016e4:	e014      	b.n	8001710 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ec:	481b      	ldr	r0, [pc, #108]	; (800175c <_I2cFailRecover+0xe0>)
 80016ee:	f014 fa29 	bl	8015b44 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f013 febc 	bl	8015470 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	4817      	ldr	r0, [pc, #92]	; (800175c <_I2cFailRecover+0xe0>)
 8001700:	f014 fa20 	bl	8015b44 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f013 feb3 	bl	8015470 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	3301      	adds	r3, #1
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b09      	cmp	r3, #9
 8001714:	d9e7      	bls.n	80016e6 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8001716:	7dbb      	ldrb	r3, [r7, #22]
 8001718:	3301      	adds	r3, #1
 800171a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800171c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <_I2cFailRecover+0xe0>)
 8001722:	f014 f9f7 	bl	8015b14 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_I2cFailRecover+0xb6>
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	2b06      	cmp	r3, #6
 8001730:	d9d6      	bls.n	80016e0 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <_I2cFailRecover+0xe0>)
 8001738:	f014 f9ec 	bl	8015b14 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001742:	f06f 0304 	mvn.w	r3, #4
 8001746:	e003      	b.n	8001750 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <_I2cFailRecover+0xdc>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000055c 	.word	0x2000055c
 800175c:	48000400 	.word	0x48000400

08001760 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 8001766:	2302      	movs	r3, #2
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <_ExpandersSetAllIO+0x38>)
 800176a:	2112      	movs	r1, #18
 800176c:	2086      	movs	r0, #134	; 0x86
 800176e:	f000 f849 	bl	8001804 <_ExpanderWR>
 8001772:	6078      	str	r0, [r7, #4]

  if (status)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800177a:	2302      	movs	r3, #2
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <_ExpandersSetAllIO+0x3c>)
 800177e:	2112      	movs	r1, #18
 8001780:	2084      	movs	r0, #132	; 0x84
 8001782:	f000 f83f 	bl	8001804 <_ExpanderWR>
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	e000      	b.n	800178c <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800178a:	bf00      	nop

done_err:
  return status;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000558 	.word	0x20000558
 800179c:	2000055a 	.word	0x2000055a

080017a0 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	b299      	uxth	r1, r3
 80017b8:	f107 0213 	add.w	r2, r7, #19
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <_ExpanderRd+0x60>)
 80017c4:	f014 faa8 	bl	8015d18 <HAL_I2C_Master_Transmit>
 80017c8:	4603      	mov	r3, r0
 80017ca:	617b      	str	r3, [r7, #20]

    if (status)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d110      	bne.n	80017f4 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	b299      	uxth	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2064      	movs	r0, #100	; 0x64
 80017de:	fb00 f303 	mul.w	r3, r0, r3
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <_ExpanderRd+0x60>)
 80017ea:	f014 fb89 	bl	8015f00 <HAL_I2C_Master_Receive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e000      	b.n	80017f6 <_ExpanderRd+0x56>
      break;
 80017f4:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 80017f6:	697b      	ldr	r3, [r7, #20]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200004f8 	.word	0x200004f8

08001804 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	3301      	adds	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f017 feec 	bl	8019600 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	b299      	uxth	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	b29b      	uxth	r3, r3
 8001834:	f107 0214 	add.w	r2, r7, #20
 8001838:	2064      	movs	r0, #100	; 0x64
 800183a:	9000      	str	r0, [sp, #0]
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <_ExpanderWR+0x4c>)
 800183e:	f014 fa6b 	bl	8015d18 <HAL_I2C_Master_Transmit>
 8001842:	4603      	mov	r3, r0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001848:	4618      	mov	r0, r3
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200004f8 	.word	0x200004f8

08001854 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d903      	bls.n	800186a <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001862:	f06f 0301 	mvn.w	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e014      	b.n	8001894 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 800186a:	f7ff fe25 	bl	80014b8 <VL53L1A2_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001874:	f06f 0303 	mvn.w	r3, #3
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e00b      	b.n	8001894 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 800187c:	2101      	movs	r1, #1
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8d4 	bl	8001a2c <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001884:	2100      	movs	r1, #0
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8d0 	bl	8001a2c <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f90d 	bl	8001aac <VL53L1CB_Probe>
 8001892:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d903      	bls.n	80018b8 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018b0:	f06f 0301 	mvn.w	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e012      	b.n	80018de <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	490b      	ldr	r1, [pc, #44]	; (80018ec <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	4610      	mov	r0, r2
 80018ca:	4798      	blx	r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da03      	bge.n	80018da <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80018d2:	f06f 0304 	mvn.w	r3, #4
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000056c 	.word	0x2000056c
 80018ec:	20000560 	.word	0x20000560

080018f0 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d903      	bls.n	8001908 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001900:	f06f 0301 	mvn.w	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e012      	b.n	800192e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	490b      	ldr	r1, [pc, #44]	; (800193c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4610      	mov	r0, r2
 800191a:	4798      	blx	r3
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	da03      	bge.n	800192a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001922:	f06f 0304 	mvn.w	r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e001      	b.n	800192e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000056c 	.word	0x2000056c
 800193c:	20000560 	.word	0x20000560

08001940 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d903      	bls.n	8001958 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001950:	f06f 0301 	mvn.w	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e012      	b.n	800197e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	4610      	mov	r0, r2
 800196a:	4798      	blx	r3
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	da03      	bge.n	800197a <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001972:	f06f 0304 	mvn.w	r3, #4
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e001      	b.n	800197e <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000056c 	.word	0x2000056c
 800198c:	20000560 	.word	0x20000560

08001990 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d903      	bls.n	80019a8 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019a0:	f06f 0301 	mvn.w	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e012      	b.n	80019ce <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	490b      	ldr	r1, [pc, #44]	; (80019dc <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4610      	mov	r0, r2
 80019ba:	4798      	blx	r3
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da03      	bge.n	80019ca <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019c2:	f06f 0304 	mvn.w	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e001      	b.n	80019ce <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000056c 	.word	0x2000056c
 80019dc:	20000560 	.word	0x20000560

080019e0 <VL53L1A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d903      	bls.n	80019f6 <VL53L1A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019ee:	f06f 0301 	mvn.w	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e011      	b.n	8001a1a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Stop(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <VL53L1A2_RANGING_SENSOR_Stop+0x44>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	490a      	ldr	r1, [pc, #40]	; (8001a28 <VL53L1A2_RANGING_SENSOR_Stop+0x48>)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a04:	4610      	mov	r0, r2
 8001a06:	4798      	blx	r3
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da03      	bge.n	8001a16 <VL53L1A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a0e:	f06f 0304 	mvn.w	r3, #4
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e001      	b.n	8001a1a <VL53L1A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000056c 	.word	0x2000056c
 8001a28:	20000560 	.word	0x20000560

08001a2c <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d903      	bls.n	8001a44 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a3c:	f06f 0301 	mvn.w	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e02e      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d112      	bne.n	8001a70 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fda7 	bl	80015a4 <VL53L1A2_ResetId>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da03      	bge.n	8001a64 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a5c:	f06f 0303 	mvn.w	r3, #3
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e01e      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001a64:	2002      	movs	r0, #2
 8001a66:	f013 fd03 	bl	8015470 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e018      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d112      	bne.n	8001a9c <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd91 	bl	80015a4 <VL53L1A2_ResetId>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da03      	bge.n	8001a90 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a88:	f06f 0303 	mvn.w	r3, #3
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e008      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f013 fced 	bl	8015470 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e002      	b.n	8001aa2 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a9c:	f06f 0301 	mvn.w	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 8001ab4:	2352      	movs	r3, #82	; 0x52
 8001ab6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 8001ab8:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <VL53L1CB_Probe+0xf0>)
 8001aba:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <VL53L1CB_Probe+0xf4>)
 8001abe:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <VL53L1CB_Probe+0xf8>)
 8001ac2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001ac4:	4b38      	ldr	r3, [pc, #224]	; (8001ba8 <VL53L1CB_Probe+0xfc>)
 8001ac6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 8001ac8:	4b38      	ldr	r3, [pc, #224]	; (8001bac <VL53L1CB_Probe+0x100>)
 8001aca:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4a36      	ldr	r2, [pc, #216]	; (8001bb0 <VL53L1CB_Probe+0x104>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	f107 020c 	add.w	r2, r7, #12
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f013 f824 	bl	8014b2e <VL53L1CB_RegisterBusIO>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001aec:	f06f 0304 	mvn.w	r3, #4
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
 8001af2:	e04d      	b.n	8001b90 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <VL53L1CB_Probe+0x104>)
 8001b00:	4413      	add	r3, r2
 8001b02:	f107 0208 	add.w	r2, r7, #8
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f013 f8cc 	bl	8014ca6 <VL53L1CB_ReadID>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b14:	f06f 0304 	mvn.w	r3, #4
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e039      	b.n	8001b90 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d003      	beq.n	8001b2e <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001b26:	f06f 0306 	mvn.w	r3, #6
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e030      	b.n	8001b90 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <VL53L1CB_Probe+0x108>)
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <VL53L1CB_Probe+0x10c>)
 8001b32:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <VL53L1CB_Probe+0x104>)
 8001b40:	441a      	add	r2, r3
 8001b42:	491e      	ldr	r1, [pc, #120]	; (8001bbc <VL53L1CB_Probe+0x110>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <VL53L1CB_Probe+0x108>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	491a      	ldr	r1, [pc, #104]	; (8001bbc <VL53L1CB_Probe+0x110>)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4798      	blx	r3
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b62:	f06f 0304 	mvn.w	r3, #4
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	e012      	b.n	8001b90 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <VL53L1CB_Probe+0x108>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4912      	ldr	r1, [pc, #72]	; (8001bbc <VL53L1CB_Probe+0x110>)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b78:	4911      	ldr	r1, [pc, #68]	; (8001bc0 <VL53L1CB_Probe+0x114>)
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4798      	blx	r3
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b84:	f06f 0304 	mvn.w	r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e001      	b.n	8001b90 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	08000fa1 	.word	0x08000fa1
 8001ba0:	0800101d 	.word	0x0800101d
 8001ba4:	0800106d 	.word	0x0800106d
 8001ba8:	080010c1 	.word	0x080010c1
 8001bac:	08001115 	.word	0x08001115
 8001bb0:	20000580 	.word	0x20000580
 8001bb4:	2000056c 	.word	0x2000056c
 8001bb8:	20000034 	.word	0x20000034
 8001bbc:	20000560 	.word	0x20000560
 8001bc0:	20000570 	.word	0x20000570

08001bc4 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001bd0:	793b      	ldrb	r3, [r7, #4]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	d808      	bhi.n	8001be8 <CheckValidRectRoi+0x24>
 8001bd6:	797b      	ldrb	r3, [r7, #5]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d805      	bhi.n	8001be8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	d802      	bhi.n	8001be8 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d901      	bls.n	8001bec <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001be8:	23fc      	movs	r3, #252	; 0xfc
 8001bea:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001bec:	793a      	ldrb	r2, [r7, #4]
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d803      	bhi.n	8001bfc <CheckValidRectRoi+0x38>
 8001bf4:	797a      	ldrb	r2, [r7, #5]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d201      	bcs.n	8001c00 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001bfc:	23fc      	movs	r3, #252	; 0xfc
 8001bfe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3318      	adds	r3, #24
 8001c24:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001c2c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	2101      	movs	r1, #1
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f012 fd7d 	bl	8014738 <VL53L1_WrByte>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d105      	bne.n	8001c7e <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8001c72:	2101      	movs	r1, #1
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 fc56 	bl	8004526 <VL53L1_data_init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8001c92:	3308      	adds	r3, #8
 8001c94:	220c      	movs	r2, #12
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f017 fcbf 	bl	801961c <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73bb      	strb	r3, [r7, #14]
 8001cb6:	e012      	b.n	8001cde <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 8001cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d112      	bne.n	8001ce6 <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001cc0:	7bbb      	ldrb	r3, [r7, #14]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fc90 	bl	80025ee <VL53L1_SetLimitCheckEnable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73bb      	strb	r3, [r7, #14]
 8001cde:	7bbb      	ldrb	r3, [r7, #14]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d9e9      	bls.n	8001cb8 <VL53L1_DataInit+0x5a>
 8001ce4:	e000      	b.n	8001ce8 <VL53L1_DataInit+0x8a>
		else
			break;
 8001ce6:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 faef 	bl	80072d6 <VL53L1_set_dmax_mode>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001d20:	2320      	movs	r3, #32
 8001d22:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7bba      	ldrb	r2, [r7, #14]
 8001d28:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f947 	bl	8001fc0 <VL53L1_SetPresetMode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 8001d36:	2102      	movs	r1, #2
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f98b 	bl	8002054 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f001 fe69 	bl	8003a24 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8001d6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f011 ffa1 	bl	8013cb6 <VL53L1_poll_for_boot_completion>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	603a      	str	r2, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	460b      	mov	r3, r1
 8001d92:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8001d98:	4a48      	ldr	r2, [pc, #288]	; (8001ebc <ComputeDevicePresetMode+0x138>)
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4611      	mov	r1, r2
 8001da2:	8019      	strh	r1, [r3, #0]
 8001da4:	3302      	adds	r3, #2
 8001da6:	0c12      	lsrs	r2, r2, #16
 8001da8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 8001daa:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <ComputeDevicePresetMode+0x13c>)
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4611      	mov	r1, r2
 8001db4:	8019      	strh	r1, [r3, #0]
 8001db6:	3302      	adds	r3, #2
 8001db8:	0c12      	lsrs	r2, r2, #16
 8001dba:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001dbc:	4a41      	ldr	r2, [pc, #260]	; (8001ec4 <ComputeDevicePresetMode+0x140>)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	8019      	strh	r1, [r3, #0]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	0c12      	lsrs	r2, r2, #16
 8001dcc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001dce:	4a3e      	ldr	r2, [pc, #248]	; (8001ec8 <ComputeDevicePresetMode+0x144>)
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	8019      	strh	r1, [r3, #0]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	0c12      	lsrs	r2, r2, #16
 8001dde:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001de0:	4a3a      	ldr	r2, [pc, #232]	; (8001ecc <ComputeDevicePresetMode+0x148>)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4611      	mov	r1, r2
 8001dea:	8019      	strh	r1, [r3, #0]
 8001dec:	3302      	adds	r3, #2
 8001dee:	0c12      	lsrs	r2, r2, #16
 8001df0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <ComputeDevicePresetMode+0x80>
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <ComputeDevicePresetMode+0x86>
 8001e02:	e005      	b.n	8001e10 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	77bb      	strb	r3, [r7, #30]
		break;
 8001e08:	e004      	b.n	8001e14 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	77bb      	strb	r3, [r7, #30]
		break;
 8001e0e:	e001      	b.n	8001e14 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001e10:	2302      	movs	r3, #2
 8001e12:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d845      	bhi.n	8001ea8 <ComputeDevicePresetMode+0x124>
 8001e1c:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <ComputeDevicePresetMode+0xa0>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e59 	.word	0x08001e59
 8001e28:	08001e69 	.word	0x08001e69
 8001e2c:	08001e79 	.word	0x08001e79
 8001e30:	08001e49 	.word	0x08001e49
 8001e34:	08001ea9 	.word	0x08001ea9
 8001e38:	08001ea9 	.word	0x08001ea9
 8001e3c:	08001e99 	.word	0x08001e99
 8001e40:	08001e89 	.word	0x08001e89
 8001e44:	08001ea1 	.word	0x08001ea1
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8001e48:	7fbb      	ldrb	r3, [r7, #30]
 8001e4a:	3320      	adds	r3, #32
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	701a      	strb	r2, [r3, #0]
		break;
 8001e56:	e029      	b.n	8001eac <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 8001e58:	7fbb      	ldrb	r3, [r7, #30]
 8001e5a:	3320      	adds	r3, #32
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
		break;
 8001e66:	e021      	b.n	8001eac <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 8001e68:	7fbb      	ldrb	r3, [r7, #30]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	701a      	strb	r2, [r3, #0]
		break;
 8001e76:	e019      	b.n	8001eac <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8001e78:	7fbb      	ldrb	r3, [r7, #30]
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	443b      	add	r3, r7
 8001e7e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
		break;
 8001e86:	e011      	b.n	8001eac <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8001e88:	7fbb      	ldrb	r3, [r7, #30]
 8001e8a:	3320      	adds	r3, #32
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
		break;
 8001e96:	e009      	b.n	8001eac <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2211      	movs	r2, #17
 8001e9c:	701a      	strb	r2, [r3, #0]
		break;
 8001e9e:	e005      	b.n	8001eac <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2227      	movs	r2, #39	; 0x27
 8001ea4:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 8001ea6:	e001      	b.n	8001eac <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001ea8:	23f8      	movs	r3, #248	; 0xf8
 8001eaa:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 8001eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3724      	adds	r7, #36	; 0x24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	0801a854 	.word	0x0801a854
 8001ec0:	0801a858 	.word	0x0801a858
 8001ec4:	0801a85c 	.word	0x0801a85c
 8001ec8:	0801a860 	.word	0x0801a860
 8001ecc:	0801a864 	.word	0x0801a864

08001ed0 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af04      	add	r7, sp, #16
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	72fb      	strb	r3, [r7, #11]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d002      	beq.n	8001f04 <SetPresetMode+0x34>
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d103      	bne.n	8001f0c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f0a:	e002      	b.n	8001f12 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001f12:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001f16:	7ab9      	ldrb	r1, [r7, #10]
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff32 	bl	8001d84 <ComputeDevicePresetMode>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001f26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d112      	bne.n	8001f54 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001f2e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001f32:	f107 001c 	add.w	r0, r7, #28
 8001f36:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4603      	mov	r3, r0
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f002 ffaf 	bl	8004eac <VL53L1_get_preset_mode_timing_cfg>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d112      	bne.n	8001f82 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001f5c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001f60:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001f62:	69fd      	ldr	r5, [r7, #28]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	9102      	str	r1, [sp, #8]
 8001f6c:	9201      	str	r2, [sp, #4]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	462b      	mov	r3, r5
 8001f72:	4622      	mov	r2, r4
 8001f74:	4601      	mov	r1, r0
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f003 f8ee 	bl	8005158 <VL53L1_set_preset_mode>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001f82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f90:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001f92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8001fb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bdb0      	pop	{r4, r5, r7, pc}

08001fc0 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f00c f94a 	bl	800e26e <VL53L1_low_power_auto_data_init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d101      	bne.n	8001fe8 <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8001fe8:	7bba      	ldrb	r2, [r7, #14]
 8001fea:	78f9      	ldrb	r1, [r7, #3]
 8001fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff6d 	bl	8001ed0 <SetPresetMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d117      	bne.n	8002032 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d005      	beq.n	8002014 <VL53L1_SetPresetMode+0x54>
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d002      	beq.n	8002014 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	2b08      	cmp	r3, #8
 8002012:	d107      	bne.n	8002024 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002014:	f24a 0128 	movw	r1, #41000	; 0xa028
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8a9 	bl	8002170 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e006      	b.n	8002032 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8002024:	f248 2135 	movw	r1, #33333	; 0x8235
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8a1 	bl	8002170 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 800203a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa68 	bl	8002514 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0a2      	sub	sp, #136	; 0x88
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002078:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800207c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8002080:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002084:	2b09      	cmp	r3, #9
 8002086:	d105      	bne.n	8002094 <VL53L1_SetDistanceMode+0x40>
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d002      	beq.n	8002094 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 800208e:	f06f 0303 	mvn.w	r3, #3
 8002092:	e069      	b.n	8002168 <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d008      	beq.n	80020ac <VL53L1_SetDistanceMode+0x58>
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d005      	beq.n	80020ac <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d002      	beq.n	80020ac <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80020a6:	f06f 0303 	mvn.w	r3, #3
 80020aa:	e05d      	b.n	8002168 <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 80020ac:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d108      	bne.n	80020c6 <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f002 fede 	bl	8004e7c <VL53L1_get_zone_config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80020ce:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10b      	bne.n	80020ee <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80020d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020da:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80020de:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f002 fd8a 	bl	8004bfc <VL53L1_get_timeouts_us>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80020ee:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80020fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fee5 	bl	8001ed0 <SetPresetMode>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 800210c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800211a:	461a      	mov	r2, r3
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002122:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 800212a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800212c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800212e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f002 fd2a 	bl	8004b8a <VL53L1_set_timeouts_us>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 800213c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8002144:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 800214a:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f002 fe4c 	bl	8004df6 <VL53L1_set_zone_config>
 800215e:	4603      	mov	r3, r0
 8002160:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8002164:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8002168:	4618      	mov	r0, r3
 800216a:	3788      	adds	r7, #136	; 0x88
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800217a:	2300      	movs	r3, #0
 800217c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002194:	4b75      	ldr	r3, [pc, #468]	; (800236c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8002196:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d902      	bls.n	80021a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80021a0:	23fc      	movs	r3, #252	; 0xfc
 80021a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80021a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80021ae:	f107 031a 	add.w	r3, r7, #26
 80021b2:	461a      	mov	r2, r3
 80021b4:	2105      	movs	r1, #5
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fb9a 	bl	80028f0 <VL53L1_GetSequenceStepEnable>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80021c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80021ca:	f107 0319 	add.w	r3, r7, #25
 80021ce:	461a      	mov	r2, r3
 80021d0:	2106      	movs	r1, #6
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fb8c 	bl	80028f0 <VL53L1_GetSequenceStepEnable>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80021de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	f107 0210 	add.w	r2, r7, #16
 80021ee:	f107 010c 	add.w	r1, r7, #12
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f002 fd02 	bl	8004bfc <VL53L1_get_timeouts_us>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80021fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 80a0 	bne.w	8002348 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800220e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002212:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8002218:	2301      	movs	r3, #1
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 800221c:	7efb      	ldrb	r3, [r7, #27]
 800221e:	3b01      	subs	r3, #1
 8002220:	2b08      	cmp	r3, #8
 8002222:	d861      	bhi.n	80022e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	080022d1 	.word	0x080022d1
 8002230:	080022d1 	.word	0x080022d1
 8002234:	0800226d 	.word	0x0800226d
 8002238:	08002251 	.word	0x08002251
 800223c:	080022e9 	.word	0x080022e9
 8002240:	080022e9 	.word	0x080022e9
 8002244:	080022dd 	.word	0x080022dd
 8002248:	08002293 	.word	0x08002293
 800224c:	080022d1 	.word	0x080022d1
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002250:	7ebb      	ldrb	r3, [r7, #26]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8002256:	7e7b      	ldrb	r3, [r7, #25]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d103      	bne.n	8002264 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 800225c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8002262:	e044      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8002264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800226a:	e040      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002272:	7ebb      	ldrb	r3, [r7, #26]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d002      	beq.n	800227e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8002278:	7e7b      	ldrb	r3, [r7, #25]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d103      	bne.n	8002286 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 800227e:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
 8002284:	e002      	b.n	800228c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8002286:	f245 4360 	movw	r3, #21600	; 0x5460
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 800228c:	2302      	movs	r3, #2
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8002290:	e02d      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8002298:	23f5      	movs	r3, #245	; 0xf5
 800229a:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	461a      	mov	r2, r3
 80022a2:	f248 0188 	movw	r1, #32904	; 0x8088
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f005 f88c 	bl	80073c4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	dd07      	ble.n	80022c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	22f5      	movs	r2, #245	; 0xf5
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	4413      	add	r3, r2
 80022c0:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80022ce:	e00e      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 80022d0:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 80022d6:	2306      	movs	r3, #6
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80022da:	e008      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80022e2:	3308      	adds	r3, #8
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80022e6:	e002      	b.n	80022ee <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80022e8:	23f8      	movs	r3, #248	; 0xf8
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d803      	bhi.n	80022fe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80022f6:	23fc      	movs	r3, #252	; 0xfc
 80022f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022fc:	e003      	b.n	8002306 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8002304:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8002306:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11c      	bne.n	8002348 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	429a      	cmp	r2, r3
 8002314:	d203      	bcs.n	800231e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002316:	23fc      	movs	r3, #252	; 0xfc
 8002318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800231c:	e00d      	b.n	800233a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f002 fc2b 	bl	8004b8a <VL53L1_set_timeouts_us>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 800233a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8002348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800234c:	2b00      	cmp	r3, #0
 800234e:	d106      	bne.n	800235e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800235e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002362:	4618      	mov	r0, r3
 8002364:	3730      	adds	r7, #48	; 0x30
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	00086470 	.word	0x00086470
 8002370:	00989680 	.word	0x00989680

08002374 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	; 0x30
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 80023a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80023aa:	f107 031b 	add.w	r3, r7, #27
 80023ae:	461a      	mov	r2, r3
 80023b0:	2105      	movs	r1, #5
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa9c 	bl	80028f0 <VL53L1_GetSequenceStepEnable>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80023be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80023c6:	f107 031a 	add.w	r3, r7, #26
 80023ca:	461a      	mov	r2, r3
 80023cc:	2106      	movs	r1, #6
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa8e 	bl	80028f0 <VL53L1_GetSequenceStepEnable>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80023da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	f107 0214 	add.w	r2, r7, #20
 80023ea:	f107 010c 	add.w	r1, r7, #12
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f002 fc04 	bl	8004bfc <VL53L1_get_timeouts_us>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80023fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d179      	bne.n	80024f6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002408:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800240c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8002410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002414:	3b01      	subs	r3, #1
 8002416:	2b08      	cmp	r3, #8
 8002418:	d869      	bhi.n	80024ee <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 800241a:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 800241c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002420:	080024cd 	.word	0x080024cd
 8002424:	080024cd 	.word	0x080024cd
 8002428:	08002467 	.word	0x08002467
 800242c:	08002445 	.word	0x08002445
 8002430:	080024ef 	.word	0x080024ef
 8002434:	080024ef 	.word	0x080024ef
 8002438:	080024df 	.word	0x080024df
 800243c:	0800248f 	.word	0x0800248f
 8002440:	080024cd 	.word	0x080024cd
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002444:	7efb      	ldrb	r3, [r7, #27]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d002      	beq.n	8002450 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 800244a:	7ebb      	ldrb	r3, [r7, #26]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002456:	3308      	adds	r3, #8
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800245a:	e04d      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002464:	e048      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8002466:	7efb      	ldrb	r3, [r7, #27]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 800246c:	7ebb      	ldrb	r3, [r7, #26]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d106      	bne.n	8002480 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8002478:	3334      	adds	r3, #52	; 0x34
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 800247e:	e03b      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8002486:	3330      	adds	r3, #48	; 0x30
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800248c:	e034      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800248e:	23f5      	movs	r3, #245	; 0xf5
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8002492:	f107 0308 	add.w	r3, r7, #8
 8002496:	461a      	mov	r2, r3
 8002498:	f248 0188 	movw	r1, #32904	; 0x8088
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f004 ff91 	bl	80073c4 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	dd07      	ble.n	80024b8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	22f5      	movs	r2, #245	; 0xf5
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	4413      	add	r3, r2
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80024be:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024ca:	e015      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024dc:	e00c      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80024e8:	3308      	adds	r3, #8
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 80024ec:	e004      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80024ee:	23f8      	movs	r3, #248	; 0xf8
 80024f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80024f4:	e000      	b.n	80024f8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 80024f6:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 80024f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002504:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002506:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800250a:	4618      	mov	r0, r3
 800250c:	3730      	adds	r7, #48	; 0x30
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop

08002514 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f002 facc 	bl	8004ad8 <VL53L1_set_inter_measurement_period_ms>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f002 fae3 	bl	8004b34 <VL53L1_get_inter_measurement_period_ms>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	019b      	lsls	r3, r3, #6
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800257a:	fba1 1303 	umull	r1, r3, r1, r3
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	460b      	mov	r3, r1
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <SetLimitValue+0x1e>
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d009      	beq.n	80025cc <SetLimitValue+0x30>
 80025b8:	e011      	b.n	80025de <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0b9b      	lsrs	r3, r3, #14
 80025be:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 80025c0:	8abb      	ldrh	r3, [r7, #20]
 80025c2:	4619      	mov	r1, r3
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f003 f988 	bl	80058da <VL53L1_set_lite_sigma_threshold>
		break;
 80025ca:	e00a      	b.n	80025e2 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0a5b      	lsrs	r3, r3, #9
 80025d0:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80025d2:	8abb      	ldrh	r3, [r7, #20]
 80025d4:	4619      	mov	r1, r3
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f003 f9ad 	bl	8005936 <VL53L1_set_lite_min_count_rate>
		break;
 80025dc:	e001      	b.n	80025e2 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80025de:	23fc      	movs	r3, #252	; 0xfc
 80025e0:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
 80025fa:	4613      	mov	r3, r2
 80025fc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d902      	bls.n	8002612 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800260c:	23fc      	movs	r3, #252	; 0xfc
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e015      	b.n	800263e <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8002612:	787b      	ldrb	r3, [r7, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	e007      	b.n	800262e <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffb1 	bl	800259c <SetLimitValue>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002646:	787b      	ldrb	r3, [r7, #1]
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2da      	uxtb	r2, r3
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	4611      	mov	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800265e:	3334      	adds	r3, #52	; 0x34
 8002660:	460a      	mov	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8002664:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	460b      	mov	r3, r1
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002682:	897b      	ldrh	r3, [r7, #10]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d905      	bls.n	8002694 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002688:	23fc      	movs	r3, #252	; 0xfc
 800268a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e00a      	b.n	80026aa <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002694:	897b      	ldrh	r3, [r7, #10]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800269e:	3334      	adds	r3, #52	; 0x34
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7dba      	ldrb	r2, [r7, #22]
 80026a8:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80026aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b088      	sub	sp, #32
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	460b      	mov	r3, r1
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <VL53L1_GetLimitCheckValue+0x22>
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d00c      	beq.n	80026f4 <VL53L1_GetLimitCheckValue+0x3a>
 80026da:	e017      	b.n	800270c <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4619      	mov	r1, r3
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f003 f8e2 	bl	80058ac <VL53L1_get_lite_sigma_threshold>
 80026e8:	4603      	mov	r3, r0
 80026ea:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80026ec:	8abb      	ldrh	r3, [r7, #20]
 80026ee:	039b      	lsls	r3, r3, #14
 80026f0:	61bb      	str	r3, [r7, #24]
		break;
 80026f2:	e00d      	b.n	8002710 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80026f4:	f107 0316 	add.w	r3, r7, #22
 80026f8:	4619      	mov	r1, r3
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f003 f904 	bl	8005908 <VL53L1_get_lite_min_count_rate>
 8002700:	4603      	mov	r3, r0
 8002702:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002704:	8afb      	ldrh	r3, [r7, #22]
 8002706:	025b      	lsls	r3, r3, #9
 8002708:	61bb      	str	r3, [r7, #24]
		break;
 800270a:	e001      	b.n	8002710 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800270c:	23fc      	movs	r3, #252	; 0xfc
 800270e:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d129      	bne.n	800276c <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800273e:	3334      	adds	r3, #52	; 0x34
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e012      	b.n	800276c <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800275c:	897b      	ldrh	r3, [r7, #10]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4413      	add	r3, r2
 8002762:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002766:	3334      	adds	r3, #52	; 0x34
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 800276c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002770:	4618      	mov	r0, r3
 8002772:	3720      	adds	r7, #32
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0a0      	sub	sp, #128	; 0x80
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002794:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002798:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 800279c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d102      	bne.n	80027aa <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 80027a4:	2310      	movs	r3, #16
 80027a6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d303      	bcc.n	80027be <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80027be:	23fc      	movs	r3, #252	; 0xfc
 80027c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 80027c4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d17e      	bne.n	80028ca <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 80027cc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80027d0:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80027e2:	e06a      	b.n	80028ba <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 80027e4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	f107 0208 	add.w	r2, r7, #8
 80027f2:	3301      	adds	r3, #1
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 80027f8:	68b8      	ldr	r0, [r7, #8]
 80027fa:	f7ff f9e3 	bl	8001bc4 <CheckValidRectRoi>
 80027fe:	4603      	mov	r3, r0
 8002800:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8002804:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002808:	2b00      	cmp	r3, #0
 800280a:	d15d      	bne.n	80028c8 <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800280c:	7abb      	ldrb	r3, [r7, #10]
 800280e:	461a      	mov	r2, r3
 8002810:	7a3b      	ldrb	r3, [r7, #8]
 8002812:	4413      	add	r3, r2
 8002814:	3301      	adds	r3, #1
					/ 2;
 8002816:	0fda      	lsrs	r2, r3, #31
 8002818:	4413      	add	r3, r2
 800281a:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 800281c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002820:	7a7b      	ldrb	r3, [r7, #9]
 8002822:	461a      	mov	r2, r3
 8002824:	7afb      	ldrb	r3, [r7, #11]
 8002826:	4413      	add	r3, r2
 8002828:	3301      	adds	r3, #1
					/ 2;
 800282a:	0fda      	lsrs	r2, r3, #31
 800282c:	4413      	add	r3, r2
 800282e:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002830:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002834:	7aba      	ldrb	r2, [r7, #10]
 8002836:	7a3b      	ldrb	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 800283e:	7a7a      	ldrb	r2, [r7, #9]
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 8002848:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800284c:	2b02      	cmp	r3, #2
 800284e:	d903      	bls.n	8002858 <VL53L1_SetROI+0xe0>
 8002850:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002854:	2b02      	cmp	r3, #2
 8002856:	d803      	bhi.n	8002860 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8002858:	23fc      	movs	r3, #252	; 0xfc
 800285a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 800285e:	e034      	b.n	80028ca <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 8002860:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002864:	3306      	adds	r3, #6
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3380      	adds	r3, #128	; 0x80
 800286a:	443b      	add	r3, r7
 800286c:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002870:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 8002874:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8002878:	3306      	adds	r3, #6
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	3380      	adds	r3, #128	; 0x80
 800287e:	443b      	add	r3, r7
 8002880:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002884:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 8002888:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800288c:	3306      	adds	r3, #6
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	3380      	adds	r3, #128	; 0x80
 8002892:	443b      	add	r3, r7
 8002894:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 8002898:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 800289c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80028a0:	3306      	adds	r3, #6
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3380      	adds	r3, #128	; 0x80
 80028a6:	443b      	add	r3, r7
 80028a8:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80028ac:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80028b0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80028b4:	3301      	adds	r3, #1
 80028b6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d38e      	bcc.n	80027e4 <VL53L1_SetROI+0x6c>
 80028c6:	e000      	b.n	80028ca <VL53L1_SetROI+0x152>
				break;
 80028c8:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 80028ca:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f002 fa8c 	bl	8004df6 <VL53L1_set_zone_config>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 80028e4:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3780      	adds	r7, #128	; 0x80
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	460b      	mov	r3, r1
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f002 f9e3 	bl	8004cd4 <VL53L1_get_sequence_config_bit>
 800290e:	4603      	mov	r3, r0
 8002910:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002928:	2300      	movs	r3, #0
 800292a:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3318      	adds	r3, #24
 8002930:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7edb      	ldrb	r3, [r3, #27]
 8002936:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d002      	beq.n	8002944 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f001 fc8e 	bl	8004260 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002944:	2300      	movs	r3, #0
 8002946:	77bb      	strb	r3, [r7, #30]
 8002948:	e01a      	b.n	8002980 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800294a:	7fbb      	ldrb	r3, [r7, #30]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002952:	330c      	adds	r3, #12
 8002954:	2100      	movs	r1, #0
 8002956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800295a:	7fbb      	ldrb	r3, [r7, #30]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002964:	3320      	adds	r3, #32
 8002966:	22ff      	movs	r2, #255	; 0xff
 8002968:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 800296a:	7fbb      	ldrb	r3, [r7, #30]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002974:	3324      	adds	r3, #36	; 0x24
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 800297a:	7fbb      	ldrb	r3, [r7, #30]
 800297c:	3301      	adds	r3, #1
 800297e:	77bb      	strb	r3, [r7, #30]
 8002980:	7fbb      	ldrb	r3, [r7, #30]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d9e1      	bls.n	800294a <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800298c:	2200      	movs	r2, #0
 800298e:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002998:	2200      	movs	r2, #0
 800299a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80029a4:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 80029a8:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 80029aa:	7dbb      	ldrb	r3, [r7, #22]
 80029ac:	2b63      	cmp	r3, #99	; 0x63
 80029ae:	dc12      	bgt.n	80029d6 <VL53L1_StartMeasurement+0xb6>
 80029b0:	2b62      	cmp	r3, #98	; 0x62
 80029b2:	da0d      	bge.n	80029d0 <VL53L1_StartMeasurement+0xb0>
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	dc0e      	bgt.n	80029d6 <VL53L1_StartMeasurement+0xb6>
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	da09      	bge.n	80029d0 <VL53L1_StartMeasurement+0xb0>
 80029bc:	2b02      	cmp	r3, #2
 80029be:	dc02      	bgt.n	80029c6 <VL53L1_StartMeasurement+0xa6>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da05      	bge.n	80029d0 <VL53L1_StartMeasurement+0xb0>
 80029c4:	e007      	b.n	80029d6 <VL53L1_StartMeasurement+0xb6>
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d105      	bne.n	80029d6 <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	77fb      	strb	r3, [r7, #31]
		break;
 80029ce:	e004      	b.n	80029da <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80029d0:	23f2      	movs	r3, #242	; 0xf2
 80029d2:	77fb      	strb	r3, [r7, #31]
		break;
 80029d4:	e001      	b.n	80029da <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80029d6:	23fd      	movs	r3, #253	; 0xfd
 80029d8:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 80029da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11f      	bne.n	8002a22 <VL53L1_StartMeasurement+0x102>
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d11c      	bne.n	8002a22 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fcc0 	bl	8002374 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80029f4:	4603      	mov	r3, r0
 80029f6:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <VL53L1_StartMeasurement+0x13c>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fda2 	bl	8002554 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002a10:	4603      	mov	r3, r0
 8002a12:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d901      	bls.n	8002a22 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002a1e:	23fc      	movs	r3, #252	; 0xfc
 8002a20:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002a22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	2206      	movs	r2, #6
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f002 ff97 	bl	8005964 <VL53L1_init_and_start_range>
 8002a36:	4603      	mov	r3, r0
 8002a38:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 8002a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a48:	2204      	movs	r2, #4
 8002a4a:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	10624dd3 	.word	0x10624dd3

08002a60 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f003 fa47 	bl	8005f00 <VL53L1_stop_range>
 8002a72:	4603      	mov	r3, r0
 8002a74:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7edb      	ldrb	r3, [r3, #27]
 8002a7a:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d002      	beq.n	8002a88 <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f001 fd1a 	bl	80044bc <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 8002a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a96:	2203      	movs	r2, #3
 8002a98:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 8002a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7edb      	ldrb	r3, [r3, #27]
 8002ab8:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f003 ff4b 	bl	800695a <VL53L1_clear_interrupt_and_enable_next_range>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f011 f8ac 	bl	8013c42 <VL53L1_is_new_data_ready>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	603a      	str	r2, [r7, #0]
 8002b04:	80fb      	strh	r3, [r7, #6]
 8002b06:	460b      	mov	r3, r1
 8002b08:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 8002b0a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002b0e:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002b10:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002b14:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 8002b16:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002b1a:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002b1c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002b20:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002b22:	797b      	ldrb	r3, [r7, #5]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d002      	beq.n	8002b2e <GenNewPresetMode+0x34>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d012      	beq.n	8002b52 <GenNewPresetMode+0x58>
 8002b2c:	e023      	b.n	8002b76 <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002b2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dd03      	ble.n	8002b40 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002b3e:	e02c      	b.n	8002b9a <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002b40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b44:	89bb      	ldrh	r3, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	dd27      	ble.n	8002b9a <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
		break;
 8002b50:	e023      	b.n	8002b9a <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002b52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b56:	893b      	ldrh	r3, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dd03      	ble.n	8002b64 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 8002b62:	e01c      	b.n	8002b9e <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 8002b64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b68:	89fb      	ldrh	r3, [r7, #14]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	da17      	bge.n	8002b9e <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
		break;
 8002b74:	e013      	b.n	8002b9e <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 8002b76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	da03      	bge.n	8002b88 <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002b86:	e00c      	b.n	8002ba2 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 8002b88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b8c:	897b      	ldrh	r3, [r7, #10]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	da07      	bge.n	8002ba2 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
		break;
 8002b98:	e003      	b.n	8002ba2 <GenNewPresetMode+0xa8>
		break;
 8002b9a:	bf00      	nop
 8002b9c:	e002      	b.n	8002ba4 <GenNewPresetMode+0xaa>
		break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <GenNewPresetMode+0xaa>
		break;
 8002ba2:	bf00      	nop
	}
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	7ddb      	ldrb	r3, [r3, #23]
 8002bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <CheckAndChangeDistanceMode+0xbc>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3318      	adds	r3, #24
 8002bd2:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bd8:	2bff      	cmp	r3, #255	; 0xff
 8002bda:	d042      	beq.n	8002c62 <CheckAndChangeDistanceMode+0xb2>
 8002bdc:	2bff      	cmp	r3, #255	; 0xff
 8002bde:	dc07      	bgt.n	8002bf0 <CheckAndChangeDistanceMode+0x40>
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	dc02      	bgt.n	8002bea <CheckAndChangeDistanceMode+0x3a>
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	da3c      	bge.n	8002c62 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 8002be8:	e002      	b.n	8002bf0 <CheckAndChangeDistanceMode+0x40>
 8002bea:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d938      	bls.n	8002c62 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002bf0:	bf00      	nop
	}

	DmaxValid = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002bfe:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	db03      	blt.n	8002c10 <CheckAndChangeDistanceMode+0x60>
 8002c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c1c:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002c20:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	7dfa      	ldrb	r2, [r7, #23]
 8002c26:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 8002c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002c36:	7df9      	ldrb	r1, [r7, #23]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff5d 	bl	8002afa <GenNewPresetMode>
 8002c40:	e010      	b.n	8002c64 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 8002c4a:	7df9      	ldrb	r1, [r7, #23]
 8002c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff51 	bl	8002afa <GenNewPresetMode>
 8002c58:	e004      	b.n	8002c64 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e000      	b.n	8002c64 <CheckAndChangeDistanceMode+0xb4>
		return;
 8002c62:	bf00      	nop
	}
}
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000008 	.word	0x20000008

08002c70 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b08d      	sub	sp, #52	; 0x34
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	603a      	str	r2, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 8002c80:	2396      	movs	r3, #150	; 0x96
 8002c82:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 8002c84:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002c88:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 8002c8a:	231e      	movs	r3, #30
 8002c8c:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <ComputeRQL+0x104>)
 8002c90:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <ComputeRQL+0x108>)
 8002c94:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 8002c96:	f641 139a 	movw	r3, #6554	; 0x199a
 8002c9a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <ComputeRQL+0x3a>
		returnvalue = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ca8:	e05b      	b.n	8002d62 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8002cb0:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 8002cb8:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 8002cba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	da02      	bge.n	8002cc8 <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002cc2:	79bb      	ldrb	r3, [r7, #6]
 8002cc4:	2b07      	cmp	r3, #7
 8002cc6:	d103      	bne.n	8002cd0 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 8002cc8:	2332      	movs	r3, #50	; 0x32
 8002cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cce:	e048      	b.n	8002d62 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002cd6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dd03      	ble.n	8002ce6 <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002cde:	8c3b      	ldrh	r3, [r7, #32]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce4:	e007      	b.n	8002cf6 <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002cec:	461a      	mov	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002d00:	461a      	mov	r2, r3
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	fb02 f303 	mul.w	r3, r2, r3
 8002d08:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d804      	bhi.n	8002d36 <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d34:	e006      	b.n	8002d44 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 8002d36:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3c:	e002      	b.n	8002d44 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002d3e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b32      	cmp	r3, #50	; 0x32
 8002d4e:	d905      	bls.n	8002d5c <ComputeRQL+0xec>
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	bf28      	it	cs
 8002d56:	2364      	movcs	r3, #100	; 0x64
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e000      	b.n	8002d5e <ComputeRQL+0xee>
 8002d5c:	2332      	movs	r3, #50	; 0x32
 8002d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3734      	adds	r7, #52	; 0x34
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0075b333 	.word	0x0075b333
 8002d78:	0030cccd 	.word	0x0030cccd

08002d7c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	3b04      	subs	r3, #4
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	d83d      	bhi.n	8002e0a <ConvertStatusLite+0x8e>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <ConvertStatusLite+0x18>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002de7 	.word	0x08002de7
 8002d98:	08002de1 	.word	0x08002de1
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002df3 	.word	0x08002df3
 8002da4:	08002dff 	.word	0x08002dff
 8002da8:	08002e05 	.word	0x08002e05
 8002dac:	08002e0b 	.word	0x08002e0b
 8002db0:	08002e0b 	.word	0x08002e0b
 8002db4:	08002df9 	.word	0x08002df9
 8002db8:	08002e0b 	.word	0x08002e0b
 8002dbc:	08002e0b 	.word	0x08002e0b
 8002dc0:	08002e0b 	.word	0x08002e0b
 8002dc4:	08002e0b 	.word	0x08002e0b
 8002dc8:	08002e0b 	.word	0x08002e0b
 8002dcc:	08002dd5 	.word	0x08002dd5
 8002dd0:	08002ddb 	.word	0x08002ddb
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002dd4:	230a      	movs	r3, #10
 8002dd6:	73fb      	strb	r3, [r7, #15]
		break;
 8002dd8:	e019      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002dda:	2306      	movs	r3, #6
 8002ddc:	73fb      	strb	r3, [r7, #15]
		break;
 8002dde:	e016      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002de0:	2304      	movs	r3, #4
 8002de2:	73fb      	strb	r3, [r7, #15]
		break;
 8002de4:	e013      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8002de6:	2302      	movs	r3, #2
 8002de8:	73fb      	strb	r3, [r7, #15]
		break;
 8002dea:	e010      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
		break;
 8002df0:	e00d      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002df2:	2307      	movs	r3, #7
 8002df4:	73fb      	strb	r3, [r7, #15]
		break;
 8002df6:	e00a      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8002dfc:	e007      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
		break;
 8002e02:	e004      	b.n	8002e0e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
		break;
 8002e08:	e001      	b.n	8002e0e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002e0a:	23ff      	movs	r3, #255	; 0xff
 8002e0c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	3b05      	subs	r3, #5
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d840      	bhi.n	8002eb0 <ConvertStatusHisto+0x94>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <ConvertStatusHisto+0x18>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e87 	.word	0x08002e87
 8002e3c:	08002e93 	.word	0x08002e93
 8002e40:	08002eb1 	.word	0x08002eb1
 8002e44:	08002eab 	.word	0x08002eab
 8002e48:	08002eb1 	.word	0x08002eb1
 8002e4c:	08002eb1 	.word	0x08002eb1
 8002e50:	08002eb1 	.word	0x08002eb1
 8002e54:	08002eb1 	.word	0x08002eb1
 8002e58:	08002eb1 	.word	0x08002eb1
 8002e5c:	08002eb1 	.word	0x08002eb1
 8002e60:	08002eb1 	.word	0x08002eb1
 8002e64:	08002eb1 	.word	0x08002eb1
 8002e68:	08002eb1 	.word	0x08002eb1
 8002e6c:	08002e8d 	.word	0x08002e8d
 8002e70:	08002e9f 	.word	0x08002e9f
 8002e74:	08002eb1 	.word	0x08002eb1
 8002e78:	08002ea5 	.word	0x08002ea5
 8002e7c:	08002e99 	.word	0x08002e99
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002e80:	2304      	movs	r3, #4
 8002e82:	73fb      	strb	r3, [r7, #15]
		break;
 8002e84:	e016      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
		break;
 8002e8a:	e013      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8002e8c:	2306      	movs	r3, #6
 8002e8e:	73fb      	strb	r3, [r7, #15]
		break;
 8002e90:	e010      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002e92:	2307      	movs	r3, #7
 8002e94:	73fb      	strb	r3, [r7, #15]
		break;
 8002e96:	e00d      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002e98:	230c      	movs	r3, #12
 8002e9a:	73fb      	strb	r3, [r7, #15]
		break;
 8002e9c:	e00a      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	73fb      	strb	r3, [r7, #15]
		break;
 8002ea2:	e007      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002ea4:	230b      	movs	r3, #11
 8002ea6:	73fb      	strb	r3, [r7, #15]
		break;
 8002ea8:	e004      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
		break;
 8002eae:	e001      	b.n	8002eb4 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002eb0:	23ff      	movs	r3, #255	; 0xff
 8002eb2:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop

08002ec4 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b092      	sub	sp, #72	; 0x48
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	70fb      	strb	r3, [r7, #3]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70bb      	strb	r3, [r7, #2]
 8002eda:	4613      	mov	r3, r2
 8002edc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002f04:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff feaf 	bl	8002c70 <ComputeRQL>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f18:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f1e:	025b      	lsls	r3, r3, #9
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f26:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f34:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f3a:	025b      	lsls	r3, r3, #9
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f42:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f46:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f4c:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f50:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f64:	2200      	movs	r2, #0
 8002f66:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002f68:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002f6c:	2b11      	cmp	r3, #17
 8002f6e:	d009      	beq.n	8002f84 <SetTargetData+0xc0>
 8002f70:	2b11      	cmp	r3, #17
 8002f72:	dc0f      	bgt.n	8002f94 <SetTargetData+0xd0>
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	dc02      	bgt.n	8002f7e <SetTargetData+0xba>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dc03      	bgt.n	8002f84 <SetTargetData+0xc0>
 8002f7c:	e00a      	b.n	8002f94 <SetTargetData+0xd0>
 8002f7e:	2b0d      	cmp	r3, #13
 8002f80:	d004      	beq.n	8002f8c <SetTargetData+0xc8>
 8002f82:	e007      	b.n	8002f94 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	2205      	movs	r2, #5
 8002f88:	75da      	strb	r2, [r3, #23]
		break;
 8002f8a:	e006      	b.n	8002f9a <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8e:	220d      	movs	r2, #13
 8002f90:	75da      	strb	r2, [r3, #23]
		break;
 8002f92:	e002      	b.n	8002f9a <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f96:	2200      	movs	r2, #0
 8002f98:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9c:	7ddb      	ldrb	r3, [r3, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d117      	bne.n	8002fd2 <SetTargetData+0x10e>
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d114      	bne.n	8002fd2 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002faa:	22ff      	movs	r2, #255	; 0xff
 8002fac:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8002fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8002fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fbc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002fc0:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002fc8:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8002fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fcc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002fd0:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd4:	7ddb      	ldrb	r3, [r3, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d125      	bne.n	8003026 <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002fe0:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8002fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d007      	beq.n	8003000 <SetTargetData+0x13c>
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d003      	beq.n	8003000 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d109      	bne.n	8003014 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8003000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff09 	bl	8002e1c <ConvertStatusHisto>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 800300e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003010:	75da      	strb	r2, [r3, #23]
 8003012:	e008      	b.n	8003026 <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8003014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff feaf 	bl	8002d7c <ConvertStatusLite>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8003022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003024:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800302a:	025b      	lsls	r3, r3, #9
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003034:	461a      	mov	r2, r3
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800303c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800304a:	461a      	mov	r2, r3
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	461a      	mov	r2, r3
 8003058:	2100      	movs	r1, #0
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fb2d 	bl	80026ba <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8003060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003064:	2b06      	cmp	r3, #6
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 800306e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8003072:	f107 0315 	add.w	r3, r7, #21
 8003076:	461a      	mov	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff faf8 	bl	8002670 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8003080:	7d7b      	ldrb	r3, [r7, #21]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <SetTargetData+0x1ce>
 8003086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <SetTargetData+0x1ce>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <SetTargetData+0x1d0>
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800309e:	461a      	mov	r2, r3
 80030a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030a4:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 80030a8:	f107 0310 	add.w	r3, r7, #16
 80030ac:	461a      	mov	r2, r3
 80030ae:	2101      	movs	r1, #1
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fb02 	bl	80026ba <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80030b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80030c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 80030c8:	f107 0315 	add.w	r3, r7, #21
 80030cc:	461a      	mov	r2, r3
 80030ce:	2101      	movs	r1, #1
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff facd 	bl	8002670 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80030d6:	7d7b      	ldrb	r3, [r7, #21]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <SetTargetData+0x224>
 80030dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <SetTargetData+0x224>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <SetTargetData+0x226>
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80030f4:	461a      	mov	r2, r3
 80030f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80030fa:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80030fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003100:	8a9b      	ldrh	r3, [r3, #20]
 8003102:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003106:	7ddb      	ldrb	r3, [r3, #23]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d110      	bne.n	800312e <SetTargetData+0x26a>
 800310c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003110:	2b00      	cmp	r3, #0
 8003112:	da0c      	bge.n	800312e <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8003114:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003118:	4ba3      	ldr	r3, [pc, #652]	; (80033a8 <SetTargetData+0x4e4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	da03      	bge.n	8003128 <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8003120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003122:	220e      	movs	r2, #14
 8003124:	75da      	strb	r2, [r3, #23]
 8003126:	e002      	b.n	800312e <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8003128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312a:	2200      	movs	r2, #0
 800312c:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	461a      	mov	r2, r3
 8003134:	f248 01be 	movw	r1, #32958	; 0x80be
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f004 f943 	bl	80073c4 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8003142:	787b      	ldrb	r3, [r7, #1]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314a:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8003150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003152:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d902      	bls.n	8003160 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 800315a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315c:	220c      	movs	r2, #12
 800315e:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	461a      	mov	r2, r3
 8003166:	f248 0191 	movw	r1, #32913	; 0x8091
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f004 f92a 	bl	80073c4 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8003170:	78bb      	ldrb	r3, [r7, #2]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 800317e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003180:	8a9b      	ldrh	r3, [r3, #20]
 8003182:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 800318a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318c:	2200      	movs	r2, #0
 800318e:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8003196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003198:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800319c:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d001      	beq.n	80031a8 <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8250 	beq.w	8003650 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 80031b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b2:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 80031b4:	2b07      	cmp	r3, #7
 80031b6:	d004      	beq.n	80031c2 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80031b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ba:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80031bc:	2b04      	cmp	r3, #4
 80031be:	f040 8247 	bne.w	8003650 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80031c2:	787b      	ldrb	r3, [r7, #1]
 80031c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80031cc:	3320      	adds	r3, #32
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	d01c      	beq.n	800320e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d8:	4413      	add	r3, r2
 80031da:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80031de:	3320      	adds	r3, #32
 80031e0:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d013      	beq.n	800320e <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80031e6:	787b      	ldrb	r3, [r7, #1]
 80031e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80031f0:	3320      	adds	r3, #32
 80031f2:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 822b 	bne.w	8003650 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 80031fa:	787b      	ldrb	r3, [r7, #1]
 80031fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fe:	4413      	add	r3, r2
 8003200:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003204:	3324      	adds	r3, #36	; 0x24
 8003206:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8003208:	2b01      	cmp	r3, #1
 800320a:	f040 8221 	bne.w	8003650 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003214:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003218:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003220:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8003222:	429a      	cmp	r2, r3
 8003224:	d00c      	beq.n	8003240 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800322c:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8003230:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8003232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003234:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8003238:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800323a:	429a      	cmp	r2, r3
 800323c:	f040 81dc 	bne.w	80035f8 <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8003240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003242:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003246:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8003248:	787b      	ldrb	r3, [r7, #1]
 800324a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800324c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003250:	330c      	adds	r3, #12
 8003252:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003256:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	2b21      	cmp	r3, #33	; 0x21
 800326a:	d008      	beq.n	800327e <SetTargetData+0x3ba>
 800326c:	2b21      	cmp	r3, #33	; 0x21
 800326e:	f300 81bf 	bgt.w	80035f0 <SetTargetData+0x72c>
 8003272:	2b1b      	cmp	r3, #27
 8003274:	f000 8113 	beq.w	800349e <SetTargetData+0x5da>
 8003278:	2b1e      	cmp	r3, #30
 800327a:	d004      	beq.n	8003286 <SetTargetData+0x3c2>
 800327c:	e1b8      	b.n	80035f0 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003284:	e1b9      	b.n	80035fa <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8003286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003288:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 800328c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003290:	429a      	cmp	r2, r3
 8003292:	dd0f      	ble.n	80032b4 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800329a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800329e:	429a      	cmp	r2, r3
 80032a0:	da08      	bge.n	80032b4 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80032a2:	7efb      	ldrb	r3, [r7, #27]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80032ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032b2:	e0f3      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80032b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80032be:	425b      	negs	r3, r3
 80032c0:	429a      	cmp	r2, r3
 80032c2:	da10      	bge.n	80032e6 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80032c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80032ce:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dd08      	ble.n	80032e6 <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80032d4:	7efb      	ldrb	r3, [r7, #27]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80032e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032e4:	e0da      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80032ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dd0f      	ble.n	8003314 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80032fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80032fe:	429a      	cmp	r2, r3
 8003300:	da08      	bge.n	8003314 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8003302:	7efb      	ldrb	r3, [r7, #27]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 800330e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003312:	e0c3      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800331e:	425b      	negs	r3, r3
 8003320:	429a      	cmp	r2, r3
 8003322:	da10      	bge.n	8003346 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 800332e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8003330:	429a      	cmp	r2, r3
 8003332:	dd08      	ble.n	8003346 <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8003334:	7efb      	ldrb	r3, [r7, #27]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d105      	bne.n	8003346 <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8003340:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003344:	e0aa      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 800334c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003350:	429a      	cmp	r2, r3
 8003352:	dd0f      	ble.n	8003374 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003356:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800335a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800335e:	429a      	cmp	r2, r3
 8003360:	da08      	bge.n	8003374 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8003362:	7efb      	ldrb	r3, [r7, #27]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800336e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003372:	e093      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 800337e:	425b      	negs	r3, r3
 8003380:	429a      	cmp	r2, r3
 8003382:	da13      	bge.n	80033ac <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 800338e:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8003390:	429a      	cmp	r2, r3
 8003392:	dd0b      	ble.n	80033ac <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8003394:	7efb      	ldrb	r3, [r7, #27]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d108      	bne.n	80033ac <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80033a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033a4:	e07a      	b.n	800349c <SetTargetData+0x5d8>
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80033b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dd0f      	ble.n	80033da <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80033c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	da08      	bge.n	80033da <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80033c8:	7efb      	ldrb	r3, [r7, #27]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80033d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80033d8:	e060      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80033da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80033e4:	425b      	negs	r3, r3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	da10      	bge.n	800340c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80033ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80033f4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80033f6:	429a      	cmp	r2, r3
 80033f8:	dd08      	ble.n	800340c <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80033fa:	7efb      	ldrb	r3, [r7, #27]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003406:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800340a:	e047      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8003412:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003416:	429a      	cmp	r2, r3
 8003418:	da0c      	bge.n	8003434 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 800341a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341c:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8003420:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003424:	429a      	cmp	r2, r3
 8003426:	dd05      	ble.n	8003434 <SetTargetData+0x570>
					AddOffset =
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800342e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003432:	e033      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003436:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800343a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800343e:	429a      	cmp	r2, r3
 8003440:	dd0f      	ble.n	8003462 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8003448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800344c:	429a      	cmp	r2, r3
 800344e:	da08      	bge.n	8003462 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8003450:	7efb      	ldrb	r3, [r7, #27]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800345c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003460:	e01c      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8003462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800346c:	425b      	negs	r3, r3
 800346e:	429a      	cmp	r2, r3
 8003470:	da10      	bge.n	8003494 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800347c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 800347e:	429a      	cmp	r2, r3
 8003480:	dd08      	ble.n	8003494 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8003482:	7efb      	ldrb	r3, [r7, #27]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800348e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003492:	e003      	b.n	800349c <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800349a:	e0ae      	b.n	80035fa <SetTargetData+0x736>
 800349c:	e0ad      	b.n	80035fa <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80034a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dd0f      	ble.n	80034cc <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 80034b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	da08      	bge.n	80034cc <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 80034ba:	7efb      	ldrb	r3, [r7, #27]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80034c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034ca:	e090      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80034cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 80034d6:	425b      	negs	r3, r3
 80034d8:	429a      	cmp	r2, r3
 80034da:	da10      	bge.n	80034fe <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80034dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80034e6:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80034e8:	429a      	cmp	r2, r3
 80034ea:	dd08      	ble.n	80034fe <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80034ec:	7efb      	ldrb	r3, [r7, #27]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80034f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80034fc:	e077      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003504:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003508:	429a      	cmp	r2, r3
 800350a:	dd0f      	ble.n	800352c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003516:	429a      	cmp	r2, r3
 8003518:	da08      	bge.n	800352c <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8003526:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800352a:	e060      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800352c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003536:	425b      	negs	r3, r3
 8003538:	429a      	cmp	r2, r3
 800353a:	da10      	bge.n	800355e <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800353c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003542:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 8003546:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003548:	429a      	cmp	r2, r3
 800354a:	dd08      	ble.n	800355e <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800354c:	7efb      	ldrb	r3, [r7, #27]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8003558:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800355c:	e047      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8003564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003568:	429a      	cmp	r2, r3
 800356a:	da0c      	bge.n	8003586 <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003576:	429a      	cmp	r2, r3
 8003578:	dd05      	ble.n	8003586 <SetTargetData+0x6c2>
					AddOffset =
 800357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357c:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 8003580:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003584:	e033      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 800358c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003590:	429a      	cmp	r2, r3
 8003592:	dd0f      	ble.n	80035b4 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 800359a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800359e:	429a      	cmp	r2, r3
 80035a0:	da08      	bge.n	80035b4 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80035a2:	7efb      	ldrb	r3, [r7, #27]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80035ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035b2:	e01c      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80035b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80035be:	425b      	negs	r3, r3
 80035c0:	429a      	cmp	r2, r3
 80035c2:	da10      	bge.n	80035e6 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80035c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 80035ce:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dd08      	ble.n	80035e6 <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 80035d4:	7efb      	ldrb	r3, [r7, #27]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 80035e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035e4:	e003      	b.n	80035ee <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80035ec:	e005      	b.n	80035fa <SetTargetData+0x736>
 80035ee:	e004      	b.n	80035fa <SetTargetData+0x736>

			default:
				uwr_status = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 80035f6:	e000      	b.n	80035fa <SetTargetData+0x736>
			}
		}
 80035f8:	bf00      	nop

		if (uwr_status) {
 80035fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d026      	beq.n	8003650 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8003602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003604:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003608:	b29a      	uxth	r2, r3
 800360a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800360e:	4413      	add	r3, r2
 8003610:	b29b      	uxth	r3, r3
 8003612:	b21a      	sxth	r2, r3
 8003614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003616:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8003618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003624:	4413      	add	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	b21a      	sxth	r2, r3
 800362a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362c:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 800362e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003634:	b29a      	uxth	r2, r3
 8003636:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800363a:	4413      	add	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	b21a      	sxth	r2, r3
 8003640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003642:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003646:	2201      	movs	r2, #1
 8003648:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	2200      	movs	r2, #0
 800364e:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003650:	787b      	ldrb	r3, [r7, #1]
 8003652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003654:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003658:	330c      	adds	r3, #12
 800365a:	8b39      	ldrh	r1, [r7, #24]
 800365c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8003660:	787b      	ldrb	r3, [r7, #1]
 8003662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003664:	7dd1      	ldrb	r1, [r2, #23]
 8003666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003668:	4413      	add	r3, r2
 800366a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800366e:	3320      	adds	r3, #32
 8003670:	460a      	mov	r2, r1
 8003672:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003674:	787b      	ldrb	r3, [r7, #1]
 8003676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003678:	7e11      	ldrb	r1, [r2, #24]
 800367a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367c:	4413      	add	r3, r2
 800367e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003682:	3324      	adds	r3, #36	; 0x24
 8003684:	460a      	mov	r2, r1
 8003686:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800368e:	461a      	mov	r2, r3
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 8003696:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800369a:	4618      	mov	r0, r3
 800369c:	3748      	adds	r7, #72	; 0x48
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop

080036a4 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b091      	sub	sp, #68	; 0x44
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3318      	adds	r3, #24
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	7c9a      	ldrb	r2, [r3, #18]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	789a      	ldrb	r2, [r3, #2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	bfa8      	it	ge
 80036f2:	4613      	movge	r3, r2
 80036f4:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80036fa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	78da      	ldrb	r2, [r3, #3]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003712:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	7c9b      	ldrb	r3, [r3, #18]
 8003720:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003724:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003728:	2b00      	cmp	r3, #0
 800372a:	d103      	bne.n	8003734 <SetMeasurementData+0x90>

		iteration = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003732:	e003      	b.n	800373c <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003734:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003738:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 800373c:	2300      	movs	r3, #0
 800373e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003742:	e048      	b.n	80037d6 <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003744:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3308      	adds	r3, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 8003758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800375c:	224c      	movs	r2, #76	; 0x4c
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	3310      	adds	r3, #16
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 800376c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003770:	2b00      	cmp	r3, #0
 8003772:	d114      	bne.n	800379e <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	7918      	ldrb	r0, [r3, #4]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	7c1b      	ldrb	r3, [r3, #16]
 800377c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8003780:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	9202      	str	r2, [sp, #8]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	9201      	str	r2, [sp, #4]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4623      	mov	r3, r4
 8003790:	4602      	mov	r2, r0
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff fb96 	bl	8002ec4 <SetTargetData>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	7ddb      	ldrb	r3, [r3, #23]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80037b6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80037ba:	429a      	cmp	r2, r3
 80037bc:	da06      	bge.n	80037cc <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	8a9b      	ldrh	r3, [r3, #20]
 80037c2:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 80037c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 80037cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037d0:	3301      	adds	r3, #1
 80037d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80037d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3b0      	bcc.n	8003744 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80037ee:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80037f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80037fa:	e01f      	b.n	800383c <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80037fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8003806:	330c      	adds	r3, #12
 8003808:	2100      	movs	r1, #0
 800380a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800380e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	4413      	add	r3, r2
 8003816:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800381a:	3320      	adds	r3, #32
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	4413      	add	r3, r2
 8003828:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800382c:	3324      	adds	r3, #36	; 0x24
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003836:	3301      	adds	r3, #1
 8003838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800383c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003840:	2b03      	cmp	r3, #3
 8003842:	d9db      	bls.n	80037fc <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003844:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11b      	bne.n	8003884 <SetMeasurementData+0x1e0>
 800384c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003850:	2b00      	cmp	r3, #0
 8003852:	d017      	beq.n	8003884 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003854:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	3308      	adds	r3, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 8003868:	2304      	movs	r3, #4
 800386a:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 800386c:	7efb      	ldrb	r3, [r7, #27]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	337e      	adds	r3, #126	; 0x7e
 800387c:	69f9      	ldr	r1, [r7, #28]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff f996 	bl	8002bb0 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 8003884:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 8003888:	4618      	mov	r0, r3
 800388a:	3734      	adds	r7, #52	; 0x34
 800388c:	46bd      	mov	sp, r7
 800388e:	bd90      	pop	{r4, r7, pc}

08003890 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3318      	adds	r3, #24
 80038a2:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80038aa:	3308      	adds	r3, #8
 80038ac:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	21ff      	movs	r1, #255	; 0xff
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	f015 feb2 	bl	801961c <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	2102      	movs	r1, #2
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f002 fc2e 	bl	800611e <VL53L1_get_device_results>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 80038c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	2b07      	cmp	r3, #7
 80038d4:	d002      	beq.n	80038dc <VL53L1_GetMultiRangingData+0x4c>
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d004      	beq.n	80038e4 <VL53L1_GetMultiRangingData+0x54>
 80038da:	e007      	b.n	80038ec <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 80038e2:	e006      	b.n	80038f2 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2202      	movs	r2, #2
 80038e8:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 80038ea:	e002      	b.n	80038f2 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fed4 	bl	80036a4 <SetMeasurementData>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003900:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b090      	sub	sp, #64	; 0x40
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003914:	2300      	movs	r3, #0
 8003916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800391a:	f240 3305 	movw	r3, #773	; 0x305
 800391e:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3318      	adds	r3, #24
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	3348      	adds	r3, #72	; 0x48
 800392a:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 800392c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11c      	bne.n	800396e <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800393a:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 800393e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003942:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8e3 	bl	8003b14 <VL53L1_run_ref_spad_char>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 800395c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe fb2c 	bl	8001fc0 <VL53L1_SetPresetMode>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 800396e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003972:	f113 0f1d 	cmn.w	r3, #29
 8003976:	d14e      	bne.n	8003a16 <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	2206      	movs	r2, #6
 800397e:	2128      	movs	r1, #40	; 0x28
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f00e fbf6 	bl	8012172 <VL53L1_read_nvm_raw_data>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 800398c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 8003994:	f107 020c 	add.w	r2, r7, #12
 8003998:	2302      	movs	r3, #2
 800399a:	2114      	movs	r1, #20
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f010 fe5f 	bl	8014660 <VL53L1_WriteMulti>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 80039a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80039b0:	7b3a      	ldrb	r2, [r7, #12]
 80039b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b4:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80039b6:	7b7a      	ldrb	r2, [r7, #13]
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	3310      	adds	r3, #16
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 80039c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 80039cc:	2306      	movs	r3, #6
 80039ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d0:	210d      	movs	r1, #13
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f010 fe44 	bl	8014660 <VL53L1_WriteMulti>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 80039de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d117      	bne.n	8003a16 <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	785a      	ldrb	r2, [r3, #1]
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	789a      	ldrb	r2, [r3, #2]
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	78da      	ldrb	r2, [r3, #3]
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	791a      	ldrb	r2, [r3, #4]
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	795a      	ldrb	r2, [r3, #5]
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 8003a16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3740      	adds	r7, #64	; 0x40
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d84a      	bhi.n	8003adc <VL53L1_SmudgeCorrectionEnable+0xb8>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <VL53L1_SmudgeCorrectionEnable+0x28>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a7d 	.word	0x08003a7d
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003abd 	.word	0x08003abd
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f004 fbee 	bl	800823e <VL53L1_dynamic_xtalk_correction_disable>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f004 fc17 	bl	800829a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f004 fc40 	bl	80082f6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003a76:	4603      	mov	r3, r0
 8003a78:	733b      	strb	r3, [r7, #12]
		break;
 8003a7a:	e032      	b.n	8003ae2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f004 fbc7 	bl	8008210 <VL53L1_dynamic_xtalk_correction_enable>
 8003a82:	4603      	mov	r3, r0
 8003a84:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f004 fbf0 	bl	800826c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f004 fc30 	bl	80082f6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003a96:	4603      	mov	r3, r0
 8003a98:	733b      	strb	r3, [r7, #12]
		break;
 8003a9a:	e022      	b.n	8003ae2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f004 fbb7 	bl	8008210 <VL53L1_dynamic_xtalk_correction_enable>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f004 fbe0 	bl	800826c <VL53L1_dynamic_xtalk_correction_apply_enable>
 8003aac:	4603      	mov	r3, r0
 8003aae:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f004 fc09 	bl	80082c8 <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	733b      	strb	r3, [r7, #12]
		break;
 8003aba:	e012      	b.n	8003ae2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f004 fba7 	bl	8008210 <VL53L1_dynamic_xtalk_correction_enable>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f004 fbe7 	bl	800829a <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003acc:	4603      	mov	r3, r0
 8003ace:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f004 fc10 	bl	80082f6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	733b      	strb	r3, [r7, #12]
		break;
 8003ada:	e002      	b.n	8003ae2 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003adc:	23fc      	movs	r3, #252	; 0xfc
 8003ade:	73fb      	strb	r3, [r7, #15]
		break;
 8003ae0:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8003af6:	7b7b      	ldrb	r3, [r7, #13]
 8003af8:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003b02:	7b3b      	ldrb	r3, [r7, #12]
 8003b04:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop

08003b14 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af04      	add	r7, sp, #16
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3318      	adds	r3, #24
 8003b26:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003b2e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f007 fc99 	bl	800b470 <VL53L1_enable_powerforce>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d117      	bne.n	8003b7a <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	7858      	ldrb	r0, [r3, #1]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	685c      	ldr	r4, [r3, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	891d      	ldrh	r5, [r3, #8]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	899b      	ldrh	r3, [r3, #12]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	8952      	ldrh	r2, [r2, #10]
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 8003b64:	9102      	str	r1, [sp, #8]
 8003b66:	9201      	str	r2, [sp, #4]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4601      	mov	r1, r0
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f009 fbda 	bl	800d32a <VL53L1_set_ref_spad_char_config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 8003b7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f891 	bl	8003cb0 <VL53L1_run_device_test>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 8003b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d108      	bne.n	8003bac <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 8003b9a:	f107 020c 	add.w	r2, r7, #12
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	21d9      	movs	r1, #217	; 0xd9
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f010 fd92 	bl	80146cc <VL53L1_ReadMulti>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 8003bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8003bb4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbc:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003bc0:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003bd4:	f107 020c 	add.w	r2, r7, #12
 8003bd8:	2302      	movs	r3, #2
 8003bda:	2114      	movs	r1, #20
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f010 fd3f 	bl	8014660 <VL53L1_WriteMulti>
 8003be2:	4603      	mov	r3, r0
 8003be4:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003bee:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003bf6:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003bfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 8003c06:	f107 020c 	add.w	r2, r7, #12
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	21ac      	movs	r1, #172	; 0xac
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f010 fd5c 	bl	80146cc <VL53L1_ReadMulti>
 8003c14:	4603      	mov	r3, r0
 8003c16:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 8003c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d108      	bne.n	8003c32 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003c20:	f107 020c 	add.w	r2, r7, #12
 8003c24:	2306      	movs	r3, #6
 8003c26:	210d      	movs	r1, #13
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f010 fd19 	bl	8014660 <VL53L1_WriteMulti>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d117      	bne.n	8003c6a <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8003c3a:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8003c4a:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8003c5a:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003c62:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 8003c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d114      	bne.n	8003c9c <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d00c      	beq.n	8003c96 <VL53L1_run_ref_spad_char+0x182>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	dc0e      	bgt.n	8003c9e <VL53L1_run_ref_spad_char+0x18a>
 8003c80:	2b0e      	cmp	r3, #14
 8003c82:	d002      	beq.n	8003c8a <VL53L1_run_ref_spad_char+0x176>
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d003      	beq.n	8003c90 <VL53L1_run_ref_spad_char+0x17c>
 8003c88:	e009      	b.n	8003c9e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8003c8a:	23e4      	movs	r3, #228	; 0xe4
 8003c8c:	77fb      	strb	r3, [r7, #31]
			break;
 8003c8e:	e006      	b.n	8003c9e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003c90:	23e3      	movs	r3, #227	; 0xe3
 8003c92:	77fb      	strb	r3, [r7, #31]
			break;
 8003c94:	e003      	b.n	8003c9e <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003c96:	23e2      	movs	r3, #226	; 0xe2
 8003c98:	77fb      	strb	r3, [r7, #31]
			break;
 8003c9a:	e000      	b.n	8003c9e <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 8003c9c:	bf00      	nop



	*pcal_status = status;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7ffa      	ldrb	r2, [r7, #31]
 8003ca2:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003ca4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bdb0      	pop	{r4, r5, r7, pc}

08003cb0 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d108      	bne.n	8003ce4 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003cd2:	f107 030b 	add.w	r3, r7, #11
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2130      	movs	r1, #48	; 0x30
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f010 fd88 	bl	80147f0 <VL53L1_RdByte>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003cec:	7afa      	ldrb	r2, [r7, #11]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f007 fb39 	bl	800b378 <VL53L1_start_test>
 8003d06:	4603      	mov	r3, r0
 8003d08:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 8003d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f00f ff5c 	bl	8013bd0 <VL53L1_wait_for_test_completion>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d108      	bne.n	8003d36 <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003d24:	f107 020c 	add.w	r2, r7, #12
 8003d28:	2302      	movs	r3, #2
 8003d2a:	2189      	movs	r1, #137	; 0x89
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f010 fccd 	bl	80146cc <VL53L1_ReadMulti>
 8003d32:	4603      	mov	r3, r0
 8003d34:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 8003d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003d3e:	7b3a      	ldrb	r2, [r7, #12]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003d46:	7b7a      	ldrb	r2, [r7, #13]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 8003d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 8003d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f007 fba1 	bl	800b4b8 <VL53L1_clear_interrupt>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 8003d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 8003d82:	2100      	movs	r1, #0
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f007 faf7 	bl	800b378 <VL53L1_start_test>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b21      	cmp	r3, #33	; 0x21
 8003dae:	d006      	beq.n	8003dbe <select_offset_per_vcsel+0x24>
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	dc2b      	bgt.n	8003e0c <select_offset_per_vcsel+0x72>
 8003db4:	2b1b      	cmp	r3, #27
 8003db6:	d01c      	beq.n	8003df2 <select_offset_per_vcsel+0x58>
 8003db8:	2b1e      	cmp	r3, #30
 8003dba:	d00d      	beq.n	8003dd8 <select_offset_per_vcsel+0x3e>
 8003dbc:	e026      	b.n	8003e0c <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 8003dc8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003dd4:	817b      	strh	r3, [r7, #10]
		break;
 8003dd6:	e02b      	b.n	8003e30 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003de2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dea:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003dee:	817b      	strh	r3, [r7, #10]
		break;
 8003df0:	e01e      	b.n	8003e30 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003dfc:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003e08:	817b      	strh	r3, [r7, #10]
		break;
 8003e0a:	e011      	b.n	8003e30 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e12:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003e16:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1e:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003e22:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003e24:	23fc      	movs	r3, #252	; 0xfc
 8003e26:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	801a      	strh	r2, [r3, #0]
		break;
 8003e2e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e36:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 8003e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <select_offset_per_vcsel+0xb6>
 8003e4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e4e:	e001      	b.n	8003e54 <select_offset_per_vcsel+0xba>
 8003e50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	8013      	strh	r3, [r2, #0]

	return status;
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003e68:	b490      	push	{r4, r7}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	460b      	mov	r3, r1
 8003e78:	71fb      	strb	r3, [r7, #7]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e9a:	e021      	b.n	8003ee0 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003e9c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	0052      	lsls	r2, r2, #1
 8003eaa:	441a      	add	r2, r3
 8003eac:	00d3      	lsls	r3, r2, #3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	4423      	add	r3, r4
 8003ebc:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003ec0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003eca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3206      	adds	r2, #6
 8003ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003edc:	3301      	adds	r3, #1
 8003ede:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ee0:	79bb      	ldrb	r3, [r7, #6]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3d8      	bcc.n	8003e9c <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d047      	beq.n	8003f80 <vl53l1_diff_histo_stddev+0x118>
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d044      	beq.n	8003f80 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003efe:	e03a      	b.n	8003f76 <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003f00:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	0052      	lsls	r2, r2, #1
 8003f0e:	441a      	add	r2, r3
 8003f10:	00d3      	lsls	r3, r2, #3
 8003f12:	461a      	mov	r2, r3
 8003f14:	460b      	mov	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4423      	add	r3, r4
 8003f20:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003f24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f28:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f30:	fb03 f202 	mul.w	r2, r3, r2
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f3a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003f3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	3206      	adds	r2, #6
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003f60:	69b8      	ldr	r0, [r7, #24]
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	441a      	add	r2, r3
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f72:	3301      	adds	r3, #1
 8003f74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f76:	79bb      	ldrb	r3, [r7, #6]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3bf      	bcc.n	8003f00 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003f80:	bf00      	nop
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc90      	pop	{r4, r7}
 8003f88:	4770      	bx	lr

08003f8a <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003f8a:	b5b0      	push	{r4, r5, r7, lr}
 8003f8c:	b08c      	sub	sp, #48	; 0x30
 8003f8e:	af02      	add	r7, sp, #8
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3318      	adds	r3, #24
 8003f98:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8003fba:	2318      	movs	r3, #24
 8003fbc:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003fbe:	f107 0314 	add.w	r3, r7, #20
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f248 018f 	movw	r1, #32911	; 0x808f
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f003 f9fb 	bl	80073c4 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f248 018e 	movw	r1, #32910	; 0x808e
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f003 f9f3 	bl	80073c4 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 811b 	bne.w	8004224 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8004008:	7efb      	ldrb	r3, [r7, #27]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	7eba      	ldrb	r2, [r7, #26]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004028:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 800402c:	3b01      	subs	r3, #1
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004032:	e004      	b.n	800403e <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 800403e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8004042:	7efb      	ldrb	r3, [r7, #27]
 8004044:	69f8      	ldr	r0, [r7, #28]
 8004046:	461a      	mov	r2, r3
 8004048:	0052      	lsls	r2, r2, #1
 800404a:	441a      	add	r2, r3
 800404c:	0153      	lsls	r3, r2, #5
 800404e:	461a      	mov	r2, r3
 8004050:	460b      	mov	r3, r1
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	019b      	lsls	r3, r3, #6
 8004058:	4413      	add	r3, r2
 800405a:	4403      	add	r3, r0
 800405c:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8004060:	3308      	adds	r3, #8
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dd0c      	ble.n	8004082 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8004068:	7e79      	ldrb	r1, [r7, #25]
 800406a:	7efa      	ldrb	r2, [r7, #27]
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	f7ff fef3 	bl	8003e68 <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	db23      	blt.n	80040d2 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004090:	3318      	adds	r3, #24
 8004092:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f015 fabf 	bl	801961c <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 80040b0:	7efb      	ldrb	r3, [r7, #27]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	2206      	movs	r2, #6
 80040be:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80040c2:	e034      	b.n	800412e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	2207      	movs	r2, #7
 80040cc:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 80040d0:	e02d      	b.n	800412e <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 80040dc:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040e4:	e01e      	b.n	8004124 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80040e6:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80040ea:	7e39      	ldrb	r1, [r7, #24]
 80040ec:	7efb      	ldrb	r3, [r7, #27]
 80040ee:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	3006      	adds	r0, #6
 80040f6:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80040fa:	69f8      	ldr	r0, [r7, #28]
 80040fc:	461a      	mov	r2, r3
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	441a      	add	r2, r3
 8004102:	00d3      	lsls	r3, r2, #3
 8004104:	461a      	mov	r2, r3
 8004106:	460b      	mov	r3, r1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	440b      	add	r3, r1
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	442b      	add	r3, r5
 8004112:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8004116:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 800411a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800411e:	3301      	adds	r3, #1
 8004120:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004124:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004128:	7ebb      	ldrb	r3, [r7, #26]
 800412a:	429a      	cmp	r2, r3
 800412c:	d3db      	bcc.n	80040e6 <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004138:	461a      	mov	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3b01      	subs	r3, #1
 800413e:	429a      	cmp	r2, r3
 8004140:	d109      	bne.n	8004156 <vl53l1_histo_merge+0x1cc>
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8004154:	e00e      	b.n	8004174 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8004156:	7efb      	ldrb	r3, [r7, #27]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10b      	bne.n	8004174 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8004166:	3301      	adds	r3, #1
 8004168:	b2da      	uxtb	r2, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004170:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8004174:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d102      	bne.n	8004182 <vl53l1_histo_merge+0x1f8>
 800417c:	7efb      	ldrb	r3, [r7, #27]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d069      	beq.n	8004256 <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d162      	bne.n	8004256 <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8004190:	2300      	movs	r3, #0
 8004192:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004194:	e008      	b.n	80041a8 <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8004196:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3206      	adds	r2, #6
 800419c:	2100      	movs	r1, #0
 800419e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 80041a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041a4:	3301      	adds	r3, #1
 80041a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041a8:	7ebb      	ldrb	r3, [r7, #26]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d3f1      	bcc.n	8004196 <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 80041b2:	2300      	movs	r3, #0
 80041b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041b6:	e02f      	b.n	8004218 <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80041be:	e023      	b.n	8004208 <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 80041c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	3206      	adds	r2, #6
 80041c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 80041ca:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80041ce:	7efb      	ldrb	r3, [r7, #27]
 80041d0:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 80041d2:	69fc      	ldr	r4, [r7, #28]
 80041d4:	461a      	mov	r2, r3
 80041d6:	0052      	lsls	r2, r2, #1
 80041d8:	441a      	add	r2, r3
 80041da:	00d3      	lsls	r3, r2, #3
 80041dc:	461a      	mov	r2, r3
 80041de:	460b      	mov	r3, r1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	440b      	add	r3, r1
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	4413      	add	r3, r2
 80041e8:	442b      	add	r3, r5
 80041ea:	f203 7316 	addw	r3, r3, #1814	; 0x716
 80041ee:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80041f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041f4:	18c1      	adds	r1, r0, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3206      	adds	r2, #6
 80041fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80041fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004202:	3301      	adds	r3, #1
 8004204:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004208:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	dbd6      	blt.n	80041c0 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8004212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004214:	3301      	adds	r3, #1
 8004216:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004218:	7ebb      	ldrb	r3, [r7, #26]
 800421a:	b29b      	uxth	r3, r3
 800421c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800421e:	429a      	cmp	r2, r3
 8004220:	d3ca      	bcc.n	80041b8 <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8004222:	e018      	b.n	8004256 <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422a:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 800422e:	3b01      	subs	r3, #1
 8004230:	b2da      	uxtb	r2, r3
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004238:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004242:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d105      	bne.n	8004256 <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8004256:	bf00      	nop
 8004258:	3728      	adds	r7, #40	; 0x28
 800425a:	46bd      	mov	sp, r7
 800425c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004260 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b0c6      	sub	sp, #280	; 0x118
 8004264:	af00      	add	r7, sp, #0
 8004266:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800426a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800426e:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800427c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8004284:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004288:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800428c:	2200      	movs	r2, #0
 800428e:	2185      	movs	r1, #133	; 0x85
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	f010 fa51 	bl	8014738 <VL53L1_WrByte>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 800429c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 80042a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f007 f8df 	bl	800b470 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 80042b2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80042b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80042ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042be:	f248 018c 	movw	r1, #32908	; 0x808c
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	f003 f87e 	bl	80073c4 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d81b      	bhi.n	8004308 <VL53L1_load_patch+0xa8>
 80042d0:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <VL53L1_load_patch+0x78>)
 80042d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d6:	bf00      	nop
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f1 	.word	0x080042f1
 80042e0:	080042f9 	.word	0x080042f9
 80042e4:	08004301 	.word	0x08004301
	case 0:
		patch_power = 0x00;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042ee:	e00e      	b.n	800430e <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 80042f0:	2310      	movs	r3, #16
 80042f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042f6:	e00a      	b.n	800430e <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 80042f8:	2320      	movs	r3, #32
 80042fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80042fe:	e006      	b.n	800430e <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004306:	e002      	b.n	800430e <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 800430e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004312:	2b00      	cmp	r3, #0
 8004314:	d134      	bne.n	8004380 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8004316:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800431a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800431e:	2229      	movs	r2, #41	; 0x29
 8004320:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8004322:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800432a:	22c9      	movs	r2, #201	; 0xc9
 800432c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800432e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004336:	220e      	movs	r2, #14
 8004338:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800433a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800433e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8004346:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800434a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800434e:	2228      	movs	r2, #40	; 0x28
 8004350:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004352:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004356:	b2da      	uxtb	r2, r3
 8004358:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800435c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004360:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8004362:	f107 020c 	add.w	r2, r7, #12
 8004366:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800436a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800436e:	2306      	movs	r3, #6
 8004370:	f240 4176 	movw	r1, #1142	; 0x476
 8004374:	6800      	ldr	r0, [r0, #0]
 8004376:	f010 f973 	bl	8014660 <VL53L1_WriteMulti>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8004380:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004384:	2b00      	cmp	r3, #0
 8004386:	d132      	bne.n	80043ee <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8004388:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800438c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004390:	2203      	movs	r2, #3
 8004392:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004394:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004398:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800439c:	226d      	movs	r2, #109	; 0x6d
 800439e:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80043a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043a8:	2203      	movs	r2, #3
 80043aa:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80043ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043b4:	226f      	movs	r2, #111	; 0x6f
 80043b6:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80043b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c0:	2207      	movs	r2, #7
 80043c2:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80043c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043cc:	2229      	movs	r2, #41	; 0x29
 80043ce:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 80043d0:	f107 020c 	add.w	r2, r7, #12
 80043d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043d8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80043dc:	2306      	movs	r3, #6
 80043de:	f240 4196 	movw	r1, #1174	; 0x496
 80043e2:	6800      	ldr	r0, [r0, #0]
 80043e4:	f010 f93c 	bl	8014660 <VL53L1_WriteMulti>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 80043ee:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11a      	bne.n	800442c <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 80043f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043fe:	2200      	movs	r2, #0
 8004400:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004402:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800440a:	2207      	movs	r2, #7
 800440c:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800440e:	f107 020c 	add.w	r2, r7, #12
 8004412:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004416:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800441a:	2302      	movs	r3, #2
 800441c:	f240 4172 	movw	r1, #1138	; 0x472
 8004420:	6800      	ldr	r0, [r0, #0]
 8004422:	f010 f91d 	bl	8014660 <VL53L1_WriteMulti>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 800442c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004430:	2b00      	cmp	r3, #0
 8004432:	d11a      	bne.n	800446a <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8004434:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004438:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004440:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004444:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004448:	2207      	movs	r2, #7
 800444a:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 800444c:	f107 020c 	add.w	r2, r7, #12
 8004450:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004454:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004458:	2302      	movs	r3, #2
 800445a:	f240 4174 	movw	r1, #1140	; 0x474
 800445e:	6800      	ldr	r0, [r0, #0]
 8004460:	f010 f8fe 	bl	8014660 <VL53L1_WriteMulti>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 800446a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8004472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004476:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	f010 f959 	bl	8014738 <VL53L1_WrByte>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 800448c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8004494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004498:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800449c:	2201      	movs	r2, #1
 800449e:	2185      	movs	r1, #133	; 0x85
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	f010 f949 	bl	8014738 <VL53L1_WrByte>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80044ac:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop

080044bc <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 80044d0:	2200      	movs	r2, #0
 80044d2:	2185      	movs	r1, #133	; 0x85
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f010 f92f 	bl	8014738 <VL53L1_WrByte>
 80044da:	4603      	mov	r3, r0
 80044dc:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 80044de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f006 ffd4 	bl	800b494 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 80044ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d107      	bne.n	8004504 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f010 f91c 	bl	8014738 <VL53L1_WrByte>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 800450c:	2201      	movs	r2, #1
 800450e:	2185      	movs	r1, #133	; 0x85
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f010 f911 	bl	8014738 <VL53L1_WrByte>
 8004516:	4603      	mov	r3, r0
 8004518:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800451a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004526:	b5b0      	push	{r4, r5, r7, lr}
 8004528:	b08a      	sub	sp, #40	; 0x28
 800452a:	af04      	add	r7, sp, #16
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3318      	adds	r3, #24
 800453a:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004542:	3308      	adds	r3, #8
 8004544:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800454a:	2162      	movs	r1, #98	; 0x62
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f006 f810 	bl	800a572 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2204      	movs	r2, #4
 8004556:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2210      	movs	r2, #16
 8004562:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800456e:	2300      	movs	r3, #0
 8004570:	75bb      	strb	r3, [r7, #22]
 8004572:	e01b      	b.n	80045ac <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 8004574:	7dba      	ldrb	r2, [r7, #22]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	3308      	adds	r3, #8
 8004588:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2200      	movs	r2, #0
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80045a6:	7dbb      	ldrb	r3, [r7, #22]
 80045a8:	3301      	adds	r3, #1
 80045aa:	75bb      	strb	r3, [r7, #22]
 80045ac:	7dbb      	ldrb	r3, [r7, #22]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	d9e0      	bls.n	8004574 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2210      	movs	r2, #16
 80045b6:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2210      	movs	r2, #16
 80045c6:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80045d2:	2300      	movs	r3, #0
 80045d4:	75bb      	strb	r3, [r7, #22]
 80045d6:	e039      	b.n	800464c <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 80045d8:	7dba      	ldrb	r2, [r7, #22]
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 80045ee:	7dba      	ldrb	r2, [r7, #22]
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8004604:	7dba      	ldrb	r2, [r7, #22]
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800461a:	7dba      	ldrb	r2, [r7, #22]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004630:	7dba      	ldrb	r2, [r7, #22]
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004646:	7dbb      	ldrb	r3, [r7, #22]
 8004648:	3301      	adds	r3, #1
 800464a:	75bb      	strb	r3, [r7, #22]
 800464c:	7dbb      	ldrb	r3, [r7, #22]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d9c2      	bls.n	80045d8 <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2201      	movs	r2, #1
 800465c:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2200      	movs	r2, #0
 8004662:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2200      	movs	r2, #0
 8004668:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2201      	movs	r2, #1
 800466e:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2201      	movs	r2, #1
 8004674:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2201      	movs	r2, #1
 800467a:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004682:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800468a:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004692:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2264      	movs	r2, #100	; 0x64
 8004698:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80046a0:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	2203      	movs	r2, #3
 80046b2:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f240 72db 	movw	r2, #2011	; 0x7db
 80046c8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80046d2:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f005 ff2e 	bl	800a538 <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80046e2:	3318      	adds	r3, #24
 80046e4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80046e8:	2100      	movs	r1, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f014 ff96 	bl	801961c <memset>
	pdev->bin_rec_pos = 0;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <VL53L1_data_init+0x1fa>
 800470e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8b8 	bl	800488c <VL53L1_read_p2p_data>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800472e:	4618      	mov	r0, r3
 8004730:	f003 fdf8 	bl	8008324 <VL53L1_init_refspadchar_config_struct>
 8004734:	4603      	mov	r3, r0
 8004736:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 8004738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8004746:	4618      	mov	r0, r3
 8004748:	f003 fe10 	bl	800836c <VL53L1_init_ssc_config_struct>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f003 fe21 	bl	80083ae <VL53L1_init_xtalk_config_struct>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800477e:	4618      	mov	r0, r3
 8004780:	f003 fe89 	bl	8008496 <VL53L1_init_xtalk_extract_config_struct>
 8004784:	4603      	mov	r3, r0
 8004786:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8004796:	4618      	mov	r0, r3
 8004798:	f003 feac 	bl	80084f4 <VL53L1_init_offset_cal_config_struct>
 800479c:	4603      	mov	r3, r0
 800479e:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80047ae:	4618      	mov	r0, r3
 80047b0:	f003 fec7 	bl	8008542 <VL53L1_init_zone_cal_config_struct>
 80047b4:	4603      	mov	r3, r0
 80047b6:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f003 fedb 	bl	800858a <VL53L1_init_hist_post_process_config_struct>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 80047d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 f8f6 	bl	80089d8 <VL53L1_init_hist_gen3_dmax_config_struct>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 80047f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d107      	bne.n	8004808 <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 ff32 	bl	8008668 <VL53L1_init_tuning_parm_storage_struct>
 8004804:	4603      	mov	r3, r0
 8004806:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 8004808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d116      	bne.n	800483e <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	7858      	ldrb	r0, [r3, #1]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	8b1c      	ldrh	r4, [r3, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	689d      	ldr	r5, [r3, #8]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	6912      	ldr	r2, [r2, #16]
 8004824:	6939      	ldr	r1, [r7, #16]
 8004826:	6949      	ldr	r1, [r1, #20]
 8004828:	9102      	str	r1, [sp, #8]
 800482a:	9201      	str	r2, [sp, #4]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	462b      	mov	r3, r5
 8004830:	4622      	mov	r2, r4
 8004832:	4601      	mov	r1, r0
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fc8f 	bl	8005158 <VL53L1_set_preset_mode>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004844:	461a      	mov	r2, r3
 8004846:	2118      	movs	r1, #24
 8004848:	2000      	movs	r0, #0
 800484a:	f00a fa90 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004854:	461a      	mov	r2, r3
 8004856:	2118      	movs	r1, #24
 8004858:	2000      	movs	r0, #0
 800485a:	f00a fa88 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 8004864:	461a      	mov	r2, r3
 8004866:	210c      	movs	r1, #12
 8004868:	2000      	movs	r0, #0
 800486a:	f006 fc26 	bl	800b0ba <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f009 fcd2 	bl	800e218 <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f009 fbd1 	bl	800e01c <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f009 fcf7 	bl	800e26e <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bdb0      	pop	{r4, r5, r7, pc}

0800488c <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b091      	sub	sp, #68	; 0x44
 8004890:	af04      	add	r7, sp, #16
 8004892:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3318      	adds	r3, #24
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	3348      	adds	r3, #72	; 0x48
 80048ac:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	339c      	adds	r3, #156	; 0x9c
 80048b2:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80048b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f00d fdd1 	bl	801246c <VL53L1_get_static_nvm_managed>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80048d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	3348      	adds	r3, #72	; 0x48
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f00d ff02 	bl	80126e8 <VL53L1_get_customer_nvm_managed>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80048ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d117      	bne.n	8004922 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f00e fdda 	bl	80134b4 <VL53L1_get_nvm_copy_data>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 8004906:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f006 f921 	bl	800ab64 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004922:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10e      	bne.n	8004948 <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	895b      	ldrh	r3, [r3, #10]
 800492e:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 8004948:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	33c0      	adds	r3, #192	; 0xc0
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f00d fc3c 	bl	80121d4 <VL53L1_read_nvm_optical_centre>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 8004962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	3360      	adds	r3, #96	; 0x60
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f00d fc52 	bl	801221a <VL53L1_read_nvm_cal_peak_rate_map>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 800497c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004980:	2b00      	cmp	r3, #0
 8004982:	d12d      	bne.n	80049e0 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	339c      	adds	r3, #156	; 0x9c
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f00d fc6b 	bl	8012266 <VL53L1_read_nvm_additional_offset_cal_data>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	889b      	ldrh	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d120      	bne.n	80049e0 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11c      	bne.n	80049e0 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80049b2:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	3102      	adds	r1, #2
 80049cc:	9103      	str	r1, [sp, #12]
 80049ce:	9202      	str	r2, [sp, #8]
 80049d0:	2238      	movs	r2, #56	; 0x38
 80049d2:	9201      	str	r2, [sp, #4]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	23ff      	movs	r3, #255	; 0xff
 80049d8:	22c7      	movs	r2, #199	; 0xc7
 80049da:	4621      	mov	r1, r4
 80049dc:	f008 f934 	bl	800cc48 <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 80049e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d12f      	bne.n	8004a48 <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 80049e8:	f107 030c 	add.w	r3, r7, #12
 80049ec:	461a      	mov	r2, r3
 80049ee:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f00d fc5a 	bl	80122ac <VL53L1_read_nvm_fmt_range_results_data>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 80049fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d120      	bne.n	8004a48 <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004a06:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004a0e:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8004a16:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004a34:	e003      	b.n	8004a3e <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	2214      	movs	r2, #20
 8004a3a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a44:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 8004a48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8004a56:	3308      	adds	r3, #8
 8004a58:	461a      	mov	r2, r3
 8004a5a:	21de      	movs	r1, #222	; 0xde
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f00f fefb 	bl	8014858 <VL53L1_RdWord>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d204      	bcs.n	8004a7e <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004a7a:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 8004a7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	33bc      	adds	r3, #188	; 0xbc
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f97d 	bl	8004d8c <VL53L1_get_mode_mitigation_roi>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d114      	bne.n	8004acc <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10f      	bne.n	8004acc <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004acc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3734      	adds	r7, #52	; 0x34
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd90      	pop	{r4, r7, pc}

08004ad8 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3318      	adds	r3, #24
 8004aea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af2:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004afa:	23f1      	movs	r3, #241	; 0xf1
 8004afc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10e      	bne.n	8004b24 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b12:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004b16:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3318      	adds	r3, #24
 8004b46:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4e:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b56:	23f1      	movs	r3, #241	; 0xf1
 8004b58:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b6e:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 8004b72:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004bac:	23f1      	movs	r3, #241	; 0xf1
 8004bae:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d11b      	bne.n	8004bf0 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004bdc:	9201      	str	r2, [sp, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	460b      	mov	r3, r1
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f006 fe0b 	bl	800b802 <VL53L1_calc_timeout_register_values>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3318      	adds	r3, #24
 8004c12:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c26:	23f1      	movs	r3, #241	; 0xf1
 8004c28:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004c2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d14a      	bne.n	8004cc8 <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f006 fc56 	bl	800b4f2 <VL53L1_calc_macro_period_us>
 8004c46:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f006 fd14 	bl	800b67e <VL53L1_calc_timeout_us>
 8004c56:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 8004c62:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004c64:	8a7b      	ldrh	r3, [r7, #18]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 8004c70:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004c72:	4413      	add	r3, r2
 8004c74:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004c76:	8a7b      	ldrh	r3, [r7, #18]
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f006 fd66 	bl	800b74c <VL53L1_calc_decoded_timeout_us>
 8004c80:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 8004c8c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004c8e:	8a7b      	ldrh	r3, [r7, #18]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 8004c9a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004c9c:	4413      	add	r3, r2
 8004c9e:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004ca0:	8a7b      	ldrh	r3, [r7, #18]
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f006 fd51 	bl	800b74c <VL53L1_calc_decoded_timeout_us>
 8004caa:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004cc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3720      	adds	r7, #32
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3318      	adds	r3, #24
 8004cea:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004cec:	2301      	movs	r3, #1
 8004cee:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004cf0:	7afb      	ldrb	r3, [r7, #11]
 8004cf2:	2b07      	cmp	r3, #7
 8004cf4:	d81c      	bhi.n	8004d30 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004d0c:	7dbb      	ldrb	r3, [r7, #22]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	fa42 f303 	asr.w	r3, r2, r3
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e001      	b.n	8004d34 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004d30:	23fc      	movs	r3, #252	; 0xfc
 8004d32:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3318      	adds	r3, #24
 8004d56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	7858      	ldrb	r0, [r3, #1]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	7819      	ldrb	r1, [r3, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f203 339f 	addw	r3, r3, #927	; 0x39f
 8004d66:	461a      	mov	r2, r3
 8004d68:	f007 fdeb 	bl	800c942 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	7898      	ldrb	r0, [r3, #2]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	78d9      	ldrb	r1, [r3, #3]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f007 fe20 	bl	800c9c0 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004db2:	f107 020e 	add.w	r2, r7, #14
 8004db6:	f107 010d 	add.w	r1, r7, #13
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f00a f880 	bl	800eec0 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004dc0:	7bba      	ldrb	r2, [r7, #14]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004dc6:	7b7a      	ldrb	r2, [r7, #13]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004dd2:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3318      	adds	r3, #24
 8004e08:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	331c      	adds	r3, #28
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4619      	mov	r1, r3
 8004e18:	f014 fbf2 	bl	8019600 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781a      	ldrb	r2, [r3, #0]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	785a      	ldrb	r2, [r3, #1]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	33c2      	adds	r3, #194	; 0xc2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f00f fbce 	bl	80145d6 <VL53L1_init_zone_config_histogram_bins>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004e4e:	e00f      	b.n	8004e70 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d807      	bhi.n	8004e68 <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004e66:	e003      	b.n	8004e70 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2211      	movs	r2, #17
 8004e6c:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004e70:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3318      	adds	r3, #24
 8004e8e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	33c2      	adds	r3, #194	; 0xc2
 8004e94:	226c      	movs	r2, #108	; 0x6c
 8004e96:	4619      	mov	r1, r3
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f014 fbb1 	bl	8019600 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 8004e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3318      	adds	r3, #24
 8004ec4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	2b26      	cmp	r3, #38	; 0x26
 8004ecc:	f200 8139 	bhi.w	8005142 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f75 	.word	0x08004f75
 8004edc:	08004f75 	.word	0x08004f75
 8004ee0:	08004f75 	.word	0x08004f75
 8004ee4:	08004f75 	.word	0x08004f75
 8004ee8:	08004f75 	.word	0x08004f75
 8004eec:	08004f9f 	.word	0x08004f9f
 8004ef0:	08004f9f 	.word	0x08004f9f
 8004ef4:	08004f9f 	.word	0x08004f9f
 8004ef8:	08005143 	.word	0x08005143
 8004efc:	08005143 	.word	0x08005143
 8004f00:	08004ff3 	.word	0x08004ff3
 8004f04:	0800509b 	.word	0x0800509b
 8004f08:	08004ff3 	.word	0x08004ff3
 8004f0c:	08005143 	.word	0x08005143
 8004f10:	08005143 	.word	0x08005143
 8004f14:	08005143 	.word	0x08005143
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004f9f 	.word	0x08004f9f
 8004f20:	08004ff3 	.word	0x08004ff3
 8004f24:	08004ff3 	.word	0x08004ff3
 8004f28:	08004ff3 	.word	0x08004ff3
 8004f2c:	08004ff3 	.word	0x08004ff3
 8004f30:	08004ff3 	.word	0x08004ff3
 8004f34:	0800501d 	.word	0x0800501d
 8004f38:	08005047 	.word	0x08005047
 8004f3c:	08005071 	.word	0x08005071
 8004f40:	08004ff3 	.word	0x08004ff3
 8004f44:	08004ff3 	.word	0x08004ff3
 8004f48:	08004ff3 	.word	0x08004ff3
 8004f4c:	080050c5 	.word	0x080050c5
 8004f50:	080050c5 	.word	0x080050c5
 8004f54:	080050c5 	.word	0x080050c5
 8004f58:	080050ef 	.word	0x080050ef
 8004f5c:	080050ef 	.word	0x080050ef
 8004f60:	080050ef 	.word	0x080050ef
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	08004fc9 	.word	0x08004fc9
 8004f6c:	08004fc9 	.word	0x08004fc9
 8004f70:	08005119 	.word	0x08005119
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	601a      	str	r2, [r3, #0]
	break;
 8004f9c:	e0d4      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	601a      	str	r2, [r3, #0]
	break;
 8004fc6:	e0bf      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	601a      	str	r2, [r3, #0]
	break;
 8004ff0:	e0aa      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	601a      	str	r2, [r3, #0]

	break;
 800501a:	e095      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	601a      	str	r2, [r3, #0]
	break;
 8005044:	e080      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	601a      	str	r2, [r3, #0]
	break;
 800506e:	e06b      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	601a      	str	r2, [r3, #0]
	break;
 8005098:	e056      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	601a      	str	r2, [r3, #0]
	break;
 80050c2:	e041      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	601a      	str	r2, [r3, #0]
	break;
 80050ec:	e02c      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	601a      	str	r2, [r3, #0]
	break;
 8005116:	e017      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	601a      	str	r2, [r3, #0]
	break;
 8005140:	e002      	b.n	8005148 <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005142:	23fc      	movs	r3, #252	; 0xfc
 8005144:	75fb      	strb	r3, [r7, #23]
		break;
 8005146:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005148:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b098      	sub	sp, #96	; 0x60
 800515c:	af06      	add	r7, sp, #24
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	72fb      	strb	r3, [r7, #11]
 8005166:	4613      	mov	r3, r2
 8005168:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3318      	adds	r3, #24
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800517c:	3308      	adds	r3, #8
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8005180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005182:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	f203 3342 	addw	r3, r3, #834	; 0x342
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8005190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005192:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519a:	f203 3362 	addw	r3, r3, #866	; 0x362
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80051a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a2:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80051a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051aa:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80051b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80051b6:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80051b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ba:	33c2      	adds	r3, #194	; 0xc2
 80051bc:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80051c4:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80051c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c8:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 80051cc:	3318      	adds	r3, #24
 80051ce:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80051d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d2:	7afa      	ldrb	r2, [r7, #11]
 80051d4:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80051d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051da:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e0:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80051e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e6:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 80051e8:	2103      	movs	r1, #3
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f005 f9c1 	bl	800a572 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80051f0:	7afb      	ldrb	r3, [r7, #11]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	2b26      	cmp	r3, #38	; 0x26
 80051f6:	f200 8321 	bhi.w	800583c <VL53L1_set_preset_mode+0x6e4>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <VL53L1_set_preset_mode+0xa8>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	0800529d 	.word	0x0800529d
 8005204:	080052c1 	.word	0x080052c1
 8005208:	080052e5 	.word	0x080052e5
 800520c:	08005309 	.word	0x08005309
 8005210:	0800532d 	.word	0x0800532d
 8005214:	08005351 	.word	0x08005351
 8005218:	08005375 	.word	0x08005375
 800521c:	08005399 	.word	0x08005399
 8005220:	0800583d 	.word	0x0800583d
 8005224:	0800583d 	.word	0x0800583d
 8005228:	080053bd 	.word	0x080053bd
 800522c:	08005525 	.word	0x08005525
 8005230:	080056b5 	.word	0x080056b5
 8005234:	080056dd 	.word	0x080056dd
 8005238:	08005705 	.word	0x08005705
 800523c:	0800572d 	.word	0x0800572d
 8005240:	08005755 	.word	0x08005755
 8005244:	08005779 	.word	0x08005779
 8005248:	080054fd 	.word	0x080054fd
 800524c:	080053e5 	.word	0x080053e5
 8005250:	0800540d 	.word	0x0800540d
 8005254:	08005435 	.word	0x08005435
 8005258:	0800545d 	.word	0x0800545d
 800525c:	08005485 	.word	0x08005485
 8005260:	080054ad 	.word	0x080054ad
 8005264:	080054d5 	.word	0x080054d5
 8005268:	0800554d 	.word	0x0800554d
 800526c:	08005575 	.word	0x08005575
 8005270:	0800559d 	.word	0x0800559d
 8005274:	080055c5 	.word	0x080055c5
 8005278:	080055ed 	.word	0x080055ed
 800527c:	08005615 	.word	0x08005615
 8005280:	0800563d 	.word	0x0800563d
 8005284:	08005665 	.word	0x08005665
 8005288:	0800568d 	.word	0x0800568d
 800528c:	0800579d 	.word	0x0800579d
 8005290:	080057c5 	.word	0x080057c5
 8005294:	080057ed 	.word	0x080057ed
 8005298:	08005815 	.word	0x08005815

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	9302      	str	r3, [sp, #8]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052b4:	f003 fbc6 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052be:	e2c1      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052d8:	f003 fd2d 	bl	8008d36 <VL53L1_preset_mode_standard_ranging_short_range>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052e2:	e2af      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052fc:	f003 fd60 	bl	8008dc0 <VL53L1_preset_mode_standard_ranging_long_range>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005306:	e29d      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9303      	str	r3, [sp, #12]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800531e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005320:	f003 fd93 	bl	8008e4a <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800532a:	e28b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005342:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005344:	f003 fdaa 	bl	8008e9c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005348:	4603      	mov	r3, r0
 800534a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800534e:	e279      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	9303      	str	r3, [sp, #12]
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	9302      	str	r3, [sp, #8]
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005368:	f003 fdc1 	bl	8008eee <VL53L1_preset_mode_timed_ranging>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005372:	e267      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	9303      	str	r3, [sp, #12]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	9302      	str	r3, [sp, #8]
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800538c:	f003 fded 	bl	8008f6a <VL53L1_preset_mode_timed_ranging_short_range>
 8005390:	4603      	mov	r3, r0
 8005392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005396:	e255      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053b0:	f003 fe19 	bl	8008fe6 <VL53L1_preset_mode_timed_ranging_long_range>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053ba:	e243      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	9304      	str	r3, [sp, #16]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	9301      	str	r3, [sp, #4]
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053d8:	f003 fefb 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80053e2:	e22f      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	9303      	str	r3, [sp, #12]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	9302      	str	r3, [sp, #8]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005400:	f003 ff7c 	bl	80092fc <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800540a:	e21b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	9304      	str	r3, [sp, #16]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	9303      	str	r3, [sp, #12]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005426:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005428:	f003 ffcc 	bl	80093c4 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005432:	e207      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	9302      	str	r3, [sp, #8]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800544e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005450:	f003 ffe0 	bl	8009414 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8005454:	4603      	mov	r3, r0
 8005456:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800545a:	e1f3      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	9302      	str	r3, [sp, #8]
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005474:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005478:	f004 f830 	bl	80094dc <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005482:	e1df      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	9303      	str	r3, [sp, #12]
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	9302      	str	r3, [sp, #8]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800549e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054a0:	f004 fe25 	bl	800a0ee <VL53L1_preset_mode_histogram_multizone>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054aa:	e1cb      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	9303      	str	r3, [sp, #12]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	9302      	str	r3, [sp, #8]
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054c8:	f004 fe63 	bl	800a192 <VL53L1_preset_mode_histogram_multizone_short_range>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054d2:	e1b7      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	9302      	str	r3, [sp, #8]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054f0:	f004 fea1 	bl	800a236 <VL53L1_preset_mode_histogram_multizone_long_range>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80054fa:	e1a3      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	9303      	str	r3, [sp, #12]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	9302      	str	r3, [sp, #8]
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005518:	f004 ffde 	bl	800a4d8 <VL53L1_preset_mode_histogram_ranging_ref>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005522:	e18f      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	9302      	str	r3, [sp, #8]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800553e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005540:	f003 fff4 	bl	800952c <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800554a:	e17b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	9303      	str	r3, [sp, #12]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005566:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005568:	f004 f86c 	bl	8009644 <VL53L1_preset_mode_histogram_long_range>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005572:	e167      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	9304      	str	r3, [sp, #16]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	9302      	str	r3, [sp, #8]
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800558e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005590:	f004 f8f6 	bl	8009780 <VL53L1_preset_mode_histogram_long_range_mm1>
 8005594:	4603      	mov	r3, r0
 8005596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800559a:	e153      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	9304      	str	r3, [sp, #16]
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	9303      	str	r3, [sp, #12]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055b8:	f004 f943 	bl	8009842 <VL53L1_preset_mode_histogram_long_range_mm2>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055c2:	e13f      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	9304      	str	r3, [sp, #16]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	9303      	str	r3, [sp, #12]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	9302      	str	r3, [sp, #8]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055e0:	f004 f957 	bl	8009892 <VL53L1_preset_mode_histogram_medium_range>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80055ea:	e12b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	9303      	str	r3, [sp, #12]
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005604:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005608:	f004 f9e1 	bl	80099ce <VL53L1_preset_mode_histogram_medium_range_mm1>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005612:	e117      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800562e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005630:	f004 fa2e 	bl	8009a90 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800563a:	e103      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	9304      	str	r3, [sp, #16]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	9303      	str	r3, [sp, #12]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	9302      	str	r3, [sp, #8]
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005658:	f004 fa42 	bl	8009ae0 <VL53L1_preset_mode_histogram_short_range>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005662:	e0ef      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	9302      	str	r3, [sp, #8]
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800567e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005680:	f004 fb4c 	bl	8009d1c <VL53L1_preset_mode_histogram_short_range_mm1>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800568a:	e0db      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	9304      	str	r3, [sp, #16]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a8:	f004 fb99 	bl	8009dde <VL53L1_preset_mode_histogram_short_range_mm2>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056b2:	e0c7      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056d0:	f004 fbad 	bl	8009e2e <VL53L1_preset_mode_histogram_characterisation>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80056da:	e0b3      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	9303      	str	r3, [sp, #12]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	9302      	str	r3, [sp, #8]
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056f8:	f004 fbca 	bl	8009e90 <VL53L1_preset_mode_histogram_xtalk_planar>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005702:	e09f      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	9303      	str	r3, [sp, #12]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800571e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005720:	f004 fc2d 	bl	8009f7e <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005724:	4603      	mov	r3, r0
 8005726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800572a:	e08b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	9303      	str	r3, [sp, #12]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	9302      	str	r3, [sp, #8]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005744:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005748:	f004 fcad 	bl	800a0a6 <VL53L1_preset_mode_histogram_xtalk_mm2>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005752:	e077      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	9302      	str	r3, [sp, #8]
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800576a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800576c:	f004 fdb5 	bl	800a2da <VL53L1_preset_mode_olt>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005776:	e065      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800578e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005790:	f003 fce5 	bl	800915e <VL53L1_preset_mode_singleshot_ranging>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800579a:	e053      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	9302      	str	r3, [sp, #8]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057b8:	f003 fc7d 	bl	80090b6 <VL53L1_preset_mode_low_power_auto_short_ranging>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80057c2:	e03f      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	9303      	str	r3, [sp, #12]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	9302      	str	r3, [sp, #8]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057e0:	f003 fc3f 	bl	8009062 <VL53L1_preset_mode_low_power_auto_ranging>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 80057ea:	e02b      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	9302      	str	r3, [sp, #8]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005806:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005808:	f003 fc7f 	bl	800910a <VL53L1_preset_mode_low_power_auto_long_ranging>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005812:	e017      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	9302      	str	r3, [sp, #8]
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800582e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005830:	f004 f9f4 	bl	8009c1c <VL53L1_preset_mode_special_histogram_short_range>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800583a:	e003      	b.n	8005844 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800583c:	23fc      	movs	r3, #252	; 0xfc
 800583e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005842:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005844:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	893a      	ldrh	r2, [r7, #8]
 8005850:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005854:	893a      	ldrh	r2, [r7, #8]
 8005856:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 8005858:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800585c:	2b00      	cmp	r3, #0
 800585e:	d108      	bne.n	8005872 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 8005860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005862:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff f98f 	bl	8004b8a <VL53L1_set_timeouts_us>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005872:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800587a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff f92b 	bl	8004ad8 <VL53L1_set_inter_measurement_period_ms>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800588e:	3301      	adds	r3, #1
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f005 fa82 	bl	800ada4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80058a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3748      	adds	r7, #72	; 0x48
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3318      	adds	r3, #24
 80058be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80058ca:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3318      	adds	r3, #24
 80058ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 80058f8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3318      	adds	r3, #24
 800591a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3318      	adds	r3, #24
 800594a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	887a      	ldrh	r2, [r7, #2]
 8005950:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005954:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0d2      	sub	sp, #328	; 0x148
 8005968:	af00      	add	r7, sp, #0
 800596a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800596e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005972:	6018      	str	r0, [r3, #0]
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800597c:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005980:	4602      	mov	r2, r0
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005988:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800598c:	460a      	mov	r2, r1
 800598e:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005996:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800599a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3318      	adds	r3, #24
 80059a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 80059a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80059aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80059ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059be:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80059c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80059c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059ca:	3348      	adds	r3, #72	; 0x48
 80059cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80059d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059d4:	f203 3342 	addw	r3, r3, #834	; 0x342
 80059d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80059dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059e0:	f203 3362 	addw	r3, r3, #866	; 0x362
 80059e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80059e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059ec:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80059f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80059f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80059f8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80059fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005a00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a04:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005a08:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005a0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a10:	332c      	adds	r3, #44	; 0x2c
 8005a12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005a16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a1a:	3348      	adds	r3, #72	; 0x48
 8005a1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005a20:	f107 030c 	add.w	r3, r7, #12
 8005a24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005a40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8005a48:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005a50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a54:	791b      	ldrb	r3, [r3, #4]
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005a5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a62:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8005a66:	f993 3000 	ldrsb.w	r3, [r3]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005a70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a74:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8005a76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 8005a7e:	3336      	adds	r3, #54	; 0x36
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005a86:	4413      	add	r3, r2
 8005a88:	1d9a      	adds	r2, r3, #6
 8005a8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a92:	4611      	mov	r1, r2
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7ff f955 	bl	8004d44 <VL53L1_set_user_zone>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8005aa0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005aa4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d019      	beq.n	8005ae0 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 8005aac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ab0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ab4:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005ac2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005ac6:	4413      	add	r3, r2
 8005ac8:	1c9a      	adds	r2, r3, #2
 8005aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ace:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f001 fbd7 	bl	8007288 <VL53L1_set_zone_dss_config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005ae0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005ae4:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005af0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005af4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b00:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005b04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b08:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b14:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8005b18:	2bff      	cmp	r3, #255	; 0xff
 8005b1a:	d106      	bne.n	8005b2a <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005b1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b32:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d139      	bne.n	8005bae <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005b3a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b42:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d131      	bne.n	8005bae <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005b4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b4e:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005b52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005b5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 8005b68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005b6c:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 8005b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8005b78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b7c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005b80:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8005b82:	b21a      	sxth	r2, r3
 8005b84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b88:	825a      	strh	r2, [r3, #18]
 8005b8a:	e003      	b.n	8005b94 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8005b8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b90:	2200      	movs	r2, #0
 8005b92:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8005b94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005b98:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d805      	bhi.n	8005bae <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8005ba2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ba6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005baa:	2205      	movs	r2, #5
 8005bac:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005bae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d117      	bne.n	8005bee <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005bbe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc6:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10f      	bne.n	8005bee <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005bce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd6:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005bda:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bde:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005be6:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005bea:	2206      	movs	r2, #6
 8005bec:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005bee:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 8005bf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bfa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	f007 f98c 	bl	800cf1c <VL53L1_save_cfg_data>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8005c0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005c0e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d826      	bhi.n	8005c68 <VL53L1_init_and_start_range+0x304>
 8005c1a:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <VL53L1_init_and_start_range+0x2bc>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c61 	.word	0x08005c61
 8005c24:	08005c59 	.word	0x08005c59
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c39 	.word	0x08005c39
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c3e:	e017      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005c40:	230d      	movs	r3, #13
 8005c42:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c46:	e013      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005c48:	2324      	movs	r3, #36	; 0x24
 8005c4a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c4e:	e00f      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005c50:	2344      	movs	r3, #68	; 0x44
 8005c52:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c56:	e00b      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005c58:	235a      	movs	r3, #90	; 0x5a
 8005c5a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c5e:	e007      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005c60:	2371      	movs	r3, #113	; 0x71
 8005c62:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c66:	e003      	b.n	8005c70 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005c68:	2383      	movs	r3, #131	; 0x83
 8005c6a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005c6e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8005c70:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005c74:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005c78:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8005c7c:	f107 030c 	add.w	r3, r7, #12
 8005c80:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005c8a:	e00b      	b.n	8005ca4 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 8005c8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8005c9a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005ca4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8005ca8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3ed      	bcc.n	8005c8c <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005cb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cb4:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d917      	bls.n	8005cee <VL53L1_init_and_start_range+0x38a>
 8005cbe:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d113      	bne.n	8005cee <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005cc6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005cca:	f1c3 0301 	rsb	r3, r3, #1
 8005cce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005cd2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8005cd6:	f107 020c 	add.w	r2, r7, #12
 8005cda:	4413      	add	r3, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	210b      	movs	r1, #11
 8005ce0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005ce4:	f00c fb0d 	bl	8012302 <VL53L1_i2c_encode_static_nvm_managed>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005cee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005cf2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d917      	bls.n	8005d2c <VL53L1_init_and_start_range+0x3c8>
 8005cfc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d04:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d08:	f1c3 030d 	rsb	r3, r3, #13
 8005d0c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d10:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005d14:	f107 020c 	add.w	r2, r7, #12
 8005d18:	4413      	add	r3, r2
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	2117      	movs	r1, #23
 8005d1e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005d22:	f00c fbca 	bl	80124ba <VL53L1_i2c_encode_customer_nvm_managed>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005d2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d30:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d917      	bls.n	8005d6a <VL53L1_init_and_start_range+0x406>
 8005d3a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d113      	bne.n	8005d6a <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d42:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d46:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005d4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005d52:	f107 020c 	add.w	r2, r7, #12
 8005d56:	4413      	add	r3, r2
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2120      	movs	r1, #32
 8005d5c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005d60:	f00c fce9 	bl	8012736 <VL53L1_i2c_encode_static_config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005d6a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005d6e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d917      	bls.n	8005da8 <VL53L1_init_and_start_range+0x444>
 8005d78:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d113      	bne.n	8005da8 <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005d80:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005d84:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005d88:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005d8c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005d90:	f107 020c 	add.w	r2, r7, #12
 8005d94:	4413      	add	r3, r2
 8005d96:	461a      	mov	r2, r3
 8005d98:	2116      	movs	r1, #22
 8005d9a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005d9e:	f00c fdad 	bl	80128fc <VL53L1_i2c_encode_general_config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005da8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dac:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d917      	bls.n	8005de6 <VL53L1_init_and_start_range+0x482>
 8005db6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d113      	bne.n	8005de6 <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005dbe:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005dc2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8005dc6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005dca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005dce:	f107 020c 	add.w	r2, r7, #12
 8005dd2:	4413      	add	r3, r2
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2117      	movs	r1, #23
 8005dd8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005ddc:	f00c fe12 	bl	8012a04 <VL53L1_i2c_encode_timing_config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8005de6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dea:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d036      	beq.n	8005e62 <VL53L1_init_and_start_range+0x4fe>
 8005df4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d132      	bne.n	8005e62 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005dfc:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e00:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005e04:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8005e08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e1a:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e26:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e2c:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e38:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e3e:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e44:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e46:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005e4a:	f107 020c 	add.w	r2, r7, #12
 8005e4e:	4413      	add	r3, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	2112      	movs	r1, #18
 8005e54:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8005e58:	f00c fe56 	bl	8012b08 <VL53L1_i2c_encode_dynamic_config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 8005e62:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d113      	bne.n	8005e92 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 8005e6a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005e6e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005e72:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005e76:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005e7a:	f107 020c 	add.w	r2, r7, #12
 8005e7e:	4413      	add	r3, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	2105      	movs	r1, #5
 8005e84:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005e88:	f00c fec3 	bl	8012c12 <VL53L1_i2c_encode_system_control>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 8005e92:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 8005e9a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005e9e:	f107 020c 	add.w	r2, r7, #12
 8005ea2:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8005ea6:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8005eaa:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	f00e fbd6 	bl	8014660 <VL53L1_WriteMulti>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 8005eba:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005ec2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ec6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	f004 fb82 	bl	800a5d4 <VL53L1_update_ll_driver_rd_state>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005ed6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005ede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005ee2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	f004 fd15 	bl	800a916 <VL53L1_update_ll_driver_cfg_state>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005ef2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005f18:	3308      	adds	r3, #8
 8005f1a:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f00c fea1 	bl	8012c88 <VL53L1_set_system_control>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005f5c:	2103      	movs	r1, #3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f004 fb07 	bl	800a572 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f004 ff14 	bl	800ada4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f004 ff46 	bl	800ae0e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f008 f9b4 	bl	800e2fe <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b0c8      	sub	sp, #288	; 0x120
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005fac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005fb8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005fbc:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005fc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005fc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3318      	adds	r3, #24
 8005fd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005fd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fd8:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005fdc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005fe0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005fe4:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005fe8:	331c      	adds	r3, #28
 8005fea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005fee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ff2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005ff6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8005ffa:	2388      	movs	r3, #136	; 0x88
 8005ffc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800600c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006010:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d008      	beq.n	800602c <VL53L1_get_measurement_results+0x8a>
 800601a:	2b02      	cmp	r3, #2
 800601c:	d10d      	bne.n	800603a <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800601e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006022:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8006026:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800602a:	e00a      	b.n	8006042 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800602c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006030:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8006034:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8006038:	e003      	b.n	8006042 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 800603a:	232c      	movs	r3, #44	; 0x2c
 800603c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8006040:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8006042:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 800604a:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800604e:	f107 0208 	add.w	r2, r7, #8
 8006052:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8006056:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800605a:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800605e:	6800      	ldr	r0, [r0, #0]
 8006060:	f00e fb34 	bl	80146cc <VL53L1_ReadMulti>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800606a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800606e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d917      	bls.n	80060a8 <VL53L1_get_measurement_results+0x106>
 8006078:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800607c:	2b00      	cmp	r3, #0
 800607e:	d113      	bne.n	80060a8 <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8006080:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8006084:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8006088:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800608c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8006090:	f107 0208 	add.w	r2, r7, #8
 8006094:	4413      	add	r3, r2
 8006096:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800609a:	4619      	mov	r1, r3
 800609c:	2038      	movs	r0, #56	; 0x38
 800609e:	f00c ff71 	bl	8012f84 <VL53L1_i2c_decode_debug_results>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80060a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80060ac:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d017      	beq.n	80060e6 <VL53L1_get_measurement_results+0x144>
 80060b6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80060be:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80060c2:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80060c6:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80060ca:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80060ce:	f107 0208 	add.w	r2, r7, #8
 80060d2:	4413      	add	r3, r2
 80060d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80060d8:	4619      	mov	r1, r3
 80060da:	2021      	movs	r0, #33	; 0x21
 80060dc:	f00c fef1 	bl	8012ec2 <VL53L1_i2c_decode_core_results>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80060e6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d110      	bne.n	8006110 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80060f4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 80060f8:	f107 0208 	add.w	r2, r7, #8
 80060fc:	4413      	add	r3, r2
 80060fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006102:	4619      	mov	r1, r3
 8006104:	202c      	movs	r0, #44	; 0x2c
 8006106:	f00c fde6 	bl	8012cd6 <VL53L1_i2c_decode_system_results>
 800610a:	4603      	mov	r3, r0
 800610c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006110:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8006114:	4618      	mov	r0, r3
 8006116:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800611e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006122:	b0a0      	sub	sp, #128	; 0x80
 8006124:	af06      	add	r7, sp, #24
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	460b      	mov	r3, r1
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3318      	adds	r3, #24
 8006138:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006140:	3308      	adds	r3, #8
 8006142:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8006144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006146:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8006148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800614e:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8006150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006152:	332c      	adds	r3, #44	; 0x2c
 8006154:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8006156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006158:	33c2      	adds	r3, #194	; 0xc2
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 800615c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615e:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8006162:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800616a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800616c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8006172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006174:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8006178:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800617a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800617c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8006180:	3318      	adds	r3, #24
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8006184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006186:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800618c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800618e:	3348      	adds	r3, #72	; 0x48
 8006190:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8006192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006194:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619c:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 80061a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80061a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a4:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d108      	bne.n	80061be <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80061b2:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <VL53L1_get_device_results+0xa0>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <VL53L1_get_device_results+0xa2>
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 80061c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c6:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 82a9 	beq.w	8006726 <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 80061d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061da:	4619      	mov	r1, r3
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fbd7 	bl	8006990 <VL53L1_get_histogram_bin_data>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 80061e8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d118      	bne.n	8006222 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 80061f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f2:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d114      	bne.n	8006222 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 80061f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8006202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800620a:	4413      	add	r3, r2
 800620c:	1d1a      	adds	r2, r3, #4
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006214:	4619      	mov	r1, r3
 8006216:	4610      	mov	r0, r2
 8006218:	f005 fb6c 	bl	800b8f4 <VL53L1_hist_copy_and_scale_ambient_info>
 800621c:	4603      	mov	r3, r0
 800621e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8006222:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 8220 	bne.w	800666c <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800622c:	f107 0313 	add.w	r3, r7, #19
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f008 f91a 	bl	800e46c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 800623e:	2301      	movs	r3, #1
 8006240:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8006242:	7cfb      	ldrb	r3, [r7, #19]
 8006244:	3b01      	subs	r3, #1
 8006246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 800624a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8006252:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3202      	adds	r2, #2
 800625a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800625e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006260:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8006262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006264:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8006268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626a:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 800626c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006272:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f005 fa41 	bl	800b700 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 800627e:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8006280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006286:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800629c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629e:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80062a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a4:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80062a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a8:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80062ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ae:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 80062b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b2:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 80062b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062b8:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80062bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062be:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80062c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c4:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80062c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ca:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80062d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d6:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80062d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062da:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80062de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e0:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80062e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e8:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80062ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f0:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 80062f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f4:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 80062f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fa:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f004 fc2f 	bl	800ab64 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	795b      	ldrb	r3, [r3, #5]
 800630a:	2b03      	cmp	r3, #3
 800630c:	d048      	beq.n	80063a0 <VL53L1_get_device_results+0x282>
 800630e:	2b03      	cmp	r3, #3
 8006310:	dc56      	bgt.n	80063c0 <VL53L1_get_device_results+0x2a2>
 8006312:	2b01      	cmp	r3, #1
 8006314:	d002      	beq.n	800631c <VL53L1_get_device_results+0x1fe>
 8006316:	2b02      	cmp	r3, #2
 8006318:	d02e      	beq.n	8006378 <VL53L1_get_device_results+0x25a>
 800631a:	e051      	b.n	80063c0 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 800631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631e:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8006322:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8006332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006334:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8006338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800633a:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8006344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006346:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 800634a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800634c:	319c      	adds	r1, #156	; 0x9c
 800634e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006350:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8006354:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8006358:	b2a4      	uxth	r4, r4
 800635a:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 800635c:	351c      	adds	r5, #28
 800635e:	9505      	str	r5, [sp, #20]
 8006360:	9404      	str	r4, [sp, #16]
 8006362:	9003      	str	r0, [sp, #12]
 8006364:	9102      	str	r1, [sp, #8]
 8006366:	9201      	str	r2, [sp, #4]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4643      	mov	r3, r8
 800636c:	4672      	mov	r2, lr
 800636e:	4661      	mov	r1, ip
 8006370:	4630      	mov	r0, r6
 8006372:	f006 fa36 	bl	800c7e2 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8006376:	e027      	b.n	80063c8 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8006378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800637a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800637e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8006382:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006386:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006396:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8006398:	b21a      	sxth	r2, r3
 800639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639c:	839a      	strh	r2, [r3, #28]
		break;
 800639e:	e013      	b.n	80063c8 <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 80063a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a2:	331c      	adds	r3, #28
 80063a4:	4619      	mov	r1, r3
 80063a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80063a8:	f7fd fcf7 	bl	8003d9a <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 80063ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	b21a      	sxth	r2, r3
 80063ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063bc:	839a      	strh	r2, [r3, #28]
		break;
 80063be:	e003      	b.n	80063c8 <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	2200      	movs	r2, #0
 80063c4:	839a      	strh	r2, [r3, #28]
		break;
 80063c6:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 80063c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 814f 	bne.w	8006670 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 80063d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063da:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 80063de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e0:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 80063e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e6:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 80063ea:	b29c      	uxth	r4, r3
 80063ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ee:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	4623      	mov	r3, r4
 80063f6:	f006 fb99 	bl	800cb2c <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 80063fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fc:	7999      	ldrb	r1, [r3, #6]
 80063fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006400:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 ff7b 	bl	8007302 <VL53L1_get_dmax_calibration_data>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8006412:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 812c 	bne.w	8006674 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 800641c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641e:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8006422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006424:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8006428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800642a:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800642e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006430:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8006434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006436:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800643a:	3308      	adds	r3, #8
				pdev->wArea2,
 800643c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800643e:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8006442:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8006444:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006446:	9405      	str	r4, [sp, #20]
 8006448:	f107 0413 	add.w	r4, r7, #19
 800644c:	9404      	str	r4, [sp, #16]
 800644e:	9203      	str	r2, [sp, #12]
 8006450:	9302      	str	r3, [sp, #8]
 8006452:	9001      	str	r0, [sp, #4]
 8006454:	9100      	str	r1, [sp, #0]
 8006456:	4633      	mov	r3, r6
 8006458:	462a      	mov	r2, r5
 800645a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f00e fb45 	bl	8014aec <VL53L1_ipp_hist_process_data>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8006468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800646c:	2b00      	cmp	r3, #0
 800646e:	d050      	beq.n	8006512 <VL53L1_get_device_results+0x3f4>
 8006470:	7cfb      	ldrb	r3, [r7, #19]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d94d      	bls.n	8006512 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006476:	2300      	movs	r3, #0
 8006478:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800647c:	e045      	b.n	800650a <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 800647e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006482:	224c      	movs	r2, #76	; 0x4c
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	3310      	adds	r3, #16
 800648a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800648c:	4413      	add	r3, r2
 800648e:	3304      	adds	r3, #4
 8006490:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	7cfa      	ldrb	r2, [r7, #19]
 8006498:	fbb3 f2f2 	udiv	r2, r3, r2
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	7cfa      	ldrb	r2, [r7, #19]
 80064a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	7cfa      	ldrb	r2, [r7, #19]
 80064b4:	fb93 f2f2 	sdiv	r2, r3, r2
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80064c0:	461a      	mov	r2, r3
 80064c2:	7cfb      	ldrb	r3, [r7, #19]
 80064c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064d2:	461a      	mov	r2, r3
 80064d4:	7cfb      	ldrb	r3, [r7, #19]
 80064d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80064e4:	461a      	mov	r2, r3
 80064e6:	7cfb      	ldrb	r3, [r7, #19]
 80064e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	7cfa      	ldrb	r2, [r7, #19]
 80064f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006500:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006504:	3301      	adds	r3, #1
 8006506:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800650a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800650e:	2b03      	cmp	r3, #3
 8006510:	d9b5      	bls.n	800647e <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8006512:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 80ae 	bne.w	8006678 <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 800651c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800651e:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006524:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8006528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800652a:	330e      	adds	r3, #14
 800652c:	461a      	mov	r2, r3
 800652e:	f006 f922 	bl	800c776 <VL53L1_hist_wrap_dmax>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 8006538:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 809d 	bne.w	800667c <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 800654c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006554:	4413      	add	r3, r2
 8006556:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 8006558:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 800655c:	4613      	mov	r3, r2
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006568:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800656a:	4413      	add	r3, r2
 800656c:	f103 0208 	add.w	r2, r3, #8
 8006570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f005 fc1d 	bl	800bdb2 <VL53L1_hist_phase_consistency_check>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 800657e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006582:	2b00      	cmp	r3, #0
 8006584:	d17c      	bne.n	8006680 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006588:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800658c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006590:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006598:	4413      	add	r3, r2
 800659a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800659c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80065a0:	4613      	mov	r3, r2
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80065ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065ae:	4413      	add	r3, r2
 80065b0:	f103 0208 	add.w	r2, r3, #8
 80065b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f006 f883 	bl	800c6c6 <VL53L1_hist_xmonitor_consistency_check>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 80065c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d15a      	bne.n	8006684 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 80065ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	2210      	movs	r2, #16
 80065dc:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 80065de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065e0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80065e4:	3301      	adds	r3, #1
 80065e6:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065f2:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 80065fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065fe:	429a      	cmp	r2, r3
 8006600:	d222      	bcs.n	8006648 <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8006602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8006610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006612:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006616:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 800661c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661e:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006622:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006628:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800662a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006632:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800663a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663c:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006646:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 8006648:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11b      	bne.n	8006688 <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006652:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 800665c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800665e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8006662:	331c      	adds	r3, #28
 8006664:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006666:	f006 fbbe 	bl	800cde6 <VL53L1_hist_copy_results_to_sys_and_core>
 800666a:	e00e      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800666c:	bf00      	nop
 800666e:	e00c      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006670:	bf00      	nop
 8006672:	e00a      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006674:	bf00      	nop
 8006676:	e008      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006678:	bf00      	nop
 800667a:	e006      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 800667c:	bf00      	nop
 800667e:	e004      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006680:	bf00      	nop
 8006682:	e002      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006684:	bf00      	nop
 8006686:	e000      	b.n	800668a <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 8006688:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d036      	beq.n	8006700 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 8006692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006694:	79db      	ldrb	r3, [r3, #7]
 8006696:	2b06      	cmp	r3, #6
 8006698:	d00a      	beq.n	80066b0 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 800669a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 80066a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f006 fc73 	bl	800cf90 <VL53L1_dynamic_zone_update>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80066b6:	e015      	b.n	80066e4 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80066b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 80066be:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <VL53L1_get_device_results+0x5ac>
 80066c6:	2103      	movs	r1, #3
 80066c8:	e000      	b.n	80066cc <VL53L1_get_device_results+0x5ae>
 80066ca:	2101      	movs	r1, #1
 80066cc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066d2:	4413      	add	r3, r2
 80066d4:	460a      	mov	r2, r1
 80066d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80066da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066de:	3301      	adds	r3, #1
 80066e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80066e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80066e8:	2b0f      	cmp	r3, #15
 80066ea:	d9e5      	bls.n	80066b8 <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 80066ec:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f006 fcc6 	bl	800d086 <VL53L1_multizone_hist_bins_update>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8006700:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f007 f9d3 	bl	800dab4 <VL53L1_dynamic_xtalk_correction_corrector>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8006714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006718:	2b00      	cmp	r3, #0
 800671a:	d043      	beq.n	80067a4 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	e03e      	b.n	80067a4 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 8006726:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800672a:	2b00      	cmp	r3, #0
 800672c:	d107      	bne.n	800673e <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	4619      	mov	r1, r3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fc35 	bl	8005fa2 <VL53L1_get_measurement_results>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 800673e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8006746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006748:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 800674c:	4618      	mov	r0, r3
 800674e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006750:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006756:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800675a:	321c      	adds	r2, #28
 800675c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800675e:	f000 fc1f 	bl	8006fa0 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d11c      	bne.n	80067a4 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 800676a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10d      	bne.n	800678e <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f007 fe24 	bl	800e3c8 <VL53L1_low_power_auto_setup_manual_calibration>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	2201      	movs	r2, #1
 800678a:	709a      	strb	r2, [r3, #2]
 800678c:	e00a      	b.n	80067a4 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 800678e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 800679a:	2b01      	cmp	r3, #1
 800679c:	d102      	bne.n	80067a4 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	2202      	movs	r2, #2
 80067a2:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80067a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80067aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ac:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80067ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80067b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067b6:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80067b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067ba:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80067be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c0:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 80067c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 80b0 	bne.w	800692c <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 80067cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ce:	2210      	movs	r2, #16
 80067d0:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80067d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80067da:	3301      	adds	r3, #1
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e0:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 80067e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 80067ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f0:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80067f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067f8:	429a      	cmp	r2, r3
 80067fa:	f080 8097 	bcs.w	800692c <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 80067fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8006802:	4613      	mov	r3, r2
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800680e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006810:	4413      	add	r3, r2
 8006812:	3308      	adds	r3, #8
 8006814:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8006816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006818:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800681a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681c:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 800681e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006820:	785a      	ldrb	r2, [r3, #1]
 8006822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006824:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8006826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006828:	789a      	ldrb	r2, [r3, #2]
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 800682e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006830:	78da      	ldrb	r2, [r3, #3]
 8006832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006834:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 8006836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006838:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006842:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 8006846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006848:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800684a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800684c:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8006856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006858:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 800685c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8006862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006864:	7c5a      	ldrb	r2, [r3, #17]
 8006866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006868:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 800686a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800686c:	7c9a      	ldrb	r2, [r3, #18]
 800686e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006870:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8006872:	2300      	movs	r3, #0
 8006874:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006878:	e052      	b.n	8006920 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 800687a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 800687e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 8006882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006884:	204c      	movs	r0, #76	; 0x4c
 8006886:	fb00 f303 	mul.w	r3, r0, r3
 800688a:	440b      	add	r3, r1
 800688c:	3338      	adds	r3, #56	; 0x38
 800688e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 8006890:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4403      	add	r3, r0
 800689c:	3308      	adds	r3, #8
 800689e:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80068a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80068a4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80068a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068aa:	204c      	movs	r0, #76	; 0x4c
 80068ac:	fb00 f303 	mul.w	r3, r0, r3
 80068b0:	440b      	add	r3, r1
 80068b2:	333c      	adds	r3, #60	; 0x3c
 80068b4:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80068b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4403      	add	r3, r0
 80068c2:	330c      	adds	r3, #12
 80068c4:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80068c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80068ca:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 80068ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068d0:	204c      	movs	r0, #76	; 0x4c
 80068d2:	fb00 f303 	mul.w	r3, r0, r3
 80068d6:	440b      	add	r3, r1
 80068d8:	3354      	adds	r3, #84	; 0x54
 80068da:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 80068dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068de:	4613      	mov	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	3310      	adds	r3, #16
 80068ea:	4602      	mov	r2, r0
 80068ec:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 80068ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 80068f2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 80068f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f8:	204c      	movs	r0, #76	; 0x4c
 80068fa:	fb00 f303 	mul.w	r3, r0, r3
 80068fe:	440b      	add	r3, r1
 8006900:	335e      	adds	r3, #94	; 0x5e
 8006902:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006906:	4613      	mov	r3, r2
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	3312      	adds	r3, #18
 8006912:	4602      	mov	r2, r0
 8006914:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8006916:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800691a:	3301      	adds	r3, #1
 800691c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006922:	7c9b      	ldrb	r3, [r3, #18]
 8006924:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8006928:	429a      	cmp	r2, r3
 800692a:	d3a6      	bcc.n	800687a <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 800692c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006930:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f012 fe64 	bl	8019600 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 8006938:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800693c:	2b00      	cmp	r3, #0
 800693e:	d105      	bne.n	800694c <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f003 ff35 	bl	800a7b0 <VL53L1_check_ll_driver_rd_state>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800694c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006950:	4618      	mov	r0, r3
 8006952:	3768      	adds	r7, #104	; 0x68
 8006954:	46bd      	mov	sp, r7
 8006956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800695a <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8006972:	78fb      	ldrb	r3, [r7, #3]
 8006974:	2203      	movs	r2, #3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fe fff3 	bl	8005964 <VL53L1_init_and_start_range>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8006982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b0d2      	sub	sp, #328	; 0x148
 8006994:	af00      	add	r7, sp, #0
 8006996:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800699a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800699e:	6018      	str	r0, [r3, #0]
 80069a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069a8:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 80069b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3318      	adds	r3, #24
 80069bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 80069c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80069ce:	3308      	adds	r3, #8
 80069d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80069d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069d8:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 80069dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80069e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069e4:	f203 3342 	addw	r3, r3, #834	; 0x342
 80069e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80069ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069f0:	f203 3362 	addw	r3, r3, #866	; 0x362
 80069f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80069f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069fc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006a0c:	f107 030c 	add.w	r3, r7, #12
 8006a10:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006a3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a42:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8006a4a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006a52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a56:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8006a5a:	2353      	movs	r3, #83	; 0x53
 8006a5c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8006a60:	2188      	movs	r1, #136	; 0x88
 8006a62:	6800      	ldr	r0, [r0, #0]
 8006a64:	f00d fe32 	bl	80146cc <VL53L1_ReadMulti>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8006a6e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006a72:	781a      	ldrb	r2, [r3, #0]
 8006a74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8006a82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006a86:	785a      	ldrb	r2, [r3, #1]
 8006a88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8006a96:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006a9a:	789a      	ldrb	r2, [r3, #2]
 8006a9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006aa0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8006aaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006aae:	78da      	ldrb	r2, [r3, #3]
 8006ab0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ab4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006abe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	2002      	movs	r0, #2
 8006ac8:	f004 fb75 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006ad0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ad4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006ade:	234e      	movs	r3, #78	; 0x4e
 8006ae0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006ae4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006ae8:	f107 020c 	add.w	r2, r7, #12
 8006aec:	4413      	add	r3, r2
 8006aee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006af2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006af6:	2002      	movs	r0, #2
 8006af8:	f004 fb5d 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006b00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006b0e:	2350      	movs	r3, #80	; 0x50
 8006b10:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006b14:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006b18:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b1c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006b20:	5cd2      	ldrb	r2, [r2, r3]
 8006b22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006b3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8006b4a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006b4e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8006b58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b60:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 8006b64:	2351      	movs	r3, #81	; 0x51
 8006b66:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8006b6a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006b6e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b72:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006b76:	5cd3      	ldrb	r3, [r2, r3]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006b7e:	2352      	movs	r3, #82	; 0x52
 8006b80:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8006b84:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006b88:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006b8c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006b90:	5cd2      	ldrb	r2, [r2, r3]
 8006b92:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8006b96:	4413      	add	r3, r2
 8006b98:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8006b9c:	234d      	movs	r3, #77	; 0x4d
 8006b9e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8006ba2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006ba6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006baa:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006bae:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8006bb2:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8006bb4:	2306      	movs	r3, #6
 8006bb6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006bba:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006bbe:	f107 020c 	add.w	r2, r7, #12
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006bce:	e01a      	b.n	8006c06 <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006bd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006bd4:	2003      	movs	r0, #3
 8006bd6:	f004 fb8d 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8006bda:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006bdc:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006be0:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006be6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3206      	adds	r2, #6
 8006bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006bf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006bfc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006c00:	3301      	adds	r3, #1
 8006c02:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006c06:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006c0a:	2b17      	cmp	r3, #23
 8006c0c:	d9e0      	bls.n	8006bd0 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006c0e:	f107 0208 	add.w	r2, r7, #8
 8006c12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c1a:	f248 018d 	movw	r1, #32909	; 0x808d
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	f000 fbd0 	bl	80073c4 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006c24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d118      	bne.n	8006c68 <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8006c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c3a:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006c3e:	3318      	adds	r3, #24
 8006c40:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f012 fce8 	bl	801961c <memset>
		pdev->bin_rec_pos = 0;
 8006c4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 8006c5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 8006c68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10b      	bne.n	8006c8e <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 8006c76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c7a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006c7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006c86:	6811      	ldr	r1, [r2, #0]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f7fd f97e 	bl	8003f8a <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8006c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c92:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006c96:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006c9a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 8006ca2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ca6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2200      	movs	r2, #0
 8006cae:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006cb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cb4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2218      	movs	r2, #24
 8006cbc:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006cbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cc2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2218      	movs	r2, #24
 8006cca:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006ccc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006cd0:	78da      	ldrb	r2, [r3, #3]
 8006cd2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cd6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ce4:	799b      	ldrb	r3, [r3, #6]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006cec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cf0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8006cfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006cfe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8006d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d0c:	7c1b      	ldrb	r3, [r3, #16]
 8006d0e:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006d10:	4413      	add	r3, r2
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d26:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 8006d28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 8006d36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d3a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006d3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d42:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006d46:	6811      	ldr	r1, [r2, #0]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f004 fed4 	bl	800baf6 <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d117      	bne.n	8006d8a <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8006d5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d5e:	791b      	ldrb	r3, [r3, #4]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8006d66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d6a:	795b      	ldrb	r3, [r3, #5]
 8006d6c:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006d6e:	4413      	add	r3, r2
 8006d70:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 8006d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d78:	799a      	ldrb	r2, [r3, #6]
 8006d7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006d7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006d88:	e016      	b.n	8006db8 <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8006d8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d8e:	79db      	ldrb	r3, [r3, #7]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8006d96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d9a:	7a1b      	ldrb	r3, [r3, #8]
 8006d9c:	b29b      	uxth	r3, r3
		encoded_timeout =
 8006d9e:	4413      	add	r3, r2
 8006da0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 8006da4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006da8:	7a5a      	ldrb	r2, [r3, #9]
 8006daa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8006db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006dcc:	e01f      	b.n	8006e0e <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006dce:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006dd2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006dd6:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8006dda:	6812      	ldr	r2, [r2, #0]
 8006ddc:	4413      	add	r3, r2
 8006dde:	7b1b      	ldrb	r3, [r3, #12]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	2b07      	cmp	r3, #7
 8006de6:	d10d      	bne.n	8006e04 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8006de8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	7adb      	ldrb	r3, [r3, #11]
 8006df4:	3304      	adds	r3, #4
 8006df6:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8006df8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006dfc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006e04:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006e0e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d9db      	bls.n	8006dce <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 8006e16:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f004 fcdb 	bl	800b7d6 <VL53L1_decode_timeout>
 8006e20:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006e22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e26:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f007 fb54 	bl	800e4ec <VL53L1_calc_pll_period_us>
 8006e44:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8006e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8006e5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e74:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8006e78:	f007 fb4f 	bl	800e51a <VL53L1_duration_maths>
 8006e7c:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8006e7e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e82:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8006e8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 8006e9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ea0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f007 fc5e 	bl	800e766 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 8006eaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006eae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	f008 f875 	bl	800efa2 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8006eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ebc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006ec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ec4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ed0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006ed4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ed8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8006ee0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ee4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	789b      	ldrb	r3, [r3, #2]
 8006eec:	461a      	mov	r2, r3
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006efa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006efe:	4413      	add	r3, r2
 8006f00:	3302      	adds	r3, #2
 8006f02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f0a:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006f0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f1e:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006f20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f32:	2200      	movs	r2, #0
 8006f34:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006f36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f3a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2b11      	cmp	r3, #17
 8006f4a:	bf8c      	ite	hi
 8006f4c:	2201      	movhi	r2, #1
 8006f4e:	2200      	movls	r2, #0
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d11b      	bne.n	8006f8e <VL53L1_get_histogram_bin_data+0x5fe>
 8006f56:	2201      	movs	r2, #1
 8006f58:	409a      	lsls	r2, r3
 8006f5a:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <VL53L1_get_histogram_bin_data+0x60c>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf14      	ite	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	2300      	moveq	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006f6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006f70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f84:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006f86:	23fa      	movs	r3, #250	; 0xfa
 8006f88:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006f8c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006f8e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	0002200e 	.word	0x0002200e

08006fa0 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b08b      	sub	sp, #44	; 0x2c
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	78da      	ldrb	r2, [r3, #3]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	8a1b      	ldrh	r3, [r3, #16]
 8006fe0:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	8a9b      	ldrh	r3, [r3, #20]
 8006fe6:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	8a5b      	ldrh	r3, [r3, #18]
 8006fec:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ff4:	e00b      	b.n	800700e <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8006ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4413      	add	r3, r2
 8007000:	2200      	movs	r2, #0
 8007002:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8007004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007008:	3301      	adds	r3, #1
 800700a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800700e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007012:	2b04      	cmp	r3, #4
 8007014:	d9ef      	bls.n	8006ff6 <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	3314      	adds	r3, #20
 800701a:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 800701c:	2300      	movs	r3, #0
 800701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007022:	e0fe      	b.n	8007222 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800702a:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	2200      	movs	r2, #0
 8007030:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	78db      	ldrb	r3, [r3, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	785b      	ldrb	r3, [r3, #1]
 800703e:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8007042:	2b09      	cmp	r3, #9
 8007044:	d104      	bne.n	8007050 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	2213      	movs	r2, #19
 800704a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800704e:	e007      	b.n	8007060 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2200      	movs	r2, #0
 8007064:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	2200      	movs	r2, #0
 800706a:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	2200      	movs	r2, #0
 8007070:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	2200      	movs	r2, #0
 8007076:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	2200      	movs	r2, #0
 800707c:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	2200      	movs	r2, #0
 8007082:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8007084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 800708c:	2b01      	cmp	r3, #1
 800708e:	d05c      	beq.n	800714a <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8007090:	e0a8      	b.n	80071e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	789b      	ldrb	r3, [r3, #2]
 8007096:	2b07      	cmp	r3, #7
 8007098:	d103      	bne.n	80070a2 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	8a7a      	ldrh	r2, [r7, #18]
 800709e:	82da      	strh	r2, [r3, #22]
 80070a0:	e00b      	b.n	80070ba <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	789b      	ldrb	r3, [r3, #2]
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d103      	bne.n	80070b2 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	8aba      	ldrh	r2, [r7, #20]
 80070ae:	82da      	strh	r2, [r3, #22]
 80070b0:	e003      	b.n	80070ba <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 80070ba:	6a3b      	ldr	r3, [r7, #32]
 80070bc:	8afa      	ldrh	r2, [r7, #22]
 80070be:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	895b      	ldrh	r3, [r3, #10]
 80070d4:	015b      	lsls	r3, r3, #5
 80070d6:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070de:	d302      	bcc.n	80070e6 <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80070e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070e4:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80070fc:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710e:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	da01      	bge.n	800711a <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8007116:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800711a:	12db      	asrs	r3, r3, #11
 800711c:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	b21a      	sxth	r2, r3
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8007148:	e04c      	b.n	80071e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007160:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	8bdb      	ldrh	r3, [r3, #30]
 800716e:	015b      	lsls	r3, r3, #5
 8007170:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007178:	d302      	bcc.n	8007180 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800717a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800717e:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	b29a      	uxth	r2, r3
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8007196:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	fb02 f303 	mul.w	r3, r2, r3
 80071a0:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a8:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	da01      	bge.n	80071b4 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 80071b0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80071b4:	12db      	asrs	r3, r3, #11
 80071b6:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	b21a      	sxth	r2, r3
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80071e2:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800720c:	6a3b      	ldr	r3, [r7, #32]
 800720e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	334c      	adds	r3, #76	; 0x4c
 8007216:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8007218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800721c:	3301      	adds	r3, #1
 800721e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007226:	2b01      	cmp	r3, #1
 8007228:	f67f aefc 	bls.w	8007024 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2b11      	cmp	r3, #17
 800723c:	bf8c      	ite	hi
 800723e:	2201      	movhi	r2, #1
 8007240:	2200      	movls	r2, #0
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	2a00      	cmp	r2, #0
 8007246:	d116      	bne.n	8007276 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8007248:	2201      	movs	r2, #1
 800724a:	409a      	lsls	r2, r3
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	b2da      	uxtb	r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8007274:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8007276:	bf00      	nop
 8007278:	372c      	adds	r7, #44	; 0x2c
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	0002200e 	.word	0x0002200e

08007288 <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3318      	adds	r3, #24
 800729a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	332c      	adds	r3, #44	; 0x2c
 80072a0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d109      	bne.n	80072be <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 80072bc:	e003      	b.n	80072c6 <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80072c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3318      	adds	r3, #24
 80072ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	78fa      	ldrb	r2, [r7, #3]
 80072f0:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80072f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b088      	sub	sp, #32
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	72fb      	strb	r3, [r7, #11]
 8007310:	4613      	mov	r3, r2
 8007312:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007314:	2300      	movs	r3, #0
 8007316:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3318      	adds	r3, #24
 800731c:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007324:	3308      	adds	r3, #8
 8007326:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d006      	beq.n	800733c <VL53L1_get_dmax_calibration_data+0x3a>
 800732e:	2b03      	cmp	r3, #3
 8007330:	dc3e      	bgt.n	80073b0 <VL53L1_get_dmax_calibration_data+0xae>
 8007332:	2b01      	cmp	r3, #1
 8007334:	d034      	beq.n	80073a0 <VL53L1_get_dmax_calibration_data+0x9e>
 8007336:	2b02      	cmp	r3, #2
 8007338:	d02a      	beq.n	8007390 <VL53L1_get_dmax_calibration_data+0x8e>
 800733a:	e039      	b.n	80073b0 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 800733c:	7aba      	ldrb	r2, [r7, #10]
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	4613      	mov	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8007356:	7aba      	ldrb	r2, [r7, #10]
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	4613      	mov	r3, r2
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	440b      	add	r3, r1
 8007364:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8007376:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800738c:	811a      	strh	r2, [r3, #8]
	break;
 800738e:	e012      	b.n	80073b6 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8007394:	220a      	movs	r2, #10
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f012 f931 	bl	8019600 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 800739e:	e00a      	b.n	80073b6 <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 80073a4:	220a      	movs	r2, #10
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f012 f929 	bl	8019600 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 80073ae:	e002      	b.n	80073b6 <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80073b0:	23fc      	movs	r3, #252	; 0xfc
 80073b2:	77fb      	strb	r3, [r7, #31]
	break;
 80073b4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80073b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	460b      	mov	r3, r1
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3318      	adds	r3, #24
 80073da:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80073e2:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80073ea:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80073ec:	897b      	ldrh	r3, [r7, #10]
 80073ee:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80073f2:	2bbe      	cmp	r3, #190	; 0xbe
 80073f4:	f200 86fc 	bhi.w	80081f0 <VL53L1_get_tuning_parm+0xe2c>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <VL53L1_get_tuning_parm+0x3c>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	080076fd 	.word	0x080076fd
 8007404:	0800770d 	.word	0x0800770d
 8007408:	0800771d 	.word	0x0800771d
 800740c:	0800772d 	.word	0x0800772d
 8007410:	0800773b 	.word	0x0800773b
 8007414:	08007749 	.word	0x08007749
 8007418:	08007757 	.word	0x08007757
 800741c:	08007765 	.word	0x08007765
 8007420:	08007773 	.word	0x08007773
 8007424:	08007781 	.word	0x08007781
 8007428:	0800778f 	.word	0x0800778f
 800742c:	0800779b 	.word	0x0800779b
 8007430:	080077a9 	.word	0x080077a9
 8007434:	080077b7 	.word	0x080077b7
 8007438:	080077c3 	.word	0x080077c3
 800743c:	080077d1 	.word	0x080077d1
 8007440:	080077df 	.word	0x080077df
 8007444:	080077ef 	.word	0x080077ef
 8007448:	080077ff 	.word	0x080077ff
 800744c:	0800780d 	.word	0x0800780d
 8007450:	0800781d 	.word	0x0800781d
 8007454:	0800782b 	.word	0x0800782b
 8007458:	0800783b 	.word	0x0800783b
 800745c:	0800784b 	.word	0x0800784b
 8007460:	0800785b 	.word	0x0800785b
 8007464:	0800786b 	.word	0x0800786b
 8007468:	0800787b 	.word	0x0800787b
 800746c:	0800788b 	.word	0x0800788b
 8007470:	0800789b 	.word	0x0800789b
 8007474:	080078ab 	.word	0x080078ab
 8007478:	080078bb 	.word	0x080078bb
 800747c:	080078c9 	.word	0x080078c9
 8007480:	080078d9 	.word	0x080078d9
 8007484:	080078e9 	.word	0x080078e9
 8007488:	080078f9 	.word	0x080078f9
 800748c:	08007909 	.word	0x08007909
 8007490:	08007919 	.word	0x08007919
 8007494:	08007929 	.word	0x08007929
 8007498:	08007939 	.word	0x08007939
 800749c:	08007949 	.word	0x08007949
 80074a0:	08007959 	.word	0x08007959
 80074a4:	08007969 	.word	0x08007969
 80074a8:	08007979 	.word	0x08007979
 80074ac:	08007989 	.word	0x08007989
 80074b0:	08007999 	.word	0x08007999
 80074b4:	080079a9 	.word	0x080079a9
 80074b8:	080079b9 	.word	0x080079b9
 80074bc:	080079c9 	.word	0x080079c9
 80074c0:	080079d9 	.word	0x080079d9
 80074c4:	080079e9 	.word	0x080079e9
 80074c8:	080079f9 	.word	0x080079f9
 80074cc:	08007a07 	.word	0x08007a07
 80074d0:	08007a15 	.word	0x08007a15
 80074d4:	08007a23 	.word	0x08007a23
 80074d8:	08007a31 	.word	0x08007a31
 80074dc:	08007a3f 	.word	0x08007a3f
 80074e0:	08007a4d 	.word	0x08007a4d
 80074e4:	08007a5b 	.word	0x08007a5b
 80074e8:	08007a69 	.word	0x08007a69
 80074ec:	08007a77 	.word	0x08007a77
 80074f0:	08007a85 	.word	0x08007a85
 80074f4:	08007a93 	.word	0x08007a93
 80074f8:	08007aa1 	.word	0x08007aa1
 80074fc:	08007aaf 	.word	0x08007aaf
 8007500:	08007abd 	.word	0x08007abd
 8007504:	08007acb 	.word	0x08007acb
 8007508:	08007ad9 	.word	0x08007ad9
 800750c:	08007ae7 	.word	0x08007ae7
 8007510:	08007af5 	.word	0x08007af5
 8007514:	08007b03 	.word	0x08007b03
 8007518:	08007b11 	.word	0x08007b11
 800751c:	08007b1f 	.word	0x08007b1f
 8007520:	08007b2d 	.word	0x08007b2d
 8007524:	08007b3b 	.word	0x08007b3b
 8007528:	08007b47 	.word	0x08007b47
 800752c:	08007b55 	.word	0x08007b55
 8007530:	08007b63 	.word	0x08007b63
 8007534:	08007b6f 	.word	0x08007b6f
 8007538:	08007b7b 	.word	0x08007b7b
 800753c:	08007b87 	.word	0x08007b87
 8007540:	08007b93 	.word	0x08007b93
 8007544:	08007b9f 	.word	0x08007b9f
 8007548:	08007bab 	.word	0x08007bab
 800754c:	08007bb9 	.word	0x08007bb9
 8007550:	08007bc7 	.word	0x08007bc7
 8007554:	08007bd5 	.word	0x08007bd5
 8007558:	08007be3 	.word	0x08007be3
 800755c:	08007bf1 	.word	0x08007bf1
 8007560:	08007bff 	.word	0x08007bff
 8007564:	08007c0d 	.word	0x08007c0d
 8007568:	08007c1b 	.word	0x08007c1b
 800756c:	08007c29 	.word	0x08007c29
 8007570:	08007c37 	.word	0x08007c37
 8007574:	08007c45 	.word	0x08007c45
 8007578:	08007c53 	.word	0x08007c53
 800757c:	08007c61 	.word	0x08007c61
 8007580:	08007c6f 	.word	0x08007c6f
 8007584:	08007c7d 	.word	0x08007c7d
 8007588:	08007c8b 	.word	0x08007c8b
 800758c:	08007c99 	.word	0x08007c99
 8007590:	08007ca7 	.word	0x08007ca7
 8007594:	08007cb5 	.word	0x08007cb5
 8007598:	08007cc3 	.word	0x08007cc3
 800759c:	08007cd1 	.word	0x08007cd1
 80075a0:	08007cdf 	.word	0x08007cdf
 80075a4:	08007ced 	.word	0x08007ced
 80075a8:	08007cfb 	.word	0x08007cfb
 80075ac:	08007d09 	.word	0x08007d09
 80075b0:	08007d17 	.word	0x08007d17
 80075b4:	08007d25 	.word	0x08007d25
 80075b8:	08007d33 	.word	0x08007d33
 80075bc:	08007d41 	.word	0x08007d41
 80075c0:	08007d4f 	.word	0x08007d4f
 80075c4:	08007d5d 	.word	0x08007d5d
 80075c8:	08007d6b 	.word	0x08007d6b
 80075cc:	08007d79 	.word	0x08007d79
 80075d0:	08007d87 	.word	0x08007d87
 80075d4:	08007d95 	.word	0x08007d95
 80075d8:	08007da3 	.word	0x08007da3
 80075dc:	08007db5 	.word	0x08007db5
 80075e0:	08007dc7 	.word	0x08007dc7
 80075e4:	08007dd9 	.word	0x08007dd9
 80075e8:	08007deb 	.word	0x08007deb
 80075ec:	08007dfd 	.word	0x08007dfd
 80075f0:	08007e0f 	.word	0x08007e0f
 80075f4:	08007e21 	.word	0x08007e21
 80075f8:	08007e33 	.word	0x08007e33
 80075fc:	08007e45 	.word	0x08007e45
 8007600:	08007e57 	.word	0x08007e57
 8007604:	08007e69 	.word	0x08007e69
 8007608:	08007e7b 	.word	0x08007e7b
 800760c:	08007e8d 	.word	0x08007e8d
 8007610:	08007e9f 	.word	0x08007e9f
 8007614:	08007eb1 	.word	0x08007eb1
 8007618:	08007ec3 	.word	0x08007ec3
 800761c:	08007ed5 	.word	0x08007ed5
 8007620:	08007ee7 	.word	0x08007ee7
 8007624:	08007ef9 	.word	0x08007ef9
 8007628:	08007f07 	.word	0x08007f07
 800762c:	08007f15 	.word	0x08007f15
 8007630:	08007f23 	.word	0x08007f23
 8007634:	08007f31 	.word	0x08007f31
 8007638:	08007f3f 	.word	0x08007f3f
 800763c:	08007f4d 	.word	0x08007f4d
 8007640:	08007f5b 	.word	0x08007f5b
 8007644:	08007f6d 	.word	0x08007f6d
 8007648:	08007f7b 	.word	0x08007f7b
 800764c:	08007f89 	.word	0x08007f89
 8007650:	08007f97 	.word	0x08007f97
 8007654:	08007fa5 	.word	0x08007fa5
 8007658:	08007fb3 	.word	0x08007fb3
 800765c:	08007fc1 	.word	0x08007fc1
 8007660:	08007fcf 	.word	0x08007fcf
 8007664:	08007fdd 	.word	0x08007fdd
 8007668:	08007feb 	.word	0x08007feb
 800766c:	08007ff9 	.word	0x08007ff9
 8007670:	08008007 	.word	0x08008007
 8007674:	08008015 	.word	0x08008015
 8007678:	08008023 	.word	0x08008023
 800767c:	08008031 	.word	0x08008031
 8007680:	0800803f 	.word	0x0800803f
 8007684:	0800804d 	.word	0x0800804d
 8007688:	0800805b 	.word	0x0800805b
 800768c:	08008069 	.word	0x08008069
 8007690:	08008077 	.word	0x08008077
 8007694:	08008085 	.word	0x08008085
 8007698:	08008093 	.word	0x08008093
 800769c:	080080a1 	.word	0x080080a1
 80076a0:	080080af 	.word	0x080080af
 80076a4:	080080bd 	.word	0x080080bd
 80076a8:	080080cb 	.word	0x080080cb
 80076ac:	080080d9 	.word	0x080080d9
 80076b0:	080080e7 	.word	0x080080e7
 80076b4:	080080f5 	.word	0x080080f5
 80076b8:	08008103 	.word	0x08008103
 80076bc:	08008111 	.word	0x08008111
 80076c0:	0800811f 	.word	0x0800811f
 80076c4:	0800812d 	.word	0x0800812d
 80076c8:	0800813b 	.word	0x0800813b
 80076cc:	08008149 	.word	0x08008149
 80076d0:	08008157 	.word	0x08008157
 80076d4:	08008165 	.word	0x08008165
 80076d8:	08008173 	.word	0x08008173
 80076dc:	08008181 	.word	0x08008181
 80076e0:	0800818f 	.word	0x0800818f
 80076e4:	0800819d 	.word	0x0800819d
 80076e8:	080081ab 	.word	0x080081ab
 80076ec:	080081b9 	.word	0x080081b9
 80076f0:	080081c7 	.word	0x080081c7
 80076f4:	080081d5 	.word	0x080081d5
 80076f8:	080081e3 	.word	0x080081e3

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007702:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]
	break;
 8007708:	f000 bd79 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8007712:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]
	break;
 8007718:	f000 bd71 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007722:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
	break;
 8007728:	f000 bd69 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
	break;
 8007736:	f000 bd62 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
	break;
 8007744:	f000 bd5b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	789b      	ldrb	r3, [r3, #2]
 800774c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	601a      	str	r2, [r3, #0]
	break;
 8007752:	f000 bd54 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]
	break;
 8007760:	f000 bd4d 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	791b      	ldrb	r3, [r3, #4]
 8007768:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
	break;
 800776e:	f000 bd46 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	795b      	ldrb	r3, [r3, #5]
 8007776:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
	break;
 800777c:	f000 bd3f 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	799b      	ldrb	r3, [r3, #6]
 8007784:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	601a      	str	r2, [r3, #0]
	break;
 800778a:	f000 bd38 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
	break;
 8007796:	f000 bd32 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	891b      	ldrh	r3, [r3, #8]
 800779e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	601a      	str	r2, [r3, #0]
	break;
 80077a4:	f000 bd2b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	8a1b      	ldrh	r3, [r3, #16]
 80077ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
	break;
 80077b2:	f000 bd24 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
	break;
 80077be:	f000 bd1e 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	7e1b      	ldrb	r3, [r3, #24]
 80077c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
	break;
 80077cc:	f000 bd17 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	8b5b      	ldrh	r3, [r3, #26]
 80077d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
	break;
 80077da:	f000 bd10 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 80077e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
	break;
 80077ea:	f000 bd08 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80077f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	601a      	str	r2, [r3, #0]
	break;
 80077fa:	f000 bd00 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	601a      	str	r2, [r3, #0]
	break;
 8007808:	f000 bcf9 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007812:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
	break;
 8007818:	f000 bcf1 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007820:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
	break;
 8007826:	f000 bcea 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007830:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	break;
 8007836:	f000 bce2 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007840:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	601a      	str	r2, [r3, #0]
	break;
 8007846:	f000 bcda 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007850:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
	break;
 8007856:	f000 bcd2 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007860:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
	break;
 8007866:	f000 bcca 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007870:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
	break;
 8007876:	f000 bcc2 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	break;
 8007886:	f000 bcba 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
	break;
 8007896:	f000 bcb2 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 80078a0:	461a      	mov	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
	break;
 80078a6:	f000 bcaa 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80078b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
	break;
 80078b6:	f000 bca2 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	601a      	str	r2, [r3, #0]
	break;
 80078c4:	f000 bc9b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
	break;
 80078d4:	f000 bc93 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
	break;
 80078e4:	f000 bc8b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 80078ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
	break;
 80078f4:	f000 bc83 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 80078fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	601a      	str	r2, [r3, #0]
	break;
 8007904:	f000 bc7b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800790e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
	break;
 8007914:	f000 bc73 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800791e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	601a      	str	r2, [r3, #0]
	break;
 8007924:	f000 bc6b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800792e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
	break;
 8007934:	f000 bc63 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 800793e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
	break;
 8007944:	f000 bc5b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800794e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
	break;
 8007954:	f000 bc53 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800795e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
	break;
 8007964:	f000 bc4b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800796e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
	break;
 8007974:	f000 bc43 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	break;
 8007984:	f000 bc3b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800798e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
	break;
 8007994:	f000 bc33 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	601a      	str	r2, [r3, #0]
	break;
 80079a4:	f000 bc2b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80079ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
	break;
 80079b4:	f000 bc23 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80079be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
	break;
 80079c4:	f000 bc1b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80079ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	601a      	str	r2, [r3, #0]
	break;
 80079d4:	f000 bc13 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80079de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	break;
 80079e4:	f000 bc0b 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 80079ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	break;
 80079f4:	f000 bc03 	b.w	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80079fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	break;
 8007a04:	e3fb      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007a0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	601a      	str	r2, [r3, #0]
	break;
 8007a12:	e3f4      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 8007a1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
	break;
 8007a20:	e3ed      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8007a28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
	break;
 8007a2e:	e3e6      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8007a36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
	break;
 8007a3c:	e3df      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007a44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
	break;
 8007a4a:	e3d8      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007a52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
	break;
 8007a58:	e3d1      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007a60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	601a      	str	r2, [r3, #0]
	break;
 8007a66:	e3ca      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8007a6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
	break;
 8007a74:	e3c3      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8007a7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
	break;
 8007a82:	e3bc      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8007a8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
	break;
 8007a90:	e3b5      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 8007a98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
	break;
 8007a9e:	e3ae      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 8007aa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	break;
 8007aac:	e3a7      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8007ab4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	break;
 8007aba:	e3a0      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007ac2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
	break;
 8007ac8:	e399      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007ad0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	break;
 8007ad6:	e392      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007ade:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	601a      	str	r2, [r3, #0]
	break;
 8007ae4:	e38b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007aec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
	break;
 8007af2:	e384      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8007afa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
	break;
 8007b00:	e37d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8007b08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
	break;
 8007b0e:	e376      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8007b16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	601a      	str	r2, [r3, #0]
	break;
 8007b1c:	e36f      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007b24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	601a      	str	r2, [r3, #0]
	break;
 8007b2a:	e368      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007b32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
	break;
 8007b38:	e361      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	7c1b      	ldrb	r3, [r3, #16]
 8007b3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	break;
 8007b44:	e35b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007b4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
	break;
 8007b52:	e354      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007b5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
	break;
 8007b60:	e34d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	601a      	str	r2, [r3, #0]
	break;
 8007b6c:	e347      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]
	break;
 8007b78:	e341      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	8adb      	ldrh	r3, [r3, #22]
 8007b7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
	break;
 8007b84:	e33b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	8b1b      	ldrh	r3, [r3, #24]
 8007b8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	601a      	str	r2, [r3, #0]
	break;
 8007b90:	e335      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
	break;
 8007b9c:	e32f      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
	break;
 8007ba8:	e329      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 8007bb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	break;
 8007bb6:	e322      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007bbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	601a      	str	r2, [r3, #0]
	break;
 8007bc4:	e31b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007bcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
	break;
 8007bd2:	e314      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8007bda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]
	break;
 8007be0:	e30d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8007be8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
	break;
 8007bee:	e306      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 8007bf6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	601a      	str	r2, [r3, #0]
	break;
 8007bfc:	e2ff      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007c04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
	break;
 8007c0a:	e2f8      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007c12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
	break;
 8007c18:	e2f1      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007c20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	601a      	str	r2, [r3, #0]
	break;
 8007c26:	e2ea      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007c2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	break;
 8007c34:	e2e3      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007c3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
	break;
 8007c42:	e2dc      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8007c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
	break;
 8007c50:	e2d5      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 8007c58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	break;
 8007c5e:	e2ce      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8007c66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
	break;
 8007c6c:	e2c7      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 8007c74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
	break;
 8007c7a:	e2c0      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 8007c82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	601a      	str	r2, [r3, #0]
	break;
 8007c88:	e2b9      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 8007c90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	601a      	str	r2, [r3, #0]
	break;
 8007c96:	e2b2      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8007c9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
	break;
 8007ca4:	e2ab      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 8007cac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	601a      	str	r2, [r3, #0]
	break;
 8007cb2:	e2a4      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8007cba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
	break;
 8007cc0:	e29d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8007cc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	601a      	str	r2, [r3, #0]
	break;
 8007cce:	e296      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007cd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	601a      	str	r2, [r3, #0]
	break;
 8007cdc:	e28f      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007ce4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	601a      	str	r2, [r3, #0]
	break;
 8007cea:	e288      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007cf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	601a      	str	r2, [r3, #0]
	break;
 8007cf8:	e281      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007d00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	601a      	str	r2, [r3, #0]
	break;
 8007d06:	e27a      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007d0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]
	break;
 8007d14:	e273      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007d1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
	break;
 8007d22:	e26c      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8007d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	601a      	str	r2, [r3, #0]
	break;
 8007d30:	e265      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8007d38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
	break;
 8007d3e:	e25e      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8007d46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
	break;
 8007d4c:	e257      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007d54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	601a      	str	r2, [r3, #0]
	break;
 8007d5a:	e250      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8007d62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	601a      	str	r2, [r3, #0]
	break;
 8007d68:	e249      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007d70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	601a      	str	r2, [r3, #0]
	break;
 8007d76:	e242      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8007d7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]
	break;
 8007d84:	e23b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007d8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
	break;
 8007d92:	e234      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8007d9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	601a      	str	r2, [r3, #0]
	break;
 8007da0:	e22d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da8:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 8007dac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
	break;
 8007db2:	e224      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	601a      	str	r2, [r3, #0]
	break;
 8007dc4:	e21b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dcc:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007dd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
	break;
 8007dd6:	e212      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dde:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
	break;
 8007de8:	e209      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df0:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007df4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
	break;
 8007dfa:	e200      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e02:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8007e06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
	break;
 8007e0c:	e1f7      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e14:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 8007e18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	601a      	str	r2, [r3, #0]
	break;
 8007e1e:	e1ee      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e26:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8007e2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	601a      	str	r2, [r3, #0]
	break;
 8007e30:	e1e5      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e38:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007e3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	601a      	str	r2, [r3, #0]
	break;
 8007e42:	e1dc      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4a:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007e4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	601a      	str	r2, [r3, #0]
	break;
 8007e54:	e1d3      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5c:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 8007e60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
	break;
 8007e66:	e1ca      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8007e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]
	break;
 8007e78:	e1c1      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e80:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8007e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
	break;
 8007e8a:	e1b8      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e92:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	601a      	str	r2, [r3, #0]
	break;
 8007e9c:	e1af      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007ea8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
	break;
 8007eae:	e1a6      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007eba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	601a      	str	r2, [r3, #0]
	break;
 8007ec0:	e19d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007ecc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	601a      	str	r2, [r3, #0]
	break;
 8007ed2:	e194      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eda:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8007ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	601a      	str	r2, [r3, #0]
	break;
 8007ee4:	e18b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eec:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8007ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	break;
 8007ef6:	e182      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	601a      	str	r2, [r3, #0]
	break;
 8007f04:	e17b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
	break;
 8007f12:	e174      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	601a      	str	r2, [r3, #0]
	break;
 8007f20:	e16d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007f28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
	break;
 8007f2e:	e166      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	601a      	str	r2, [r3, #0]
	break;
 8007f3c:	e15f      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
	break;
 8007f4a:	e158      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007f52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	601a      	str	r2, [r3, #0]
	break;
 8007f58:	e151      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007f64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
	break;
 8007f6a:	e148      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]
	break;
 8007f78:	e141      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
	break;
 8007f86:	e13a      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007f8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]
	break;
 8007f94:	e133      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
	break;
 8007fa2:	e12c      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8007faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	601a      	str	r2, [r3, #0]
	break;
 8007fb0:	e125      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8007fb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	601a      	str	r2, [r3, #0]
	break;
 8007fbe:	e11e      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8007fc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
	break;
 8007fcc:	e117      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8007fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	601a      	str	r2, [r3, #0]
	break;
 8007fda:	e110      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8007fe2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]
	break;
 8007fe8:	e109      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8007ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	break;
 8007ff6:	e102      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007ffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	break;
 8008004:	e0fb      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 800800c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
	break;
 8008012:	e0f4      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 800801a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	601a      	str	r2, [r3, #0]
	break;
 8008020:	e0ed      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8008028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	601a      	str	r2, [r3, #0]
	break;
 800802e:	e0e6      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8008036:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	601a      	str	r2, [r3, #0]
	break;
 800803c:	e0df      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8008044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	601a      	str	r2, [r3, #0]
	break;
 800804a:	e0d8      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8008052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	601a      	str	r2, [r3, #0]
	break;
 8008058:	e0d1      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8008060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	break;
 8008066:	e0ca      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 800806e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	break;
 8008074:	e0c3      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 800807c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
	break;
 8008082:	e0bc      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800808a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
	break;
 8008090:	e0b5      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8008098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
	break;
 800809e:	e0ae      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 80080a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
	break;
 80080ac:	e0a7      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 80080b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
	break;
 80080ba:	e0a0      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 80080c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]
	break;
 80080c8:	e099      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 80080d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	break;
 80080d6:	e092      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80080de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
	break;
 80080e4:	e08b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 80080ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
	break;
 80080f2:	e084      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 80080fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
	break;
 8008100:	e07d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8008108:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
	break;
 800810e:	e076      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8008116:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	601a      	str	r2, [r3, #0]
	break;
 800811c:	e06f      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8008124:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	601a      	str	r2, [r3, #0]
	break;
 800812a:	e068      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8008132:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
	break;
 8008138:	e061      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8008140:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
	break;
 8008146:	e05a      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 800814e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]
	break;
 8008154:	e053      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 800815c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
	break;
 8008162:	e04c      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 800816a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]
	break;
 8008170:	e045      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8008178:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
	break;
 800817e:	e03e      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8008186:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]
	break;
 800818c:	e037      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8008194:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
	break;
 800819a:	e030      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 80081a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]
	break;
 80081a8:	e029      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 80081b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	break;
 80081b6:	e022      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 80081be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]
	break;
 80081c4:	e01b      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 80081cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
	break;
 80081d2:	e014      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 80081da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	601a      	str	r2, [r3, #0]
	break;
 80081e0:	e00d      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
	break;
 80081ee:	e006      	b.n	80081fe <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80081f6:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80081f8:	23fc      	movs	r3, #252	; 0xfc
 80081fa:	77fb      	strb	r3, [r7, #31]
	break;
 80081fc:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80081fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3724      	adds	r7, #36	; 0x24
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop

08008210 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3318      	adds	r3, #24
 8008220:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008228:	2201      	movs	r2, #1
 800822a:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800822e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 800823e:	b480      	push	{r7}
 8008240:	b085      	sub	sp, #20
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3318      	adds	r3, #24
 800824e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008256:	2200      	movs	r2, #0
 8008258:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 800825c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3318      	adds	r3, #24
 800827c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008284:	2201      	movs	r2, #1
 8008286:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 800828a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3318      	adds	r3, #24
 80082aa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 80082b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3318      	adds	r3, #24
 80082d8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 80082e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b085      	sub	sp, #20
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3318      	adds	r3, #24
 8008306:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830e:	2200      	movs	r2, #0
 8008310:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8008314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2208      	movs	r2, #8
 8008334:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	220b      	movs	r2, #11
 800833a:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008342:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800834a:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008352:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800835a:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800835c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008374:	2300      	movs	r3, #0
 8008376:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2212      	movs	r2, #18
 8008382:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	220f      	movs	r2, #15
 8008388:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8008396:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220c      	movs	r2, #12
 800839c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800839e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	895b      	ldrh	r3, [r3, #10]
 80083c0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	895b      	ldrh	r3, [r3, #10]
 80083de:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083fe:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2200      	movs	r2, #0
 8008404:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2240      	movs	r2, #64	; 0x40
 800840a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10d      	bne.n	8008430 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d108      	bne.n	8008430 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	741a      	strb	r2, [r3, #16]
 800842e:	e002      	b.n	8008436 <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8008436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d114      	bne.n	8008468 <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8008442:	2b01      	cmp	r3, #1
 8008444:	d110      	bne.n	8008468 <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	7d9b      	ldrb	r3, [r3, #22]
 800845a:	f003 f879 	bl	800b550 <VL53L1_calc_range_ignore_threshold>
 800845e:	4603      	mov	r3, r0
 8008460:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	831a      	strh	r2, [r3, #24]
 8008466:	e002      	b.n	800846e <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008474:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2232      	movs	r2, #50	; 0x32
 800847a:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008482:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	228c      	movs	r2, #140	; 0x8c
 8008488:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800848a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80084a8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80084b0:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2207      	movs	r2, #7
 80084b6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f643 2298 	movw	r2, #15000	; 0x3a98
 80084be:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80084c6:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80084ce:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2246      	movs	r2, #70	; 0x46
 80084d4:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80084dc:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	228c      	movs	r2, #140	; 0x8c
 80084e2:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80084e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008506:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800850e:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008516:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800851e:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2208      	movs	r2, #8
 8008524:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2228      	movs	r2, #40	; 0x28
 800852a:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2209      	movs	r2, #9
 8008530:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008554:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f643 2298 	movw	r2, #15000	; 0x3a98
 800855c:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008564:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800856c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2210      	movs	r2, #16
 8008572:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2208      	movs	r2, #8
 8008578:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800857a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	4603      	mov	r3, r0
 8008592:	6039      	str	r1, [r7, #0]
 8008594:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2204      	movs	r2, #4
 800859e:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2201      	movs	r2, #1
 80085a4:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2201      	movs	r2, #1
 80085aa:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2202      	movs	r2, #2
 80085b0:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2250      	movs	r2, #80	; 0x50
 80085bc:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2270      	movs	r2, #112	; 0x70
 80085c2:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f241 023d 	movw	r2, #4157	; 0x103d
 80085ca:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2210      	movs	r2, #16
 80085d0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2232      	movs	r2, #50	; 0x32
 80085d6:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2264      	movs	r2, #100	; 0x64
 80085dc:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2201      	movs	r2, #1
 80085e2:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	22a0      	movs	r2, #160	; 0xa0
 80085e8:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80085f6:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2208      	movs	r2, #8
 80085fc:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2288      	movs	r2, #136	; 0x88
 8008604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2208      	movs	r2, #8
 800860c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800861e:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	22fa      	movs	r2, #250	; 0xfa
 8008624:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	79fa      	ldrb	r2, [r7, #7]
 800862a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008634:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2232      	movs	r2, #50	; 0x32
 800863a:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008642:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	228c      	movs	r2, #140	; 0x8c
 8008648:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2250      	movs	r2, #80	; 0x50
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2232      	movs	r2, #50	; 0x32
 8008656:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8008658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	220e      	movs	r2, #14
 800867e:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f642 7294 	movw	r2, #12180	; 0x2f94
 8008686:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	220e      	movs	r2, #14
 800868c:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	220a      	movs	r2, #10
 8008692:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2206      	movs	r2, #6
 8008698:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	220e      	movs	r2, #14
 800869e:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	220a      	movs	r2, #10
 80086a4:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2206      	movs	r2, #6
 80086aa:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2209      	movs	r2, #9
 80086b0:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2205      	movs	r2, #5
 80086b6:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2203      	movs	r2, #3
 80086bc:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2206      	movs	r2, #6
 80086c2:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2206      	movs	r2, #6
 80086c8:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2206      	movs	r2, #6
 80086ce:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2221      	movs	r2, #33	; 0x21
 80086da:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	223c      	movs	r2, #60	; 0x3c
 80086ec:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	223c      	movs	r2, #60	; 0x3c
 80086f2:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	223c      	movs	r2, #60	; 0x3c
 80086f8:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2280      	movs	r2, #128	; 0x80
 80086fe:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2280      	movs	r2, #128	; 0x80
 8008704:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2280      	movs	r2, #128	; 0x80
 800870a:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2208      	movs	r2, #8
 8008710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2210      	movs	r2, #16
 8008718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800874a:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008752:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800875a:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008762:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008772:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f242 3228 	movw	r2, #9000	; 0x2328
 800877a:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f241 7270 	movw	r2, #6000	; 0x1770
 8008782:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f643 2298 	movw	r2, #15000	; 0x3a98
 800878a:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f242 3228 	movw	r2, #9000	; 0x2328
 8008792:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f241 7270 	movw	r2, #6000	; 0x1770
 800879a:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087a2:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087aa:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087b2:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087ba:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087c2:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f24f 6218 	movw	r2, #63000	; 0xf618
 80087ca:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80087d2:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80087da:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80087e2:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80087f0:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80087f8:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2206      	movs	r2, #6
 8008818:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800882a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f640 22be 	movw	r2, #2750	; 0xabe
 8008834:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	22fa      	movs	r2, #250	; 0xfa
 800883c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008846:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008850:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800885a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008864:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800886e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008878:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	22c8      	movs	r2, #200	; 0xc8
 8008880:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	22fa      	movs	r2, #250	; 0xfa
 8008888:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008892:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f640 1206 	movw	r2, #2310	; 0x906
 800889c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f640 1206 	movw	r2, #2310	; 0x906
 80088ae:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f640 421c 	movw	r2, #3100	; 0xc1c
 80088b8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80088c2:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80088cc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80088d6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f641 022e 	movw	r2, #6190	; 0x182e
 80088e0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f641 3230 	movw	r2, #6960	; 0x1b30
 80088fa:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f641 022e 	movw	r2, #6190	; 0x182e
 8008904:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	22fa      	movs	r2, #250	; 0xfa
 800890c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008916:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008920:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f241 1294 	movw	r2, #4500	; 0x1194
 800892a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008934:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	22c8      	movs	r2, #200	; 0xc8
 800893c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f640 3222 	movw	r2, #2850	; 0xb22
 8008946:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008950:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f640 721e 	movw	r2, #3870	; 0xf1e
 800896a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f241 222a 	movw	r2, #4650	; 0x122a
 8008974:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f640 720a 	movw	r2, #3850	; 0xf0a
 800897e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f641 6214 	movw	r2, #7700	; 0x1e14
 80089a0:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80089aa:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f641 1288 	movw	r2, #6536	; 0x1988
 80089c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 80089c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80089ea:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2238      	movs	r2, #56	; 0x38
 80089f0:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2270      	movs	r2, #112	; 0x70
 80089fc:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2210      	movs	r2, #16
 8008a02:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2264      	movs	r2, #100	; 0x64
 8008a08:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a10:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	220f      	movs	r2, #15
 8008a16:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2234      	movs	r2, #52	; 0x34
 8008a1c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	22c8      	movs	r2, #200	; 0xc8
 8008a22:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008a2a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a32:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b087      	sub	sp, #28
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008a5c:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2211      	movs	r2, #17
 8008a9e:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2208      	movs	r2, #8
 8008ab6:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	22ff      	movs	r2, #255	; 0xff
 8008af8:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8008afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afc:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	220b      	movs	r2, #11
 8008b32:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	220d      	movs	r2, #13
 8008b46:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8008b6e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2238      	movs	r2, #56	; 0x38
 8008b7a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	22ff      	movs	r2, #255	; 0xff
 8008b80:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	221a      	movs	r2, #26
 8008b92:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	22cc      	movs	r2, #204	; 0xcc
 8008baa:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	220b      	movs	r2, #11
 8008bb0:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	22f5      	movs	r2, #245	; 0xf5
 8008bbc:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2209      	movs	r2, #9
 8008bc2:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2278      	movs	r2, #120	; 0x78
 8008bde:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	2200      	movs	r2, #0
 8008bea:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2207      	movs	r2, #7
 8008bf0:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	2221      	movs	r2, #33	; 0x21
 8008bf6:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	2243      	movs	r2, #67	; 0x43
 8008bfc:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2210      	movs	r2, #16
 8008c02:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2232      	movs	r2, #50	; 0x32
 8008c08:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2254      	movs	r2, #84	; 0x54
 8008c0e:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2207      	movs	r2, #7
 8008c14:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2221      	movs	r2, #33	; 0x21
 8008c1a:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2243      	movs	r2, #67	; 0x43
 8008c20:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2210      	movs	r2, #16
 8008c26:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2243      	movs	r2, #67	; 0x43
 8008c32:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2205      	movs	r2, #5
 8008c38:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2207      	movs	r2, #7
 8008c44:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2221      	movs	r2, #33	; 0x21
 8008c4a:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2243      	movs	r2, #67	; 0x43
 8008c50:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2210      	movs	r2, #16
 8008c56:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2232      	movs	r2, #50	; 0x32
 8008c5c:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2254      	movs	r2, #84	; 0x54
 8008c62:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c6a:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c72:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2200      	movs	r2, #0
 8008c84:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	220f      	movs	r2, #15
 8008c8a:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	220f      	movs	r2, #15
 8008c90:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	2208      	movs	r2, #8
 8008c96:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	2200      	movs	r2, #0
 8008cae:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	220b      	movs	r2, #11
 8008cc4:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	2209      	movs	r2, #9
 8008cca:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	22c7      	movs	r2, #199	; 0xc7
 8008cfa:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	22ff      	movs	r2, #255	; 0xff
 8008d00:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	22db      	movs	r2, #219	; 0xdb
 8008d06:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	2200      	movs	r2, #0
 8008d12:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	2201      	movs	r2, #1
 8008d18:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	2221      	movs	r2, #33	; 0x21
 8008d24:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8008d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b08a      	sub	sp, #40	; 0x28
 8008d3a:	af04      	add	r7, sp, #16
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	9303      	str	r3, [sp, #12]
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68b9      	ldr	r1, [r7, #8]
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff fe70 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8008d64:	4603      	mov	r3, r0
 8008d66:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d121      	bne.n	8008db4 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2207      	movs	r2, #7
 8008d74:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2205      	movs	r2, #5
 8008d7a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2208      	movs	r2, #8
 8008d90:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2238      	movs	r2, #56	; 0x38
 8008d96:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	2207      	movs	r2, #7
 8008d9c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	2205      	movs	r2, #5
 8008da2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8008db0:	6a3b      	ldr	r3, [r7, #32]
 8008db2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	; 0x28
 8008dc4:	af04      	add	r7, sp, #16
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	9302      	str	r3, [sp, #8]
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fe2b 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d121      	bne.n	8008e3e <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	220f      	movs	r2, #15
 8008dfe:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	220d      	movs	r2, #13
 8008e04:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2208      	movs	r2, #8
 8008e1a:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	22b8      	movs	r2, #184	; 0xb8
 8008e20:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	220f      	movs	r2, #15
 8008e26:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	220d      	movs	r2, #13
 8008e2c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b08a      	sub	sp, #40	; 0x28
 8008e4e:	af04      	add	r7, sp, #16
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	9302      	str	r3, [sp, #8]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fde6 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	223b      	movs	r2, #59	; 0x3b
 8008e8e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af04      	add	r7, sp, #16
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68b9      	ldr	r1, [r7, #8]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff fdbd 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d105      	bne.n	8008ee2 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	225b      	movs	r2, #91	; 0x5b
 8008ee0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b08a      	sub	sp, #40	; 0x28
 8008ef2:	af04      	add	r7, sp, #16
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	9302      	str	r3, [sp, #8]
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fd94 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11a      	bne.n	8008f5e <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2200      	movs	r2, #0
 8008f32:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	22b1      	movs	r2, #177	; 0xb1
 8008f38:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	22d4      	movs	r2, #212	; 0xd4
 8008f44:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f4c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	2240      	movs	r2, #64	; 0x40
 8008f5c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b08a      	sub	sp, #40	; 0x28
 8008f6e:	af04      	add	r7, sp, #16
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	68b9      	ldr	r1, [r7, #8]
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7ff fecf 	bl	8008d36 <VL53L1_preset_mode_standard_ranging_short_range>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d11a      	bne.n	8008fda <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2201      	movs	r2, #1
 8008fae:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2284      	movs	r2, #132	; 0x84
 8008fb4:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	22b1      	movs	r2, #177	; 0xb1
 8008fc0:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008fc8:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	2240      	movs	r2, #64	; 0x40
 8008fd8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08a      	sub	sp, #40	; 0x28
 8008fea:	af04      	add	r7, sp, #16
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff fed6 	bl	8008dc0 <VL53L1_preset_mode_standard_ranging_long_range>
 8009014:	4603      	mov	r3, r0
 8009016:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d11a      	bne.n	8009056 <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	2200      	movs	r2, #0
 8009024:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2297      	movs	r2, #151	; 0x97
 8009030:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2200      	movs	r2, #0
 8009036:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	22b1      	movs	r2, #177	; 0xb1
 800903c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009044:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	2240      	movs	r2, #64	; 0x40
 8009054:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b08a      	sub	sp, #40	; 0x28
 8009066:	af04      	add	r7, sp, #16
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009070:	2300      	movs	r3, #0
 8009072:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff ff2f 	bl	8008eee <VL53L1_preset_mode_timed_ranging>
 8009090:	4603      	mov	r3, r0
 8009092:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d106      	bne.n	80090aa <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 800909c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909e:	6a39      	ldr	r1, [r7, #32]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f005 f978 	bl	800e396 <VL53L1_config_low_power_auto_mode>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80090aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b08a      	sub	sp, #40	; 0x28
 80090ba:	af04      	add	r7, sp, #16
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	9302      	str	r3, [sp, #8]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff ff43 	bl	8008f6a <VL53L1_preset_mode_timed_ranging_short_range>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 80090f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f2:	6a39      	ldr	r1, [r7, #32]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f005 f94e 	bl	800e396 <VL53L1_config_low_power_auto_mode>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80090fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b08a      	sub	sp, #40	; 0x28
 800910e:	af04      	add	r7, sp, #16
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f7ff ff57 	bl	8008fe6 <VL53L1_preset_mode_timed_ranging_long_range>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800913c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8009144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009146:	6a39      	ldr	r1, [r7, #32]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f005 f924 	bl	800e396 <VL53L1_config_low_power_auto_mode>
 800914e:	4603      	mov	r3, r0
 8009150:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b08a      	sub	sp, #40	; 0x28
 8009162:	af04      	add	r7, sp, #16
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800916c:	2300      	movs	r3, #0
 800916e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	9303      	str	r3, [sp, #12]
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	9301      	str	r3, [sp, #4]
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff fc5c 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d116      	bne.n	80091c6 <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	2200      	movs	r2, #0
 800919c:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2200      	movs	r2, #0
 80091a2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	22b1      	movs	r2, #177	; 0xb1
 80091a8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2200      	movs	r2, #0
 80091ae:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	22d4      	movs	r2, #212	; 0xd4
 80091b4:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	2210      	movs	r2, #16
 80091c4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80091c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b090      	sub	sp, #64	; 0x40
 80091d6:	af0a      	add	r7, sp, #40	; 0x28
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	6879      	ldr	r1, [r7, #4]
 80091fa:	68b8      	ldr	r0, [r7, #8]
 80091fc:	f7ff fc22 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 8009200:	4603      	mov	r3, r0
 8009202:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d171      	bne.n	80092f0 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009212:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	9308      	str	r3, [sp, #32]
 8009218:	2305      	movs	r3, #5
 800921a:	9307      	str	r3, [sp, #28]
 800921c:	2304      	movs	r3, #4
 800921e:	9306      	str	r3, [sp, #24]
 8009220:	2303      	movs	r3, #3
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	2302      	movs	r3, #2
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	2301      	movs	r3, #1
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	2300      	movs	r3, #0
 800922e:	9302      	str	r3, [sp, #8]
 8009230:	2304      	movs	r3, #4
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	2303      	movs	r3, #3
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2302      	movs	r3, #2
 800923a:	2201      	movs	r2, #1
 800923c:	2100      	movs	r1, #0
 800923e:	2007      	movs	r0, #7
 8009240:	f001 fe1b 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	3302      	adds	r3, #2
 8009248:	9308      	str	r3, [sp, #32]
 800924a:	2305      	movs	r3, #5
 800924c:	9307      	str	r3, [sp, #28]
 800924e:	2304      	movs	r3, #4
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	2303      	movs	r3, #3
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	2302      	movs	r3, #2
 8009258:	9304      	str	r3, [sp, #16]
 800925a:	2301      	movs	r3, #1
 800925c:	9303      	str	r3, [sp, #12]
 800925e:	2300      	movs	r3, #0
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	2304      	movs	r3, #4
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	2303      	movs	r3, #3
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	2302      	movs	r3, #2
 800926c:	2201      	movs	r2, #1
 800926e:	2100      	movs	r1, #0
 8009270:	2007      	movs	r0, #7
 8009272:	f001 fe92 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	2209      	movs	r2, #9
 800927a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	220b      	movs	r2, #11
 8009280:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	2209      	movs	r2, #9
 8009286:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	220b      	movs	r2, #11
 800928c:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	2220      	movs	r2, #32
 8009298:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	2200      	movs	r2, #0
 800929e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	221a      	movs	r2, #26
 80092a4:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	2200      	movs	r2, #0
 80092aa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	2228      	movs	r2, #40	; 0x28
 80092b0:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	2200      	movs	r2, #0
 80092b6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	2221      	movs	r2, #33	; 0x21
 80092bc:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	22f5      	movs	r2, #245	; 0xf5
 80092c2:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2208      	movs	r2, #8
 80092c8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2288      	movs	r2, #136	; 0x88
 80092d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f821 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	229b      	movs	r2, #155	; 0x9b
 80092e8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	2226      	movs	r2, #38	; 0x26
 80092ee:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80092f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b090      	sub	sp, #64	; 0x40
 8009300:	af0a      	add	r7, sp, #40	; 0x28
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff ff52 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009332:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d13e      	bne.n	80093b8 <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	9308      	str	r3, [sp, #32]
 800933e:	2305      	movs	r3, #5
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	2304      	movs	r3, #4
 8009344:	9306      	str	r3, [sp, #24]
 8009346:	2303      	movs	r3, #3
 8009348:	9305      	str	r3, [sp, #20]
 800934a:	230a      	movs	r3, #10
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	2309      	movs	r3, #9
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	2308      	movs	r3, #8
 8009354:	9302      	str	r3, [sp, #8]
 8009356:	2304      	movs	r3, #4
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	2303      	movs	r3, #3
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	2302      	movs	r3, #2
 8009360:	2201      	movs	r2, #1
 8009362:	2100      	movs	r1, #0
 8009364:	2007      	movs	r0, #7
 8009366:	f001 fd88 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	3302      	adds	r3, #2
 800936e:	9308      	str	r3, [sp, #32]
 8009370:	2305      	movs	r3, #5
 8009372:	9307      	str	r3, [sp, #28]
 8009374:	2304      	movs	r3, #4
 8009376:	9306      	str	r3, [sp, #24]
 8009378:	2303      	movs	r3, #3
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	230a      	movs	r3, #10
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	2309      	movs	r3, #9
 8009382:	9303      	str	r3, [sp, #12]
 8009384:	2308      	movs	r3, #8
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	2304      	movs	r3, #4
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	2303      	movs	r3, #3
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2302      	movs	r3, #2
 8009392:	2201      	movs	r2, #1
 8009394:	2100      	movs	r1, #0
 8009396:	2007      	movs	r0, #7
 8009398:	f001 fdff 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 ffbd 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	22bb      	movs	r2, #187	; 0xbb
 80093b0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	2226      	movs	r2, #38	; 0x26
 80093b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80093b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af06      	add	r7, sp, #24
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	9302      	str	r3, [sp, #8]
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	9301      	str	r3, [sp, #4]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff ff83 	bl	80092fc <VL53L1_preset_mode_histogram_ranging_with_mm1>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80093fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	22db      	movs	r2, #219	; 0xdb
 8009406:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b090      	sub	sp, #64	; 0x40
 8009418:	af0a      	add	r7, sp, #40	; 0x28
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	9304      	str	r3, [sp, #16]
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	9302      	str	r3, [sp, #8]
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f7ff fec6 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800944a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d13e      	bne.n	80094d0 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	9308      	str	r3, [sp, #32]
 8009456:	230d      	movs	r3, #13
 8009458:	9307      	str	r3, [sp, #28]
 800945a:	230c      	movs	r3, #12
 800945c:	9306      	str	r3, [sp, #24]
 800945e:	230b      	movs	r3, #11
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	230a      	movs	r3, #10
 8009464:	9304      	str	r3, [sp, #16]
 8009466:	2309      	movs	r3, #9
 8009468:	9303      	str	r3, [sp, #12]
 800946a:	2308      	movs	r3, #8
 800946c:	9302      	str	r3, [sp, #8]
 800946e:	230c      	movs	r3, #12
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	230b      	movs	r3, #11
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	230a      	movs	r3, #10
 8009478:	2209      	movs	r2, #9
 800947a:	2108      	movs	r1, #8
 800947c:	2007      	movs	r0, #7
 800947e:	f001 fcfc 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	3302      	adds	r3, #2
 8009486:	9308      	str	r3, [sp, #32]
 8009488:	230d      	movs	r3, #13
 800948a:	9307      	str	r3, [sp, #28]
 800948c:	230c      	movs	r3, #12
 800948e:	9306      	str	r3, [sp, #24]
 8009490:	230b      	movs	r3, #11
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	230a      	movs	r3, #10
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	2309      	movs	r3, #9
 800949a:	9303      	str	r3, [sp, #12]
 800949c:	2308      	movs	r3, #8
 800949e:	9302      	str	r3, [sp, #8]
 80094a0:	230c      	movs	r3, #12
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	230b      	movs	r3, #11
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	230a      	movs	r3, #10
 80094aa:	2209      	movs	r2, #9
 80094ac:	2108      	movs	r1, #8
 80094ae:	2007      	movs	r0, #7
 80094b0:	f001 fd73 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 ff31 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2202      	movs	r2, #2
 80094c8:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	22bb      	movs	r2, #187	; 0xbb
 80094ce:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 80094d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08c      	sub	sp, #48	; 0x30
 80094e0:	af06      	add	r7, sp, #24
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	9302      	str	r3, [sp, #8]
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ff83 	bl	8009414 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 800950e:	4603      	mov	r3, r0
 8009510:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 8009512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	22db      	movs	r2, #219	; 0xdb
 800951e:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b090      	sub	sp, #64	; 0x40
 8009530:	af0a      	add	r7, sp, #40	; 0x28
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	9303      	str	r3, [sp, #12]
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	9302      	str	r3, [sp, #8]
 800954a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7ff fe3a 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 800955e:	4603      	mov	r3, r0
 8009560:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009562:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d166      	bne.n	8009638 <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8009570:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	9308      	str	r3, [sp, #32]
 8009576:	2304      	movs	r3, #4
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	2303      	movs	r3, #3
 800957c:	9306      	str	r3, [sp, #24]
 800957e:	2302      	movs	r3, #2
 8009580:	9305      	str	r3, [sp, #20]
 8009582:	2301      	movs	r3, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	2300      	movs	r3, #0
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	2307      	movs	r3, #7
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	2304      	movs	r3, #4
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	2303      	movs	r3, #3
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	2302      	movs	r3, #2
 8009598:	2201      	movs	r2, #1
 800959a:	2100      	movs	r1, #0
 800959c:	2007      	movs	r0, #7
 800959e:	f001 fc6c 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80095a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a4:	3302      	adds	r3, #2
 80095a6:	9308      	str	r3, [sp, #32]
 80095a8:	2304      	movs	r3, #4
 80095aa:	9307      	str	r3, [sp, #28]
 80095ac:	2303      	movs	r3, #3
 80095ae:	9306      	str	r3, [sp, #24]
 80095b0:	2302      	movs	r3, #2
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	2301      	movs	r3, #1
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	2300      	movs	r3, #0
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	2307      	movs	r3, #7
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	2304      	movs	r3, #4
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	2303      	movs	r3, #3
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2302      	movs	r3, #2
 80095ca:	2201      	movs	r2, #1
 80095cc:	2100      	movs	r1, #0
 80095ce:	2007      	movs	r0, #7
 80095d0:	f001 fce3 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	68b9      	ldr	r1, [r7, #8]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fea1 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	2204      	movs	r2, #4
 80095e8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2203      	movs	r2, #3
 80095ee:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	2242      	movs	r2, #66	; 0x42
 80095fa:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	2200      	movs	r2, #0
 8009600:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	2242      	movs	r2, #66	; 0x42
 8009606:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2200      	movs	r2, #0
 800960c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	2252      	movs	r2, #82	; 0x52
 8009612:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	2200      	movs	r2, #0
 8009618:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	2266      	movs	r2, #102	; 0x66
 800961e:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2204      	movs	r2, #4
 8009624:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	22a4      	movs	r2, #164	; 0xa4
 800962a:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	229b      	movs	r2, #155	; 0x9b
 8009630:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	2226      	movs	r2, #38	; 0x26
 8009636:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b090      	sub	sp, #64	; 0x40
 8009648:	af0a      	add	r7, sp, #40	; 0x28
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	68b9      	ldr	r1, [r7, #8]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fdae 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800967a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d178      	bne.n	8009774 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	9308      	str	r3, [sp, #32]
 8009686:	2305      	movs	r3, #5
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	2304      	movs	r3, #4
 800968c:	9306      	str	r3, [sp, #24]
 800968e:	2303      	movs	r3, #3
 8009690:	9305      	str	r3, [sp, #20]
 8009692:	2302      	movs	r3, #2
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	2301      	movs	r3, #1
 8009698:	9303      	str	r3, [sp, #12]
 800969a:	2300      	movs	r3, #0
 800969c:	9302      	str	r3, [sp, #8]
 800969e:	2304      	movs	r3, #4
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	2303      	movs	r3, #3
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	2302      	movs	r3, #2
 80096a8:	2201      	movs	r2, #1
 80096aa:	2100      	movs	r1, #0
 80096ac:	2007      	movs	r0, #7
 80096ae:	f001 fbe4 	bl	800ae7a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	3302      	adds	r3, #2
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	2305      	movs	r3, #5
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	2304      	movs	r3, #4
 80096be:	9306      	str	r3, [sp, #24]
 80096c0:	2303      	movs	r3, #3
 80096c2:	9305      	str	r3, [sp, #20]
 80096c4:	2302      	movs	r3, #2
 80096c6:	9304      	str	r3, [sp, #16]
 80096c8:	2301      	movs	r3, #1
 80096ca:	9303      	str	r3, [sp, #12]
 80096cc:	2300      	movs	r3, #0
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	2304      	movs	r3, #4
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	2303      	movs	r3, #3
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	2302      	movs	r3, #2
 80096da:	2201      	movs	r2, #1
 80096dc:	2100      	movs	r1, #0
 80096de:	2007      	movs	r0, #7
 80096e0:	f001 fc5b 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fe19 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	2209      	movs	r2, #9
 80096f8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	220b      	movs	r2, #11
 80096fe:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	2200      	movs	r2, #0
 8009704:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	2221      	movs	r2, #33	; 0x21
 800970a:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	2200      	movs	r2, #0
 8009710:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	221b      	movs	r2, #27
 8009716:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	2200      	movs	r2, #0
 800971c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	2229      	movs	r2, #41	; 0x29
 8009722:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	2200      	movs	r2, #0
 8009728:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	2222      	movs	r2, #34	; 0x22
 800972e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	2209      	movs	r2, #9
 8009734:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	22f5      	movs	r2, #245	; 0xf5
 800973a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	2209      	movs	r2, #9
 8009740:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	220b      	movs	r2, #11
 8009746:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2208      	movs	r2, #8
 800975c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2288      	movs	r2, #136	; 0x88
 8009764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	229b      	movs	r2, #155	; 0x9b
 800976c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	2226      	movs	r2, #38	; 0x26
 8009772:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b090      	sub	sp, #64	; 0x40
 8009784:	af0a      	add	r7, sp, #40	; 0x28
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	9303      	str	r3, [sp, #12]
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	9302      	str	r3, [sp, #8]
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	6a3b      	ldr	r3, [r7, #32]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff ff49 	bl	8009644 <VL53L1_preset_mode_histogram_long_range>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80097b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d13b      	bne.n	8009836 <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	9308      	str	r3, [sp, #32]
 80097c2:	2305      	movs	r3, #5
 80097c4:	9307      	str	r3, [sp, #28]
 80097c6:	2304      	movs	r3, #4
 80097c8:	9306      	str	r3, [sp, #24]
 80097ca:	2303      	movs	r3, #3
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	230a      	movs	r3, #10
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	2309      	movs	r3, #9
 80097d4:	9303      	str	r3, [sp, #12]
 80097d6:	2308      	movs	r3, #8
 80097d8:	9302      	str	r3, [sp, #8]
 80097da:	2304      	movs	r3, #4
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	2303      	movs	r3, #3
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	2302      	movs	r3, #2
 80097e4:	2201      	movs	r2, #1
 80097e6:	2100      	movs	r1, #0
 80097e8:	2007      	movs	r0, #7
 80097ea:	f001 fb46 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	3302      	adds	r3, #2
 80097f2:	9308      	str	r3, [sp, #32]
 80097f4:	2305      	movs	r3, #5
 80097f6:	9307      	str	r3, [sp, #28]
 80097f8:	2304      	movs	r3, #4
 80097fa:	9306      	str	r3, [sp, #24]
 80097fc:	2303      	movs	r3, #3
 80097fe:	9305      	str	r3, [sp, #20]
 8009800:	230a      	movs	r3, #10
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	2309      	movs	r3, #9
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	2308      	movs	r3, #8
 800980a:	9302      	str	r3, [sp, #8]
 800980c:	2304      	movs	r3, #4
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	2303      	movs	r3, #3
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2302      	movs	r3, #2
 8009816:	2201      	movs	r2, #1
 8009818:	2100      	movs	r1, #0
 800981a:	2007      	movs	r0, #7
 800981c:	f001 fbbd 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fd7b 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	22bb      	movs	r2, #187	; 0xbb
 8009834:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b08c      	sub	sp, #48	; 0x30
 8009846:	af06      	add	r7, sp, #24
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	9302      	str	r3, [sp, #8]
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff ff86 	bl	8009780 <VL53L1_preset_mode_histogram_long_range_mm1>
 8009874:	4603      	mov	r3, r0
 8009876:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009882:	22db      	movs	r2, #219	; 0xdb
 8009884:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b090      	sub	sp, #64	; 0x40
 8009896:	af0a      	add	r7, sp, #40	; 0x28
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	9302      	str	r3, [sp, #8]
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff fc87 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80098c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d178      	bne.n	80099c2 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	9308      	str	r3, [sp, #32]
 80098d4:	2303      	movs	r3, #3
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	2302      	movs	r3, #2
 80098da:	9306      	str	r3, [sp, #24]
 80098dc:	2301      	movs	r3, #1
 80098de:	9305      	str	r3, [sp, #20]
 80098e0:	2302      	movs	r3, #2
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	2301      	movs	r3, #1
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	2300      	movs	r3, #0
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	2302      	movs	r3, #2
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	2302      	movs	r3, #2
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2301      	movs	r3, #1
 80098f6:	2201      	movs	r2, #1
 80098f8:	2100      	movs	r1, #0
 80098fa:	2007      	movs	r0, #7
 80098fc:	f001 fabd 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009902:	3302      	adds	r3, #2
 8009904:	9308      	str	r3, [sp, #32]
 8009906:	2303      	movs	r3, #3
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	2302      	movs	r3, #2
 800990c:	9306      	str	r3, [sp, #24]
 800990e:	2301      	movs	r3, #1
 8009910:	9305      	str	r3, [sp, #20]
 8009912:	2302      	movs	r3, #2
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	2301      	movs	r3, #1
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	2300      	movs	r3, #0
 800991c:	9302      	str	r3, [sp, #8]
 800991e:	2302      	movs	r3, #2
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	2302      	movs	r3, #2
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	2301      	movs	r3, #1
 8009928:	2201      	movs	r2, #1
 800992a:	2100      	movs	r1, #0
 800992c:	2007      	movs	r0, #7
 800992e:	f001 fb34 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	68b9      	ldr	r1, [r7, #8]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 fcf2 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	2205      	movs	r2, #5
 8009946:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	2207      	movs	r2, #7
 800994c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2236      	movs	r2, #54	; 0x36
 8009958:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	2200      	movs	r2, #0
 800995e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	2228      	movs	r2, #40	; 0x28
 8009964:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	2200      	movs	r2, #0
 800996a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	2244      	movs	r2, #68	; 0x44
 8009970:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	2200      	movs	r2, #0
 8009976:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	2233      	movs	r2, #51	; 0x33
 800997c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2205      	movs	r2, #5
 8009982:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	22f5      	movs	r2, #245	; 0xf5
 8009988:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2205      	movs	r2, #5
 800998e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	2207      	movs	r2, #7
 8009994:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800999e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a0:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2208      	movs	r2, #8
 80099aa:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2248      	movs	r2, #72	; 0x48
 80099b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	229b      	movs	r2, #155	; 0x9b
 80099ba:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2226      	movs	r2, #38	; 0x26
 80099c0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b090      	sub	sp, #64	; 0x40
 80099d2:	af0a      	add	r7, sp, #40	; 0x28
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099dc:	2300      	movs	r3, #0
 80099de:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	9302      	str	r3, [sp, #8]
 80099ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7ff ff49 	bl	8009892 <VL53L1_preset_mode_histogram_medium_range>
 8009a00:	4603      	mov	r3, r0
 8009a02:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d13b      	bne.n	8009a84 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	9308      	str	r3, [sp, #32]
 8009a10:	2303      	movs	r3, #3
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	2302      	movs	r3, #2
 8009a16:	9306      	str	r3, [sp, #24]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	230a      	movs	r3, #10
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	2309      	movs	r3, #9
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	2308      	movs	r3, #8
 8009a26:	9302      	str	r3, [sp, #8]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	2301      	movs	r3, #1
 8009a32:	2201      	movs	r2, #1
 8009a34:	2100      	movs	r1, #0
 8009a36:	2007      	movs	r0, #7
 8009a38:	f001 fa1f 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	3302      	adds	r3, #2
 8009a40:	9308      	str	r3, [sp, #32]
 8009a42:	2303      	movs	r3, #3
 8009a44:	9307      	str	r3, [sp, #28]
 8009a46:	2302      	movs	r3, #2
 8009a48:	9306      	str	r3, [sp, #24]
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	230a      	movs	r3, #10
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	2309      	movs	r3, #9
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	2308      	movs	r3, #8
 8009a58:	9302      	str	r3, [sp, #8]
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	2302      	movs	r3, #2
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	2301      	movs	r3, #1
 8009a64:	2201      	movs	r2, #1
 8009a66:	2100      	movs	r1, #0
 8009a68:	2007      	movs	r0, #7
 8009a6a:	f001 fa96 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fc54 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	22bb      	movs	r2, #187	; 0xbb
 8009a82:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08c      	sub	sp, #48	; 0x30
 8009a94:	af06      	add	r7, sp, #24
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f7ff ff86 	bl	80099ce <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	22db      	movs	r2, #219	; 0xdb
 8009ad2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b090      	sub	sp, #64	; 0x40
 8009ae4:	af0a      	add	r7, sp, #40	; 0x28
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	9302      	str	r3, [sp, #8]
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f7ff fb60 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 8009b12:	4603      	mov	r3, r0
 8009b14:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d178      	bne.n	8009c10 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	9308      	str	r3, [sp, #32]
 8009b22:	2302      	movs	r3, #2
 8009b24:	9307      	str	r3, [sp, #28]
 8009b26:	2302      	movs	r3, #2
 8009b28:	9306      	str	r3, [sp, #24]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	9305      	str	r3, [sp, #20]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	2301      	movs	r3, #1
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	2300      	movs	r3, #0
 8009b38:	9302      	str	r3, [sp, #8]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	2301      	movs	r3, #1
 8009b44:	2200      	movs	r2, #0
 8009b46:	2107      	movs	r1, #7
 8009b48:	2007      	movs	r0, #7
 8009b4a:	f001 f996 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	3302      	adds	r3, #2
 8009b52:	9308      	str	r3, [sp, #32]
 8009b54:	2302      	movs	r3, #2
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	2302      	movs	r3, #2
 8009b5a:	9306      	str	r3, [sp, #24]
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	9305      	str	r3, [sp, #20]
 8009b60:	2301      	movs	r3, #1
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	2301      	movs	r3, #1
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	2301      	movs	r3, #1
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2301      	movs	r3, #1
 8009b76:	2200      	movs	r2, #0
 8009b78:	2107      	movs	r1, #7
 8009b7a:	2007      	movs	r0, #7
 8009b7c:	f001 fa0d 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbcb 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2203      	movs	r2, #3
 8009b94:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	2205      	movs	r2, #5
 8009b9a:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	2252      	movs	r2, #82	; 0x52
 8009ba6:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2200      	movs	r2, #0
 8009bac:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	2237      	movs	r2, #55	; 0x37
 8009bb2:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	2266      	movs	r2, #102	; 0x66
 8009bbe:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	2244      	movs	r2, #68	; 0x44
 8009bca:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2203      	movs	r2, #3
 8009bd0:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	22f5      	movs	r2, #245	; 0xf5
 8009bd6:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2203      	movs	r2, #3
 8009bdc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	2205      	movs	r2, #5
 8009be2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2208      	movs	r2, #8
 8009bf8:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2228      	movs	r2, #40	; 0x28
 8009c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	22bb      	movs	r2, #187	; 0xbb
 8009c08:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	2226      	movs	r2, #38	; 0x26
 8009c0e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b090      	sub	sp, #64	; 0x40
 8009c20:	af0a      	add	r7, sp, #40	; 0x28
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	9302      	str	r3, [sp, #8]
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff ff49 	bl	8009ae0 <VL53L1_preset_mode_histogram_short_range>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d15a      	bne.n	8009d10 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	9308      	str	r3, [sp, #32]
 8009c5e:	2301      	movs	r3, #1
 8009c60:	9307      	str	r3, [sp, #28]
 8009c62:	2301      	movs	r3, #1
 8009c64:	9306      	str	r3, [sp, #24]
 8009c66:	2301      	movs	r3, #1
 8009c68:	9305      	str	r3, [sp, #20]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9303      	str	r3, [sp, #12]
 8009c72:	2300      	movs	r3, #0
 8009c74:	9302      	str	r3, [sp, #8]
 8009c76:	2301      	movs	r3, #1
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2200      	movs	r2, #0
 8009c82:	2107      	movs	r1, #7
 8009c84:	2007      	movs	r0, #7
 8009c86:	f001 f8f8 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	9308      	str	r3, [sp, #32]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9307      	str	r3, [sp, #28]
 8009c94:	2301      	movs	r3, #1
 8009c96:	9306      	str	r3, [sp, #24]
 8009c98:	2301      	movs	r3, #1
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9304      	str	r3, [sp, #16]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9303      	str	r3, [sp, #12]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	2301      	movs	r3, #1
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2107      	movs	r1, #7
 8009cb6:	2007      	movs	r0, #7
 8009cb8:	f001 f96f 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fb2d 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009ccc:	6a3b      	ldr	r3, [r7, #32]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	2203      	movs	r2, #3
 8009cd6:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2231      	movs	r2, #49	; 0x31
 8009ce2:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	2203      	movs	r2, #3
 8009cee:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2210      	movs	r2, #16
 8009d04:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2218      	movs	r2, #24
 8009d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b090      	sub	sp, #64	; 0x40
 8009d20:	af0a      	add	r7, sp, #40	; 0x28
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	9304      	str	r3, [sp, #16]
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	9302      	str	r3, [sp, #8]
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f7ff fec9 	bl	8009ae0 <VL53L1_preset_mode_histogram_short_range>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d13b      	bne.n	8009dd2 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	9308      	str	r3, [sp, #32]
 8009d5e:	2302      	movs	r3, #2
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	2302      	movs	r3, #2
 8009d64:	9306      	str	r3, [sp, #24]
 8009d66:	2301      	movs	r3, #1
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	2309      	movs	r3, #9
 8009d70:	9303      	str	r3, [sp, #12]
 8009d72:	2308      	movs	r3, #8
 8009d74:	9302      	str	r3, [sp, #8]
 8009d76:	2301      	movs	r3, #1
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	2301      	movs	r3, #1
 8009d80:	2200      	movs	r2, #0
 8009d82:	2107      	movs	r1, #7
 8009d84:	2007      	movs	r0, #7
 8009d86:	f001 f878 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	9308      	str	r3, [sp, #32]
 8009d90:	2302      	movs	r3, #2
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	2302      	movs	r3, #2
 8009d96:	9306      	str	r3, [sp, #24]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	9304      	str	r3, [sp, #16]
 8009da0:	2309      	movs	r3, #9
 8009da2:	9303      	str	r3, [sp, #12]
 8009da4:	2308      	movs	r3, #8
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	2301      	movs	r3, #1
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	2301      	movs	r3, #1
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	2301      	movs	r3, #1
 8009db2:	2200      	movs	r2, #0
 8009db4:	2107      	movs	r1, #7
 8009db6:	2007      	movs	r0, #7
 8009db8:	f001 f8ef 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 faad 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	22bb      	movs	r2, #187	; 0xbb
 8009dd0:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b08c      	sub	sp, #48	; 0x30
 8009de2:	af06      	add	r7, sp, #24
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009dec:	2300      	movs	r3, #0
 8009dee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	9303      	str	r3, [sp, #12]
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f7ff ff86 	bl	8009d1c <VL53L1_preset_mode_histogram_short_range_mm1>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	22db      	movs	r2, #219	; 0xdb
 8009e20:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b08c      	sub	sp, #48	; 0x30
 8009e32:	af06      	add	r7, sp, #24
 8009e34:	60f8      	str	r0, [r7, #12]
 8009e36:	60b9      	str	r1, [r7, #8]
 8009e38:	607a      	str	r2, [r7, #4]
 8009e3a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	9302      	str	r3, [sp, #8]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff f9b9 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 8009e60:	4603      	mov	r3, r0
 8009e62:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10b      	bne.n	8009e84 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 8009e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e74:	2201      	movs	r2, #1
 8009e76:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2283      	movs	r2, #131	; 0x83
 8009e7c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	222e      	movs	r2, #46	; 0x2e
 8009e82:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b090      	sub	sp, #64	; 0x40
 8009e94:	af0a      	add	r7, sp, #40	; 0x28
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	68b9      	ldr	r1, [r7, #8]
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 f9ba 	bl	800a236 <VL53L1_preset_mode_histogram_multizone_long_range>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009ec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d151      	bne.n	8009f72 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ed0:	6838      	ldr	r0, [r7, #0]
 8009ed2:	f00a fb1c 	bl	801450e <VL53L1_zone_preset_xtalk_planar>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	2209      	movs	r2, #9
 8009ede:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	2209      	movs	r2, #9
 8009ee4:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	9308      	str	r3, [sp, #32]
 8009eea:	2304      	movs	r3, #4
 8009eec:	9307      	str	r3, [sp, #28]
 8009eee:	2303      	movs	r3, #3
 8009ef0:	9306      	str	r3, [sp, #24]
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	2300      	movs	r3, #0
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	2307      	movs	r3, #7
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	2304      	movs	r3, #4
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	2303      	movs	r3, #3
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	2100      	movs	r1, #0
 8009f10:	2007      	movs	r0, #7
 8009f12:	f000 ffb2 	bl	800ae7a <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	3302      	adds	r3, #2
 8009f1a:	9308      	str	r3, [sp, #32]
 8009f1c:	2304      	movs	r3, #4
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	2303      	movs	r3, #3
 8009f22:	9306      	str	r3, [sp, #24]
 8009f24:	2302      	movs	r3, #2
 8009f26:	9305      	str	r3, [sp, #20]
 8009f28:	2301      	movs	r3, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	2307      	movs	r3, #7
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	2304      	movs	r3, #4
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	2303      	movs	r3, #3
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	2201      	movs	r2, #1
 8009f40:	2100      	movs	r1, #0
 8009f42:	2007      	movs	r0, #7
 8009f44:	f001 f829 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d108      	bne.n	8009f62 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	3302      	adds	r3, #2
 8009f54:	461a      	mov	r2, r3
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5a:	f003 f97d 	bl	800d258 <VL53L1_set_histogram_multizone_initial_bin_config>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f9da 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b090      	sub	sp, #64	; 0x40
 8009f82:	af0a      	add	r7, sp, #40	; 0x28
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
 8009f8a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	68b9      	ldr	r1, [r7, #8]
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff f911 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 8009fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d16e      	bne.n	800a09a <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	9308      	str	r3, [sp, #32]
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	230b      	movs	r3, #11
 8009fc6:	9306      	str	r3, [sp, #24]
 8009fc8:	230a      	movs	r3, #10
 8009fca:	9305      	str	r3, [sp, #20]
 8009fcc:	2309      	movs	r3, #9
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	230f      	movs	r3, #15
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	230c      	movs	r3, #12
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	230b      	movs	r3, #11
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	230a      	movs	r3, #10
 8009fe2:	2209      	movs	r2, #9
 8009fe4:	2108      	movs	r1, #8
 8009fe6:	200f      	movs	r0, #15
 8009fe8:	f000 ff47 	bl	800ae7a <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	3302      	adds	r3, #2
 8009ff0:	9308      	str	r3, [sp, #32]
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	9307      	str	r3, [sp, #28]
 8009ff6:	230b      	movs	r3, #11
 8009ff8:	9306      	str	r3, [sp, #24]
 8009ffa:	230a      	movs	r3, #10
 8009ffc:	9305      	str	r3, [sp, #20]
 8009ffe:	2309      	movs	r3, #9
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	2308      	movs	r3, #8
 800a004:	9303      	str	r3, [sp, #12]
 800a006:	230f      	movs	r3, #15
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	230c      	movs	r3, #12
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	230b      	movs	r3, #11
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	230a      	movs	r3, #10
 800a014:	2209      	movs	r2, #9
 800a016:	2108      	movs	r1, #8
 800a018:	200f      	movs	r0, #15
 800a01a:	f000 ffbe 	bl	800af9a <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f97c 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	2209      	movs	r2, #9
 800a032:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	2209      	movs	r2, #9
 800a038:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2221      	movs	r2, #33	; 0x21
 800a044:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	2200      	movs	r2, #0
 800a04a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	2221      	movs	r2, #33	; 0x21
 800a050:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800a052:	6a3b      	ldr	r3, [r7, #32]
 800a054:	2200      	movs	r2, #0
 800a056:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2229      	movs	r2, #41	; 0x29
 800a05c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	2200      	movs	r2, #0
 800a062:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	2229      	movs	r2, #41	; 0x29
 800a068:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2209      	movs	r2, #9
 800a06e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	22f5      	movs	r2, #245	; 0xf5
 800a074:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	2209      	movs	r2, #9
 800a07a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07e:	2209      	movs	r2, #9
 800a080:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	2209      	movs	r2, #9
 800a086:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	2206      	movs	r2, #6
 800a08c:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	22bb      	movs	r2, #187	; 0xbb
 800a092:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	2226      	movs	r2, #38	; 0x26
 800a098:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800a09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b08c      	sub	sp, #48	; 0x30
 800a0aa:	af06      	add	r7, sp, #24
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	68b9      	ldr	r1, [r7, #8]
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7ff ff53 	bl	8009f7e <VL53L1_preset_mode_histogram_xtalk_mm1>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	22db      	movs	r2, #219	; 0xdb
 800a0e0:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 800a0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b08c      	sub	sp, #48	; 0x30
 800a0f2:	af06      	add	r7, sp, #24
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	9303      	str	r3, [sp, #12]
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	68b9      	ldr	r1, [r7, #8]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff fbb9 	bl	8009892 <VL53L1_preset_mode_histogram_medium_range>
 800a120:	4603      	mov	r3, r0
 800a122:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d12c      	bne.n	800a186 <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	2307      	movs	r3, #7
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	2307      	movs	r3, #7
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	2302      	movs	r3, #2
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	2308      	movs	r3, #8
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2304      	movs	r3, #4
 800a142:	2202      	movs	r2, #2
 800a144:	2108      	movs	r1, #8
 800a146:	2004      	movs	r0, #4
 800a148:	f00a f96c 	bl	8014424 <VL53L1_init_zone_config_structure>
 800a14c:	4603      	mov	r3, r0
 800a14e:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	785b      	ldrb	r3, [r3, #1]
 800a154:	3301      	adds	r3, #1
 800a156:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d108      	bne.n	800a176 <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a166:	3302      	adds	r3, #2
 800a168:	461a      	mov	r2, r3
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a16e:	f003 f873 	bl	800d258 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a172:	4603      	mov	r3, r0
 800a174:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f8d0 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b08c      	sub	sp, #48	; 0x30
 800a196:	af06      	add	r7, sp, #24
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1aa:	9303      	str	r3, [sp, #12]
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	9302      	str	r3, [sp, #8]
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff fc8e 	bl	8009ae0 <VL53L1_preset_mode_histogram_short_range>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d12c      	bne.n	800a22a <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	2307      	movs	r3, #7
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	2307      	movs	r3, #7
 800a1da:	9302      	str	r3, [sp, #8]
 800a1dc:	2302      	movs	r3, #2
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	2108      	movs	r1, #8
 800a1ea:	2004      	movs	r0, #4
 800a1ec:	f00a f91a 	bl	8014424 <VL53L1_init_zone_config_structure>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d108      	bne.n	800a21a <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	3302      	adds	r3, #2
 800a20c:	461a      	mov	r2, r3
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a212:	f003 f821 	bl	800d258 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f87e 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b08c      	sub	sp, #48	; 0x30
 800a23a:	af06      	add	r7, sp, #24
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a244:	2300      	movs	r3, #0
 800a246:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	9303      	str	r3, [sp, #12]
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	9302      	str	r3, [sp, #8]
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff f9ee 	bl	8009644 <VL53L1_preset_mode_histogram_long_range>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d12c      	bne.n	800a2ce <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	2307      	movs	r3, #7
 800a27a:	9303      	str	r3, [sp, #12]
 800a27c:	2307      	movs	r3, #7
 800a27e:	9302      	str	r3, [sp, #8]
 800a280:	2302      	movs	r3, #2
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	2308      	movs	r3, #8
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	2304      	movs	r3, #4
 800a28a:	2202      	movs	r2, #2
 800a28c:	2108      	movs	r1, #8
 800a28e:	2004      	movs	r0, #4
 800a290:	f00a f8c8 	bl	8014424 <VL53L1_init_zone_config_structure>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 800a2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d108      	bne.n	800a2be <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2b6:	f002 ffcf 	bl	800d258 <VL53L1_set_histogram_multizone_initial_bin_config>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f82c 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b08a      	sub	sp, #40	; 0x28
 800a2de:	af04      	add	r7, sp, #16
 800a2e0:	60f8      	str	r0, [r7, #12]
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	9303      	str	r3, [sp, #12]
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	9302      	str	r3, [sp, #8]
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	9301      	str	r3, [sp, #4]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	68b9      	ldr	r1, [r7, #8]
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7fe fb9e 	bl	8008a44 <VL53L1_preset_mode_standard_ranging>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 800a30c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	2201      	movs	r2, #1
 800a318:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 800a31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	79db      	ldrb	r3, [r3, #7]
 800a368:	b29b      	uxth	r3, r3
				<< 8)
 800a36a:	021b      	lsls	r3, r3, #8
 800a36c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	7a1b      	ldrb	r3, [r3, #8]
 800a372:	b29b      	uxth	r3, r3
 800a374:	4413      	add	r3, r2
 800a376:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	b29b      	uxth	r3, r3
				<< 8)
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	789b      	ldrb	r3, [r3, #2]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	4413      	add	r3, r2
 800a3be:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	78db      	ldrb	r3, [r3, #3]
 800a3c8:	b29b      	uxth	r3, r3
				<< 8)
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	791b      	ldrb	r3, [r3, #4]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	79db      	ldrb	r3, [r3, #7]
 800a450:	b29b      	uxth	r3, r3
				<< 8)
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	7a1b      	ldrb	r3, [r3, #8]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	4413      	add	r3, r2
 800a45e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	785b      	ldrb	r3, [r3, #1]
 800a490:	b29b      	uxth	r3, r3
				<< 8)
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	789b      	ldrb	r3, [r3, #2]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	4413      	add	r3, r2
 800a49e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	78db      	ldrb	r3, [r3, #3]
 800a4a8:	b29b      	uxth	r3, r3
				<< 8)
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	791b      	ldrb	r3, [r3, #4]
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	4413      	add	r3, r2
 800a4b6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a4cc:	bf00      	nop
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08c      	sub	sp, #48	; 0x30
 800a4dc:	af06      	add	r7, sp, #24
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f7fe fe64 	bl	80091d2 <VL53L1_preset_mode_histogram_ranging>
 800a50a:	4603      	mov	r3, r0
 800a50c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a50e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10a      	bne.n	800a52c <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff fefd 	bl	800a326 <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a52c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3318      	adds	r3, #24
 800a544:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2230      	movs	r2, #48	; 0x30
 800a55a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a564:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3318      	adds	r3, #24
 800a582:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	332c      	adds	r3, #44	; 0x2c
 800a588:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2200      	movs	r2, #0
 800a594:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2202      	movs	r2, #2
 800a59a:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	735a      	strb	r2, [r3, #13]

}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
	...

0800a5d4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3318      	adds	r3, #24
 800a5e4:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	332c      	adds	r3, #44	; 0x2c
 800a5ea:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d115      	bne.n	800a626 <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2202      	movs	r2, #2
 800a616:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	735a      	strb	r2, [r3, #13]
 800a624:	e0be      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	7a1b      	ldrb	r3, [r3, #8]
 800a62a:	2bff      	cmp	r3, #255	; 0xff
 800a62c:	d103      	bne.n	800a636 <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2280      	movs	r2, #128	; 0x80
 800a632:	721a      	strb	r2, [r3, #8]
 800a634:	e005      	b.n	800a642 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	7a1b      	ldrb	r3, [r3, #8]
 800a63a:	3301      	adds	r3, #1
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	7a19      	ldrb	r1, [r3, #8]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f103 0209 	add.w	r2, r3, #9
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	330a      	adds	r3, #10
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f002 fdc2 	bl	800d1da <VL53L1_update_internal_stream_counters>
 800a656:	4603      	mov	r3, r0
 800a658:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	7adb      	ldrb	r3, [r3, #11]
 800a65e:	f083 0302 	eor.w	r3, r3, #2
 800a662:	b2da      	uxtb	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	79db      	ldrb	r3, [r3, #7]
 800a66c:	3b03      	subs	r3, #3
 800a66e:	2b05      	cmp	r3, #5
 800a670:	f200 8082 	bhi.w	800a778 <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a674:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a695 	.word	0x0800a695
 800a680:	0800a779 	.word	0x0800a779
 800a684:	0800a779 	.word	0x0800a779
 800a688:	0800a6e7 	.word	0x0800a6e7
 800a68c:	0800a71d 	.word	0x0800a71d
 800a690:	0800a747 	.word	0x0800a747

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dd03      	ble.n	800a6aa <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2206      	movs	r2, #6
 800a6a6:	71da      	strb	r2, [r3, #7]
 800a6a8:	e00d      	b.n	800a6c6 <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d303      	bcc.n	800a6c0 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	71da      	strb	r2, [r3, #7]
 800a6be:	e002      	b.n	800a6c6 <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2207      	movs	r2, #7
 800a6c4:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	735a      	strb	r2, [r3, #13]

			break;
 800a6e4:	e05e      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a708:	429a      	cmp	r2, r3
 800a70a:	d303      	bcc.n	800a714 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2208      	movs	r2, #8
 800a710:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a712:	e047      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2207      	movs	r2, #7
 800a718:	71da      	strb	r2, [r3, #7]
			break;
 800a71a:	e043      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	7b5b      	ldrb	r3, [r3, #13]
 800a720:	3301      	adds	r3, #1
 800a722:	b2da      	uxtb	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a732:	429a      	cmp	r2, r3
 800a734:	d303      	bcc.n	800a73e <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2208      	movs	r2, #8
 800a73a:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a73c:	e032      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2207      	movs	r2, #7
 800a742:	71da      	strb	r2, [r3, #7]
			break;
 800a744:	e02e      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	7b1b      	ldrb	r3, [r3, #12]
 800a750:	f083 0301 	eor.w	r3, r3, #1
 800a754:	b2da      	uxtb	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a764:	429a      	cmp	r2, r3
 800a766:	d303      	bcc.n	800a770 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2208      	movs	r2, #8
 800a76c:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a76e:	e019      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2207      	movs	r2, #7
 800a774:	71da      	strb	r2, [r3, #7]
			break;
 800a776:	e015      	b.n	800a7a4 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2203      	movs	r2, #3
 800a77c:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2202      	movs	r2, #2
 800a794:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	735a      	strb	r2, [r3, #13]
			break;
 800a7a2:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b08d      	sub	sp, #52	; 0x34
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3318      	adds	r3, #24
 800a7c2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	332c      	adds	r3, #44	; 0x2c
 800a7d2:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a7da:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a7e2:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a7ea:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a80a:	f003 031f 	and.w	r3, r3, #31
 800a80e:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	78db      	ldrb	r3, [r3, #3]
 800a814:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a81c:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a82a:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a830:	111b      	asrs	r3, r3, #4
 800a832:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a834:	f003 0302 	and.w	r3, r3, #2
 800a838:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a83c:	7c7b      	ldrb	r3, [r7, #17]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d008      	beq.n	800a854 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a848:	111b      	asrs	r3, r3, #4
 800a84a:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a84c:	f003 0302 	and.w	r3, r3, #2
 800a850:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d04e      	beq.n	800a900 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	79db      	ldrb	r3, [r3, #7]
 800a866:	2b06      	cmp	r3, #6
 800a868:	d109      	bne.n	800a87e <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a86a:	7c7b      	ldrb	r3, [r7, #17]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d14a      	bne.n	800a906 <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a870:	7cfb      	ldrb	r3, [r7, #19]
 800a872:	2b12      	cmp	r3, #18
 800a874:	d047      	beq.n	800a906 <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a876:	23ef      	movs	r3, #239	; 0xef
 800a878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a87c:	e043      	b.n	800a906 <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	7a1b      	ldrb	r3, [r3, #8]
 800a882:	7cba      	ldrb	r2, [r7, #18]
 800a884:	429a      	cmp	r2, r3
 800a886:	d002      	beq.n	800a88e <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a888:	23ee      	movs	r3, #238	; 0xee
 800a88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	7adb      	ldrb	r3, [r3, #11]
 800a892:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a896:	429a      	cmp	r2, r3
 800a898:	d002      	beq.n	800a8a0 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a89a:	23ed      	movs	r3, #237	; 0xed
 800a89c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	7b5b      	ldrb	r3, [r3, #13]
 800a8a4:	4619      	mov	r1, r3
		expected_stream_count =
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	440b      	add	r3, r1
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	4413      	add	r3, r2
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	7b5b      	ldrb	r3, [r3, #13]
 800a8bc:	4619      	mov	r1, r3
		expected_gph_id =
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	4413      	add	r3, r2
 800a8ca:	3303      	adds	r3, #3
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a8d0:	7c3a      	ldrb	r2, [r7, #16]
 800a8d2:	7cbb      	ldrb	r3, [r7, #18]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d00a      	beq.n	800a8ee <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d102      	bne.n	800a8e8 <VL53L1_check_ll_driver_rd_state+0x138>
 800a8e2:	7cbb      	ldrb	r3, [r7, #18]
 800a8e4:	2bff      	cmp	r3, #255	; 0xff
 800a8e6:	d002      	beq.n	800a8ee <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a8e8:	23ec      	movs	r3, #236	; 0xec
 800a8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a8ee:	7bfa      	ldrb	r2, [r7, #15]
 800a8f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d005      	beq.n	800a904 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a8f8:	23eb      	movs	r3, #235	; 0xeb
 800a8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a8fe:	e002      	b.n	800a906 <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a900:	bf00      	nop
 800a902:	e000      	b.n	800a906 <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a904:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a906:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3734      	adds	r7, #52	; 0x34
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b088      	sub	sp, #32
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a91e:	2300      	movs	r3, #0
 800a920:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3318      	adds	r3, #24
 800a926:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a92e:	3308      	adds	r3, #8
 800a930:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	332c      	adds	r3, #44	; 0x2c
 800a936:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a93e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d11b      	bne.n	800a986 <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	2203      	movs	r2, #3
 800a952:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	2200      	movs	r2, #0
 800a958:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	2200      	movs	r2, #0
 800a95e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	2200      	movs	r2, #0
 800a964:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2202      	movs	r2, #2
 800a96a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	2200      	movs	r2, #0
 800a970:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2200      	movs	r2, #0
 800a976:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	773b      	strb	r3, [r7, #28]
 800a984:	e0b1      	b.n	800aaea <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	791b      	ldrb	r3, [r3, #4]
 800a98a:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	799b      	ldrb	r3, [r3, #6]
 800a990:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	785b      	ldrb	r3, [r3, #1]
 800a996:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2bff      	cmp	r3, #255	; 0xff
 800a99e:	d103      	bne.n	800a9a8 <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2280      	movs	r2, #128	; 0x80
 800a9a4:	705a      	strb	r2, [r3, #1]
 800a9a6:	e005      	b.n	800a9b4 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	785b      	ldrb	r3, [r3, #1]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	7859      	ldrb	r1, [r3, #1]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	1c9a      	adds	r2, r3, #2
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	3303      	adds	r3, #3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f002 fc0a 	bl	800d1da <VL53L1_update_internal_stream_counters>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	791b      	ldrb	r3, [r3, #4]
 800a9ce:	f083 0302 	eor.w	r3, r3, #2
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b05      	cmp	r3, #5
 800a9de:	d053      	beq.n	800aa88 <VL53L1_update_ll_driver_cfg_state+0x172>
 800a9e0:	2b05      	cmp	r3, #5
 800a9e2:	dc69      	bgt.n	800aab8 <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d002      	beq.n	800a9ee <VL53L1_update_ll_driver_cfg_state+0xd8>
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d02d      	beq.n	800aa48 <VL53L1_update_ll_driver_cfg_state+0x132>
 800a9ec:	e064      	b.n	800aab8 <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d909      	bls.n	800aa16 <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	2200      	movs	r2, #0
 800aa06:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	795b      	ldrb	r3, [r3, #5]
 800aa0c:	f083 0301 	eor.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	70da      	strb	r2, [r3, #3]
 800aa32:	e005      	b.n	800aa40 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2200      	movs	r2, #0
 800aa38:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2204      	movs	r2, #4
 800aa44:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800aa46:	e050      	b.n	800aaea <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	799b      	ldrb	r3, [r3, #6]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d940      	bls.n	800aae4 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2200      	movs	r2, #0
 800aa66:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	795b      	ldrb	r3, [r3, #5]
 800aa6c:	f083 0301 	eor.w	r3, r3, #1
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d031      	beq.n	800aae4 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2205      	movs	r2, #5
 800aa84:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800aa86:	e02d      	b.n	800aae4 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	799b      	ldrb	r3, [r3, #6]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d922      	bls.n	800aae8 <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	795b      	ldrb	r3, [r3, #5]
 800aaac:	f083 0301 	eor.w	r3, r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	715a      	strb	r2, [r3, #5]
			}
			break;
 800aab6:	e017      	b.n	800aae8 <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2203      	movs	r2, #3
 800aabc:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	2200      	movs	r2, #0
 800aac2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	2200      	movs	r2, #0
 800aac8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2200      	movs	r2, #0
 800aace:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2202      	movs	r2, #2
 800aad4:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2200      	movs	r2, #0
 800aada:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2200      	movs	r2, #0
 800aae0:	719a      	strb	r2, [r3, #6]
			break;
 800aae2:	e002      	b.n	800aaea <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800aae4:	bf00      	nop
 800aae6:	e000      	b.n	800aaea <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800aae8:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d11d      	bne.n	800ab30 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800aaf4:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800aaf6:	7f3b      	ldrb	r3, [r7, #28]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	b2d8      	uxtb	r0, r3
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	440b      	add	r3, r1
 800ab08:	3302      	adds	r3, #2
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	7b5b      	ldrb	r3, [r3, #13]
 800ab12:	4619      	mov	r1, r3
 800ab14:	7f7b      	ldrb	r3, [r7, #29]
 800ab16:	f083 0302 	eor.w	r3, r3, #2
 800ab1a:	b2d8      	uxtb	r0, r3
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	4413      	add	r3, r2
 800ab28:	3303      	adds	r3, #3
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	701a      	strb	r2, [r3, #0]
 800ab2e:	e013      	b.n	800ab58 <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800ab30:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	005b      	lsls	r3, r3, #1
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3302      	adds	r3, #2
 800ab40:	7f3a      	ldrb	r2, [r7, #28]
 800ab42:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800ab44:	7fba      	ldrb	r2, [r7, #30]
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	440b      	add	r3, r1
 800ab52:	3303      	adds	r3, #3
 800ab54:	7f7a      	ldrb	r2, [r7, #29]
 800ab56:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800ab58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	7c1a      	ldrb	r2, [r3, #16]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	7c52      	ldrb	r2, [r2, #17]
 800ab7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	3302      	adds	r3, #2
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c92      	ldrb	r2, [r2, #18]
 800ab88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	7cd2      	ldrb	r2, [r2, #19]
 800ab92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	3304      	adds	r3, #4
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7d12      	ldrb	r2, [r2, #20]
 800ab9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	3305      	adds	r3, #5
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	7d52      	ldrb	r2, [r2, #21]
 800aba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	3306      	adds	r3, #6
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	7d92      	ldrb	r2, [r2, #22]
 800abb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	3307      	adds	r3, #7
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	7dd2      	ldrb	r2, [r2, #23]
 800abba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7e12      	ldrb	r2, [r2, #24]
 800abc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	3309      	adds	r3, #9
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	7e52      	ldrb	r2, [r2, #25]
 800abce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	330a      	adds	r3, #10
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	7e92      	ldrb	r2, [r2, #26]
 800abd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	330b      	adds	r3, #11
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	7ed2      	ldrb	r2, [r2, #27]
 800abe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	330c      	adds	r3, #12
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	7f12      	ldrb	r2, [r2, #28]
 800abec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	330d      	adds	r3, #13
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	7f52      	ldrb	r2, [r2, #29]
 800abf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	330e      	adds	r3, #14
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	7f92      	ldrb	r2, [r2, #30]
 800ac00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	330f      	adds	r3, #15
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	7fd2      	ldrb	r2, [r2, #31]
 800ac0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3310      	adds	r3, #16
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ac16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	3311      	adds	r3, #17
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800ac22:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	3312      	adds	r3, #18
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ac2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	3313      	adds	r3, #19
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800ac3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ac46:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	3315      	adds	r3, #21
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800ac52:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	3316      	adds	r3, #22
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800ac5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	3317      	adds	r3, #23
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800ac6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	3318      	adds	r3, #24
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800ac76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	3319      	adds	r3, #25
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ac82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	331a      	adds	r3, #26
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800ac8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	331b      	adds	r3, #27
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800ac9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	331c      	adds	r3, #28
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800aca6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	331d      	adds	r3, #29
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800acb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	331e      	adds	r3, #30
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800acbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	331f      	adds	r3, #31
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800acca:	701a      	strb	r2, [r3, #0]
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	22ff      	movs	r2, #255	; 0xff
 800ace4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	22ff      	movs	r2, #255	; 0xff
 800acea:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	22ff      	movs	r2, #255	; 0xff
 800acf0:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	22ff      	movs	r2, #255	; 0xff
 800acf6:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acfe:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad06:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad0e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad16:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad1e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad26:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad2e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad36:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad3e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad46:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad4e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad56:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad5e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad66:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad6e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad76:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad7e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad86:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad8e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	22ff      	movs	r2, #255	; 0xff
 800ad94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	4603      	mov	r3, r0
 800adac:	6039      	str	r1, [r7, #0]
 800adae:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2210      	movs	r2, #16
 800adb8:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	79fa      	ldrb	r2, [r7, #7]
 800adbe:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]
 800adc4:	e017      	b.n	800adf6 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800adc6:	7bfa      	ldrb	r2, [r7, #15]
 800adc8:	4613      	mov	r3, r2
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	4413      	add	r3, r2
 800add4:	3304      	adds	r3, #4
 800add6:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2203      	movs	r2, #3
 800addc:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2203      	movs	r2, #3
 800ade2:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2204      	movs	r2, #4
 800ade8:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2200      	movs	r2, #0
 800adee:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	3301      	adds	r3, #1
 800adf4:	73fb      	strb	r3, [r7, #15]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	7bfa      	ldrb	r2, [r7, #15]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d3e2      	bcc.n	800adc6 <V53L1_init_zone_results_structure+0x22>
	}
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b087      	sub	sp, #28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800ae24:	2310      	movs	r3, #16
 800ae26:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ae2e:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800ae30:	2300      	movs	r3, #0
 800ae32:	75fb      	strb	r3, [r7, #23]
 800ae34:	e016      	b.n	800ae64 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800ae36:	7dfa      	ldrb	r2, [r7, #23]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	440b      	add	r3, r1
 800ae44:	3304      	adds	r3, #4
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800ae4a:	7dfa      	ldrb	r2, [r7, #23]
 800ae4c:	68b9      	ldr	r1, [r7, #8]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	440b      	add	r3, r1
 800ae58:	3306      	adds	r3, #6
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	3301      	adds	r3, #1
 800ae62:	75fb      	strb	r3, [r7, #23]
 800ae64:	7dfa      	ldrb	r2, [r7, #23]
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d3e4      	bcc.n	800ae36 <V53L1_init_zone_dss_configs+0x28>
	}
}
 800ae6c:	bf00      	nop
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800ae7a:	b490      	push	{r4, r7}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	4623      	mov	r3, r4
 800ae8a:	71fb      	strb	r3, [r7, #7]
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	71bb      	strb	r3, [r7, #6]
 800ae90:	460b      	mov	r3, r1
 800ae92:	717b      	strb	r3, [r7, #5]
 800ae94:	4613      	mov	r3, r2
 800ae96:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800ae98:	79bb      	ldrb	r3, [r7, #6]
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	4413      	add	r3, r2
 800aea2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea6:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800aea8:	793b      	ldrb	r3, [r7, #4]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	797b      	ldrb	r3, [r7, #5]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800aeb8:	7d3b      	ldrb	r3, [r7, #20]
 800aeba:	011b      	lsls	r3, r3, #4
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	7c3b      	ldrb	r3, [r7, #16]
 800aec0:	4413      	add	r3, r2
 800aec2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800aec8:	7f3b      	ldrb	r3, [r7, #28]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	7e3b      	ldrb	r3, [r7, #24]
 800aed0:	4413      	add	r3, r2
 800aed2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800aed8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aedc:	011b      	lsls	r3, r3, #4
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aee4:	4413      	add	r3, r2
 800aee6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800aeec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aef0:	011b      	lsls	r3, r3, #4
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aef8:	4413      	add	r3, r2
 800aefa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f897 2020 	ldrb.w	r2, [r7, #32]
 800af26:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800af28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af2c:	011b      	lsls	r3, r3, #4
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af34:	4413      	add	r3, r2
 800af36:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800af42:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2200      	movs	r2, #0
 800af48:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af80:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af88:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]

}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bc90      	pop	{r4, r7}
 800af98:	4770      	bx	lr

0800af9a <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800af9a:	b490      	push	{r4, r7}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	4604      	mov	r4, r0
 800afa2:	4608      	mov	r0, r1
 800afa4:	4611      	mov	r1, r2
 800afa6:	461a      	mov	r2, r3
 800afa8:	4623      	mov	r3, r4
 800afaa:	71fb      	strb	r3, [r7, #7]
 800afac:	4603      	mov	r3, r0
 800afae:	71bb      	strb	r3, [r7, #6]
 800afb0:	460b      	mov	r3, r1
 800afb2:	717b      	strb	r3, [r7, #5]
 800afb4:	4613      	mov	r3, r2
 800afb6:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800afb8:	79bb      	ldrb	r3, [r7, #6]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	4413      	add	r3, r2
 800afc2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800afc8:	793b      	ldrb	r3, [r7, #4]
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	797b      	ldrb	r3, [r7, #5]
 800afd0:	4413      	add	r3, r2
 800afd2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800afd8:	7d3b      	ldrb	r3, [r7, #20]
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	7c3b      	ldrb	r3, [r7, #16]
 800afe0:	4413      	add	r3, r2
 800afe2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	789a      	ldrb	r2, [r3, #2]
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	78da      	ldrb	r2, [r3, #3]
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	789a      	ldrb	r2, [r3, #2]
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	78da      	ldrb	r2, [r3, #3]
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	791a      	ldrb	r2, [r3, #4]
 800b01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01e:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b026:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800b028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b034:	4413      	add	r3, r2
 800b036:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b042:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	2200      	movs	r2, #0
 800b048:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800b04a:	7f3b      	ldrb	r3, [r7, #28]
 800b04c:	011b      	lsls	r3, r3, #4
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	7e3b      	ldrb	r3, [r7, #24]
 800b052:	4413      	add	r3, r2
 800b054:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800b05a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b05e:	011b      	lsls	r3, r3, #4
 800b060:	b2da      	uxtb	r2, r3
 800b062:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b066:	4413      	add	r3, r2
 800b068:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800b06e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b072:	011b      	lsls	r3, r3, #4
 800b074:	b2da      	uxtb	r2, r3
 800b076:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b07a:	4413      	add	r3, r2
 800b07c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	7bda      	ldrb	r2, [r3, #15]
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	7c1a      	ldrb	r2, [r3, #16]
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	7c5a      	ldrb	r2, [r3, #17]
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0a0:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0a8:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	701a      	strb	r2, [r3, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bc90      	pop	{r4, r7}
 800b0b8:	4770      	bx	lr

0800b0ba <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b087      	sub	sp, #28
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	220c      	movs	r2, #12
 800b0e2:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800b0e4:	897b      	ldrh	r3, [r7, #10]
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b11a:	2300      	movs	r3, #0
 800b11c:	82fb      	strh	r3, [r7, #22]
 800b11e:	e015      	b.n	800b14c <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800b120:	8afa      	ldrh	r2, [r7, #22]
 800b122:	897b      	ldrh	r3, [r7, #10]
 800b124:	429a      	cmp	r2, r3
 800b126:	d207      	bcs.n	800b138 <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800b128:	8afb      	ldrh	r3, [r7, #22]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	3302      	adds	r3, #2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]
 800b136:	e006      	b.n	800b146 <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800b138:	8afb      	ldrh	r3, [r7, #22]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	3302      	adds	r3, #2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	2200      	movs	r2, #0
 800b144:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800b146:	8afb      	ldrh	r3, [r7, #22]
 800b148:	3301      	adds	r3, #1
 800b14a:	82fb      	strh	r3, [r7, #22]
 800b14c:	8afb      	ldrh	r3, [r7, #22]
 800b14e:	2b0b      	cmp	r3, #11
 800b150:	d9e6      	bls.n	800b120 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	371c      	adds	r7, #28
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	603a      	str	r2, [r7, #0]
 800b16a:	80fb      	strh	r3, [r7, #6]
 800b16c:	460b      	mov	r3, r1
 800b16e:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b17c:	2300      	movs	r3, #0
 800b17e:	81fb      	strh	r3, [r7, #14]
 800b180:	e00e      	b.n	800b1a0 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b182:	88ba      	ldrh	r2, [r7, #4]
 800b184:	89fb      	ldrh	r3, [r7, #14]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	3b01      	subs	r3, #1
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	4413      	add	r3, r2
 800b18e:	89ba      	ldrh	r2, [r7, #12]
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b194:	89bb      	ldrh	r3, [r7, #12]
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b19a:	89fb      	ldrh	r3, [r7, #14]
 800b19c:	3301      	adds	r3, #1
 800b19e:	81fb      	strh	r3, [r7, #14]
 800b1a0:	89fa      	ldrh	r2, [r7, #14]
 800b1a2:	88bb      	ldrh	r3, [r7, #4]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d3ec      	bcc.n	800b182 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b085      	sub	sp, #20
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	4603      	mov	r3, r0
 800b1be:	6039      	str	r1, [r7, #0]
 800b1c0:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b1c6:	e00a      	b.n	800b1de <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	021b      	lsls	r3, r3, #8
 800b1cc:	b21a      	sxth	r2, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	1c59      	adds	r1, r3, #1
 800b1d2:	6039      	str	r1, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b21b      	sxth	r3, r3
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b1de:	88fb      	ldrh	r3, [r7, #6]
 800b1e0:	1e5a      	subs	r2, r3, #1
 800b1e2:	80fa      	strh	r2, [r7, #6]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1ef      	bne.n	800b1c8 <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800b1e8:	89fb      	ldrh	r3, [r7, #14]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b085      	sub	sp, #20
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	603a      	str	r2, [r7, #0]
 800b200:	80fb      	strh	r3, [r7, #6]
 800b202:	460b      	mov	r3, r1
 800b204:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800b20e:	88fb      	ldrh	r3, [r7, #6]
 800b210:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800b212:	2300      	movs	r3, #0
 800b214:	81fb      	strh	r3, [r7, #14]
 800b216:	e00f      	b.n	800b238 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b218:	88ba      	ldrh	r2, [r7, #4]
 800b21a:	89fb      	ldrh	r3, [r7, #14]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	4413      	add	r3, r2
 800b224:	89ba      	ldrh	r2, [r7, #12]
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b22a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b22e:	121b      	asrs	r3, r3, #8
 800b230:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800b232:	89fb      	ldrh	r3, [r7, #14]
 800b234:	3301      	adds	r3, #1
 800b236:	81fb      	strh	r3, [r7, #14]
 800b238:	89fa      	ldrh	r2, [r7, #14]
 800b23a:	88bb      	ldrh	r3, [r7, #4]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d3eb      	bcc.n	800b218 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	4603      	mov	r3, r0
 800b256:	6039      	str	r1, [r7, #0]
 800b258:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800b25a:	2300      	movs	r3, #0
 800b25c:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	b25b      	sxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	da0e      	bge.n	800b286 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800b268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b26c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800b26e:	e00a      	b.n	800b286 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800b270:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	b21a      	sxth	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	1c59      	adds	r1, r3, #1
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	b21b      	sxth	r3, r3
 800b282:	4313      	orrs	r3, r2
 800b284:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	1e5a      	subs	r2, r3, #1
 800b28a:	80fa      	strh	r2, [r7, #6]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1ef      	bne.n	800b270 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800b290:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	82fb      	strh	r3, [r7, #22]
 800b2be:	e00e      	b.n	800b2de <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800b2c0:	897a      	ldrh	r2, [r7, #10]
 800b2c2:	8afb      	ldrh	r3, [r7, #22]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	b2d2      	uxtb	r2, r2
 800b2d0:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	0a1b      	lsrs	r3, r3, #8
 800b2d6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800b2d8:	8afb      	ldrh	r3, [r7, #22]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	82fb      	strh	r3, [r7, #22]
 800b2de:	8afa      	ldrh	r2, [r7, #22]
 800b2e0:	897b      	ldrh	r3, [r7, #10]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d3ec      	bcc.n	800b2c0 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	371c      	adds	r7, #28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	6039      	str	r1, [r7, #0]
 800b2fe:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800b300:	2300      	movs	r3, #0
 800b302:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b304:	e007      	b.n	800b316 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	021a      	lsls	r2, r3, #8
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	1c59      	adds	r1, r3, #1
 800b30e:	6039      	str	r1, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b316:	88fb      	ldrh	r3, [r7, #6]
 800b318:	1e5a      	subs	r2, r3, #1
 800b31a:	80fa      	strh	r2, [r7, #6]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f2      	bne.n	800b306 <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800b320:	68fb      	ldr	r3, [r7, #12]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	4603      	mov	r3, r0
 800b336:	6039      	str	r1, [r7, #0]
 800b338:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b25b      	sxtb	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	da0b      	bge.n	800b360 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800b34e:	e007      	b.n	800b360 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	021a      	lsls	r2, r3, #8
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	1c59      	adds	r1, r3, #1
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	80fa      	strh	r2, [r7, #6]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1f2      	bne.n	800b350 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800b388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d107      	bne.n	800b3a0 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	461a      	mov	r2, r3
 800b394:	2127      	movs	r1, #39	; 0x27
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f009 f9ce 	bl	8014738 <VL53L1_WrByte>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3318      	adds	r3, #24
 800b3c0:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	78fa      	ldrb	r2, [r7, #3]
 800b3c6:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	2185      	movs	r1, #133	; 0x85
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f009 f9af 	bl	8014738 <VL53L1_WrByte>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800b3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff ffd7 	bl	800b3ac <VL53L1_set_firmware_enable_register>
 800b3fe:	4603      	mov	r3, r0
 800b400:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b402:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800b41a:	2100      	movs	r1, #0
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff ffc5 	bl	800b3ac <VL53L1_set_firmware_enable_register>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3318      	adds	r3, #24
 800b446:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800b456:	461a      	mov	r2, r3
 800b458:	2183      	movs	r1, #131	; 0x83
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f009 f96c 	bl	8014738 <VL53L1_WrByte>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800b464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800b47c:	2101      	movs	r1, #1
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ffd7 	bl	800b432 <VL53L1_set_powerforce_register>
 800b484:	4603      	mov	r3, r0
 800b486:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7ff ffc5 	bl	800b432 <VL53L1_set_powerforce_register>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800b4ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3318      	adds	r3, #24
 800b4c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b4d8:	461a      	mov	r2, r3
 800b4da:	2186      	movs	r1, #134	; 0x86
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f009 f92b 	bl	8014738 <VL53L1_WrByte>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b086      	sub	sp, #24
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	460a      	mov	r2, r1
 800b4fc:	80fb      	strh	r3, [r7, #6]
 800b4fe:	4613      	mov	r3, r2
 800b500:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	4618      	mov	r0, r3
 800b512:	f002 ffeb 	bl	800e4ec <VL53L1_calc_pll_period_us>
 800b516:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b518:	797b      	ldrb	r3, [r7, #5]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f003 fbd6 	bl	800eccc <VL53L1_decode_vcsel_period>
 800b520:	4603      	mov	r3, r0
 800b522:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	4613      	mov	r3, r2
 800b528:	00db      	lsls	r3, r3, #3
 800b52a:	4413      	add	r3, r2
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	099b      	lsrs	r3, r3, #6
 800b534:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b536:	7cfa      	ldrb	r2, [r7, #19]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	fb02 f303 	mul.w	r3, r2, r3
 800b53e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	099b      	lsrs	r3, r3, #6
 800b544:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b546:	68fb      	ldr	r3, [r7, #12]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b550:	b480      	push	{r7}
 800b552:	b089      	sub	sp, #36	; 0x24
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	4608      	mov	r0, r1
 800b55a:	4611      	mov	r1, r2
 800b55c:	461a      	mov	r2, r3
 800b55e:	4603      	mov	r3, r0
 800b560:	817b      	strh	r3, [r7, #10]
 800b562:	460b      	mov	r3, r1
 800b564:	813b      	strh	r3, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	4a23      	ldr	r2, [pc, #140]	; (800b610 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b584:	fb82 1203 	smull	r1, r2, r2, r3
 800b588:	1192      	asrs	r2, r2, #6
 800b58a:	17db      	asrs	r3, r3, #31
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b590:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da03      	bge.n	800b5a0 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b598:	897b      	ldrh	r3, [r7, #10]
 800b59a:	425b      	negs	r3, r3
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b5a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da03      	bge.n	800b5b0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b5a8:	893b      	ldrh	r3, [r7, #8]
 800b5aa:	425b      	negs	r3, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b5b0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b5b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	015b      	lsls	r3, r3, #5
 800b5bc:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	4a13      	ldr	r2, [pc, #76]	; (800b610 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b5c2:	fb82 1203 	smull	r1, r2, r2, r3
 800b5c6:	1192      	asrs	r2, r2, #6
 800b5c8:	17db      	asrs	r3, r3, #31
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b5d6:	79fa      	ldrb	r2, [r7, #7]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	fb02 f303 	mul.w	r3, r2, r3
 800b5de:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	3310      	adds	r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	da00      	bge.n	800b5ea <VL53L1_calc_range_ignore_threshold+0x9a>
 800b5e8:	331f      	adds	r3, #31
 800b5ea:	115b      	asrs	r3, r3, #5
 800b5ec:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f4:	db03      	blt.n	800b5fe <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b5fa:	83fb      	strh	r3, [r7, #30]
 800b5fc:	e001      	b.n	800b602 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b602:	8bfb      	ldrh	r3, [r7, #30]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3724      	adds	r7, #36	; 0x24
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr
 800b610:	10624dd3 	.word	0x10624dd3

0800b614 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d102      	bne.n	800b62e <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	e008      	b.n	800b640 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	031a      	lsls	r2, r3, #12
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	085b      	lsrs	r3, r3, #1
 800b636:	441a      	add	r2, r3
		timeout_mclks =
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b63e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b640:	68fb      	ldr	r3, [r7, #12]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff ffd6 	bl	800b614 <VL53L1_calc_timeout_mclks>
 800b668:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 f887 	bl	800b77e <VL53L1_encode_timeout>
 800b670:	4603      	mov	r3, r0
 800b672:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b674:	897b      	ldrh	r3, [r7, #10]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3710      	adds	r7, #16
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b67e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b68a:	2100      	movs	r1, #0
 800b68c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b68e:	f04f 0000 	mov.w	r0, #0
 800b692:	f04f 0100 	mov.w	r1, #0
 800b696:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	2000      	movs	r0, #0
 800b69e:	4688      	mov	r8, r1
 800b6a0:	4681      	mov	r9, r0
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	fb04 f009 	mul.w	r0, r4, r9
 800b6ae:	fb08 f105 	mul.w	r1, r8, r5
 800b6b2:	4401      	add	r1, r0
 800b6b4:	fba8 2304 	umull	r2, r3, r8, r4
 800b6b8:	4419      	add	r1, r3
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b6c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b6c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6c8:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b6cc:	f143 0b00 	adc.w	fp, r3, #0
 800b6d0:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b6d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6d8:	f04f 0200 	mov.w	r2, #0
 800b6dc:	f04f 0300 	mov.w	r3, #0
 800b6e0:	0b02      	lsrs	r2, r0, #12
 800b6e2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b6e6:	0b0b      	lsrs	r3, r1, #12
 800b6e8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b6f0:	697b      	ldr	r3, [r7, #20]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	371c      	adds	r7, #28
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b6fc:	4770      	bx	lr
	...

0800b700 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b714:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b718:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b71a:	4413      	add	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	da02      	bge.n	800b72a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	e005      	b.n	800b736 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b730:	db01      	blt.n	800b736 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b732:	4b05      	ldr	r3, [pc, #20]	; (800b748 <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b734:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b73a:	68bb      	ldr	r3, [r7, #8]

}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	0003ffff 	.word	0x0003ffff

0800b74c <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	4618      	mov	r0, r3
 800b764:	f000 f837 	bl	800b7d6 <VL53L1_decode_timeout>
 800b768:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7ff ff86 	bl	800b67e <VL53L1_calc_timeout_us>
 800b772:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b774:	68bb      	ldr	r3, [r7, #8]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b77e:	b480      	push	{r7}
 800b780:	b087      	sub	sp, #28
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d017      	beq.n	800b7c8 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b79e:	e005      	b.n	800b7ac <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b7a6:	89fb      	ldrh	r3, [r7, #14]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f4      	bne.n	800b7a0 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b7b6:	89fb      	ldrh	r3, [r7, #14]
 800b7b8:	021b      	lsls	r3, r3, #8
 800b7ba:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b7c4:	4413      	add	r3, r2
 800b7c6:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b7c8:	8afb      	ldrh	r3, [r7, #22]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	4603      	mov	r3, r0
 800b7de:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b7e4:	88fb      	ldrh	r3, [r7, #6]
 800b7e6:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b7e8:	88fa      	ldrh	r2, [r7, #6]
 800b7ea:	0a12      	lsrs	r2, r2, #8
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b088      	sub	sp, #32
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b810:	2300      	movs	r3, #0
 800b812:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b820:	887b      	ldrh	r3, [r7, #2]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b826:	23f1      	movs	r3, #241	; 0xf1
 800b828:	77fb      	strb	r3, [r7, #31]
 800b82a:	e05d      	b.n	800b8e8 <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	799a      	ldrb	r2, [r3, #6]
 800b830:	887b      	ldrh	r3, [r7, #2]
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff fe5c 	bl	800b4f2 <VL53L1_calc_macro_period_us>
 800b83a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b83c:	6979      	ldr	r1, [r7, #20]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff fee8 	bl	800b614 <VL53L1_calc_timeout_mclks>
 800b844:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2bff      	cmp	r3, #255	; 0xff
 800b84a:	d901      	bls.n	800b850 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b84c:	23ff      	movs	r3, #255	; 0xff
 800b84e:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b858:	6979      	ldr	r1, [r7, #20]
 800b85a:	68b8      	ldr	r0, [r7, #8]
 800b85c:	f7ff fef7 	bl	800b64e <VL53L1_calc_encoded_timeout>
 800b860:	4603      	mov	r3, r0
 800b862:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b864:	8a7b      	ldrh	r3, [r7, #18]
 800b866:	0a1b      	lsrs	r3, r3, #8
 800b868:	b29b      	uxth	r3, r3
 800b86a:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b870:	8a7b      	ldrh	r3, [r7, #18]
 800b872:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b878:	6979      	ldr	r1, [r7, #20]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fee7 	bl	800b64e <VL53L1_calc_encoded_timeout>
 800b880:	4603      	mov	r3, r0
 800b882:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b884:	8a7b      	ldrh	r3, [r7, #18]
 800b886:	0a1b      	lsrs	r3, r3, #8
 800b888:	b29b      	uxth	r3, r3
 800b88a:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b890:	8a7b      	ldrh	r3, [r7, #18]
 800b892:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89a:	7a5a      	ldrb	r2, [r3, #9]
 800b89c:	887b      	ldrh	r3, [r7, #2]
 800b89e:	4611      	mov	r1, r2
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fe26 	bl	800b4f2 <VL53L1_calc_macro_period_us>
 800b8a6:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b8a8:	6979      	ldr	r1, [r7, #20]
 800b8aa:	68b8      	ldr	r0, [r7, #8]
 800b8ac:	f7ff fecf 	bl	800b64e <VL53L1_calc_encoded_timeout>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b8b4:	8a7b      	ldrh	r3, [r7, #18]
 800b8b6:	0a1b      	lsrs	r3, r3, #8
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b8c0:	8a7b      	ldrh	r3, [r7, #18]
 800b8c2:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b8c8:	6979      	ldr	r1, [r7, #20]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff febf 	bl	800b64e <VL53L1_calc_encoded_timeout>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b8d4:	8a7b      	ldrh	r3, [r7, #18]
 800b8d6:	0a1b      	lsrs	r3, r3, #8
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b8e0:	8a7b      	ldrh	r3, [r7, #18]
 800b8e2:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e6:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3720      	adds	r7, #32
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b8f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8f8:	b09e      	sub	sp, #120	; 0x78
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6578      	str	r0, [r7, #84]	; 0x54
 800b8fe:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b900:	2300      	movs	r3, #0
 800b902:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b906:	f04f 0200 	mov.w	r2, #0
 800b90a:	f04f 0300 	mov.w	r3, #0
 800b90e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b91e:	f04f 0200 	mov.w	r2, #0
 800b922:	f04f 0300 	mov.w	r3, #0
 800b926:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b92c:	885b      	ldrh	r3, [r3, #2]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d103      	bne.n	800b93a <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b932:	23f1      	movs	r3, #241	; 0xf1
 800b934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b938:	e0d6      	b.n	800bae8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b93c:	785b      	ldrb	r3, [r3, #1]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80d2 	beq.w	800bae8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b946:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 80cd 	bne.w	800bae8 <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b954:	2200      	movs	r2, #0
 800b956:	643b      	str	r3, [r7, #64]	; 0x40
 800b958:	647a      	str	r2, [r7, #68]	; 0x44
 800b95a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b95e:	460b      	mov	r3, r1
 800b960:	3301      	adds	r3, #1
 800b962:	623b      	str	r3, [r7, #32]
 800b964:	4613      	mov	r3, r2
 800b966:	f143 0300 	adc.w	r3, r3, #0
 800b96a:	627b      	str	r3, [r7, #36]	; 0x24
 800b96c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b970:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b976:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	2200      	movs	r2, #0
 800b97e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b980:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b984:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b988:	4602      	mov	r2, r0
 800b98a:	fb02 f203 	mul.w	r2, r2, r3
 800b98e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b990:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b994:	fb01 f303 	mul.w	r3, r1, r3
 800b998:	441a      	add	r2, r3
 800b99a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b99c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b99e:	fba3 4501 	umull	r4, r5, r3, r1
 800b9a2:	1953      	adds	r3, r2, r5
 800b9a4:	461d      	mov	r5, r3
 800b9a6:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800b9aa:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800b9ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b9b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9bc:	460b      	mov	r3, r1
 800b9be:	3301      	adds	r3, #1
 800b9c0:	61bb      	str	r3, [r7, #24]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	f143 0300 	adc.w	r3, r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
 800b9ca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b9ce:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800b9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9d4:	885b      	ldrh	r3, [r3, #2]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	2200      	movs	r2, #0
 800b9da:	633b      	str	r3, [r7, #48]	; 0x30
 800b9dc:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800b9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	fb02 f203 	mul.w	r2, r2, r3
 800b9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	fb01 f303 	mul.w	r3, r1, r3
 800b9f2:	441a      	add	r2, r3
 800b9f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	fba3 ab01 	umull	sl, fp, r3, r1
 800b9fc:	eb02 030b 	add.w	r3, r2, fp
 800ba00:	469b      	mov	fp, r3
 800ba02:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800ba06:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800ba0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	17da      	asrs	r2, r3, #31
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba12:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800ba14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba16:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ba1a:	4622      	mov	r2, r4
 800ba1c:	fb02 f203 	mul.w	r2, r2, r3
 800ba20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba22:	4629      	mov	r1, r5
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	fba2 8901 	umull	r8, r9, r2, r1
 800ba32:	444b      	add	r3, r9
 800ba34:	4699      	mov	r9, r3
 800ba36:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800ba3a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800ba3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ba42:	0fd9      	lsrs	r1, r3, #31
 800ba44:	2000      	movs	r0, #0
 800ba46:	6139      	str	r1, [r7, #16]
 800ba48:	6178      	str	r0, [r7, #20]
 800ba4a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ba4e:	4621      	mov	r1, r4
 800ba50:	1889      	adds	r1, r1, r2
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	4629      	mov	r1, r5
 800ba56:	eb43 0101 	adc.w	r1, r3, r1
 800ba5a:	60f9      	str	r1, [r7, #12]
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	f04f 0300 	mov.w	r3, #0
 800ba64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ba68:	4621      	mov	r1, r4
 800ba6a:	084a      	lsrs	r2, r1, #1
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800ba72:	4629      	mov	r1, r5
 800ba74:	104b      	asrs	r3, r1, #1
 800ba76:	4610      	mov	r0, r2
 800ba78:	4619      	mov	r1, r3
 800ba7a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ba7e:	1814      	adds	r4, r2, r0
 800ba80:	603c      	str	r4, [r7, #0]
 800ba82:	414b      	adcs	r3, r1
 800ba84:	607b      	str	r3, [r7, #4]
 800ba86:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ba8a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800ba8e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ba92:	4313      	orrs	r3, r2
 800ba94:	d009      	beq.n	800baaa <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800ba96:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ba9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba9e:	f7f4 fbbf 	bl	8000220 <__aeabi_ldivmod>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800baaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800baac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800bab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800bab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800babe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800bac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bac6:	7852      	ldrb	r2, [r2, #1]
 800bac8:	0852      	lsrs	r2, r2, #1
 800baca:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800bacc:	441a      	add	r2, r3
 800bace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800bad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800bada:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800badc:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800bade:	fb93 f2f2 	sdiv	r2, r3, r2
 800bae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800bae8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800baec:	4618      	mov	r0, r3
 800baee:	3778      	adds	r7, #120	; 0x78
 800baf0:	46bd      	mov	sp, r7
 800baf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800baf6 <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b087      	sub	sp, #28
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3318      	adds	r3, #24
 800bb04:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800bb06:	2300      	movs	r3, #0
 800bb08:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800bb18:	029b      	lsls	r3, r3, #10
 800bb1a:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800bb22:	029b      	lsls	r3, r3, #10
 800bb24:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f040 8095 	bne.w	800bc60 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800bb3c:	091b      	lsrs	r3, r3, #4
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800bb5a:	091b      	lsrs	r3, r3, #4
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800bb68:	f003 030f 	and.w	r3, r3, #15
 800bb6c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800bb78:	091b      	lsrs	r3, r3, #4
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800bb86:	f003 030f 	and.w	r3, r3, #15
 800bb8a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	da2c      	bge.n	800bbf6 <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800bba2:	091b      	lsrs	r3, r3, #4
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800bbb0:	f003 030f 	and.w	r3, r3, #15
 800bbb4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800bbc0:	091b      	lsrs	r3, r3, #4
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800bbce:	f003 030f 	and.w	r3, r3, #15
 800bbd2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800bbde:	091b      	lsrs	r3, r3, #4
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800bbec:	f003 030f 	and.w	r3, r3, #15
 800bbf0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	f340 80c2 	ble.w	800bd88 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800bc0a:	091b      	lsrs	r3, r3, #4
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800bc18:	f003 030f 	and.w	r3, r3, #15
 800bc1c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800bc28:	091b      	lsrs	r3, r3, #4
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800bc36:	f003 030f 	and.w	r3, r3, #15
 800bc3a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800bc46:	091b      	lsrs	r3, r3, #4
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800bc54:	f003 030f 	and.w	r3, r3, #15
 800bc58:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	731a      	strb	r2, [r3, #12]
 800bc5e:	e093      	b.n	800bd88 <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800bc66:	f003 030f 	and.w	r3, r3, #15
 800bc6a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800bc76:	f003 030f 	and.w	r3, r3, #15
 800bc7a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800bc86:	091b      	lsrs	r3, r3, #4
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bc94:	f003 030f 	and.w	r3, r3, #15
 800bc98:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800bca4:	091b      	lsrs	r3, r3, #4
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	da2c      	bge.n	800bd22 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800bcce:	091b      	lsrs	r3, r3, #4
 800bcd0:	b2da      	uxtb	r2, r3
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800bcdc:	f003 030f 	and.w	r3, r3, #15
 800bce0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800bcec:	091b      	lsrs	r3, r3, #4
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800bd0a:	091b      	lsrs	r3, r3, #4
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800bd18:	f003 030f 	and.w	r3, r3, #15
 800bd1c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	dd2c      	ble.n	800bd88 <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800bd34:	091b      	lsrs	r3, r3, #4
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800bd52:	091b      	lsrs	r3, r3, #4
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800bd60:	f003 030f 	and.w	r3, r3, #15
 800bd64:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800bd70:	091b      	lsrs	r3, r3, #4
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]
 800bd8c:	e007      	b.n	800bd9e <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	4413      	add	r3, r2
 800bd94:	2201      	movs	r2, #1
 800bd96:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	75fb      	strb	r3, [r7, #23]
 800bd9e:	7dfb      	ldrb	r3, [r7, #23]
 800bda0:	2b05      	cmp	r3, #5
 800bda2:	d9f4      	bls.n	800bd8e <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800bdb2:	b590      	push	{r4, r7, lr}
 800bdb4:	b093      	sub	sp, #76	; 0x4c
 800bdb6:	af04      	add	r7, sp, #16
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	60b9      	str	r1, [r7, #8]
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3318      	adds	r3, #24
 800bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800bdf2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800bdfc:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800be04:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800be0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800be10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be14:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800be16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be18:	021b      	lsls	r3, r3, #8
 800be1a:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	2b07      	cmp	r3, #7
 800be22:	d006      	beq.n	800be32 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800be28:	2b08      	cmp	r3, #8
 800be2a:	d002      	beq.n	800be32 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800be2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be30:	e0ec      	b.n	800c00c <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800be32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800be34:	2b00      	cmp	r3, #0
 800be36:	d102      	bne.n	800be3e <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800be38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800be3c:	e0e6      	b.n	800c00c <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800be3e:	2300      	movs	r3, #0
 800be40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800be44:	e0d9      	b.n	800bffa <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800be46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	214c      	movs	r1, #76	; 0x4c
 800be4e:	fb01 f303 	mul.w	r3, r1, r3
 800be52:	4413      	add	r3, r2
 800be54:	335e      	adds	r3, #94	; 0x5e
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b09      	cmp	r3, #9
 800be5a:	d00b      	beq.n	800be74 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800be5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	214c      	movs	r1, #76	; 0x4c
 800be64:	fb01 f303 	mul.w	r3, r1, r3
 800be68:	4413      	add	r3, r2
 800be6a:	335e      	adds	r3, #94	; 0x5e
 800be6c:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800be6e:	2b13      	cmp	r3, #19
 800be70:	f040 80bd 	bne.w	800bfee <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	795b      	ldrb	r3, [r3, #5]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800be7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	214c      	movs	r1, #76	; 0x4c
 800be84:	fb01 f303 	mul.w	r3, r1, r3
 800be88:	4413      	add	r3, r2
 800be8a:	335e      	adds	r3, #94	; 0x5e
 800be8c:	2217      	movs	r2, #23
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	e009      	b.n	800bea6 <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800be92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	214c      	movs	r1, #76	; 0x4c
 800be9a:	fb01 f303 	mul.w	r3, r1, r3
 800be9e:	4413      	add	r3, r2
 800bea0:	335e      	adds	r3, #94	; 0x5e
 800bea2:	2207      	movs	r2, #7
 800bea4:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800bea6:	2300      	movs	r3, #0
 800bea8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800beac:	e097      	b.n	800bfde <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800beae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	214c      	movs	r1, #76	; 0x4c
 800beb6:	fb01 f303 	mul.w	r3, r1, r3
 800beba:	4413      	add	r3, r2
 800bebc:	3354      	adds	r3, #84	; 0x54
 800bebe:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800bec0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	4613      	mov	r3, r2
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4403      	add	r3, r0
 800bed0:	3310      	adds	r3, #16
 800bed2:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800bed4:	4299      	cmp	r1, r3
 800bed6:	d915      	bls.n	800bf04 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800bed8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	214c      	movs	r1, #76	; 0x4c
 800bee0:	fb01 f303 	mul.w	r3, r1, r3
 800bee4:	4413      	add	r3, r2
 800bee6:	3354      	adds	r3, #84	; 0x54
 800bee8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800beea:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4613      	mov	r3, r2
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	4413      	add	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4403      	add	r3, r0
 800befa:	3310      	adds	r3, #16
 800befc:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800befe:	1acb      	subs	r3, r1, r3
 800bf00:	867b      	strh	r3, [r7, #50]	; 0x32
 800bf02:	e014      	b.n	800bf2e <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800bf04:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	3310      	adds	r3, #16
 800bf16:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800bf18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	204c      	movs	r0, #76	; 0x4c
 800bf20:	fb00 f303 	mul.w	r3, r0, r3
 800bf24:	440b      	add	r3, r1
 800bf26:	3354      	adds	r3, #84	; 0x54
 800bf28:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800bf2e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bf30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d24e      	bcs.n	800bfd4 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800bf36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d125      	bne.n	800bf8a <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800bf3e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800bf42:	4613      	mov	r3, r2
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800bf50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800bf54:	224c      	movs	r2, #76	; 0x4c
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	4413      	add	r3, r2
 800bf60:	3304      	adds	r3, #4
 800bf62:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800bf64:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800bf68:	f107 0217 	add.w	r2, r7, #23
 800bf6c:	9203      	str	r2, [sp, #12]
 800bf6e:	f107 021c 	add.w	r2, r7, #28
 800bf72:	9202      	str	r2, [sp, #8]
 800bf74:	f107 0218 	add.w	r2, r7, #24
 800bf78:	9201      	str	r2, [sp, #4]
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	4623      	mov	r3, r4
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	f000 f848 	bl	800c014 <VL53L1_hist_events_consistency_check>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800bf8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d115      	bne.n	800bfbe <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d112      	bne.n	800bfbe <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800bf98:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800bf9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800bfa0:	224c      	movs	r2, #76	; 0x4c
 800bfa2:	fb02 f303 	mul.w	r3, r2, r3
 800bfa6:	3310      	adds	r3, #16
 800bfa8:	683a      	ldr	r2, [r7, #0]
 800bfaa:	4413      	add	r3, r2
 800bfac:	3304      	adds	r3, #4
 800bfae:	f107 0217 	add.w	r2, r7, #23
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	f000 fb44 	bl	800c640 <VL53L1_hist_merged_pulse_check>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800bfbe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bfc2:	7df8      	ldrb	r0, [r7, #23]
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	214c      	movs	r1, #76	; 0x4c
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	4413      	add	r3, r2
 800bfce:	335e      	adds	r3, #94	; 0x5e
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800bfd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bfd8:	3301      	adds	r3, #1
 800bfda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	795b      	ldrb	r3, [r3, #5]
 800bfe2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	f4ff af61 	bcc.w	800beae <VL53L1_hist_phase_consistency_check+0xfc>
 800bfec:	e000      	b.n	800bff0 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800bfee:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bff0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bff4:	3301      	adds	r3, #1
 800bff6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	7c9b      	ldrb	r3, [r3, #18]
 800bffe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c002:	429a      	cmp	r2, r3
 800c004:	f4ff af1f 	bcc.w	800be46 <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800c008:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	373c      	adds	r7, #60	; 0x3c
 800c010:	46bd      	mov	sp, r7
 800c012:	bd90      	pop	{r4, r7, pc}

0800c014 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800c014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c018:	b0d4      	sub	sp, #336	; 0x150
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800c020:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c024:	4603      	mov	r3, r0
 800c026:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800c02a:	460b      	mov	r3, r1
 800c02c:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c030:	2300      	movs	r3, #0
 800c032:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800c036:	f04f 0200 	mov.w	r2, #0
 800c03a:	f04f 0300 	mov.w	r3, #0
 800c03e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800c042:	f04f 0200 	mov.w	r2, #0
 800c046:	f04f 0300 	mov.w	r3, #0
 800c04a:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	f04f 0300 	mov.w	r3, #0
 800c056:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800c05a:	f04f 0200 	mov.w	r2, #0
 800c05e:	f04f 0300 	mov.w	r3, #0
 800c062:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800c066:	f04f 0200 	mov.w	r2, #0
 800c06a:	f04f 0300 	mov.w	r3, #0
 800c06e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800c072:	f04f 0200 	mov.w	r2, #0
 800c076:	f04f 0300 	mov.w	r3, #0
 800c07a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800c07e:	f04f 0200 	mov.w	r2, #0
 800c082:	f04f 0300 	mov.w	r3, #0
 800c086:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800c08a:	f04f 0200 	mov.w	r2, #0
 800c08e:	f04f 0300 	mov.w	r3, #0
 800c092:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800c0a2:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c0aa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c0ae:	2209      	movs	r2, #9
 800c0b0:	701a      	strb	r2, [r3, #0]
		return status;
 800c0b2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800c0b6:	e2bd      	b.n	800c634 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800c0b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0c4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800c0c8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	f143 0300 	adc.w	r3, r3, #0
 800c0da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800c0e2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800c0e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	469a      	mov	sl, r3
 800c0f2:	4693      	mov	fp, r2
 800c0f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800c0f8:	fb0a f203 	mul.w	r2, sl, r3
 800c0fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c100:	fb0b f303 	mul.w	r3, fp, r3
 800c104:	441a      	add	r2, r3
 800c106:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c10a:	fba3 450a 	umull	r4, r5, r3, sl
 800c10e:	1953      	adds	r3, r2, r5
 800c110:	461d      	mov	r5, r3
 800c112:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800c116:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800c11a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	2200      	movs	r2, #0
 800c122:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c126:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c12a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c12e:	460b      	mov	r3, r1
 800c130:	3301      	adds	r3, #1
 800c132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c136:	4613      	mov	r3, r2
 800c138:	f143 0300 	adc.w	r3, r3, #0
 800c13c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c140:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800c144:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800c148:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c14c:	8adb      	ldrh	r3, [r3, #22]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	2200      	movs	r2, #0
 800c152:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c156:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c15a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c15e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800c162:	4622      	mov	r2, r4
 800c164:	fb02 f203 	mul.w	r2, r2, r3
 800c168:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c16c:	4629      	mov	r1, r5
 800c16e:	fb01 f303 	mul.w	r3, r1, r3
 800c172:	441a      	add	r2, r3
 800c174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c178:	4621      	mov	r1, r4
 800c17a:	fba3 8901 	umull	r8, r9, r3, r1
 800c17e:	eb02 0309 	add.w	r3, r2, r9
 800c182:	4699      	mov	r9, r3
 800c184:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800c188:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800c18c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800c190:	f04f 0000 	mov.w	r0, #0
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	0319      	lsls	r1, r3, #12
 800c19a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c19e:	0310      	lsls	r0, r2, #12
 800c1a0:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800c1a4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c1a8:	0fd9      	lsrs	r1, r3, #31
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c1b0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800c1b4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	1889      	adds	r1, r1, r2
 800c1bc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	eb43 0101 	adc.w	r1, r3, r1
 800c1c6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800c1ca:	f04f 0200 	mov.w	r2, #0
 800c1ce:	f04f 0300 	mov.w	r3, #0
 800c1d2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	084a      	lsrs	r2, r1, #1
 800c1da:	4629      	mov	r1, r5
 800c1dc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	104b      	asrs	r3, r1, #1
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800c1ec:	1814      	adds	r4, r2, r0
 800c1ee:	67bc      	str	r4, [r7, #120]	; 0x78
 800c1f0:	414b      	adcs	r3, r1
 800c1f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1f4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800c1f8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800c1fc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c200:	4313      	orrs	r3, r2
 800c202:	d009      	beq.n	800c218 <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800c204:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800c208:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800c20c:	f7f4 f808 	bl	8000220 <__aeabi_ldivmod>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800c218:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c21c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c220:	fb03 f102 	mul.w	r1, r3, r2
 800c224:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c228:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c22c:	fb02 f303 	mul.w	r3, r2, r3
 800c230:	18ca      	adds	r2, r1, r3
 800c232:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c236:	fba3 1303 	umull	r1, r3, r3, r3
 800c23a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c23e:	460b      	mov	r3, r1
 800c240:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c244:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c248:	18d3      	adds	r3, r2, r3
 800c24a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c24e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800c252:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800c256:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800c25a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c25e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c262:	6739      	str	r1, [r7, #112]	; 0x70
 800c264:	f143 0300 	adc.w	r3, r3, #0
 800c268:	677b      	str	r3, [r7, #116]	; 0x74
 800c26a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800c26e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800c272:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c276:	2b00      	cmp	r3, #0
 800c278:	da08      	bge.n	800c28c <VL53L1_hist_events_consistency_check+0x278>
 800c27a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c27e:	1851      	adds	r1, r2, r1
 800c280:	66b9      	str	r1, [r7, #104]	; 0x68
 800c282:	f143 0300 	adc.w	r3, r3, #0
 800c286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c288:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c28c:	f04f 0000 	mov.w	r0, #0
 800c290:	f04f 0100 	mov.w	r1, #0
 800c294:	0b10      	lsrs	r0, r2, #12
 800c296:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c29a:	1319      	asrs	r1, r3, #12
 800c29c:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800c2a0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	663b      	str	r3, [r7, #96]	; 0x60
 800c2aa:	667a      	str	r2, [r7, #100]	; 0x64
 800c2ac:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800c2b0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800c2b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2c0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800c2c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c2c8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	1a51      	subs	r1, r2, r1
 800c2d0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	eb63 0301 	sbc.w	r3, r3, r1
 800c2d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2da:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800c2de:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800c2e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800c2e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c2ea:	fb03 f102 	mul.w	r1, r3, r2
 800c2ee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c2f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c2f6:	fb02 f303 	mul.w	r3, r2, r3
 800c2fa:	4419      	add	r1, r3
 800c2fc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c300:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c304:	fba2 2303 	umull	r2, r3, r2, r3
 800c308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c30c:	4613      	mov	r3, r2
 800c30e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c316:	18cb      	adds	r3, r1, r3
 800c318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c31c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800c320:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800c324:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800c328:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c32c:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c330:	6539      	str	r1, [r7, #80]	; 0x50
 800c332:	f143 0300 	adc.w	r3, r3, #0
 800c336:	657b      	str	r3, [r7, #84]	; 0x54
 800c338:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800c33c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800c340:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800c344:	2b00      	cmp	r3, #0
 800c346:	da08      	bge.n	800c35a <VL53L1_hist_events_consistency_check+0x346>
 800c348:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c34c:	1851      	adds	r1, r2, r1
 800c34e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c350:	f143 0300 	adc.w	r3, r3, #0
 800c354:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c356:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c35a:	f04f 0000 	mov.w	r0, #0
 800c35e:	f04f 0100 	mov.w	r1, #0
 800c362:	0b10      	lsrs	r0, r2, #12
 800c364:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c368:	1319      	asrs	r1, r3, #12
 800c36a:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800c36e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c372:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800c376:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c382:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c386:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c38a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800c38e:	4622      	mov	r2, r4
 800c390:	fb02 f203 	mul.w	r2, r2, r3
 800c394:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c398:	4629      	mov	r1, r5
 800c39a:	fb01 f303 	mul.w	r3, r1, r3
 800c39e:	441a      	add	r2, r3
 800c3a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	fba3 1301 	umull	r1, r3, r3, r1
 800c3aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c3b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3b8:	18d3      	adds	r3, r2, r3
 800c3ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3be:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800c3c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800c3c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800c3ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c3ce:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c3d2:	6439      	str	r1, [r7, #64]	; 0x40
 800c3d4:	f143 0300 	adc.w	r3, r3, #0
 800c3d8:	647b      	str	r3, [r7, #68]	; 0x44
 800c3da:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c3de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800c3e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da08      	bge.n	800c3fc <VL53L1_hist_events_consistency_check+0x3e8>
 800c3ea:	f640 71ff 	movw	r1, #4095	; 0xfff
 800c3ee:	1851      	adds	r1, r2, r1
 800c3f0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3f2:	f143 0300 	adc.w	r3, r3, #0
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c3fc:	f04f 0000 	mov.w	r0, #0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	0b10      	lsrs	r0, r2, #12
 800c406:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c40a:	1319      	asrs	r1, r3, #12
 800c40c:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800c410:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800c414:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800c418:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	2200      	movs	r2, #0
 800c420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c424:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800c430:	4622      	mov	r2, r4
 800c432:	fb02 f203 	mul.w	r2, r2, r3
 800c436:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c43a:	4629      	mov	r1, r5
 800c43c:	fb01 f303 	mul.w	r3, r1, r3
 800c440:	441a      	add	r2, r3
 800c442:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800c446:	4621      	mov	r1, r4
 800c448:	fba3 1301 	umull	r1, r3, r3, r1
 800c44c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c450:	460b      	mov	r3, r1
 800c452:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c45a:	18d3      	adds	r3, r2, r3
 800c45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c460:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800c464:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800c468:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800c46c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c470:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800c474:	6339      	str	r1, [r7, #48]	; 0x30
 800c476:	f143 0300 	adc.w	r3, r3, #0
 800c47a:	637b      	str	r3, [r7, #52]	; 0x34
 800c47c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c480:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800c484:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c488:	4610      	mov	r0, r2
 800c48a:	4619      	mov	r1, r3
 800c48c:	2900      	cmp	r1, #0
 800c48e:	da08      	bge.n	800c4a2 <VL53L1_hist_events_consistency_check+0x48e>
 800c490:	f640 73ff 	movw	r3, #4095	; 0xfff
 800c494:	18c3      	adds	r3, r0, r3
 800c496:	62bb      	str	r3, [r7, #40]	; 0x28
 800c498:	f141 0300 	adc.w	r3, r1, #0
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c49e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c4a2:	f04f 0200 	mov.w	r2, #0
 800c4a6:	f04f 0300 	mov.w	r3, #0
 800c4aa:	0b02      	lsrs	r2, r0, #12
 800c4ac:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c4b0:	130b      	asrs	r3, r1, #12
 800c4b2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800c4b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c4ba:	1c91      	adds	r1, r2, #2
 800c4bc:	6239      	str	r1, [r7, #32]
 800c4be:	f143 0300 	adc.w	r3, r3, #0
 800c4c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c4c4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c4c8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c4cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	da06      	bge.n	800c4e2 <VL53L1_hist_events_consistency_check+0x4ce>
 800c4d4:	1cd1      	adds	r1, r2, #3
 800c4d6:	61b9      	str	r1, [r7, #24]
 800c4d8:	f143 0300 	adc.w	r3, r3, #0
 800c4dc:	61fb      	str	r3, [r7, #28]
 800c4de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4e2:	f04f 0000 	mov.w	r0, #0
 800c4e6:	f04f 0100 	mov.w	r1, #0
 800c4ea:	0890      	lsrs	r0, r2, #2
 800c4ec:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c4f0:	1099      	asrs	r1, r3, #2
 800c4f2:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fa:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	617a      	str	r2, [r7, #20]
 800c502:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c506:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c50a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c50e:	1c91      	adds	r1, r2, #2
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	f143 0300 	adc.w	r3, r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c51c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c520:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c524:	2b00      	cmp	r3, #0
 800c526:	da06      	bge.n	800c536 <VL53L1_hist_events_consistency_check+0x522>
 800c528:	1cd1      	adds	r1, r2, #3
 800c52a:	6039      	str	r1, [r7, #0]
 800c52c:	f143 0300 	adc.w	r3, r3, #0
 800c530:	607b      	str	r3, [r7, #4]
 800c532:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c536:	f04f 0000 	mov.w	r0, #0
 800c53a:	f04f 0100 	mov.w	r1, #0
 800c53e:	0890      	lsrs	r0, r2, #2
 800c540:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c544:	1099      	asrs	r1, r3, #2
 800c546:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c54a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c54e:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c550:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c554:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c556:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c55a:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c55c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c560:	4413      	add	r3, r2
 800c562:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c566:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c56a:	011b      	lsls	r3, r3, #4
 800c56c:	4618      	mov	r0, r3
 800c56e:	f002 f8c6 	bl	800e6fe <VL53L1_isqrt>
 800c572:	4603      	mov	r3, r0
 800c574:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c576:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c57a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c57c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c586:	fb03 f202 	mul.w	r2, r3, r2
 800c58a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c58e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c590:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f103 0220 	add.w	r2, r3, #32
 800c59a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c59e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c5a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	da00      	bge.n	800c5ac <VL53L1_hist_events_consistency_check+0x598>
 800c5aa:	333f      	adds	r3, #63	; 0x3f
 800c5ac:	119b      	asrs	r3, r3, #6
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c5b4:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c5b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5cc:	1a9b      	subs	r3, r3, r2
 800c5ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c5d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c5d6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	da08      	bge.n	800c5f0 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c5de:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e6:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c5e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e007      	b.n	800c600 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c5f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c5f4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c5f8:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c5fa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c5fe:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c600:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	dd0b      	ble.n	800c628 <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c610:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c614:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c616:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d204      	bcs.n	800c628 <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c61e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c622:	2214      	movs	r2, #20
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	e003      	b.n	800c630 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c628:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c62c:	2209      	movs	r2, #9
 800c62e:	701a      	strb	r2, [r3, #0]





	return status;
 800c630:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c634:	4618      	mov	r0, r3
 800c636:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c63a:	46bd      	mov	sp, r7
 800c63c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c640 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
 800c64c:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c64e:	2300      	movs	r3, #0
 800c650:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c662:	429a      	cmp	r2, r3
 800c664:	dd0b      	ble.n	800c67e <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c674:	b29b      	uxth	r3, r3
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	b29b      	uxth	r3, r3
		delta_mm =
 800c67a:	82fb      	strh	r3, [r7, #22]
 800c67c:	e00a      	b.n	800c694 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c684:	b29a      	uxth	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	b29b      	uxth	r3, r3
		delta_mm =
 800c692:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	dd09      	ble.n	800c6b0 <VL53L1_hist_merged_pulse_check+0x70>
 800c69c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	dd03      	ble.n	800c6b0 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2216      	movs	r2, #22
 800c6ac:	701a      	strb	r2, [r3, #0]
 800c6ae:	e002      	b.n	800c6b6 <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2209      	movs	r2, #9
 800c6b4:	701a      	strb	r2, [r3, #0]

	return status;
 800c6b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b08e      	sub	sp, #56	; 0x38
 800c6ca:	af04      	add	r7, sp, #16
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3318      	adds	r3, #24
 800c6de:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c6ee:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c6f0:	6a3b      	ldr	r3, [r7, #32]
 800c6f2:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c6f6:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c6fe:	2b09      	cmp	r3, #9
 800c700:	d009      	beq.n	800c716 <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c708:	2b13      	cmp	r3, #19
 800c70a:	d004      	beq.n	800c716 <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c712:	2b14      	cmp	r3, #20
 800c714:	d129      	bne.n	800c76a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d009      	beq.n	800c734 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c726:	2b13      	cmp	r3, #19
 800c728:	d004      	beq.n	800c734 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c730:	2b14      	cmp	r3, #20
 800c732:	d11a      	bne.n	800c76a <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	2209      	movs	r2, #9
 800c738:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c746:	8bb9      	ldrh	r1, [r7, #28]
 800c748:	7ff8      	ldrb	r0, [r7, #31]
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	f107 0318 	add.w	r3, r7, #24
 800c750:	9302      	str	r3, [sp, #8]
 800c752:	f107 0314 	add.w	r3, r7, #20
 800c756:	9301      	str	r3, [sp, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	4613      	mov	r3, r2
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	f7ff fc58 	bl	800c014 <VL53L1_hist_events_consistency_check>
 800c764:	4603      	mov	r3, r0
 800c766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c76a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3728      	adds	r7, #40	; 0x28
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b088      	sub	sp, #32
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c782:	2300      	movs	r3, #0
 800c784:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d019      	beq.n	800c7d6 <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f002 f90f 	bl	800e9cc <VL53L1_calc_pll_period_mm>
 800c7ae:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c7b6:	021b      	lsls	r3, r3, #8
 800c7b8:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	fb02 f303 	mul.w	r3, r2, r3
 800c7c2:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c7ca:	0bdb      	lsrs	r3, r3, #15
 800c7cc:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	b21a      	sxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c7d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3720      	adds	r7, #32
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c7e2:	b590      	push	{r4, r7, lr}
 800c7e4:	b08d      	sub	sp, #52	; 0x34
 800c7e6:	af04      	add	r7, sp, #16
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4623      	mov	r3, r4
 800c7f2:	80fb      	strh	r3, [r7, #6]
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	80bb      	strh	r3, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c818:	2300      	movs	r3, #0
 800c81a:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c820:	78b9      	ldrb	r1, [r7, #2]
 800c822:	78f8      	ldrb	r0, [r7, #3]
 800c824:	f107 030c 	add.w	r3, r7, #12
 800c828:	9303      	str	r3, [sp, #12]
 800c82a:	f107 030e 	add.w	r3, r7, #14
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	23ff      	movs	r3, #255	; 0xff
 800c83c:	22c7      	movs	r2, #199	; 0xc7
 800c83e:	f000 fa03 	bl	800cc48 <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c842:	89fb      	ldrh	r3, [r7, #14]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d050      	beq.n	800c8ea <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c848:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d04d      	beq.n	800c8ea <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c84e:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c852:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c856:	78b9      	ldrb	r1, [r7, #2]
 800c858:	78f8      	ldrb	r0, [r7, #3]
 800c85a:	f107 0308 	add.w	r3, r7, #8
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	f107 030a 	add.w	r3, r7, #10
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	4623      	mov	r3, r4
 800c872:	f000 f9e9 	bl	800cc48 <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c87a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c87c:	897b      	ldrh	r3, [r7, #10]
 800c87e:	461a      	mov	r2, r3
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	fb02 f303 	mul.w	r3, r2, r3
 800c886:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c888:	89fb      	ldrh	r3, [r7, #14]
 800c88a:	461a      	mov	r2, r3
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c892:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c896:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c898:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c89a:	893b      	ldrh	r3, [r7, #8]
 800c89c:	461a      	mov	r2, r3
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	fb02 f303 	mul.w	r3, r2, r3
 800c8a4:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c8a6:	89bb      	ldrh	r3, [r7, #12]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8b0:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c8b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8b6:	69ba      	ldr	r2, [r7, #24]
 800c8b8:	fb02 f303 	mul.w	r3, r2, r3
 800c8bc:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c8be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	fb02 f303 	mul.w	r3, r2, r3
 800c8c8:	69fa      	ldr	r2, [r7, #28]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c8ce:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c8d0:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c8d2:	4413      	add	r3, r2
 800c8d4:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d008      	beq.n	800c8ee <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	009a      	lsls	r2, r3, #2
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	fb92 f3f3 	sdiv	r3, r2, r3
 800c8e6:	61fb      	str	r3, [r7, #28]
 800c8e8:	e002      	b.n	800c8f0 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c8ea:	bf00      	nop
 800c8ec:	e000      	b.n	800c8f0 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c8ee:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	b21a      	sxth	r2, r3
 800c8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f6:	801a      	strh	r2, [r3, #0]

}
 800c8f8:	bf00      	nop
 800c8fa:	3724      	adds	r7, #36	; 0x24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd90      	pop	{r4, r7, pc}

0800c900 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	08db      	lsrs	r3, r3, #3
 800c914:	b2da      	uxtb	r2, r3
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	f003 0307 	and.w	r3, r3, #7
 800c920:	b2da      	uxtb	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	2301      	movs	r3, #1
 800c92e:	4093      	lsls	r3, r2
 800c930:	b2da      	uxtb	r2, r3
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	701a      	strb	r2, [r3, #0]

}
 800c936:	bf00      	nop
 800c938:	3714      	adds	r7, #20
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c942:	b480      	push	{r7}
 800c944:	b083      	sub	sp, #12
 800c946:	af00      	add	r7, sp, #0
 800c948:	4603      	mov	r3, r0
 800c94a:	603a      	str	r2, [r7, #0]
 800c94c:	71fb      	strb	r3, [r7, #7]
 800c94e:	460b      	mov	r3, r1
 800c950:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c952:	79fb      	ldrb	r3, [r7, #7]
 800c954:	2b07      	cmp	r3, #7
 800c956:	d90a      	bls.n	800c96e <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c958:	79bb      	ldrb	r3, [r7, #6]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	b2db      	uxtb	r3, r3
 800c964:	3b71      	subs	r3, #113	; 0x71
 800c966:	b2da      	uxtb	r2, r3
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c96c:	e00a      	b.n	800c984 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c96e:	79bb      	ldrb	r3, [r7, #6]
 800c970:	f1c3 030f 	rsb	r3, r3, #15
 800c974:	b2db      	uxtb	r3, r3
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	4413      	add	r3, r2
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	701a      	strb	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c990:	b480      	push	{r7}
 800c992:	b085      	sub	sp, #20
 800c994:	af00      	add	r7, sp, #0
 800c996:	4603      	mov	r3, r0
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c99e:	7bfb      	ldrb	r3, [r7, #15]
 800c9a0:	091b      	lsrs	r3, r3, #4
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	f003 030f 	and.w	r3, r3, #15
 800c9ae:	b2da      	uxtb	r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	701a      	strb	r2, [r3, #0]

}
 800c9b4:	bf00      	nop
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	603a      	str	r2, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800c9d0:	79bb      	ldrb	r3, [r7, #6]
 800c9d2:	011b      	lsls	r3, r3, #4
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	4413      	add	r3, r2
 800c9da:	b2da      	uxtb	r2, r3
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	701a      	strb	r2, [r3, #0]

}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60ba      	str	r2, [r7, #8]
 800c9f4:	607b      	str	r3, [r7, #4]
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73fb      	strb	r3, [r7, #15]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800ca0e:	f107 0217 	add.w	r2, r7, #23
 800ca12:	f107 0116 	add.w	r1, r7, #22
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f002 fa51 	bl	800eec0 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800ca1e:	f107 0214 	add.w	r2, r7, #20
 800ca22:	f107 0115 	add.w	r1, r7, #21
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff ffb1 	bl	800c990 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	7d7b      	ldrb	r3, [r7, #21]
 800ca34:	3301      	adds	r3, #1
 800ca36:	0fd9      	lsrs	r1, r3, #31
 800ca38:	440b      	add	r3, r1
 800ca3a:	105b      	asrs	r3, r3, #1
 800ca3c:	425b      	negs	r3, r3
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	4413      	add	r3, r2
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	b21a      	sxth	r2, r3
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	da02      	bge.n	800ca5a <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2200      	movs	r2, #0
 800ca58:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	7d7b      	ldrb	r3, [r7, #21]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	4413      	add	r3, r2
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	b21a      	sxth	r2, r3
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca76:	2b0f      	cmp	r3, #15
 800ca78:	dd02      	ble.n	800ca80 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800ca7a:	6a3b      	ldr	r3, [r7, #32]
 800ca7c:	220f      	movs	r2, #15
 800ca7e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800ca80:	7dbb      	ldrb	r3, [r7, #22]
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	7d3b      	ldrb	r3, [r7, #20]
 800ca86:	3301      	adds	r3, #1
 800ca88:	0fd9      	lsrs	r1, r3, #31
 800ca8a:	440b      	add	r3, r1
 800ca8c:	105b      	asrs	r3, r3, #1
 800ca8e:	425b      	negs	r3, r3
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	4413      	add	r3, r2
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	b21a      	sxth	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	da02      	bge.n	800caac <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	7d3b      	ldrb	r3, [r7, #20]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	4413      	add	r3, r2
 800caba:	b29b      	uxth	r3, r3
 800cabc:	b21a      	sxth	r2, r3
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac8:	2b0f      	cmp	r3, #15
 800caca:	dd02      	ble.n	800cad2 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	220f      	movs	r2, #15
 800cad0:	801a      	strh	r2, [r3, #0]
}
 800cad2:	bf00      	nop
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800cada:	b480      	push	{r7}
 800cadc:	b085      	sub	sp, #20
 800cade:	af00      	add	r7, sp, #0
 800cae0:	4603      	mov	r3, r0
 800cae2:	460a      	mov	r2, r1
 800cae4:	71fb      	strb	r3, [r7, #7]
 800cae6:	4613      	mov	r3, r2
 800cae8:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800caee:	79fb      	ldrb	r3, [r7, #7]
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800caf6:	79bb      	ldrb	r3, [r7, #6]
 800caf8:	f003 0303 	and.w	r3, r3, #3
 800cafc:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800cafe:	7bbb      	ldrb	r3, [r7, #14]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d104      	bne.n	800cb0e <VL53L1_is_aperture_location+0x34>
 800cb04:	7b7b      	ldrb	r3, [r7, #13]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d101      	bne.n	800cb0e <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d104      	bne.n	800cb1e <VL53L1_is_aperture_location+0x44>
 800cb14:	7b7b      	ldrb	r3, [r7, #13]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d101      	bne.n	800cb1e <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800cb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800cb2c:	b590      	push	{r4, r7, lr}
 800cb2e:	b08b      	sub	sp, #44	; 0x2c
 800cb30:	af02      	add	r7, sp, #8
 800cb32:	603a      	str	r2, [r7, #0]
 800cb34:	461a      	mov	r2, r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	71fb      	strb	r3, [r7, #7]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	71bb      	strb	r3, [r7, #6]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800cb6e:	f107 0416 	add.w	r4, r7, #22
 800cb72:	f107 0218 	add.w	r2, r7, #24
 800cb76:	79b9      	ldrb	r1, [r7, #6]
 800cb78:	79f8      	ldrb	r0, [r7, #7]
 800cb7a:	f107 0312 	add.w	r3, r7, #18
 800cb7e:	9301      	str	r3, [sp, #4]
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	4623      	mov	r3, r4
 800cb88:	f7ff ff30 	bl	800c9ec <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	2200      	movs	r2, #0
 800cb90:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cb92:	8afb      	ldrh	r3, [r7, #22]
 800cb94:	83bb      	strh	r3, [r7, #28]
 800cb96:	e04c      	b.n	800cc32 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cb98:	8b3b      	ldrh	r3, [r7, #24]
 800cb9a:	83fb      	strh	r3, [r7, #30]
 800cb9c:	e03d      	b.n	800cc1a <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800cb9e:	8bbb      	ldrh	r3, [r7, #28]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	8bfa      	ldrh	r2, [r7, #30]
 800cba4:	b2d1      	uxtb	r1, r2
 800cba6:	f107 0211 	add.w	r2, r7, #17
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fec9 	bl	800c942 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cbb0:	7c78      	ldrb	r0, [r7, #17]
 800cbb2:	f107 030e 	add.w	r3, r7, #14
 800cbb6:	f107 020f 	add.w	r2, r7, #15
 800cbba:	f107 0110 	add.w	r1, r7, #16
 800cbbe:	f7ff fe9f 	bl	800c900 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cbc2:	7c3b      	ldrb	r3, [r7, #16]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	4413      	add	r3, r2
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d01b      	beq.n	800cc0e <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800cbd6:	8bbb      	ldrh	r3, [r7, #28]
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	8bfa      	ldrh	r2, [r7, #30]
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	4611      	mov	r1, r2
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff ff7a 	bl	800cada <VL53L1_is_aperture_location>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cbea:	7efb      	ldrb	r3, [r7, #27]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d007      	beq.n	800cc00 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	881a      	ldrh	r2, [r3, #0]
 800cbf4:	88bb      	ldrh	r3, [r7, #4]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	801a      	strh	r2, [r3, #0]
 800cbfe:	e006      	b.n	800cc0e <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cc0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	3301      	adds	r3, #1
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	83fb      	strh	r3, [r7, #30]
 800cc1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc1e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	ddbb      	ble.n	800cb9e <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cc26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	83bb      	strh	r3, [r7, #28]
 800cc32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc36:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	ddac      	ble.n	800cb98 <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	3724      	adds	r7, #36	; 0x24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}

0800cc48 <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b08d      	sub	sp, #52	; 0x34
 800cc4c:	af02      	add	r7, sp, #8
 800cc4e:	4604      	mov	r4, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	4611      	mov	r1, r2
 800cc54:	461a      	mov	r2, r3
 800cc56:	4623      	mov	r3, r4
 800cc58:	71fb      	strb	r3, [r7, #7]
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	71bb      	strb	r3, [r7, #6]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	717b      	strb	r3, [r7, #5]
 800cc62:	4613      	mov	r3, r2
 800cc64:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800cca8:	f107 041c 	add.w	r4, r7, #28
 800ccac:	f107 021e 	add.w	r2, r7, #30
 800ccb0:	79b9      	ldrb	r1, [r7, #6]
 800ccb2:	79f8      	ldrb	r0, [r7, #7]
 800ccb4:	f107 0318 	add.w	r3, r7, #24
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	f107 031a 	add.w	r3, r7, #26
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	4623      	mov	r3, r4
 800ccc2:	f7ff fe93 	bl	800c9ec <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800ccc6:	f107 0414 	add.w	r4, r7, #20
 800ccca:	f107 0216 	add.w	r2, r7, #22
 800ccce:	7939      	ldrb	r1, [r7, #4]
 800ccd0:	7978      	ldrb	r0, [r7, #5]
 800ccd2:	f107 0310 	add.w	r3, r7, #16
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	f107 0312 	add.w	r3, r7, #18
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	4623      	mov	r3, r4
 800cce0:	f7ff fe84 	bl	800c9ec <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800cce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cce6:	2200      	movs	r2, #0
 800cce8:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800ccea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccec:	2200      	movs	r2, #0
 800ccee:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800ccf0:	8abb      	ldrh	r3, [r7, #20]
 800ccf2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ccf4:	e06c      	b.n	800cdd0 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800ccf6:	8afb      	ldrh	r3, [r7, #22]
 800ccf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ccfa:	e05d      	b.n	800cdb8 <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800ccfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd02:	b2d1      	uxtb	r1, r2
 800cd04:	f107 020f 	add.w	r2, r7, #15
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff fe1a 	bl	800c942 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800cd0e:	7bf8      	ldrb	r0, [r7, #15]
 800cd10:	f107 030c 	add.w	r3, r7, #12
 800cd14:	f107 020d 	add.w	r2, r7, #13
 800cd18:	f107 010e 	add.w	r1, r7, #14
 800cd1c:	f7ff fdf0 	bl	800c900 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
 800cd22:	461a      	mov	r2, r3
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	4413      	add	r3, r2
 800cd28:	781a      	ldrb	r2, [r3, #0]
 800cd2a:	7b3b      	ldrb	r3, [r7, #12]
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d03b      	beq.n	800cdac <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800cd34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7ff fecb 	bl	800cada <VL53L1_is_aperture_location>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800cd4a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800cd52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd54:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd56:	e002      	b.n	800cd5e <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800cd58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd5c:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cd5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cd62:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cd66:	429a      	cmp	r2, r3
 800cd68:	db19      	blt.n	800cd9e <VL53L1_calc_mm_effective_spads+0x156>
 800cd6a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cd6e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cd72:	429a      	cmp	r2, r3
 800cd74:	dc13      	bgt.n	800cd9e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cd76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800cd7a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	db0d      	blt.n	800cd9e <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800cd82:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cd86:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	dc07      	bgt.n	800cd9e <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800cd8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd90:	881a      	ldrh	r2, [r3, #0]
 800cd92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd94:	4413      	add	r3, r2
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd9a:	801a      	strh	r2, [r3, #0]
 800cd9c:	e006      	b.n	800cdac <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800cd9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cda0:	881a      	ldrh	r2, [r3, #0]
 800cda2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cda4:	4413      	add	r3, r2
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdaa:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800cdac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cdb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdbc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	dd9b      	ble.n	800ccfc <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800cdc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	3301      	adds	r3, #1
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cdd0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cdd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	dd8c      	ble.n	800ccf6 <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	372c      	adds	r7, #44	; 0x2c
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd90      	pop	{r4, r7, pc}

0800cde6 <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b086      	sub	sp, #24
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7fd ff6d 	bl	800acd8 <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	7c9a      	ldrb	r2, [r3, #18]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	3314      	adds	r3, #20
 800ce28:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	75fb      	strb	r3, [r7, #23]
 800ce2e:	e06b      	b.n	800cf08 <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800ce30:	7dfb      	ldrb	r3, [r7, #23]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d002      	beq.n	800ce3c <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d034      	beq.n	800cea4 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800ce3a:	e05f      	b.n	800cefc <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ce74:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	8a9a      	ldrh	r2, [r3, #20]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	601a      	str	r2, [r3, #0]

			break;
 800cea2:	e02b      	b.n	800cefc <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ced4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	611a      	str	r2, [r3, #16]
			break;
 800cefa:	bf00      	nop
		}

		pdata++;
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	334c      	adds	r3, #76	; 0x4c
 800cf00:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	3301      	adds	r3, #1
 800cf06:	75fb      	strb	r3, [r7, #23]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	7c9b      	ldrb	r3, [r3, #18]
 800cf0c:	7dfa      	ldrb	r2, [r7, #23]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d38e      	bcc.n	800ce30 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800cf12:	bf00      	nop
 800cf14:	bf00      	nop
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b089      	sub	sp, #36	; 0x24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cf34:	3308      	adds	r3, #8
 800cf36:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800cf3e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cf46:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800cf48:	4613      	mov	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	4413      	add	r3, r2
 800cf58:	3302      	adds	r3, #2
 800cf5a:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800cf80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3724      	adds	r7, #36	; 0x24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b08b      	sub	sp, #44	; 0x2c
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3318      	adds	r3, #24
 800cfa2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cfaa:	3308      	adds	r3, #8
 800cfac:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800cfb4:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cfbc:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800cfc4:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800cfc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfca:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800cfcc:	7bfa      	ldrb	r2, [r7, #15]
 800cfce:	6939      	ldr	r1, [r7, #16]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	440b      	add	r3, r1
 800cfda:	3306      	adds	r3, #6
 800cfdc:	2200      	movs	r2, #0
 800cfde:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cfe6:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfee:	e01a      	b.n	800d026 <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800cff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff4:	683a      	ldr	r2, [r7, #0]
 800cff6:	214c      	movs	r1, #76	; 0x4c
 800cff8:	fb01 f303 	mul.w	r3, r1, r3
 800cffc:	4413      	add	r3, r2
 800cffe:	334a      	adds	r3, #74	; 0x4a
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d004:	429a      	cmp	r2, r3
 800d006:	d209      	bcs.n	800d01c <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800d008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	214c      	movs	r1, #76	; 0x4c
 800d010:	fb01 f303 	mul.w	r3, r1, r3
 800d014:	4413      	add	r3, r2
 800d016:	334a      	adds	r3, #74	; 0x4a
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800d01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d020:	3301      	adds	r3, #1
 800d022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	7c9b      	ldrb	r3, [r3, #18]
 800d02a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d02e:	429a      	cmp	r2, r3
 800d030:	d3de      	bcc.n	800cff0 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800d032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	d103      	bne.n	800d040 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800d038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d03c:	623b      	str	r3, [r7, #32]
 800d03e:	e00e      	b.n	800d05e <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800d040:	89bb      	ldrh	r3, [r7, #12]
 800d042:	039b      	lsls	r3, r3, #14
 800d044:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800d046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d048:	6a3a      	ldr	r2, [r7, #32]
 800d04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04e:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d056:	d302      	bcc.n	800d05e <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800d058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d05c:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d05e:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800d064:	6939      	ldr	r1, [r7, #16]
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	440b      	add	r3, r1
 800d070:	3306      	adds	r3, #6
 800d072:	4602      	mov	r2, r0
 800d074:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800d076:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	372c      	adds	r7, #44	; 0x2c
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b08a      	sub	sp, #40	; 0x28
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d08e:	2300      	movs	r3, #0
 800d090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	3318      	adds	r3, #24
 800d098:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	332c      	adds	r3, #44	; 0x2c
 800d09e:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	33c2      	adds	r3, #194	; 0xc2
 800d0a4:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800d0ac:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	3302      	adds	r3, #2
 800d0b2:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d0be:	6a3b      	ldr	r3, [r7, #32]
 800d0c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d11e      	bne.n	800d110 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10b      	bne.n	800d0f0 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d05d      	beq.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	719a      	strb	r2, [r3, #6]
 800d10e:	e050      	b.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d116:	461a      	mov	r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	4413      	add	r3, r2
 800d11c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d120:	2b02      	cmp	r3, #2
 800d122:	d11e      	bne.n	800d162 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10b      	bne.n	800d142 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d034      	beq.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	719a      	strb	r2, [r3, #6]
 800d160:	e027      	b.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d168:	461a      	mov	r2, r3
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	4413      	add	r3, r2
 800d16e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d172:	2b03      	cmp	r3, #3
 800d174:	d11d      	bne.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10b      	bne.n	800d194 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800d194:	7bfb      	ldrb	r3, [r7, #15]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800d1b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d109      	bne.n	800d1ce <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	f203 3142 	addw	r1, r3, #834	; 0x342
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	6978      	ldr	r0, [r7, #20]
 800d1ca:	f7fd f921 	bl	800a410 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800d1ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3728      	adds	r7, #40	; 0x28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	b089      	sub	sp, #36	; 0x24
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3318      	adds	r3, #24
 800d1f2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800d1fa:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d103      	bne.n	800d20a <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7afa      	ldrb	r2, [r7, #11]
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	e01e      	b.n	800d248 <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	7dfb      	ldrb	r3, [r7, #23]
 800d212:	3b01      	subs	r3, #1
 800d214:	429a      	cmp	r2, r3
 800d216:	d111      	bne.n	800d23c <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	2bff      	cmp	r3, #255	; 0xff
 800d21e:	d103      	bne.n	800d228 <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2280      	movs	r2, #128	; 0x80
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	e005      	b.n	800d234 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	3301      	adds	r3, #1
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2200      	movs	r2, #0
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	e005      	b.n	800d248 <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	3301      	adds	r3, #1
 800d242:	b2da      	uxtb	r2, r3
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800d248:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3724      	adds	r7, #36	; 0x24
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800d258:	b480      	push	{r7}
 800d25a:	b087      	sub	sp, #28
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d264:	2300      	movs	r3, #0
 800d266:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d118      	bne.n	800d2a4 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	719a      	strb	r2, [r3, #6]
 800d2a2:	e03a      	b.n	800d31a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d118      	bne.n	800d2e0 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	719a      	strb	r2, [r3, #6]
 800d2de:	e01c      	b.n	800d31a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d2e6:	2b03      	cmp	r3, #3
 800d2e8:	d117      	bne.n	800d31a <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800d31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	371c      	adds	r7, #28
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b08a      	sub	sp, #40	; 0x28
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	461a      	mov	r2, r3
 800d336:	460b      	mov	r3, r1
 800d338:	72fb      	strb	r3, [r7, #11]
 800d33a:	4613      	mov	r3, r2
 800d33c:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d33e:	2300      	movs	r3, #0
 800d340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3318      	adds	r3, #24
 800d348:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800d352:	7afa      	ldrb	r2, [r7, #11]
 800d354:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d356:	4611      	mov	r1, r2
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fe f8ca 	bl	800b4f2 <VL53L1_calc_macro_period_us>
 800d35e:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800d360:	6a3b      	ldr	r3, [r7, #32]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800d366:	2301      	movs	r3, #1
 800d368:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	031b      	lsls	r3, r3, #12
 800d36e:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	085b      	lsrs	r3, r3, #1
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	4413      	add	r3, r2
 800d378:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d382:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	2bff      	cmp	r3, #255	; 0xff
 800d388:	d904      	bls.n	800d394 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	22ff      	movs	r2, #255	; 0xff
 800d38e:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800d392:	e004      	b.n	800d39e <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	7afa      	ldrb	r2, [r7, #11]
 800d3a2:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800d3a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	214b      	movs	r1, #75	; 0x4b
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f007 f9bd 	bl	8014738 <VL53L1_WrByte>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800d3c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10a      	bne.n	800d3e2 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	2160      	movs	r1, #96	; 0x60
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f007 f9ae 	bl	8014738 <VL53L1_WrByte>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d3e8:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800d3f0:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800d3f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d109      	bne.n	800d40e <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800d3fa:	f107 0214 	add.w	r2, r7, #20
 800d3fe:	2302      	movs	r3, #2
 800d400:	2178      	movs	r1, #120	; 0x78
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f007 f92c 	bl	8014660 <VL53L1_WriteMulti>
 800d408:	4603      	mov	r3, r0
 800d40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	893a      	ldrh	r2, [r7, #8]
 800d412:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800d416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d108      	bne.n	800d430 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800d41e:	893b      	ldrh	r3, [r7, #8]
 800d420:	461a      	mov	r2, r3
 800d422:	211c      	movs	r1, #28
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f007 f9b1 	bl	801478c <VL53L1_WrWord>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d434:	2b00      	cmp	r3, #0
 800d436:	d108      	bne.n	800d44a <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800d438:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d43a:	461a      	mov	r2, r3
 800d43c:	2164      	movs	r1, #100	; 0x64
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f007 f9a4 	bl	801478c <VL53L1_WrWord>
 800d444:	4603      	mov	r3, r0
 800d446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800d44a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d108      	bne.n	800d464 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800d452:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d454:	461a      	mov	r2, r3
 800d456:	2166      	movs	r1, #102	; 0x66
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f007 f997 	bl	801478c <VL53L1_WrWord>
 800d45e:	4603      	mov	r3, r0
 800d460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800d464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3728      	adds	r7, #40	; 0x28
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800d470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d474:	b0a2      	sub	sp, #136	; 0x88
 800d476:	af00      	add	r7, sp, #0
 800d478:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d47a:	2300      	movs	r3, #0
 800d47c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d482:	3318      	adds	r3, #24
 800d484:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d488:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d48c:	3308      	adds	r3, #8
 800d48e:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800d490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d492:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d496:	3318      	adds	r3, #24
 800d498:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d49a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d49c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d4a0:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800d4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a4:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800d4a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4ac:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800d4ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800d4b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d103      	bne.n	800d4c6 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d4be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d4ce:	4413      	add	r3, r2
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	461c      	mov	r4, r3
 800d4d4:	4615      	mov	r5, r2
 800d4d6:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d4da:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d4de:	4622      	mov	r2, r4
 800d4e0:	462b      	mov	r3, r5
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f04f 0100 	mov.w	r1, #0
 800d4ea:	0159      	lsls	r1, r3, #5
 800d4ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d4f0:	0150      	lsls	r0, r2, #5
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	ebb2 0804 	subs.w	r8, r2, r4
 800d4fa:	eb63 0905 	sbc.w	r9, r3, r5
 800d4fe:	f04f 0200 	mov.w	r2, #0
 800d502:	f04f 0300 	mov.w	r3, #0
 800d506:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d50a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d50e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d512:	4690      	mov	r8, r2
 800d514:	4699      	mov	r9, r3
 800d516:	eb18 0304 	adds.w	r3, r8, r4
 800d51a:	633b      	str	r3, [r7, #48]	; 0x30
 800d51c:	eb49 0305 	adc.w	r3, r9, r5
 800d520:	637b      	str	r3, [r7, #52]	; 0x34
 800d522:	f04f 0200 	mov.w	r2, #0
 800d526:	f04f 0300 	mov.w	r3, #0
 800d52a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d52e:	4629      	mov	r1, r5
 800d530:	00cb      	lsls	r3, r1, #3
 800d532:	4621      	mov	r1, r4
 800d534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d538:	4621      	mov	r1, r4
 800d53a:	00ca      	lsls	r2, r1, #3
 800d53c:	4610      	mov	r0, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d544:	2200      	movs	r2, #0
 800d546:	643b      	str	r3, [r7, #64]	; 0x40
 800d548:	647a      	str	r2, [r7, #68]	; 0x44
 800d54a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d54e:	f7f2 feb7 	bl	80002c0 <__aeabi_uldivmod>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d55a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d55e:	4622      	mov	r2, r4
 800d560:	462b      	mov	r3, r5
 800d562:	f04f 0000 	mov.w	r0, #0
 800d566:	f04f 0100 	mov.w	r1, #0
 800d56a:	0159      	lsls	r1, r3, #5
 800d56c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d570:	0150      	lsls	r0, r2, #5
 800d572:	4602      	mov	r2, r0
 800d574:	460b      	mov	r3, r1
 800d576:	ebb2 0a04 	subs.w	sl, r2, r4
 800d57a:	eb63 0b05 	sbc.w	fp, r3, r5
 800d57e:	f04f 0200 	mov.w	r2, #0
 800d582:	f04f 0300 	mov.w	r3, #0
 800d586:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d58a:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d58e:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d592:	4692      	mov	sl, r2
 800d594:	469b      	mov	fp, r3
 800d596:	eb1a 0304 	adds.w	r3, sl, r4
 800d59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d59c:	eb4b 0305 	adc.w	r3, fp, r5
 800d5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5a2:	f04f 0200 	mov.w	r2, #0
 800d5a6:	f04f 0300 	mov.w	r3, #0
 800d5aa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	00cb      	lsls	r3, r1, #3
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	00ca      	lsls	r2, r1, #3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d5ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d5ce:	f7f2 fe77 	bl	80002c0 <__aeabi_uldivmod>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d5da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5e0:	8ad2      	ldrh	r2, [r2, #22]
 800d5e2:	fb02 f303 	mul.w	r3, r2, r3
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	623b      	str	r3, [r7, #32]
 800d5ea:	627a      	str	r2, [r7, #36]	; 0x24
 800d5ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d5f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d5f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	d105      	bne.n	800d608 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d5fc:	f04f 0201 	mov.w	r2, #1
 800d600:	f04f 0300 	mov.w	r3, #0
 800d604:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d608:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	f04f 0400 	mov.w	r4, #0
 800d614:	f04f 0500 	mov.w	r5, #0
 800d618:	015d      	lsls	r5, r3, #5
 800d61a:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d61e:	0154      	lsls	r4, r2, #5
 800d620:	4622      	mov	r2, r4
 800d622:	462b      	mov	r3, r5
 800d624:	1a14      	subs	r4, r2, r0
 800d626:	61bc      	str	r4, [r7, #24]
 800d628:	eb63 0301 	sbc.w	r3, r3, r1
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d63a:	464c      	mov	r4, r9
 800d63c:	00a3      	lsls	r3, r4, #2
 800d63e:	4644      	mov	r4, r8
 800d640:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d644:	4644      	mov	r4, r8
 800d646:	00a2      	lsls	r2, r4, #2
 800d648:	4614      	mov	r4, r2
 800d64a:	461d      	mov	r5, r3
 800d64c:	4623      	mov	r3, r4
 800d64e:	181b      	adds	r3, r3, r0
 800d650:	613b      	str	r3, [r7, #16]
 800d652:	462b      	mov	r3, r5
 800d654:	eb41 0303 	adc.w	r3, r1, r3
 800d658:	617b      	str	r3, [r7, #20]
 800d65a:	f04f 0200 	mov.w	r2, #0
 800d65e:	f04f 0300 	mov.w	r3, #0
 800d662:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d666:	4629      	mov	r1, r5
 800d668:	02cb      	lsls	r3, r1, #11
 800d66a:	4621      	mov	r1, r4
 800d66c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d670:	4621      	mov	r1, r4
 800d672:	02ca      	lsls	r2, r1, #11
 800d674:	461c      	mov	r4, r3
 800d676:	4613      	mov	r3, r2
 800d678:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d67c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d680:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d684:	f7f2 fe1c 	bl	80002c0 <__aeabi_uldivmod>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d690:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	f04f 0400 	mov.w	r4, #0
 800d69c:	f04f 0500 	mov.w	r5, #0
 800d6a0:	015d      	lsls	r5, r3, #5
 800d6a2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d6a6:	0154      	lsls	r4, r2, #5
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	462b      	mov	r3, r5
 800d6ac:	1a14      	subs	r4, r2, r0
 800d6ae:	60bc      	str	r4, [r7, #8]
 800d6b0:	eb63 0301 	sbc.w	r3, r3, r1
 800d6b4:	60fb      	str	r3, [r7, #12]
 800d6b6:	f04f 0200 	mov.w	r2, #0
 800d6ba:	f04f 0300 	mov.w	r3, #0
 800d6be:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d6c2:	464c      	mov	r4, r9
 800d6c4:	00a3      	lsls	r3, r4, #2
 800d6c6:	4644      	mov	r4, r8
 800d6c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d6cc:	4644      	mov	r4, r8
 800d6ce:	00a2      	lsls	r2, r4, #2
 800d6d0:	4614      	mov	r4, r2
 800d6d2:	461d      	mov	r5, r3
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	181b      	adds	r3, r3, r0
 800d6d8:	603b      	str	r3, [r7, #0]
 800d6da:	462b      	mov	r3, r5
 800d6dc:	eb41 0303 	adc.w	r3, r1, r3
 800d6e0:	607b      	str	r3, [r7, #4]
 800d6e2:	f04f 0200 	mov.w	r2, #0
 800d6e6:	f04f 0300 	mov.w	r3, #0
 800d6ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	02cb      	lsls	r3, r1, #11
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	02ca      	lsls	r2, r1, #11
 800d6fc:	461c      	mov	r4, r3
 800d6fe:	4613      	mov	r3, r2
 800d700:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d704:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d708:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d70c:	f7f2 fdd8 	bl	80002c0 <__aeabi_uldivmod>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d71a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d71c:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d71e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d802      	bhi.n	800d72c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d728:	2202      	movs	r2, #2
 800d72a:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d72c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d730:	4618      	mov	r0, r3
 800d732:	3788      	adds	r7, #136	; 0x88
 800d734:	46bd      	mov	sp, r7
 800d736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d73c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b096      	sub	sp, #88	; 0x58
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
 800d748:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3318      	adds	r3, #24
 800d754:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d758:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d75c:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d760:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d764:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d768:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d108      	bne.n	800d782 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d776:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d101      	bne.n	800d782 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d77e:	2301      	movs	r3, #1
 800d780:	e000      	b.n	800d784 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d782:	2300      	movs	r3, #0
 800d784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d788:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d107      	bne.n	800d7a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	889b      	ldrh	r3, [r3, #4]
 800d794:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	609a      	str	r2, [r3, #8]
 800d79e:	e002      	b.n	800d7a6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	899b      	ldrh	r3, [r3, #12]
 800d7b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	89db      	ldrh	r3, [r3, #14]
 800d7b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d004      	beq.n	800d7d0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d125      	bne.n	800d81c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d2:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d021      	beq.n	800d81c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d7d8:	f107 0313 	add.w	r3, r7, #19
 800d7dc:	4619      	mov	r1, r3
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 fe44 	bl	800e46c <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d7e4:	7cfb      	ldrb	r3, [r7, #19]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d101      	bne.n	800d7ee <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d7ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d103      	bne.n	800d7fe <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	653b      	str	r3, [r7, #80]	; 0x50
 800d7fc:	e006      	b.n	800d80c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d7fe:	7cfb      	ldrb	r3, [r7, #19]
 800d800:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	3202      	adds	r2, #2
 800d806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80a:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	889b      	ldrh	r3, [r3, #4]
 800d810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	88db      	ldrh	r3, [r3, #6]
 800d818:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10a      	bne.n	800d83c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d826:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d106      	bne.n	800d83c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	795b      	ldrb	r3, [r3, #5]
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10a      	bne.n	800d85c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d846:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	795b      	ldrb	r3, [r3, #5]
 800d852:	f043 0302 	orr.w	r3, r3, #2
 800d856:	b2da      	uxtb	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d862:	2301      	movs	r3, #1
 800d864:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d108      	bne.n	800d882 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d874:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d87c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d880:	e019      	b.n	800d8b6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d882:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d886:	019b      	lsls	r3, r3, #6
 800d888:	461a      	mov	r2, r3
 800d88a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d890:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d89a:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d89c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d8a0:	019b      	lsls	r3, r3, #6
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d8b4:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d12a      	bne.n	800d916 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d8c8:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d8cc:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d0:	119b      	asrs	r3, r3, #6
 800d8d2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8da:	db02      	blt.n	800d8e2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d8e0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8e4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d8f2:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d8f6:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8fa:	119b      	asrs	r3, r3, #6
 800d8fc:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d904:	db02      	blt.n	800d90c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d90a:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d90e:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	81da      	strh	r2, [r3, #14]
 800d914:	e042      	b.n	800d99c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d13d      	bne.n	800d99c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d924:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	da00      	bge.n	800d932 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d930:	330f      	adds	r3, #15
 800d932:	111b      	asrs	r3, r3, #4
 800d934:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d93c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d942:	4413      	add	r3, r2
 800d944:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d94c:	db02      	blt.n	800d954 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d94e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d952:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d956:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d960:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d962:	1ad3      	subs	r3, r2, r3
 800d964:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d968:	4a51      	ldr	r2, [pc, #324]	; (800dab0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d96a:	fb82 1203 	smull	r1, r2, r2, r3
 800d96e:	1152      	asrs	r2, r2, #5
 800d970:	17db      	asrs	r3, r3, #31
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d97c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d982:	4413      	add	r3, r2
 800d984:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d98c:	db02      	blt.n	800d994 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d98e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d992:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d996:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	785b      	ldrb	r3, [r3, #1]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d177      	bne.n	800da94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800d9a4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d073      	beq.n	800da94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d9b8:	f107 0313 	add.w	r3, r7, #19
 800d9bc:	4619      	mov	r1, r3
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f000 fd54 	bl	800e46c <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800d9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9c6:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800d9ca:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800d9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800d9d2:	7cfb      	ldrb	r3, [r7, #19]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d041      	beq.n	800da5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d9d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d03d      	beq.n	800da5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d03a      	beq.n	800da5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9f2:	fb03 f202 	mul.w	r2, r3, r2
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9fc:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d303      	bcc.n	800da16 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2200      	movs	r2, #0
 800da12:	719a      	strb	r2, [r3, #6]
 800da14:	e022      	b.n	800da5c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800da16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da18:	6a3b      	ldr	r3, [r7, #32]
 800da1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da1e:	617b      	str	r3, [r7, #20]
				cval = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800da24:	2300      	movs	r3, #0
 800da26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800da2a:	e00e      	b.n	800da4a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800da2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	4413      	add	r3, r2
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800da34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da38:	601a      	str	r2, [r3, #0]
					pcpo++;
 800da3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3c:	3304      	adds	r3, #4
 800da3e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800da40:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800da44:	3301      	adds	r3, #1
 800da46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800da4a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	3b01      	subs	r3, #1
 800da52:	429a      	cmp	r2, r3
 800da54:	d3ea      	bcc.n	800da2c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800da56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5a:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	799b      	ldrb	r3, [r3, #6]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800da72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da74:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800da7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7e:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	789b      	ldrb	r3, [r3, #2]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d105      	bne.n	800da94 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800da94:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d002      	beq.n	800daa2 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2201      	movs	r2, #1
 800daa0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800daa2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3758      	adds	r7, #88	; 0x58
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	66666667 	.word	0x66666667

0800dab4 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800dab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab8:	b0a2      	sub	sp, #136	; 0x88
 800daba:	af02      	add	r7, sp, #8
 800dabc:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	3318      	adds	r3, #24
 800dac8:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800dad0:	3308      	adds	r3, #8
 800dad2:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800dad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dad6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800dada:	3318      	adds	r3, #24
 800dadc:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800dade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dae0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dae4:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800dae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dae8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800daec:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800daee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daf0:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800daf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800daf4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800daf8:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800dafa:	2300      	movs	r3, #0
 800dafc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800db00:	2300      	movs	r3, #0
 800db02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800db0c:	2300      	movs	r3, #0
 800db0e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800db16:	f04f 0200 	mov.w	r2, #0
 800db1a:	f04f 0300 	mov.w	r3, #0
 800db1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800db22:	2300      	movs	r3, #0
 800db24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800db44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db46:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d108      	bne.n	800db60 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800db4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800db54:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d101      	bne.n	800db60 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800db5c:	2301      	movs	r3, #1
 800db5e:	e000      	b.n	800db62 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800db60:	2300      	movs	r3, #0
 800db62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800db66:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800db6a:	4619      	mov	r1, r3
 800db6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db6e:	f000 fc7d 	bl	800e46c <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800db72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db76:	2b00      	cmp	r3, #0
 800db78:	d003      	beq.n	800db82 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800db7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d102      	bne.n	800db88 <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800db82:	2301      	movs	r3, #1
 800db84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800db88:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800db8a:	f000 fb15 	bl	800e1b8 <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800db8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00a      	beq.n	800dbac <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800db96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db9e:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800dba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dba4:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d901      	bls.n	800dbb0 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800dbac:	2301      	movs	r3, #1
 800dbae:	e000      	b.n	800dbb2 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800dbb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d006      	beq.n	800dbcc <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800dbbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbc0:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800dbc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d101      	bne.n	800dbd0 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e000      	b.n	800dbd2 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800dbd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbd8:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d10e      	bne.n	800dbfc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800dbde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00a      	beq.n	800dbfc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800dbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbe8:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800dbec:	2b09      	cmp	r3, #9
 800dbee:	d105      	bne.n	800dbfc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dbf0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e000      	b.n	800dbfe <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800dbfc:	2300      	movs	r3, #0
	run_smudge_detection =
 800dbfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800dc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc04:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800dc08:	2b09      	cmp	r3, #9
 800dc0a:	f000 80a6 	beq.w	800dd5a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800dc0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc10:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	f040 80a1 	bne.w	800dd5a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800dc18:	2302      	movs	r3, #2
 800dc1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dc24:	e02d      	b.n	800dc82 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800dc26:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dc2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc2c:	234c      	movs	r3, #76	; 0x4c
 800dc2e:	fb01 f303 	mul.w	r3, r1, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	335e      	adds	r3, #94	; 0x5e
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	d11d      	bne.n	800dc78 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800dc3c:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800dc40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc42:	234c      	movs	r3, #76	; 0x4c
 800dc44:	fb01 f303 	mul.w	r3, r1, r3
 800dc48:	4413      	add	r3, r2
 800dc4a:	335a      	adds	r3, #90	; 0x5a
 800dc4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc50:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800dc52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800dc56:	429a      	cmp	r2, r3
 800dc58:	dc03      	bgt.n	800dc62 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dc60:	e00a      	b.n	800dc78 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800dc62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d106      	bne.n	800dc78 <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800dc70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc74:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800dc78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800dc82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc84:	7c9a      	ldrb	r2, [r3, #18]
 800dc86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d3cb      	bcc.n	800dc26 <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800dc8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dc92:	2b02      	cmp	r3, #2
 800dc94:	d102      	bne.n	800dc9c <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800dc9c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800dca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dca2:	234c      	movs	r3, #76	; 0x4c
 800dca4:	fb01 f303 	mul.w	r3, r1, r3
 800dca8:	4413      	add	r3, r2
 800dcaa:	3348      	adds	r3, #72	; 0x48
 800dcac:	881b      	ldrh	r3, [r3, #0]
 800dcae:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800dcb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d150      	bne.n	800dd5a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800dcb8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dcba:	2200      	movs	r2, #0
 800dcbc:	469a      	mov	sl, r3
 800dcbe:	4693      	mov	fp, r2
 800dcc0:	4652      	mov	r2, sl
 800dcc2:	465b      	mov	r3, fp
 800dcc4:	f04f 0000 	mov.w	r0, #0
 800dcc8:	f04f 0100 	mov.w	r1, #0
 800dccc:	0159      	lsls	r1, r3, #5
 800dcce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dcd2:	0150      	lsls	r0, r2, #5
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	ebb2 040a 	subs.w	r4, r2, sl
 800dcdc:	eb63 050b 	sbc.w	r5, r3, fp
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	00ab      	lsls	r3, r5, #2
 800dcea:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dcee:	00a2      	lsls	r2, r4, #2
 800dcf0:	4614      	mov	r4, r2
 800dcf2:	461d      	mov	r5, r3
 800dcf4:	eb14 080a 	adds.w	r8, r4, sl
 800dcf8:	eb45 090b 	adc.w	r9, r5, fp
 800dcfc:	f04f 0200 	mov.w	r2, #0
 800dd00:	f04f 0300 	mov.w	r3, #0
 800dd04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dd08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dd0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dd10:	4690      	mov	r8, r2
 800dd12:	4699      	mov	r9, r3
 800dd14:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800dd18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dd1c:	f04f 0200 	mov.w	r2, #0
 800dd20:	f04f 0300 	mov.w	r3, #0
 800dd24:	024b      	lsls	r3, r1, #9
 800dd26:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800dd2a:	0242      	lsls	r2, r0, #9
 800dd2c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800dd30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd34:	2200      	movs	r2, #0
 800dd36:	61bb      	str	r3, [r7, #24]
 800dd38:	61fa      	str	r2, [r7, #28]
 800dd3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd3e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800dd42:	4621      	mov	r1, r4
 800dd44:	428a      	cmp	r2, r1
 800dd46:	4629      	mov	r1, r5
 800dd48:	418b      	sbcs	r3, r1
 800dd4a:	d203      	bcs.n	800dd54 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dd52:	e002      	b.n	800dd5a <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800dd5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f000 810b 	beq.w	800df7a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800dd64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd66:	2200      	movs	r2, #0
 800dd68:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800dd6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd6c:	f7ff fb80 	bl	800d470 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800dd70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd72:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800dd78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800dd84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd86:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800dd8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd90:	1ad2      	subs	r2, r2, r3
 800dd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd94:	4413      	add	r3, r2
 800dd96:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800dd98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	da02      	bge.n	800dda4 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800dd9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda0:	425b      	negs	r3, r3
 800dda2:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800dda4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddac:	4293      	cmp	r3, r2
 800ddae:	dd0c      	ble.n	800ddca <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ddb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800ddb4:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ddb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	da03      	bge.n	800ddc4 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800ddbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	709a      	strb	r2, [r3, #2]
 800ddc2:	e002      	b.n	800ddca <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800ddc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800ddca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd2:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800ddd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddda:	695b      	ldr	r3, [r3, #20]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d906      	bls.n	800ddee <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800dde0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde2:	2201      	movs	r2, #1
 800dde4:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800dde6:	2302      	movs	r3, #2
 800dde8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ddec:	e014      	b.n	800de18 <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800ddee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddf0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ddf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	6139      	str	r1, [r7, #16]
 800ddfa:	6178      	str	r0, [r7, #20]
 800ddfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800de00:	4621      	mov	r1, r4
 800de02:	1851      	adds	r1, r2, r1
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	4629      	mov	r1, r5
 800de08:	eb43 0101 	adc.w	r1, r3, r1
 800de0c:	60f9      	str	r1, [r7, #12]
 800de0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800de14:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800de18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	429a      	cmp	r2, r3
 800de22:	d202      	bcs.n	800de2a <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800de24:	2301      	movs	r3, #1
 800de26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800de2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800de30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2200      	movs	r2, #0
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	607a      	str	r2, [r7, #4]
 800de3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de3e:	f7f2 fa3f 	bl	80002c0 <__aeabi_uldivmod>
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
		xtalk_offset_out =
 800de46:	4613      	mov	r3, r2
 800de48:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800de4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	1ad2      	subs	r2, r2, r3
 800de50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de52:	4413      	add	r3, r2
 800de54:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800de56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de58:	2b00      	cmp	r3, #0
 800de5a:	da02      	bge.n	800de62 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800de5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de5e:	425b      	negs	r3, r3
 800de60:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800de62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de66:	2b00      	cmp	r3, #0
 800de68:	d112      	bne.n	800de90 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800de6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800de70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de72:	4293      	cmp	r3, r2
 800de74:	db0c      	blt.n	800de90 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800de76:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800de78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800de7a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800de7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de7e:	429a      	cmp	r2, r3
 800de80:	da03      	bge.n	800de8a <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800de82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de84:	2201      	movs	r2, #1
 800de86:	70da      	strb	r2, [r3, #3]
 800de88:	e002      	b.n	800de90 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800de8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de8c:	2202      	movs	r2, #2
 800de8e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800de90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800de94:	2b00      	cmp	r3, #0
 800de96:	d108      	bne.n	800deaa <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800de98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800de9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dea0:	4293      	cmp	r3, r2
 800dea2:	da02      	bge.n	800deaa <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800dea4:	2302      	movs	r3, #2
 800dea6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800deaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deac:	2200      	movs	r2, #0
 800deae:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800deb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d112      	bne.n	800dede <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800deb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800deba:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00e      	beq.n	800dede <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800dec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dec2:	6a1b      	ldr	r3, [r3, #32]
 800dec4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800dec8:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800decc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dece:	429a      	cmp	r2, r3
 800ded0:	d905      	bls.n	800dede <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800ded2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ded4:	2201      	movs	r2, #1
 800ded6:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800ded8:	2302      	movs	r3, #2
 800deda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800dede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee0:	7c1b      	ldrb	r3, [r3, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800dee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee8:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800deea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800deec:	429a      	cmp	r2, r3
 800deee:	d902      	bls.n	800def6 <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800def0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800def6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800def8:	7c1b      	ldrb	r3, [r3, #16]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d107      	bne.n	800df0e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800defe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df00:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800df02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df04:	429a      	cmp	r2, r3
 800df06:	d202      	bcs.n	800df0e <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800df08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800df0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df10:	089b      	lsrs	r3, r3, #2
 800df12:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800df14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800df1a:	d301      	bcc.n	800df20 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800df1c:	4b3e      	ldr	r3, [pc, #248]	; (800e018 <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800df1e:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800df20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10d      	bne.n	800df44 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800df28:	2300      	movs	r3, #0
 800df2a:	9301      	str	r3, [sp, #4]
 800df2c:	2301      	movs	r3, #1
 800df2e:	9300      	str	r3, [sp, #0]
 800df30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df38:	f7ff fc00 	bl	800d73c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800df3c:	2302      	movs	r3, #2
 800df3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800df42:	e009      	b.n	800df58 <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800df44:	2301      	movs	r3, #1
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	2301      	movs	r3, #1
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800df52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df54:	f7ff fbf2 	bl	800d73c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800df58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d10c      	bne.n	800df7a <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800df60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800df62:	f04f 0200 	mov.w	r2, #0
 800df66:	f04f 0300 	mov.w	r3, #0
 800df6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800df6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800df74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df76:	2200      	movs	r2, #0
 800df78:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800df80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df84:	2b01      	cmp	r3, #1
 800df86:	d140      	bne.n	800e00a <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800df88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df8a:	691b      	ldr	r3, [r3, #16]
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df90:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800df92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df94:	691a      	ldr	r2, [r3, #16]
 800df96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d202      	bcs.n	800dfa4 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800dfa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa8:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800dfaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d110      	bne.n	800dfd4 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfbe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dfc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc2:	f7ff fbbb 	bl	800d73c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800dfc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfc8:	2202      	movs	r2, #2
 800dfca:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800dfcc:	2302      	movs	r3, #2
 800dfce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800dfd2:	e009      	b.n	800dfe8 <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	9301      	str	r3, [sp, #4]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfe0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dfe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfe4:	f7ff fbaa 	bl	800d73c <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800dfe8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	d10c      	bne.n	800e00a <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800dff0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800dff2:	f04f 0200 	mov.w	r2, #0
 800dff6:	f04f 0300 	mov.w	r3, #0
 800dffa:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800dffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800e004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e006:	2200      	movs	r2, #0
 800e008:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800e00a:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3780      	adds	r7, #128	; 0x80
 800e012:	46bd      	mov	sp, r7
 800e014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e018:	0003ffff 	.word	0x0003ffff

0800e01c <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e024:	2300      	movs	r3, #0
 800e026:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3318      	adds	r3, #24
 800e02c:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800e034:	3308      	adds	r3, #8
 800e036:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e056:	2200      	movs	r2, #0
 800e058:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e062:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e066:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e070:	461a      	mov	r2, r3
 800e072:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e076:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e080:	461a      	mov	r2, r3
 800e082:	2300      	movs	r3, #0
 800e084:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e09a:	461a      	mov	r2, r3
 800e09c:	23c8      	movs	r3, #200	; 0xc8
 800e09e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0ae:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0be:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4b3a      	ldr	r3, [pc, #232]	; (800e1b4 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800e0cc:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e0dc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0f6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e100:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e104:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e11a:	461a      	mov	r2, r3
 800e11c:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800e120:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e12a:	461a      	mov	r2, r3
 800e12c:	230a      	movs	r3, #10
 800e12e:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e138:	461a      	mov	r2, r3
 800e13a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e13e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e148:	f44f 7261 	mov.w	r2, #900	; 0x384
 800e14c:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e156:	461a      	mov	r2, r3
 800e158:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e15c:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e166:	461a      	mov	r2, r3
 800e168:	2300      	movs	r3, #0
 800e16a:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e174:	461a      	mov	r2, r3
 800e176:	2300      	movs	r3, #0
 800e178:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800e182:	3310      	adds	r3, #16
 800e184:	4619      	mov	r1, r3
 800e186:	f04f 0200 	mov.w	r2, #0
 800e18a:	f04f 0300 	mov.w	r3, #0
 800e18e:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e198:	461a      	mov	r2, r3
 800e19a:	2300      	movs	r3, #0
 800e19c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f809 	bl	800e1b8 <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800e1a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	000ff800 	.word	0x000ff800

0800e1b8 <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800e1ca:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	2200      	movs	r2, #0
 800e200:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	2200      	movs	r2, #0
 800e206:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800e208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e220:	2300      	movs	r3, #0
 800e222:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3318      	adds	r3, #24
 800e228:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e230:	461a      	mov	r2, r3
 800e232:	2300      	movs	r3, #0
 800e234:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e23e:	2200      	movs	r2, #0
 800e240:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800e256:	3308      	adds	r3, #8
 800e258:	2218      	movs	r2, #24
 800e25a:	2100      	movs	r1, #0
 800e25c:	4618      	mov	r0, r3
 800e25e:	f00b f9dd 	bl	801961c <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800e262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800e26e:	b480      	push	{r7}
 800e270:	b085      	sub	sp, #20
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e276:	2300      	movs	r3, #0
 800e278:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3318      	adds	r3, #24
 800e27e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e286:	2203      	movs	r2, #3
 800e288:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e292:	2200      	movs	r2, #0
 800e294:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2da:	461a      	mov	r2, r3
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800e2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800e2fe:	b480      	push	{r7}
 800e300:	b085      	sub	sp, #20
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e306:	2300      	movs	r3, #0
 800e308:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3318      	adds	r3, #24
 800e30e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e316:	22ff      	movs	r2, #255	; 0xff
 800e318:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e322:	2200      	movs	r2, #0
 800e324:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e32e:	461a      	mov	r2, r3
 800e330:	2300      	movs	r3, #0
 800e332:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e33c:	2200      	movs	r2, #0
 800e33e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e348:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e356:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e366:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d007      	beq.n	800e37e <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e374:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800e386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800e396:	b480      	push	{r7}
 800e398:	b087      	sub	sp, #28
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	60f8      	str	r0, [r7, #12]
 800e39e:	60b9      	str	r1, [r7, #8]
 800e3a0:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	229b      	movs	r2, #155	; 0x9b
 800e3b6:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800e3b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	371c      	adds	r7, #28
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3318      	adds	r3, #24
 800e3d4:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3e6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e3f6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800e400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e404:	b2da      	uxtb	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800e412:	f003 0303 	and.w	r3, r3, #3
 800e416:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e41e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800e426:	4413      	add	r3, r2
 800e428:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2201      	movs	r2, #1
 800e434:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e43e:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e448:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e452:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800e45c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b087      	sub	sp, #28
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3318      	adds	r3, #24
 800e47a:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800e47c:	2300      	movs	r3, #0
 800e47e:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800e48a:	2b07      	cmp	r3, #7
 800e48c:	bf0c      	ite	eq
 800e48e:	2301      	moveq	r3, #1
 800e490:	2300      	movne	r3, #0
 800e492:	b2db      	uxtb	r3, r3
 800e494:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e496:	2300      	movs	r3, #0
 800e498:	75fb      	strb	r3, [r7, #23]
 800e49a:	e019      	b.n	800e4d0 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800e49c:	7df9      	ldrb	r1, [r7, #23]
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	6938      	ldr	r0, [r7, #16]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	0052      	lsls	r2, r2, #1
 800e4a6:	441a      	add	r2, r3
 800e4a8:	0153      	lsls	r3, r2, #5
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	440b      	add	r3, r1
 800e4b2:	019b      	lsls	r3, r3, #6
 800e4b4:	4413      	add	r3, r2
 800e4b6:	4403      	add	r3, r0
 800e4b8:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e4bc:	3314      	adds	r3, #20
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	dd02      	ble.n	800e4ca <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e4c4:	7dbb      	ldrb	r3, [r7, #22]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e4ca:	7dfb      	ldrb	r3, [r7, #23]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	75fb      	strb	r3, [r7, #23]
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
 800e4d2:	2b05      	cmp	r3, #5
 800e4d4:	d9e2      	bls.n	800e49c <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	7dba      	ldrb	r2, [r7, #22]
 800e4da:	701a      	strb	r2, [r3, #0]

	return status;
 800e4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d005      	beq.n	800e50c <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e500:	88fb      	ldrh	r3, [r7, #6]
 800e502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e506:	fb92 f3f3 	sdiv	r3, r2, r3
 800e50a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e50c:	68fb      	ldr	r3, [r7, #12]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr

0800e51a <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e51a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e51e:	b089      	sub	sp, #36	; 0x24
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	f04f 0300 	mov.w	r3, #0
 800e532:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	fb02 f303 	mul.w	r3, r2, r3
 800e542:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	0b1b      	lsrs	r3, r3, #12
 800e548:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2200      	movs	r2, #0
 800e54e:	469a      	mov	sl, r3
 800e550:	4693      	mov	fp, r2
 800e552:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	fb02 f303 	mul.w	r3, r2, r3
 800e55e:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	091b      	lsrs	r3, r3, #4
 800e564:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2200      	movs	r2, #0
 800e56a:	4698      	mov	r8, r3
 800e56c:	4691      	mov	r9, r2
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	fb08 f203 	mul.w	r2, r8, r3
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	fb09 f303 	mul.w	r3, r9, r3
 800e57a:	4413      	add	r3, r2
 800e57c:	69ba      	ldr	r2, [r7, #24]
 800e57e:	fba2 4508 	umull	r4, r5, r2, r8
 800e582:	442b      	add	r3, r5
 800e584:	461d      	mov	r5, r3
 800e586:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e58a:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e58e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e592:	f04f 0200 	mov.w	r2, #0
 800e596:	f04f 0300 	mov.w	r3, #0
 800e59a:	0b02      	lsrs	r2, r0, #12
 800e59c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e5a0:	0b0b      	lsrs	r3, r1, #12
 800e5a2:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e5a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d305      	bcc.n	800e5ba <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b2:	f04f 0300 	mov.w	r3, #0
 800e5b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e5be:	697b      	ldr	r3, [r7, #20]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3724      	adds	r7, #36	; 0x24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e5ca:	4770      	bx	lr

0800e5cc <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5d0:	b096      	sub	sp, #88	; 0x58
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	627a      	str	r2, [r7, #36]	; 0x24
 800e5da:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e5dc:	f04f 0200 	mov.w	r2, #0
 800e5e0:	f04f 0300 	mov.w	r3, #0
 800e5e4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e5e8:	f04f 0200 	mov.w	r2, #0
 800e5ec:	f04f 0300 	mov.w	r3, #0
 800e5f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	17da      	asrs	r2, r3, #31
 800e5fc:	469a      	mov	sl, r3
 800e5fe:	4693      	mov	fp, r2
 800e600:	4652      	mov	r2, sl
 800e602:	465b      	mov	r3, fp
 800e604:	f04f 0000 	mov.w	r0, #0
 800e608:	f04f 0100 	mov.w	r1, #0
 800e60c:	0159      	lsls	r1, r3, #5
 800e60e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e612:	0150      	lsls	r0, r2, #5
 800e614:	4602      	mov	r2, r0
 800e616:	460b      	mov	r3, r1
 800e618:	ebb2 040a 	subs.w	r4, r2, sl
 800e61c:	eb63 050b 	sbc.w	r5, r3, fp
 800e620:	f04f 0200 	mov.w	r2, #0
 800e624:	f04f 0300 	mov.w	r3, #0
 800e628:	00ab      	lsls	r3, r5, #2
 800e62a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e62e:	00a2      	lsls	r2, r4, #2
 800e630:	4614      	mov	r4, r2
 800e632:	461d      	mov	r5, r3
 800e634:	eb14 080a 	adds.w	r8, r4, sl
 800e638:	eb45 090b 	adc.w	r9, r5, fp
 800e63c:	f04f 0200 	mov.w	r2, #0
 800e640:	f04f 0300 	mov.w	r3, #0
 800e644:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e648:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e64c:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e650:	4690      	mov	r8, r2
 800e652:	4699      	mov	r9, r3
 800e654:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e658:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00d      	beq.n	800e67a <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e65e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e660:	2200      	movs	r2, #0
 800e662:	61bb      	str	r3, [r7, #24]
 800e664:	61fa      	str	r2, [r7, #28]
 800e666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e66a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e66e:	f7f1 fe27 	bl	80002c0 <__aeabi_uldivmod>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d02a      	beq.n	800e6d6 <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e680:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e684:	f04f 0200 	mov.w	r2, #0
 800e688:	f04f 0300 	mov.w	r3, #0
 800e68c:	02cb      	lsls	r3, r1, #11
 800e68e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e692:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e696:	0849      	lsrs	r1, r1, #1
 800e698:	2000      	movs	r0, #0
 800e69a:	6139      	str	r1, [r7, #16]
 800e69c:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e69e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	1851      	adds	r1, r2, r1
 800e6a6:	6039      	str	r1, [r7, #0]
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	eb43 0101 	adc.w	r1, r3, r1
 800e6ae:	6079      	str	r1, [r7, #4]
 800e6b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e6b4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	60fa      	str	r2, [r7, #12]
 800e6c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6c4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e6c8:	f7f1 fdfa 	bl	80002c0 <__aeabi_uldivmod>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e6d4:	e00b      	b.n	800e6ee <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e6d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e6da:	f04f 0200 	mov.w	r2, #0
 800e6de:	f04f 0300 	mov.w	r3, #0
 800e6e2:	02cb      	lsls	r3, r1, #11
 800e6e4:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e6e8:	02c2      	lsls	r2, r0, #11
 800e6ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e6ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f0:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3758      	adds	r7, #88	; 0x58
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e6fe <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b085      	sub	sp, #20
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e70a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e70e:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e710:	e002      	b.n	800e718 <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	089b      	lsrs	r3, r3, #2
 800e716:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d8f8      	bhi.n	800e712 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e720:	e017      	b.n	800e752 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	4413      	add	r3, r2
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d30b      	bcc.n	800e746 <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	4413      	add	r3, r2
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	085b      	lsrs	r3, r3, #1
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	e002      	b.n	800e74c <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	085b      	lsrs	r3, r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	089b      	lsrs	r3, r3, #2
 800e750:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1e4      	bne.n	800e722 <VL53L1_isqrt+0x24>
	}

	return res;
 800e758:	68fb      	ldr	r3, [r7, #12]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3714      	adds	r7, #20
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr

0800e766 <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b084      	sub	sp, #16
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 faa5 	bl	800eccc <VL53L1_decode_vcsel_period>
 800e782:	4603      	mov	r3, r0
	period = 2048 *
 800e784:	02db      	lsls	r3, r3, #11
 800e786:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e792:	461a      	mov	r2, r3
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	4413      	add	r3, r2
 800e798:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7a0:	02db      	lsls	r3, r3, #11
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7ae:	02db      	lsls	r3, r3, #11
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d009      	beq.n	800e7d0 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	fb01 f202 	mul.w	r2, r1, r2
 800e7ca:	1a9b      	subs	r3, r3, r2
 800e7cc:	60fb      	str	r3, [r7, #12]
 800e7ce:	e001      	b.n	800e7d4 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
 800e7ee:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e7f8:	6838      	ldr	r0, [r7, #0]
 800e7fa:	f000 fb90 	bl	800ef1e <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff ff7a 	bl	800e6fe <VL53L1_isqrt>
 800e80a:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e80c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	fb02 f303 	mul.w	r3, r2, r3
 800e816:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	3307      	adds	r3, #7
 800e81c:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	111b      	asrs	r3, r3, #4
 800e822:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	4413      	add	r3, r2
 800e82e:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	2200      	movs	r2, #0
 800e834:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e840:	2300      	movs	r3, #0
 800e842:	73fb      	strb	r3, [r7, #15]
 800e844:	e01e      	b.n	800e884 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e846:	7bfa      	ldrb	r2, [r7, #15]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	3206      	adds	r2, #6
 800e84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	429a      	cmp	r2, r3
 800e854:	dd13      	ble.n	800e87e <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e85c:	7bf9      	ldrb	r1, [r7, #15]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	3106      	adds	r1, #6
 800e862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e866:	441a      	add	r2, r3
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e874:	3301      	adds	r3, #1
 800e876:	b2da      	uxtb	r2, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	3301      	adds	r3, #1
 800e882:	73fb      	strb	r3, [r7, #15]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	7a9b      	ldrb	r3, [r3, #10]
 800e888:	7bfa      	ldrb	r2, [r7, #15]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d3db      	bcc.n	800e846 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01c      	beq.n	800e8d2 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e8b0:	0852      	lsrs	r2, r2, #1
 800e8b2:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e8b4:	441a      	add	r2, r3
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e8c8:	fb93 f2f2 	sdiv	r2, r3, r2
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e8da:	b480      	push	{r7}
 800e8dc:	b085      	sub	sp, #20
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	7b1b      	ldrb	r3, [r3, #12]
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b07      	cmp	r3, #7
 800e8f8:	d13a      	bne.n	800e970 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e8fe:	2300      	movs	r3, #0
 800e900:	73bb      	strb	r3, [r7, #14]
 800e902:	e01f      	b.n	800e944 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e904:	7bbb      	ldrb	r3, [r7, #14]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	4413      	add	r3, r2
 800e90a:	7b1b      	ldrb	r3, [r3, #12]
 800e90c:	f003 0307 	and.w	r3, r3, #7
 800e910:	2b07      	cmp	r3, #7
 800e912:	d014      	beq.n	800e93e <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e914:	7bba      	ldrb	r2, [r7, #14]
 800e916:	7b7b      	ldrb	r3, [r7, #13]
 800e918:	6879      	ldr	r1, [r7, #4]
 800e91a:	440a      	add	r2, r1
 800e91c:	7b11      	ldrb	r1, [r2, #12]
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	4413      	add	r3, r2
 800e922:	460a      	mov	r2, r1
 800e924:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e926:	7bba      	ldrb	r2, [r7, #14]
 800e928:	7b7b      	ldrb	r3, [r7, #13]
 800e92a:	6879      	ldr	r1, [r7, #4]
 800e92c:	440a      	add	r2, r1
 800e92e:	7c91      	ldrb	r1, [r2, #18]
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	4413      	add	r3, r2
 800e934:	460a      	mov	r2, r1
 800e936:	749a      	strb	r2, [r3, #18]
				i++;
 800e938:	7b7b      	ldrb	r3, [r7, #13]
 800e93a:	3301      	adds	r3, #1
 800e93c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	3301      	adds	r3, #1
 800e942:	73bb      	strb	r3, [r7, #14]
 800e944:	7bbb      	ldrb	r3, [r7, #14]
 800e946:	2b05      	cmp	r3, #5
 800e948:	d9dc      	bls.n	800e904 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e94a:	7b7b      	ldrb	r3, [r7, #13]
 800e94c:	73bb      	strb	r3, [r7, #14]
 800e94e:	e00c      	b.n	800e96a <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e950:	7bbb      	ldrb	r3, [r7, #14]
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	4413      	add	r3, r2
 800e956:	2210      	movs	r2, #16
 800e958:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e95a:	7bbb      	ldrb	r3, [r7, #14]
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	4413      	add	r3, r2
 800e960:	2200      	movs	r2, #0
 800e962:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e964:	7bbb      	ldrb	r3, [r7, #14]
 800e966:	3301      	adds	r3, #1
 800e968:	73bb      	strb	r3, [r7, #14]
 800e96a:	7bbb      	ldrb	r3, [r7, #14]
 800e96c:	2b05      	cmp	r3, #5
 800e96e:	d9ef      	bls.n	800e950 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7adb      	ldrb	r3, [r3, #11]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d023      	beq.n	800e9c0 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7adb      	ldrb	r3, [r3, #11]
 800e97c:	73fb      	strb	r3, [r7, #15]
 800e97e:	e00f      	b.n	800e9a0 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e980:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e982:	7bfb      	ldrb	r3, [r7, #15]
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	7ad2      	ldrb	r2, [r2, #11]
 800e988:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	3106      	adds	r1, #6
 800e98e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3206      	adds	r2, #6
 800e996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
 800e99c:	3301      	adds	r3, #1
 800e99e:	73fb      	strb	r3, [r7, #15]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800e9a4:	7bfa      	ldrb	r2, [r7, #15]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d3ea      	bcc.n	800e980 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	72da      	strb	r2, [r3, #11]
	}
}
 800e9c0:	bf00      	nop
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e9de:	88fb      	ldrh	r3, [r7, #6]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7ff fd83 	bl	800e4ec <VL53L1_calc_pll_period_us>
 800e9e6:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800e9ec:	f249 2257 	movw	r2, #37463	; 0x9257
 800e9f0:	fb02 f303 	mul.w	r3, r2, r3
 800e9f4:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e9fc:	0c1b      	lsrs	r3, r3, #16
 800e9fe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ea00:	68bb      	ldr	r3, [r7, #8]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b087      	sub	sp, #28
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ea18:	2307      	movs	r3, #7
 800ea1a:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea26:	db03      	blt.n	800ea30 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800ea28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ea2c:	617b      	str	r3, [r7, #20]
 800ea2e:	e004      	b.n	800ea3a <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dd01      	ble.n	800ea3a <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ea40:	dd02      	ble.n	800ea48 <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800ea42:	2303      	movs	r3, #3
 800ea44:	613b      	str	r3, [r7, #16]
 800ea46:	e001      	b.n	800ea4c <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800ea48:	2307      	movs	r3, #7
 800ea4a:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d009      	beq.n	800ea66 <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	409a      	lsls	r2, r3
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	085b      	lsrs	r3, r3, #1
 800ea5c:	441a      	add	r2, r3
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea64:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ea6c:	dd02      	ble.n	800ea74 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	011b      	lsls	r3, r3, #4
 800ea72:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea7a:	d302      	bcc.n	800ea82 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800ea7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea80:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800ea86:	89fb      	ldrh	r3, [r7, #14]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	371c      	adds	r7, #28
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d010      	beq.n	800ead4 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	021a      	lsls	r2, r3, #8
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	fa02 f303 	lsl.w	r3, r2, r3
 800eabc:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800eabe:	88fb      	ldrh	r3, [r7, #6]
 800eac0:	085b      	lsrs	r3, r3, #1
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800eaca:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800eacc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ead0:	617b      	str	r3, [r7, #20]
 800ead2:	e004      	b.n	800eade <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	fa02 f303 	lsl.w	r3, r2, r3
 800eadc:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800eade:	697a      	ldr	r2, [r7, #20]
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d901      	bls.n	800eaea <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800eaee:	8a7b      	ldrh	r3, [r7, #18]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	371c      	adds	r7, #28
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	b093      	sub	sp, #76	; 0x4c
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	461e      	mov	r6, r3
 800eb06:	4603      	mov	r3, r0
 800eb08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800eb0e:	4613      	mov	r3, r2
 800eb10:	857b      	strh	r3, [r7, #42]	; 0x2a
 800eb12:	4633      	mov	r3, r6
 800eb14:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800eb1c:	f04f 0200 	mov.w	r2, #0
 800eb20:	f04f 0300 	mov.w	r3, #0
 800eb24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800eb30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7ff fcda 	bl	800e4ec <VL53L1_calc_pll_period_us>
 800eb38:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800eb3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	623b      	str	r3, [r7, #32]
 800eb40:	627a      	str	r2, [r7, #36]	; 0x24
 800eb42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb44:	2200      	movs	r2, #0
 800eb46:	61bb      	str	r3, [r7, #24]
 800eb48:	61fa      	str	r2, [r7, #28]
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800eb50:	4602      	mov	r2, r0
 800eb52:	1a9b      	subs	r3, r3, r2
 800eb54:	613b      	str	r3, [r7, #16]
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	460a      	mov	r2, r1
 800eb5a:	eb63 0302 	sbc.w	r3, r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eb64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800eb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	469a      	mov	sl, r3
 800eb6e:	4693      	mov	fp, r2
 800eb70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb72:	fb0a f203 	mul.w	r2, sl, r3
 800eb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb78:	fb0b f303 	mul.w	r3, fp, r3
 800eb7c:	4413      	add	r3, r2
 800eb7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb80:	fba2 890a 	umull	r8, r9, r2, sl
 800eb84:	444b      	add	r3, r9
 800eb86:	4699      	mov	r9, r3
 800eb88:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800eb8c:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800eb90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	da08      	bge.n	800ebaa <VL53L1_range_maths+0xae>
 800eb98:	f240 11ff 	movw	r1, #511	; 0x1ff
 800eb9c:	1851      	adds	r1, r2, r1
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	f143 0300 	adc.w	r3, r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebaa:	f04f 0000 	mov.w	r0, #0
 800ebae:	f04f 0100 	mov.w	r1, #0
 800ebb2:	0a50      	lsrs	r0, r2, #9
 800ebb4:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ebb8:	1259      	asrs	r1, r3, #9
 800ebba:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800ebbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc0:	f249 2257 	movw	r2, #37463	; 0x9257
 800ebc4:	fb03 f202 	mul.w	r2, r3, r2
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	2100      	movs	r1, #0
 800ebcc:	fb01 f303 	mul.w	r3, r1, r3
 800ebd0:	4413      	add	r3, r2
 800ebd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd4:	f249 2157 	movw	r1, #37463	; 0x9257
 800ebd8:	fba2 4501 	umull	r4, r5, r2, r1
 800ebdc:	442b      	add	r3, r5
 800ebde:	461d      	mov	r5, r3
 800ebe0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800ebe4:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800ebe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	da07      	bge.n	800ec00 <VL53L1_range_maths+0x104>
 800ebf0:	4934      	ldr	r1, [pc, #208]	; (800ecc4 <VL53L1_range_maths+0x1c8>)
 800ebf2:	1851      	adds	r1, r2, r1
 800ebf4:	6039      	str	r1, [r7, #0]
 800ebf6:	f143 0300 	adc.w	r3, r3, #0
 800ebfa:	607b      	str	r3, [r7, #4]
 800ebfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec00:	f04f 0000 	mov.w	r0, #0
 800ec04:	f04f 0100 	mov.w	r1, #0
 800ec08:	0d90      	lsrs	r0, r2, #22
 800ec0a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800ec0e:	1599      	asrs	r1, r3, #22
 800ec10:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ec18:	4413      	add	r3, r2
 800ec1a:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800ec1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ec20:	fb02 f303 	mul.w	r3, r2, r3
 800ec24:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800ec26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec2c:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800ec2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	da01      	bge.n	800ec38 <VL53L1_range_maths+0x13c>
 800ec34:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ec38:	12db      	asrs	r3, r3, #11
 800ec3a:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800ec3c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d130      	bne.n	800eca6 <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800ec44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec46:	4613      	mov	r3, r2
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	005b      	lsls	r3, r3, #1
 800ec4e:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800ec50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	da00      	bge.n	800ec58 <VL53L1_range_maths+0x15c>
 800ec56:	3303      	adds	r3, #3
 800ec58:	109b      	asrs	r3, r3, #2
 800ec5a:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800ec5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec5e:	4b1a      	ldr	r3, [pc, #104]	; (800ecc8 <VL53L1_range_maths+0x1cc>)
 800ec60:	fb83 2301 	smull	r2, r3, r3, r1
 800ec64:	109a      	asrs	r2, r3, #2
 800ec66:	17cb      	asrs	r3, r1, #31
 800ec68:	1ad2      	subs	r2, r2, r3
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	4413      	add	r3, r2
 800ec70:	005b      	lsls	r3, r3, #1
 800ec72:	1aca      	subs	r2, r1, r3
 800ec74:	2a04      	cmp	r2, #4
 800ec76:	dc09      	bgt.n	800ec8c <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800ec78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <VL53L1_range_maths+0x1cc>)
 800ec7c:	fb82 1203 	smull	r1, r2, r2, r3
 800ec80:	1092      	asrs	r2, r2, #2
 800ec82:	17db      	asrs	r3, r3, #31
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	b21b      	sxth	r3, r3
 800ec88:	647b      	str	r3, [r7, #68]	; 0x44
 800ec8a:	e015      	b.n	800ecb8 <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8e:	4a0e      	ldr	r2, [pc, #56]	; (800ecc8 <VL53L1_range_maths+0x1cc>)
 800ec90:	fb82 1203 	smull	r1, r2, r2, r3
 800ec94:	1092      	asrs	r2, r2, #2
 800ec96:	17db      	asrs	r3, r3, #31
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	b21b      	sxth	r3, r3
 800eca2:	647b      	str	r3, [r7, #68]	; 0x44
 800eca4:	e008      	b.n	800ecb8 <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800eca6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d104      	bne.n	800ecb8 <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800ecae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecb0:	0fda      	lsrs	r2, r3, #31
 800ecb2:	4413      	add	r3, r2
 800ecb4:	105b      	asrs	r3, r3, #1
 800ecb6:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800ecb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	374c      	adds	r7, #76	; 0x4c
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc4:	003fffff 	.word	0x003fffff
 800ecc8:	66666667 	.word	0x66666667

0800eccc <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b085      	sub	sp, #20
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800ecda:	79fb      	ldrb	r3, [r7, #7]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr

0800ecf2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b083      	sub	sp, #12
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	7a5a      	ldrb	r2, [r3, #9]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685a      	ldr	r2, [r3, #4]
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	605a      	str	r2, [r3, #4]
}
 800ed62:	bf00      	nop
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b087      	sub	sp, #28
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	460b      	mov	r3, r1
 800ed78:	607a      	str	r2, [r7, #4]
 800ed7a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2203      	movs	r2, #3
 800ed84:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2203      	movs	r2, #3
 800ed8a:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2218      	movs	r2, #24
 800eda2:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800eda4:	897b      	ldrh	r3, [r7, #10]
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ee42:	2300      	movs	r3, #0
 800ee44:	82fb      	strh	r3, [r7, #22]
 800ee46:	e009      	b.n	800ee5c <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800ee48:	8afb      	ldrh	r3, [r7, #22]
 800ee4a:	8afa      	ldrh	r2, [r7, #22]
 800ee4c:	b2d1      	uxtb	r1, r2
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	4413      	add	r3, r2
 800ee52:	460a      	mov	r2, r1
 800ee54:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ee56:	8afb      	ldrh	r3, [r7, #22]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	82fb      	strh	r3, [r7, #22]
 800ee5c:	8afb      	ldrh	r3, [r7, #22]
 800ee5e:	2b05      	cmp	r3, #5
 800ee60:	d9f2      	bls.n	800ee48 <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ee62:	2300      	movs	r3, #0
 800ee64:	82fb      	strh	r3, [r7, #22]
 800ee66:	e007      	b.n	800ee78 <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800ee68:	8afb      	ldrh	r3, [r7, #22]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	2201      	movs	r2, #1
 800ee70:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800ee72:	8afb      	ldrh	r3, [r7, #22]
 800ee74:	3301      	adds	r3, #1
 800ee76:	82fb      	strh	r3, [r7, #22]
 800ee78:	8afb      	ldrh	r3, [r7, #22]
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	d9f4      	bls.n	800ee68 <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800ee7e:	2300      	movs	r3, #0
 800ee80:	82fb      	strh	r3, [r7, #22]
 800ee82:	e013      	b.n	800eeac <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800ee84:	8afa      	ldrh	r2, [r7, #22]
 800ee86:	897b      	ldrh	r3, [r7, #10]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d206      	bcs.n	800ee9a <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800ee8c:	8afa      	ldrh	r2, [r7, #22]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	3206      	adds	r2, #6
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ee98:	e005      	b.n	800eea6 <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800ee9a:	8afa      	ldrh	r2, [r7, #22]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	3206      	adds	r2, #6
 800eea0:	2100      	movs	r1, #0
 800eea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800eea6:	8afb      	ldrh	r3, [r7, #22]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	82fb      	strh	r3, [r7, #22]
 800eeac:	8afb      	ldrh	r3, [r7, #22]
 800eeae:	2b17      	cmp	r3, #23
 800eeb0:	d9e8      	bls.n	800ee84 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800eeb2:	bf00      	nop
 800eeb4:	bf00      	nop
 800eeb6:	371c      	adds	r7, #28
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	4603      	mov	r3, r0
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800eece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	da10      	bge.n	800eef8 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
 800eed8:	43db      	mvns	r3, r3
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	f003 0307 	and.w	r3, r3, #7
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	3308      	adds	r3, #8
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800eeea:	7bfb      	ldrb	r3, [r7, #15]
 800eeec:	3b80      	subs	r3, #128	; 0x80
 800eeee:	10db      	asrs	r3, r3, #3
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800eef6:	e00c      	b.n	800ef12 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	f003 0307 	and.w	r3, r3, #7
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ef04:	7bfb      	ldrb	r3, [r7, #15]
 800ef06:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ef0a:	10db      	asrs	r3, r3, #3
 800ef0c:	b2da      	uxtb	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	701a      	strb	r2, [r3, #0]
}
 800ef12:	bf00      	nop
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b085      	sub	sp, #20
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	73fb      	strb	r3, [r7, #15]
 800ef2e:	e02c      	b.n	800ef8a <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ef30:	7bfb      	ldrb	r3, [r7, #15]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ef3c:	7bf9      	ldrb	r1, [r7, #15]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3106      	adds	r1, #6
 800ef42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	db07      	blt.n	800ef5a <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ef4a:	7bfa      	ldrb	r2, [r7, #15]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3206      	adds	r2, #6
 800ef50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <VL53L1_hist_find_min_max_bin_values+0x56>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ef66:	7bf9      	ldrb	r1, [r7, #15]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	3106      	adds	r1, #6
 800ef6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	dc07      	bgt.n	800ef84 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800ef74:	7bfa      	ldrb	r2, [r7, #15]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	3206      	adds	r2, #6
 800ef7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
 800ef86:	3301      	adds	r3, #1
 800ef88:	73fb      	strb	r3, [r7, #15]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	7a9b      	ldrb	r3, [r3, #10]
 800ef8e:	7bfa      	ldrb	r2, [r7, #15]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d3cd      	bcc.n	800ef30 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ef94:	bf00      	nop
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800efa2:	b480      	push	{r7}
 800efa4:	b085      	sub	sp, #20
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	7adb      	ldrb	r3, [r3, #11]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d03a      	beq.n	800f02c <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800efc8:	2300      	movs	r3, #0
 800efca:	73fb      	strb	r3, [r7, #15]
 800efcc:	e00e      	b.n	800efec <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800efd4:	7bf9      	ldrb	r1, [r7, #15]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3106      	adds	r1, #6
 800efda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efde:	441a      	add	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800efe6:	7bfb      	ldrb	r3, [r7, #15]
 800efe8:	3301      	adds	r3, #1
 800efea:	73fb      	strb	r3, [r7, #15]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7adb      	ldrb	r3, [r3, #11]
 800eff0:	7bfa      	ldrb	r2, [r7, #15]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d3eb      	bcc.n	800efce <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	7ad2      	ldrb	r2, [r2, #11]
 800f00c:	0852      	lsrs	r2, r2, #1
 800f00e:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800f010:	441a      	add	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800f022:	fb93 f2f2 	sdiv	r2, r3, r2
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800f02c:	bf00      	nop
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800f038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f03c:	b0ca      	sub	sp, #296	; 0x128
 800f03e:	af00      	add	r7, sp, #0
 800f040:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f044:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f048:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f04c:	4603      	mov	r3, r0
 800f04e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800f052:	2300      	movs	r3, #0
 800f054:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800f06a:	f04f 0200 	mov.w	r2, #0
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800f07c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f080:	2300      	movs	r3, #0
 800f082:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800f084:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f088:	2300      	movs	r3, #0
 800f08a:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800f08c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f090:	2300      	movs	r3, #0
 800f092:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800f094:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f098:	2300      	movs	r3, #0
 800f09a:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800f09c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800f0a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800f0ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800f0b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800f0bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800f0c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f000 80e1 	beq.w	800f294 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800f0d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f000 80da 	beq.w	800f294 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800f0e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff f9ff 	bl	800e4ec <VL53L1_calc_pll_period_us>
 800f0ee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800f0f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800f100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f108:	2110      	movs	r1, #16
 800f10a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f10e:	f7ff fa04 	bl	800e51a <VL53L1_duration_maths>
 800f112:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800f114:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f118:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800f11a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f11e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f122:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4619      	mov	r1, r3
 800f12a:	4610      	mov	r0, r2
 800f12c:	f7ff fc6d 	bl	800ea0a <VL53L1_rate_maths>
 800f130:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800f132:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f136:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800f138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f13c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800f140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f144:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800f148:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f7ff fa3c 	bl	800e5cc <VL53L1_events_per_spad_maths>
 800f154:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800f156:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f15a:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800f15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f160:	8adb      	ldrh	r3, [r3, #22]
 800f162:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f166:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800f168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f16c:	8adb      	ldrh	r3, [r3, #22]
 800f16e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f172:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800f174:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f178:	695b      	ldr	r3, [r3, #20]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f000 808a 	beq.w	800f294 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800f180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f184:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800f186:	b29b      	uxth	r3, r3
 800f188:	2200      	movs	r2, #0
 800f18a:	461c      	mov	r4, r3
 800f18c:	4615      	mov	r5, r2
 800f18e:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800f192:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f196:	4622      	mov	r2, r4
 800f198:	462b      	mov	r3, r5
 800f19a:	f04f 0000 	mov.w	r0, #0
 800f19e:	f04f 0100 	mov.w	r1, #0
 800f1a2:	0159      	lsls	r1, r3, #5
 800f1a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f1a8:	0150      	lsls	r0, r2, #5
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	ebb2 0804 	subs.w	r8, r2, r4
 800f1b2:	eb63 0905 	sbc.w	r9, r3, r5
 800f1b6:	f04f 0200 	mov.w	r2, #0
 800f1ba:	f04f 0300 	mov.w	r3, #0
 800f1be:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f1c2:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800f1c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800f1ca:	4690      	mov	r8, r2
 800f1cc:	4699      	mov	r9, r3
 800f1ce:	eb18 0a04 	adds.w	sl, r8, r4
 800f1d2:	eb49 0b05 	adc.w	fp, r9, r5
 800f1d6:	f04f 0200 	mov.w	r2, #0
 800f1da:	f04f 0300 	mov.w	r3, #0
 800f1de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f1e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f1e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1ea:	4692      	mov	sl, r2
 800f1ec:	469b      	mov	fp, r3
 800f1ee:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800f1f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f1f6:	f04f 0000 	mov.w	r0, #0
 800f1fa:	f04f 0100 	mov.w	r1, #0
 800f1fe:	0319      	lsls	r1, r3, #12
 800f200:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800f204:	0310      	lsls	r0, r2, #12
 800f206:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800f20a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	085b      	lsrs	r3, r3, #1
 800f212:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800f216:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f21a:	2200      	movs	r2, #0
 800f21c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f224:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f228:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800f22c:	4621      	mov	r1, r4
 800f22e:	1851      	adds	r1, r2, r1
 800f230:	65b9      	str	r1, [r7, #88]	; 0x58
 800f232:	4629      	mov	r1, r5
 800f234:	eb43 0101 	adc.w	r1, r3, r1
 800f238:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f23a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f23e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800f242:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	2200      	movs	r2, #0
 800f24a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f24e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f252:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800f256:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f25a:	f7f1 f831 	bl	80002c0 <__aeabi_uldivmod>
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800f266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f26a:	8adb      	ldrh	r3, [r3, #22]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	2200      	movs	r2, #0
 800f270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f274:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800f278:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f27c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800f280:	4621      	mov	r1, r4
 800f282:	428a      	cmp	r2, r1
 800f284:	4629      	mov	r1, r5
 800f286:	418b      	sbcs	r3, r1
 800f288:	d204      	bcs.n	800f294 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800f28a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800f28e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f292:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800f294:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f298:	881b      	ldrh	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f000 82e9 	beq.w	800f872 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800f2a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f000 82e2 	beq.w	800f872 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800f2ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2b2:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 82dc 	beq.w	800f872 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800f2ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 82d5 	beq.w	800f872 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800f2c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f2cc:	885b      	ldrh	r3, [r3, #2]
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	653b      	str	r3, [r7, #80]	; 0x50
 800f2d4:	657a      	str	r2, [r7, #84]	; 0x54
 800f2d6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f2da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800f2de:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	462b      	mov	r3, r5
 800f2e6:	f04f 0000 	mov.w	r0, #0
 800f2ea:	f04f 0100 	mov.w	r1, #0
 800f2ee:	0159      	lsls	r1, r3, #5
 800f2f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f2f4:	0150      	lsls	r0, r2, #5
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	1b11      	subs	r1, r2, r4
 800f2fc:	64b9      	str	r1, [r7, #72]	; 0x48
 800f2fe:	eb63 0305 	sbc.w	r3, r3, r5
 800f302:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f304:	f04f 0200 	mov.w	r2, #0
 800f308:	f04f 0300 	mov.w	r3, #0
 800f30c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800f310:	4649      	mov	r1, r9
 800f312:	008b      	lsls	r3, r1, #2
 800f314:	4641      	mov	r1, r8
 800f316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f31a:	4641      	mov	r1, r8
 800f31c:	008a      	lsls	r2, r1, #2
 800f31e:	4611      	mov	r1, r2
 800f320:	461a      	mov	r2, r3
 800f322:	460b      	mov	r3, r1
 800f324:	191b      	adds	r3, r3, r4
 800f326:	643b      	str	r3, [r7, #64]	; 0x40
 800f328:	4613      	mov	r3, r2
 800f32a:	eb45 0303 	adc.w	r3, r5, r3
 800f32e:	647b      	str	r3, [r7, #68]	; 0x44
 800f330:	f04f 0200 	mov.w	r2, #0
 800f334:	f04f 0300 	mov.w	r3, #0
 800f338:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f33c:	4629      	mov	r1, r5
 800f33e:	02cb      	lsls	r3, r1, #11
 800f340:	4621      	mov	r1, r4
 800f342:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800f346:	4621      	mov	r1, r4
 800f348:	02ca      	lsls	r2, r1, #11
 800f34a:	461c      	mov	r4, r3
 800f34c:	4613      	mov	r3, r2
 800f34e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800f352:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f356:	881b      	ldrh	r3, [r3, #0]
 800f358:	085b      	lsrs	r3, r3, #1
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800f360:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f364:	2200      	movs	r2, #0
 800f366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f36a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f36e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f372:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800f376:	4621      	mov	r1, r4
 800f378:	1851      	adds	r1, r2, r1
 800f37a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f37c:	4629      	mov	r1, r5
 800f37e:	eb43 0101 	adc.w	r1, r3, r1
 800f382:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f384:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800f388:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800f38c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	b29b      	uxth	r3, r3
 800f394:	2200      	movs	r2, #0
 800f396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f39a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f39e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800f3a2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f3a6:	f7f0 ff8b 	bl	80002c0 <__aeabi_uldivmod>
 800f3aa:	4602      	mov	r2, r0
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800f3b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f3b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3ba:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800f3bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	011a      	lsls	r2, r3, #4
 800f3c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3c8:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f3ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3d4:	637a      	str	r2, [r7, #52]	; 0x34
 800f3d6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800f3da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800f3de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3e2:	695b      	ldr	r3, [r3, #20]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3ea:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800f3ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f3f2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800f3f6:	4622      	mov	r2, r4
 800f3f8:	fb02 f203 	mul.w	r2, r2, r3
 800f3fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f400:	4629      	mov	r1, r5
 800f402:	fb01 f303 	mul.w	r3, r1, r3
 800f406:	441a      	add	r2, r3
 800f408:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f40c:	4621      	mov	r1, r4
 800f40e:	fba3 1301 	umull	r1, r3, r3, r1
 800f412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f416:	460b      	mov	r3, r1
 800f418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f41c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f420:	18d3      	adds	r3, r2, r3
 800f422:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f426:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800f42a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f42e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f432:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f436:	8b5b      	ldrh	r3, [r3, #26]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	2200      	movs	r2, #0
 800f43c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f440:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f444:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f448:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f44c:	4622      	mov	r2, r4
 800f44e:	fb02 f203 	mul.w	r2, r2, r3
 800f452:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f456:	4629      	mov	r1, r5
 800f458:	fb01 f303 	mul.w	r3, r1, r3
 800f45c:	441a      	add	r2, r3
 800f45e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f462:	4621      	mov	r1, r4
 800f464:	fba3 1301 	umull	r1, r3, r3, r1
 800f468:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f46c:	460b      	mov	r3, r1
 800f46e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f476:	18d3      	adds	r3, r2, r3
 800f478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f47c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800f480:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f484:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f488:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f48c:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f490:	62b9      	str	r1, [r7, #40]	; 0x28
 800f492:	f143 0300 	adc.w	r3, r3, #0
 800f496:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f498:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800f49c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f4a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4a4:	f04f 0000 	mov.w	r0, #0
 800f4a8:	f04f 0100 	mov.w	r1, #0
 800f4ac:	0cd0      	lsrs	r0, r2, #19
 800f4ae:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f4b2:	0cd9      	lsrs	r1, r3, #19
 800f4b4:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800f4b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4bc:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f4c0:	6239      	str	r1, [r7, #32]
 800f4c2:	f143 0300 	adc.w	r3, r3, #0
 800f4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800f4c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f4cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f4d0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f4d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f4d8:	f04f 0300 	mov.w	r3, #0
 800f4dc:	f7f0 fef0 	bl	80002c0 <__aeabi_uldivmod>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f4e8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f4ec:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f4f0:	f173 0300 	sbcs.w	r3, r3, #0
 800f4f4:	d305      	bcc.n	800f502 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f4f6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f4fa:	f04f 0300 	mov.w	r3, #0
 800f4fe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f502:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f506:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f50a:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f50c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	61bb      	str	r3, [r7, #24]
 800f516:	61fa      	str	r2, [r7, #28]
 800f518:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f51c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f520:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	2200      	movs	r2, #0
 800f528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f52c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f534:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f538:	4622      	mov	r2, r4
 800f53a:	fb02 f203 	mul.w	r2, r2, r3
 800f53e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f542:	4629      	mov	r1, r5
 800f544:	fb01 f303 	mul.w	r3, r1, r3
 800f548:	441a      	add	r2, r3
 800f54a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f54e:	4621      	mov	r1, r4
 800f550:	fba3 1301 	umull	r1, r3, r3, r1
 800f554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f558:	460b      	mov	r3, r1
 800f55a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f562:	18d3      	adds	r3, r2, r3
 800f564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f568:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f56c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f570:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f574:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f578:	8b5b      	ldrh	r3, [r3, #26]
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	2200      	movs	r2, #0
 800f57e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f582:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f586:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f58a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f58e:	4622      	mov	r2, r4
 800f590:	fb02 f203 	mul.w	r2, r2, r3
 800f594:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f598:	4629      	mov	r1, r5
 800f59a:	fb01 f303 	mul.w	r3, r1, r3
 800f59e:	441a      	add	r2, r3
 800f5a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	fba3 1301 	umull	r1, r3, r3, r1
 800f5aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f5b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f5b8:	18d3      	adds	r3, r2, r3
 800f5ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f5be:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f5c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f5c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f5ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5ce:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f5d2:	6139      	str	r1, [r7, #16]
 800f5d4:	f143 0300 	adc.w	r3, r3, #0
 800f5d8:	617b      	str	r3, [r7, #20]
 800f5da:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f5de:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f5e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f5e6:	f04f 0000 	mov.w	r0, #0
 800f5ea:	f04f 0100 	mov.w	r1, #0
 800f5ee:	0cd0      	lsrs	r0, r2, #19
 800f5f0:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f5f4:	0cd9      	lsrs	r1, r3, #19
 800f5f6:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f5fa:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f5fe:	2200      	movs	r2, #0
 800f600:	67bb      	str	r3, [r7, #120]	; 0x78
 800f602:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f604:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f608:	891b      	ldrh	r3, [r3, #8]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	2200      	movs	r2, #0
 800f60e:	673b      	str	r3, [r7, #112]	; 0x70
 800f610:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f612:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f616:	462b      	mov	r3, r5
 800f618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f61c:	4642      	mov	r2, r8
 800f61e:	fb02 f203 	mul.w	r2, r2, r3
 800f622:	464b      	mov	r3, r9
 800f624:	4621      	mov	r1, r4
 800f626:	fb01 f303 	mul.w	r3, r1, r3
 800f62a:	4413      	add	r3, r2
 800f62c:	4622      	mov	r2, r4
 800f62e:	4641      	mov	r1, r8
 800f630:	fba2 1201 	umull	r1, r2, r2, r1
 800f634:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f638:	460a      	mov	r2, r1
 800f63a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f63e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f642:	4413      	add	r3, r2
 800f644:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f64c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f650:	4622      	mov	r2, r4
 800f652:	fb02 f203 	mul.w	r2, r2, r3
 800f656:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f65a:	4629      	mov	r1, r5
 800f65c:	fb01 f303 	mul.w	r3, r1, r3
 800f660:	4413      	add	r3, r2
 800f662:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f666:	4621      	mov	r1, r4
 800f668:	fba2 1201 	umull	r1, r2, r2, r1
 800f66c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f670:	460a      	mov	r2, r1
 800f672:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f676:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f67a:	4413      	add	r3, r2
 800f67c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f680:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f684:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f688:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f68c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f690:	88db      	ldrh	r3, [r3, #6]
 800f692:	b29b      	uxth	r3, r3
 800f694:	2200      	movs	r2, #0
 800f696:	66bb      	str	r3, [r7, #104]	; 0x68
 800f698:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f69a:	f04f 0200 	mov.w	r2, #0
 800f69e:	f04f 0300 	mov.w	r3, #0
 800f6a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	01cb      	lsls	r3, r1, #7
 800f6aa:	4621      	mov	r1, r4
 800f6ac:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f6b0:	4621      	mov	r1, r4
 800f6b2:	01ca      	lsls	r2, r1, #7
 800f6b4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f6b8:	1884      	adds	r4, r0, r2
 800f6ba:	60bc      	str	r4, [r7, #8]
 800f6bc:	eb41 0303 	adc.w	r3, r1, r3
 800f6c0:	60fb      	str	r3, [r7, #12]
 800f6c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f6c6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f6ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6ce:	88db      	ldrh	r3, [r3, #6]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	663b      	str	r3, [r7, #96]	; 0x60
 800f6d6:	667a      	str	r2, [r7, #100]	; 0x64
 800f6d8:	f04f 0200 	mov.w	r2, #0
 800f6dc:	f04f 0300 	mov.w	r3, #0
 800f6e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	020b      	lsls	r3, r1, #8
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	020a      	lsls	r2, r1, #8
 800f6f2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f6f6:	f7f0 fde3 	bl	80002c0 <__aeabi_uldivmod>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f702:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f706:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f70a:	6039      	str	r1, [r7, #0]
 800f70c:	f143 0300 	adc.w	r3, r3, #0
 800f710:	607b      	str	r3, [r7, #4]
 800f712:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f716:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f71a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f71e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f722:	f04f 0300 	mov.w	r3, #0
 800f726:	f7f0 fdcb 	bl	80002c0 <__aeabi_uldivmod>
 800f72a:	4602      	mov	r2, r0
 800f72c:	460b      	mov	r3, r1
 800f72e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f732:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f736:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f73a:	f173 0300 	sbcs.w	r3, r3, #0
 800f73e:	d305      	bcc.n	800f74c <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f740:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f744:	f04f 0300 	mov.w	r3, #0
 800f748:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f74c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f750:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f754:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f756:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f75a:	69db      	ldr	r3, [r3, #28]
 800f75c:	021b      	lsls	r3, r3, #8
 800f75e:	4618      	mov	r0, r3
 800f760:	f7fe ffcd 	bl	800e6fe <VL53L1_isqrt>
 800f764:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f76c:	785b      	ldrb	r3, [r3, #1]
 800f76e:	461a      	mov	r2, r3
 800f770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f774:	fb02 f303 	mul.w	r3, r2, r3
 800f778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f77c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f780:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f782:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f786:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f788:	4293      	cmp	r3, r2
 800f78a:	d218      	bcs.n	800f7be <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f78c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f794:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f798:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f7a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f7a4:	021b      	lsls	r3, r3, #8
 800f7a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f7aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f7ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d203      	bcs.n	800f7be <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f7b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f7ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f7be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7c2:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f7c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f7c8:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f7ca:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f7cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7d0:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f7d2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f7d6:	f000 f854 	bl	800f882 <VL53L1_f_002>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f7de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7e2:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f7e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f7e8:	6a1b      	ldr	r3, [r3, #32]
 800f7ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f7ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f7f2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f7fc:	fb02 f303 	mul.w	r3, r2, r3
 800f800:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f804:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f808:	3308      	adds	r3, #8
 800f80a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f80e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f812:	091b      	lsrs	r3, r3, #4
 800f814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f81c:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f81e:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f820:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f824:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f826:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f82c:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f82e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f832:	f000 f826 	bl	800f882 <VL53L1_f_002>
 800f836:	4603      	mov	r3, r0
 800f838:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f83a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f83e:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f840:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f844:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f848:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f84c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f850:	429a      	cmp	r2, r3
 800f852:	da07      	bge.n	800f864 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f854:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f858:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f85c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f860:	801a      	strh	r2, [r3, #0]
 800f862:	e006      	b.n	800f872 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f864:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f868:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f86c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f870:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f872:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f876:	4618      	mov	r0, r3
 800f878:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f87c:	46bd      	mov	sp, r7
 800f87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f882 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b086      	sub	sp, #24
 800f886:	af00      	add	r7, sp, #0
 800f888:	60f8      	str	r0, [r7, #12]
 800f88a:	60b9      	str	r1, [r7, #8]
 800f88c:	607a      	str	r2, [r7, #4]
 800f88e:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	fb03 f303 	mul.w	r3, r3, r3
 800f8a4:	693a      	ldr	r2, [r7, #16]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f8aa:	6938      	ldr	r0, [r7, #16]
 800f8ac:	f7fe ff27 	bl	800e6fe <VL53L1_isqrt>
 800f8b0:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	011b      	lsls	r3, r3, #4
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe ff1d 	bl	800e6fe <VL53L1_isqrt>
 800f8c4:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	fb02 f303 	mul.w	r3, r2, r3
 800f8ce:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d009      	beq.n	800f8ea <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f8d6:	697a      	ldr	r2, [r7, #20]
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	4413      	add	r3, r2
 800f8dc:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8e8:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f8ea:	697b      	ldr	r3, [r7, #20]

}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2218      	movs	r2, #24
 800f904:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	73fb      	strb	r3, [r7, #15]
 800f92a:	e01f      	b.n	800f96c <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	4413      	add	r3, r2
 800f932:	2200      	movs	r2, #0
 800f934:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f936:	7bfb      	ldrb	r3, [r7, #15]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	4413      	add	r3, r2
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f942:	7bfb      	ldrb	r3, [r7, #15]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	4413      	add	r3, r2
 800f948:	2200      	movs	r2, #0
 800f94a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f94e:	7bfa      	ldrb	r2, [r7, #15]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	322e      	adds	r2, #46	; 0x2e
 800f954:	2100      	movs	r1, #0
 800f956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f95a:	7bfa      	ldrb	r2, [r7, #15]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3246      	adds	r2, #70	; 0x46
 800f960:	2100      	movs	r1, #0
 800f962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	3301      	adds	r3, #1
 800f96a:	73fb      	strb	r3, [r7, #15]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	785b      	ldrb	r3, [r3, #1]
 800f970:	7bfa      	ldrb	r2, [r7, #15]
 800f972:	429a      	cmp	r2, r3
 800f974:	d3da      	bcc.n	800f92c <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2208      	movs	r2, #8
 800f982:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f994:	461a      	mov	r2, r3
 800f996:	2118      	movs	r1, #24
 800f998:	2000      	movs	r0, #0
 800f99a:	f7ff f9e8 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	2118      	movs	r1, #24
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	f7ff f9e0 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	2118      	movs	r1, #24
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f7ff f9d8 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	2118      	movs	r1, #24
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	f7ff f9d0 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	2118      	movs	r1, #24
 800f9d8:	2000      	movs	r0, #0
 800f9da:	f7ff f9c8 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f9e6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f9ea:	b090      	sub	sp, #64	; 0x40
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	61b9      	str	r1, [r7, #24]
 800f9f0:	617a      	str	r2, [r7, #20]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	83fb      	strh	r3, [r7, #30]
 800f9f8:	4613      	mov	r3, r2
 800f9fa:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800fa0e:	f04f 0200 	mov.w	r2, #0
 800fa12:	f04f 0300 	mov.w	r3, #0
 800fa16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800fa22:	2300      	movs	r3, #0
 800fa24:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800fa26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa28:	7a5a      	ldrb	r2, [r3, #9]
 800fa2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa2c:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800fa2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa30:	7a1a      	ldrb	r2, [r3, #8]
 800fa32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa34:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800fa36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa38:	7a9a      	ldrb	r2, [r3, #10]
 800fa3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa3c:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800fa3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa40:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800fa44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa46:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800fa48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7ff f93c 	bl	800eccc <VL53L1_decode_vcsel_period>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800fa58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa5a:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800fa5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa62:	17da      	asrs	r2, r3, #31
 800fa64:	60bb      	str	r3, [r7, #8]
 800fa66:	60fa      	str	r2, [r7, #12]
 800fa68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fa6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800fa70:	8bfb      	ldrh	r3, [r7, #30]
 800fa72:	2200      	movs	r2, #0
 800fa74:	4698      	mov	r8, r3
 800fa76:	4691      	mov	r9, r2
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	fb08 f203 	mul.w	r2, r8, r3
 800fa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa80:	fb09 f303 	mul.w	r3, r9, r3
 800fa84:	4413      	add	r3, r2
 800fa86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa88:	fba2 4508 	umull	r4, r5, r2, r8
 800fa8c:	442b      	add	r3, r5
 800fa8e:	461d      	mov	r5, r3
 800fa90:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800fa94:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800fa98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fa9c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800faa0:	f143 0b00 	adc.w	fp, r3, #0
 800faa4:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800faa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800faac:	2b00      	cmp	r3, #0
 800faae:	da08      	bge.n	800fac2 <VL53L1_f_018+0xdc>
 800fab0:	f640 71ff 	movw	r1, #4095	; 0xfff
 800fab4:	1851      	adds	r1, r2, r1
 800fab6:	6039      	str	r1, [r7, #0]
 800fab8:	f143 0300 	adc.w	r3, r3, #0
 800fabc:	607b      	str	r3, [r7, #4]
 800fabe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fac2:	f04f 0000 	mov.w	r0, #0
 800fac6:	f04f 0100 	mov.w	r1, #0
 800faca:	0b10      	lsrs	r0, r2, #12
 800facc:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800fad0:	1319      	asrs	r1, r3, #12
 800fad2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fada:	2300      	movs	r3, #0
 800fadc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fae0:	e062      	b.n	800fba8 <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800fae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fae6:	089b      	lsrs	r3, r3, #2
 800fae8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800faec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800faf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800faf2:	4413      	add	r3, r2
 800faf4:	7c9b      	ldrb	r3, [r3, #18]
 800faf6:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800faf8:	6a3b      	ldr	r3, [r7, #32]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	dd4f      	ble.n	800fb9e <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800fafe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb00:	7a9b      	ldrb	r3, [r3, #10]
 800fb02:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d20f      	bcs.n	800fb2a <VL53L1_f_018+0x144>
 800fb0a:	7f7b      	ldrb	r3, [r7, #29]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00c      	beq.n	800fb2a <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800fb10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb16:	3206      	adds	r2, #6
 800fb18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1e:	441a      	add	r2, r3
 800fb20:	6a3b      	ldr	r3, [r7, #32]
 800fb22:	fb02 f303 	mul.w	r3, r2, r3
 800fb26:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb28:	e004      	b.n	800fb34 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800fb2a:	6a3b      	ldr	r3, [r7, #32]
 800fb2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb2e:	fb02 f303 	mul.w	r3, r2, r3
 800fb32:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe fde1 	bl	800e6fe <VL53L1_isqrt>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800fb40:	6a3b      	ldr	r3, [r7, #32]
 800fb42:	0fda      	lsrs	r2, r3, #31
 800fb44:	4413      	add	r3, r2
 800fb46:	105b      	asrs	r3, r3, #1
 800fb48:	461a      	mov	r2, r3
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4c:	4413      	add	r3, r2
 800fb4e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800fb50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb52:	6a3b      	ldr	r3, [r7, #32]
 800fb54:	fb92 f3f3 	sdiv	r3, r2, r3
 800fb58:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	fb02 f303 	mul.w	r3, r2, r3
 800fb62:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800fb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb66:	3308      	adds	r3, #8
 800fb68:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	da00      	bge.n	800fb72 <VL53L1_f_018+0x18c>
 800fb70:	330f      	adds	r3, #15
 800fb72:	111b      	asrs	r3, r3, #4
 800fb74:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800fb76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7a:	4413      	add	r3, r2
 800fb7c:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800fb7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	da01      	bge.n	800fb8a <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800fb8a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb90:	3216      	adds	r2, #22
 800fb92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800fb98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb9c:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800fb9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fba2:	3301      	adds	r3, #1
 800fba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbaa:	7a9b      	ldrb	r3, [r3, #10]
 800fbac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d396      	bcc.n	800fae2 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800fbb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fbba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbbc:	7a1b      	ldrb	r3, [r3, #8]
 800fbbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fbc2:	e033      	b.n	800fc2c <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800fbc4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fbc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbca:	3206      	adds	r2, #6
 800fbcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fbd0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800fbd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbd6:	3116      	adds	r1, #22
 800fbd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	dd13      	ble.n	800fc08 <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800fbe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbe6:	4413      	add	r3, r2
 800fbe8:	2201      	movs	r2, #1
 800fbea:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800fbec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbf2:	4413      	add	r3, r2
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800fbfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbfc:	791b      	ldrb	r3, [r3, #4]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc04:	711a      	strb	r2, [r3, #4]
 800fc06:	e00c      	b.n	800fc22 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800fc08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc0e:	4413      	add	r3, r2
 800fc10:	2200      	movs	r2, #0
 800fc12:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800fc14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc1a:	4413      	add	r3, r2
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800fc22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc26:	3301      	adds	r3, #1
 800fc28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc2e:	7a9b      	ldrb	r3, [r3, #10]
 800fc30:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d3c5      	bcc.n	800fbc4 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fc38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3740      	adds	r7, #64	; 0x40
 800fc40:	46bd      	mov	sp, r7
 800fc42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fc46 <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fc46:	b480      	push	{r7}
 800fc48:	b085      	sub	sp, #20
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800fc56:	2300      	movs	r3, #0
 800fc58:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fc66:	2300      	movs	r3, #0
 800fc68:	73fb      	strb	r3, [r7, #15]
 800fc6a:	e02d      	b.n	800fcc8 <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	78d2      	ldrb	r2, [r2, #3]
 800fc74:	fb93 f1f2 	sdiv	r1, r3, r2
 800fc78:	fb01 f202 	mul.w	r2, r1, r2
 800fc7c:	1a9b      	subs	r3, r3, r2
 800fc7e:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	789b      	ldrb	r3, [r3, #2]
 800fc84:	7bfa      	ldrb	r2, [r7, #15]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d21b      	bcs.n	800fcc2 <VL53L1_f_019+0x7c>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	789b      	ldrb	r3, [r3, #2]
 800fc8e:	7b3a      	ldrb	r2, [r7, #12]
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d216      	bcs.n	800fcc2 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fc94:	7bfb      	ldrb	r3, [r7, #15]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	4413      	add	r3, r2
 800fc9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10f      	bne.n	800fcc2 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fca2:	7b3b      	ldrb	r3, [r7, #12]
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	4413      	add	r3, r2
 800fca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d108      	bne.n	800fcc2 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d105      	bne.n	800fcc2 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	7bfa      	ldrb	r2, [r7, #15]
 800fcba:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800fcc2:	7bfb      	ldrb	r3, [r7, #15]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	73fb      	strb	r3, [r7, #15]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	78db      	ldrb	r3, [r3, #3]
 800fccc:	7bfa      	ldrb	r2, [r7, #15]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d3cc      	bcc.n	800fc6c <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fcd2:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr

0800fce2 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fce2:	b480      	push	{r7}
 800fce4:	b085      	sub	sp, #20
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fcea:	2300      	movs	r3, #0
 800fcec:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fd00:	73fb      	strb	r3, [r7, #15]
 800fd02:	e05a      	b.n	800fdba <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	78da      	ldrb	r2, [r3, #3]
 800fd08:	7bfb      	ldrb	r3, [r7, #15]
 800fd0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd0e:	fb01 f202 	mul.w	r2, r1, r2
 800fd12:	1a9b      	subs	r3, r3, r2
 800fd14:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800fd16:	7bfb      	ldrb	r3, [r7, #15]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	78d2      	ldrb	r2, [r2, #3]
 800fd1e:	fb93 f1f2 	sdiv	r1, r3, r2
 800fd22:	fb01 f202 	mul.w	r2, r1, r2
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	789b      	ldrb	r3, [r3, #2]
 800fd2e:	7b7a      	ldrb	r2, [r7, #13]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d23f      	bcs.n	800fdb4 <VL53L1_f_020+0xd2>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	789b      	ldrb	r3, [r3, #2]
 800fd38:	7b3a      	ldrb	r2, [r7, #12]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d23a      	bcs.n	800fdb4 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800fd3e:	7b7b      	ldrb	r3, [r7, #13]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	4413      	add	r3, r2
 800fd44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10e      	bne.n	800fd6a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800fd4c:	7b3b      	ldrb	r3, [r7, #12]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	4413      	add	r3, r2
 800fd52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d107      	bne.n	800fd6a <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fd60:	3301      	adds	r3, #1
 800fd62:	b2da      	uxtb	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d905      	bls.n	800fd86 <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800fd86:	7b7b      	ldrb	r3, [r7, #13]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d009      	beq.n	800fda8 <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800fd94:	7b7b      	ldrb	r3, [r7, #13]
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	4413      	add	r3, r2
 800fda0:	460a      	mov	r2, r1
 800fda2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fda6:	e005      	b.n	800fdb4 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800fda8:	7b7b      	ldrb	r3, [r7, #13]
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	4413      	add	r3, r2
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800fdba:	7bfa      	ldrb	r2, [r7, #15]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fdc2:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800fdc8:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	db9a      	blt.n	800fd04 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800fdce:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fdde:	b480      	push	{r7}
 800fde0:	b087      	sub	sp, #28
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fde6:	2300      	movs	r3, #0
 800fde8:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	78db      	ldrb	r3, [r3, #3]
 800fe02:	3b01      	subs	r3, #1
 800fe04:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800fe06:	7cbb      	ldrb	r3, [r7, #18]
 800fe08:	085b      	lsrs	r3, r3, #1
 800fe0a:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800fe12:	75fb      	strb	r3, [r7, #23]
 800fe14:	e0a2      	b.n	800ff5c <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	78da      	ldrb	r2, [r3, #3]
 800fe1a:	7dfb      	ldrb	r3, [r7, #23]
 800fe1c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe20:	fb01 f202 	mul.w	r2, r1, r2
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800fe28:	7dfb      	ldrb	r3, [r7, #23]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	78d2      	ldrb	r2, [r2, #3]
 800fe30:	fb93 f1f2 	sdiv	r1, r3, r2
 800fe34:	fb01 f202 	mul.w	r2, r1, r2
 800fe38:	1a9b      	subs	r3, r3, r2
 800fe3a:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	789b      	ldrb	r3, [r3, #2]
 800fe40:	7d7a      	ldrb	r2, [r7, #21]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	f080 8087 	bcs.w	800ff56 <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800fe4c:	7d3a      	ldrb	r2, [r7, #20]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	f080 8081 	bcs.w	800ff56 <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800fe54:	7d7b      	ldrb	r3, [r7, #21]
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	4413      	add	r3, r2
 800fe5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d12f      	bne.n	800fec2 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800fe62:	7d3b      	ldrb	r3, [r7, #20]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	4413      	add	r3, r2
 800fe68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d028      	beq.n	800fec2 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800fe70:	7d3b      	ldrb	r3, [r7, #20]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	4413      	add	r3, r2
 800fe76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fe84:	7cfa      	ldrb	r2, [r7, #19]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d21b      	bcs.n	800fec2 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fe8a:	7cfa      	ldrb	r2, [r7, #19]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	00db      	lsls	r3, r3, #3
 800fe90:	4413      	add	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	3304      	adds	r3, #4
 800fe9e:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	7dfa      	ldrb	r2, [r7, #23]
 800fea4:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	3301      	adds	r3, #1
 800feaa:	b2da      	uxtb	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	22ff      	movs	r2, #255	; 0xff
 800feb4:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2200      	movs	r2, #0
 800feba:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2200      	movs	r2, #0
 800fec0:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800fec2:	7d7b      	ldrb	r3, [r7, #21]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	4413      	add	r3, r2
 800fec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d042      	beq.n	800ff56 <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800fed0:	7d3b      	ldrb	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	4413      	add	r3, r2
 800fed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d13b      	bne.n	800ff56 <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800fede:	7d7b      	ldrb	r3, [r7, #21]
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	4413      	add	r3, r2
 800fee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fee8:	3b01      	subs	r3, #1
 800feea:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fef2:	7cfa      	ldrb	r2, [r7, #19]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d22e      	bcs.n	800ff56 <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fef8:	7cfa      	ldrb	r2, [r7, #19]
 800fefa:	4613      	mov	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	4413      	add	r3, r2
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	4413      	add	r3, r2
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	7dfa      	ldrb	r2, [r7, #23]
 800ff12:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800ff14:	7dfb      	ldrb	r3, [r7, #23]
 800ff16:	3301      	adds	r3, #1
 800ff18:	b2da      	uxtb	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b2db      	uxtb	r3, r3
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800ff3a:	1ad3      	subs	r3, r2, r3
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	3301      	adds	r3, #1
 800ff40:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	799b      	ldrb	r3, [r3, #6]
 800ff4a:	7cba      	ldrb	r2, [r7, #18]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d202      	bcs.n	800ff56 <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	7cba      	ldrb	r2, [r7, #18]
 800ff54:	719a      	strb	r2, [r3, #6]
		blb++) {
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800ff5c:	7dfa      	ldrb	r2, [r7, #23]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ff64:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800ff6a:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	f6ff af52 	blt.w	800fe16 <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ff72:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800ff76:	4618      	mov	r0, r3
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr

0800ff82 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b090      	sub	sp, #64	; 0x40
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	4603      	mov	r3, r0
 800ff8a:	6039      	str	r1, [r7, #0]
 800ff8c:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800ff94:	f107 030c 	add.w	r3, r7, #12
 800ff98:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d965      	bls.n	801007c <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800ffb0:	e05f      	b.n	8010072 <VL53L1_f_028+0xf0>

		swapped = 0;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800ffb8:	2301      	movs	r3, #1
 800ffba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ffbe:	e051      	b.n	8010064 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 800ffc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ffc4:	1e5a      	subs	r2, r3, #1
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	00db      	lsls	r3, r3, #3
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 800ffda:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ffde:	4613      	mov	r3, r2
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	4413      	add	r3, r2
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	4413      	add	r3, r2
 800ffee:	3304      	adds	r3, #4
 800fff0:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800fff2:	79fb      	ldrb	r3, [r7, #7]
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	d118      	bne.n	801002a <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800fff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffa:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 800fffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffe:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 8010000:	429a      	cmp	r2, r3
 8010002:	da2a      	bge.n	801005a <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010004:	2224      	movs	r2, #36	; 0x24
 8010006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801000a:	f009 faf9 	bl	8019600 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 801000e:	2224      	movs	r2, #36	; 0x24
 8010010:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010014:	f009 faf4 	bl	8019600 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 8010018:	2224      	movs	r2, #36	; 0x24
 801001a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801001c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801001e:	f009 faef 	bl	8019600 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010022:	2301      	movs	r3, #1
 8010024:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010028:	e017      	b.n	801005a <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 801002a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801002c:	699a      	ldr	r2, [r3, #24]
 801002e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010030:	699b      	ldr	r3, [r3, #24]
 8010032:	429a      	cmp	r2, r3
 8010034:	d911      	bls.n	801005a <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 8010036:	2224      	movs	r2, #36	; 0x24
 8010038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801003a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801003c:	f009 fae0 	bl	8019600 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 8010040:	2224      	movs	r2, #36	; 0x24
 8010042:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010046:	f009 fadb 	bl	8019600 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 801004a:	2224      	movs	r2, #36	; 0x24
 801004c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801004e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010050:	f009 fad6 	bl	8019600 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 8010054:	2301      	movs	r3, #1
 8010056:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 801005a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801005e:	3301      	adds	r3, #1
 8010060:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 801006a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801006e:	429a      	cmp	r2, r3
 8010070:	d3a6      	bcc.n	800ffc0 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 8010072:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010076:	2b00      	cmp	r3, #0
 8010078:	d19b      	bne.n	800ffb2 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 801007a:	e000      	b.n	801007e <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 801007c:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 801007e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 8010082:	4618      	mov	r0, r3
 8010084:	3740      	adds	r7, #64	; 0x40
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}

0801008a <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 801008a:	b480      	push	{r7}
 801008c:	b087      	sub	sp, #28
 801008e:	af00      	add	r7, sp, #0
 8010090:	4603      	mov	r3, r0
 8010092:	60b9      	str	r1, [r7, #8]
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010098:	2300      	movs	r3, #0
 801009a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 801009c:	2300      	movs	r3, #0
 801009e:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80100a4:	7bfa      	ldrb	r2, [r7, #15]
 80100a6:	4613      	mov	r3, r2
 80100a8:	00db      	lsls	r3, r3, #3
 80100aa:	4413      	add	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	4413      	add	r3, r2
 80100b6:	3304      	adds	r3, #4
 80100b8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	2200      	movs	r2, #0
 80100be:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	2200      	movs	r2, #0
 80100c4:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	75fb      	strb	r3, [r7, #23]
 80100cc:	e01c      	b.n	8010108 <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	78da      	ldrb	r2, [r3, #3]
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80100d8:	fb01 f202 	mul.w	r2, r1, r2
 80100dc:	1a9b      	subs	r3, r3, r2
 80100de:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	68da      	ldr	r2, [r3, #12]
 80100e4:	7d79      	ldrb	r1, [r7, #21]
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	3106      	adds	r1, #6
 80100ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100ee:	441a      	add	r2, r3
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	441a      	add	r2, r3
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	3301      	adds	r3, #1
 8010106:	75fb      	strb	r3, [r7, #23]
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	791b      	ldrb	r3, [r3, #4]
 801010c:	7dfa      	ldrb	r2, [r7, #23]
 801010e:	429a      	cmp	r2, r3
 8010110:	d9dd      	bls.n	80100ce <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	68da      	ldr	r2, [r3, #12]
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 8010120:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010124:	4618      	mov	r0, r3
 8010126:	371c      	adds	r7, #28
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 8010130:	b590      	push	{r4, r7, lr}
 8010132:	b08d      	sub	sp, #52	; 0x34
 8010134:	af02      	add	r7, sp, #8
 8010136:	60ba      	str	r2, [r7, #8]
 8010138:	607b      	str	r3, [r7, #4]
 801013a:	4603      	mov	r3, r0
 801013c:	73fb      	strb	r3, [r7, #15]
 801013e:	460b      	mov	r3, r1
 8010140:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010142:	2300      	movs	r3, #0
 8010144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 8010156:	2300      	movs	r3, #0
 8010158:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 801015e:	7bfa      	ldrb	r2, [r7, #15]
 8010160:	4613      	mov	r3, r2
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	4413      	add	r3, r2
 8010166:	009b      	lsls	r3, r3, #2
 8010168:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	4413      	add	r3, r2
 8010170:	3304      	adds	r3, #4
 8010172:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	789b      	ldrb	r3, [r3, #2]
 8010178:	2bff      	cmp	r3, #255	; 0xff
 801017a:	d102      	bne.n	8010182 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2201      	movs	r2, #1
 8010180:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	789b      	ldrb	r3, [r3, #2]
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	78d2      	ldrb	r2, [r2, #3]
 801018a:	fbb3 f1f2 	udiv	r1, r3, r2
 801018e:	fb01 f202 	mul.w	r2, r1, r2
 8010192:	1a9b      	subs	r3, r3, r2
 8010194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 8010198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801019c:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	8c3b      	ldrh	r3, [r7, #32]
 80101a6:	4413      	add	r3, r2
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 80101ac:	8c3a      	ldrh	r2, [r7, #32]
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	789b      	ldrb	r3, [r3, #2]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 80101ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80101be:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	8bfb      	ldrh	r3, [r7, #30]
 80101c8:	4413      	add	r3, r2
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 80101ce:	8bfa      	ldrh	r2, [r7, #30]
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	789b      	ldrb	r3, [r3, #2]
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	b29b      	uxth	r3, r3
 80101da:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 80101dc:	8bfa      	ldrh	r2, [r7, #30]
 80101de:	8c3b      	ldrh	r3, [r7, #32]
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 80101e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80101ea:	2b03      	cmp	r3, #3
 80101ec:	dd01      	ble.n	80101f2 <VL53L1_f_027+0xc2>
		window_width = 3;
 80101ee:	2303      	movs	r3, #3
 80101f0:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 80101f2:	8c3a      	ldrh	r2, [r7, #32]
 80101f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101f6:	4413      	add	r3, r2
 80101f8:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 80101fa:	b219      	sxth	r1, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	78da      	ldrb	r2, [r3, #3]
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	3314      	adds	r3, #20
 8010204:	7bbc      	ldrb	r4, [r7, #14]
 8010206:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 801020a:	9301      	str	r3, [sp, #4]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	4623      	mov	r3, r4
 8010212:	f000 f846 	bl	80102a2 <VL53L1_f_030>
 8010216:	4603      	mov	r3, r0
 8010218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 801021c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010220:	2b00      	cmp	r3, #0
 8010222:	d114      	bne.n	801024e <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 8010224:	8bfa      	ldrh	r2, [r7, #30]
 8010226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010228:	1ad3      	subs	r3, r2, r3
 801022a:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 801022c:	b218      	sxth	r0, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	78da      	ldrb	r2, [r3, #3]
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	331c      	adds	r3, #28
 8010236:	7bbc      	ldrb	r4, [r7, #14]
 8010238:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	9300      	str	r3, [sp, #0]
 8010242:	4623      	mov	r3, r4
 8010244:	f000 f82d 	bl	80102a2 <VL53L1_f_030>
 8010248:	4603      	mov	r3, r0
 801024a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	695a      	ldr	r2, [r3, #20]
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	69db      	ldr	r3, [r3, #28]
 8010256:	429a      	cmp	r2, r3
 8010258:	d909      	bls.n	801026e <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	695b      	ldr	r3, [r3, #20]
 801025e:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	69da      	ldr	r2, [r3, #28]
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	69ba      	ldr	r2, [r7, #24]
 801026c:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	699a      	ldr	r2, [r3, #24]
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	695b      	ldr	r3, [r3, #20]
 8010276:	429a      	cmp	r2, r3
 8010278:	d203      	bcs.n	8010282 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	699a      	ldr	r2, [r3, #24]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	699a      	ldr	r2, [r3, #24]
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	429a      	cmp	r2, r3
 801028c:	d903      	bls.n	8010296 <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	699a      	ldr	r2, [r3, #24]
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 8010296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801029a:	4618      	mov	r0, r3
 801029c:	372c      	adds	r7, #44	; 0x2c
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd90      	pop	{r4, r7, pc}

080102a2 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 80102a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a6:	b09d      	sub	sp, #116	; 0x74
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	461c      	mov	r4, r3
 80102ac:	4603      	mov	r3, r0
 80102ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80102b2:	460b      	mov	r3, r1
 80102b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80102b8:	4613      	mov	r3, r2
 80102ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80102be:	4623      	mov	r3, r4
 80102c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80102c4:	2300      	movs	r3, #0
 80102c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 80102d0:	2300      	movs	r3, #0
 80102d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 80102d6:	f04f 0200 	mov.w	r2, #0
 80102da:	f04f 0300 	mov.w	r3, #0
 80102de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 80102e2:	f04f 0200 	mov.w	r2, #0
 80102e6:	f04f 0300 	mov.w	r3, #0
 80102ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 80102ee:	f04f 0200 	mov.w	r2, #0
 80102f2:	f04f 0300 	mov.w	r3, #0
 80102f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 80102fa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80102fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010302:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 8010304:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010308:	2b00      	cmp	r3, #0
 801030a:	f000 809c 	beq.w	8010446 <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801030e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010312:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010316:	e08f      	b.n	8010438 <VL53L1_f_030+0x196>

		if (lb < 0)
 8010318:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801031c:	2b00      	cmp	r3, #0
 801031e:	da09      	bge.n	8010334 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 8010320:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010324:	b29a      	uxth	r2, r3
 8010326:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801032a:	4413      	add	r3, r2
 801032c:	b29b      	uxth	r3, r3
 801032e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010332:	e00a      	b.n	801034a <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 8010334:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 8010338:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 801033c:	fb91 f3f2 	sdiv	r3, r1, r2
 8010340:	fb02 f303 	mul.w	r3, r2, r3
 8010344:	1acb      	subs	r3, r1, r3
 8010346:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 801034a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801034e:	2b00      	cmp	r3, #0
 8010350:	db6b      	blt.n	801042a <VL53L1_f_030+0x188>
 8010352:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8010356:	2b17      	cmp	r3, #23
 8010358:	dc67      	bgt.n	801042a <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 801035a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801035e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010362:	3306      	adds	r3, #6
 8010364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010368:	17da      	asrs	r2, r3, #31
 801036a:	633b      	str	r3, [r7, #48]	; 0x30
 801036c:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 801036e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010376:	17da      	asrs	r2, r3, #31
 8010378:	62bb      	str	r3, [r7, #40]	; 0x28
 801037a:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010382:	4602      	mov	r2, r0
 8010384:	1a9b      	subs	r3, r3, r2
 8010386:	623b      	str	r3, [r7, #32]
 8010388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038a:	460a      	mov	r2, r1
 801038c:	eb63 0302 	sbc.w	r3, r3, r2
 8010390:	627b      	str	r3, [r7, #36]	; 0x24
 8010392:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010396:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 801039a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d009      	beq.n	80103b6 <VL53L1_f_030+0x114>
 80103a2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	da05      	bge.n	80103b6 <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 80103aa:	f04f 0200 	mov.w	r2, #0
 80103ae:	f04f 0300 	mov.w	r3, #0
 80103b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 80103b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80103ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80103be:	1884      	adds	r4, r0, r2
 80103c0:	61bc      	str	r4, [r7, #24]
 80103c2:	eb41 0303 	adc.w	r3, r1, r3
 80103c6:	61fb      	str	r3, [r7, #28]
 80103c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80103cc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 80103d0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80103d4:	17da      	asrs	r2, r3, #31
 80103d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80103d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80103da:	f04f 0200 	mov.w	r2, #0
 80103de:	f04f 0300 	mov.w	r3, #0
 80103e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103e4:	02cb      	lsls	r3, r1, #11
 80103e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103e8:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 80103ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103ee:	02ca      	lsls	r2, r1, #11
 80103f0:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 80103f4:	f143 0600 	adc.w	r6, r3, #0
 80103f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103fa:	fb06 f203 	mul.w	r2, r6, r3
 80103fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010400:	fb05 f303 	mul.w	r3, r5, r3
 8010404:	441a      	add	r2, r3
 8010406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010408:	fba3 ab05 	umull	sl, fp, r3, r5
 801040c:	eb02 030b 	add.w	r3, r2, fp
 8010410:	469b      	mov	fp, r3
			weighted_sum +=
 8010412:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8010416:	eb12 010a 	adds.w	r1, r2, sl
 801041a:	6139      	str	r1, [r7, #16]
 801041c:	eb43 030b 	adc.w	r3, r3, fp
 8010420:	617b      	str	r3, [r7, #20]
 8010422:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010426:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 801042a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801042e:	b29b      	uxth	r3, r3
 8010430:	3301      	adds	r3, #1
 8010432:	b29b      	uxth	r3, r3
 8010434:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8010438:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 801043c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8010440:	429a      	cmp	r2, r3
 8010442:	f77f af69 	ble.w	8010318 <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 8010446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801044a:	2a01      	cmp	r2, #1
 801044c:	f173 0300 	sbcs.w	r3, r3, #0
 8010450:	db3b      	blt.n	80104ca <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 8010452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8010456:	0fd9      	lsrs	r1, r3, #31
 8010458:	2000      	movs	r0, #0
 801045a:	60b9      	str	r1, [r7, #8]
 801045c:	60f8      	str	r0, [r7, #12]
 801045e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010462:	4621      	mov	r1, r4
 8010464:	eb11 0802 	adds.w	r8, r1, r2
 8010468:	4629      	mov	r1, r5
 801046a:	eb41 0903 	adc.w	r9, r1, r3
 801046e:	f04f 0200 	mov.w	r2, #0
 8010472:	f04f 0300 	mov.w	r3, #0
 8010476:	ea4f 0258 	mov.w	r2, r8, lsr #1
 801047a:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 801047e:	ea4f 0369 	mov.w	r3, r9, asr #1
 8010482:	4610      	mov	r0, r2
 8010484:	4619      	mov	r1, r3
 8010486:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801048a:	1814      	adds	r4, r2, r0
 801048c:	603c      	str	r4, [r7, #0]
 801048e:	414b      	adcs	r3, r1
 8010490:	607b      	str	r3, [r7, #4]
 8010492:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010496:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 801049a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801049e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80104a2:	f7ef febd 	bl	8000220 <__aeabi_ldivmod>
 80104a6:	4602      	mov	r2, r0
 80104a8:	460b      	mov	r3, r1
 80104aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 80104ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	da05      	bge.n	80104c2 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 80104b6:	f04f 0200 	mov.w	r2, #0
 80104ba:	f04f 0300 	mov.w	r3, #0
 80104be:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 80104c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80104c8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80104ca:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3774      	adds	r7, #116	; 0x74
 80104d2:	46bd      	mov	sp, r7
 80104d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104d8 <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60b9      	str	r1, [r7, #8]
 80104e0:	607a      	str	r2, [r7, #4]
 80104e2:	603b      	str	r3, [r7, #0]
 80104e4:	4603      	mov	r3, r0
 80104e6:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 80104e8:	2300      	movs	r3, #0
 80104ea:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 80104ec:	2300      	movs	r3, #0
 80104ee:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 80104f0:	2300      	movs	r3, #0
 80104f2:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 80104f4:	7bfa      	ldrb	r2, [r7, #15]
 80104f6:	4613      	mov	r3, r2
 80104f8:	00db      	lsls	r3, r3, #3
 80104fa:	4413      	add	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	4413      	add	r3, r2
 8010506:	3304      	adds	r3, #4
 8010508:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801050a:	22ac      	movs	r2, #172	; 0xac
 801050c:	68b9      	ldr	r1, [r7, #8]
 801050e:	6a38      	ldr	r0, [r7, #32]
 8010510:	f009 f876 	bl	8019600 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801051a:	75fb      	strb	r3, [r7, #23]
 801051c:	e020      	b.n	8010560 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	7dfa      	ldrb	r2, [r7, #23]
 8010524:	429a      	cmp	r2, r3
 8010526:	d304      	bcc.n	8010532 <VL53L1_f_023+0x5a>
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	791b      	ldrb	r3, [r3, #4]
 801052c:	7dfa      	ldrb	r2, [r7, #23]
 801052e:	429a      	cmp	r2, r3
 8010530:	d913      	bls.n	801055a <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	78da      	ldrb	r2, [r3, #3]
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	fbb3 f1f2 	udiv	r1, r3, r2
 801053c:	fb01 f202 	mul.w	r2, r1, r2
 8010540:	1a9b      	subs	r3, r3, r2
 8010542:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010544:	6a3b      	ldr	r3, [r7, #32]
 8010546:	7a9b      	ldrb	r3, [r3, #10]
 8010548:	7d7a      	ldrb	r2, [r7, #21]
 801054a:	429a      	cmp	r2, r3
 801054c:	d205      	bcs.n	801055a <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 801054e:	7d7a      	ldrb	r2, [r7, #21]
 8010550:	6a3b      	ldr	r3, [r7, #32]
 8010552:	3206      	adds	r2, #6
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	3301      	adds	r3, #1
 801055e:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 8010560:	7dfa      	ldrb	r2, [r7, #23]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8010568:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 801056e:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 8010570:	429a      	cmp	r2, r3
 8010572:	dbd4      	blt.n	801051e <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8010574:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 8010580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010584:	b096      	sub	sp, #88	; 0x58
 8010586:	af08      	add	r7, sp, #32
 8010588:	4604      	mov	r4, r0
 801058a:	4608      	mov	r0, r1
 801058c:	4611      	mov	r1, r2
 801058e:	461a      	mov	r2, r3
 8010590:	4623      	mov	r3, r4
 8010592:	73fb      	strb	r3, [r7, #15]
 8010594:	4603      	mov	r3, r0
 8010596:	73bb      	strb	r3, [r7, #14]
 8010598:	460b      	mov	r3, r1
 801059a:	737b      	strb	r3, [r7, #13]
 801059c:	4613      	mov	r3, r2
 801059e:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 80105a0:	2300      	movs	r3, #0
 80105a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 80105c6:	2300      	movs	r3, #0
 80105c8:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 80105d2:	7b7b      	ldrb	r3, [r7, #13]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d106      	bne.n	80105e6 <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 80105d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105de:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 80105e0:	f06f 030e 	mvn.w	r3, #14
 80105e4:	e06f      	b.n	80106c6 <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	7b7a      	ldrb	r2, [r7, #13]
 80105ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80105ee:	fb01 f202 	mul.w	r2, r1, r2
 80105f2:	1a9b      	subs	r3, r3, r2
 80105f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 80105f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80105fc:	7b39      	ldrb	r1, [r7, #12]
 80105fe:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010602:	f107 0320 	add.w	r3, r7, #32
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801060c:	9300      	str	r3, [sp, #0]
 801060e:	4613      	mov	r3, r2
 8010610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010612:	f000 fddb 	bl	80111cc <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 8010616:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801061a:	7b39      	ldrb	r1, [r7, #12]
 801061c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010624:	9301      	str	r3, [sp, #4]
 8010626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	4613      	mov	r3, r2
 801062e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010630:	f000 fdcc 	bl	80111cc <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010634:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00e      	beq.n	801065a <VL53L1_f_026+0xda>
		VL53L1_f_013(
 801063c:	f107 021c 	add.w	r2, r7, #28
 8010640:	7b39      	ldrb	r1, [r7, #12]
 8010642:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010646:	f107 0314 	add.w	r3, r7, #20
 801064a:	9301      	str	r3, [sp, #4]
 801064c:	f107 0318 	add.w	r3, r7, #24
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	4613      	mov	r3, r2
 8010654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010656:	f000 fdb9 	bl	80111cc <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065c:	469c      	mov	ip, r3
 801065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010660:	469e      	mov	lr, r3
 8010662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010664:	4698      	mov	r8, r3
 8010666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010668:	4619      	mov	r1, r3
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	461c      	mov	r4, r3
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	461d      	mov	r5, r3
 8010672:	69fb      	ldr	r3, [r7, #28]
 8010674:	461e      	mov	r6, r3
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 801067a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801067c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 8010680:	607b      	str	r3, [r7, #4]
 8010682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010684:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010688:	7bb8      	ldrb	r0, [r7, #14]
 801068a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801068c:	9207      	str	r2, [sp, #28]
 801068e:	9306      	str	r3, [sp, #24]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	9205      	str	r2, [sp, #20]
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	9304      	str	r3, [sp, #16]
 8010698:	9603      	str	r6, [sp, #12]
 801069a:	9502      	str	r5, [sp, #8]
 801069c:	9401      	str	r4, [sp, #4]
 801069e:	9100      	str	r1, [sp, #0]
 80106a0:	4643      	mov	r3, r8
 80106a2:	4672      	mov	r2, lr
 80106a4:	4661      	mov	r1, ip
 80106a6:	f002 ff30 	bl	801350a <VL53L1_f_014>
 80106aa:	4603      	mov	r3, r0
 80106ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80106b0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80106b4:	f113 0f0f 	cmn.w	r3, #15
 80106b8:	d103      	bne.n	80106c2 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80106ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106c0:	801a      	strh	r2, [r3, #0]


	return status;
 80106c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3738      	adds	r7, #56	; 0x38
 80106ca:	46bd      	mov	sp, r7
 80106cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106d0 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 80106d0:	b490      	push	{r4, r7}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	4604      	mov	r4, r0
 80106d8:	4608      	mov	r0, r1
 80106da:	4611      	mov	r1, r2
 80106dc:	461a      	mov	r2, r3
 80106de:	4623      	mov	r3, r4
 80106e0:	71fb      	strb	r3, [r7, #7]
 80106e2:	4603      	mov	r3, r0
 80106e4:	71bb      	strb	r3, [r7, #6]
 80106e6:	460b      	mov	r3, r1
 80106e8:	717b      	strb	r3, [r7, #5]
 80106ea:	4613      	mov	r3, r2
 80106ec:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	79fa      	ldrb	r2, [r7, #7]
 80106fa:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 80106fc:	6a3b      	ldr	r3, [r7, #32]
 80106fe:	2200      	movs	r2, #0
 8010700:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	781a      	ldrb	r2, [r3, #0]
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	785a      	ldrb	r2, [r3, #1]
 801070e:	6a3b      	ldr	r3, [r7, #32]
 8010710:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	789a      	ldrb	r2, [r3, #2]
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	78da      	ldrb	r2, [r3, #3]
 801071e:	6a3b      	ldr	r3, [r7, #32]
 8010720:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	791a      	ldrb	r2, [r3, #4]
 8010726:	6a3b      	ldr	r3, [r7, #32]
 8010728:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	795a      	ldrb	r2, [r3, #5]
 801072e:	6a3b      	ldr	r3, [r7, #32]
 8010730:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	791a      	ldrb	r2, [r3, #4]
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	b2db      	uxtb	r3, r3
 801073e:	3301      	adds	r3, #1
 8010740:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 801074c:	6a3b      	ldr	r3, [r7, #32]
 801074e:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	8c1a      	ldrh	r2, [r3, #32]
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	695b      	ldr	r3, [r3, #20]
 801075c:	b29a      	uxth	r2, r3
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 8010762:	69fb      	ldr	r3, [r7, #28]
 8010764:	699b      	ldr	r3, [r3, #24]
 8010766:	b29a      	uxth	r2, r3
 8010768:	6a3b      	ldr	r3, [r7, #32]
 801076a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	69db      	ldr	r3, [r3, #28]
 8010772:	b29a      	uxth	r2, r3
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 801077a:	69fb      	ldr	r3, [r7, #28]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	461a      	mov	r2, r3
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	691a      	ldr	r2, [r3, #16]
 8010788:	6a3b      	ldr	r3, [r7, #32]
 801078a:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	461a      	mov	r2, r3
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80107a0:	6a3b      	ldr	r3, [r7, #32]
 80107a2:	2213      	movs	r2, #19
 80107a4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 80107a8:	887b      	ldrh	r3, [r7, #2]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00a      	beq.n	80107c4 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	8c1b      	ldrh	r3, [r3, #32]
 80107b2:	461a      	mov	r2, r3
 80107b4:	887b      	ldrh	r3, [r7, #2]
 80107b6:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d903      	bls.n	80107c4 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 80107bc:	6a3b      	ldr	r3, [r7, #32]
 80107be:	2206      	movs	r2, #6
 80107c0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 80107c4:	79bb      	ldrb	r3, [r7, #6]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	021b      	lsls	r3, r3, #8
 80107ca:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 80107cc:	6a3b      	ldr	r3, [r7, #32]
 80107ce:	8a9b      	ldrh	r3, [r3, #20]
 80107d0:	89fa      	ldrh	r2, [r7, #14]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d205      	bcs.n	80107e2 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 80107da:	89fb      	ldrh	r3, [r7, #14]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	81fb      	strh	r3, [r7, #14]
 80107e0:	e001      	b.n	80107e6 <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 80107e6:	797b      	ldrb	r3, [r7, #5]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	021b      	lsls	r3, r3, #8
 80107ec:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 80107f4:	89bb      	ldrh	r3, [r7, #12]
 80107f6:	4413      	add	r3, r2
 80107f8:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010800:	89fa      	ldrh	r2, [r7, #14]
 8010802:	429a      	cmp	r2, r3
 8010804:	d805      	bhi.n	8010812 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 8010806:	6a3b      	ldr	r3, [r7, #32]
 8010808:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801080c:	89ba      	ldrh	r2, [r7, #12]
 801080e:	429a      	cmp	r2, r3
 8010810:	d203      	bcs.n	801081a <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	2205      	movs	r2, #5
 8010816:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801081a:	bf00      	nop
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bc90      	pop	{r4, r7}
 8010822:	4770      	bx	lr

08010824 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010826:	b08f      	sub	sp, #60	; 0x3c
 8010828:	af06      	add	r7, sp, #24
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010832:	2300      	movs	r3, #0
 8010834:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801083a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801083c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010840:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010844:	f7ff f856 	bl	800f8f4 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 8010848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801084a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 801084e:	22ac      	movs	r2, #172	; 0xac
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	4618      	mov	r0, r3
 8010854:	f008 fed4 	bl	8019600 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	781a      	ldrb	r2, [r3, #0]
 801085c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801085e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	785a      	ldrb	r2, [r3, #1]
 8010864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010866:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	789a      	ldrb	r2, [r3, #2]
 801086c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801086e:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8010876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010878:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 801087a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801087c:	2200      	movs	r2, #0
 801087e:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 8010880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010882:	2204      	movs	r2, #4
 8010884:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 8010886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010888:	2200      	movs	r2, #0
 801088a:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 801088c:	2300      	movs	r3, #0
 801088e:	77bb      	strb	r3, [r7, #30]
 8010890:	e008      	b.n	80108a4 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 8010892:	7fbb      	ldrb	r3, [r7, #30]
 8010894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010896:	005b      	lsls	r3, r3, #1
 8010898:	4413      	add	r3, r2
 801089a:	2200      	movs	r2, #0
 801089c:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 801089e:	7fbb      	ldrb	r3, [r7, #30]
 80108a0:	3301      	adds	r3, #1
 80108a2:	77bb      	strb	r3, [r7, #30]
 80108a4:	7fbb      	ldrb	r3, [r7, #30]
 80108a6:	2b04      	cmp	r3, #4
 80108a8:	d9f3      	bls.n	8010892 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 80108aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fd ff58 	bl	800e766 <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 80108ba:	461a      	mov	r2, r3
 80108bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80108c2:	4619      	mov	r1, r3
 80108c4:	4610      	mov	r0, r2
 80108c6:	f7fd ff8e 	bl	800e7e6 <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 80108ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108cc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fe fb66 	bl	800efa2 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 80108d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80108dc:	4618      	mov	r0, r3
 80108de:	f7fd fffc 	bl	800e8da <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d009      	beq.n	8010900 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 80108ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ee:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80108f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80108f8:	461a      	mov	r2, r3
 80108fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108fc:	f000 fdae 	bl	801145c <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010908:	2300      	movs	r3, #0
 801090a:	77bb      	strb	r3, [r7, #30]
 801090c:	e01e      	b.n	801094c <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 801090e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d117      	bne.n	8010946 <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 8010916:	7fbb      	ldrb	r3, [r7, #30]
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	3304      	adds	r3, #4
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	8898      	ldrh	r0, [r3, #4]
 8010922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010924:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 8010928:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801092e:	4413      	add	r3, r2
 8010930:	3304      	adds	r3, #4
 8010932:	9301      	str	r3, [sp, #4]
 8010934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	460b      	mov	r3, r1
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	68f9      	ldr	r1, [r7, #12]
 801093e:	f7fe fb7b 	bl	800f038 <VL53L1_f_001>
 8010942:	4603      	mov	r3, r0
 8010944:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 8010946:	7fbb      	ldrb	r3, [r7, #30]
 8010948:	3301      	adds	r3, #1
 801094a:	77bb      	strb	r3, [r7, #30]
 801094c:	7fbb      	ldrb	r3, [r7, #30]
 801094e:	2b04      	cmp	r3, #4
 8010950:	d9dd      	bls.n	801090e <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010952:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d11a      	bne.n	8010990 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 8010962:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 801096e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010970:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010976:	f502 7252 	add.w	r2, r2, #840	; 0x348
 801097a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801097c:	9102      	str	r1, [sp, #8]
 801097e:	9201      	str	r2, [sp, #4]
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462b      	mov	r3, r5
 8010984:	4622      	mov	r2, r4
 8010986:	4631      	mov	r1, r6
 8010988:	f7ff f82d 	bl	800f9e6 <VL53L1_f_018>
 801098c:	4603      	mov	r3, r0
 801098e:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 8010990:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d104      	bne.n	80109a2 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 8010998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801099a:	f7ff f954 	bl	800fc46 <VL53L1_f_019>
 801099e:	4603      	mov	r3, r0
 80109a0:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80109a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d104      	bne.n	80109b4 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 80109aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109ac:	f7ff f999 	bl	800fce2 <VL53L1_f_020>
 80109b0:	4603      	mov	r3, r0
 80109b2:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80109b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d104      	bne.n	80109c6 <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 80109bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80109be:	f7ff fa0e 	bl	800fdde <VL53L1_f_021>
 80109c2:	4603      	mov	r3, r0
 80109c4:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 80109c6:	2300      	movs	r3, #0
 80109c8:	77bb      	strb	r3, [r7, #30]
 80109ca:	e0a6      	b.n	8010b1a <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 80109cc:	7fba      	ldrb	r2, [r7, #30]
 80109ce:	4613      	mov	r3, r2
 80109d0:	00db      	lsls	r3, r3, #3
 80109d2:	4413      	add	r3, r2
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80109da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109dc:	4413      	add	r3, r2
 80109de:	3304      	adds	r3, #4
 80109e0:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 80109e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d109      	bne.n	80109fe <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 80109ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ec:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 80109f0:	7fbb      	ldrb	r3, [r7, #30]
 80109f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff fb48 	bl	801008a <VL53L1_f_022>
 80109fa:	4603      	mov	r3, r0
 80109fc:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 80109fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d110      	bne.n	8010a28 <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 8010a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a08:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a14:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8010a18:	7fb8      	ldrb	r0, [r7, #30]
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a20:	f7ff fd5a 	bl	80104d8 <VL53L1_f_023>
 8010a24:	4603      	mov	r3, r0
 8010a26:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 8010a28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10d      	bne.n	8010a4c <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a32:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a38:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010a3c:	7fb8      	ldrb	r0, [r7, #30]
 8010a3e:	9300      	str	r3, [sp, #0]
 8010a40:	2300      	movs	r3, #0
 8010a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a44:	f7ff fd48 	bl	80104d8 <VL53L1_f_023>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d10d      	bne.n	8010a70 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a56:	f503 7152 	add.w	r1, r3, #840	; 0x348
 8010a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8010a60:	7fb8      	ldrb	r0, [r7, #30]
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	2300      	movs	r3, #0
 8010a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a68:	f7ff fd36 	bl	80104d8 <VL53L1_f_023>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 8010a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d109      	bne.n	8010a8c <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 8010a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7a:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 8010a7e:	7fb8      	ldrb	r0, [r7, #30]
 8010a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a84:	f000 f8dd 	bl	8010c42 <VL53L1_f_034>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 8010a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d108      	bne.n	8010aa6 <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	8a19      	ldrh	r1, [r3, #16]
 8010a98:	7fb8      	ldrb	r0, [r7, #30]
 8010a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a9e:	f000 f95c 	bl	8010d5a <VL53L1_f_035>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 8010aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d124      	bne.n	8010af8 <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	789d      	ldrb	r5, [r3, #2]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	7e1e      	ldrb	r6, [r3, #24]
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010aca:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ad0:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010ad4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010ad6:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 8010ada:	697c      	ldr	r4, [r7, #20]
 8010adc:	3420      	adds	r4, #32
 8010ade:	9404      	str	r4, [sp, #16]
 8010ae0:	9003      	str	r0, [sp, #12]
 8010ae2:	9102      	str	r1, [sp, #8]
 8010ae4:	9201      	str	r2, [sp, #4]
 8010ae6:	9300      	str	r3, [sp, #0]
 8010ae8:	4673      	mov	r3, lr
 8010aea:	4662      	mov	r2, ip
 8010aec:	4631      	mov	r1, r6
 8010aee:	4628      	mov	r0, r5
 8010af0:	f7ff fd46 	bl	8010580 <VL53L1_f_026>
 8010af4:	4603      	mov	r3, r0
 8010af6:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 8010af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d109      	bne.n	8010b14 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b02:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 8010b06:	7fb8      	ldrb	r0, [r7, #30]
 8010b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b0a:	2101      	movs	r1, #1
 8010b0c:	f7ff fb10 	bl	8010130 <VL53L1_f_027>
 8010b10:	4603      	mov	r3, r0
 8010b12:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010b14:	7fbb      	ldrb	r3, [r7, #30]
 8010b16:	3301      	adds	r3, #1
 8010b18:	77bb      	strb	r3, [r7, #30]
 8010b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b1c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010b20:	7fba      	ldrb	r2, [r7, #30]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	f4ff af52 	bcc.w	80109cc <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 8010b28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d107      	bne.n	8010b40 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	785b      	ldrb	r3, [r3, #1]
 8010b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7ff fa23 	bl	800ff82 <VL53L1_f_028>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010b40:	2300      	movs	r3, #0
 8010b42:	77bb      	strb	r3, [r7, #30]
 8010b44:	e071      	b.n	8010c2a <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010b46:	7fba      	ldrb	r2, [r7, #30]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	4413      	add	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010b54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b56:	4413      	add	r3, r2
 8010b58:	3304      	adds	r3, #4
 8010b5a:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 8010b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b5e:	7c9a      	ldrb	r2, [r3, #18]
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	7c5b      	ldrb	r3, [r3, #17]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d25c      	bcs.n	8010c22 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 8010b70:	429a      	cmp	r2, r3
 8010b72:	dd57      	ble.n	8010c24 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 8010b78:	2bff      	cmp	r3, #255	; 0xff
 8010b7a:	d053      	beq.n	8010c24 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 8010b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b7e:	7c9b      	ldrb	r3, [r3, #18]
 8010b80:	461a      	mov	r2, r3
			prange_data =
 8010b82:	234c      	movs	r3, #76	; 0x4c
 8010b84:	fb02 f303 	mul.w	r3, r2, r3
 8010b88:	3310      	adds	r3, #16
 8010b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b8c:	4413      	add	r3, r2
 8010b8e:	3304      	adds	r3, #4
 8010b90:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 8010b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d115      	bne.n	8010bc6 <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 8010b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b9c:	7c98      	ldrb	r0, [r3, #18]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 1020 	ldrb.w	r1, [r3, #32]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	8b5d      	ldrh	r5, [r3, #26]
 8010bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010bb4:	693a      	ldr	r2, [r7, #16]
 8010bb6:	9202      	str	r2, [sp, #8]
 8010bb8:	697a      	ldr	r2, [r7, #20]
 8010bba:	9201      	str	r2, [sp, #4]
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	4622      	mov	r2, r4
 8010bc2:	f7ff fd85 	bl	80106d0 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 8010bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d115      	bne.n	8010bfa <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010bd4:	69bb      	ldr	r3, [r7, #24]
 8010bd6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 8010be6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	4623      	mov	r3, r4
 8010bf2:	f000 fb44 	bl	801127e <VL53L1_f_011>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 8010bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d108      	bne.n	8010c14 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8bd8      	ldrh	r0, [r3, #30]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010c0c:	693a      	ldr	r2, [r7, #16]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	f000 fbda 	bl	80113c8 <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c16:	7c9b      	ldrb	r3, [r3, #18]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c1e:	749a      	strb	r2, [r3, #18]
 8010c20:	e000      	b.n	8010c24 <VL53L1_f_033+0x400>
			continue;
 8010c22:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010c24:	7fbb      	ldrb	r3, [r7, #30]
 8010c26:	3301      	adds	r3, #1
 8010c28:	77bb      	strb	r3, [r7, #30]
 8010c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c2c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010c30:	7fba      	ldrb	r2, [r7, #30]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d387      	bcc.n	8010b46 <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 8010c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3724      	adds	r7, #36	; 0x24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c42 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b08c      	sub	sp, #48	; 0x30
 8010c46:	af02      	add	r7, sp, #8
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
 8010c4e:	4603      	mov	r3, r0
 8010c50:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010c52:	2300      	movs	r3, #0
 8010c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010c58:	7bfa      	ldrb	r2, [r7, #15]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	00db      	lsls	r3, r3, #3
 8010c5e:	4413      	add	r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	4413      	add	r3, r2
 8010c6a:	3304      	adds	r3, #4
 8010c6c:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 8010c80:	2300      	movs	r3, #0
 8010c82:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	785a      	ldrb	r2, [r3, #1]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	781a      	ldrb	r2, [r3, #0]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	789a      	ldrb	r2, [r3, #2]
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ca4:	e04d      	b.n	8010d42 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	78da      	ldrb	r2, [r3, #3]
 8010caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cb2:	fb01 f202 	mul.w	r2, r1, r2
 8010cb6:	1a9b      	subs	r3, r3, r2
 8010cb8:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	7999      	ldrb	r1, [r3, #6]
 8010cbe:	f107 0218 	add.w	r2, r7, #24
 8010cc2:	7ff8      	ldrb	r0, [r7, #31]
 8010cc4:	f107 0310 	add.w	r3, r7, #16
 8010cc8:	9301      	str	r3, [sp, #4]
 8010cca:	f107 0314 	add.w	r3, r7, #20
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	f000 fa7a 	bl	80111cc <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 8010cd8:	7ffb      	ldrb	r3, [r7, #31]
 8010cda:	69ba      	ldr	r2, [r7, #24]
 8010cdc:	6839      	ldr	r1, [r7, #0]
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	440b      	add	r3, r1
 8010ce2:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010ce4:	7ffb      	ldrb	r3, [r7, #31]
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	6839      	ldr	r1, [r7, #0]
 8010cea:	3318      	adds	r3, #24
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	440b      	add	r3, r1
 8010cf0:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010cf2:	7ffb      	ldrb	r3, [r7, #31]
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	6839      	ldr	r1, [r7, #0]
 8010cf8:	3330      	adds	r3, #48	; 0x30
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	440b      	add	r3, r1
 8010cfe:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010d00:	69ba      	ldr	r2, [r7, #24]
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	689a      	ldr	r2, [r3, #8]
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010d0e:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010d10:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	3348      	adds	r3, #72	; 0x48
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	440b      	add	r3, r1
 8010d1a:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010d1c:	697a      	ldr	r2, [r7, #20]
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	689a      	ldr	r2, [r3, #8]
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 8010d2a:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010d2c:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010d2e:	6839      	ldr	r1, [r7, #0]
 8010d30:	3360      	adds	r3, #96	; 0x60
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 8010d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d42:	6a3b      	ldr	r3, [r7, #32]
 8010d44:	791b      	ldrb	r3, [r3, #4]
 8010d46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d9ab      	bls.n	8010ca6 <VL53L1_f_034+0x64>
	}

	return status;
 8010d4e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3728      	adds	r7, #40	; 0x28
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 8010d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5c:	b08f      	sub	sp, #60	; 0x3c
 8010d5e:	af06      	add	r7, sp, #24
 8010d60:	60ba      	str	r2, [r7, #8]
 8010d62:	607b      	str	r3, [r7, #4]
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]
 8010d68:	460b      	mov	r3, r1
 8010d6a:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 8010d70:	2300      	movs	r3, #0
 8010d72:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 8010d74:	7bfa      	ldrb	r2, [r7, #15]
 8010d76:	4613      	mov	r3, r2
 8010d78:	00db      	lsls	r3, r3, #3
 8010d7a:	4413      	add	r3, r2
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	4413      	add	r3, r2
 8010d86:	3304      	adds	r3, #4
 8010d88:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 8010d92:	2300      	movs	r3, #0
 8010d94:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	77fb      	strb	r3, [r7, #31]
 8010d9c:	e0b9      	b.n	8010f12 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	78da      	ldrb	r2, [r3, #3]
 8010da2:	7ffb      	ldrb	r3, [r7, #31]
 8010da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010da8:	fb01 f202 	mul.w	r2, r1, r2
 8010dac:	1a9b      	subs	r3, r3, r2
 8010dae:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 8010db0:	7ffb      	ldrb	r3, [r7, #31]
 8010db2:	3301      	adds	r3, #1
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	78d2      	ldrb	r2, [r2, #3]
 8010db8:	fb93 f1f2 	sdiv	r1, r3, r2
 8010dbc:	fb01 f202 	mul.w	r2, r1, r2
 8010dc0:	1a9b      	subs	r3, r3, r2
 8010dc2:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	789b      	ldrb	r3, [r3, #2]
 8010dc8:	7dfa      	ldrb	r2, [r7, #23]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	f080 809e 	bcs.w	8010f0c <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010dd4:	7dba      	ldrb	r2, [r7, #22]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	f080 8098 	bcs.w	8010f0c <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010ddc:	7dfb      	ldrb	r3, [r7, #23]
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	3348      	adds	r3, #72	; 0x48
 8010de2:	009b      	lsls	r3, r3, #2
 8010de4:	4413      	add	r3, r2
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d10e      	bne.n	8010e0a <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010dec:	7dfb      	ldrb	r3, [r7, #23]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	3360      	adds	r3, #96	; 0x60
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d106      	bne.n	8010e0a <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010dfc:	7dfb      	ldrb	r3, [r7, #23]
 8010dfe:	68ba      	ldr	r2, [r7, #8]
 8010e00:	4413      	add	r3, r2
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010e08:	e043      	b.n	8010e92 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010e0a:	7dfb      	ldrb	r3, [r7, #23]
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	3348      	adds	r3, #72	; 0x48
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	4413      	add	r3, r2
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	db0e      	blt.n	8010e38 <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	68ba      	ldr	r2, [r7, #8]
 8010e1e:	3360      	adds	r3, #96	; 0x60
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	4413      	add	r3, r2
 8010e24:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	db06      	blt.n	8010e38 <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 8010e2a:	7dfb      	ldrb	r3, [r7, #23]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	4413      	add	r3, r2
 8010e30:	2201      	movs	r2, #1
 8010e32:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010e36:	e02c      	b.n	8010e92 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010e38:	7dfb      	ldrb	r3, [r7, #23]
 8010e3a:	68ba      	ldr	r2, [r7, #8]
 8010e3c:	3348      	adds	r3, #72	; 0x48
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	da1e      	bge.n	8010e86 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010e48:	7dfb      	ldrb	r3, [r7, #23]
 8010e4a:	68ba      	ldr	r2, [r7, #8]
 8010e4c:	3360      	adds	r3, #96	; 0x60
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	db16      	blt.n	8010e86 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010e58:	7dbb      	ldrb	r3, [r7, #22]
 8010e5a:	68ba      	ldr	r2, [r7, #8]
 8010e5c:	3348      	adds	r3, #72	; 0x48
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4413      	add	r3, r2
 8010e62:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	db0e      	blt.n	8010e86 <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 8010e68:	7dbb      	ldrb	r3, [r7, #22]
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	3360      	adds	r3, #96	; 0x60
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4413      	add	r3, r2
 8010e72:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	da06      	bge.n	8010e86 <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 8010e78:	7dfb      	ldrb	r3, [r7, #23]
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010e84:	e005      	b.n	8010e92 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 8010e92:	7dfb      	ldrb	r3, [r7, #23]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	4413      	add	r3, r2
 8010e98:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d035      	beq.n	8010f0c <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	7ffa      	ldrb	r2, [r7, #31]
 8010ea4:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
 8010ea8:	68ba      	ldr	r2, [r7, #8]
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	4413      	add	r3, r2
 8010eae:	685c      	ldr	r4, [r3, #4]
 8010eb0:	7dfb      	ldrb	r3, [r7, #23]
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	3318      	adds	r3, #24
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	4413      	add	r3, r2
 8010eba:	685d      	ldr	r5, [r3, #4]
 8010ebc:	7dfb      	ldrb	r3, [r7, #23]
 8010ebe:	68ba      	ldr	r2, [r7, #8]
 8010ec0:	3330      	adds	r3, #48	; 0x30
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	4413      	add	r3, r2
 8010ec6:	685e      	ldr	r6, [r3, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	78d2      	ldrb	r2, [r2, #3]
 8010ed0:	69b9      	ldr	r1, [r7, #24]
 8010ed2:	3118      	adds	r1, #24
 8010ed4:	7ff8      	ldrb	r0, [r7, #31]
 8010ed6:	9105      	str	r1, [sp, #20]
 8010ed8:	9204      	str	r2, [sp, #16]
 8010eda:	9303      	str	r3, [sp, #12]
 8010edc:	2300      	movs	r3, #0
 8010ede:	9302      	str	r3, [sp, #8]
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	9301      	str	r3, [sp, #4]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4633      	mov	r3, r6
 8010eea:	462a      	mov	r2, r5
 8010eec:	4621      	mov	r1, r4
 8010eee:	f000 f81c 	bl	8010f2a <VL53L1_f_036>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8010ef6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010efa:	f113 0f0f 	cmn.w	r3, #15
 8010efe:	d105      	bne.n	8010f0c <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8010f00:	7dfb      	ldrb	r3, [r7, #23]
 8010f02:	68ba      	ldr	r2, [r7, #8]
 8010f04:	4413      	add	r3, r2
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010f0c:	7ffb      	ldrb	r3, [r7, #31]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	77fb      	strb	r3, [r7, #31]
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	791b      	ldrb	r3, [r3, #4]
 8010f16:	7ffa      	ldrb	r2, [r7, #31]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	f4ff af40 	bcc.w	8010d9e <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010f1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3724      	adds	r7, #36	; 0x24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f2a <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010f2a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f2e:	b0b2      	sub	sp, #200	; 0xc8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f3e:	4603      	mov	r3, r0
 8010f40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010f44:	23f1      	movs	r3, #241	; 0xf1
 8010f46:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f4e:	f04f 0300 	mov.w	r3, #0
 8010f52:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010f56:	f04f 0200 	mov.w	r2, #0
 8010f5a:	f04f 0300 	mov.w	r3, #0
 8010f5e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010f62:	f04f 0200 	mov.w	r2, #0
 8010f66:	f04f 0300 	mov.w	r3, #0
 8010f6a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f72:	17da      	asrs	r2, r3, #31
 8010f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010f7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f80:	17da      	asrs	r2, r3, #31
 8010f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f86:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010f92:	4602      	mov	r2, r0
 8010f94:	ebb3 0802 	subs.w	r8, r3, r2
 8010f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010f9c:	460a      	mov	r2, r1
 8010f9e:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010fa6:	17da      	asrs	r2, r3, #31
 8010fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8010faa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010fac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	ebb8 0a03 	subs.w	sl, r8, r3
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	eb69 0b03 	sbc.w	fp, r9, r3
 8010fbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010fc0:	17da      	asrs	r2, r3, #31
 8010fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8010fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8010fc6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010fca:	460b      	mov	r3, r1
 8010fcc:	ebba 0403 	subs.w	r4, sl, r3
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010fd6:	f04f 0200 	mov.w	r2, #0
 8010fda:	f04f 0300 	mov.w	r3, #0
 8010fde:	032b      	lsls	r3, r5, #12
 8010fe0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8010fe4:	0322      	lsls	r2, r4, #12
 8010fe6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010fea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fee:	17da      	asrs	r2, r3, #31
 8010ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ff2:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010ff4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ff8:	17da      	asrs	r2, r3, #31
 8010ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8010ffc:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010ffe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8011002:	4623      	mov	r3, r4
 8011004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8011008:	4602      	mov	r2, r0
 801100a:	1a9b      	subs	r3, r3, r2
 801100c:	65bb      	str	r3, [r7, #88]	; 0x58
 801100e:	462b      	mov	r3, r5
 8011010:	460a      	mov	r2, r1
 8011012:	eb63 0302 	sbc.w	r3, r3, r2
 8011016:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8011018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801101c:	17da      	asrs	r2, r3, #31
 801101e:	653b      	str	r3, [r7, #80]	; 0x50
 8011020:	657a      	str	r2, [r7, #84]	; 0x54
 8011022:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8011026:	4623      	mov	r3, r4
 8011028:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801102c:	4602      	mov	r2, r0
 801102e:	1a9b      	subs	r3, r3, r2
 8011030:	64bb      	str	r3, [r7, #72]	; 0x48
 8011032:	462b      	mov	r3, r5
 8011034:	460a      	mov	r2, r1
 8011036:	eb63 0302 	sbc.w	r3, r3, r2
 801103a:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 801103c:	f04f 0200 	mov.w	r2, #0
 8011040:	f04f 0300 	mov.w	r3, #0
 8011044:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011048:	4629      	mov	r1, r5
 801104a:	030b      	lsls	r3, r1, #12
 801104c:	4621      	mov	r1, r4
 801104e:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8011052:	4621      	mov	r1, r4
 8011054:	030a      	lsls	r2, r1, #12
 8011056:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 801105a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801105e:	4313      	orrs	r3, r2
 8011060:	f000 80a8 	beq.w	80111b4 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8011064:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8011068:	f04f 0000 	mov.w	r0, #0
 801106c:	f04f 0100 	mov.w	r1, #0
 8011070:	0319      	lsls	r1, r3, #12
 8011072:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8011076:	0310      	lsls	r0, r2, #12
 8011078:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 801107c:	1814      	adds	r4, r2, r0
 801107e:	633c      	str	r4, [r7, #48]	; 0x30
 8011080:	414b      	adcs	r3, r1
 8011082:	637b      	str	r3, [r7, #52]	; 0x34
 8011084:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011088:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 801108c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8011090:	1891      	adds	r1, r2, r2
 8011092:	62b9      	str	r1, [r7, #40]	; 0x28
 8011094:	415b      	adcs	r3, r3
 8011096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801109c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80110a0:	f7ef f8be 	bl	8000220 <__aeabi_ldivmod>
 80110a4:	4602      	mov	r2, r0
 80110a6:	460b      	mov	r3, r1
 80110a8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 80110ac:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80110b0:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80110b4:	6239      	str	r1, [r7, #32]
 80110b6:	f143 0300 	adc.w	r3, r3, #0
 80110ba:	627b      	str	r3, [r7, #36]	; 0x24
 80110bc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80110c0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 80110c4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80110c8:	2200      	movs	r2, #0
 80110ca:	643b      	str	r3, [r7, #64]	; 0x40
 80110cc:	647a      	str	r2, [r7, #68]	; 0x44
 80110ce:	f04f 0200 	mov.w	r2, #0
 80110d2:	f04f 0300 	mov.w	r3, #0
 80110d6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80110da:	4629      	mov	r1, r5
 80110dc:	030b      	lsls	r3, r1, #12
 80110de:	4621      	mov	r1, r4
 80110e0:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 80110e4:	4621      	mov	r1, r4
 80110e6:	030a      	lsls	r2, r1, #12
 80110e8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80110ec:	1884      	adds	r4, r0, r2
 80110ee:	61bc      	str	r4, [r7, #24]
 80110f0:	eb41 0303 	adc.w	r3, r1, r3
 80110f4:	61fb      	str	r3, [r7, #28]
 80110f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80110fa:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 80110fe:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011102:	1c51      	adds	r1, r2, #1
 8011104:	63b9      	str	r1, [r7, #56]	; 0x38
 8011106:	f143 0300 	adc.w	r3, r3, #0
 801110a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801110c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8011110:	460b      	mov	r3, r1
 8011112:	0fdb      	lsrs	r3, r3, #31
 8011114:	2200      	movs	r2, #0
 8011116:	613b      	str	r3, [r7, #16]
 8011118:	617a      	str	r2, [r7, #20]
 801111a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801111e:	4623      	mov	r3, r4
 8011120:	4602      	mov	r2, r0
 8011122:	189b      	adds	r3, r3, r2
 8011124:	60bb      	str	r3, [r7, #8]
 8011126:	460b      	mov	r3, r1
 8011128:	462a      	mov	r2, r5
 801112a:	eb42 0303 	adc.w	r3, r2, r3
 801112e:	60fb      	str	r3, [r7, #12]
 8011130:	f04f 0200 	mov.w	r2, #0
 8011134:	f04f 0300 	mov.w	r3, #0
 8011138:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801113c:	4621      	mov	r1, r4
 801113e:	084a      	lsrs	r2, r1, #1
 8011140:	4629      	mov	r1, r5
 8011142:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011146:	4629      	mov	r1, r5
 8011148:	104b      	asrs	r3, r1, #1
 801114a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 801114e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011152:	2b00      	cmp	r3, #0
 8011154:	da05      	bge.n	8011162 <VL53L1_f_036+0x238>
			mean_phase = 0;
 8011156:	f04f 0200 	mov.w	r2, #0
 801115a:	f04f 0300 	mov.w	r3, #0
 801115e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8011162:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8011166:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801116a:	f173 0300 	sbcs.w	r3, r3, #0
 801116e:	db05      	blt.n	801117c <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8011170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011174:	f04f 0300 	mov.w	r3, #0
 8011178:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 801117c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8011184:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8011188:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 801118a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801118e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011192:	fb01 f202 	mul.w	r2, r1, r2
 8011196:	1a9b      	subs	r3, r3, r2
 8011198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 801119c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80111a0:	17da      	asrs	r2, r3, #31
 80111a2:	603b      	str	r3, [r7, #0]
 80111a4:	607a      	str	r2, [r7, #4]
 80111a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80111aa:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 80111ae:	2300      	movs	r3, #0
 80111b0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 80111b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80111b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80111bc:	601a      	str	r2, [r3, #0]

	return status;
 80111be:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	37c8      	adds	r7, #200	; 0xc8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080111cc <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b087      	sub	sp, #28
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	60ba      	str	r2, [r7, #8]
 80111d4:	607b      	str	r3, [r7, #4]
 80111d6:	4603      	mov	r3, r0
 80111d8:	73fb      	strb	r3, [r7, #15]
 80111da:	460b      	mov	r3, r1
 80111dc:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 80111de:	2300      	movs	r3, #0
 80111e0:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2200      	movs	r2, #0
 80111ea:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 80111ec:	7bfa      	ldrb	r2, [r7, #15]
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	3206      	adds	r2, #6
 80111f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80111f6:	6a3b      	ldr	r3, [r7, #32]
 80111f8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 80111fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011200:	2300      	movs	r3, #0
 8011202:	75fb      	strb	r3, [r7, #23]
 8011204:	e02f      	b.n	8011266 <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011206:	7bfa      	ldrb	r2, [r7, #15]
 8011208:	7dfb      	ldrb	r3, [r7, #23]
 801120a:	4413      	add	r3, r2
 801120c:	68ba      	ldr	r2, [r7, #8]
 801120e:	7a92      	ldrb	r2, [r2, #10]
 8011210:	441a      	add	r2, r3
 8011212:	7bbb      	ldrb	r3, [r7, #14]
 8011214:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	7a92      	ldrb	r2, [r2, #10]
 801121a:	fb93 f1f2 	sdiv	r1, r3, r2
 801121e:	fb01 f202 	mul.w	r2, r1, r2
 8011222:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8011224:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8011226:	7dfa      	ldrb	r2, [r7, #23]
 8011228:	7bbb      	ldrb	r3, [r7, #14]
 801122a:	429a      	cmp	r2, r3
 801122c:	d20a      	bcs.n	8011244 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681a      	ldr	r2, [r3, #0]
 8011232:	7db9      	ldrb	r1, [r7, #22]
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	3106      	adds	r1, #6
 8011238:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801123c:	441a      	add	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	601a      	str	r2, [r3, #0]
 8011242:	e00d      	b.n	8011260 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8011244:	7dfa      	ldrb	r2, [r7, #23]
 8011246:	7bbb      	ldrb	r3, [r7, #14]
 8011248:	429a      	cmp	r2, r3
 801124a:	d909      	bls.n	8011260 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 801124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	7db9      	ldrb	r1, [r7, #22]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	3106      	adds	r1, #6
 8011256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801125a:	441a      	add	r2, r3
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8011260:	7dfb      	ldrb	r3, [r7, #23]
 8011262:	3301      	adds	r3, #1
 8011264:	75fb      	strb	r3, [r7, #23]
 8011266:	7bbb      	ldrb	r3, [r7, #14]
 8011268:	005a      	lsls	r2, r3, #1
 801126a:	7dfb      	ldrb	r3, [r7, #23]
 801126c:	429a      	cmp	r2, r3
 801126e:	daca      	bge.n	8011206 <VL53L1_f_013+0x3a>
	}
}
 8011270:	bf00      	nop
 8011272:	bf00      	nop
 8011274:	371c      	adds	r7, #28
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b088      	sub	sp, #32
 8011282:	af00      	add	r7, sp, #0
 8011284:	60ba      	str	r2, [r7, #8]
 8011286:	461a      	mov	r2, r3
 8011288:	4603      	mov	r3, r0
 801128a:	81fb      	strh	r3, [r7, #14]
 801128c:	460b      	mov	r3, r1
 801128e:	81bb      	strh	r3, [r7, #12]
 8011290:	4613      	mov	r3, r2
 8011292:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8011294:	2300      	movs	r3, #0
 8011296:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8011298:	2300      	movs	r3, #0
 801129a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 801129c:	2300      	movs	r3, #0
 801129e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 80112a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a6:	89fa      	ldrh	r2, [r7, #14]
 80112a8:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	89ba      	ldrh	r2, [r7, #12]
 80112ae:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 80112b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 80112b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b8:	88fa      	ldrh	r2, [r7, #6]
 80112ba:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 80112bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112be:	8a5b      	ldrh	r3, [r3, #18]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80112c4:	23f1      	movs	r3, #241	; 0xf1
 80112c6:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 80112c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ca:	699b      	ldr	r3, [r3, #24]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d101      	bne.n	80112d4 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80112d0:	23f1      	movs	r3, #241	; 0xf1
 80112d2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80112d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d16f      	bne.n	80113bc <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	8a5b      	ldrh	r3, [r3, #18]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fd f903 	bl	800e4ec <VL53L1_calc_pll_period_us>
 80112e6:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 80112e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	3301      	adds	r3, #1
 80112ee:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 80112f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 80112f4:	4619      	mov	r1, r3
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112fc:	6978      	ldr	r0, [r7, #20]
 80112fe:	f7fd f90c 	bl	800e51a <VL53L1_duration_maths>
 8011302:	4602      	mov	r2, r0
 8011304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011306:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8011308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 801130c:	0119      	lsls	r1, r3, #4
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011314:	6978      	ldr	r0, [r7, #20]
 8011316:	f7fd f900 	bl	800e51a <VL53L1_duration_maths>
 801131a:	4602      	mov	r2, r0
 801131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131e:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	69db      	ldr	r3, [r3, #28]
 8011328:	4619      	mov	r1, r3
 801132a:	4610      	mov	r0, r2
 801132c:	f7fd fb6d 	bl	800ea0a <VL53L1_rate_maths>
 8011330:	4603      	mov	r3, r0
 8011332:	461a      	mov	r2, r3
 8011334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011336:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8011338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 801133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133e:	6a1b      	ldr	r3, [r3, #32]
 8011340:	4619      	mov	r1, r3
 8011342:	4610      	mov	r0, r2
 8011344:	f7fd fb61 	bl	800ea0a <VL53L1_rate_maths>
 8011348:	4603      	mov	r3, r0
 801134a:	461a      	mov	r2, r3
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8011354:	461a      	mov	r2, r3
 8011356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011358:	6a1b      	ldr	r3, [r3, #32]
 801135a:	4619      	mov	r1, r3
 801135c:	4610      	mov	r0, r2
 801135e:	f7fd fb54 	bl	800ea0a <VL53L1_rate_maths>
 8011362:	4603      	mov	r3, r0
 8011364:	461a      	mov	r2, r3
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011368:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 801136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801136e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8011374:	4413      	add	r3, r2
 8011376:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8011378:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801137c:	2b01      	cmp	r3, #1
 801137e:	d905      	bls.n	801138c <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8011380:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	fbb2 f3f3 	udiv	r3, r2, r3
 801138a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 801138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138e:	8ada      	ldrh	r2, [r3, #22]
 8011390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011394:	69b9      	ldr	r1, [r7, #24]
 8011396:	2006      	movs	r0, #6
 8011398:	f7fd fb7c 	bl	800ea94 <VL53L1_rate_per_spad_maths>
 801139c:	4603      	mov	r3, r0
 801139e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 80113a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a2:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 80113a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	8ad9      	ldrh	r1, [r3, #22]
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	69db      	ldr	r3, [r3, #28]
 80113b0:	461a      	mov	r2, r3
 80113b2:	f7fd f90b 	bl	800e5cc <VL53L1_events_per_spad_maths>
 80113b6:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 80113b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ba:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 80113bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3720      	adds	r7, #32
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 80113c8:	b590      	push	{r4, r7, lr}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af02      	add	r7, sp, #8
 80113ce:	4603      	mov	r3, r0
 80113d0:	603a      	str	r2, [r7, #0]
 80113d2:	80fb      	strh	r3, [r7, #6]
 80113d4:	460b      	mov	r3, r1
 80113d6:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	8a58      	ldrh	r0, [r3, #18]
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	8a9c      	ldrh	r4, [r3, #20]
 80113e4:	88fb      	ldrh	r3, [r7, #6]
 80113e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80113ea:	9201      	str	r2, [sp, #4]
 80113ec:	9300      	str	r3, [sp, #0]
 80113ee:	2300      	movs	r3, #0
 80113f0:	4622      	mov	r2, r4
 80113f2:	f7fd fb83 	bl	800eafc <VL53L1_range_maths>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	8a58      	ldrh	r0, [r3, #18]
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	8a9c      	ldrh	r4, [r3, #20]
 801140e:	88fb      	ldrh	r3, [r7, #6]
 8011410:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011414:	9201      	str	r2, [sp, #4]
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	2300      	movs	r3, #0
 801141a:	4622      	mov	r2, r4
 801141c:	f7fd fb6e 	bl	800eafc <VL53L1_range_maths>
 8011420:	4603      	mov	r3, r0
 8011422:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	8a58      	ldrh	r0, [r3, #18]
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	8a9c      	ldrh	r4, [r3, #20]
 8011438:	88fb      	ldrh	r3, [r7, #6]
 801143a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801143e:	9201      	str	r2, [sp, #4]
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	2300      	movs	r3, #0
 8011444:	4622      	mov	r2, r4
 8011446:	f7fd fb59 	bl	800eafc <VL53L1_range_maths>
 801144a:	4603      	mov	r3, r0
 801144c:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	bd90      	pop	{r4, r7, pc}

0801145c <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b086      	sub	sp, #24
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8011468:	2300      	movs	r3, #0
 801146a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 801146c:	2300      	movs	r3, #0
 801146e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8011470:	2300      	movs	r3, #0
 8011472:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8011474:	2300      	movs	r3, #0
 8011476:	757b      	strb	r3, [r7, #21]





	memcpy(
 8011478:	22ac      	movs	r2, #172	; 0xac
 801147a:	68b9      	ldr	r1, [r7, #8]
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f008 f8bf 	bl	8019600 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011482:	2300      	movs	r3, #0
 8011484:	75fb      	strb	r3, [r7, #23]
 8011486:	e008      	b.n	801149a <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8011488:	7dfa      	ldrb	r2, [r7, #23]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	3206      	adds	r2, #6
 801148e:	2100      	movs	r1, #0
 8011490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8011494:	7dfb      	ldrb	r3, [r7, #23]
 8011496:	3301      	adds	r3, #1
 8011498:	75fb      	strb	r3, [r7, #23]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	7a5b      	ldrb	r3, [r3, #9]
 801149e:	7dfa      	ldrb	r2, [r7, #23]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d3f1      	bcc.n	8011488 <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 80114a4:	68f9      	ldr	r1, [r7, #12]
 80114a6:	68b8      	ldr	r0, [r7, #8]
 80114a8:	f000 f878 	bl	801159c <VL53L1_f_038>
 80114ac:	4603      	mov	r3, r0
 80114ae:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	7a9a      	ldrb	r2, [r3, #10]
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	7a9b      	ldrb	r3, [r3, #10]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d203      	bcs.n	80114c4 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	7a9b      	ldrb	r3, [r3, #10]
 80114c0:	75bb      	strb	r3, [r7, #22]
 80114c2:	e002      	b.n	80114ca <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	7a9b      	ldrb	r3, [r3, #10]
 80114c8:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 80114ca:	2300      	movs	r3, #0
 80114cc:	75fb      	strb	r3, [r7, #23]
 80114ce:	e05c      	b.n	801158a <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 80114d0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	db0f      	blt.n	80114f8 <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80114d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80114dc:	461a      	mov	r2, r3
 80114de:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80114e2:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	7a92      	ldrb	r2, [r2, #10]
 80114e8:	b252      	sxtb	r2, r2
 80114ea:	fb93 f1f2 	sdiv	r1, r3, r2
 80114ee:	fb01 f202 	mul.w	r2, r1, r2
 80114f2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 80114f4:	757b      	strb	r3, [r7, #21]
 80114f6:	e013      	b.n	8011520 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	7a9b      	ldrb	r3, [r3, #10]
 80114fc:	b25b      	sxtb	r3, r3
 80114fe:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8011500:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011504:	4619      	mov	r1, r3
 8011506:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801150a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801150c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	7a92      	ldrb	r2, [r2, #10]
 8011512:	b252      	sxtb	r2, r2
 8011514:	fb93 f1f2 	sdiv	r1, r3, r2
 8011518:	fb01 f202 	mul.w	r2, r1, r2
 801151c:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801151e:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011520:	7d7b      	ldrb	r3, [r7, #21]
 8011522:	461a      	mov	r2, r3
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	3206      	adds	r2, #6
 8011528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 801152c:	7df9      	ldrb	r1, [r7, #23]
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3106      	adds	r1, #6
 8011532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 8011536:	429a      	cmp	r2, r3
 8011538:	dd12      	ble.n	8011560 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801153a:	7d7b      	ldrb	r3, [r7, #21]
 801153c:	461a      	mov	r2, r3
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	3206      	adds	r2, #6
 8011542:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 8011546:	7df9      	ldrb	r1, [r7, #23]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	3106      	adds	r1, #6
 801154c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011550:	7d79      	ldrb	r1, [r7, #21]
 8011552:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011554:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	1d82      	adds	r2, r0, #6
 801155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801155e:	e006      	b.n	801156e <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 8011560:	7d7b      	ldrb	r3, [r7, #21]
 8011562:	461a      	mov	r2, r3
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	3206      	adds	r2, #6
 8011568:	2100      	movs	r1, #0
 801156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 801156e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 8011570:	7d7b      	ldrb	r3, [r7, #21]
 8011572:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	3206      	adds	r2, #6
 8011578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	1d82      	adds	r2, r0, #6
 8011580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 8011584:	7dfb      	ldrb	r3, [r7, #23]
 8011586:	3301      	adds	r3, #1
 8011588:	75fb      	strb	r3, [r7, #23]
 801158a:	7dfa      	ldrb	r2, [r7, #23]
 801158c:	7dbb      	ldrb	r3, [r7, #22]
 801158e:	429a      	cmp	r2, r3
 8011590:	d39e      	bcc.n	80114d0 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 8011592:	bf00      	nop
 8011594:	bf00      	nop
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 80115aa:	2300      	movs	r3, #0
 80115ac:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 80115ae:	2300      	movs	r3, #0
 80115b0:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fd fb85 	bl	800eccc <VL53L1_decode_vcsel_period>
 80115c2:	4603      	mov	r3, r0
	period = 2048 *
 80115c4:	02db      	lsls	r3, r3, #11
 80115c6:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d00a      	beq.n	80115e4 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80115da:	68b9      	ldr	r1, [r7, #8]
 80115dc:	fb01 f202 	mul.w	r2, r1, r2
 80115e0:	1a9b      	subs	r3, r3, r2
 80115e2:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80115ea:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 80115ec:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	dd09      	ble.n	801160c <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115fe:	2b00      	cmp	r3, #0
 8011600:	da01      	bge.n	8011606 <VL53L1_f_038+0x6a>
 8011602:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8011606:	12db      	asrs	r3, r3, #11
 8011608:	75fb      	strb	r3, [r7, #23]
 801160a:	e008      	b.n	801161e <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011612:	2b00      	cmp	r3, #0
 8011614:	da01      	bge.n	801161a <VL53L1_f_038+0x7e>
 8011616:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801161a:	12db      	asrs	r3, r3, #11
 801161c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 801161e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801162a:	b580      	push	{r7, lr}
 801162c:	b08e      	sub	sp, #56	; 0x38
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
 8011632:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011634:	2300      	movs	r3, #0
 8011636:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 8011646:	2300      	movs	r3, #0
 8011648:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011650:	2300      	movs	r3, #0
 8011652:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 8011656:	2300      	movs	r3, #0
 8011658:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 801165c:	22ac      	movs	r2, #172	; 0xac
 801165e:	6879      	ldr	r1, [r7, #4]
 8011660:	6838      	ldr	r0, [r7, #0]
 8011662:	f007 ffcd 	bl	8019600 <memcpy>


	podata->VL53L1_p_024 = 0;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	2200      	movs	r2, #0
 801166a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 801166c:	2300      	movs	r3, #0
 801166e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011672:	e00a      	b.n	801168a <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 8011674:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011678:	683a      	ldr	r2, [r7, #0]
 801167a:	4413      	add	r3, r2
 801167c:	2210      	movs	r2, #16
 801167e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 8011680:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011684:	3301      	adds	r3, #1
 8011686:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801168a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801168e:	2b05      	cmp	r3, #5
 8011690:	d9f0      	bls.n	8011674 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 8011692:	2300      	movs	r3, #0
 8011694:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011698:	e00b      	b.n	80116b2 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 801169a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	3206      	adds	r2, #6
 80116a2:	2100      	movs	r1, #0
 80116a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80116a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116ac:	3301      	adds	r3, #1
 80116ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	7a5b      	ldrb	r3, [r3, #9]
 80116b6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d3ed      	bcc.n	801169a <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80116be:	2300      	movs	r3, #0
 80116c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116c4:	e012      	b.n	80116ec <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 80116c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116ca:	3338      	adds	r3, #56	; 0x38
 80116cc:	443b      	add	r3, r7
 80116ce:	2200      	movs	r2, #0
 80116d0:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 80116d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116d8:	3338      	adds	r3, #56	; 0x38
 80116da:	443b      	add	r3, r7
 80116dc:	2200      	movs	r2, #0
 80116de:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80116e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116e6:	3301      	adds	r3, #1
 80116e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80116ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80116f0:	2b0f      	cmp	r3, #15
 80116f2:	d9e8      	bls.n	80116c6 <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 80116f4:	2300      	movs	r3, #0
 80116f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80116fa:	2300      	movs	r3, #0
 80116fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011700:	e068      	b.n	80117d4 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8011702:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	4413      	add	r3, r2
 801170a:	7b1b      	ldrb	r3, [r3, #12]
 801170c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8011710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011714:	3338      	adds	r3, #56	; 0x38
 8011716:	443b      	add	r3, r7
 8011718:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d115      	bne.n	801174c <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011724:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011728:	0092      	lsls	r2, r2, #2
 801172a:	b2d2      	uxtb	r2, r2
 801172c:	3338      	adds	r3, #56	; 0x38
 801172e:	443b      	add	r3, r7
 8011730:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011738:	683a      	ldr	r2, [r7, #0]
 801173a:	4413      	add	r3, r2
 801173c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011740:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011746:	3301      	adds	r3, #1
 8011748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 801174c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011750:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011754:	443a      	add	r2, r7
 8011756:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801175a:	3201      	adds	r2, #1
 801175c:	b2d2      	uxtb	r2, r2
 801175e:	3338      	adds	r3, #56	; 0x38
 8011760:	443b      	add	r3, r7
 8011762:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 8011766:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801176a:	3338      	adds	r3, #56	; 0x38
 801176c:	443b      	add	r3, r7
 801176e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 8011776:	2300      	movs	r3, #0
 8011778:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801177c:	e021      	b.n	80117c2 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 801177e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011782:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011786:	441a      	add	r2, r3
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	3206      	adds	r2, #6
 801178c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 8011790:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011794:	009a      	lsls	r2, r3, #2
 8011796:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801179a:	441a      	add	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3206      	adds	r2, #6
 80117a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 80117a4:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 80117a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80117ac:	4402      	add	r2, r0
 80117ae:	4419      	add	r1, r3
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	3206      	adds	r2, #6
 80117b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80117b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117bc:	3301      	adds	r3, #1
 80117be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80117c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80117c6:	2b03      	cmp	r3, #3
 80117c8:	d9d9      	bls.n	801177e <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80117ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117ce:	3301      	adds	r3, #1
 80117d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117d8:	2b05      	cmp	r3, #5
 80117da:	d992      	bls.n	8011702 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 80117dc:	2300      	movs	r3, #0
 80117de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80117e2:	e022      	b.n	801182a <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 80117e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	4413      	add	r3, r2
 80117ec:	7b1b      	ldrb	r3, [r3, #12]
 80117ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 80117f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80117f6:	2b0f      	cmp	r3, #15
 80117f8:	d80c      	bhi.n	8011814 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 80117fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 80117fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8011802:	3238      	adds	r2, #56	; 0x38
 8011804:	443a      	add	r2, r7
 8011806:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	4413      	add	r3, r2
 801180e:	460a      	mov	r2, r1
 8011810:	749a      	strb	r2, [r3, #18]
 8011812:	e005      	b.n	8011820 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8011814:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011818:	683a      	ldr	r2, [r7, #0]
 801181a:	4413      	add	r3, r2
 801181c:	2200      	movs	r2, #0
 801181e:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011820:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011824:	3301      	adds	r3, #1
 8011826:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801182a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801182e:	2b05      	cmp	r3, #5
 8011830:	d9d8      	bls.n	80117e4 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	b2da      	uxtb	r2, r3
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 801183e:	2300      	movs	r3, #0
 8011840:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011844:	e050      	b.n	80118e8 <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 8011846:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801184a:	3338      	adds	r3, #56	; 0x38
 801184c:	443b      	add	r3, r7
 801184e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011852:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011856:	2b00      	cmp	r3, #0
 8011858:	dd41      	ble.n	80118de <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 801185a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801185e:	3338      	adds	r3, #56	; 0x38
 8011860:	443b      	add	r3, r7
 8011862:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 801186a:	2300      	movs	r3, #0
 801186c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011870:	e031      	b.n	80118d6 <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 8011872:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011876:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801187a:	441a      	add	r2, r3
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	3206      	adds	r2, #6
 8011880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	0fda      	lsrs	r2, r3, #31
 8011888:	4413      	add	r3, r2
 801188a:	105b      	asrs	r3, r3, #1
 801188c:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 801188e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8011892:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011896:	441a      	add	r2, r3
 8011898:	4401      	add	r1, r0
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	3206      	adds	r2, #6
 801189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 80118a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80118a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118aa:	441a      	add	r2, r3
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	3206      	adds	r2, #6
 80118b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80118b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118bc:	441a      	add	r2, r3
 80118be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c0:	fb91 f1f3 	sdiv	r1, r1, r3
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	3206      	adds	r2, #6
 80118c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 80118cc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118d0:	3301      	adds	r3, #1
 80118d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80118d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d9c9      	bls.n	8011872 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 80118de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118e2:	3301      	adds	r3, #1
 80118e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80118e8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80118ec:	2b0f      	cmp	r3, #15
 80118ee:	d9aa      	bls.n	8011846 <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2200      	movs	r2, #0
 80118f4:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 80118f6:	7bfb      	ldrb	r3, [r7, #15]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 80118fc:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d002      	beq.n	8011908 <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	2204      	movs	r2, #4
 8011906:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 8011908:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 801190c:	4618      	mov	r0, r3
 801190e:	3738      	adds	r7, #56	; 0x38
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011916:	b0cb      	sub	sp, #300	; 0x12c
 8011918:	af06      	add	r7, sp, #24
 801191a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 801191e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011922:	6020      	str	r0, [r4, #0]
 8011924:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011928:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 801192c:	6001      	str	r1, [r0, #0]
 801192e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011932:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8011936:	600a      	str	r2, [r1, #0]
 8011938:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801193c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011940:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011942:	2300      	movs	r3, #0
 8011944:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 8011948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801194c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011954:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 8011958:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801195c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 8011960:	f107 0318 	add.w	r3, r7, #24
 8011964:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 8011978:	2300      	movs	r3, #0
 801197a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 801197e:	2300      	movs	r3, #0
 8011980:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 8011984:	2300      	movs	r3, #0
 8011986:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 801198a:	2300      	movs	r3, #0
 801198c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 8011990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011994:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011998:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801199c:	6818      	ldr	r0, [r3, #0]
 801199e:	f7ff fe44 	bl	801162a <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 80119a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119a6:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 80119a8:	b299      	uxth	r1, r3
 80119aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119ae:	3348      	adds	r3, #72	; 0x48
 80119b0:	461a      	mov	r2, r3
 80119b2:	2000      	movs	r0, #0
 80119b4:	f7fd f9db 	bl	800ed6e <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 80119b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80119bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80119c0:	3348      	adds	r3, #72	; 0x48
 80119c2:	4619      	mov	r1, r3
 80119c4:	4610      	mov	r0, r2
 80119c6:	f7fd f994 	bl	800ecf2 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 80119ca:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d142      	bne.n	8011a58 <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80119d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d039      	beq.n	8011a58 <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 80119e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80119f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80119f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 80119fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011a1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011a1e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011a22:	6812      	ldr	r2, [r2, #0]
 8011a24:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 8011a28:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011a2c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011a30:	6809      	ldr	r1, [r1, #0]
 8011a32:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 8011a36:	f107 0014 	add.w	r0, r7, #20
 8011a3a:	9004      	str	r0, [sp, #16]
 8011a3c:	9103      	str	r1, [sp, #12]
 8011a3e:	9202      	str	r2, [sp, #8]
 8011a40:	9301      	str	r3, [sp, #4]
 8011a42:	2300      	movs	r3, #0
 8011a44:	9300      	str	r3, [sp, #0]
 8011a46:	2300      	movs	r3, #0
 8011a48:	4632      	mov	r2, r6
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f002 f98c 	bl	8013d6a <VL53L1_f_040>
 8011a52:	4603      	mov	r3, r0
 8011a54:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 8011a58:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d115      	bne.n	8011a8c <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d00c      	beq.n	8011a8c <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 8011a72:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a7c:	3348      	adds	r3, #72	; 0x48
 8011a7e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8011a82:	f002 fbe4 	bl	801424e <VL53L1_f_041>
 8011a86:	4603      	mov	r3, r0
 8011a88:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 8011a8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011a90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 8011a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011a98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 8011a9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011aa0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 8011aa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011aa8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 8011aac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 8011ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011aba:	2200      	movs	r2, #0
 8011abc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8011aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8011ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ade:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011aec:	2301      	movs	r3, #1
 8011aee:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011af2:	2300      	movs	r3, #0
 8011af4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011af8:	e108      	b.n	8011d0c <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 8011afa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011afe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011b10:	3348      	adds	r3, #72	; 0x48
 8011b12:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011b16:	7814      	ldrb	r4, [r2, #0]
 8011b18:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011b1c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011b20:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011b24:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8011b28:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011b2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b30:	9405      	str	r4, [sp, #20]
 8011b32:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8011b36:	9404      	str	r4, [sp, #16]
 8011b38:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011b3c:	9403      	str	r4, [sp, #12]
 8011b3e:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011b42:	9402      	str	r4, [sp, #8]
 8011b44:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8011b48:	9401      	str	r4, [sp, #4]
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011b50:	6812      	ldr	r2, [r2, #0]
 8011b52:	6809      	ldr	r1, [r1, #0]
 8011b54:	6800      	ldr	r0, [r0, #0]
 8011b56:	f7fe fe65 	bl	8010824 <VL53L1_f_033>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 8011b60:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f040 80cb 	bne.w	8011d00 <VL53L1_hist_process_data+0x3ec>
 8011b6a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f040 80c6 	bne.w	8011d00 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 8011b74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b78:	7c9b      	ldrb	r3, [r3, #18]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d110      	bne.n	8011ba0 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 8011b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011b82:	3314      	adds	r3, #20
 8011b84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 8011b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b8c:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 8011b8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b92:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 8011b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011b98:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 8011b9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b9e:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 8011ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011ba4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 8011bac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 8011bb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bbc:	fb02 f303 	mul.w	r3, r2, r3
 8011bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011bc8:	011b      	lsls	r3, r3, #4
 8011bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011bce:	2300      	movs	r3, #0
 8011bd0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011bd4:	e08b      	b.n	8011cee <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 8011bd6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011bda:	224c      	movs	r2, #76	; 0x4c
 8011bdc:	fb02 f303 	mul.w	r3, r2, r3
 8011be0:	3310      	adds	r3, #16
 8011be2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8011be6:	4413      	add	r3, r2
 8011be8:	3304      	adds	r3, #4
 8011bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bf2:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8011bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bfa:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	dd0e      	ble.n	8011c20 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c06:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011c0a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011c0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c10:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011c14:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	b29b      	uxth	r3, r3
				delta_mm =
 8011c1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011c1e:	e00d      	b.n	8011c3c <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011c20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c24:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011c28:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 8011c2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c2e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011c32:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011c34:	1ad3      	subs	r3, r2, r3
 8011c36:	b29b      	uxth	r3, r3
				delta_mm =
 8011c38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011c3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 8011c48:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011c4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	461a      	mov	r2, r3
 8011c54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011c58:	fb02 f303 	mul.w	r3, r2, r3
 8011c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 8011c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011c64:	015b      	lsls	r3, r3, #5
 8011c66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 8011c6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c6e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 8011c80:	429a      	cmp	r2, r3
 8011c82:	dd2f      	ble.n	8011ce4 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 8011c84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011c88:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	da22      	bge.n	8011ce4 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 8011c9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 8011ca4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d91b      	bls.n	8011ce4 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011cac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011cb0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8011cb2:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 8011cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d913      	bls.n	8011ce4 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011cbc:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011cc0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011cc4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011cc8:	6812      	ldr	r2, [r2, #0]
 8011cca:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	da09      	bge.n	8011ce4 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011cd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 8011cd8:	224c      	movs	r2, #76	; 0x4c
 8011cda:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f007 fc8e 	bl	8019600 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011ce4:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8011ce8:	3301      	adds	r3, #1
 8011cea:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011cee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011cf2:	7c9b      	ldrb	r3, [r3, #18]
 8011cf4:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	f4ff af6c 	bcc.w	8011bd6 <VL53L1_hist_process_data+0x2c2>
 8011cfe:	e000      	b.n	8011d02 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011d00:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011d02:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011d06:	3301      	adds	r3, #1
 8011d08:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011d0c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011d10:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011d14:	429a      	cmp	r2, r3
 8011d16:	f67f aef0 	bls.w	8011afa <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 8011d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011d1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011d2c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d3a <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b086      	sub	sp, #24
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	460b      	mov	r3, r1
 8011d44:	607a      	str	r2, [r7, #4]
 8011d46:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d104      	bne.n	8011d5e <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f7f9 fb5a 	bl	800b40e <VL53L1_disable_firmware>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 8011d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d104      	bne.n	8011d70 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f7f9 fb82 	bl	800b470 <VL53L1_enable_powerforce>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 8011d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d105      	bne.n	8011d84 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 8011d78:	21fa      	movs	r1, #250	; 0xfa
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f002 fdd0 	bl	8014920 <VL53L1_WaitUs>
 8011d80:	4603      	mov	r3, r0
 8011d82:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 8011d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d107      	bne.n	8011d9c <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	f240 7181 	movw	r1, #1921	; 0x781
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f002 fcd0 	bl	8014738 <VL53L1_WrByte>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d107      	bne.n	8011db4 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 8011da4:	2205      	movs	r2, #5
 8011da6:	f240 6183 	movw	r1, #1667	; 0x683
 8011daa:	68f8      	ldr	r0, [r7, #12]
 8011dac:	f002 fcc4 	bl	8014738 <VL53L1_WrByte>
 8011db0:	4603      	mov	r3, r0
 8011db2:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 8011db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d105      	bne.n	8011dc8 <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011dbc:	6879      	ldr	r1, [r7, #4]
 8011dbe:	68f8      	ldr	r0, [r7, #12]
 8011dc0:	f002 fdae 	bl	8014920 <VL53L1_WaitUs>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 8011dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d107      	bne.n	8011de0 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f002 fcae 	bl	8014738 <VL53L1_WrByte>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d108      	bne.n	8011dfa <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 8011de8:	897b      	ldrh	r3, [r7, #10]
 8011dea:	461a      	mov	r2, r3
 8011dec:	f240 7184 	movw	r1, #1924	; 0x784
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f002 fccb 	bl	801478c <VL53L1_WrWord>
 8011df6:	4603      	mov	r3, r0
 8011df8:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 8011dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b086      	sub	sp, #24
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	60f8      	str	r0, [r7, #12]
 8011e0e:	607b      	str	r3, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	72fb      	strb	r3, [r7, #11]
 8011e14:	4613      	mov	r3, r2
 8011e16:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011e20:	7afb      	ldrb	r3, [r7, #11]
 8011e22:	75bb      	strb	r3, [r7, #22]
 8011e24:	e041      	b.n	8011eaa <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 8011e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d108      	bne.n	8011e40 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011e2e:	7dbb      	ldrb	r3, [r7, #22]
 8011e30:	461a      	mov	r2, r3
 8011e32:	f240 7194 	movw	r1, #1940	; 0x794
 8011e36:	68f8      	ldr	r0, [r7, #12]
 8011e38:	f002 fc7e 	bl	8014738 <VL53L1_WrByte>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d107      	bne.n	8011e58 <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f240 7183 	movw	r1, #1923	; 0x783
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f002 fc72 	bl	8014738 <VL53L1_WrByte>
 8011e54:	4603      	mov	r3, r0
 8011e56:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 8011e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d105      	bne.n	8011e6c <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 8011e60:	2105      	movs	r1, #5
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f002 fd5c 	bl	8014920 <VL53L1_WaitUs>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 8011e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d107      	bne.n	8011e84 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 8011e74:	2201      	movs	r2, #1
 8011e76:	f240 7183 	movw	r1, #1923	; 0x783
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f002 fc5c 	bl	8014738 <VL53L1_WrByte>
 8011e80:	4603      	mov	r3, r0
 8011e82:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 8011e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d108      	bne.n	8011e9e <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 8011e8c:	2304      	movs	r3, #4
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f002 fc19 	bl	80146cc <VL53L1_ReadMulti>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 8011ea4:	7dbb      	ldrb	r3, [r7, #22]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	75bb      	strb	r3, [r7, #22]
 8011eaa:	7dba      	ldrb	r2, [r7, #22]
 8011eac:	7af9      	ldrb	r1, [r7, #11]
 8011eae:	7abb      	ldrb	r3, [r7, #10]
 8011eb0:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	dbb7      	blt.n	8011e26 <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 8011eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3718      	adds	r7, #24
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}

08011ec2 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011ec2:	b580      	push	{r7, lr}
 8011ec4:	b084      	sub	sp, #16
 8011ec6:	af00      	add	r7, sp, #0
 8011ec8:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d107      	bne.n	8011ee6 <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f240 7183 	movw	r1, #1923	; 0x783
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f002 fc2b 	bl	8014738 <VL53L1_WrByte>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d107      	bne.n	8011efe <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8011eee:	2200      	movs	r2, #0
 8011ef0:	f240 7181 	movw	r1, #1921	; 0x781
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f002 fc1f 	bl	8014738 <VL53L1_WrByte>
 8011efa:	4603      	mov	r3, r0
 8011efc:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8011efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d104      	bne.n	8011f10 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7f9 fac4 	bl	800b494 <VL53L1_disable_powerforce>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d104      	bne.n	8011f22 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7f9 fa66 	bl	800b3ea <VL53L1_enable_firmware>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011f22:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}

08011f2e <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011f2e:	b480      	push	{r7}
 8011f30:	b087      	sub	sp, #28
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	4603      	mov	r3, r0
 8011f36:	60b9      	str	r1, [r7, #8]
 8011f38:	607a      	str	r2, [r7, #4]
 8011f3a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011f44:	89fb      	ldrh	r3, [r7, #14]
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d802      	bhi.n	8011f50 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011f4a:	f06f 0308 	mvn.w	r3, #8
 8011f4e:	e018      	b.n	8011f82 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011f50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f54:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	3302      	adds	r3, #2
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	8afa      	ldrh	r2, [r7, #22]
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011f64:	8afb      	ldrh	r3, [r7, #22]
 8011f66:	2bff      	cmp	r3, #255	; 0xff
 8011f68:	d901      	bls.n	8011f6e <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011f6e:	8afb      	ldrh	r3, [r7, #22]
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	78da      	ldrb	r2, [r3, #3]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	705a      	strb	r2, [r3, #1]

	return status;
 8011f7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	371c      	adds	r7, #28
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr

08011f8e <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011f8e:	b590      	push	{r4, r7, lr}
 8011f90:	b087      	sub	sp, #28
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	4603      	mov	r3, r0
 8011f96:	60b9      	str	r1, [r7, #8]
 8011f98:	607a      	str	r2, [r7, #4]
 8011f9a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8011fa8:	89fb      	ldrh	r3, [r7, #14]
 8011faa:	2b37      	cmp	r3, #55	; 0x37
 8011fac:	d802      	bhi.n	8011fb4 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011fae:	f06f 0308 	mvn.w	r3, #8
 8011fb2:	e03e      	b.n	8012032 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011fb4:	68b9      	ldr	r1, [r7, #8]
 8011fb6:	2002      	movs	r0, #2
 8011fb8:	f7f9 f8fd 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	3302      	adds	r3, #2
 8011fc8:	4619      	mov	r1, r3
 8011fca:	2002      	movs	r0, #2
 8011fcc:	f7f9 f8f3 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8011fdc:	099b      	lsrs	r3, r3, #6
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2219      	movs	r2, #25
 8011fe8:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2205      	movs	r2, #5
 8011fee:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2205      	movs	r2, #5
 8011ff4:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	74fb      	strb	r3, [r7, #19]
 8012000:	e012      	b.n	8012028 <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8012002:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8012004:	6979      	ldr	r1, [r7, #20]
 8012006:	2002      	movs	r0, #2
 8012008:	f7f9 f8d5 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801200c:	4603      	mov	r3, r0
 801200e:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	1d23      	adds	r3, r4, #4
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4413      	add	r3, r2
 8012018:	460a      	mov	r2, r1
 801201a:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	3302      	adds	r3, #2
 8012020:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8012022:	7cfb      	ldrb	r3, [r7, #19]
 8012024:	3301      	adds	r3, #1
 8012026:	74fb      	strb	r3, [r7, #19]
 8012028:	7cfb      	ldrb	r3, [r7, #19]
 801202a:	2b18      	cmp	r3, #24
 801202c:	d9e9      	bls.n	8012002 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 801202e:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8012032:	4618      	mov	r0, r3
 8012034:	371c      	adds	r7, #28
 8012036:	46bd      	mov	sp, r7
 8012038:	bd90      	pop	{r4, r7, pc}

0801203a <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 801203a:	b580      	push	{r7, lr}
 801203c:	b086      	sub	sp, #24
 801203e:	af00      	add	r7, sp, #0
 8012040:	4603      	mov	r3, r0
 8012042:	60b9      	str	r1, [r7, #8]
 8012044:	607a      	str	r2, [r7, #4]
 8012046:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8012048:	2300      	movs	r3, #0
 801204a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 801204c:	89fb      	ldrh	r3, [r7, #14]
 801204e:	2b07      	cmp	r3, #7
 8012050:	d802      	bhi.n	8012058 <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8012052:	f06f 0308 	mvn.w	r3, #8
 8012056:	e027      	b.n	80120a8 <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8012058:	68b9      	ldr	r1, [r7, #8]
 801205a:	2002      	movs	r0, #2
 801205c:	f7f9 f8ab 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012060:	4603      	mov	r3, r0
 8012062:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	3302      	adds	r3, #2
 801206c:	4619      	mov	r1, r3
 801206e:	2002      	movs	r0, #2
 8012070:	f7f9 f8a1 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012074:	4603      	mov	r3, r0
 8012076:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	3304      	adds	r3, #4
 8012080:	4619      	mov	r1, r3
 8012082:	2002      	movs	r0, #2
 8012084:	f7f9 f897 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012088:	4603      	mov	r3, r0
 801208a:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	3306      	adds	r3, #6
 8012094:	4619      	mov	r1, r3
 8012096:	2002      	movs	r0, #2
 8012098:	f7f9 f88d 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801209c:	4603      	mov	r3, r0
 801209e:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	80da      	strh	r2, [r3, #6]

	return status;
 80120a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120a8:	4618      	mov	r0, r3
 80120aa:	3718      	adds	r7, #24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	4603      	mov	r3, r0
 80120b8:	60b9      	str	r1, [r7, #8]
 80120ba:	607a      	str	r2, [r7, #4]
 80120bc:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 80120be:	2300      	movs	r3, #0
 80120c0:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 80120c2:	89fb      	ldrh	r3, [r7, #14]
 80120c4:	2b0f      	cmp	r3, #15
 80120c6:	d802      	bhi.n	80120ce <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 80120c8:	f06f 0308 	mvn.w	r3, #8
 80120cc:	e04d      	b.n	801216a <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 80120ce:	68b9      	ldr	r1, [r7, #8]
 80120d0:	2002      	movs	r0, #2
 80120d2:	f7f9 f870 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80120d6:	4603      	mov	r3, r0
 80120d8:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	789a      	ldrb	r2, [r3, #2]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	78da      	ldrb	r2, [r3, #3]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	3304      	adds	r3, #4
 80120f2:	4619      	mov	r1, r3
 80120f4:	2002      	movs	r0, #2
 80120f6:	f7f9 f85e 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80120fa:	4603      	mov	r3, r0
 80120fc:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	3306      	adds	r3, #6
 8012106:	4619      	mov	r1, r3
 8012108:	2002      	movs	r0, #2
 801210a:	f7f9 f854 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801210e:	4603      	mov	r3, r0
 8012110:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	3308      	adds	r3, #8
 801211a:	4619      	mov	r1, r3
 801211c:	2002      	movs	r0, #2
 801211e:	f7f9 f84a 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012122:	4603      	mov	r3, r0
 8012124:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	330a      	adds	r3, #10
 801212e:	4619      	mov	r1, r3
 8012130:	2002      	movs	r0, #2
 8012132:	f7f9 f840 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	330c      	adds	r3, #12
 8012142:	4619      	mov	r1, r3
 8012144:	2002      	movs	r0, #2
 8012146:	f7f9 f836 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801214a:	4603      	mov	r3, r0
 801214c:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	330e      	adds	r3, #14
 8012156:	4619      	mov	r1, r3
 8012158:	2002      	movs	r0, #2
 801215a:	f7f9 f82c 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801215e:	4603      	mov	r3, r0
 8012160:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	81da      	strh	r2, [r3, #14]

	return status;
 8012166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801216a:	4618      	mov	r0, r3
 801216c:	3718      	adds	r7, #24
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b086      	sub	sp, #24
 8012176:	af00      	add	r7, sp, #0
 8012178:	60f8      	str	r0, [r7, #12]
 801217a:	607b      	str	r3, [r7, #4]
 801217c:	460b      	mov	r3, r1
 801217e:	72fb      	strb	r3, [r7, #11]
 8012180:	4613      	mov	r3, r2
 8012182:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012184:	2300      	movs	r3, #0
 8012186:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8012188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d106      	bne.n	801219e <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8012190:	2232      	movs	r2, #50	; 0x32
 8012192:	2104      	movs	r1, #4
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f7ff fdd0 	bl	8011d3a <VL53L1_nvm_enable>
 801219a:	4603      	mov	r3, r0
 801219c:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 801219e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d107      	bne.n	80121b6 <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 80121a6:	7aba      	ldrb	r2, [r7, #10]
 80121a8:	7af9      	ldrb	r1, [r7, #11]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff fe2a 	bl	8011e06 <VL53L1_nvm_read>
 80121b2:	4603      	mov	r3, r0
 80121b4:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 80121b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d104      	bne.n	80121c8 <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff fe7f 	bl	8011ec2 <VL53L1_nvm_disable>
 80121c4:	4603      	mov	r3, r0
 80121c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 80121c8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3718      	adds	r7, #24
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80121de:	2300      	movs	r3, #0
 80121e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 80121e2:	f107 0308 	add.w	r3, r7, #8
 80121e6:	2201      	movs	r2, #1
 80121e8:	212e      	movs	r1, #46	; 0x2e
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ff ffc1 	bl	8012172 <VL53L1_read_nvm_raw_data>
 80121f0:	4603      	mov	r3, r0
 80121f2:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80121f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d108      	bne.n	801220e <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 80121fc:	f107 0308 	add.w	r3, r7, #8
 8012200:	683a      	ldr	r2, [r7, #0]
 8012202:	4619      	mov	r1, r3
 8012204:	2004      	movs	r0, #4
 8012206:	f7ff fe92 	bl	8011f2e <VL53L1_nvm_decode_optical_centre>
 801220a:	4603      	mov	r3, r0
 801220c:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 801220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b092      	sub	sp, #72	; 0x48
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012224:	2300      	movs	r3, #0
 8012226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 801222a:	f107 030c 	add.w	r3, r7, #12
 801222e:	220e      	movs	r2, #14
 8012230:	2157      	movs	r1, #87	; 0x57
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff ff9d 	bl	8012172 <VL53L1_read_nvm_raw_data>
 8012238:	4603      	mov	r3, r0
 801223a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 801223e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8012242:	2b00      	cmp	r3, #0
 8012244:	d109      	bne.n	801225a <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8012246:	f107 030c 	add.w	r3, r7, #12
 801224a:	683a      	ldr	r2, [r7, #0]
 801224c:	4619      	mov	r1, r3
 801224e:	2038      	movs	r0, #56	; 0x38
 8012250:	f7ff fe9d 	bl	8011f8e <VL53L1_nvm_decode_cal_peak_rate_map>
 8012254:	4603      	mov	r3, r0
 8012256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 801225a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 801225e:	4618      	mov	r0, r3
 8012260:	3748      	adds	r7, #72	; 0x48
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b086      	sub	sp, #24
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012270:	2300      	movs	r3, #0
 8012272:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8012274:	f107 030c 	add.w	r3, r7, #12
 8012278:	2202      	movs	r2, #2
 801227a:	2165      	movs	r1, #101	; 0x65
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff ff78 	bl	8012172 <VL53L1_read_nvm_raw_data>
 8012282:	4603      	mov	r3, r0
 8012284:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8012286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d108      	bne.n	80122a0 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 801228e:	f107 030c 	add.w	r3, r7, #12
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	4619      	mov	r1, r3
 8012296:	2008      	movs	r0, #8
 8012298:	f7ff fecf 	bl	801203a <VL53L1_nvm_decode_additional_offset_cal_data>
 801229c:	4603      	mov	r3, r0
 801229e:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 80122a0:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b08a      	sub	sp, #40	; 0x28
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	460b      	mov	r3, r1
 80122b6:	607a      	str	r2, [r7, #4]
 80122b8:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80122ba:	2300      	movs	r3, #0
 80122bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 80122c0:	897b      	ldrh	r3, [r7, #10]
 80122c2:	089b      	lsrs	r3, r3, #2
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	b2d9      	uxtb	r1, r3
 80122c8:	f107 0314 	add.w	r3, r7, #20
 80122cc:	2204      	movs	r2, #4
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f7ff ff4f 	bl	8012172 <VL53L1_read_nvm_raw_data>
 80122d4:	4603      	mov	r3, r0
 80122d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 80122da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d109      	bne.n	80122f6 <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 80122e2:	f107 0314 	add.w	r3, r7, #20
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	4619      	mov	r1, r3
 80122ea:	2010      	movs	r0, #16
 80122ec:	f7ff fee0 	bl	80120b0 <VL53L1_nvm_decode_fmt_range_results_data>
 80122f0:	4603      	mov	r3, r0
 80122f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 80122f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3728      	adds	r7, #40	; 0x28
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}

08012302 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012302:	b580      	push	{r7, lr}
 8012304:	b086      	sub	sp, #24
 8012306:	af00      	add	r7, sp, #0
 8012308:	60f8      	str	r0, [r7, #12]
 801230a:	460b      	mov	r3, r1
 801230c:	607a      	str	r2, [r7, #4]
 801230e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012310:	2300      	movs	r3, #0
 8012312:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8012314:	897b      	ldrh	r3, [r7, #10]
 8012316:	2b0a      	cmp	r3, #10
 8012318:	d802      	bhi.n	8012320 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801231a:	f06f 0309 	mvn.w	r3, #9
 801231e:	e047      	b.n	80123b0 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012328:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8012336:	f002 020f 	and.w	r2, r2, #15
 801233a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801233c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8012346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801234a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801234c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8012356:	f002 0203 	and.w	r2, r2, #3
 801235a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801235c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8012366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801236a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801236c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	88d8      	ldrh	r0, [r3, #6]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	3305      	adds	r3, #5
 8012376:	461a      	mov	r2, r3
 8012378:	2102      	movs	r1, #2
 801237a:	f7f8 fef1 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8012382:	68fa      	ldr	r2, [r7, #12]
 8012384:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012386:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012390:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 801239a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801239e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80123a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80123aa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80123ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b086      	sub	sp, #24
 80123bc:	af00      	add	r7, sp, #0
 80123be:	4603      	mov	r3, r0
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
 80123c4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80123c6:	2300      	movs	r3, #0
 80123c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 80123ca:	89fb      	ldrh	r3, [r7, #14]
 80123cc:	2b0a      	cmp	r3, #10
 80123ce:	d802      	bhi.n	80123d6 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80123d0:	f06f 0309 	mvn.w	r3, #9
 80123d4:	e046      	b.n	8012464 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123de:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	3301      	adds	r3, #1
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	f003 030f 	and.w	r3, r3, #15
 80123ee:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	3302      	adds	r3, #2
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123fe:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	3303      	adds	r3, #3
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	f003 0303 	and.w	r3, r3, #3
 801240e:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	3304      	adds	r3, #4
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801241e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	3305      	adds	r3, #5
 8012428:	4619      	mov	r1, r3
 801242a:	2002      	movs	r0, #2
 801242c:	f7f8 fec3 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012430:	4603      	mov	r3, r0
 8012432:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	79da      	ldrb	r2, [r3, #7]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	7a1a      	ldrb	r2, [r3, #8]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	3309      	adds	r3, #9
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012452:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	7a9a      	ldrb	r2, [r3, #10]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8012460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012464:	4618      	mov	r0, r3
 8012466:	3718      	adds	r7, #24
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012476:	2300      	movs	r3, #0
 8012478:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801247a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d108      	bne.n	8012494 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012482:	f107 020c 	add.w	r2, r7, #12
 8012486:	230b      	movs	r3, #11
 8012488:	2101      	movs	r1, #1
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f002 f91e 	bl	80146cc <VL53L1_ReadMulti>
 8012490:	4603      	mov	r3, r0
 8012492:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d108      	bne.n	80124ae <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801249c:	f107 030c 	add.w	r3, r7, #12
 80124a0:	683a      	ldr	r2, [r7, #0]
 80124a2:	4619      	mov	r1, r3
 80124a4:	200b      	movs	r0, #11
 80124a6:	f7ff ff87 	bl	80123b8 <VL53L1_i2c_decode_static_nvm_managed>
 80124aa:	4603      	mov	r3, r0
 80124ac:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80124ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3718      	adds	r7, #24
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b086      	sub	sp, #24
 80124be:	af00      	add	r7, sp, #0
 80124c0:	60f8      	str	r0, [r7, #12]
 80124c2:	460b      	mov	r3, r1
 80124c4:	607a      	str	r2, [r7, #4]
 80124c6:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80124c8:	2300      	movs	r3, #0
 80124ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80124cc:	897b      	ldrh	r3, [r7, #10]
 80124ce:	2b16      	cmp	r3, #22
 80124d0:	d802      	bhi.n	80124d8 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80124d2:	f06f 0309 	mvn.w	r3, #9
 80124d6:	e076      	b.n	80125c6 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80124e4:	68fa      	ldr	r2, [r7, #12]
 80124e6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80124e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80124f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80124fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012506:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012510:	f002 020f 	and.w	r2, r2, #15
 8012514:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012516:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012520:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801252a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801252e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012530:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801253a:	f002 0203 	and.w	r2, r2, #3
 801253e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012540:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	8958      	ldrh	r0, [r3, #10]
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	3309      	adds	r3, #9
 801254a:	461a      	mov	r2, r3
 801254c:	2102      	movs	r1, #2
 801254e:	f7f8 fe07 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	330b      	adds	r3, #11
 801255c:	461a      	mov	r2, r3
 801255e:	2102      	movs	r1, #2
 8012560:	f7f8 fe49 	bl	800b1f6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	330d      	adds	r3, #13
 801256e:	461a      	mov	r2, r3
 8012570:	2102      	movs	r1, #2
 8012572:	f7f8 fe40 	bl	800b1f6 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	8a18      	ldrh	r0, [r3, #16]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	330f      	adds	r3, #15
 801257e:	461a      	mov	r2, r3
 8012580:	2102      	movs	r1, #2
 8012582:	f7f8 fded 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801258c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012590:	b218      	sxth	r0, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	3311      	adds	r3, #17
 8012596:	461a      	mov	r2, r3
 8012598:	2102      	movs	r1, #2
 801259a:	f7f8 fe2c 	bl	800b1f6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	3313      	adds	r3, #19
 80125a8:	461a      	mov	r2, r3
 80125aa:	2102      	movs	r1, #2
 80125ac:	f7f8 fe23 	bl	800b1f6 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	3315      	adds	r3, #21
 80125ba:	461a      	mov	r2, r3
 80125bc:	2102      	movs	r1, #2
 80125be:	f7f8 fe1a 	bl	800b1f6 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80125c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3718      	adds	r7, #24
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b086      	sub	sp, #24
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	4603      	mov	r3, r0
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80125dc:	2300      	movs	r3, #0
 80125de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 80125e0:	89fb      	ldrh	r3, [r7, #14]
 80125e2:	2b16      	cmp	r3, #22
 80125e4:	d802      	bhi.n	80125ec <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80125e6:	f06f 0309 	mvn.w	r3, #9
 80125ea:	e079      	b.n	80126e0 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	785a      	ldrb	r2, [r3, #1]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	789a      	ldrb	r2, [r3, #2]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	78da      	ldrb	r2, [r3, #3]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	791a      	ldrb	r2, [r3, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	3305      	adds	r3, #5
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	f003 030f 	and.w	r3, r3, #15
 801261e:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	799a      	ldrb	r2, [r3, #6]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	3307      	adds	r3, #7
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012636:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	3308      	adds	r3, #8
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	f003 0303 	and.w	r3, r3, #3
 8012646:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	3309      	adds	r3, #9
 8012650:	4619      	mov	r1, r3
 8012652:	2002      	movs	r0, #2
 8012654:	f7f8 fdaf 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012658:	4603      	mov	r3, r0
 801265a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	330b      	adds	r3, #11
 8012664:	4619      	mov	r1, r3
 8012666:	2002      	movs	r0, #2
 8012668:	f7f8 fdf1 	bl	800b24e <VL53L1_i2c_decode_int16_t>
 801266c:	4603      	mov	r3, r0
 801266e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	330d      	adds	r3, #13
 8012678:	4619      	mov	r1, r3
 801267a:	2002      	movs	r0, #2
 801267c:	f7f8 fde7 	bl	800b24e <VL53L1_i2c_decode_int16_t>
 8012680:	4603      	mov	r3, r0
 8012682:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	330f      	adds	r3, #15
 801268c:	4619      	mov	r1, r3
 801268e:	2002      	movs	r0, #2
 8012690:	f7f8 fd91 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	3311      	adds	r3, #17
 80126a0:	4619      	mov	r1, r3
 80126a2:	2002      	movs	r0, #2
 80126a4:	f7f8 fdd3 	bl	800b24e <VL53L1_i2c_decode_int16_t>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126ae:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	3313      	adds	r3, #19
 80126b8:	4619      	mov	r1, r3
 80126ba:	2002      	movs	r0, #2
 80126bc:	f7f8 fdc7 	bl	800b24e <VL53L1_i2c_decode_int16_t>
 80126c0:	4603      	mov	r3, r0
 80126c2:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	3315      	adds	r3, #21
 80126cc:	4619      	mov	r1, r3
 80126ce:	2002      	movs	r0, #2
 80126d0:	f7f8 fdbd 	bl	800b24e <VL53L1_i2c_decode_int16_t>
 80126d4:	4603      	mov	r3, r0
 80126d6:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80126dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3718      	adds	r7, #24
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b088      	sub	sp, #32
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80126f2:	2300      	movs	r3, #0
 80126f4:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80126f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d108      	bne.n	8012710 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80126fe:	f107 0208 	add.w	r2, r7, #8
 8012702:	2317      	movs	r3, #23
 8012704:	210d      	movs	r1, #13
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f001 ffe0 	bl	80146cc <VL53L1_ReadMulti>
 801270c:	4603      	mov	r3, r0
 801270e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d108      	bne.n	801272a <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8012718:	f107 0308 	add.w	r3, r7, #8
 801271c:	683a      	ldr	r2, [r7, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	2017      	movs	r0, #23
 8012722:	f7ff ff54 	bl	80125ce <VL53L1_i2c_decode_customer_nvm_managed>
 8012726:	4603      	mov	r3, r0
 8012728:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801272a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3720      	adds	r7, #32
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}

08012736 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012736:	b580      	push	{r7, lr}
 8012738:	b086      	sub	sp, #24
 801273a:	af00      	add	r7, sp, #0
 801273c:	60f8      	str	r0, [r7, #12]
 801273e:	460b      	mov	r3, r1
 8012740:	607a      	str	r2, [r7, #4]
 8012742:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012744:	2300      	movs	r3, #0
 8012746:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 8012748:	897b      	ldrh	r3, [r7, #10]
 801274a:	2b1f      	cmp	r3, #31
 801274c:	d802      	bhi.n	8012754 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801274e:	f06f 0309 	mvn.w	r3, #9
 8012752:	e0cf      	b.n	80128f4 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	687a      	ldr	r2, [r7, #4]
 801275a:	2102      	movs	r1, #2
 801275c:	4618      	mov	r0, r3
 801275e:	f7f8 fcff 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 801276a:	f002 0201 	and.w	r2, r2, #1
 801276e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012770:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 801277a:	f002 020f 	and.w	r2, r2, #15
 801277e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012780:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 801278a:	f002 020f 	and.w	r2, r2, #15
 801278e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012790:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 801279a:	f002 021f 	and.w	r2, r2, #31
 801279e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80127a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80127aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80127ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80127b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80127ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80127be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80127c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80127ca:	f002 0201 	and.w	r2, r2, #1
 80127ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80127d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80127da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80127e4:	f002 0201 	and.w	r2, r2, #1
 80127e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80127ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80127f4:	f002 0203 	and.w	r2, r2, #3
 80127f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80127fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012804:	f002 021f 	and.w	r2, r2, #31
 8012808:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801280a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8012814:	f002 0203 	and.w	r2, r2, #3
 8012818:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801281a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012824:	f002 0203 	and.w	r2, r2, #3
 8012828:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801282a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012834:	f002 0207 	and.w	r2, r2, #7
 8012838:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801283a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012844:	f002 021f 	and.w	r2, r2, #31
 8012848:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801284a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012854:	f002 0201 	and.w	r2, r2, #1
 8012858:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801285a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8012864:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801286e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8012874:	68fa      	ldr	r2, [r7, #12]
 8012876:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012878:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8012882:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801288c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8012896:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	8b18      	ldrh	r0, [r3, #24]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	3318      	adds	r3, #24
 80128a0:	461a      	mov	r2, r3
 80128a2:	2102      	movs	r1, #2
 80128a4:	f7f8 fc5c 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80128b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80128b6:	68fa      	ldr	r2, [r7, #12]
 80128b8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80128ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80128c4:	f002 020f 	and.w	r2, r2, #15
 80128c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80128ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80128d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80128de:	f002 020f 	and.w	r2, r2, #15
 80128e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80128e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80128ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80128f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3718      	adds	r7, #24
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b086      	sub	sp, #24
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	460b      	mov	r3, r1
 8012906:	607a      	str	r2, [r7, #4]
 8012908:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801290a:	2300      	movs	r3, #0
 801290c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 801290e:	897b      	ldrh	r3, [r7, #10]
 8012910:	2b15      	cmp	r3, #21
 8012912:	d802      	bhi.n	801291a <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012914:	f06f 0309 	mvn.w	r3, #9
 8012918:	e070      	b.n	80129fc <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801292a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012934:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 801293e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012942:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012944:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 801294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801294e:	b298      	uxth	r0, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	3304      	adds	r3, #4
 8012954:	461a      	mov	r2, r3
 8012956:	2102      	movs	r1, #2
 8012958:	f7f8 fc02 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8012964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012968:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801296a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8012974:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 801297a:	68fa      	ldr	r2, [r7, #12]
 801297c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801297e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8012988:	f002 0201 	and.w	r2, r2, #1
 801298c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801298e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8012998:	f002 0207 	and.w	r2, r2, #7
 801299c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801299e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	8998      	ldrh	r0, [r3, #12]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	330c      	adds	r3, #12
 80129a8:	461a      	mov	r2, r3
 80129aa:	2102      	movs	r1, #2
 80129ac:	f7f8 fbd8 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	89d8      	ldrh	r0, [r3, #14]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	330e      	adds	r3, #14
 80129b8:	461a      	mov	r2, r3
 80129ba:	2102      	movs	r1, #2
 80129bc:	f7f8 fbd0 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	8a18      	ldrh	r0, [r3, #16]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3310      	adds	r3, #16
 80129c8:	461a      	mov	r2, r3
 80129ca:	2102      	movs	r1, #2
 80129cc:	f7f8 fbc8 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80129d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80129e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80129ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80129f2:	68fa      	ldr	r2, [r7, #12]
 80129f4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80129f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80129f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3718      	adds	r7, #24
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b086      	sub	sp, #24
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	607a      	str	r2, [r7, #4]
 8012a10:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012a12:	2300      	movs	r3, #0
 8012a14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 8012a16:	897b      	ldrh	r3, [r7, #10]
 8012a18:	2b16      	cmp	r3, #22
 8012a1a:	d802      	bhi.n	8012a22 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a1c:	f06f 0309 	mvn.w	r3, #9
 8012a20:	e06e      	b.n	8012b00 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	f003 030f 	and.w	r3, r3, #15
 8012a2a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8012a38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012a42:	f002 020f 	and.w	r2, r2, #15
 8012a46:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012a48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012a52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012a5c:	f002 020f 	and.w	r2, r2, #15
 8012a60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8012a62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8012a68:	68fa      	ldr	r2, [r7, #12]
 8012a6a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8012a6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8012a76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012a7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012a7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8012a86:	f002 020f 	and.w	r2, r2, #15
 8012a8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012a8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8012a96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8012aa0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012aa4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012aa6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	8958      	ldrh	r0, [r3, #10]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	330a      	adds	r3, #10
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	2102      	movs	r1, #2
 8012ab4:	f7f8 fb54 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	8998      	ldrh	r0, [r3, #12]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	330c      	adds	r3, #12
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	2102      	movs	r1, #2
 8012ac4:	f7f8 fb4c 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012acc:	68fa      	ldr	r2, [r7, #12]
 8012ace:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012ad0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8012ad6:	68fa      	ldr	r2, [r7, #12]
 8012ad8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8012ada:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	6918      	ldr	r0, [r3, #16]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	3312      	adds	r3, #18
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	2104      	movs	r1, #4
 8012ae8:	f7f8 fbda 	bl	800b2a0 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012af4:	f002 0201 	and.w	r2, r2, #1
 8012af8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8012afa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b086      	sub	sp, #24
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	460b      	mov	r3, r1
 8012b12:	607a      	str	r2, [r7, #4]
 8012b14:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012b16:	2300      	movs	r3, #0
 8012b18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 8012b1a:	897b      	ldrh	r3, [r7, #10]
 8012b1c:	2b11      	cmp	r3, #17
 8012b1e:	d802      	bhi.n	8012b26 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012b20:	f06f 0309 	mvn.w	r3, #9
 8012b24:	e071      	b.n	8012c0a <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	f003 0303 	and.w	r3, r3, #3
 8012b2e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	8858      	ldrh	r0, [r3, #2]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	2102      	movs	r1, #2
 8012b40:	f7f8 fb0e 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	8898      	ldrh	r0, [r3, #4]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3303      	adds	r3, #3
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	2102      	movs	r1, #2
 8012b50:	f7f8 fb06 	bl	800b160 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012b5c:	f002 0201 	and.w	r2, r2, #1
 8012b60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8012b62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8012b6c:	f002 0207 	and.w	r2, r2, #7
 8012b70:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8012b72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8012b7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8012b82:	68fa      	ldr	r2, [r7, #12]
 8012b84:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8012b86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8012b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8012b96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8012ba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012ba4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8012ba6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8012bb0:	f002 0203 	and.w	r2, r2, #3
 8012bb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8012bb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012bc0:	f002 0203 	and.w	r2, r2, #3
 8012bc4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8012bc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012bd0:	f002 020f 	and.w	r2, r2, #15
 8012bd4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8012bd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012bdc:	68fa      	ldr	r2, [r7, #12]
 8012bde:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012be0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8012be6:	68fa      	ldr	r2, [r7, #12]
 8012be8:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8012bea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012bf0:	68fa      	ldr	r2, [r7, #12]
 8012bf2:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012bf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012bfe:	f002 0203 	and.w	r2, r2, #3
 8012c02:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012c04:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3718      	adds	r7, #24
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}

08012c12 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012c12:	b480      	push	{r7}
 8012c14:	b087      	sub	sp, #28
 8012c16:	af00      	add	r7, sp, #0
 8012c18:	60f8      	str	r0, [r7, #12]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	607a      	str	r2, [r7, #4]
 8012c1e:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012c20:	2300      	movs	r3, #0
 8012c22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012c24:	897b      	ldrh	r3, [r7, #10]
 8012c26:	2b04      	cmp	r3, #4
 8012c28:	d802      	bhi.n	8012c30 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012c2a:	f06f 0309 	mvn.w	r3, #9
 8012c2e:	e025      	b.n	8012c7c <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8012c46:	f002 0201 	and.w	r2, r2, #1
 8012c4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012c4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8012c56:	f002 0201 	and.w	r2, r2, #1
 8012c5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8012c5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8012c66:	f002 0203 	and.w	r2, r2, #3
 8012c6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012c6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8012c76:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	371c      	adds	r7, #28
 8012c80:	46bd      	mov	sp, r7
 8012c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c86:	4770      	bx	lr

08012c88 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012c92:	2300      	movs	r3, #0
 8012c94:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8012c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d108      	bne.n	8012cb0 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8012c9e:	f107 0308 	add.w	r3, r7, #8
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	2105      	movs	r1, #5
 8012ca6:	6838      	ldr	r0, [r7, #0]
 8012ca8:	f7ff ffb3 	bl	8012c12 <VL53L1_i2c_encode_system_control>
 8012cac:	4603      	mov	r3, r0
 8012cae:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8012cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d108      	bne.n	8012cca <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8012cb8:	f107 0208 	add.w	r2, r7, #8
 8012cbc:	2305      	movs	r3, #5
 8012cbe:	2183      	movs	r1, #131	; 0x83
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f001 fccd 	bl	8014660 <VL53L1_WriteMulti>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8012cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3710      	adds	r7, #16
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b086      	sub	sp, #24
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	4603      	mov	r3, r0
 8012cde:	60b9      	str	r1, [r7, #8]
 8012ce0:	607a      	str	r2, [r7, #4]
 8012ce2:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 8012ce8:	89fb      	ldrh	r3, [r7, #14]
 8012cea:	2b2b      	cmp	r3, #43	; 0x2b
 8012cec:	d802      	bhi.n	8012cf4 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012cee:	f06f 0309 	mvn.w	r3, #9
 8012cf2:	e0e2      	b.n	8012eba <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cfc:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	785a      	ldrb	r2, [r3, #1]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	3302      	adds	r3, #2
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	f003 030f 	and.w	r3, r3, #15
 8012d14:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	78da      	ldrb	r2, [r3, #3]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	3304      	adds	r3, #4
 8012d26:	4619      	mov	r1, r3
 8012d28:	2002      	movs	r0, #2
 8012d2a:	f7f8 fa44 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	3306      	adds	r3, #6
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	2002      	movs	r0, #2
 8012d3e:	f7f8 fa3a 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d42:	4603      	mov	r3, r0
 8012d44:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	3308      	adds	r3, #8
 8012d4e:	4619      	mov	r1, r3
 8012d50:	2002      	movs	r0, #2
 8012d52:	f7f8 fa30 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d56:	4603      	mov	r3, r0
 8012d58:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	330a      	adds	r3, #10
 8012d62:	4619      	mov	r1, r3
 8012d64:	2002      	movs	r0, #2
 8012d66:	f7f8 fa26 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	330c      	adds	r3, #12
 8012d76:	4619      	mov	r1, r3
 8012d78:	2002      	movs	r0, #2
 8012d7a:	f7f8 fa1c 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	330e      	adds	r3, #14
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	2002      	movs	r0, #2
 8012d8e:	f7f8 fa12 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012d92:	4603      	mov	r3, r0
 8012d94:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	3310      	adds	r3, #16
 8012d9e:	4619      	mov	r1, r3
 8012da0:	2002      	movs	r0, #2
 8012da2:	f7f8 fa08 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012da6:	4603      	mov	r3, r0
 8012da8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	3312      	adds	r3, #18
 8012db2:	4619      	mov	r1, r3
 8012db4:	2002      	movs	r0, #2
 8012db6:	f7f8 f9fe 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	3314      	adds	r3, #20
 8012dc6:	4619      	mov	r1, r3
 8012dc8:	2002      	movs	r0, #2
 8012dca:	f7f8 f9f4 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	3316      	adds	r3, #22
 8012dda:	4619      	mov	r1, r3
 8012ddc:	2002      	movs	r0, #2
 8012dde:	f7f8 f9ea 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012de2:	4603      	mov	r3, r0
 8012de4:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	3318      	adds	r3, #24
 8012dee:	4619      	mov	r1, r3
 8012df0:	2002      	movs	r0, #2
 8012df2:	f7f8 f9e0 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012df6:	4603      	mov	r3, r0
 8012df8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	331a      	adds	r3, #26
 8012e02:	4619      	mov	r1, r3
 8012e04:	2002      	movs	r0, #2
 8012e06:	f7f8 f9d6 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	331c      	adds	r3, #28
 8012e16:	4619      	mov	r1, r3
 8012e18:	2002      	movs	r0, #2
 8012e1a:	f7f8 f9cc 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	331e      	adds	r3, #30
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	2002      	movs	r0, #2
 8012e2e:	f7f8 f9c2 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e32:	4603      	mov	r3, r0
 8012e34:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	3320      	adds	r3, #32
 8012e3e:	4619      	mov	r1, r3
 8012e40:	2002      	movs	r0, #2
 8012e42:	f7f8 f9b8 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e46:	4603      	mov	r3, r0
 8012e48:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	3322      	adds	r3, #34	; 0x22
 8012e52:	4619      	mov	r1, r3
 8012e54:	2002      	movs	r0, #2
 8012e56:	f7f8 f9ae 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	3324      	adds	r3, #36	; 0x24
 8012e66:	4619      	mov	r1, r3
 8012e68:	2002      	movs	r0, #2
 8012e6a:	f7f8 f9a4 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	3326      	adds	r3, #38	; 0x26
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	2002      	movs	r0, #2
 8012e7e:	f7f8 f99a 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e82:	4603      	mov	r3, r0
 8012e84:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	3328      	adds	r3, #40	; 0x28
 8012e8e:	4619      	mov	r1, r3
 8012e90:	2002      	movs	r0, #2
 8012e92:	f7f8 f990 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012e96:	4603      	mov	r3, r0
 8012e98:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8012eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}

08012ec2 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012ec2:	b580      	push	{r7, lr}
 8012ec4:	b086      	sub	sp, #24
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	4603      	mov	r3, r0
 8012eca:	60b9      	str	r1, [r7, #8]
 8012ecc:	607a      	str	r2, [r7, #4]
 8012ece:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012ed4:	89fb      	ldrh	r3, [r7, #14]
 8012ed6:	2b20      	cmp	r3, #32
 8012ed8:	d802      	bhi.n	8012ee0 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012eda:	f06f 0309 	mvn.w	r3, #9
 8012ede:	e04d      	b.n	8012f7c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012ee0:	68b9      	ldr	r1, [r7, #8]
 8012ee2:	2004      	movs	r0, #4
 8012ee4:	f7f8 fa06 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012ee8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	2004      	movs	r0, #4
 8012ef6:	f7f8 f9fd 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012efa:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	3308      	adds	r3, #8
 8012f04:	4619      	mov	r1, r3
 8012f06:	2004      	movs	r0, #4
 8012f08:	f7f8 fa11 	bl	800b32e <VL53L1_i2c_decode_int32_t>
 8012f0c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	330c      	adds	r3, #12
 8012f16:	4619      	mov	r1, r3
 8012f18:	2004      	movs	r0, #4
 8012f1a:	f7f8 f9eb 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012f1e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	3310      	adds	r3, #16
 8012f28:	4619      	mov	r1, r3
 8012f2a:	2004      	movs	r0, #4
 8012f2c:	f7f8 f9e2 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012f30:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	3314      	adds	r3, #20
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	2004      	movs	r0, #4
 8012f3e:	f7f8 f9d9 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012f42:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	3318      	adds	r3, #24
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	2004      	movs	r0, #4
 8012f50:	f7f8 f9ed 	bl	800b32e <VL53L1_i2c_decode_int32_t>
 8012f54:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	331c      	adds	r3, #28
 8012f5e:	4619      	mov	r1, r3
 8012f60:	2004      	movs	r0, #4
 8012f62:	f7f8 f9c7 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8012f66:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b086      	sub	sp, #24
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	60b9      	str	r1, [r7, #8]
 8012f8e:	607a      	str	r2, [r7, #4]
 8012f90:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012f92:	2300      	movs	r3, #0
 8012f94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012f96:	89fb      	ldrh	r3, [r7, #14]
 8012f98:	2b37      	cmp	r3, #55	; 0x37
 8012f9a:	d802      	bhi.n	8012fa2 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012f9c:	f06f 0309 	mvn.w	r3, #9
 8012fa0:	e15e      	b.n	8013260 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012fa2:	68b9      	ldr	r1, [r7, #8]
 8012fa4:	2002      	movs	r0, #2
 8012fa6:	f7f8 f906 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 8012faa:	4603      	mov	r3, r0
 8012fac:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	3302      	adds	r3, #2
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fbc:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	3303      	adds	r3, #3
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fcc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	3304      	adds	r3, #4
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	f003 0303 	and.w	r3, r3, #3
 8012fdc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	3305      	adds	r3, #5
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	f003 0301 	and.w	r3, r3, #1
 8012fec:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	3306      	adds	r3, #6
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ffc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3307      	adds	r3, #7
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801300c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	3308      	adds	r3, #8
 8013016:	4619      	mov	r1, r3
 8013018:	2002      	movs	r0, #2
 801301a:	f7f8 f8cc 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 801301e:	4603      	mov	r3, r0
 8013020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013024:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	330a      	adds	r3, #10
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	f003 0303 	and.w	r3, r3, #3
 8013034:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	330b      	adds	r3, #11
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	f003 0303 	and.w	r3, r3, #3
 8013044:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	330c      	adds	r3, #12
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	f003 030f 	and.w	r3, r3, #15
 8013054:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	330d      	adds	r3, #13
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	f003 0307 	and.w	r3, r3, #7
 8013064:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	330e      	adds	r3, #14
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	330f      	adds	r3, #15
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	f003 0303 	and.w	r3, r3, #3
 8013084:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	7c1a      	ldrb	r2, [r3, #16]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	7c5a      	ldrb	r2, [r3, #17]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	3312      	adds	r3, #18
 801309e:	4619      	mov	r1, r3
 80130a0:	2002      	movs	r0, #2
 80130a2:	f7f8 f888 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80130a6:	4603      	mov	r3, r0
 80130a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130ac:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	3316      	adds	r3, #22
 80130b6:	4619      	mov	r1, r3
 80130b8:	2002      	movs	r0, #2
 80130ba:	f7f8 f87c 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80130be:	4603      	mov	r3, r0
 80130c0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	3318      	adds	r3, #24
 80130ca:	4619      	mov	r1, r3
 80130cc:	2002      	movs	r0, #2
 80130ce:	f7f8 f872 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80130d2:	4603      	mov	r3, r0
 80130d4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	331a      	adds	r3, #26
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	f003 0301 	and.w	r3, r3, #1
 80130e4:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	331b      	adds	r3, #27
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	f003 0307 	and.w	r3, r3, #7
 80130f4:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	7f1a      	ldrb	r2, [r3, #28]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	7f5a      	ldrb	r2, [r3, #29]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	331e      	adds	r3, #30
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013114:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	331f      	adds	r3, #31
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013124:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	3320      	adds	r3, #32
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	f003 0303 	and.w	r3, r3, #3
 8013134:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	3321      	adds	r3, #33	; 0x21
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	f003 030f 	and.w	r3, r3, #15
 8013144:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	3325      	adds	r3, #37	; 0x25
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	f003 0301 	and.w	r3, r3, #1
 8013178:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	3326      	adds	r3, #38	; 0x26
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	3327      	adds	r3, #39	; 0x27
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	f003 031f 	and.w	r3, r3, #31
 801319c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	3328      	adds	r3, #40	; 0x28
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	f003 031f 	and.w	r3, r3, #31
 80131ae:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	3329      	adds	r3, #41	; 0x29
 80131ba:	781b      	ldrb	r3, [r3, #0]
 80131bc:	f003 031f 	and.w	r3, r3, #31
 80131c0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	332a      	adds	r3, #42	; 0x2a
 80131cc:	781b      	ldrb	r3, [r3, #0]
 80131ce:	f003 0301 	and.w	r3, r3, #1
 80131d2:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	332b      	adds	r3, #43	; 0x2b
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	f003 0301 	and.w	r3, r3, #1
 80131e4:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	332c      	adds	r3, #44	; 0x2c
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	f003 0303 	and.w	r3, r3, #3
 80131f6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	332d      	adds	r3, #45	; 0x2d
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013208:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8013210:	68bb      	ldr	r3, [r7, #8]
 8013212:	332e      	adds	r3, #46	; 0x2e
 8013214:	4619      	mov	r1, r3
 8013216:	2004      	movs	r0, #4
 8013218:	f7f8 f86c 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 801321c:	4603      	mov	r3, r0
 801321e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	3332      	adds	r3, #50	; 0x32
 801322a:	4619      	mov	r1, r3
 801322c:	2004      	movs	r0, #4
 801322e:	f7f8 f861 	bl	800b2f4 <VL53L1_i2c_decode_uint32_t>
 8013232:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	3336      	adds	r3, #54	; 0x36
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	f003 0301 	and.w	r3, r3, #1
 8013242:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	3337      	adds	r3, #55	; 0x37
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f003 0301 	and.w	r3, r3, #1
 8013254:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 801325c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013260:	4618      	mov	r0, r3
 8013262:	3718      	adds	r7, #24
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}

08013268 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	4603      	mov	r3, r0
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	607a      	str	r2, [r7, #4]
 8013274:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013276:	2300      	movs	r3, #0
 8013278:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	2b30      	cmp	r3, #48	; 0x30
 801327e:	d802      	bhi.n	8013286 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8013280:	f06f 0309 	mvn.w	r3, #9
 8013284:	e112      	b.n	80134ac <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	785a      	ldrb	r2, [r3, #1]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	789a      	ldrb	r2, [r3, #2]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	3303      	adds	r3, #3
 80132a2:	4619      	mov	r1, r3
 80132a4:	2002      	movs	r0, #2
 80132a6:	f7f7 ff86 	bl	800b1b6 <VL53L1_i2c_decode_uint16_t>
 80132aa:	4603      	mov	r3, r0
 80132ac:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	3305      	adds	r3, #5
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	3306      	adds	r3, #6
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	f003 0307 	and.w	r3, r3, #7
 80132cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	3307      	adds	r3, #7
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	f003 0307 	and.w	r3, r3, #7
 80132dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	3308      	adds	r3, #8
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	3309      	adds	r3, #9
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	330a      	adds	r3, #10
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 0301 	and.w	r3, r3, #1
 801330c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	330b      	adds	r3, #11
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801331c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	330c      	adds	r3, #12
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	f003 0301 	and.w	r3, r3, #1
 801332c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	330d      	adds	r3, #13
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801333c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	330e      	adds	r3, #14
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801334c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	7bda      	ldrb	r2, [r3, #15]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	7c1a      	ldrb	r2, [r3, #16]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	7c5a      	ldrb	r2, [r3, #17]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	7c9a      	ldrb	r2, [r3, #18]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	7cda      	ldrb	r2, [r3, #19]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	7d1a      	ldrb	r2, [r3, #20]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	7d5a      	ldrb	r2, [r3, #21]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	7d9a      	ldrb	r2, [r3, #22]
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	7dda      	ldrb	r2, [r3, #23]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	7e1a      	ldrb	r2, [r3, #24]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	7e5a      	ldrb	r2, [r3, #25]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	7e9a      	ldrb	r2, [r3, #26]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	7eda      	ldrb	r2, [r3, #27]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	7f1a      	ldrb	r2, [r3, #28]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	7f5a      	ldrb	r2, [r3, #29]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	7f9a      	ldrb	r2, [r3, #30]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80133d2:	68bb      	ldr	r3, [r7, #8]
 80133d4:	7fda      	ldrb	r2, [r3, #31]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	f893 2020 	ldrb.w	r2, [r3, #32]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8013400:	68bb      	ldr	r3, [r7, #8]
 8013402:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80134a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3718      	adds	r7, #24
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b090      	sub	sp, #64	; 0x40
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80134be:	2300      	movs	r3, #0
 80134c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80134c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d10a      	bne.n	80134e2 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80134cc:	f107 020c 	add.w	r2, r7, #12
 80134d0:	2331      	movs	r3, #49	; 0x31
 80134d2:	f240 110f 	movw	r1, #271	; 0x10f
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f001 f8f8 	bl	80146cc <VL53L1_ReadMulti>
 80134dc:	4603      	mov	r3, r0
 80134de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80134e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d109      	bne.n	80134fe <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80134ea:	f107 030c 	add.w	r3, r7, #12
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	4619      	mov	r1, r3
 80134f2:	2031      	movs	r0, #49	; 0x31
 80134f4:	f7ff feb8 	bl	8013268 <VL53L1_i2c_decode_nvm_copy_data>
 80134f8:	4603      	mov	r3, r0
 80134fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80134fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013502:	4618      	mov	r0, r3
 8013504:	3740      	adds	r7, #64	; 0x40
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}

0801350a <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801350a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801350e:	b0d6      	sub	sp, #344	; 0x158
 8013510:	af00      	add	r7, sp, #0
 8013512:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8013516:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801351a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801351e:	4603      	mov	r3, r0
 8013520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013524:	23f1      	movs	r3, #241	; 0xf1
 8013526:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801352a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801352e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013532:	2300      	movs	r3, #0
 8013534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 8013538:	f04f 0200 	mov.w	r2, #0
 801353c:	f04f 0300 	mov.w	r3, #0
 8013540:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013544:	f04f 0200 	mov.w	r2, #0
 8013548:	f04f 0300 	mov.w	r3, #0
 801354c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013550:	f04f 0200 	mov.w	r2, #0
 8013554:	f04f 0300 	mov.w	r3, #0
 8013558:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 801355c:	f04f 0200 	mov.w	r2, #0
 8013560:	f04f 0300 	mov.w	r3, #0
 8013564:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 8013568:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801356c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013570:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8013572:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 8322 	beq.w	8013bc0 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 801357c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8013580:	4618      	mov	r0, r3
 8013582:	f7fb fa23 	bl	800e9cc <VL53L1_calc_pll_period_mm>
 8013586:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 801358a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801358e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013592:	429a      	cmp	r2, r3
 8013594:	d91a      	bls.n	80135cc <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 8013596:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801359a:	2200      	movs	r2, #0
 801359c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80135a0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 80135a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80135a8:	2200      	movs	r2, #0
 80135aa:	4698      	mov	r8, r3
 80135ac:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80135ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80135b2:	460b      	mov	r3, r1
 80135b4:	ebb3 0308 	subs.w	r3, r3, r8
 80135b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80135ba:	4613      	mov	r3, r2
 80135bc:	eb63 0309 	sbc.w	r3, r3, r9
 80135c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135c2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80135c6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 80135ca:	e013      	b.n	80135f4 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80135cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80135d0:	2200      	movs	r2, #0
 80135d2:	469a      	mov	sl, r3
 80135d4:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 80135d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80135da:	2200      	movs	r2, #0
 80135dc:	461c      	mov	r4, r3
 80135de:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 80135e0:	ebba 0304 	subs.w	r3, sl, r4
 80135e4:	633b      	str	r3, [r7, #48]	; 0x30
 80135e6:	eb6b 0305 	sbc.w	r3, fp, r5
 80135ea:	637b      	str	r3, [r7, #52]	; 0x34
 80135ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80135f0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 80135f4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80135f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d91f      	bls.n	8013640 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013600:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013604:	2200      	movs	r2, #0
 8013606:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801360a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 801360e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013612:	2200      	movs	r2, #0
 8013614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013618:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 801361c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013620:	4623      	mov	r3, r4
 8013622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013626:	4602      	mov	r2, r0
 8013628:	1a9b      	subs	r3, r3, r2
 801362a:	62bb      	str	r3, [r7, #40]	; 0x28
 801362c:	462b      	mov	r3, r5
 801362e:	460a      	mov	r2, r1
 8013630:	eb63 0302 	sbc.w	r3, r3, r2
 8013634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013636:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801363a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 801363e:	e01e      	b.n	801367e <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013640:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013644:	2200      	movs	r2, #0
 8013646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801364a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 801364e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013652:	2200      	movs	r2, #0
 8013654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 801365c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8013660:	4623      	mov	r3, r4
 8013662:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8013666:	4602      	mov	r2, r0
 8013668:	1a9b      	subs	r3, r3, r2
 801366a:	623b      	str	r3, [r7, #32]
 801366c:	462b      	mov	r3, r5
 801366e:	460a      	mov	r2, r1
 8013670:	eb63 0302 	sbc.w	r3, r3, r2
 8013674:	627b      	str	r3, [r7, #36]	; 0x24
 8013676:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801367a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 801367e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013682:	4313      	orrs	r3, r2
 8013684:	f000 829c 	beq.w	8013bc0 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801368c:	2200      	movs	r2, #0
 801368e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013692:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8013696:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801369a:	2200      	movs	r2, #0
 801369c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80136a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80136a4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80136a8:	4623      	mov	r3, r4
 80136aa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80136ae:	4602      	mov	r2, r0
 80136b0:	189b      	adds	r3, r3, r2
 80136b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80136b6:	460b      	mov	r3, r1
 80136b8:	462a      	mov	r2, r5
 80136ba:	eb42 0303 	adc.w	r3, r2, r3
 80136be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 80136c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80136c6:	2200      	movs	r2, #0
 80136c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80136cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80136d0:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 80136d4:	4623      	mov	r3, r4
 80136d6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80136da:	4602      	mov	r2, r0
 80136dc:	189b      	adds	r3, r3, r2
 80136de:	61bb      	str	r3, [r7, #24]
 80136e0:	460b      	mov	r3, r1
 80136e2:	462a      	mov	r2, r5
 80136e4:	eb42 0303 	adc.w	r3, r2, r3
 80136e8:	61fb      	str	r3, [r7, #28]
 80136ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80136ee:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 80136f2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80136f6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80136fa:	f173 0300 	sbcs.w	r3, r3, #0
 80136fe:	d305      	bcc.n	801370c <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8013700:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013704:	f04f 0300 	mov.w	r3, #0
 8013708:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 801370c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013710:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013714:	fb03 f102 	mul.w	r1, r3, r2
 8013718:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801371c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013720:	fb02 f303 	mul.w	r3, r2, r3
 8013724:	18ca      	adds	r2, r1, r3
 8013726:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801372a:	fba3 1303 	umull	r1, r3, r3, r3
 801372e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013732:	460b      	mov	r3, r1
 8013734:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801373c:	18d3      	adds	r3, r2, r3
 801373e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013742:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8013746:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801374a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 801374e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013752:	f04f 0000 	mov.w	r0, #0
 8013756:	f04f 0100 	mov.w	r1, #0
 801375a:	0219      	lsls	r1, r3, #8
 801375c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8013760:	0210      	lsls	r0, r2, #8
 8013762:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 8013766:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801376a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801376e:	d305      	bcc.n	801377c <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 8013770:	f04f 32ff 	mov.w	r2, #4294967295
 8013774:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013778:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 801377c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013780:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013784:	f7ec fd9c 	bl	80002c0 <__aeabi_uldivmod>
 8013788:	4602      	mov	r2, r0
 801378a:	460b      	mov	r3, r1
 801378c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8013790:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013794:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8013798:	f7ec fd92 	bl	80002c0 <__aeabi_uldivmod>
 801379c:	4602      	mov	r2, r0
 801379e:	460b      	mov	r3, r1
 80137a0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 80137a4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80137a8:	2b80      	cmp	r3, #128	; 0x80
 80137aa:	d305      	bcc.n	80137b8 <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80137ac:	f04f 32ff 	mov.w	r2, #4294967295
 80137b0:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80137b4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80137b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80137bc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80137c0:	fb03 f102 	mul.w	r1, r3, r2
 80137c4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80137c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80137cc:	fb02 f303 	mul.w	r3, r2, r3
 80137d0:	4419      	add	r1, r3
 80137d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80137d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80137da:	fba2 2303 	umull	r2, r3, r2, r3
 80137de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80137e2:	4613      	mov	r3, r2
 80137e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80137e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80137ec:	18cb      	adds	r3, r1, r3
 80137ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80137f2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80137f6:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80137fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80137fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013802:	2200      	movs	r2, #0
 8013804:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013808:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801380c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013810:	2200      	movs	r2, #0
 8013812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013816:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801381a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801381e:	4623      	mov	r3, r4
 8013820:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013824:	4602      	mov	r2, r0
 8013826:	189b      	adds	r3, r3, r2
 8013828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801382c:	460b      	mov	r3, r1
 801382e:	462a      	mov	r2, r5
 8013830:	eb42 0303 	adc.w	r3, r2, r3
 8013834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8013838:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801383c:	2200      	movs	r2, #0
 801383e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013840:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013842:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8013846:	4623      	mov	r3, r4
 8013848:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 801384c:	4602      	mov	r2, r0
 801384e:	189b      	adds	r3, r3, r2
 8013850:	673b      	str	r3, [r7, #112]	; 0x70
 8013852:	460b      	mov	r3, r1
 8013854:	462a      	mov	r2, r5
 8013856:	eb42 0303 	adc.w	r3, r2, r3
 801385a:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801385c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8013860:	2200      	movs	r2, #0
 8013862:	66bb      	str	r3, [r7, #104]	; 0x68
 8013864:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013866:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 801386a:	4623      	mov	r3, r4
 801386c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013870:	4602      	mov	r2, r0
 8013872:	189b      	adds	r3, r3, r2
 8013874:	613b      	str	r3, [r7, #16]
 8013876:	460b      	mov	r3, r1
 8013878:	462a      	mov	r2, r5
 801387a:	eb42 0303 	adc.w	r3, r2, r3
 801387e:	617b      	str	r3, [r7, #20]
 8013880:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013884:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 8013888:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801388c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8013890:	f173 0300 	sbcs.w	r3, r3, #0
 8013894:	d305      	bcc.n	80138a2 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 8013896:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801389a:	f04f 0300 	mov.w	r3, #0
 801389e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 80138a2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80138a6:	f04f 0000 	mov.w	r0, #0
 80138aa:	f04f 0100 	mov.w	r1, #0
 80138ae:	0219      	lsls	r1, r3, #8
 80138b0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80138b4:	0210      	lsls	r0, r2, #8
 80138b6:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 80138ba:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138be:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80138c2:	1884      	adds	r4, r0, r2
 80138c4:	60bc      	str	r4, [r7, #8]
 80138c6:	eb41 0303 	adc.w	r3, r1, r3
 80138ca:	60fb      	str	r3, [r7, #12]
 80138cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80138d0:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 80138d4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138d8:	2b00      	cmp	r3, #0
 80138da:	da05      	bge.n	80138e8 <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 80138dc:	f04f 32ff 	mov.w	r2, #4294967295
 80138e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80138e4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80138e8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d331      	bcc.n	8013954 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80138f0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80138f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80138f8:	f7ec fce2 	bl	80002c0 <__aeabi_uldivmod>
 80138fc:	4602      	mov	r2, r0
 80138fe:	460b      	mov	r3, r1
 8013900:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013908:	2200      	movs	r2, #0
 801390a:	663b      	str	r3, [r7, #96]	; 0x60
 801390c:	667a      	str	r2, [r7, #100]	; 0x64
 801390e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013912:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013916:	4622      	mov	r2, r4
 8013918:	fb02 f203 	mul.w	r2, r2, r3
 801391c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013920:	4629      	mov	r1, r5
 8013922:	fb01 f303 	mul.w	r3, r1, r3
 8013926:	441a      	add	r2, r3
 8013928:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801392c:	4621      	mov	r1, r4
 801392e:	fba3 1301 	umull	r1, r3, r3, r1
 8013932:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013936:	460b      	mov	r3, r1
 8013938:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013940:	18d3      	adds	r3, r2, r3
 8013942:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013946:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801394a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801394e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013952:	e030      	b.n	80139b6 <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013958:	2200      	movs	r2, #0
 801395a:	65bb      	str	r3, [r7, #88]	; 0x58
 801395c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801395e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013962:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8013966:	4622      	mov	r2, r4
 8013968:	fb02 f203 	mul.w	r2, r2, r3
 801396c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013970:	4629      	mov	r1, r5
 8013972:	fb01 f303 	mul.w	r3, r1, r3
 8013976:	441a      	add	r2, r3
 8013978:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801397c:	4621      	mov	r1, r4
 801397e:	fba3 1301 	umull	r1, r3, r3, r1
 8013982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013986:	460b      	mov	r3, r1
 8013988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801398c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013990:	18d3      	adds	r3, r2, r3
 8013992:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013996:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801399a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801399e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80139a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80139a6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139aa:	f7ec fc89 	bl	80002c0 <__aeabi_uldivmod>
 80139ae:	4602      	mov	r2, r0
 80139b0:	460b      	mov	r3, r1
 80139b2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80139b6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	da05      	bge.n	80139ca <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 80139be:	f04f 32ff 	mov.w	r2, #4294967295
 80139c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80139c6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 80139ca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d33d      	bcc.n	8013a4e <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80139d2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80139d6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139da:	f7ec fc71 	bl	80002c0 <__aeabi_uldivmod>
 80139de:	4602      	mov	r2, r0
 80139e0:	460b      	mov	r3, r1
 80139e2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80139e6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80139ea:	f04f 0200 	mov.w	r2, #0
 80139ee:	f04f 0300 	mov.w	r3, #0
 80139f2:	0882      	lsrs	r2, r0, #2
 80139f4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80139f8:	088b      	lsrs	r3, r1, #2
 80139fa:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 80139fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a02:	2200      	movs	r2, #0
 8013a04:	653b      	str	r3, [r7, #80]	; 0x50
 8013a06:	657a      	str	r2, [r7, #84]	; 0x54
 8013a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a0c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013a10:	4622      	mov	r2, r4
 8013a12:	fb02 f203 	mul.w	r2, r2, r3
 8013a16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a1a:	4629      	mov	r1, r5
 8013a1c:	fb01 f303 	mul.w	r3, r1, r3
 8013a20:	4413      	add	r3, r2
 8013a22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013a26:	4621      	mov	r1, r4
 8013a28:	fba2 1201 	umull	r1, r2, r2, r1
 8013a2c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013a30:	460a      	mov	r2, r1
 8013a32:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8013a36:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8013a3a:	4413      	add	r3, r2
 8013a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013a40:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013a44:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013a48:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013a4c:	e03c      	b.n	8013ac8 <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013a52:	2200      	movs	r2, #0
 8013a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8013a56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8013a60:	4622      	mov	r2, r4
 8013a62:	fb02 f203 	mul.w	r2, r2, r3
 8013a66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	fb01 f303 	mul.w	r3, r1, r3
 8013a70:	4413      	add	r3, r2
 8013a72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8013a76:	4621      	mov	r1, r4
 8013a78:	fba2 1201 	umull	r1, r2, r2, r1
 8013a7c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013a80:	460a      	mov	r2, r1
 8013a82:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8013a86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013a90:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8013a94:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013a98:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013a9c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013aa0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013aa4:	f7ec fc0c 	bl	80002c0 <__aeabi_uldivmod>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 8013ab0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ab4:	f04f 0200 	mov.w	r2, #0
 8013ab8:	f04f 0300 	mov.w	r3, #0
 8013abc:	0882      	lsrs	r2, r0, #2
 8013abe:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013ac2:	088b      	lsrs	r3, r1, #2
 8013ac4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013ac8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	da05      	bge.n	8013adc <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013ad8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013adc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013ae0:	f04f 0200 	mov.w	r2, #0
 8013ae4:	f04f 0300 	mov.w	r3, #0
 8013ae8:	0882      	lsrs	r2, r0, #2
 8013aea:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013aee:	088b      	lsrs	r3, r1, #2
 8013af0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013af4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d305      	bcc.n	8013b08 <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013afc:	f04f 32ff 	mov.w	r2, #4294967295
 8013b00:	f04f 0300 	mov.w	r3, #0
 8013b04:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8013b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8013b10:	647a      	str	r2, [r7, #68]	; 0x44
 8013b12:	f04f 0200 	mov.w	r2, #0
 8013b16:	f04f 0300 	mov.w	r3, #0
 8013b1a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013b1e:	4629      	mov	r1, r5
 8013b20:	01cb      	lsls	r3, r1, #7
 8013b22:	4621      	mov	r1, r4
 8013b24:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8013b28:	4621      	mov	r1, r4
 8013b2a:	01ca      	lsls	r2, r1, #7
 8013b2c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013b30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013b34:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8013b38:	fb03 f202 	mul.w	r2, r3, r2
 8013b3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013b40:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013b44:	fb01 f303 	mul.w	r3, r1, r3
 8013b48:	441a      	add	r2, r3
 8013b4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013b4e:	fba3 1303 	umull	r1, r3, r3, r3
 8013b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013b56:	460b      	mov	r3, r1
 8013b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013b60:	18d3      	adds	r3, r2, r3
 8013b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013b66:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8013b6a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8013b6e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 8013b72:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013b76:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013b7a:	1884      	adds	r4, r0, r2
 8013b7c:	603c      	str	r4, [r7, #0]
 8013b7e:	eb41 0303 	adc.w	r3, r1, r3
 8013b82:	607b      	str	r3, [r7, #4]
 8013b84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013b88:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013b8c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d305      	bcc.n	8013ba0 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013b94:	f04f 32ff 	mov.w	r2, #4294967295
 8013b98:	f04f 0300 	mov.w	r3, #0
 8013b9c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 8013ba0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7fa fdaa 	bl	800e6fe <VL53L1_isqrt>
 8013baa:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 8013bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013bb8:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013bc0:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013bd0 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b086      	sub	sp, #24
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	3318      	adds	r3, #24
 8013be0:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	781b      	ldrb	r3, [r3, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d107      	bne.n	8013bfe <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013bee:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 f88b 	bl	8013d0e <VL53L1_poll_for_range_completion>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	75fb      	strb	r3, [r7, #23]
 8013bfc:	e01b      	b.n	8013c36 <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013c02:	e011      	b.n	8013c28 <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013c04:	f107 030f 	add.w	r3, r7, #15
 8013c08:	4619      	mov	r1, r3
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f819 	bl	8013c42 <VL53L1_is_new_data_ready>
 8013c10:	4603      	mov	r3, r0
 8013c12:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d105      	bne.n	8013c28 <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013c1c:	2101      	movs	r1, #1
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f000 fe6e 	bl	8014900 <VL53L1_WaitMs>
 8013c24:	4603      	mov	r3, r0
 8013c26:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013c28:	7bfb      	ldrb	r3, [r7, #15]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d103      	bne.n	8013c36 <VL53L1_wait_for_test_completion+0x66>
 8013c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d0e6      	beq.n	8013c04 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 8013c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}

08013c42 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013c42:	b580      	push	{r7, lr}
 8013c44:	b086      	sub	sp, #24
 8013c46:	af00      	add	r7, sp, #0
 8013c48:	6078      	str	r0, [r7, #4]
 8013c4a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	3318      	adds	r3, #24
 8013c54:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013c56:	2300      	movs	r3, #0
 8013c58:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013c68:	f003 0310 	and.w	r3, r3, #16
 8013c6c:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013c6e:	7bfb      	ldrb	r3, [r7, #15]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d102      	bne.n	8013c7a <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8013c74:	2301      	movs	r3, #1
 8013c76:	75fb      	strb	r3, [r7, #23]
 8013c78:	e001      	b.n	8013c7e <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 8013c7e:	f107 030e 	add.w	r3, r7, #14
 8013c82:	461a      	mov	r2, r3
 8013c84:	2131      	movs	r1, #49	; 0x31
 8013c86:	6878      	ldr	r0, [r7, #4]
 8013c88:	f000 fdb2 	bl	80147f0 <VL53L1_RdByte>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8013c90:	7bbb      	ldrb	r3, [r7, #14]
 8013c92:	f003 0201 	and.w	r2, r3, #1
 8013c96:	7dfb      	ldrb	r3, [r7, #23]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d103      	bne.n	8013ca4 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	701a      	strb	r2, [r3, #0]
 8013ca2:	e002      	b.n	8013caa <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8013caa:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3718      	adds	r7, #24
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b086      	sub	sp, #24
 8013cba:	af02      	add	r7, sp, #8
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013cc4:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f000 fe29 	bl	8014920 <VL53L1_WaitUs>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10b      	bne.n	8013cf2 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8013cda:	2301      	movs	r3, #1
 8013cdc:	9301      	str	r3, [sp, #4]
 8013cde:	2301      	movs	r3, #1
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	22e5      	movs	r2, #229	; 0xe5
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 fe31 	bl	8014950 <VL53L1_WaitValueMaskEx>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d103      	bne.n	8013d02 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8013cfa:	2103      	movs	r1, #3
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7f6 fc38 	bl	800a572 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b088      	sub	sp, #32
 8013d12:	af02      	add	r7, sp, #8
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3318      	adds	r3, #24
 8013d20:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8013d26:	2300      	movs	r3, #0
 8013d28:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013d30:	f003 0310 	and.w	r3, r3, #16
 8013d34:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8013d36:	7bfb      	ldrb	r3, [r7, #15]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	75fb      	strb	r3, [r7, #23]
 8013d40:	e001      	b.n	8013d46 <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013d42:	2300      	movs	r3, #0
 8013d44:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8013d46:	7dfb      	ldrb	r3, [r7, #23]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	9201      	str	r2, [sp, #4]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	9200      	str	r2, [sp, #0]
 8013d50:	2231      	movs	r2, #49	; 0x31
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fdfb 	bl	8014950 <VL53L1_WaitValueMaskEx>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8013d5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3718      	adds	r7, #24
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8013d6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d6e:	b0c0      	sub	sp, #256	; 0x100
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8013d76:	4618      	mov	r0, r3
 8013d78:	460b      	mov	r3, r1
 8013d7a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 8013d7e:	4613      	mov	r3, r2
 8013d80:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 8013d84:	4603      	mov	r3, r0
 8013d86:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 8013d90:	2300      	movs	r3, #0
 8013d92:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 8013da2:	2300      	movs	r3, #0
 8013da4:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 8013dae:	2300      	movs	r3, #0
 8013db0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 8013db4:	f04f 0200 	mov.w	r2, #0
 8013db8:	f04f 0300 	mov.w	r3, #0
 8013dbc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013dc0:	f04f 0200 	mov.w	r2, #0
 8013dc4:	f04f 0300 	mov.w	r3, #0
 8013dc8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013dcc:	f04f 0200 	mov.w	r2, #0
 8013dd0:	f04f 0300 	mov.w	r3, #0
 8013dd4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 8013dd8:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d108      	bne.n	8013df2 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013de0:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013de4:	f107 01de 	add.w	r1, r7, #222	; 0xde
 8013de8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fb f867 	bl	800eec0 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013df2:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d165      	bne.n	8013ec6 <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8013dfa:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013dfe:	091b      	lsrs	r3, r3, #4
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	f003 0301 	and.w	r3, r3, #1
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00e      	beq.n	8013e28 <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 8013e0a:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e14:	095b      	lsrs	r3, r3, #5
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	1ad3      	subs	r3, r2, r3
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	3b01      	subs	r3, #1
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8013e26:	e00b      	b.n	8013e40 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8013e28:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013e2c:	b29a      	uxth	r2, r3
 8013e2e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e32:	095b      	lsrs	r3, r3, #5
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	1ad3      	subs	r3, r2, r3
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013e40:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e4a:	095b      	lsrs	r3, r3, #5
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	4413      	add	r3, r2
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8013e58:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e5c:	f003 0301 	and.w	r3, r3, #1
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d011      	beq.n	8013e88 <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 8013e64:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013e68:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8013e6a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e6e:	f003 020f 	and.w	r2, r3, #15
 8013e72:	0fd3      	lsrs	r3, r2, #31
 8013e74:	4413      	add	r3, r2
 8013e76:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	1acb      	subs	r3, r1, r3
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	3b01      	subs	r3, #1
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8013e86:	e00f      	b.n	8013ea8 <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 8013e88:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013e8c:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8013e8e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013e92:	f003 020f 	and.w	r2, r3, #15
 8013e96:	0fd3      	lsrs	r3, r2, #31
 8013e98:	4413      	add	r3, r2
 8013e9a:	105b      	asrs	r3, r3, #1
 8013e9c:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8013e9e:	b29b      	uxth	r3, r3
 8013ea0:	440b      	add	r3, r1
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 8013ea8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8013eac:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8013eae:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013eb2:	f003 020f 	and.w	r2, r3, #15
 8013eb6:	0fd3      	lsrs	r3, r2, #31
 8013eb8:	4413      	add	r3, r2
 8013eba:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	440b      	add	r3, r1
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013ec6:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d133      	bne.n	8013f36 <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013ece:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013ed8:	4413      	add	r3, r2
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	005b      	lsls	r3, r3, #1
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	3b0f      	subs	r3, #15
 8013ee2:	b29b      	uxth	r3, r3
 8013ee4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8013ee8:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8013ef2:	4413      	add	r3, r2
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	3b0f      	subs	r3, #15
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8013f02:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013f0c:	4413      	add	r3, r2
 8013f0e:	b29b      	uxth	r3, r3
 8013f10:	005b      	lsls	r3, r3, #1
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	3b0f      	subs	r3, #15
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013f1c:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013f26:	4413      	add	r3, r2
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	005b      	lsls	r3, r3, #1
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	3b0f      	subs	r3, #15
 8013f30:	b29b      	uxth	r3, r3
 8013f32:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013f36:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	f040 8135 	bne.w	80141aa <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013f40:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013f44:	17da      	asrs	r2, r3, #31
 8013f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013f4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013f4e:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013f52:	17da      	asrs	r2, r3, #31
 8013f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013f5c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013f60:	460b      	mov	r3, r1
 8013f62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013f66:	fb02 f203 	mul.w	r2, r2, r3
 8013f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013f6e:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013f72:	4601      	mov	r1, r0
 8013f74:	fb01 f303 	mul.w	r3, r1, r3
 8013f78:	4413      	add	r3, r2
 8013f7a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013f7e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013f82:	fba2 4501 	umull	r4, r5, r2, r1
 8013f86:	442b      	add	r3, r5
 8013f88:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013f8a:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013f8e:	17da      	asrs	r2, r3, #31
 8013f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013f94:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013f98:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013f9c:	17da      	asrs	r2, r3, #31
 8013f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013fa2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013faa:	460b      	mov	r3, r1
 8013fac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013fb0:	fb02 f203 	mul.w	r2, r2, r3
 8013fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013fb8:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8013fbc:	4601      	mov	r1, r0
 8013fbe:	fb01 f303 	mul.w	r3, r1, r3
 8013fc2:	4413      	add	r3, r2
 8013fc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013fc8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013fcc:	fba2 8901 	umull	r8, r9, r2, r1
 8013fd0:	444b      	add	r3, r9
 8013fd2:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013fd4:	eb14 0308 	adds.w	r3, r4, r8
 8013fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8013fda:	eb45 0309 	adc.w	r3, r5, r9
 8013fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fe0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013fe4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8013fe8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013fec:	1c51      	adds	r1, r2, #1
 8013fee:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013ff2:	f143 0300 	adc.w	r3, r3, #0
 8013ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013ffa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013ffe:	460b      	mov	r3, r1
 8014000:	0fdb      	lsrs	r3, r3, #31
 8014002:	2200      	movs	r2, #0
 8014004:	643b      	str	r3, [r7, #64]	; 0x40
 8014006:	647a      	str	r2, [r7, #68]	; 0x44
 8014008:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 801400c:	4623      	mov	r3, r4
 801400e:	4602      	mov	r2, r0
 8014010:	189b      	adds	r3, r3, r2
 8014012:	63bb      	str	r3, [r7, #56]	; 0x38
 8014014:	460b      	mov	r3, r1
 8014016:	462a      	mov	r2, r5
 8014018:	eb42 0303 	adc.w	r3, r2, r3
 801401c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801401e:	f04f 0200 	mov.w	r2, #0
 8014022:	f04f 0300 	mov.w	r3, #0
 8014026:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801402a:	4621      	mov	r1, r4
 801402c:	084a      	lsrs	r2, r1, #1
 801402e:	4629      	mov	r1, r5
 8014030:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014034:	4629      	mov	r1, r5
 8014036:	104b      	asrs	r3, r1, #1
 8014038:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 801403c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014040:	2200      	movs	r2, #0
 8014042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801404a:	f04f 0000 	mov.w	r0, #0
 801404e:	f04f 0100 	mov.w	r1, #0
 8014052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8014056:	462b      	mov	r3, r5
 8014058:	0099      	lsls	r1, r3, #2
 801405a:	4623      	mov	r3, r4
 801405c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8014060:	4623      	mov	r3, r4
 8014062:	0098      	lsls	r0, r3, #2
 8014064:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8014068:	1814      	adds	r4, r2, r0
 801406a:	633c      	str	r4, [r7, #48]	; 0x30
 801406c:	414b      	adcs	r3, r1
 801406e:	637b      	str	r3, [r7, #52]	; 0x34
 8014070:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8014074:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014078:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 801407c:	17da      	asrs	r2, r3, #31
 801407e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014082:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8014086:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 801408a:	17da      	asrs	r2, r3, #31
 801408c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014090:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014094:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8014098:	462b      	mov	r3, r5
 801409a:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 801409e:	4642      	mov	r2, r8
 80140a0:	fb02 f203 	mul.w	r2, r2, r3
 80140a4:	464b      	mov	r3, r9
 80140a6:	4621      	mov	r1, r4
 80140a8:	fb01 f303 	mul.w	r3, r1, r3
 80140ac:	4413      	add	r3, r2
 80140ae:	4622      	mov	r2, r4
 80140b0:	4641      	mov	r1, r8
 80140b2:	fba2 ab01 	umull	sl, fp, r2, r1
 80140b6:	445b      	add	r3, fp
 80140b8:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80140ba:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 80140be:	17da      	asrs	r2, r3, #31
 80140c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80140c2:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 80140c4:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80140c8:	17da      	asrs	r2, r3, #31
 80140ca:	673b      	str	r3, [r7, #112]	; 0x70
 80140cc:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 80140ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80140d2:	462b      	mov	r3, r5
 80140d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80140d8:	4642      	mov	r2, r8
 80140da:	fb02 f203 	mul.w	r2, r2, r3
 80140de:	464b      	mov	r3, r9
 80140e0:	4621      	mov	r1, r4
 80140e2:	fb01 f303 	mul.w	r3, r1, r3
 80140e6:	4413      	add	r3, r2
 80140e8:	4622      	mov	r2, r4
 80140ea:	4641      	mov	r1, r8
 80140ec:	fba2 1201 	umull	r1, r2, r2, r1
 80140f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80140f4:	460a      	mov	r2, r1
 80140f6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80140fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80140fe:	4413      	add	r3, r2
 8014100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8014104:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8014108:	460b      	mov	r3, r1
 801410a:	eb1a 0303 	adds.w	r3, sl, r3
 801410e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014110:	4613      	mov	r3, r2
 8014112:	eb4b 0303 	adc.w	r3, fp, r3
 8014116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014118:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801411c:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8014120:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8014124:	1c51      	adds	r1, r2, #1
 8014126:	66b9      	str	r1, [r7, #104]	; 0x68
 8014128:	f143 0300 	adc.w	r3, r3, #0
 801412c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801412e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8014132:	460b      	mov	r3, r1
 8014134:	0fdb      	lsrs	r3, r3, #31
 8014136:	2200      	movs	r2, #0
 8014138:	623b      	str	r3, [r7, #32]
 801413a:	627a      	str	r2, [r7, #36]	; 0x24
 801413c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8014140:	4623      	mov	r3, r4
 8014142:	4602      	mov	r2, r0
 8014144:	189b      	adds	r3, r3, r2
 8014146:	61bb      	str	r3, [r7, #24]
 8014148:	460b      	mov	r3, r1
 801414a:	462a      	mov	r2, r5
 801414c:	eb42 0303 	adc.w	r3, r2, r3
 8014150:	61fb      	str	r3, [r7, #28]
 8014152:	f04f 0200 	mov.w	r2, #0
 8014156:	f04f 0300 	mov.w	r3, #0
 801415a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801415e:	4621      	mov	r1, r4
 8014160:	084a      	lsrs	r2, r1, #1
 8014162:	4629      	mov	r1, r5
 8014164:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014168:	4629      	mov	r1, r5
 801416a:	104b      	asrs	r3, r1, #1
 801416c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8014170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014174:	2200      	movs	r2, #0
 8014176:	663b      	str	r3, [r7, #96]	; 0x60
 8014178:	667a      	str	r2, [r7, #100]	; 0x64
 801417a:	f04f 0200 	mov.w	r2, #0
 801417e:	f04f 0300 	mov.w	r3, #0
 8014182:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8014186:	4629      	mov	r1, r5
 8014188:	008b      	lsls	r3, r1, #2
 801418a:	4621      	mov	r1, r4
 801418c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014190:	4621      	mov	r1, r4
 8014192:	008a      	lsls	r2, r1, #2
 8014194:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8014198:	1884      	adds	r4, r0, r2
 801419a:	613c      	str	r4, [r7, #16]
 801419c:	eb41 0303 	adc.w	r3, r1, r3
 80141a0:	617b      	str	r3, [r7, #20]
 80141a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80141a6:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 80141aa:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d132      	bne.n	8014218 <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 80141b2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80141b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80141ba:	1884      	adds	r4, r0, r2
 80141bc:	65bc      	str	r4, [r7, #88]	; 0x58
 80141be:	eb41 0303 	adc.w	r3, r1, r3
 80141c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80141c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80141c8:	460b      	mov	r3, r1
 80141ca:	3301      	adds	r3, #1
 80141cc:	653b      	str	r3, [r7, #80]	; 0x50
 80141ce:	4613      	mov	r3, r2
 80141d0:	f143 0300 	adc.w	r3, r3, #0
 80141d4:	657b      	str	r3, [r7, #84]	; 0x54
 80141d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80141da:	460b      	mov	r3, r1
 80141dc:	0fdb      	lsrs	r3, r3, #31
 80141de:	2200      	movs	r2, #0
 80141e0:	60bb      	str	r3, [r7, #8]
 80141e2:	60fa      	str	r2, [r7, #12]
 80141e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80141e8:	4623      	mov	r3, r4
 80141ea:	4602      	mov	r2, r0
 80141ec:	189b      	adds	r3, r3, r2
 80141ee:	603b      	str	r3, [r7, #0]
 80141f0:	460b      	mov	r3, r1
 80141f2:	462a      	mov	r2, r5
 80141f4:	eb42 0303 	adc.w	r3, r2, r3
 80141f8:	607b      	str	r3, [r7, #4]
 80141fa:	f04f 0200 	mov.w	r2, #0
 80141fe:	f04f 0300 	mov.w	r3, #0
 8014202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8014206:	4621      	mov	r1, r4
 8014208:	084a      	lsrs	r2, r1, #1
 801420a:	4629      	mov	r1, r5
 801420c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8014210:	4629      	mov	r1, r5
 8014212:	104b      	asrs	r3, r1, #1
 8014214:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8014218:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801421c:	2b00      	cmp	r3, #0
 801421e:	d109      	bne.n	8014234 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8014220:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8014224:	2b00      	cmp	r3, #0
 8014226:	da05      	bge.n	8014234 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8014228:	f04f 0200 	mov.w	r2, #0
 801422c:	f04f 0300 	mov.w	r3, #0
 8014230:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8014234:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014238:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801423c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 801423e:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8014242:	4618      	mov	r0, r3
 8014244:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014248:	46bd      	mov	sp, r7
 801424a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801424e <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 801424e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014252:	b09a      	sub	sp, #104	; 0x68
 8014254:	af00      	add	r7, sp, #0
 8014256:	6478      	str	r0, [r7, #68]	; 0x44
 8014258:	6439      	str	r1, [r7, #64]	; 0x40
 801425a:	63fa      	str	r2, [r7, #60]	; 0x3c
 801425c:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 801425e:	2300      	movs	r3, #0
 8014260:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8014264:	f04f 0200 	mov.w	r2, #0
 8014268:	f04f 0300 	mov.w	r3, #0
 801426c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8014270:	f04f 0200 	mov.w	r2, #0
 8014274:	f04f 0300 	mov.w	r3, #0
 8014278:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 801427c:	f04f 0200 	mov.w	r2, #0
 8014280:	f04f 0300 	mov.w	r3, #0
 8014284:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8014288:	2300      	movs	r3, #0
 801428a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 801428e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014290:	2200      	movs	r2, #0
 8014292:	633b      	str	r3, [r7, #48]	; 0x30
 8014294:	637a      	str	r2, [r7, #52]	; 0x34
 8014296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801429c:	2200      	movs	r2, #0
 801429e:	62bb      	str	r3, [r7, #40]	; 0x28
 80142a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80142a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80142a6:	460b      	mov	r3, r1
 80142a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142aa:	fb02 f203 	mul.w	r2, r2, r3
 80142ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80142b4:	4601      	mov	r1, r0
 80142b6:	fb01 f303 	mul.w	r3, r1, r3
 80142ba:	4413      	add	r3, r2
 80142bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142c0:	fba2 4501 	umull	r4, r5, r2, r1
 80142c4:	442b      	add	r3, r5
 80142c6:	461d      	mov	r5, r3
 80142c8:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 80142cc:	623b      	str	r3, [r7, #32]
 80142ce:	f145 0300 	adc.w	r3, r5, #0
 80142d2:	627b      	str	r3, [r7, #36]	; 0x24
 80142d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80142d8:	f04f 0300 	mov.w	r3, #0
 80142dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80142e0:	f7eb ffee 	bl	80002c0 <__aeabi_uldivmod>
 80142e4:	4602      	mov	r2, r0
 80142e6:	460b      	mov	r3, r1
 80142e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80142ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	2200      	movs	r2, #0
 80142f6:	61bb      	str	r3, [r7, #24]
 80142f8:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 80142fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142fc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8014300:	4622      	mov	r2, r4
 8014302:	fb02 f203 	mul.w	r2, r2, r3
 8014306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014308:	4629      	mov	r1, r5
 801430a:	fb01 f303 	mul.w	r3, r1, r3
 801430e:	4413      	add	r3, r2
 8014310:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014312:	4621      	mov	r1, r4
 8014314:	fba2 ab01 	umull	sl, fp, r2, r1
 8014318:	445b      	add	r3, fp
 801431a:	469b      	mov	fp, r3
 801431c:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8014320:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8014324:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014328:	f04f 0200 	mov.w	r2, #0
 801432c:	f04f 0300 	mov.w	r3, #0
 8014330:	0a02      	lsrs	r2, r0, #8
 8014332:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014336:	0a0b      	lsrs	r3, r1, #8
 8014338:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801433c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8014340:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8014344:	6139      	str	r1, [r7, #16]
 8014346:	f143 0300 	adc.w	r3, r3, #0
 801434a:	617b      	str	r3, [r7, #20]
 801434c:	f04f 0200 	mov.w	r2, #0
 8014350:	f04f 0300 	mov.w	r3, #0
 8014354:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8014358:	4621      	mov	r1, r4
 801435a:	0aca      	lsrs	r2, r1, #11
 801435c:	4629      	mov	r1, r5
 801435e:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8014362:	4629      	mov	r1, r5
 8014364:	0acb      	lsrs	r3, r1, #11
 8014366:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 801436a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801436e:	2b01      	cmp	r3, #1
 8014370:	d305      	bcc.n	801437e <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8014372:	f04f 32ff 	mov.w	r2, #4294967295
 8014376:	f04f 0300 	mov.w	r3, #0
 801437a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 801437e:	2300      	movs	r3, #0
 8014380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014384:	e041      	b.n	801440a <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8014386:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801438a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801438c:	3302      	adds	r3, #2
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	4413      	add	r3, r2
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	60bb      	str	r3, [r7, #8]
 8014398:	60fa      	str	r2, [r7, #12]
 801439a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801439c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80143a0:	4622      	mov	r2, r4
 80143a2:	fb02 f203 	mul.w	r2, r2, r3
 80143a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143a8:	4629      	mov	r1, r5
 80143aa:	fb01 f303 	mul.w	r3, r1, r3
 80143ae:	4413      	add	r3, r2
 80143b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80143b2:	4621      	mov	r1, r4
 80143b4:	fba2 8901 	umull	r8, r9, r2, r1
 80143b8:	444b      	add	r3, r9
 80143ba:	4699      	mov	r9, r3
 80143bc:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 80143c0:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80143c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80143c8:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 80143cc:	6039      	str	r1, [r7, #0]
 80143ce:	f143 0300 	adc.w	r3, r3, #0
 80143d2:	607b      	str	r3, [r7, #4]
 80143d4:	f04f 0200 	mov.w	r2, #0
 80143d8:	f04f 0300 	mov.w	r3, #0
 80143dc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80143e0:	4621      	mov	r1, r4
 80143e2:	0a8a      	lsrs	r2, r1, #10
 80143e4:	4629      	mov	r1, r5
 80143e6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80143ea:	4629      	mov	r1, r5
 80143ec:	0a8b      	lsrs	r3, r1, #10
 80143ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80143f2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80143f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80143f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143fa:	3206      	adds	r2, #6
 80143fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8014400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014404:	3301      	adds	r3, #1
 8014406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801440a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801440c:	7a9b      	ldrb	r3, [r3, #10]
 801440e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8014412:	429a      	cmp	r2, r3
 8014414:	d3b7      	bcc.n	8014386 <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8014416:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 801441a:	4618      	mov	r0, r3
 801441c:	3768      	adds	r7, #104	; 0x68
 801441e:	46bd      	mov	sp, r7
 8014420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014424 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8014424:	b590      	push	{r4, r7, lr}
 8014426:	b085      	sub	sp, #20
 8014428:	af00      	add	r7, sp, #0
 801442a:	4604      	mov	r4, r0
 801442c:	4608      	mov	r0, r1
 801442e:	4611      	mov	r1, r2
 8014430:	461a      	mov	r2, r3
 8014432:	4623      	mov	r3, r4
 8014434:	71fb      	strb	r3, [r7, #7]
 8014436:	4603      	mov	r3, r0
 8014438:	71bb      	strb	r3, [r7, #6]
 801443a:	460b      	mov	r3, r1
 801443c:	717b      	strb	r3, [r7, #5]
 801443e:	4613      	mov	r3, r2
 8014440:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014442:	2300      	movs	r3, #0
 8014444:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8014446:	2300      	movs	r3, #0
 8014448:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 801444a:	2300      	movs	r3, #0
 801444c:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 801444e:	2300      	movs	r3, #0
 8014450:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8014452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014454:	2210      	movs	r2, #16
 8014456:	701a      	strb	r2, [r3, #0]

	i = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 801445c:	2300      	movs	r3, #0
 801445e:	73fb      	strb	r3, [r7, #15]
 8014460:	e046      	b.n	80144f0 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8014462:	2300      	movs	r3, #0
 8014464:	73bb      	strb	r3, [r7, #14]
 8014466:	e03b      	b.n	80144e0 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8014468:	89bb      	ldrh	r3, [r7, #12]
 801446a:	2b0f      	cmp	r3, #15
 801446c:	d832      	bhi.n	80144d4 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 801446e:	89bb      	ldrh	r3, [r7, #12]
 8014470:	b2da      	uxtb	r2, r3
 8014472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014474:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8014476:	89bb      	ldrh	r3, [r7, #12]
 8014478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801447a:	3306      	adds	r3, #6
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	4413      	add	r3, r2
 8014480:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014484:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8014486:	89bb      	ldrh	r3, [r7, #12]
 8014488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801448a:	3306      	adds	r3, #6
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	4413      	add	r3, r2
 8014490:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014494:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8014496:	7bfa      	ldrb	r2, [r7, #15]
 8014498:	79bb      	ldrb	r3, [r7, #6]
 801449a:	fb12 f303 	smulbb	r3, r2, r3
 801449e:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 80144a0:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 80144a2:	79fa      	ldrb	r2, [r7, #7]
 80144a4:	440a      	add	r2, r1
 80144a6:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 80144a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144aa:	3306      	adds	r3, #6
 80144ac:	009b      	lsls	r3, r3, #2
 80144ae:	4413      	add	r3, r2
 80144b0:	460a      	mov	r2, r1
 80144b2:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 80144b4:	7bba      	ldrb	r2, [r7, #14]
 80144b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80144ba:	fb12 f303 	smulbb	r3, r2, r3
 80144be:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 80144c0:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 80144c2:	793a      	ldrb	r2, [r7, #4]
 80144c4:	440a      	add	r2, r1
 80144c6:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 80144c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144ca:	3306      	adds	r3, #6
 80144cc:	009b      	lsls	r3, r3, #2
 80144ce:	4413      	add	r3, r2
 80144d0:	460a      	mov	r2, r1
 80144d2:	715a      	strb	r2, [r3, #5]
			}

			i++;
 80144d4:	89bb      	ldrh	r3, [r7, #12]
 80144d6:	3301      	adds	r3, #1
 80144d8:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 80144da:	7bbb      	ldrb	r3, [r7, #14]
 80144dc:	3301      	adds	r3, #1
 80144de:	73bb      	strb	r3, [r7, #14]
 80144e0:	7bba      	ldrb	r2, [r7, #14]
 80144e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d3be      	bcc.n	8014468 <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 80144ea:	7bfb      	ldrb	r3, [r7, #15]
 80144ec:	3301      	adds	r3, #1
 80144ee:	73fb      	strb	r3, [r7, #15]
 80144f0:	7bfa      	ldrb	r2, [r7, #15]
 80144f2:	797b      	ldrb	r3, [r7, #5]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	d3b4      	bcc.n	8014462 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 80144f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144fa:	f000 f86c 	bl	80145d6 <VL53L1_init_zone_config_histogram_bins>
 80144fe:	4603      	mov	r3, r0
 8014500:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8014502:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014506:	4618      	mov	r0, r3
 8014508:	3714      	adds	r7, #20
 801450a:	46bd      	mov	sp, r7
 801450c:	bd90      	pop	{r4, r7, pc}

0801450e <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b084      	sub	sp, #16
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
 8014516:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014518:	2300      	movs	r3, #0
 801451a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2205      	movs	r2, #5
 8014520:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	2204      	movs	r2, #4
 8014526:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	220f      	movs	r2, #15
 801452c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	2207      	movs	r2, #7
 8014532:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	2204      	movs	r2, #4
 8014538:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	2208      	movs	r2, #8
 801453e:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	220f      	movs	r2, #15
 8014544:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	2207      	movs	r2, #7
 801454c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	220c      	movs	r2, #12
 8014554:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	2208      	movs	r2, #8
 801455c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	2207      	movs	r2, #7
 8014564:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	220f      	movs	r2, #15
 801456c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	2208      	movs	r2, #8
 8014574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	2204      	movs	r2, #4
 801457c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	2207      	movs	r2, #7
 8014584:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	220f      	movs	r2, #15
 801458c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	2208      	movs	r2, #8
 8014594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	220c      	movs	r2, #12
 801459c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	220f      	movs	r2, #15
 80145a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	220f      	movs	r2, #15
 80145ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2208      	movs	r2, #8
 80145b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2208      	movs	r2, #8
 80145bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 80145c0:	6838      	ldr	r0, [r7, #0]
 80145c2:	f000 f808 	bl	80145d6 <VL53L1_init_zone_config_histogram_bins>
 80145c6:	4603      	mov	r3, r0
 80145c8:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 80145ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3710      	adds	r7, #16
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}

080145d6 <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 80145d6:	b480      	push	{r7}
 80145d8:	b085      	sub	sp, #20
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80145de:	2300      	movs	r3, #0
 80145e0:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80145e2:	2300      	movs	r3, #0
 80145e4:	73fb      	strb	r3, [r7, #15]
 80145e6:	e008      	b.n	80145fa <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 80145e8:	7bfb      	ldrb	r3, [r7, #15]
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	4413      	add	r3, r2
 80145ee:	2201      	movs	r2, #1
 80145f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 80145f4:	7bfb      	ldrb	r3, [r7, #15]
 80145f6:	3301      	adds	r3, #1
 80145f8:	73fb      	strb	r3, [r7, #15]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	7bfa      	ldrb	r2, [r7, #15]
 8014600:	429a      	cmp	r2, r3
 8014602:	d3f1      	bcc.n	80145e8 <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8014604:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8014608:	4618      	mov	r0, r3
 801460a:	3714      	adds	r7, #20
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr

08014614 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014614:	b580      	push	{r7, lr}
 8014616:	b084      	sub	sp, #16
 8014618:	af00      	add	r7, sp, #0
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	60b9      	str	r1, [r7, #8]
 801461e:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	68db      	ldr	r3, [r3, #12]
 8014624:	68fa      	ldr	r2, [r7, #12]
 8014626:	8910      	ldrh	r0, [r2, #8]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	b292      	uxth	r2, r2
 801462c:	68b9      	ldr	r1, [r7, #8]
 801462e:	4798      	blx	r3
 8014630:	4603      	mov	r3, r0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3710      	adds	r7, #16
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}

0801463a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801463a:	b580      	push	{r7, lr}
 801463c:	b084      	sub	sp, #16
 801463e:	af00      	add	r7, sp, #0
 8014640:	60f8      	str	r0, [r7, #12]
 8014642:	60b9      	str	r1, [r7, #8]
 8014644:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	691b      	ldr	r3, [r3, #16]
 801464a:	68fa      	ldr	r2, [r7, #12]
 801464c:	8910      	ldrh	r0, [r2, #8]
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	b292      	uxth	r2, r2
 8014652:	68b9      	ldr	r1, [r7, #8]
 8014654:	4798      	blx	r3
 8014656:	4603      	mov	r3, r0
}
 8014658:	4618      	mov	r0, r3
 801465a:	3710      	adds	r7, #16
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014660:	b580      	push	{r7, lr}
 8014662:	b086      	sub	sp, #24
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	607a      	str	r2, [r7, #4]
 801466a:	603b      	str	r3, [r7, #0]
 801466c:	460b      	mov	r3, r1
 801466e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014670:	2300      	movs	r3, #0
 8014672:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	2bff      	cmp	r3, #255	; 0xff
 8014678:	d902      	bls.n	8014680 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 801467a:	f06f 0303 	mvn.w	r3, #3
 801467e:	e01d      	b.n	80146bc <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8014680:	897b      	ldrh	r3, [r7, #10]
 8014682:	0a1b      	lsrs	r3, r3, #8
 8014684:	b29b      	uxth	r3, r3
 8014686:	b2da      	uxtb	r2, r3
 8014688:	4b0e      	ldr	r3, [pc, #56]	; (80146c4 <VL53L1_WriteMulti+0x64>)
 801468a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801468c:	897b      	ldrh	r3, [r7, #10]
 801468e:	b2da      	uxtb	r2, r3
 8014690:	4b0c      	ldr	r3, [pc, #48]	; (80146c4 <VL53L1_WriteMulti+0x64>)
 8014692:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8014694:	683a      	ldr	r2, [r7, #0]
 8014696:	6879      	ldr	r1, [r7, #4]
 8014698:	480b      	ldr	r0, [pc, #44]	; (80146c8 <VL53L1_WriteMulti+0x68>)
 801469a:	f004 ffb1 	bl	8019600 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	3302      	adds	r3, #2
 80146a2:	461a      	mov	r2, r3
 80146a4:	4907      	ldr	r1, [pc, #28]	; (80146c4 <VL53L1_WriteMulti+0x64>)
 80146a6:	68f8      	ldr	r0, [r7, #12]
 80146a8:	f7ff ffb4 	bl	8014614 <_I2CWrite>
 80146ac:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d001      	beq.n	80146b8 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80146b4:	23f3      	movs	r3, #243	; 0xf3
 80146b6:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80146b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3718      	adds	r7, #24
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}
 80146c4:	20008530 	.word	0x20008530
 80146c8:	20008532 	.word	0x20008532

080146cc <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b086      	sub	sp, #24
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	60f8      	str	r0, [r7, #12]
 80146d4:	607a      	str	r2, [r7, #4]
 80146d6:	603b      	str	r3, [r7, #0]
 80146d8:	460b      	mov	r3, r1
 80146da:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80146dc:	2300      	movs	r3, #0
 80146de:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80146e0:	897b      	ldrh	r3, [r7, #10]
 80146e2:	0a1b      	lsrs	r3, r3, #8
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	b2da      	uxtb	r2, r3
 80146e8:	4b12      	ldr	r3, [pc, #72]	; (8014734 <VL53L1_ReadMulti+0x68>)
 80146ea:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80146ec:	897b      	ldrh	r3, [r7, #10]
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	4b10      	ldr	r3, [pc, #64]	; (8014734 <VL53L1_ReadMulti+0x68>)
 80146f2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80146f4:	2202      	movs	r2, #2
 80146f6:	490f      	ldr	r1, [pc, #60]	; (8014734 <VL53L1_ReadMulti+0x68>)
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f7ff ff8b 	bl	8014614 <_I2CWrite>
 80146fe:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d002      	beq.n	801470c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014706:	23f3      	movs	r3, #243	; 0xf3
 8014708:	75fb      	strb	r3, [r7, #23]
        goto done;
 801470a:	e00c      	b.n	8014726 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 801470c:	683a      	ldr	r2, [r7, #0]
 801470e:	6879      	ldr	r1, [r7, #4]
 8014710:	68f8      	ldr	r0, [r7, #12]
 8014712:	f7ff ff92 	bl	801463a <_I2CRead>
 8014716:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d002      	beq.n	8014724 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801471e:	23f3      	movs	r3, #243	; 0xf3
 8014720:	75fb      	strb	r3, [r7, #23]
 8014722:	e000      	b.n	8014726 <VL53L1_ReadMulti+0x5a>
    }
done:
 8014724:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801472a:	4618      	mov	r0, r3
 801472c:	3718      	adds	r7, #24
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	20008530 	.word	0x20008530

08014738 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	460b      	mov	r3, r1
 8014742:	807b      	strh	r3, [r7, #2]
 8014744:	4613      	mov	r3, r2
 8014746:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014748:	2300      	movs	r3, #0
 801474a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801474c:	887b      	ldrh	r3, [r7, #2]
 801474e:	0a1b      	lsrs	r3, r3, #8
 8014750:	b29b      	uxth	r3, r3
 8014752:	b2da      	uxtb	r2, r3
 8014754:	4b0c      	ldr	r3, [pc, #48]	; (8014788 <VL53L1_WrByte+0x50>)
 8014756:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014758:	887b      	ldrh	r3, [r7, #2]
 801475a:	b2da      	uxtb	r2, r3
 801475c:	4b0a      	ldr	r3, [pc, #40]	; (8014788 <VL53L1_WrByte+0x50>)
 801475e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8014760:	4a09      	ldr	r2, [pc, #36]	; (8014788 <VL53L1_WrByte+0x50>)
 8014762:	787b      	ldrb	r3, [r7, #1]
 8014764:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8014766:	2203      	movs	r2, #3
 8014768:	4907      	ldr	r1, [pc, #28]	; (8014788 <VL53L1_WrByte+0x50>)
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f7ff ff52 	bl	8014614 <_I2CWrite>
 8014770:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d001      	beq.n	801477c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014778:	23f3      	movs	r3, #243	; 0xf3
 801477a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 801477c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014780:	4618      	mov	r0, r3
 8014782:	3710      	adds	r7, #16
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}
 8014788:	20008530 	.word	0x20008530

0801478c <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 801478c:	b580      	push	{r7, lr}
 801478e:	b084      	sub	sp, #16
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	460b      	mov	r3, r1
 8014796:	807b      	strh	r3, [r7, #2]
 8014798:	4613      	mov	r3, r2
 801479a:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801479c:	2300      	movs	r3, #0
 801479e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80147a0:	887b      	ldrh	r3, [r7, #2]
 80147a2:	0a1b      	lsrs	r3, r3, #8
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	b2da      	uxtb	r2, r3
 80147a8:	4b10      	ldr	r3, [pc, #64]	; (80147ec <VL53L1_WrWord+0x60>)
 80147aa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80147ac:	887b      	ldrh	r3, [r7, #2]
 80147ae:	b2da      	uxtb	r2, r3
 80147b0:	4b0e      	ldr	r3, [pc, #56]	; (80147ec <VL53L1_WrWord+0x60>)
 80147b2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80147b4:	883b      	ldrh	r3, [r7, #0]
 80147b6:	0a1b      	lsrs	r3, r3, #8
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	b2da      	uxtb	r2, r3
 80147bc:	4b0b      	ldr	r3, [pc, #44]	; (80147ec <VL53L1_WrWord+0x60>)
 80147be:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80147c0:	883b      	ldrh	r3, [r7, #0]
 80147c2:	b2da      	uxtb	r2, r3
 80147c4:	4b09      	ldr	r3, [pc, #36]	; (80147ec <VL53L1_WrWord+0x60>)
 80147c6:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80147c8:	2204      	movs	r2, #4
 80147ca:	4908      	ldr	r1, [pc, #32]	; (80147ec <VL53L1_WrWord+0x60>)
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff ff21 	bl	8014614 <_I2CWrite>
 80147d2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d001      	beq.n	80147de <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80147da:	23f3      	movs	r3, #243	; 0xf3
 80147dc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80147de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3710      	adds	r7, #16
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	20008530 	.word	0x20008530

080147f0 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	460b      	mov	r3, r1
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80147fe:	2300      	movs	r3, #0
 8014800:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8014802:	897b      	ldrh	r3, [r7, #10]
 8014804:	0a1b      	lsrs	r3, r3, #8
 8014806:	b29b      	uxth	r3, r3
 8014808:	b2da      	uxtb	r2, r3
 801480a:	4b12      	ldr	r3, [pc, #72]	; (8014854 <VL53L1_RdByte+0x64>)
 801480c:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801480e:	897b      	ldrh	r3, [r7, #10]
 8014810:	b2da      	uxtb	r2, r3
 8014812:	4b10      	ldr	r3, [pc, #64]	; (8014854 <VL53L1_RdByte+0x64>)
 8014814:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014816:	2202      	movs	r2, #2
 8014818:	490e      	ldr	r1, [pc, #56]	; (8014854 <VL53L1_RdByte+0x64>)
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	f7ff fefa 	bl	8014614 <_I2CWrite>
 8014820:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d002      	beq.n	801482e <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014828:	23f3      	movs	r3, #243	; 0xf3
 801482a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801482c:	e00c      	b.n	8014848 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801482e:	2201      	movs	r2, #1
 8014830:	6879      	ldr	r1, [r7, #4]
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f7ff ff01 	bl	801463a <_I2CRead>
 8014838:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d002      	beq.n	8014846 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014840:	23f3      	movs	r3, #243	; 0xf3
 8014842:	75fb      	strb	r3, [r7, #23]
 8014844:	e000      	b.n	8014848 <VL53L1_RdByte+0x58>
    }
done:
 8014846:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8014848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	20008530 	.word	0x20008530

08014858 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	460b      	mov	r3, r1
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014866:	2300      	movs	r3, #0
 8014868:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801486a:	897b      	ldrh	r3, [r7, #10]
 801486c:	0a1b      	lsrs	r3, r3, #8
 801486e:	b29b      	uxth	r3, r3
 8014870:	b2da      	uxtb	r2, r3
 8014872:	4b18      	ldr	r3, [pc, #96]	; (80148d4 <VL53L1_RdWord+0x7c>)
 8014874:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014876:	897b      	ldrh	r3, [r7, #10]
 8014878:	b2da      	uxtb	r2, r3
 801487a:	4b16      	ldr	r3, [pc, #88]	; (80148d4 <VL53L1_RdWord+0x7c>)
 801487c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801487e:	2202      	movs	r2, #2
 8014880:	4914      	ldr	r1, [pc, #80]	; (80148d4 <VL53L1_RdWord+0x7c>)
 8014882:	68f8      	ldr	r0, [r7, #12]
 8014884:	f7ff fec6 	bl	8014614 <_I2CWrite>
 8014888:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d002      	beq.n	8014896 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014890:	23f3      	movs	r3, #243	; 0xf3
 8014892:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014894:	e017      	b.n	80148c6 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8014896:	2202      	movs	r2, #2
 8014898:	490e      	ldr	r1, [pc, #56]	; (80148d4 <VL53L1_RdWord+0x7c>)
 801489a:	68f8      	ldr	r0, [r7, #12]
 801489c:	f7ff fecd 	bl	801463a <_I2CRead>
 80148a0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d002      	beq.n	80148ae <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80148a8:	23f3      	movs	r3, #243	; 0xf3
 80148aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80148ac:	e00b      	b.n	80148c6 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80148ae:	4b09      	ldr	r3, [pc, #36]	; (80148d4 <VL53L1_RdWord+0x7c>)
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	021b      	lsls	r3, r3, #8
 80148b6:	b29a      	uxth	r2, r3
 80148b8:	4b06      	ldr	r3, [pc, #24]	; (80148d4 <VL53L1_RdWord+0x7c>)
 80148ba:	785b      	ldrb	r3, [r3, #1]
 80148bc:	b29b      	uxth	r3, r3
 80148be:	4413      	add	r3, r2
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 80148c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3718      	adds	r7, #24
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	20008530 	.word	0x20008530

080148d8 <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 80148e2:	2300      	movs	r3, #0
 80148e4:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	695b      	ldr	r3, [r3, #20]
 80148ea:	4798      	blx	r3
 80148ec:	4603      	mov	r3, r0
 80148ee:	461a      	mov	r2, r3
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80148f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3710      	adds	r7, #16
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	4619      	mov	r1, r3
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f8d2 	bl	8014ab8 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014914:	2300      	movs	r3, #0
}
 8014916:	4618      	mov	r0, r3
 8014918:	3708      	adds	r7, #8
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
	...

08014920 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	4a07      	ldr	r2, [pc, #28]	; (801494c <VL53L1_WaitUs+0x2c>)
 801492e:	fb82 1203 	smull	r1, r2, r2, r3
 8014932:	1192      	asrs	r2, r2, #6
 8014934:	17db      	asrs	r3, r3, #31
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	4619      	mov	r1, r3
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f8bc 	bl	8014ab8 <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3708      	adds	r7, #8
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	10624dd3 	.word	0x10624dd3

08014950 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014950:	b590      	push	{r4, r7, lr}
 8014952:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8014956:	af00      	add	r7, sp, #0
 8014958:	f507 740a 	add.w	r4, r7, #552	; 0x228
 801495c:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8014960:	6020      	str	r0, [r4, #0]
 8014962:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8014966:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 801496a:	6001      	str	r1, [r0, #0]
 801496c:	4619      	mov	r1, r3
 801496e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014972:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014976:	801a      	strh	r2, [r3, #0]
 8014978:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801497c:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8014980:	460a      	mov	r2, r1
 8014982:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014984:	2300      	movs	r3, #0
 8014986:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 801498a:	2300      	movs	r3, #0
 801498c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8014990:	2300      	movs	r3, #0
 8014992:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8014996:	2300      	movs	r3, #0
 8014998:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 801499c:	2300      	movs	r3, #0
 801499e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80149a2:	2300      	movs	r3, #0
 80149a4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 80149a8:	f107 0310 	add.w	r3, r7, #16
 80149ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80149b0:	4940      	ldr	r1, [pc, #256]	; (8014ab4 <VL53L1_WaitValueMaskEx+0x164>)
 80149b2:	4618      	mov	r0, r3
 80149b4:	f004 fede 	bl	8019774 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 80149b8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80149bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80149c0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80149c4:	4611      	mov	r1, r2
 80149c6:	6818      	ldr	r0, [r3, #0]
 80149c8:	f7ff ff86 	bl	80148d8 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80149cc:	e04e      	b.n	8014a6c <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80149ce:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d110      	bne.n	80149f8 <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 80149d6:	f207 2213 	addw	r2, r7, #531	; 0x213
 80149da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80149de:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80149e2:	8819      	ldrh	r1, [r3, #0]
 80149e4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80149e8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80149ec:	6818      	ldr	r0, [r3, #0]
 80149ee:	f7ff feff 	bl	80147f0 <VL53L1_RdByte>
 80149f2:	4603      	mov	r3, r0
 80149f4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80149f8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80149fc:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014a00:	4013      	ands	r3, r2
 8014a02:	b2db      	uxtb	r3, r3
 8014a04:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8014a08:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014a0c:	7812      	ldrb	r2, [r2, #0]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d102      	bne.n	8014a18 <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014a12:	2301      	movs	r3, #1
 8014a14:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8014a18:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d114      	bne.n	8014a4a <VL53L1_WaitValueMaskEx+0xfa>
 8014a20:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d110      	bne.n	8014a4a <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 8014a28:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00c      	beq.n	8014a4a <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014a30:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014a34:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a38:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014a3c:	4611      	mov	r1, r2
 8014a3e:	6818      	ldr	r0, [r3, #0]
 8014a40:	f7ff ff5e 	bl	8014900 <VL53L1_WaitMs>
 8014a44:	4603      	mov	r3, r0
 8014a46:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 8014a4a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014a4e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a52:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014a56:	4611      	mov	r1, r2
 8014a58:	6818      	ldr	r0, [r3, #0]
 8014a5a:	f7ff ff3d 	bl	80148d8 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8014a5e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014a62:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8014a6c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d10c      	bne.n	8014a8e <VL53L1_WaitValueMaskEx+0x13e>
 8014a74:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014a78:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8014a7c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d203      	bcs.n	8014a8e <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 8014a86:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d09f      	beq.n	80149ce <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8014a8e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d106      	bne.n	8014aa4 <VL53L1_WaitValueMaskEx+0x154>
 8014a96:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d102      	bne.n	8014aa4 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 8014a9e:	23f9      	movs	r3, #249	; 0xf9
 8014aa0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8014aa4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd90      	pop	{r4, r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	0801a86c 	.word	0x0801a86c

08014ab8 <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	695b      	ldr	r3, [r3, #20]
 8014ac6:	4798      	blx	r3
 8014ac8:	4603      	mov	r3, r0
 8014aca:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014acc:	bf00      	nop
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	695b      	ldr	r3, [r3, #20]
 8014ad2:	4798      	blx	r3
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	1ad3      	subs	r3, r2, r3
 8014adc:	683a      	ldr	r2, [r7, #0]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d8f5      	bhi.n	8014ace <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014ae2:	2300      	movs	r3, #0
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3710      	adds	r7, #16
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b08c      	sub	sp, #48	; 0x30
 8014af0:	af06      	add	r7, sp, #24
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
 8014af8:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8014afa:	2300      	movs	r3, #0
 8014afc:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b00:	9304      	str	r3, [sp, #16]
 8014b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b04:	9303      	str	r3, [sp, #12]
 8014b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b08:	9302      	str	r3, [sp, #8]
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	6a3b      	ldr	r3, [r7, #32]
 8014b14:	683a      	ldr	r2, [r7, #0]
 8014b16:	6879      	ldr	r1, [r7, #4]
 8014b18:	68b8      	ldr	r0, [r7, #8]
 8014b1a:	f7fc fefb 	bl	8011914 <VL53L1_hist_process_data>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014b22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b26:	4618      	mov	r0, r3
 8014b28:	3718      	adds	r7, #24
 8014b2a:	46bd      	mov	sp, r7
 8014b2c:	bd80      	pop	{r7, pc}

08014b2e <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014b2e:	b580      	push	{r7, lr}
 8014b30:	b084      	sub	sp, #16
 8014b32:	af00      	add	r7, sp, #0
 8014b34:	6078      	str	r0, [r7, #4]
 8014b36:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d103      	bne.n	8014b46 <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014b3e:	f06f 0301 	mvn.w	r3, #1
 8014b42:	60fb      	str	r3, [r7, #12]
 8014b44:	e023      	b.n	8014b8e <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	685a      	ldr	r2, [r3, #4]
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	891a      	ldrh	r2, [r3, #8]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	68da      	ldr	r2, [r3, #12]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	691a      	ldr	r2, [r3, #16]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	695a      	ldr	r2, [r3, #20]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d004      	beq.n	8014b88 <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	4798      	blx	r3
 8014b84:	60f8      	str	r0, [r7, #12]
 8014b86:	e002      	b.n	8014b8e <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 8014b88:	f04f 33ff 	mov.w	r3, #4294967295
 8014b8c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ba6:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d003      	beq.n	8014bb6 <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 8014bae:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb2:	60fb      	str	r3, [r7, #12]
 8014bb4:	e04d      	b.n	8014c52 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7ed f8d1 	bl	8001d5e <VL53L1_WaitDeviceBooted>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d003      	beq.n	8014bca <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc6:	60fb      	str	r3, [r7, #12]
 8014bc8:	e043      	b.n	8014c52 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f7ed f847 	bl	8001c5e <VL53L1_DataInit>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d003      	beq.n	8014bde <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 8014bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bda:	60fb      	str	r3, [r7, #12]
 8014bdc:	e039      	b.n	8014c52 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f7ed f892 	bl	8001d08 <VL53L1_StaticInit>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d003      	beq.n	8014bf2 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 8014bea:	f04f 33ff 	mov.w	r3, #4294967295
 8014bee:	60fb      	str	r3, [r7, #12]
 8014bf0:	e02f      	b.n	8014c52 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7ee fe8a 	bl	800390c <VL53L1_PerformRefSpadManagement>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d003      	beq.n	8014c06 <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e025      	b.n	8014c52 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c18:	2200      	movs	r2, #0
 8014c1a:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c24:	2200      	movs	r2, #0
 8014c26:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c30:	2200      	movs	r2, #0
 8014c32:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c48:	2201      	movs	r2, #1
 8014c4a:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014c52:	68fb      	ldr	r3, [r7, #12]
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b084      	sub	sp, #16
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 8014c64:	f04f 33ff 	mov.w	r3, #4294967295
 8014c68:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c70:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d111      	bne.n	8014c9c <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	4798      	blx	r3
 8014c7e:	4603      	mov	r3, r0
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d003      	beq.n	8014c8c <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 8014c84:	f04f 33ff 	mov.w	r3, #4294967295
 8014c88:	60fb      	str	r3, [r7, #12]
 8014c8a:	e007      	b.n	8014c9c <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014c96:	2200      	movs	r2, #0
 8014c98:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 8014ca6:	b580      	push	{r7, lr}
 8014ca8:	b084      	sub	sp, #16
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	6078      	str	r0, [r7, #4]
 8014cae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d002      	beq.n	8014cbc <VL53L1CB_ReadID+0x16>
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d103      	bne.n	8014cc4 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014cbc:	f06f 0301 	mvn.w	r3, #1
 8014cc0:	60fb      	str	r3, [r7, #12]
 8014cc2:	e00a      	b.n	8014cda <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 8014cca:	683a      	ldr	r2, [r7, #0]
 8014ccc:	f240 110f 	movw	r1, #271	; 0x10f
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7ff fdc1 	bl	8014858 <VL53L1_RdWord>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014cda:	68fb      	ldr	r3, [r7, #12]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3710      	adds	r7, #16
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	b085      	sub	sp, #20
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <VL53L1CB_GetCapabilities+0x16>
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d103      	bne.n	8014d02 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014cfa:	f06f 0301 	mvn.w	r3, #1
 8014cfe:	60fb      	str	r3, [r7, #12]
 8014d00:	e00d      	b.n	8014d1e <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	2201      	movs	r2, #1
 8014d06:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2204      	movs	r2, #4
 8014d0c:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	2201      	movs	r2, #1
 8014d12:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	2200      	movs	r2, #0
 8014d18:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3714      	adds	r7, #20
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr

08014d2c <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b084      	sub	sp, #16
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
 8014d34:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d009      	beq.n	8014d50 <VL53L1CB_ConfigProfile+0x24>
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d006      	beq.n	8014d50 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014d48:	7afb      	ldrb	r3, [r7, #11]
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d103      	bne.n	8014d56 <VL53L1CB_ConfigProfile+0x2a>
 8014d4e:	e00c      	b.n	8014d6a <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014d50:	f06f 0301 	mvn.w	r3, #1
 8014d54:	e043      	b.n	8014dde <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 8014d56:	7afb      	ldrb	r3, [r7, #11]
 8014d58:	2b02      	cmp	r3, #2
 8014d5a:	d006      	beq.n	8014d6a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 8014d5c:	7afb      	ldrb	r3, [r7, #11]
 8014d5e:	2b03      	cmp	r3, #3
 8014d60:	d003      	beq.n	8014d6a <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014d62:	f06f 0301 	mvn.w	r3, #1
 8014d66:	60fb      	str	r3, [r7, #12]
 8014d68:	e038      	b.n	8014ddc <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 8014d6a:	7afb      	ldrb	r3, [r7, #11]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f7ed f970 	bl	8002054 <VL53L1_SetDistanceMode>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d003      	beq.n	8014d82 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 8014d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7e:	60fb      	str	r3, [r7, #12]
 8014d80:	e02c      	b.n	8014ddc <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8014d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014d8a:	fb02 f303 	mul.w	r3, r2, r3
 8014d8e:	4619      	mov	r1, r3
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7ed f9ed 	bl	8002170 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d003      	beq.n	8014da4 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 8014d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014da0:	60fb      	str	r3, [r7, #12]
 8014da2:	e01b      	b.n	8014ddc <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	bf14      	ite	ne
 8014dac:	2301      	movne	r3, #1
 8014dae:	2300      	moveq	r3, #0
 8014db0:	b2db      	uxtb	r3, r3
 8014db2:	461a      	mov	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dba:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	691b      	ldr	r3, [r3, #16]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	bf14      	ite	ne
 8014dc6:	2301      	movne	r3, #1
 8014dc8:	2300      	moveq	r3, #0
 8014dca:	b2db      	uxtb	r3, r3
 8014dcc:	461a      	mov	r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dd4:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	3710      	adds	r7, #16
 8014de2:	46bd      	mov	sp, r7
 8014de4:	bd80      	pop	{r7, pc}

08014de6 <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 8014de6:	b580      	push	{r7, lr}
 8014de8:	b094      	sub	sp, #80	; 0x50
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	6078      	str	r0, [r7, #4]
 8014dee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d002      	beq.n	8014dfc <VL53L1CB_ConfigROI+0x16>
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d103      	bne.n	8014e04 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014dfc:	f06f 0301 	mvn.w	r3, #1
 8014e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e02:	e01c      	b.n	8014e3e <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014e04:	2301      	movs	r3, #1
 8014e06:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	789b      	ldrb	r3, [r3, #2]
 8014e0c:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	78db      	ldrb	r3, [r3, #3]
 8014e12:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	785b      	ldrb	r3, [r3, #1]
 8014e1e:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014e20:	f107 0308 	add.w	r3, r7, #8
 8014e24:	4619      	mov	r1, r3
 8014e26:	6878      	ldr	r0, [r7, #4]
 8014e28:	f7ed fca6 	bl	8002778 <VL53L1_SetROI>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d003      	beq.n	8014e3a <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014e32:	f04f 33ff 	mov.w	r3, #4294967295
 8014e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e38:	e001      	b.n	8014e3e <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3750      	adds	r7, #80	; 0x50
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014e52:	f06f 0303 	mvn.w	r3, #3
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	370c      	adds	r7, #12
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e60:	4770      	bx	lr

08014e62 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b084      	sub	sp, #16
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
 8014e6a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d002      	beq.n	8014e78 <VL53L1CB_GetDistance+0x16>
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d103      	bne.n	8014e80 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014e78:	f06f 0301 	mvn.w	r3, #1
 8014e7c:	60fb      	str	r3, [r7, #12]
 8014e7e:	e03a      	b.n	8014ef6 <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e86:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d103      	bne.n	8014e96 <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e92:	60fb      	str	r3, [r7, #12]
 8014e94:	e02f      	b.n	8014ef6 <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014e9c:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d106      	bne.n	8014eb2 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 8014ea4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 f92b 	bl	8015104 <vl53l1cb_poll_for_measurement>
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	e004      	b.n	8014ebc <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 f925 	bl	8015104 <vl53l1cb_poll_for_measurement>
 8014eba:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d119      	bne.n	8014ef6 <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f000 f94b 	bl	8015160 <vl53l1cb_get_result>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d003      	beq.n	8014ed8 <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed4:	60fb      	str	r3, [r7, #12]
 8014ed6:	e00e      	b.n	8014ef6 <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ede:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8014ee2:	2b01      	cmp	r3, #1
 8014ee4:	d105      	bne.n	8014ef2 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f7ed fdde 	bl	8002aa8 <VL53L1_ClearInterruptAndStartMeasurement>
 8014eec:	4603      	mov	r3, r0
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	e001      	b.n	8014ef6 <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3710      	adds	r7, #16
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b084      	sub	sp, #16
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d103      	bne.n	8014f18 <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014f10:	f06f 0301 	mvn.w	r3, #1
 8014f14:	60fb      	str	r3, [r7, #12]
 8014f16:	e068      	b.n	8014fea <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f1e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014f22:	2b01      	cmp	r3, #1
 8014f24:	d103      	bne.n	8014f2e <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014f26:	f04f 33ff 	mov.w	r3, #4294967295
 8014f2a:	60fb      	str	r3, [r7, #12]
 8014f2c:	e05d      	b.n	8014fea <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7ed fcf6 	bl	8002920 <VL53L1_StartMeasurement>
 8014f34:	4603      	mov	r3, r0
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d154      	bne.n	8014fe4 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f40:	2201      	movs	r2, #1
 8014f42:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014f46:	2300      	movs	r3, #0
 8014f48:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	2b03      	cmp	r3, #3
 8014f50:	d83e      	bhi.n	8014fd0 <VL53L1CB_Start+0xd0>
 8014f52:	a201      	add	r2, pc, #4	; (adr r2, 8014f58 <VL53L1CB_Start+0x58>)
 8014f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f58:	08014f69 	.word	0x08014f69
 8014f5c:	08014f83 	.word	0x08014f83
 8014f60:	08014f9d 	.word	0x08014f9d
 8014f64:	08014fb7 	.word	0x08014fb7
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f6e:	2201      	movs	r2, #1
 8014f70:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014f80:	e033      	b.n	8014fea <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f88:	2200      	movs	r2, #0
 8014f8a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014f94:	2201      	movs	r2, #1
 8014f96:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014f9a:	e026      	b.n	8014fea <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fae:	2200      	movs	r2, #0
 8014fb0:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014fb4:	e019      	b.n	8014fea <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014fce:	e00c      	b.n	8014fea <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8014fdc:	f06f 0301 	mvn.w	r3, #1
 8014fe0:	60fb      	str	r3, [r7, #12]
      break;
 8014fe2:	e002      	b.n	8014fea <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fe8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014fea:	68fb      	ldr	r3, [r7, #12]
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3710      	adds	r7, #16
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d103      	bne.n	801500a <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015002:	f06f 0301 	mvn.w	r3, #1
 8015006:	60fb      	str	r3, [r7, #12]
 8015008:	e01c      	b.n	8015044 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015010:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8015014:	2b00      	cmp	r3, #0
 8015016:	d103      	bne.n	8015020 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8015018:	f04f 33ff 	mov.w	r3, #4294967295
 801501c:	60fb      	str	r3, [r7, #12]
 801501e:	e011      	b.n	8015044 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ed fd1d 	bl	8002a60 <VL53L1_StopMeasurement>
 8015026:	4603      	mov	r3, r0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d108      	bne.n	801503e <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015032:	2200      	movs	r2, #0
 8015034:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8015038:	2300      	movs	r3, #0
 801503a:	60fb      	str	r3, [r7, #12]
 801503c:	e002      	b.n	8015044 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 801503e:	f04f 33ff 	mov.w	r3, #4294967295
 8015042:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015044:	68fb      	ldr	r3, [r7, #12]
}
 8015046:	4618      	mov	r0, r3
 8015048:	3710      	adds	r7, #16
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 801504e:	b580      	push	{r7, lr}
 8015050:	b084      	sub	sp, #16
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d103      	bne.n	8015066 <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801505e:	f06f 0301 	mvn.w	r3, #1
 8015062:	60fb      	str	r3, [r7, #12]
 8015064:	e012      	b.n	801508c <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	b2db      	uxtb	r3, r3
 801506a:	4619      	mov	r1, r3
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f7ec fdcf 	bl	8001c10 <VL53L1_SetDeviceAddress>
 8015072:	4603      	mov	r3, r0
 8015074:	2b00      	cmp	r3, #0
 8015076:	d003      	beq.n	8015080 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8015078:	f04f 33ff 	mov.w	r3, #4294967295
 801507c:	60fb      	str	r3, [r7, #12]
 801507e:	e005      	b.n	801508c <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	b29a      	uxth	r2, r3
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8015088:	2300      	movs	r3, #0
 801508a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801508c:	68fb      	ldr	r3, [r7, #12]
}
 801508e:	4618      	mov	r0, r3
 8015090:	3710      	adds	r7, #16
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}

08015096 <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8015096:	b480      	push	{r7}
 8015098:	b085      	sub	sp, #20
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
 801509e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d002      	beq.n	80150ac <VL53L1CB_GetAddress+0x16>
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d103      	bne.n	80150b4 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80150ac:	f06f 0301 	mvn.w	r3, #1
 80150b0:	60fb      	str	r3, [r7, #12]
 80150b2:	e006      	b.n	80150c2 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	891b      	ldrh	r3, [r3, #8]
 80150b8:	461a      	mov	r2, r3
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80150c2:	68fb      	ldr	r3, [r7, #12]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3714      	adds	r7, #20
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr

080150d0 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 80150d0:	b480      	push	{r7}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80150da:	f06f 0303 	mvn.w	r3, #3
}
 80150de:	4618      	mov	r0, r3
 80150e0:	370c      	adds	r7, #12
 80150e2:	46bd      	mov	sp, r7
 80150e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e8:	4770      	bx	lr

080150ea <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 80150ea:	b480      	push	{r7}
 80150ec:	b083      	sub	sp, #12
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
 80150f2:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 80150f4:	f06f 0303 	mvn.w	r3, #3
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	370c      	adds	r7, #12
 80150fc:	46bd      	mov	sp, r7
 80150fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015102:	4770      	bx	lr

08015104 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801510e:	2300      	movs	r3, #0
 8015110:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d102      	bne.n	801511e <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8015118:	f06f 0301 	mvn.w	r3, #1
 801511c:	e01b      	b.n	8015156 <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	695b      	ldr	r3, [r3, #20]
 8015122:	4798      	blx	r3
 8015124:	4603      	mov	r3, r0
 8015126:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8015128:	f107 030b 	add.w	r3, r7, #11
 801512c:	4619      	mov	r1, r3
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ed fcd0 	bl	8002ad4 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8015134:	7afb      	ldrb	r3, [r7, #11]
 8015136:	2b01      	cmp	r3, #1
 8015138:	d101      	bne.n	801513e <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 801513a:	2300      	movs	r3, #0
 801513c:	e00b      	b.n	8015156 <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	695b      	ldr	r3, [r3, #20]
 8015142:	4798      	blx	r3
 8015144:	4603      	mov	r3, r0
 8015146:	461a      	mov	r2, r3
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	1ad3      	subs	r3, r2, r3
 801514c:	683a      	ldr	r2, [r7, #0]
 801514e:	429a      	cmp	r2, r3
 8015150:	d8ea      	bhi.n	8015128 <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8015152:	f06f 0302 	mvn.w	r3, #2
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
	...

08015160 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8015160:	b590      	push	{r4, r7, lr}
 8015162:	b0a9      	sub	sp, #164	; 0xa4
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d002      	beq.n	8015176 <vl53l1cb_get_result+0x16>
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d104      	bne.n	8015180 <vl53l1cb_get_result+0x20>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8015176:	f06f 0301 	mvn.w	r3, #1
 801517a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801517e:	e120      	b.n	80153c2 <vl53l1cb_get_result+0x262>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8015180:	f107 030c 	add.w	r3, r7, #12
 8015184:	4619      	mov	r1, r3
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7ee fb82 	bl	8003890 <VL53L1_GetMultiRangingData>
 801518c:	4603      	mov	r3, r0
 801518e:	2b00      	cmp	r3, #0
 8015190:	d004      	beq.n	801519c <vl53l1cb_get_result+0x3c>
  {
    ret = VL53L1CB_ERROR;
 8015192:	f04f 33ff 	mov.w	r3, #4294967295
 8015196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801519a:	e112      	b.n	80153c2 <vl53l1cb_get_result+0x262>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 801519c:	2300      	movs	r3, #0
 801519e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 80151a2:	e106      	b.n	80153b2 <vl53l1cb_get_result+0x252>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 80151a4:	7cbb      	ldrb	r3, [r7, #18]
 80151a6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80151aa:	4618      	mov	r0, r3
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	4613      	mov	r3, r2
 80151b0:	011b      	lsls	r3, r3, #4
 80151b2:	4413      	add	r3, r2
 80151b4:	009b      	lsls	r3, r3, #2
 80151b6:	440b      	add	r3, r1
 80151b8:	3304      	adds	r3, #4
 80151ba:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80151bc:	2300      	movs	r3, #0
 80151be:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 80151c2:	e0eb      	b.n	801539c <vl53l1cb_get_result+0x23c>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80151c4:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80151c8:	4613      	mov	r3, r2
 80151ca:	00db      	lsls	r3, r3, #3
 80151cc:	1a9b      	subs	r3, r3, r2
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	33a0      	adds	r3, #160	; 0xa0
 80151d2:	443b      	add	r3, r7
 80151d4:	3b78      	subs	r3, #120	; 0x78
 80151d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	da0d      	bge.n	80151fa <vl53l1cb_get_result+0x9a>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80151de:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80151e2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80151e6:	6839      	ldr	r1, [r7, #0]
 80151e8:	4613      	mov	r3, r2
 80151ea:	011b      	lsls	r3, r3, #4
 80151ec:	4413      	add	r3, r2
 80151ee:	4403      	add	r3, r0
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	440b      	add	r3, r1
 80151f4:	2200      	movs	r2, #0
 80151f6:	609a      	str	r2, [r3, #8]
 80151f8:	e017      	b.n	801522a <vl53l1cb_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 80151fa:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80151fe:	4613      	mov	r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	1a9b      	subs	r3, r3, r2
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	33a0      	adds	r3, #160	; 0xa0
 8015208:	443b      	add	r3, r7
 801520a:	3b78      	subs	r3, #120	; 0x78
 801520c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015210:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015214:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015218:	461c      	mov	r4, r3
 801521a:	6839      	ldr	r1, [r7, #0]
 801521c:	4613      	mov	r3, r2
 801521e:	011b      	lsls	r3, r3, #4
 8015220:	4413      	add	r3, r2
 8015222:	4403      	add	r3, r0
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	440b      	add	r3, r1
 8015228:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8015230:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8015234:	2b01      	cmp	r3, #1
 8015236:	d136      	bne.n	80152a6 <vl53l1cb_get_result+0x146>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8015238:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 801523c:	4613      	mov	r3, r2
 801523e:	00db      	lsls	r3, r3, #3
 8015240:	1a9b      	subs	r3, r3, r2
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	33a0      	adds	r3, #160	; 0xa0
 8015246:	443b      	add	r3, r7
 8015248:	3b80      	subs	r3, #128	; 0x80
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	ee07 3a90 	vmov	s15, r3
 8015250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015254:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80153d0 <vl53l1cb_get_result+0x270>
 8015258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801525c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80153d4 <vl53l1cb_get_result+0x274>
 8015260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015264:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801526c:	0a1b      	lsrs	r3, r3, #8
 801526e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8015272:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8015276:	ee07 3a90 	vmov	s15, r3
 801527a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801527e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015282:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015286:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801528e:	6839      	ldr	r1, [r7, #0]
 8015290:	4613      	mov	r3, r2
 8015292:	011b      	lsls	r3, r3, #4
 8015294:	4413      	add	r3, r2
 8015296:	4403      	add	r3, r0
 8015298:	3308      	adds	r3, #8
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	440b      	add	r3, r1
 801529e:	3308      	adds	r3, #8
 80152a0:	edc3 7a00 	vstr	s15, [r3]
 80152a4:	e00f      	b.n	80152c6 <vl53l1cb_get_result+0x166>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80152a6:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 80152aa:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80152ae:	6839      	ldr	r1, [r7, #0]
 80152b0:	4613      	mov	r3, r2
 80152b2:	011b      	lsls	r3, r3, #4
 80152b4:	4413      	add	r3, r2
 80152b6:	4403      	add	r3, r0
 80152b8:	3308      	adds	r3, #8
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	440b      	add	r3, r1
 80152be:	3308      	adds	r3, #8
 80152c0:	f04f 0200 	mov.w	r2, #0
 80152c4:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80152cc:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d136      	bne.n	8015342 <vl53l1cb_get_result+0x1e2>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 80152d4:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80152d8:	4613      	mov	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	1a9b      	subs	r3, r3, r2
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	33a0      	adds	r3, #160	; 0xa0
 80152e2:	443b      	add	r3, r7
 80152e4:	3b84      	subs	r3, #132	; 0x84
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	ee07 3a90 	vmov	s15, r3
 80152ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80152f0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80153d0 <vl53l1cb_get_result+0x270>
 80152f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80152f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80153d4 <vl53l1cb_get_result+0x274>
 80152fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015300:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8015304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015308:	0a1b      	lsrs	r3, r3, #8
 801530a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 801530e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8015312:	ee07 3a90 	vmov	s15, r3
 8015316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801531a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801531e:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8015322:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8015326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801532a:	6839      	ldr	r1, [r7, #0]
 801532c:	4613      	mov	r3, r2
 801532e:	011b      	lsls	r3, r3, #4
 8015330:	4413      	add	r3, r2
 8015332:	4403      	add	r3, r0
 8015334:	330c      	adds	r3, #12
 8015336:	009b      	lsls	r3, r3, #2
 8015338:	440b      	add	r3, r1
 801533a:	3308      	adds	r3, #8
 801533c:	edc3 7a00 	vstr	s15, [r3]
 8015340:	e00f      	b.n	8015362 <vl53l1cb_get_result+0x202>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8015342:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8015346:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801534a:	6839      	ldr	r1, [r7, #0]
 801534c:	4613      	mov	r3, r2
 801534e:	011b      	lsls	r3, r3, #4
 8015350:	4413      	add	r3, r2
 8015352:	4403      	add	r3, r0
 8015354:	330c      	adds	r3, #12
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	440b      	add	r3, r1
 801535a:	3308      	adds	r3, #8
 801535c:	f04f 0200 	mov.w	r2, #0
 8015360:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8015362:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 8015366:	4613      	mov	r3, r2
 8015368:	00db      	lsls	r3, r3, #3
 801536a:	1a9b      	subs	r3, r3, r2
 801536c:	009b      	lsls	r3, r3, #2
 801536e:	33a0      	adds	r3, #160	; 0xa0
 8015370:	443b      	add	r3, r7
 8015372:	3b75      	subs	r3, #117	; 0x75
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 801537a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801537e:	461c      	mov	r4, r3
 8015380:	6839      	ldr	r1, [r7, #0]
 8015382:	4613      	mov	r3, r2
 8015384:	011b      	lsls	r3, r3, #4
 8015386:	4413      	add	r3, r2
 8015388:	4403      	add	r3, r0
 801538a:	3304      	adds	r3, #4
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	440b      	add	r3, r1
 8015390:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8015392:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8015396:	3301      	adds	r3, #1
 8015398:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 801539c:	7cbb      	ldrb	r3, [r7, #18]
 801539e:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80153a2:	429a      	cmp	r2, r3
 80153a4:	f4ff af0e 	bcc.w	80151c4 <vl53l1cb_get_result+0x64>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 80153a8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80153ac:	3301      	adds	r3, #1
 80153ae:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 80153b2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f43f aef4 	beq.w	80151a4 <vl53l1cb_get_result+0x44>
      }
    }

    ret = VL53L1CB_OK;
 80153bc:	2300      	movs	r3, #0
 80153be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }

  return ret;
 80153c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	37a4      	adds	r7, #164	; 0xa4
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd90      	pop	{r4, r7, pc}
 80153ce:	bf00      	nop
 80153d0:	47800000 	.word	0x47800000
 80153d4:	447a0000 	.word	0x447a0000

080153d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80153de:	2300      	movs	r3, #0
 80153e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80153e2:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <HAL_Init+0x3c>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a0b      	ldr	r2, [pc, #44]	; (8015414 <HAL_Init+0x3c>)
 80153e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80153ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80153ee:	2003      	movs	r0, #3
 80153f0:	f000 f90f 	bl	8015612 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80153f4:	200f      	movs	r0, #15
 80153f6:	f7eb fd0b 	bl	8000e10 <HAL_InitTick>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d002      	beq.n	8015406 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8015400:	2301      	movs	r3, #1
 8015402:	71fb      	strb	r3, [r7, #7]
 8015404:	e001      	b.n	801540a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8015406:	f7eb fc45 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801540a:	79fb      	ldrb	r3, [r7, #7]
}
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	58004000 	.word	0x58004000

08015418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015418:	b480      	push	{r7}
 801541a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801541c:	4b06      	ldr	r3, [pc, #24]	; (8015438 <HAL_IncTick+0x20>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	461a      	mov	r2, r3
 8015422:	4b06      	ldr	r3, [pc, #24]	; (801543c <HAL_IncTick+0x24>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4413      	add	r3, r2
 8015428:	4a04      	ldr	r2, [pc, #16]	; (801543c <HAL_IncTick+0x24>)
 801542a:	6013      	str	r3, [r2, #0]
}
 801542c:	bf00      	nop
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop
 8015438:	20000070 	.word	0x20000070
 801543c:	20008630 	.word	0x20008630

08015440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015440:	b480      	push	{r7}
 8015442:	af00      	add	r7, sp, #0
  return uwTick;
 8015444:	4b03      	ldr	r3, [pc, #12]	; (8015454 <HAL_GetTick+0x14>)
 8015446:	681b      	ldr	r3, [r3, #0]
}
 8015448:	4618      	mov	r0, r3
 801544a:	46bd      	mov	sp, r7
 801544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015450:	4770      	bx	lr
 8015452:	bf00      	nop
 8015454:	20008630 	.word	0x20008630

08015458 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8015458:	b480      	push	{r7}
 801545a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 801545c:	4b03      	ldr	r3, [pc, #12]	; (801546c <HAL_GetTickPrio+0x14>)
 801545e:	681b      	ldr	r3, [r3, #0]
}
 8015460:	4618      	mov	r0, r3
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr
 801546a:	bf00      	nop
 801546c:	2000006c 	.word	0x2000006c

08015470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8015478:	f7ff ffe2 	bl	8015440 <HAL_GetTick>
 801547c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015488:	d005      	beq.n	8015496 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 801548a:	4b0a      	ldr	r3, [pc, #40]	; (80154b4 <HAL_Delay+0x44>)
 801548c:	781b      	ldrb	r3, [r3, #0]
 801548e:	461a      	mov	r2, r3
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	4413      	add	r3, r2
 8015494:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8015496:	bf00      	nop
 8015498:	f7ff ffd2 	bl	8015440 <HAL_GetTick>
 801549c:	4602      	mov	r2, r0
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	1ad3      	subs	r3, r2, r3
 80154a2:	68fa      	ldr	r2, [r7, #12]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d8f7      	bhi.n	8015498 <HAL_Delay+0x28>
    {
    }
  }
 80154a8:	bf00      	nop
 80154aa:	bf00      	nop
 80154ac:	3710      	adds	r7, #16
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	20000070 	.word	0x20000070

080154b8 <__NVIC_SetPriorityGrouping>:
{
 80154b8:	b480      	push	{r7}
 80154ba:	b085      	sub	sp, #20
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f003 0307 	and.w	r3, r3, #7
 80154c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80154c8:	4b0c      	ldr	r3, [pc, #48]	; (80154fc <__NVIC_SetPriorityGrouping+0x44>)
 80154ca:	68db      	ldr	r3, [r3, #12]
 80154cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80154d4:	4013      	ands	r3, r2
 80154d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80154e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80154e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80154e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80154ea:	4a04      	ldr	r2, [pc, #16]	; (80154fc <__NVIC_SetPriorityGrouping+0x44>)
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	60d3      	str	r3, [r2, #12]
}
 80154f0:	bf00      	nop
 80154f2:	3714      	adds	r7, #20
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr
 80154fc:	e000ed00 	.word	0xe000ed00

08015500 <__NVIC_GetPriorityGrouping>:
{
 8015500:	b480      	push	{r7}
 8015502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015504:	4b04      	ldr	r3, [pc, #16]	; (8015518 <__NVIC_GetPriorityGrouping+0x18>)
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	0a1b      	lsrs	r3, r3, #8
 801550a:	f003 0307 	and.w	r3, r3, #7
}
 801550e:	4618      	mov	r0, r3
 8015510:	46bd      	mov	sp, r7
 8015512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015516:	4770      	bx	lr
 8015518:	e000ed00 	.word	0xe000ed00

0801551c <__NVIC_EnableIRQ>:
{
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	4603      	mov	r3, r0
 8015524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801552a:	2b00      	cmp	r3, #0
 801552c:	db0b      	blt.n	8015546 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801552e:	79fb      	ldrb	r3, [r7, #7]
 8015530:	f003 021f 	and.w	r2, r3, #31
 8015534:	4907      	ldr	r1, [pc, #28]	; (8015554 <__NVIC_EnableIRQ+0x38>)
 8015536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801553a:	095b      	lsrs	r3, r3, #5
 801553c:	2001      	movs	r0, #1
 801553e:	fa00 f202 	lsl.w	r2, r0, r2
 8015542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015546:	bf00      	nop
 8015548:	370c      	adds	r7, #12
 801554a:	46bd      	mov	sp, r7
 801554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop
 8015554:	e000e100 	.word	0xe000e100

08015558 <__NVIC_SetPriority>:
{
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	4603      	mov	r3, r0
 8015560:	6039      	str	r1, [r7, #0]
 8015562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015568:	2b00      	cmp	r3, #0
 801556a:	db0a      	blt.n	8015582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	b2da      	uxtb	r2, r3
 8015570:	490c      	ldr	r1, [pc, #48]	; (80155a4 <__NVIC_SetPriority+0x4c>)
 8015572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015576:	0112      	lsls	r2, r2, #4
 8015578:	b2d2      	uxtb	r2, r2
 801557a:	440b      	add	r3, r1
 801557c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015580:	e00a      	b.n	8015598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	b2da      	uxtb	r2, r3
 8015586:	4908      	ldr	r1, [pc, #32]	; (80155a8 <__NVIC_SetPriority+0x50>)
 8015588:	79fb      	ldrb	r3, [r7, #7]
 801558a:	f003 030f 	and.w	r3, r3, #15
 801558e:	3b04      	subs	r3, #4
 8015590:	0112      	lsls	r2, r2, #4
 8015592:	b2d2      	uxtb	r2, r2
 8015594:	440b      	add	r3, r1
 8015596:	761a      	strb	r2, [r3, #24]
}
 8015598:	bf00      	nop
 801559a:	370c      	adds	r7, #12
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	e000e100 	.word	0xe000e100
 80155a8:	e000ed00 	.word	0xe000ed00

080155ac <NVIC_EncodePriority>:
{
 80155ac:	b480      	push	{r7}
 80155ae:	b089      	sub	sp, #36	; 0x24
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	f003 0307 	and.w	r3, r3, #7
 80155be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80155c0:	69fb      	ldr	r3, [r7, #28]
 80155c2:	f1c3 0307 	rsb	r3, r3, #7
 80155c6:	2b04      	cmp	r3, #4
 80155c8:	bf28      	it	cs
 80155ca:	2304      	movcs	r3, #4
 80155cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80155ce:	69fb      	ldr	r3, [r7, #28]
 80155d0:	3304      	adds	r3, #4
 80155d2:	2b06      	cmp	r3, #6
 80155d4:	d902      	bls.n	80155dc <NVIC_EncodePriority+0x30>
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	3b03      	subs	r3, #3
 80155da:	e000      	b.n	80155de <NVIC_EncodePriority+0x32>
 80155dc:	2300      	movs	r3, #0
 80155de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80155e0:	f04f 32ff 	mov.w	r2, #4294967295
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	fa02 f303 	lsl.w	r3, r2, r3
 80155ea:	43da      	mvns	r2, r3
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	401a      	ands	r2, r3
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80155f4:	f04f 31ff 	mov.w	r1, #4294967295
 80155f8:	697b      	ldr	r3, [r7, #20]
 80155fa:	fa01 f303 	lsl.w	r3, r1, r3
 80155fe:	43d9      	mvns	r1, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015604:	4313      	orrs	r3, r2
}
 8015606:	4618      	mov	r0, r3
 8015608:	3724      	adds	r7, #36	; 0x24
 801560a:	46bd      	mov	sp, r7
 801560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015610:	4770      	bx	lr

08015612 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b082      	sub	sp, #8
 8015616:	af00      	add	r7, sp, #0
 8015618:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7ff ff4c 	bl	80154b8 <__NVIC_SetPriorityGrouping>
}
 8015620:	bf00      	nop
 8015622:	3708      	adds	r7, #8
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b086      	sub	sp, #24
 801562c:	af00      	add	r7, sp, #0
 801562e:	4603      	mov	r3, r0
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015636:	f7ff ff63 	bl	8015500 <__NVIC_GetPriorityGrouping>
 801563a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	68b9      	ldr	r1, [r7, #8]
 8015640:	6978      	ldr	r0, [r7, #20]
 8015642:	f7ff ffb3 	bl	80155ac <NVIC_EncodePriority>
 8015646:	4602      	mov	r2, r0
 8015648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801564c:	4611      	mov	r1, r2
 801564e:	4618      	mov	r0, r3
 8015650:	f7ff ff82 	bl	8015558 <__NVIC_SetPriority>
}
 8015654:	bf00      	nop
 8015656:	3718      	adds	r7, #24
 8015658:	46bd      	mov	sp, r7
 801565a:	bd80      	pop	{r7, pc}

0801565c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	4603      	mov	r3, r0
 8015664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801566a:	4618      	mov	r0, r3
 801566c:	f7ff ff56 	bl	801551c <__NVIC_EnableIRQ>
}
 8015670:	bf00      	nop
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}

08015678 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015678:	b480      	push	{r7}
 801567a:	b087      	sub	sp, #28
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015682:	2300      	movs	r3, #0
 8015684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015686:	e14c      	b.n	8015922 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	2101      	movs	r1, #1
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	fa01 f303 	lsl.w	r3, r1, r3
 8015694:	4013      	ands	r3, r2
 8015696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 813e 	beq.w	801591c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	f003 0303 	and.w	r3, r3, #3
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d005      	beq.n	80156b8 <HAL_GPIO_Init+0x40>
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	f003 0303 	and.w	r3, r3, #3
 80156b4:	2b02      	cmp	r3, #2
 80156b6:	d130      	bne.n	801571a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	005b      	lsls	r3, r3, #1
 80156c2:	2203      	movs	r2, #3
 80156c4:	fa02 f303 	lsl.w	r3, r2, r3
 80156c8:	43db      	mvns	r3, r3
 80156ca:	693a      	ldr	r2, [r7, #16]
 80156cc:	4013      	ands	r3, r2
 80156ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	68da      	ldr	r2, [r3, #12]
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	fa02 f303 	lsl.w	r3, r2, r3
 80156dc:	693a      	ldr	r2, [r7, #16]
 80156de:	4313      	orrs	r3, r2
 80156e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	693a      	ldr	r2, [r7, #16]
 80156e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80156ee:	2201      	movs	r2, #1
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	fa02 f303 	lsl.w	r3, r2, r3
 80156f6:	43db      	mvns	r3, r3
 80156f8:	693a      	ldr	r2, [r7, #16]
 80156fa:	4013      	ands	r3, r2
 80156fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	091b      	lsrs	r3, r3, #4
 8015704:	f003 0201 	and.w	r2, r3, #1
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	fa02 f303 	lsl.w	r3, r2, r3
 801570e:	693a      	ldr	r2, [r7, #16]
 8015710:	4313      	orrs	r3, r2
 8015712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	693a      	ldr	r2, [r7, #16]
 8015718:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	f003 0303 	and.w	r3, r3, #3
 8015722:	2b03      	cmp	r3, #3
 8015724:	d017      	beq.n	8015756 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	68db      	ldr	r3, [r3, #12]
 801572a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	2203      	movs	r2, #3
 8015732:	fa02 f303 	lsl.w	r3, r2, r3
 8015736:	43db      	mvns	r3, r3
 8015738:	693a      	ldr	r2, [r7, #16]
 801573a:	4013      	ands	r3, r2
 801573c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	689a      	ldr	r2, [r3, #8]
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	fa02 f303 	lsl.w	r3, r2, r3
 801574a:	693a      	ldr	r2, [r7, #16]
 801574c:	4313      	orrs	r3, r2
 801574e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	693a      	ldr	r2, [r7, #16]
 8015754:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	f003 0303 	and.w	r3, r3, #3
 801575e:	2b02      	cmp	r3, #2
 8015760:	d123      	bne.n	80157aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	08da      	lsrs	r2, r3, #3
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	3208      	adds	r2, #8
 801576a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801576e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	f003 0307 	and.w	r3, r3, #7
 8015776:	009b      	lsls	r3, r3, #2
 8015778:	220f      	movs	r2, #15
 801577a:	fa02 f303 	lsl.w	r3, r2, r3
 801577e:	43db      	mvns	r3, r3
 8015780:	693a      	ldr	r2, [r7, #16]
 8015782:	4013      	ands	r3, r2
 8015784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	691a      	ldr	r2, [r3, #16]
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	f003 0307 	and.w	r3, r3, #7
 8015790:	009b      	lsls	r3, r3, #2
 8015792:	fa02 f303 	lsl.w	r3, r2, r3
 8015796:	693a      	ldr	r2, [r7, #16]
 8015798:	4313      	orrs	r3, r2
 801579a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	08da      	lsrs	r2, r3, #3
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	3208      	adds	r2, #8
 80157a4:	6939      	ldr	r1, [r7, #16]
 80157a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	005b      	lsls	r3, r3, #1
 80157b4:	2203      	movs	r2, #3
 80157b6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ba:	43db      	mvns	r3, r3
 80157bc:	693a      	ldr	r2, [r7, #16]
 80157be:	4013      	ands	r3, r2
 80157c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	685b      	ldr	r3, [r3, #4]
 80157c6:	f003 0203 	and.w	r2, r3, #3
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	fa02 f303 	lsl.w	r3, r2, r3
 80157d2:	693a      	ldr	r2, [r7, #16]
 80157d4:	4313      	orrs	r3, r2
 80157d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	693a      	ldr	r2, [r7, #16]
 80157dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f000 8098 	beq.w	801591c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80157ec:	4a54      	ldr	r2, [pc, #336]	; (8015940 <HAL_GPIO_Init+0x2c8>)
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	089b      	lsrs	r3, r3, #2
 80157f2:	3302      	adds	r3, #2
 80157f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80157f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	f003 0303 	and.w	r3, r3, #3
 8015800:	009b      	lsls	r3, r3, #2
 8015802:	220f      	movs	r2, #15
 8015804:	fa02 f303 	lsl.w	r3, r2, r3
 8015808:	43db      	mvns	r3, r3
 801580a:	693a      	ldr	r2, [r7, #16]
 801580c:	4013      	ands	r3, r2
 801580e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015816:	d019      	beq.n	801584c <HAL_GPIO_Init+0x1d4>
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	4a4a      	ldr	r2, [pc, #296]	; (8015944 <HAL_GPIO_Init+0x2cc>)
 801581c:	4293      	cmp	r3, r2
 801581e:	d013      	beq.n	8015848 <HAL_GPIO_Init+0x1d0>
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4a49      	ldr	r2, [pc, #292]	; (8015948 <HAL_GPIO_Init+0x2d0>)
 8015824:	4293      	cmp	r3, r2
 8015826:	d00d      	beq.n	8015844 <HAL_GPIO_Init+0x1cc>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	4a48      	ldr	r2, [pc, #288]	; (801594c <HAL_GPIO_Init+0x2d4>)
 801582c:	4293      	cmp	r3, r2
 801582e:	d007      	beq.n	8015840 <HAL_GPIO_Init+0x1c8>
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	4a47      	ldr	r2, [pc, #284]	; (8015950 <HAL_GPIO_Init+0x2d8>)
 8015834:	4293      	cmp	r3, r2
 8015836:	d101      	bne.n	801583c <HAL_GPIO_Init+0x1c4>
 8015838:	2304      	movs	r3, #4
 801583a:	e008      	b.n	801584e <HAL_GPIO_Init+0x1d6>
 801583c:	2307      	movs	r3, #7
 801583e:	e006      	b.n	801584e <HAL_GPIO_Init+0x1d6>
 8015840:	2303      	movs	r3, #3
 8015842:	e004      	b.n	801584e <HAL_GPIO_Init+0x1d6>
 8015844:	2302      	movs	r3, #2
 8015846:	e002      	b.n	801584e <HAL_GPIO_Init+0x1d6>
 8015848:	2301      	movs	r3, #1
 801584a:	e000      	b.n	801584e <HAL_GPIO_Init+0x1d6>
 801584c:	2300      	movs	r3, #0
 801584e:	697a      	ldr	r2, [r7, #20]
 8015850:	f002 0203 	and.w	r2, r2, #3
 8015854:	0092      	lsls	r2, r2, #2
 8015856:	4093      	lsls	r3, r2
 8015858:	693a      	ldr	r2, [r7, #16]
 801585a:	4313      	orrs	r3, r2
 801585c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801585e:	4938      	ldr	r1, [pc, #224]	; (8015940 <HAL_GPIO_Init+0x2c8>)
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	089b      	lsrs	r3, r3, #2
 8015864:	3302      	adds	r3, #2
 8015866:	693a      	ldr	r2, [r7, #16]
 8015868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801586c:	4b39      	ldr	r3, [pc, #228]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	43db      	mvns	r3, r3
 8015876:	693a      	ldr	r2, [r7, #16]
 8015878:	4013      	ands	r3, r2
 801587a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015884:	2b00      	cmp	r3, #0
 8015886:	d003      	beq.n	8015890 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015888:	693a      	ldr	r2, [r7, #16]
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	4313      	orrs	r3, r2
 801588e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015890:	4a30      	ldr	r2, [pc, #192]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015896:	4b2f      	ldr	r3, [pc, #188]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	43db      	mvns	r3, r3
 80158a0:	693a      	ldr	r2, [r7, #16]
 80158a2:	4013      	ands	r3, r2
 80158a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80158a6:	683b      	ldr	r3, [r7, #0]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d003      	beq.n	80158ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80158b2:	693a      	ldr	r2, [r7, #16]
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	4313      	orrs	r3, r2
 80158b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80158ba:	4a26      	ldr	r2, [pc, #152]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 80158bc:	693b      	ldr	r3, [r7, #16]
 80158be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80158c0:	4b24      	ldr	r3, [pc, #144]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 80158c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	43db      	mvns	r3, r3
 80158cc:	693a      	ldr	r2, [r7, #16]
 80158ce:	4013      	ands	r3, r2
 80158d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d003      	beq.n	80158e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80158de:	693a      	ldr	r2, [r7, #16]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	4313      	orrs	r3, r2
 80158e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80158e6:	4a1b      	ldr	r2, [pc, #108]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80158ee:	4b19      	ldr	r3, [pc, #100]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 80158f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80158f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	43db      	mvns	r3, r3
 80158fa:	693a      	ldr	r2, [r7, #16]
 80158fc:	4013      	ands	r3, r2
 80158fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015908:	2b00      	cmp	r3, #0
 801590a:	d003      	beq.n	8015914 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801590c:	693a      	ldr	r2, [r7, #16]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	4313      	orrs	r3, r2
 8015912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015914:	4a0f      	ldr	r2, [pc, #60]	; (8015954 <HAL_GPIO_Init+0x2dc>)
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	3301      	adds	r3, #1
 8015920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	681a      	ldr	r2, [r3, #0]
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	fa22 f303 	lsr.w	r3, r2, r3
 801592c:	2b00      	cmp	r3, #0
 801592e:	f47f aeab 	bne.w	8015688 <HAL_GPIO_Init+0x10>
  }
}
 8015932:	bf00      	nop
 8015934:	bf00      	nop
 8015936:	371c      	adds	r7, #28
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr
 8015940:	40010000 	.word	0x40010000
 8015944:	48000400 	.word	0x48000400
 8015948:	48000800 	.word	0x48000800
 801594c:	48000c00 	.word	0x48000c00
 8015950:	48001000 	.word	0x48001000
 8015954:	58000800 	.word	0x58000800

08015958 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8015958:	b480      	push	{r7}
 801595a:	b087      	sub	sp, #28
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015962:	2300      	movs	r3, #0
 8015964:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8015966:	e0bb      	b.n	8015ae0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8015968:	2201      	movs	r2, #1
 801596a:	697b      	ldr	r3, [r7, #20]
 801596c:	fa02 f303 	lsl.w	r3, r2, r3
 8015970:	683a      	ldr	r2, [r7, #0]
 8015972:	4013      	ands	r3, r2
 8015974:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	f000 80ae 	beq.w	8015ada <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 801597e:	4a5f      	ldr	r2, [pc, #380]	; (8015afc <HAL_GPIO_DeInit+0x1a4>)
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	089b      	lsrs	r3, r3, #2
 8015984:	3302      	adds	r3, #2
 8015986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801598a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	f003 0303 	and.w	r3, r3, #3
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	220f      	movs	r2, #15
 8015996:	fa02 f303 	lsl.w	r3, r2, r3
 801599a:	68fa      	ldr	r2, [r7, #12]
 801599c:	4013      	ands	r3, r2
 801599e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80159a6:	d019      	beq.n	80159dc <HAL_GPIO_DeInit+0x84>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	4a55      	ldr	r2, [pc, #340]	; (8015b00 <HAL_GPIO_DeInit+0x1a8>)
 80159ac:	4293      	cmp	r3, r2
 80159ae:	d013      	beq.n	80159d8 <HAL_GPIO_DeInit+0x80>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	4a54      	ldr	r2, [pc, #336]	; (8015b04 <HAL_GPIO_DeInit+0x1ac>)
 80159b4:	4293      	cmp	r3, r2
 80159b6:	d00d      	beq.n	80159d4 <HAL_GPIO_DeInit+0x7c>
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	4a53      	ldr	r2, [pc, #332]	; (8015b08 <HAL_GPIO_DeInit+0x1b0>)
 80159bc:	4293      	cmp	r3, r2
 80159be:	d007      	beq.n	80159d0 <HAL_GPIO_DeInit+0x78>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	4a52      	ldr	r2, [pc, #328]	; (8015b0c <HAL_GPIO_DeInit+0x1b4>)
 80159c4:	4293      	cmp	r3, r2
 80159c6:	d101      	bne.n	80159cc <HAL_GPIO_DeInit+0x74>
 80159c8:	2304      	movs	r3, #4
 80159ca:	e008      	b.n	80159de <HAL_GPIO_DeInit+0x86>
 80159cc:	2307      	movs	r3, #7
 80159ce:	e006      	b.n	80159de <HAL_GPIO_DeInit+0x86>
 80159d0:	2303      	movs	r3, #3
 80159d2:	e004      	b.n	80159de <HAL_GPIO_DeInit+0x86>
 80159d4:	2302      	movs	r3, #2
 80159d6:	e002      	b.n	80159de <HAL_GPIO_DeInit+0x86>
 80159d8:	2301      	movs	r3, #1
 80159da:	e000      	b.n	80159de <HAL_GPIO_DeInit+0x86>
 80159dc:	2300      	movs	r3, #0
 80159de:	697a      	ldr	r2, [r7, #20]
 80159e0:	f002 0203 	and.w	r2, r2, #3
 80159e4:	0092      	lsls	r2, r2, #2
 80159e6:	4093      	lsls	r3, r2
 80159e8:	68fa      	ldr	r2, [r7, #12]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d136      	bne.n	8015a5c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80159ee:	4b48      	ldr	r3, [pc, #288]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 80159f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	43db      	mvns	r3, r3
 80159f8:	4945      	ldr	r1, [pc, #276]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 80159fa:	4013      	ands	r3, r2
 80159fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015a00:	4b43      	ldr	r3, [pc, #268]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	43db      	mvns	r3, r3
 8015a0a:	4941      	ldr	r1, [pc, #260]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015a12:	4b3f      	ldr	r3, [pc, #252]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a14:	681a      	ldr	r2, [r3, #0]
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	43db      	mvns	r3, r3
 8015a1a:	493d      	ldr	r1, [pc, #244]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a1c:	4013      	ands	r3, r2
 8015a1e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8015a20:	4b3b      	ldr	r3, [pc, #236]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a22:	685a      	ldr	r2, [r3, #4]
 8015a24:	693b      	ldr	r3, [r7, #16]
 8015a26:	43db      	mvns	r3, r3
 8015a28:	4939      	ldr	r1, [pc, #228]	; (8015b10 <HAL_GPIO_DeInit+0x1b8>)
 8015a2a:	4013      	ands	r3, r2
 8015a2c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	f003 0303 	and.w	r3, r3, #3
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	220f      	movs	r2, #15
 8015a38:	fa02 f303 	lsl.w	r3, r2, r3
 8015a3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8015a3e:	4a2f      	ldr	r2, [pc, #188]	; (8015afc <HAL_GPIO_DeInit+0x1a4>)
 8015a40:	697b      	ldr	r3, [r7, #20]
 8015a42:	089b      	lsrs	r3, r3, #2
 8015a44:	3302      	adds	r3, #2
 8015a46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	43da      	mvns	r2, r3
 8015a4e:	482b      	ldr	r0, [pc, #172]	; (8015afc <HAL_GPIO_DeInit+0x1a4>)
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	089b      	lsrs	r3, r3, #2
 8015a54:	400a      	ands	r2, r1
 8015a56:	3302      	adds	r3, #2
 8015a58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	2103      	movs	r1, #3
 8015a66:	fa01 f303 	lsl.w	r3, r1, r3
 8015a6a:	431a      	orrs	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	08da      	lsrs	r2, r3, #3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3208      	adds	r2, #8
 8015a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	f003 0307 	and.w	r3, r3, #7
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	220f      	movs	r2, #15
 8015a86:	fa02 f303 	lsl.w	r3, r2, r3
 8015a8a:	43db      	mvns	r3, r3
 8015a8c:	697a      	ldr	r2, [r7, #20]
 8015a8e:	08d2      	lsrs	r2, r2, #3
 8015a90:	4019      	ands	r1, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	3208      	adds	r2, #8
 8015a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	68da      	ldr	r2, [r3, #12]
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	005b      	lsls	r3, r3, #1
 8015aa2:	2103      	movs	r1, #3
 8015aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8015aa8:	43db      	mvns	r3, r3
 8015aaa:	401a      	ands	r2, r3
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	685a      	ldr	r2, [r3, #4]
 8015ab4:	2101      	movs	r1, #1
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8015abc:	43db      	mvns	r3, r3
 8015abe:	401a      	ands	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	689a      	ldr	r2, [r3, #8]
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	2103      	movs	r1, #3
 8015ace:	fa01 f303 	lsl.w	r3, r1, r3
 8015ad2:	43db      	mvns	r3, r3
 8015ad4:	401a      	ands	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	3301      	adds	r3, #1
 8015ade:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015ae0:	683a      	ldr	r2, [r7, #0]
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f47f af3d 	bne.w	8015968 <HAL_GPIO_DeInit+0x10>
  }
}
 8015aee:	bf00      	nop
 8015af0:	bf00      	nop
 8015af2:	371c      	adds	r7, #28
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr
 8015afc:	40010000 	.word	0x40010000
 8015b00:	48000400 	.word	0x48000400
 8015b04:	48000800 	.word	0x48000800
 8015b08:	48000c00 	.word	0x48000c00
 8015b0c:	48001000 	.word	0x48001000
 8015b10:	58000800 	.word	0x58000800

08015b14 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015b14:	b480      	push	{r7}
 8015b16:	b085      	sub	sp, #20
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
 8015b1c:	460b      	mov	r3, r1
 8015b1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	691a      	ldr	r2, [r3, #16]
 8015b24:	887b      	ldrh	r3, [r7, #2]
 8015b26:	4013      	ands	r3, r2
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d002      	beq.n	8015b32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	73fb      	strb	r3, [r7, #15]
 8015b30:	e001      	b.n	8015b36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015b32:	2300      	movs	r3, #0
 8015b34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8015b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3714      	adds	r7, #20
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b42:	4770      	bx	lr

08015b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015b44:	b480      	push	{r7}
 8015b46:	b083      	sub	sp, #12
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	807b      	strh	r3, [r7, #2]
 8015b50:	4613      	mov	r3, r2
 8015b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015b54:	787b      	ldrb	r3, [r7, #1]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d003      	beq.n	8015b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8015b5a:	887a      	ldrh	r2, [r7, #2]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8015b60:	e002      	b.n	8015b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8015b62:	887a      	ldrh	r2, [r7, #2]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015b68:	bf00      	nop
 8015b6a:	370c      	adds	r7, #12
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b72:	4770      	bx	lr

08015b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d101      	bne.n	8015b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015b82:	2301      	movs	r3, #1
 8015b84:	e081      	b.n	8015c8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d106      	bne.n	8015ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	2200      	movs	r2, #0
 8015b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f000 f8a8 	bl	8015cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2224      	movs	r2, #36	; 0x24
 8015ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	681a      	ldr	r2, [r3, #0]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f022 0201 	bic.w	r2, r2, #1
 8015bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	685a      	ldr	r2, [r3, #4]
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015bc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	689a      	ldr	r2, [r3, #8]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015bd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d107      	bne.n	8015bee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	689a      	ldr	r2, [r3, #8]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015bea:	609a      	str	r2, [r3, #8]
 8015bec:	e006      	b.n	8015bfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	689a      	ldr	r2, [r3, #8]
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015bfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	68db      	ldr	r3, [r3, #12]
 8015c00:	2b02      	cmp	r3, #2
 8015c02:	d104      	bne.n	8015c0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	6812      	ldr	r2, [r2, #0]
 8015c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	68da      	ldr	r2, [r3, #12]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	691a      	ldr	r2, [r3, #16]
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	695b      	ldr	r3, [r3, #20]
 8015c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	699b      	ldr	r3, [r3, #24]
 8015c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	430a      	orrs	r2, r1
 8015c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	69d9      	ldr	r1, [r3, #28]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6a1a      	ldr	r2, [r3, #32]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	430a      	orrs	r2, r1
 8015c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	f042 0201 	orr.w	r2, r2, #1
 8015c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	2220      	movs	r2, #32
 8015c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015c88:	2300      	movs	r3, #0
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b082      	sub	sp, #8
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d101      	bne.n	8015ca4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e021      	b.n	8015ce8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2224      	movs	r2, #36	; 0x24
 8015ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	f022 0201 	bic.w	r2, r2, #1
 8015cba:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f000 f821 	bl	8015d04 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015cf8:	bf00      	nop
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015d04:	b480      	push	{r7}
 8015d06:	b083      	sub	sp, #12
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015d0c:	bf00      	nop
 8015d0e:	370c      	adds	r7, #12
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr

08015d18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b088      	sub	sp, #32
 8015d1c:	af02      	add	r7, sp, #8
 8015d1e:	60f8      	str	r0, [r7, #12]
 8015d20:	607a      	str	r2, [r7, #4]
 8015d22:	461a      	mov	r2, r3
 8015d24:	460b      	mov	r3, r1
 8015d26:	817b      	strh	r3, [r7, #10]
 8015d28:	4613      	mov	r3, r2
 8015d2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	2b20      	cmp	r3, #32
 8015d36:	f040 80da 	bne.w	8015eee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d101      	bne.n	8015d48 <HAL_I2C_Master_Transmit+0x30>
 8015d44:	2302      	movs	r3, #2
 8015d46:	e0d3      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015d50:	f7ff fb76 	bl	8015440 <HAL_GetTick>
 8015d54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	9300      	str	r3, [sp, #0]
 8015d5a:	2319      	movs	r3, #25
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	f000 fa00 	bl	8016168 <I2C_WaitOnFlagUntilTimeout>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d001      	beq.n	8015d72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015d6e:	2301      	movs	r3, #1
 8015d70:	e0be      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2221      	movs	r2, #33	; 0x21
 8015d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2210      	movs	r2, #16
 8015d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	2200      	movs	r2, #0
 8015d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	893a      	ldrh	r2, [r7, #8]
 8015d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2200      	movs	r2, #0
 8015d98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d9e:	b29b      	uxth	r3, r3
 8015da0:	2bff      	cmp	r3, #255	; 0xff
 8015da2:	d90e      	bls.n	8015dc2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	22ff      	movs	r2, #255	; 0xff
 8015da8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dae:	b2da      	uxtb	r2, r3
 8015db0:	8979      	ldrh	r1, [r7, #10]
 8015db2:	4b51      	ldr	r3, [pc, #324]	; (8015ef8 <HAL_I2C_Master_Transmit+0x1e0>)
 8015db4:	9300      	str	r3, [sp, #0]
 8015db6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f000 fbf6 	bl	80165ac <I2C_TransferConfig>
 8015dc0:	e06c      	b.n	8015e9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dc6:	b29a      	uxth	r2, r3
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dd0:	b2da      	uxtb	r2, r3
 8015dd2:	8979      	ldrh	r1, [r7, #10]
 8015dd4:	4b48      	ldr	r3, [pc, #288]	; (8015ef8 <HAL_I2C_Master_Transmit+0x1e0>)
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f000 fbe5 	bl	80165ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015de2:	e05b      	b.n	8015e9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015de4:	697a      	ldr	r2, [r7, #20]
 8015de6:	6a39      	ldr	r1, [r7, #32]
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f000 f9fd 	bl	80161e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d001      	beq.n	8015df8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015df4:	2301      	movs	r3, #1
 8015df6:	e07b      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfc:	781a      	ldrb	r2, [r3, #0]
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e08:	1c5a      	adds	r2, r3, #1
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	3b01      	subs	r3, #1
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e20:	3b01      	subs	r3, #1
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d034      	beq.n	8015e9c <HAL_I2C_Master_Transmit+0x184>
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d130      	bne.n	8015e9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	6a3b      	ldr	r3, [r7, #32]
 8015e40:	2200      	movs	r2, #0
 8015e42:	2180      	movs	r1, #128	; 0x80
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	f000 f98f 	bl	8016168 <I2C_WaitOnFlagUntilTimeout>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015e50:	2301      	movs	r3, #1
 8015e52:	e04d      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	2bff      	cmp	r3, #255	; 0xff
 8015e5c:	d90e      	bls.n	8015e7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	22ff      	movs	r2, #255	; 0xff
 8015e62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	8979      	ldrh	r1, [r7, #10]
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e74:	68f8      	ldr	r0, [r7, #12]
 8015e76:	f000 fb99 	bl	80165ac <I2C_TransferConfig>
 8015e7a:	e00f      	b.n	8015e9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e80:	b29a      	uxth	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	8979      	ldrh	r1, [r7, #10]
 8015e8e:	2300      	movs	r3, #0
 8015e90:	9300      	str	r3, [sp, #0]
 8015e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f000 fb88 	bl	80165ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ea0:	b29b      	uxth	r3, r3
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d19e      	bne.n	8015de4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015ea6:	697a      	ldr	r2, [r7, #20]
 8015ea8:	6a39      	ldr	r1, [r7, #32]
 8015eaa:	68f8      	ldr	r0, [r7, #12]
 8015eac:	f000 f9dc 	bl	8016268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d001      	beq.n	8015eba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015eb6:	2301      	movs	r3, #1
 8015eb8:	e01a      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	2220      	movs	r2, #32
 8015ec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	6859      	ldr	r1, [r3, #4]
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	4b0b      	ldr	r3, [pc, #44]	; (8015efc <HAL_I2C_Master_Transmit+0x1e4>)
 8015ece:	400b      	ands	r3, r1
 8015ed0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2220      	movs	r2, #32
 8015ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	2200      	movs	r2, #0
 8015ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015eea:	2300      	movs	r3, #0
 8015eec:	e000      	b.n	8015ef0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015eee:	2302      	movs	r3, #2
  }
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3718      	adds	r7, #24
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}
 8015ef8:	80002000 	.word	0x80002000
 8015efc:	fe00e800 	.word	0xfe00e800

08015f00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b088      	sub	sp, #32
 8015f04:	af02      	add	r7, sp, #8
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	607a      	str	r2, [r7, #4]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	817b      	strh	r3, [r7, #10]
 8015f10:	4613      	mov	r3, r2
 8015f12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	2b20      	cmp	r3, #32
 8015f1e:	f040 80db 	bne.w	80160d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d101      	bne.n	8015f30 <HAL_I2C_Master_Receive+0x30>
 8015f2c:	2302      	movs	r3, #2
 8015f2e:	e0d4      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2201      	movs	r2, #1
 8015f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015f38:	f7ff fa82 	bl	8015440 <HAL_GetTick>
 8015f3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015f3e:	697b      	ldr	r3, [r7, #20]
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	2319      	movs	r3, #25
 8015f44:	2201      	movs	r2, #1
 8015f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015f4a:	68f8      	ldr	r0, [r7, #12]
 8015f4c:	f000 f90c 	bl	8016168 <I2C_WaitOnFlagUntilTimeout>
 8015f50:	4603      	mov	r3, r0
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d001      	beq.n	8015f5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015f56:	2301      	movs	r3, #1
 8015f58:	e0bf      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2222      	movs	r2, #34	; 0x22
 8015f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	2210      	movs	r2, #16
 8015f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	687a      	ldr	r2, [r7, #4]
 8015f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	893a      	ldrh	r2, [r7, #8]
 8015f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	2bff      	cmp	r3, #255	; 0xff
 8015f8a:	d90e      	bls.n	8015faa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	22ff      	movs	r2, #255	; 0xff
 8015f90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f96:	b2da      	uxtb	r2, r3
 8015f98:	8979      	ldrh	r1, [r7, #10]
 8015f9a:	4b52      	ldr	r3, [pc, #328]	; (80160e4 <HAL_I2C_Master_Receive+0x1e4>)
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f000 fb02 	bl	80165ac <I2C_TransferConfig>
 8015fa8:	e06d      	b.n	8016086 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015fb8:	b2da      	uxtb	r2, r3
 8015fba:	8979      	ldrh	r1, [r7, #10]
 8015fbc:	4b49      	ldr	r3, [pc, #292]	; (80160e4 <HAL_I2C_Master_Receive+0x1e4>)
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015fc4:	68f8      	ldr	r0, [r7, #12]
 8015fc6:	f000 faf1 	bl	80165ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015fca:	e05c      	b.n	8016086 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015fcc:	697a      	ldr	r2, [r7, #20]
 8015fce:	6a39      	ldr	r1, [r7, #32]
 8015fd0:	68f8      	ldr	r0, [r7, #12]
 8015fd2:	f000 f985 	bl	80162e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d001      	beq.n	8015fe0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015fdc:	2301      	movs	r3, #1
 8015fde:	e07c      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fea:	b2d2      	uxtb	r2, r2
 8015fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff2:	1c5a      	adds	r2, r3, #1
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ffc:	3b01      	subs	r3, #1
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016008:	b29b      	uxth	r3, r3
 801600a:	3b01      	subs	r3, #1
 801600c:	b29a      	uxth	r2, r3
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016016:	b29b      	uxth	r3, r3
 8016018:	2b00      	cmp	r3, #0
 801601a:	d034      	beq.n	8016086 <HAL_I2C_Master_Receive+0x186>
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016020:	2b00      	cmp	r3, #0
 8016022:	d130      	bne.n	8016086 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	9300      	str	r3, [sp, #0]
 8016028:	6a3b      	ldr	r3, [r7, #32]
 801602a:	2200      	movs	r2, #0
 801602c:	2180      	movs	r1, #128	; 0x80
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f000 f89a 	bl	8016168 <I2C_WaitOnFlagUntilTimeout>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d001      	beq.n	801603e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801603a:	2301      	movs	r3, #1
 801603c:	e04d      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016042:	b29b      	uxth	r3, r3
 8016044:	2bff      	cmp	r3, #255	; 0xff
 8016046:	d90e      	bls.n	8016066 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	22ff      	movs	r2, #255	; 0xff
 801604c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016052:	b2da      	uxtb	r2, r3
 8016054:	8979      	ldrh	r1, [r7, #10]
 8016056:	2300      	movs	r3, #0
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f000 faa4 	bl	80165ac <I2C_TransferConfig>
 8016064:	e00f      	b.n	8016086 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801606a:	b29a      	uxth	r2, r3
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016074:	b2da      	uxtb	r2, r3
 8016076:	8979      	ldrh	r1, [r7, #10]
 8016078:	2300      	movs	r3, #0
 801607a:	9300      	str	r3, [sp, #0]
 801607c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f000 fa93 	bl	80165ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801608a:	b29b      	uxth	r3, r3
 801608c:	2b00      	cmp	r3, #0
 801608e:	d19d      	bne.n	8015fcc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016090:	697a      	ldr	r2, [r7, #20]
 8016092:	6a39      	ldr	r1, [r7, #32]
 8016094:	68f8      	ldr	r0, [r7, #12]
 8016096:	f000 f8e7 	bl	8016268 <I2C_WaitOnSTOPFlagUntilTimeout>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80160a0:	2301      	movs	r3, #1
 80160a2:	e01a      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2220      	movs	r2, #32
 80160aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	6859      	ldr	r1, [r3, #4]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	4b0c      	ldr	r3, [pc, #48]	; (80160e8 <HAL_I2C_Master_Receive+0x1e8>)
 80160b8:	400b      	ands	r3, r1
 80160ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	2220      	movs	r2, #32
 80160c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	2200      	movs	r2, #0
 80160c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	2200      	movs	r2, #0
 80160d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	e000      	b.n	80160da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80160d8:	2302      	movs	r3, #2
  }
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3718      	adds	r7, #24
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	80002400 	.word	0x80002400
 80160e8:	fe00e800 	.word	0xfe00e800

080160ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80160fa:	b2db      	uxtb	r3, r3
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8016114:	4618      	mov	r0, r3
 8016116:	370c      	adds	r7, #12
 8016118:	46bd      	mov	sp, r7
 801611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611e:	4770      	bx	lr

08016120 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016120:	b480      	push	{r7}
 8016122:	b083      	sub	sp, #12
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	699b      	ldr	r3, [r3, #24]
 801612e:	f003 0302 	and.w	r3, r3, #2
 8016132:	2b02      	cmp	r3, #2
 8016134:	d103      	bne.n	801613e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	2200      	movs	r2, #0
 801613c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	699b      	ldr	r3, [r3, #24]
 8016144:	f003 0301 	and.w	r3, r3, #1
 8016148:	2b01      	cmp	r3, #1
 801614a:	d007      	beq.n	801615c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	699a      	ldr	r2, [r3, #24]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	f042 0201 	orr.w	r2, r2, #1
 801615a:	619a      	str	r2, [r3, #24]
  }
}
 801615c:	bf00      	nop
 801615e:	370c      	adds	r7, #12
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	60f8      	str	r0, [r7, #12]
 8016170:	60b9      	str	r1, [r7, #8]
 8016172:	603b      	str	r3, [r7, #0]
 8016174:	4613      	mov	r3, r2
 8016176:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016178:	e022      	b.n	80161c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016180:	d01e      	beq.n	80161c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016182:	f7ff f95d 	bl	8015440 <HAL_GetTick>
 8016186:	4602      	mov	r2, r0
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	1ad3      	subs	r3, r2, r3
 801618c:	683a      	ldr	r2, [r7, #0]
 801618e:	429a      	cmp	r2, r3
 8016190:	d302      	bcc.n	8016198 <I2C_WaitOnFlagUntilTimeout+0x30>
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d113      	bne.n	80161c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801619c:	f043 0220 	orr.w	r2, r3, #32
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2220      	movs	r2, #32
 80161a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	2200      	movs	r2, #0
 80161b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2200      	movs	r2, #0
 80161b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80161bc:	2301      	movs	r3, #1
 80161be:	e00f      	b.n	80161e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	699a      	ldr	r2, [r3, #24]
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	4013      	ands	r3, r2
 80161ca:	68ba      	ldr	r2, [r7, #8]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	bf0c      	ite	eq
 80161d0:	2301      	moveq	r3, #1
 80161d2:	2300      	movne	r3, #0
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	461a      	mov	r2, r3
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d0cd      	beq.n	801617a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80161de:	2300      	movs	r3, #0
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3710      	adds	r7, #16
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b084      	sub	sp, #16
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80161f4:	e02c      	b.n	8016250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	68b9      	ldr	r1, [r7, #8]
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	f000 f8ea 	bl	80163d4 <I2C_IsErrorOccurred>
 8016200:	4603      	mov	r3, r0
 8016202:	2b00      	cmp	r3, #0
 8016204:	d001      	beq.n	801620a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016206:	2301      	movs	r3, #1
 8016208:	e02a      	b.n	8016260 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016210:	d01e      	beq.n	8016250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016212:	f7ff f915 	bl	8015440 <HAL_GetTick>
 8016216:	4602      	mov	r2, r0
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	1ad3      	subs	r3, r2, r3
 801621c:	68ba      	ldr	r2, [r7, #8]
 801621e:	429a      	cmp	r2, r3
 8016220:	d302      	bcc.n	8016228 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d113      	bne.n	8016250 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801622c:	f043 0220 	orr.w	r2, r3, #32
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2220      	movs	r2, #32
 8016238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	2200      	movs	r2, #0
 8016240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	2200      	movs	r2, #0
 8016248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801624c:	2301      	movs	r3, #1
 801624e:	e007      	b.n	8016260 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	699b      	ldr	r3, [r3, #24]
 8016256:	f003 0302 	and.w	r3, r3, #2
 801625a:	2b02      	cmp	r3, #2
 801625c:	d1cb      	bne.n	80161f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801625e:	2300      	movs	r3, #0
}
 8016260:	4618      	mov	r0, r3
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b084      	sub	sp, #16
 801626c:	af00      	add	r7, sp, #0
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016274:	e028      	b.n	80162c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	68b9      	ldr	r1, [r7, #8]
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f000 f8aa 	bl	80163d4 <I2C_IsErrorOccurred>
 8016280:	4603      	mov	r3, r0
 8016282:	2b00      	cmp	r3, #0
 8016284:	d001      	beq.n	801628a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016286:	2301      	movs	r3, #1
 8016288:	e026      	b.n	80162d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801628a:	f7ff f8d9 	bl	8015440 <HAL_GetTick>
 801628e:	4602      	mov	r2, r0
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	1ad3      	subs	r3, r2, r3
 8016294:	68ba      	ldr	r2, [r7, #8]
 8016296:	429a      	cmp	r2, r3
 8016298:	d302      	bcc.n	80162a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d113      	bne.n	80162c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162a4:	f043 0220 	orr.w	r2, r3, #32
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	2220      	movs	r2, #32
 80162b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2200      	movs	r2, #0
 80162b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2200      	movs	r2, #0
 80162c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80162c4:	2301      	movs	r3, #1
 80162c6:	e007      	b.n	80162d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	699b      	ldr	r3, [r3, #24]
 80162ce:	f003 0320 	and.w	r3, r3, #32
 80162d2:	2b20      	cmp	r3, #32
 80162d4:	d1cf      	bne.n	8016276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80162d6:	2300      	movs	r3, #0
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3710      	adds	r7, #16
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b084      	sub	sp, #16
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80162ec:	e064      	b.n	80163b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	68b9      	ldr	r1, [r7, #8]
 80162f2:	68f8      	ldr	r0, [r7, #12]
 80162f4:	f000 f86e 	bl	80163d4 <I2C_IsErrorOccurred>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d001      	beq.n	8016302 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80162fe:	2301      	movs	r3, #1
 8016300:	e062      	b.n	80163c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	699b      	ldr	r3, [r3, #24]
 8016308:	f003 0320 	and.w	r3, r3, #32
 801630c:	2b20      	cmp	r3, #32
 801630e:	d138      	bne.n	8016382 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	699b      	ldr	r3, [r3, #24]
 8016316:	f003 0304 	and.w	r3, r3, #4
 801631a:	2b04      	cmp	r3, #4
 801631c:	d105      	bne.n	801632a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016322:	2b00      	cmp	r3, #0
 8016324:	d001      	beq.n	801632a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016326:	2300      	movs	r3, #0
 8016328:	e04e      	b.n	80163c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	699b      	ldr	r3, [r3, #24]
 8016330:	f003 0310 	and.w	r3, r3, #16
 8016334:	2b10      	cmp	r3, #16
 8016336:	d107      	bne.n	8016348 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2210      	movs	r2, #16
 801633e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2204      	movs	r2, #4
 8016344:	645a      	str	r2, [r3, #68]	; 0x44
 8016346:	e002      	b.n	801634e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2200      	movs	r2, #0
 801634c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2220      	movs	r2, #32
 8016354:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	6859      	ldr	r1, [r3, #4]
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	681a      	ldr	r2, [r3, #0]
 8016360:	4b1b      	ldr	r3, [pc, #108]	; (80163d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8016362:	400b      	ands	r3, r1
 8016364:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	2220      	movs	r2, #32
 801636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	2200      	movs	r2, #0
 8016372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	2200      	movs	r2, #0
 801637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801637e:	2301      	movs	r3, #1
 8016380:	e022      	b.n	80163c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016382:	f7ff f85d 	bl	8015440 <HAL_GetTick>
 8016386:	4602      	mov	r2, r0
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	1ad3      	subs	r3, r2, r3
 801638c:	68ba      	ldr	r2, [r7, #8]
 801638e:	429a      	cmp	r2, r3
 8016390:	d302      	bcc.n	8016398 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d10f      	bne.n	80163b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801639c:	f043 0220 	orr.w	r2, r3, #32
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	2220      	movs	r2, #32
 80163a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	2200      	movs	r2, #0
 80163b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80163b4:	2301      	movs	r3, #1
 80163b6:	e007      	b.n	80163c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	699b      	ldr	r3, [r3, #24]
 80163be:	f003 0304 	and.w	r3, r3, #4
 80163c2:	2b04      	cmp	r3, #4
 80163c4:	d193      	bne.n	80162ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80163c6:	2300      	movs	r3, #0
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3710      	adds	r7, #16
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	fe00e800 	.word	0xfe00e800

080163d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b08a      	sub	sp, #40	; 0x28
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80163e0:	2300      	movs	r3, #0
 80163e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	699b      	ldr	r3, [r3, #24]
 80163ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80163ee:	2300      	movs	r3, #0
 80163f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	f003 0310 	and.w	r3, r3, #16
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d075      	beq.n	80164ec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	2210      	movs	r2, #16
 8016406:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016408:	e056      	b.n	80164b8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801640a:	68bb      	ldr	r3, [r7, #8]
 801640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016410:	d052      	beq.n	80164b8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016412:	f7ff f815 	bl	8015440 <HAL_GetTick>
 8016416:	4602      	mov	r2, r0
 8016418:	69fb      	ldr	r3, [r7, #28]
 801641a:	1ad3      	subs	r3, r2, r3
 801641c:	68ba      	ldr	r2, [r7, #8]
 801641e:	429a      	cmp	r2, r3
 8016420:	d302      	bcc.n	8016428 <I2C_IsErrorOccurred+0x54>
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d147      	bne.n	80164b8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016432:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801643a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	699b      	ldr	r3, [r3, #24]
 8016442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801644a:	d12e      	bne.n	80164aa <I2C_IsErrorOccurred+0xd6>
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016452:	d02a      	beq.n	80164aa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8016454:	7cfb      	ldrb	r3, [r7, #19]
 8016456:	2b20      	cmp	r3, #32
 8016458:	d027      	beq.n	80164aa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	685a      	ldr	r2, [r3, #4]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016468:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801646a:	f7fe ffe9 	bl	8015440 <HAL_GetTick>
 801646e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016470:	e01b      	b.n	80164aa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8016472:	f7fe ffe5 	bl	8015440 <HAL_GetTick>
 8016476:	4602      	mov	r2, r0
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	2b19      	cmp	r3, #25
 801647e:	d914      	bls.n	80164aa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016484:	f043 0220 	orr.w	r2, r3, #32
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2220      	movs	r2, #32
 8016490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2200      	movs	r2, #0
 8016498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2200      	movs	r2, #0
 80164a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80164a4:	2301      	movs	r3, #1
 80164a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	699b      	ldr	r3, [r3, #24]
 80164b0:	f003 0320 	and.w	r3, r3, #32
 80164b4:	2b20      	cmp	r3, #32
 80164b6:	d1dc      	bne.n	8016472 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	699b      	ldr	r3, [r3, #24]
 80164be:	f003 0320 	and.w	r3, r3, #32
 80164c2:	2b20      	cmp	r3, #32
 80164c4:	d003      	beq.n	80164ce <I2C_IsErrorOccurred+0xfa>
 80164c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d09d      	beq.n	801640a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80164ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d103      	bne.n	80164de <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	2220      	movs	r2, #32
 80164dc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80164de:	6a3b      	ldr	r3, [r7, #32]
 80164e0:	f043 0304 	orr.w	r3, r3, #4
 80164e4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80164e6:	2301      	movs	r3, #1
 80164e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	699b      	ldr	r3, [r3, #24]
 80164f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d00b      	beq.n	8016516 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80164fe:	6a3b      	ldr	r3, [r7, #32]
 8016500:	f043 0301 	orr.w	r3, r3, #1
 8016504:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801650e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016510:	2301      	movs	r3, #1
 8016512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00b      	beq.n	8016538 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016520:	6a3b      	ldr	r3, [r7, #32]
 8016522:	f043 0308 	orr.w	r3, r3, #8
 8016526:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016530:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016532:	2301      	movs	r3, #1
 8016534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016538:	69bb      	ldr	r3, [r7, #24]
 801653a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00b      	beq.n	801655a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016542:	6a3b      	ldr	r3, [r7, #32]
 8016544:	f043 0302 	orr.w	r3, r3, #2
 8016548:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016552:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016554:	2301      	movs	r3, #1
 8016556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801655a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801655e:	2b00      	cmp	r3, #0
 8016560:	d01c      	beq.n	801659c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f7ff fddc 	bl	8016120 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	6859      	ldr	r1, [r3, #4]
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681a      	ldr	r2, [r3, #0]
 8016572:	4b0d      	ldr	r3, [pc, #52]	; (80165a8 <I2C_IsErrorOccurred+0x1d4>)
 8016574:	400b      	ands	r3, r1
 8016576:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801657c:	6a3b      	ldr	r3, [r7, #32]
 801657e:	431a      	orrs	r2, r3
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2220      	movs	r2, #32
 8016588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2200      	movs	r2, #0
 8016590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2200      	movs	r2, #0
 8016598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801659c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3728      	adds	r7, #40	; 0x28
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	fe00e800 	.word	0xfe00e800

080165ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80165ac:	b480      	push	{r7}
 80165ae:	b087      	sub	sp, #28
 80165b0:	af00      	add	r7, sp, #0
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	607b      	str	r3, [r7, #4]
 80165b6:	460b      	mov	r3, r1
 80165b8:	817b      	strh	r3, [r7, #10]
 80165ba:	4613      	mov	r3, r2
 80165bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165be:	897b      	ldrh	r3, [r7, #10]
 80165c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80165c4:	7a7b      	ldrb	r3, [r7, #9]
 80165c6:	041b      	lsls	r3, r3, #16
 80165c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80165d2:	6a3b      	ldr	r3, [r7, #32]
 80165d4:	4313      	orrs	r3, r2
 80165d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80165da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	685a      	ldr	r2, [r3, #4]
 80165e2:	6a3b      	ldr	r3, [r7, #32]
 80165e4:	0d5b      	lsrs	r3, r3, #21
 80165e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80165ea:	4b08      	ldr	r3, [pc, #32]	; (801660c <I2C_TransferConfig+0x60>)
 80165ec:	430b      	orrs	r3, r1
 80165ee:	43db      	mvns	r3, r3
 80165f0:	ea02 0103 	and.w	r1, r2, r3
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	697a      	ldr	r2, [r7, #20]
 80165fa:	430a      	orrs	r2, r1
 80165fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80165fe:	bf00      	nop
 8016600:	371c      	adds	r7, #28
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop
 801660c:	03ff63ff 	.word	0x03ff63ff

08016610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016620:	b2db      	uxtb	r3, r3
 8016622:	2b20      	cmp	r3, #32
 8016624:	d138      	bne.n	8016698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801662c:	2b01      	cmp	r3, #1
 801662e:	d101      	bne.n	8016634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016630:	2302      	movs	r3, #2
 8016632:	e032      	b.n	801669a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2201      	movs	r2, #1
 8016638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2224      	movs	r2, #36	; 0x24
 8016640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	681a      	ldr	r2, [r3, #0]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f022 0201 	bic.w	r2, r2, #1
 8016652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	681a      	ldr	r2, [r3, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	6819      	ldr	r1, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	683a      	ldr	r2, [r7, #0]
 8016670:	430a      	orrs	r2, r1
 8016672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	681a      	ldr	r2, [r3, #0]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	f042 0201 	orr.w	r2, r2, #1
 8016682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2220      	movs	r2, #32
 8016688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2200      	movs	r2, #0
 8016690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016694:	2300      	movs	r3, #0
 8016696:	e000      	b.n	801669a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016698:	2302      	movs	r3, #2
  }
}
 801669a:	4618      	mov	r0, r3
 801669c:	370c      	adds	r7, #12
 801669e:	46bd      	mov	sp, r7
 80166a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a4:	4770      	bx	lr

080166a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80166a6:	b480      	push	{r7}
 80166a8:	b085      	sub	sp, #20
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
 80166ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80166b6:	b2db      	uxtb	r3, r3
 80166b8:	2b20      	cmp	r3, #32
 80166ba:	d139      	bne.n	8016730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80166c2:	2b01      	cmp	r3, #1
 80166c4:	d101      	bne.n	80166ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80166c6:	2302      	movs	r3, #2
 80166c8:	e033      	b.n	8016732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2201      	movs	r2, #1
 80166ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2224      	movs	r2, #36	; 0x24
 80166d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	f022 0201 	bic.w	r2, r2, #1
 80166e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80166f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	021b      	lsls	r3, r3, #8
 80166fe:	68fa      	ldr	r2, [r7, #12]
 8016700:	4313      	orrs	r3, r2
 8016702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	68fa      	ldr	r2, [r7, #12]
 801670a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f042 0201 	orr.w	r2, r2, #1
 801671a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2220      	movs	r2, #32
 8016720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801672c:	2300      	movs	r3, #0
 801672e:	e000      	b.n	8016732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016730:	2302      	movs	r3, #2
  }
}
 8016732:	4618      	mov	r0, r3
 8016734:	3714      	adds	r7, #20
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr

0801673e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801673e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016740:	b08b      	sub	sp, #44	; 0x2c
 8016742:	af06      	add	r7, sp, #24
 8016744:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d101      	bne.n	8016750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801674c:	2301      	movs	r3, #1
 801674e:	e0dd      	b.n	801690c <HAL_PCD_Init+0x1ce>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8016756:	b2db      	uxtb	r3, r3
 8016758:	2b00      	cmp	r3, #0
 801675a:	d106      	bne.n	801676a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f7ea fae3 	bl	8000d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2203      	movs	r2, #3
 801676e:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2200      	movs	r2, #0
 8016776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4618      	mov	r0, r3
 801677e:	f002 fed9 	bl	8019534 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016782:	2300      	movs	r3, #0
 8016784:	73fb      	strb	r3, [r7, #15]
 8016786:	e04d      	b.n	8016824 <HAL_PCD_Init+0xe6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016788:	7bfb      	ldrb	r3, [r7, #15]
 801678a:	6879      	ldr	r1, [r7, #4]
 801678c:	1c5a      	adds	r2, r3, #1
 801678e:	4613      	mov	r3, r2
 8016790:	009b      	lsls	r3, r3, #2
 8016792:	4413      	add	r3, r2
 8016794:	00db      	lsls	r3, r3, #3
 8016796:	440b      	add	r3, r1
 8016798:	3305      	adds	r3, #5
 801679a:	2201      	movs	r2, #1
 801679c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801679e:	7bfb      	ldrb	r3, [r7, #15]
 80167a0:	6879      	ldr	r1, [r7, #4]
 80167a2:	1c5a      	adds	r2, r3, #1
 80167a4:	4613      	mov	r3, r2
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	4413      	add	r3, r2
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	440b      	add	r3, r1
 80167ae:	3304      	adds	r3, #4
 80167b0:	7bfa      	ldrb	r2, [r7, #15]
 80167b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80167b4:	7bfa      	ldrb	r2, [r7, #15]
 80167b6:	7bfb      	ldrb	r3, [r7, #15]
 80167b8:	b298      	uxth	r0, r3
 80167ba:	6879      	ldr	r1, [r7, #4]
 80167bc:	4613      	mov	r3, r2
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	4413      	add	r3, r2
 80167c2:	00db      	lsls	r3, r3, #3
 80167c4:	440b      	add	r3, r1
 80167c6:	333a      	adds	r3, #58	; 0x3a
 80167c8:	4602      	mov	r2, r0
 80167ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80167cc:	7bfb      	ldrb	r3, [r7, #15]
 80167ce:	6879      	ldr	r1, [r7, #4]
 80167d0:	1c5a      	adds	r2, r3, #1
 80167d2:	4613      	mov	r3, r2
 80167d4:	009b      	lsls	r3, r3, #2
 80167d6:	4413      	add	r3, r2
 80167d8:	00db      	lsls	r3, r3, #3
 80167da:	440b      	add	r3, r1
 80167dc:	3307      	adds	r3, #7
 80167de:	2200      	movs	r2, #0
 80167e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80167e2:	7bfa      	ldrb	r2, [r7, #15]
 80167e4:	6879      	ldr	r1, [r7, #4]
 80167e6:	4613      	mov	r3, r2
 80167e8:	009b      	lsls	r3, r3, #2
 80167ea:	4413      	add	r3, r2
 80167ec:	00db      	lsls	r3, r3, #3
 80167ee:	440b      	add	r3, r1
 80167f0:	333c      	adds	r3, #60	; 0x3c
 80167f2:	2200      	movs	r2, #0
 80167f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80167f6:	7bfa      	ldrb	r2, [r7, #15]
 80167f8:	6879      	ldr	r1, [r7, #4]
 80167fa:	4613      	mov	r3, r2
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	4413      	add	r3, r2
 8016800:	00db      	lsls	r3, r3, #3
 8016802:	440b      	add	r3, r1
 8016804:	3340      	adds	r3, #64	; 0x40
 8016806:	2200      	movs	r2, #0
 8016808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801680a:	7bfa      	ldrb	r2, [r7, #15]
 801680c:	6879      	ldr	r1, [r7, #4]
 801680e:	4613      	mov	r3, r2
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	4413      	add	r3, r2
 8016814:	00db      	lsls	r3, r3, #3
 8016816:	440b      	add	r3, r1
 8016818:	3344      	adds	r3, #68	; 0x44
 801681a:	2200      	movs	r2, #0
 801681c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801681e:	7bfb      	ldrb	r3, [r7, #15]
 8016820:	3301      	adds	r3, #1
 8016822:	73fb      	strb	r3, [r7, #15]
 8016824:	7bfa      	ldrb	r2, [r7, #15]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	429a      	cmp	r2, r3
 801682c:	d3ac      	bcc.n	8016788 <HAL_PCD_Init+0x4a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801682e:	2300      	movs	r3, #0
 8016830:	73fb      	strb	r3, [r7, #15]
 8016832:	e044      	b.n	80168be <HAL_PCD_Init+0x180>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016834:	7bfa      	ldrb	r2, [r7, #15]
 8016836:	6879      	ldr	r1, [r7, #4]
 8016838:	4613      	mov	r3, r2
 801683a:	009b      	lsls	r3, r3, #2
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8016846:	2200      	movs	r2, #0
 8016848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801684a:	7bfa      	ldrb	r2, [r7, #15]
 801684c:	6879      	ldr	r1, [r7, #4]
 801684e:	4613      	mov	r3, r2
 8016850:	009b      	lsls	r3, r3, #2
 8016852:	4413      	add	r3, r2
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	440b      	add	r3, r1
 8016858:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801685c:	7bfa      	ldrb	r2, [r7, #15]
 801685e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016860:	7bfa      	ldrb	r2, [r7, #15]
 8016862:	6879      	ldr	r1, [r7, #4]
 8016864:	4613      	mov	r3, r2
 8016866:	009b      	lsls	r3, r3, #2
 8016868:	4413      	add	r3, r2
 801686a:	00db      	lsls	r3, r3, #3
 801686c:	440b      	add	r3, r1
 801686e:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8016872:	2200      	movs	r2, #0
 8016874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016876:	7bfa      	ldrb	r2, [r7, #15]
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	4613      	mov	r3, r2
 801687c:	009b      	lsls	r3, r3, #2
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016888:	2200      	movs	r2, #0
 801688a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801688c:	7bfa      	ldrb	r2, [r7, #15]
 801688e:	6879      	ldr	r1, [r7, #4]
 8016890:	4613      	mov	r3, r2
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	4413      	add	r3, r2
 8016896:	00db      	lsls	r3, r3, #3
 8016898:	440b      	add	r3, r1
 801689a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801689e:	2200      	movs	r2, #0
 80168a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80168a2:	7bfa      	ldrb	r2, [r7, #15]
 80168a4:	6879      	ldr	r1, [r7, #4]
 80168a6:	4613      	mov	r3, r2
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	4413      	add	r3, r2
 80168ac:	00db      	lsls	r3, r3, #3
 80168ae:	440b      	add	r3, r1
 80168b0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80168b4:	2200      	movs	r2, #0
 80168b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80168b8:	7bfb      	ldrb	r3, [r7, #15]
 80168ba:	3301      	adds	r3, #1
 80168bc:	73fb      	strb	r3, [r7, #15]
 80168be:	7bfa      	ldrb	r2, [r7, #15]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	685b      	ldr	r3, [r3, #4]
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d3b5      	bcc.n	8016834 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	603b      	str	r3, [r7, #0]
 80168ce:	687e      	ldr	r6, [r7, #4]
 80168d0:	466d      	mov	r5, sp
 80168d2:	f106 0410 	add.w	r4, r6, #16
 80168d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80168da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80168de:	e885 0003 	stmia.w	r5, {r0, r1}
 80168e2:	1d33      	adds	r3, r6, #4
 80168e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80168e6:	6838      	ldr	r0, [r7, #0]
 80168e8:	f002 fe3f 	bl	801956a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2200      	movs	r2, #0
 80168f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2201      	movs	r2, #1
 80168f8:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	69db      	ldr	r3, [r3, #28]
 8016900:	2b01      	cmp	r3, #1
 8016902:	d102      	bne.n	801690a <HAL_PCD_Init+0x1cc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f000 f805 	bl	8016914 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801690a:	2300      	movs	r3, #0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8016914:	b480      	push	{r7}
 8016916:	b085      	sub	sp, #20
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2201      	movs	r2, #1
 8016926:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8016938:	b29b      	uxth	r3, r3
 801693a:	f043 0301 	orr.w	r3, r3, #1
 801693e:	b29a      	uxth	r2, r3
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801694c:	b29b      	uxth	r3, r3
 801694e:	f043 0302 	orr.w	r3, r3, #2
 8016952:	b29a      	uxth	r2, r3
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801695a:	2300      	movs	r3, #0
}
 801695c:	4618      	mov	r0, r3
 801695e:	3714      	adds	r7, #20
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr

08016968 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8016968:	b480      	push	{r7}
 801696a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801696c:	4b05      	ldr	r3, [pc, #20]	; (8016984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4a04      	ldr	r2, [pc, #16]	; (8016984 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016976:	6013      	str	r3, [r2, #0]
}
 8016978:	bf00      	nop
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	58000400 	.word	0x58000400

08016988 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016988:	b480      	push	{r7}
 801698a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 801698c:	4b04      	ldr	r3, [pc, #16]	; (80169a0 <HAL_PWREx_GetVoltageRange+0x18>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016994:	4618      	mov	r0, r3
 8016996:	46bd      	mov	sp, r7
 8016998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop
 80169a0:	58000400 	.word	0x58000400

080169a4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80169a4:	b480      	push	{r7}
 80169a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80169a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80169b6:	d101      	bne.n	80169bc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80169b8:	2301      	movs	r3, #1
 80169ba:	e000      	b.n	80169be <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80169bc:	2300      	movs	r3, #0
}
 80169be:	4618      	mov	r0, r3
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <LL_RCC_HSE_Enable>:
{
 80169c8:	b480      	push	{r7}
 80169ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80169cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80169da:	6013      	str	r3, [r2, #0]
}
 80169dc:	bf00      	nop
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <LL_RCC_HSE_Disable>:
{
 80169e6:	b480      	push	{r7}
 80169e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80169ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80169f8:	6013      	str	r3, [r2, #0]
}
 80169fa:	bf00      	nop
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <LL_RCC_HSE_IsReady>:
{
 8016a04:	b480      	push	{r7}
 8016a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016a16:	d101      	bne.n	8016a1c <LL_RCC_HSE_IsReady+0x18>
 8016a18:	2301      	movs	r3, #1
 8016a1a:	e000      	b.n	8016a1e <LL_RCC_HSE_IsReady+0x1a>
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	46bd      	mov	sp, r7
 8016a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a26:	4770      	bx	lr

08016a28 <LL_RCC_HSI_Enable>:
{
 8016a28:	b480      	push	{r7}
 8016a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8016a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016a3a:	6013      	str	r3, [r2, #0]
}
 8016a3c:	bf00      	nop
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a44:	4770      	bx	lr

08016a46 <LL_RCC_HSI_Disable>:
{
 8016a46:	b480      	push	{r7}
 8016a48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8016a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a58:	6013      	str	r3, [r2, #0]
}
 8016a5a:	bf00      	nop
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr

08016a64 <LL_RCC_HSI_IsReady>:
{
 8016a64:	b480      	push	{r7}
 8016a66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8016a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a76:	d101      	bne.n	8016a7c <LL_RCC_HSI_IsReady+0x18>
 8016a78:	2301      	movs	r3, #1
 8016a7a:	e000      	b.n	8016a7e <LL_RCC_HSI_IsReady+0x1a>
 8016a7c:	2300      	movs	r3, #0
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a94:	685b      	ldr	r3, [r3, #4]
 8016a96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	061b      	lsls	r3, r3, #24
 8016a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016aa2:	4313      	orrs	r3, r2
 8016aa4:	604b      	str	r3, [r1, #4]
}
 8016aa6:	bf00      	nop
 8016aa8:	370c      	adds	r7, #12
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab0:	4770      	bx	lr

08016ab2 <LL_RCC_HSI48_Enable>:
{
 8016ab2:	b480      	push	{r7}
 8016ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ac2:	f043 0301 	orr.w	r3, r3, #1
 8016ac6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016aca:	bf00      	nop
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr

08016ad4 <LL_RCC_HSI48_Disable>:
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016ae4:	f023 0301 	bic.w	r3, r3, #1
 8016ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8016aec:	bf00      	nop
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr

08016af6 <LL_RCC_HSI48_IsReady>:
{
 8016af6:	b480      	push	{r7}
 8016af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8016afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016b02:	f003 0302 	and.w	r3, r3, #2
 8016b06:	2b02      	cmp	r3, #2
 8016b08:	d101      	bne.n	8016b0e <LL_RCC_HSI48_IsReady+0x18>
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	e000      	b.n	8016b10 <LL_RCC_HSI48_IsReady+0x1a>
 8016b0e:	2300      	movs	r3, #0
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	46bd      	mov	sp, r7
 8016b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b18:	4770      	bx	lr

08016b1a <LL_RCC_LSE_Enable>:
{
 8016b1a:	b480      	push	{r7}
 8016b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b2a:	f043 0301 	orr.w	r3, r3, #1
 8016b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b32:	bf00      	nop
 8016b34:	46bd      	mov	sp, r7
 8016b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3a:	4770      	bx	lr

08016b3c <LL_RCC_LSE_Disable>:
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b4c:	f023 0301 	bic.w	r3, r3, #1
 8016b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b54:	bf00      	nop
 8016b56:	46bd      	mov	sp, r7
 8016b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5c:	4770      	bx	lr

08016b5e <LL_RCC_LSE_EnableBypass>:
{
 8016b5e:	b480      	push	{r7}
 8016b60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b6e:	f043 0304 	orr.w	r3, r3, #4
 8016b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b76:	bf00      	nop
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7e:	4770      	bx	lr

08016b80 <LL_RCC_LSE_DisableBypass>:
{
 8016b80:	b480      	push	{r7}
 8016b82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016b90:	f023 0304 	bic.w	r3, r3, #4
 8016b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016b98:	bf00      	nop
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016ba2:	b480      	push	{r7}
 8016ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bae:	f003 0302 	and.w	r3, r3, #2
 8016bb2:	2b02      	cmp	r3, #2
 8016bb4:	d101      	bne.n	8016bba <LL_RCC_LSE_IsReady+0x18>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	e000      	b.n	8016bbc <LL_RCC_LSE_IsReady+0x1a>
 8016bba:	2300      	movs	r3, #0
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016bc6:	b480      	push	{r7}
 8016bc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bd6:	f043 0301 	orr.w	r3, r3, #1
 8016bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016bde:	bf00      	nop
 8016be0:	46bd      	mov	sp, r7
 8016be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be6:	4770      	bx	lr

08016be8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016be8:	b480      	push	{r7}
 8016bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8016bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016bf8:	f023 0301 	bic.w	r3, r3, #1
 8016bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c00:	bf00      	nop
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr

08016c0a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8016c0a:	b480      	push	{r7}
 8016c0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8016c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c16:	f003 0302 	and.w	r3, r3, #2
 8016c1a:	2b02      	cmp	r3, #2
 8016c1c:	d101      	bne.n	8016c22 <LL_RCC_LSI1_IsReady+0x18>
 8016c1e:	2301      	movs	r3, #1
 8016c20:	e000      	b.n	8016c24 <LL_RCC_LSI1_IsReady+0x1a>
 8016c22:	2300      	movs	r3, #0
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr

08016c2e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8016c2e:	b480      	push	{r7}
 8016c30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c3e:	f043 0304 	orr.w	r3, r3, #4
 8016c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c46:	bf00      	nop
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr

08016c50 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8016c50:	b480      	push	{r7}
 8016c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8016c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016c60:	f023 0304 	bic.w	r3, r3, #4
 8016c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016c68:	bf00      	nop
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c70:	4770      	bx	lr

08016c72 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016c72:	b480      	push	{r7}
 8016c74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016c7e:	f003 0308 	and.w	r3, r3, #8
 8016c82:	2b08      	cmp	r3, #8
 8016c84:	d101      	bne.n	8016c8a <LL_RCC_LSI2_IsReady+0x18>
 8016c86:	2301      	movs	r3, #1
 8016c88:	e000      	b.n	8016c8c <LL_RCC_LSI2_IsReady+0x1a>
 8016c8a:	2300      	movs	r3, #0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c94:	4770      	bx	lr

08016c96 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016c96:	b480      	push	{r7}
 8016c98:	b083      	sub	sp, #12
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016ca6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	021b      	lsls	r3, r3, #8
 8016cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016cb2:	4313      	orrs	r3, r2
 8016cb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016cb8:	bf00      	nop
 8016cba:	370c      	adds	r7, #12
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc2:	4770      	bx	lr

08016cc4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cd2:	f043 0301 	orr.w	r3, r3, #1
 8016cd6:	6013      	str	r3, [r2, #0]
}
 8016cd8:	bf00      	nop
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr

08016ce2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016ce2:	b480      	push	{r7}
 8016ce4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cf0:	f023 0301 	bic.w	r3, r3, #1
 8016cf4:	6013      	str	r3, [r2, #0]
}
 8016cf6:	bf00      	nop
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016d00:	b480      	push	{r7}
 8016d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	f003 0302 	and.w	r3, r3, #2
 8016d0e:	2b02      	cmp	r3, #2
 8016d10:	d101      	bne.n	8016d16 <LL_RCC_MSI_IsReady+0x16>
 8016d12:	2301      	movs	r3, #1
 8016d14:	e000      	b.n	8016d18 <LL_RCC_MSI_IsReady+0x18>
 8016d16:	2300      	movs	r3, #0
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d20:	4770      	bx	lr

08016d22 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016d22:	b480      	push	{r7}
 8016d24:	b083      	sub	sp, #12
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	4313      	orrs	r3, r2
 8016d3c:	600b      	str	r3, [r1, #0]
}
 8016d3e:	bf00      	nop
 8016d40:	370c      	adds	r7, #12
 8016d42:	46bd      	mov	sp, r7
 8016d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d48:	4770      	bx	lr

08016d4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016d4a:	b480      	push	{r7}
 8016d4c:	b083      	sub	sp, #12
 8016d4e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d5a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2bb0      	cmp	r3, #176	; 0xb0
 8016d60:	d901      	bls.n	8016d66 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016d62:	23b0      	movs	r3, #176	; 0xb0
 8016d64:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016d66:	687b      	ldr	r3, [r7, #4]
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	370c      	adds	r7, #12
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d72:	4770      	bx	lr

08016d74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016d74:	b480      	push	{r7}
 8016d76:	b083      	sub	sp, #12
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d80:	685b      	ldr	r3, [r3, #4]
 8016d82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	021b      	lsls	r3, r3, #8
 8016d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016d8e:	4313      	orrs	r3, r2
 8016d90:	604b      	str	r3, [r1, #4]
}
 8016d92:	bf00      	nop
 8016d94:	370c      	adds	r7, #12
 8016d96:	46bd      	mov	sp, r7
 8016d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9c:	4770      	bx	lr

08016d9e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016d9e:	b480      	push	{r7}
 8016da0:	b083      	sub	sp, #12
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016daa:	689b      	ldr	r3, [r3, #8]
 8016dac:	f023 0203 	bic.w	r2, r3, #3
 8016db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	4313      	orrs	r3, r2
 8016db8:	608b      	str	r3, [r1, #8]
}
 8016dba:	bf00      	nop
 8016dbc:	370c      	adds	r7, #12
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc4:	4770      	bx	lr

08016dc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016dc6:	b480      	push	{r7}
 8016dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dce:	689b      	ldr	r3, [r3, #8]
 8016dd0:	f003 030c 	and.w	r3, r3, #12
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ddc:	4770      	bx	lr

08016dde <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016dde:	b480      	push	{r7}
 8016de0:	b083      	sub	sp, #12
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dea:	689b      	ldr	r3, [r3, #8]
 8016dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	4313      	orrs	r3, r2
 8016df8:	608b      	str	r3, [r1, #8]
}
 8016dfa:	bf00      	nop
 8016dfc:	370c      	adds	r7, #12
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e04:	4770      	bx	lr

08016e06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016e06:	b480      	push	{r7}
 8016e08:	b083      	sub	sp, #12
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	4313      	orrs	r3, r2
 8016e22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016e26:	bf00      	nop
 8016e28:	370c      	adds	r7, #12
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr

08016e32 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016e32:	b480      	push	{r7}
 8016e34:	b083      	sub	sp, #12
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016e42:	f023 020f 	bic.w	r2, r3, #15
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	091b      	lsrs	r3, r3, #4
 8016e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e4e:	4313      	orrs	r3, r2
 8016e50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016e54:	bf00      	nop
 8016e56:	370c      	adds	r7, #12
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5e:	4770      	bx	lr

08016e60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016e60:	b480      	push	{r7}
 8016e62:	b083      	sub	sp, #12
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e6c:	689b      	ldr	r3, [r3, #8]
 8016e6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	4313      	orrs	r3, r2
 8016e7a:	608b      	str	r3, [r1, #8]
}
 8016e7c:	bf00      	nop
 8016e7e:	370c      	adds	r7, #12
 8016e80:	46bd      	mov	sp, r7
 8016e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e86:	4770      	bx	lr

08016e88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016e88:	b480      	push	{r7}
 8016e8a:	b083      	sub	sp, #12
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e94:	689b      	ldr	r3, [r3, #8]
 8016e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	4313      	orrs	r3, r2
 8016ea2:	608b      	str	r3, [r1, #8]
}
 8016ea4:	bf00      	nop
 8016ea6:	370c      	adds	r7, #12
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eae:	4770      	bx	lr

08016eb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eb8:	689b      	ldr	r3, [r3, #8]
 8016eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec6:	4770      	bx	lr

08016ec8 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8016ec8:	b480      	push	{r7}
 8016eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8016ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	46bd      	mov	sp, r7
 8016edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee0:	4770      	bx	lr

08016ee2 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016ee2:	b480      	push	{r7}
 8016ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016eee:	011b      	lsls	r3, r3, #4
 8016ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr

08016efe <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016efe:	b480      	push	{r7}
 8016f00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f06:	689b      	ldr	r3, [r3, #8]
 8016f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr

08016f16 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016f16:	b480      	push	{r7}
 8016f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f1e:	689b      	ldr	r3, [r3, #8]
 8016f20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr

08016f2e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016f2e:	b480      	push	{r7}
 8016f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016f40:	6013      	str	r3, [r2, #0]
}
 8016f42:	bf00      	nop
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016f5e:	6013      	str	r3, [r2, #0]
}
 8016f60:	bf00      	nop
 8016f62:	46bd      	mov	sp, r7
 8016f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f68:	4770      	bx	lr

08016f6a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016f6a:	b480      	push	{r7}
 8016f6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016f7c:	d101      	bne.n	8016f82 <LL_RCC_PLL_IsReady+0x18>
 8016f7e:	2301      	movs	r3, #1
 8016f80:	e000      	b.n	8016f84 <LL_RCC_PLL_IsReady+0x1a>
 8016f82:	2300      	movs	r3, #0
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	46bd      	mov	sp, r7
 8016f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8c:	4770      	bx	lr

08016f8e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016f8e:	b480      	push	{r7}
 8016f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016f96:	68db      	ldr	r3, [r3, #12]
 8016f98:	0a1b      	lsrs	r3, r3, #8
 8016f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr

08016fa8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016fa8:	b480      	push	{r7}
 8016faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8016fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fc8:	68db      	ldr	r3, [r3, #12]
 8016fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr

08016fd8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8016fd8:	b480      	push	{r7}
 8016fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8016fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	f003 0303 	and.w	r3, r3, #3
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr

08016ff0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016ff0:	b480      	push	{r7}
 8016ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ff8:	689b      	ldr	r3, [r3, #8]
 8016ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017002:	d101      	bne.n	8017008 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8017004:	2301      	movs	r3, #1
 8017006:	e000      	b.n	801700a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8017008:	2300      	movs	r3, #0
}
 801700a:	4618      	mov	r0, r3
 801700c:	46bd      	mov	sp, r7
 801700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017012:	4770      	bx	lr

08017014 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8017014:	b480      	push	{r7}
 8017016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8017018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801701c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017028:	d101      	bne.n	801702e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	46bd      	mov	sp, r7
 8017034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017038:	4770      	bx	lr

0801703a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 801703a:	b480      	push	{r7}
 801703c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 801703e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017042:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8017046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801704a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801704e:	d101      	bne.n	8017054 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8017050:	2301      	movs	r3, #1
 8017052:	e000      	b.n	8017056 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8017054:	2300      	movs	r3, #0
}
 8017056:	4618      	mov	r0, r3
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8017060:	b480      	push	{r7}
 8017062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8017064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017068:	689b      	ldr	r3, [r3, #8]
 801706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801706e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017072:	d101      	bne.n	8017078 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8017074:	2301      	movs	r3, #1
 8017076:	e000      	b.n	801707a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8017078:	2300      	movs	r3, #0
}
 801707a:	4618      	mov	r0, r3
 801707c:	46bd      	mov	sp, r7
 801707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017082:	4770      	bx	lr

08017084 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8017084:	b480      	push	{r7}
 8017086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8017088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801708c:	689b      	ldr	r3, [r3, #8]
 801708e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017092:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8017096:	d101      	bne.n	801709c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8017098:	2301      	movs	r3, #1
 801709a:	e000      	b.n	801709e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 801709c:	2300      	movs	r3, #0
}
 801709e:	4618      	mov	r0, r3
 80170a0:	46bd      	mov	sp, r7
 80170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a6:	4770      	bx	lr

080170a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80170a8:	b590      	push	{r4, r7, lr}
 80170aa:	b08d      	sub	sp, #52	; 0x34
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d101      	bne.n	80170ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80170b6:	2301      	movs	r3, #1
 80170b8:	e363      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	f003 0320 	and.w	r3, r3, #32
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f000 808d 	beq.w	80171e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80170c8:	f7ff fe7d 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 80170cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80170ce:	f7ff ff83 	bl	8016fd8 <LL_RCC_PLL_GetMainSource>
 80170d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d005      	beq.n	80170e6 <HAL_RCC_OscConfig+0x3e>
 80170da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170dc:	2b0c      	cmp	r3, #12
 80170de:	d147      	bne.n	8017170 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80170e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d144      	bne.n	8017170 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	69db      	ldr	r3, [r3, #28]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d101      	bne.n	80170f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80170ee:	2301      	movs	r3, #1
 80170f0:	e347      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80170f6:	f7ff fe28 	bl	8016d4a <LL_RCC_MSI_GetRange>
 80170fa:	4603      	mov	r3, r0
 80170fc:	429c      	cmp	r4, r3
 80170fe:	d914      	bls.n	801712a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017104:	4618      	mov	r0, r3
 8017106:	f000 fd61 	bl	8017bcc <RCC_SetFlashLatencyFromMSIRange>
 801710a:	4603      	mov	r3, r0
 801710c:	2b00      	cmp	r3, #0
 801710e:	d001      	beq.n	8017114 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8017110:	2301      	movs	r3, #1
 8017112:	e336      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017118:	4618      	mov	r0, r3
 801711a:	f7ff fe02 	bl	8016d22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6a1b      	ldr	r3, [r3, #32]
 8017122:	4618      	mov	r0, r3
 8017124:	f7ff fe26 	bl	8016d74 <LL_RCC_MSI_SetCalibTrimming>
 8017128:	e013      	b.n	8017152 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801712e:	4618      	mov	r0, r3
 8017130:	f7ff fdf7 	bl	8016d22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6a1b      	ldr	r3, [r3, #32]
 8017138:	4618      	mov	r0, r3
 801713a:	f7ff fe1b 	bl	8016d74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017142:	4618      	mov	r0, r3
 8017144:	f000 fd42 	bl	8017bcc <RCC_SetFlashLatencyFromMSIRange>
 8017148:	4603      	mov	r3, r0
 801714a:	2b00      	cmp	r3, #0
 801714c:	d001      	beq.n	8017152 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 801714e:	2301      	movs	r3, #1
 8017150:	e317      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017152:	f000 fcc9 	bl	8017ae8 <HAL_RCC_GetHCLKFreq>
 8017156:	4603      	mov	r3, r0
 8017158:	4aa4      	ldr	r2, [pc, #656]	; (80173ec <HAL_RCC_OscConfig+0x344>)
 801715a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801715c:	4ba4      	ldr	r3, [pc, #656]	; (80173f0 <HAL_RCC_OscConfig+0x348>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	4618      	mov	r0, r3
 8017162:	f7e9 fe55 	bl	8000e10 <HAL_InitTick>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d039      	beq.n	80171e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 801716c:	2301      	movs	r3, #1
 801716e:	e308      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	69db      	ldr	r3, [r3, #28]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d01e      	beq.n	80171b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017178:	f7ff fda4 	bl	8016cc4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 801717c:	f7fe f960 	bl	8015440 <HAL_GetTick>
 8017180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8017182:	e008      	b.n	8017196 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017184:	f7fe f95c 	bl	8015440 <HAL_GetTick>
 8017188:	4602      	mov	r2, r0
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	1ad3      	subs	r3, r2, r3
 801718e:	2b02      	cmp	r3, #2
 8017190:	d901      	bls.n	8017196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8017192:	2303      	movs	r3, #3
 8017194:	e2f5      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8017196:	f7ff fdb3 	bl	8016d00 <LL_RCC_MSI_IsReady>
 801719a:	4603      	mov	r3, r0
 801719c:	2b00      	cmp	r3, #0
 801719e:	d0f1      	beq.n	8017184 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7ff fdbc 	bl	8016d22 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6a1b      	ldr	r3, [r3, #32]
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7ff fde0 	bl	8016d74 <LL_RCC_MSI_SetCalibTrimming>
 80171b4:	e015      	b.n	80171e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80171b6:	f7ff fd94 	bl	8016ce2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80171ba:	f7fe f941 	bl	8015440 <HAL_GetTick>
 80171be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80171c0:	e008      	b.n	80171d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80171c2:	f7fe f93d 	bl	8015440 <HAL_GetTick>
 80171c6:	4602      	mov	r2, r0
 80171c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ca:	1ad3      	subs	r3, r2, r3
 80171cc:	2b02      	cmp	r3, #2
 80171ce:	d901      	bls.n	80171d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80171d0:	2303      	movs	r3, #3
 80171d2:	e2d6      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80171d4:	f7ff fd94 	bl	8016d00 <LL_RCC_MSI_IsReady>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d1f1      	bne.n	80171c2 <HAL_RCC_OscConfig+0x11a>
 80171de:	e000      	b.n	80171e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80171e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	f003 0301 	and.w	r3, r3, #1
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d047      	beq.n	801727e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80171ee:	f7ff fdea 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 80171f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80171f4:	f7ff fef0 	bl	8016fd8 <LL_RCC_PLL_GetMainSource>
 80171f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80171fa:	6a3b      	ldr	r3, [r7, #32]
 80171fc:	2b08      	cmp	r3, #8
 80171fe:	d005      	beq.n	801720c <HAL_RCC_OscConfig+0x164>
 8017200:	6a3b      	ldr	r3, [r7, #32]
 8017202:	2b0c      	cmp	r3, #12
 8017204:	d108      	bne.n	8017218 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	2b03      	cmp	r3, #3
 801720a:	d105      	bne.n	8017218 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d134      	bne.n	801727e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8017214:	2301      	movs	r3, #1
 8017216:	e2b4      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017220:	d102      	bne.n	8017228 <HAL_RCC_OscConfig+0x180>
 8017222:	f7ff fbd1 	bl	80169c8 <LL_RCC_HSE_Enable>
 8017226:	e001      	b.n	801722c <HAL_RCC_OscConfig+0x184>
 8017228:	f7ff fbdd 	bl	80169e6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	685b      	ldr	r3, [r3, #4]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d012      	beq.n	801725a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017234:	f7fe f904 	bl	8015440 <HAL_GetTick>
 8017238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 801723a:	e008      	b.n	801724e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801723c:	f7fe f900 	bl	8015440 <HAL_GetTick>
 8017240:	4602      	mov	r2, r0
 8017242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017244:	1ad3      	subs	r3, r2, r3
 8017246:	2b64      	cmp	r3, #100	; 0x64
 8017248:	d901      	bls.n	801724e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801724a:	2303      	movs	r3, #3
 801724c:	e299      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 801724e:	f7ff fbd9 	bl	8016a04 <LL_RCC_HSE_IsReady>
 8017252:	4603      	mov	r3, r0
 8017254:	2b00      	cmp	r3, #0
 8017256:	d0f1      	beq.n	801723c <HAL_RCC_OscConfig+0x194>
 8017258:	e011      	b.n	801727e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801725a:	f7fe f8f1 	bl	8015440 <HAL_GetTick>
 801725e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8017260:	e008      	b.n	8017274 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017262:	f7fe f8ed 	bl	8015440 <HAL_GetTick>
 8017266:	4602      	mov	r2, r0
 8017268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	2b64      	cmp	r3, #100	; 0x64
 801726e:	d901      	bls.n	8017274 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8017270:	2303      	movs	r3, #3
 8017272:	e286      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8017274:	f7ff fbc6 	bl	8016a04 <LL_RCC_HSE_IsReady>
 8017278:	4603      	mov	r3, r0
 801727a:	2b00      	cmp	r3, #0
 801727c:	d1f1      	bne.n	8017262 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	f003 0302 	and.w	r3, r3, #2
 8017286:	2b00      	cmp	r3, #0
 8017288:	d04c      	beq.n	8017324 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801728a:	f7ff fd9c 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 801728e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017290:	f7ff fea2 	bl	8016fd8 <LL_RCC_PLL_GetMainSource>
 8017294:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017296:	69bb      	ldr	r3, [r7, #24]
 8017298:	2b04      	cmp	r3, #4
 801729a:	d005      	beq.n	80172a8 <HAL_RCC_OscConfig+0x200>
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	2b0c      	cmp	r3, #12
 80172a0:	d10e      	bne.n	80172c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	d10b      	bne.n	80172c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	68db      	ldr	r3, [r3, #12]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d101      	bne.n	80172b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80172b0:	2301      	movs	r3, #1
 80172b2:	e266      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	691b      	ldr	r3, [r3, #16]
 80172b8:	4618      	mov	r0, r3
 80172ba:	f7ff fbe5 	bl	8016a88 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80172be:	e031      	b.n	8017324 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d019      	beq.n	80172fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80172c8:	f7ff fbae 	bl	8016a28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80172cc:	f7fe f8b8 	bl	8015440 <HAL_GetTick>
 80172d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80172d2:	e008      	b.n	80172e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80172d4:	f7fe f8b4 	bl	8015440 <HAL_GetTick>
 80172d8:	4602      	mov	r2, r0
 80172da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172dc:	1ad3      	subs	r3, r2, r3
 80172de:	2b02      	cmp	r3, #2
 80172e0:	d901      	bls.n	80172e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80172e2:	2303      	movs	r3, #3
 80172e4:	e24d      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80172e6:	f7ff fbbd 	bl	8016a64 <LL_RCC_HSI_IsReady>
 80172ea:	4603      	mov	r3, r0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d0f1      	beq.n	80172d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	691b      	ldr	r3, [r3, #16]
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7ff fbc7 	bl	8016a88 <LL_RCC_HSI_SetCalibTrimming>
 80172fa:	e013      	b.n	8017324 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80172fc:	f7ff fba3 	bl	8016a46 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017300:	f7fe f89e 	bl	8015440 <HAL_GetTick>
 8017304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8017306:	e008      	b.n	801731a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017308:	f7fe f89a 	bl	8015440 <HAL_GetTick>
 801730c:	4602      	mov	r2, r0
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	2b02      	cmp	r3, #2
 8017314:	d901      	bls.n	801731a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8017316:	2303      	movs	r3, #3
 8017318:	e233      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 801731a:	f7ff fba3 	bl	8016a64 <LL_RCC_HSI_IsReady>
 801731e:	4603      	mov	r3, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	d1f1      	bne.n	8017308 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	f003 0308 	and.w	r3, r3, #8
 801732c:	2b00      	cmp	r3, #0
 801732e:	d106      	bne.n	801733e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8017338:	2b00      	cmp	r3, #0
 801733a:	f000 80a3 	beq.w	8017484 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	695b      	ldr	r3, [r3, #20]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d076      	beq.n	8017434 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	f003 0310 	and.w	r3, r3, #16
 801734e:	2b00      	cmp	r3, #0
 8017350:	d046      	beq.n	80173e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8017352:	f7ff fc5a 	bl	8016c0a <LL_RCC_LSI1_IsReady>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d113      	bne.n	8017384 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 801735c:	f7ff fc33 	bl	8016bc6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017360:	f7fe f86e 	bl	8015440 <HAL_GetTick>
 8017364:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8017366:	e008      	b.n	801737a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017368:	f7fe f86a 	bl	8015440 <HAL_GetTick>
 801736c:	4602      	mov	r2, r0
 801736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017370:	1ad3      	subs	r3, r2, r3
 8017372:	2b02      	cmp	r3, #2
 8017374:	d901      	bls.n	801737a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8017376:	2303      	movs	r3, #3
 8017378:	e203      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 801737a:	f7ff fc46 	bl	8016c0a <LL_RCC_LSI1_IsReady>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	d0f1      	beq.n	8017368 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8017384:	f7ff fc53 	bl	8016c2e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017388:	f7fe f85a 	bl	8015440 <HAL_GetTick>
 801738c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 801738e:	e008      	b.n	80173a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017390:	f7fe f856 	bl	8015440 <HAL_GetTick>
 8017394:	4602      	mov	r2, r0
 8017396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	2b03      	cmp	r3, #3
 801739c:	d901      	bls.n	80173a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 801739e:	2303      	movs	r3, #3
 80173a0:	e1ef      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80173a2:	f7ff fc66 	bl	8016c72 <LL_RCC_LSI2_IsReady>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d0f1      	beq.n	8017390 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	699b      	ldr	r3, [r3, #24]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7ff fc70 	bl	8016c96 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80173b6:	f7ff fc17 	bl	8016be8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173ba:	f7fe f841 	bl	8015440 <HAL_GetTick>
 80173be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80173c0:	e008      	b.n	80173d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80173c2:	f7fe f83d 	bl	8015440 <HAL_GetTick>
 80173c6:	4602      	mov	r2, r0
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	1ad3      	subs	r3, r2, r3
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	d901      	bls.n	80173d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80173d0:	2303      	movs	r3, #3
 80173d2:	e1d6      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80173d4:	f7ff fc19 	bl	8016c0a <LL_RCC_LSI1_IsReady>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d1f1      	bne.n	80173c2 <HAL_RCC_OscConfig+0x31a>
 80173de:	e051      	b.n	8017484 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80173e0:	f7ff fbf1 	bl	8016bc6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173e4:	f7fe f82c 	bl	8015440 <HAL_GetTick>
 80173e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80173ea:	e00c      	b.n	8017406 <HAL_RCC_OscConfig+0x35e>
 80173ec:	20000004 	.word	0x20000004
 80173f0:	2000006c 	.word	0x2000006c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80173f4:	f7fe f824 	bl	8015440 <HAL_GetTick>
 80173f8:	4602      	mov	r2, r0
 80173fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fc:	1ad3      	subs	r3, r2, r3
 80173fe:	2b02      	cmp	r3, #2
 8017400:	d901      	bls.n	8017406 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8017402:	2303      	movs	r3, #3
 8017404:	e1bd      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017406:	f7ff fc00 	bl	8016c0a <LL_RCC_LSI1_IsReady>
 801740a:	4603      	mov	r3, r0
 801740c:	2b00      	cmp	r3, #0
 801740e:	d0f1      	beq.n	80173f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8017410:	f7ff fc1e 	bl	8016c50 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017414:	e008      	b.n	8017428 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017416:	f7fe f813 	bl	8015440 <HAL_GetTick>
 801741a:	4602      	mov	r2, r0
 801741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741e:	1ad3      	subs	r3, r2, r3
 8017420:	2b03      	cmp	r3, #3
 8017422:	d901      	bls.n	8017428 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8017424:	2303      	movs	r3, #3
 8017426:	e1ac      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8017428:	f7ff fc23 	bl	8016c72 <LL_RCC_LSI2_IsReady>
 801742c:	4603      	mov	r3, r0
 801742e:	2b00      	cmp	r3, #0
 8017430:	d1f1      	bne.n	8017416 <HAL_RCC_OscConfig+0x36e>
 8017432:	e027      	b.n	8017484 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8017434:	f7ff fc0c 	bl	8016c50 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017438:	f7fe f802 	bl	8015440 <HAL_GetTick>
 801743c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 801743e:	e008      	b.n	8017452 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017440:	f7fd fffe 	bl	8015440 <HAL_GetTick>
 8017444:	4602      	mov	r2, r0
 8017446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	2b03      	cmp	r3, #3
 801744c:	d901      	bls.n	8017452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 801744e:	2303      	movs	r3, #3
 8017450:	e197      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8017452:	f7ff fc0e 	bl	8016c72 <LL_RCC_LSI2_IsReady>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d1f1      	bne.n	8017440 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 801745c:	f7ff fbc4 	bl	8016be8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017460:	f7fd ffee 	bl	8015440 <HAL_GetTick>
 8017464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8017466:	e008      	b.n	801747a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8017468:	f7fd ffea 	bl	8015440 <HAL_GetTick>
 801746c:	4602      	mov	r2, r0
 801746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017470:	1ad3      	subs	r3, r2, r3
 8017472:	2b02      	cmp	r3, #2
 8017474:	d901      	bls.n	801747a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8017476:	2303      	movs	r3, #3
 8017478:	e183      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 801747a:	f7ff fbc6 	bl	8016c0a <LL_RCC_LSI1_IsReady>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	d1f1      	bne.n	8017468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	f003 0304 	and.w	r3, r3, #4
 801748c:	2b00      	cmp	r3, #0
 801748e:	d05b      	beq.n	8017548 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017490:	4ba7      	ldr	r3, [pc, #668]	; (8017730 <HAL_RCC_OscConfig+0x688>)
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017498:	2b00      	cmp	r3, #0
 801749a:	d114      	bne.n	80174c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801749c:	f7ff fa64 	bl	8016968 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80174a0:	f7fd ffce 	bl	8015440 <HAL_GetTick>
 80174a4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174a6:	e008      	b.n	80174ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80174a8:	f7fd ffca 	bl	8015440 <HAL_GetTick>
 80174ac:	4602      	mov	r2, r0
 80174ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b0:	1ad3      	subs	r3, r2, r3
 80174b2:	2b02      	cmp	r3, #2
 80174b4:	d901      	bls.n	80174ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80174b6:	2303      	movs	r3, #3
 80174b8:	e163      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174ba:	4b9d      	ldr	r3, [pc, #628]	; (8017730 <HAL_RCC_OscConfig+0x688>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d0f0      	beq.n	80174a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	2b01      	cmp	r3, #1
 80174cc:	d102      	bne.n	80174d4 <HAL_RCC_OscConfig+0x42c>
 80174ce:	f7ff fb24 	bl	8016b1a <LL_RCC_LSE_Enable>
 80174d2:	e00c      	b.n	80174ee <HAL_RCC_OscConfig+0x446>
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	689b      	ldr	r3, [r3, #8]
 80174d8:	2b05      	cmp	r3, #5
 80174da:	d104      	bne.n	80174e6 <HAL_RCC_OscConfig+0x43e>
 80174dc:	f7ff fb3f 	bl	8016b5e <LL_RCC_LSE_EnableBypass>
 80174e0:	f7ff fb1b 	bl	8016b1a <LL_RCC_LSE_Enable>
 80174e4:	e003      	b.n	80174ee <HAL_RCC_OscConfig+0x446>
 80174e6:	f7ff fb29 	bl	8016b3c <LL_RCC_LSE_Disable>
 80174ea:	f7ff fb49 	bl	8016b80 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	689b      	ldr	r3, [r3, #8]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d014      	beq.n	8017520 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80174f6:	f7fd ffa3 	bl	8015440 <HAL_GetTick>
 80174fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80174fc:	e00a      	b.n	8017514 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80174fe:	f7fd ff9f 	bl	8015440 <HAL_GetTick>
 8017502:	4602      	mov	r2, r0
 8017504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017506:	1ad3      	subs	r3, r2, r3
 8017508:	f241 3288 	movw	r2, #5000	; 0x1388
 801750c:	4293      	cmp	r3, r2
 801750e:	d901      	bls.n	8017514 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8017510:	2303      	movs	r3, #3
 8017512:	e136      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8017514:	f7ff fb45 	bl	8016ba2 <LL_RCC_LSE_IsReady>
 8017518:	4603      	mov	r3, r0
 801751a:	2b00      	cmp	r3, #0
 801751c:	d0ef      	beq.n	80174fe <HAL_RCC_OscConfig+0x456>
 801751e:	e013      	b.n	8017548 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017520:	f7fd ff8e 	bl	8015440 <HAL_GetTick>
 8017524:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8017526:	e00a      	b.n	801753e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017528:	f7fd ff8a 	bl	8015440 <HAL_GetTick>
 801752c:	4602      	mov	r2, r0
 801752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017530:	1ad3      	subs	r3, r2, r3
 8017532:	f241 3288 	movw	r2, #5000	; 0x1388
 8017536:	4293      	cmp	r3, r2
 8017538:	d901      	bls.n	801753e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 801753a:	2303      	movs	r3, #3
 801753c:	e121      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 801753e:	f7ff fb30 	bl	8016ba2 <LL_RCC_LSE_IsReady>
 8017542:	4603      	mov	r3, r0
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1ef      	bne.n	8017528 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017550:	2b00      	cmp	r3, #0
 8017552:	d02c      	beq.n	80175ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017558:	2b00      	cmp	r3, #0
 801755a:	d014      	beq.n	8017586 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801755c:	f7ff faa9 	bl	8016ab2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017560:	f7fd ff6e 	bl	8015440 <HAL_GetTick>
 8017564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8017566:	e008      	b.n	801757a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017568:	f7fd ff6a 	bl	8015440 <HAL_GetTick>
 801756c:	4602      	mov	r2, r0
 801756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017570:	1ad3      	subs	r3, r2, r3
 8017572:	2b02      	cmp	r3, #2
 8017574:	d901      	bls.n	801757a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8017576:	2303      	movs	r3, #3
 8017578:	e103      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 801757a:	f7ff fabc 	bl	8016af6 <LL_RCC_HSI48_IsReady>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d0f1      	beq.n	8017568 <HAL_RCC_OscConfig+0x4c0>
 8017584:	e013      	b.n	80175ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8017586:	f7ff faa5 	bl	8016ad4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801758a:	f7fd ff59 	bl	8015440 <HAL_GetTick>
 801758e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017590:	e008      	b.n	80175a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017592:	f7fd ff55 	bl	8015440 <HAL_GetTick>
 8017596:	4602      	mov	r2, r0
 8017598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801759a:	1ad3      	subs	r3, r2, r3
 801759c:	2b02      	cmp	r3, #2
 801759e:	d901      	bls.n	80175a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80175a0:	2303      	movs	r3, #3
 80175a2:	e0ee      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80175a4:	f7ff faa7 	bl	8016af6 <LL_RCC_HSI48_IsReady>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d1f1      	bne.n	8017592 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f000 80e4 	beq.w	8017780 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80175b8:	f7ff fc05 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 80175bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80175be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80175c2:	68db      	ldr	r3, [r3, #12]
 80175c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175ca:	2b02      	cmp	r3, #2
 80175cc:	f040 80b4 	bne.w	8017738 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	f003 0203 	and.w	r2, r3, #3
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175da:	429a      	cmp	r2, r3
 80175dc:	d123      	bne.n	8017626 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d11c      	bne.n	8017626 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	0a1b      	lsrs	r3, r3, #8
 80175f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d114      	bne.n	8017626 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017606:	429a      	cmp	r2, r3
 8017608:	d10d      	bne.n	8017626 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017614:	429a      	cmp	r2, r3
 8017616:	d106      	bne.n	8017626 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8017622:	429a      	cmp	r2, r3
 8017624:	d05d      	beq.n	80176e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	2b0c      	cmp	r3, #12
 801762a:	d058      	beq.n	80176de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801762c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017636:	2b00      	cmp	r3, #0
 8017638:	d001      	beq.n	801763e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 801763a:	2301      	movs	r3, #1
 801763c:	e0a1      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801763e:	f7ff fc85 	bl	8016f4c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017642:	f7fd fefd 	bl	8015440 <HAL_GetTick>
 8017646:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017648:	e008      	b.n	801765c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801764a:	f7fd fef9 	bl	8015440 <HAL_GetTick>
 801764e:	4602      	mov	r2, r0
 8017650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	2b02      	cmp	r3, #2
 8017656:	d901      	bls.n	801765c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8017658:	2303      	movs	r3, #3
 801765a:	e092      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801765c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017666:	2b00      	cmp	r3, #0
 8017668:	d1ef      	bne.n	801764a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801766a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801766e:	68da      	ldr	r2, [r3, #12]
 8017670:	4b30      	ldr	r3, [pc, #192]	; (8017734 <HAL_RCC_OscConfig+0x68c>)
 8017672:	4013      	ands	r3, r2
 8017674:	687a      	ldr	r2, [r7, #4]
 8017676:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017678:	687a      	ldr	r2, [r7, #4]
 801767a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801767c:	4311      	orrs	r1, r2
 801767e:	687a      	ldr	r2, [r7, #4]
 8017680:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017682:	0212      	lsls	r2, r2, #8
 8017684:	4311      	orrs	r1, r2
 8017686:	687a      	ldr	r2, [r7, #4]
 8017688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801768a:	4311      	orrs	r1, r2
 801768c:	687a      	ldr	r2, [r7, #4]
 801768e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017690:	4311      	orrs	r1, r2
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8017696:	430a      	orrs	r2, r1
 8017698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801769c:	4313      	orrs	r3, r2
 801769e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80176a0:	f7ff fc45 	bl	8016f2e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80176a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176a8:	68db      	ldr	r3, [r3, #12]
 80176aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80176ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80176b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80176b4:	f7fd fec4 	bl	8015440 <HAL_GetTick>
 80176b8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80176ba:	e008      	b.n	80176ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80176bc:	f7fd fec0 	bl	8015440 <HAL_GetTick>
 80176c0:	4602      	mov	r2, r0
 80176c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176c4:	1ad3      	subs	r3, r2, r3
 80176c6:	2b02      	cmp	r3, #2
 80176c8:	d901      	bls.n	80176ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80176ca:	2303      	movs	r3, #3
 80176cc:	e059      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80176ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d0ef      	beq.n	80176bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80176dc:	e050      	b.n	8017780 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80176de:	2301      	movs	r3, #1
 80176e0:	e04f      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80176e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d147      	bne.n	8017780 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80176f0:	f7ff fc1d 	bl	8016f2e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80176f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80176f8:	68db      	ldr	r3, [r3, #12]
 80176fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80176fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017702:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017704:	f7fd fe9c 	bl	8015440 <HAL_GetTick>
 8017708:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801770a:	e008      	b.n	801771e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801770c:	f7fd fe98 	bl	8015440 <HAL_GetTick>
 8017710:	4602      	mov	r2, r0
 8017712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017714:	1ad3      	subs	r3, r2, r3
 8017716:	2b02      	cmp	r3, #2
 8017718:	d901      	bls.n	801771e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 801771a:	2303      	movs	r3, #3
 801771c:	e031      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801771e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017728:	2b00      	cmp	r3, #0
 801772a:	d0ef      	beq.n	801770c <HAL_RCC_OscConfig+0x664>
 801772c:	e028      	b.n	8017780 <HAL_RCC_OscConfig+0x6d8>
 801772e:	bf00      	nop
 8017730:	58000400 	.word	0x58000400
 8017734:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	2b0c      	cmp	r3, #12
 801773c:	d01e      	beq.n	801777c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801773e:	f7ff fc05 	bl	8016f4c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017742:	f7fd fe7d 	bl	8015440 <HAL_GetTick>
 8017746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017748:	e008      	b.n	801775c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801774a:	f7fd fe79 	bl	8015440 <HAL_GetTick>
 801774e:	4602      	mov	r2, r0
 8017750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017752:	1ad3      	subs	r3, r2, r3
 8017754:	2b02      	cmp	r3, #2
 8017756:	d901      	bls.n	801775c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8017758:	2303      	movs	r3, #3
 801775a:	e012      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801775c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017766:	2b00      	cmp	r3, #0
 8017768:	d1ef      	bne.n	801774a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 801776a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801776e:	68da      	ldr	r2, [r3, #12]
 8017770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017774:	4b05      	ldr	r3, [pc, #20]	; (801778c <HAL_RCC_OscConfig+0x6e4>)
 8017776:	4013      	ands	r3, r2
 8017778:	60cb      	str	r3, [r1, #12]
 801777a:	e001      	b.n	8017780 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801777c:	2301      	movs	r3, #1
 801777e:	e000      	b.n	8017782 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8017780:	2300      	movs	r3, #0
}
 8017782:	4618      	mov	r0, r3
 8017784:	3734      	adds	r7, #52	; 0x34
 8017786:	46bd      	mov	sp, r7
 8017788:	bd90      	pop	{r4, r7, pc}
 801778a:	bf00      	nop
 801778c:	eefefffc 	.word	0xeefefffc

08017790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d101      	bne.n	80177a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80177a0:	2301      	movs	r3, #1
 80177a2:	e12d      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80177a4:	4b98      	ldr	r3, [pc, #608]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	f003 0307 	and.w	r3, r3, #7
 80177ac:	683a      	ldr	r2, [r7, #0]
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d91b      	bls.n	80177ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80177b2:	4b95      	ldr	r3, [pc, #596]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f023 0207 	bic.w	r2, r3, #7
 80177ba:	4993      	ldr	r1, [pc, #588]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	4313      	orrs	r3, r2
 80177c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80177c2:	f7fd fe3d 	bl	8015440 <HAL_GetTick>
 80177c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80177c8:	e008      	b.n	80177dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80177ca:	f7fd fe39 	bl	8015440 <HAL_GetTick>
 80177ce:	4602      	mov	r2, r0
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	1ad3      	subs	r3, r2, r3
 80177d4:	2b02      	cmp	r3, #2
 80177d6:	d901      	bls.n	80177dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80177d8:	2303      	movs	r3, #3
 80177da:	e111      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80177dc:	4b8a      	ldr	r3, [pc, #552]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f003 0307 	and.w	r3, r3, #7
 80177e4:	683a      	ldr	r2, [r7, #0]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d1ef      	bne.n	80177ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f003 0302 	and.w	r3, r3, #2
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d016      	beq.n	8017824 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	689b      	ldr	r3, [r3, #8]
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7ff faef 	bl	8016dde <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017800:	f7fd fe1e 	bl	8015440 <HAL_GetTick>
 8017804:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017806:	e008      	b.n	801781a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017808:	f7fd fe1a 	bl	8015440 <HAL_GetTick>
 801780c:	4602      	mov	r2, r0
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	2b02      	cmp	r3, #2
 8017814:	d901      	bls.n	801781a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8017816:	2303      	movs	r3, #3
 8017818:	e0f2      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801781a:	f7ff fbe9 	bl	8016ff0 <LL_RCC_IsActiveFlag_HPRE>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d0f1      	beq.n	8017808 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f003 0320 	and.w	r3, r3, #32
 801782c:	2b00      	cmp	r3, #0
 801782e:	d016      	beq.n	801785e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	695b      	ldr	r3, [r3, #20]
 8017834:	4618      	mov	r0, r3
 8017836:	f7ff fae6 	bl	8016e06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 801783a:	f7fd fe01 	bl	8015440 <HAL_GetTick>
 801783e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017840:	e008      	b.n	8017854 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017842:	f7fd fdfd 	bl	8015440 <HAL_GetTick>
 8017846:	4602      	mov	r2, r0
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	2b02      	cmp	r3, #2
 801784e:	d901      	bls.n	8017854 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8017850:	2303      	movs	r3, #3
 8017852:	e0d5      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8017854:	f7ff fbde 	bl	8017014 <LL_RCC_IsActiveFlag_C2HPRE>
 8017858:	4603      	mov	r3, r0
 801785a:	2b00      	cmp	r3, #0
 801785c:	d0f1      	beq.n	8017842 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017866:	2b00      	cmp	r3, #0
 8017868:	d016      	beq.n	8017898 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	699b      	ldr	r3, [r3, #24]
 801786e:	4618      	mov	r0, r3
 8017870:	f7ff fadf 	bl	8016e32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017874:	f7fd fde4 	bl	8015440 <HAL_GetTick>
 8017878:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801787a:	e008      	b.n	801788e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801787c:	f7fd fde0 	bl	8015440 <HAL_GetTick>
 8017880:	4602      	mov	r2, r0
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	2b02      	cmp	r3, #2
 8017888:	d901      	bls.n	801788e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 801788a:	2303      	movs	r3, #3
 801788c:	e0b8      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 801788e:	f7ff fbd4 	bl	801703a <LL_RCC_IsActiveFlag_SHDHPRE>
 8017892:	4603      	mov	r3, r0
 8017894:	2b00      	cmp	r3, #0
 8017896:	d0f1      	beq.n	801787c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f003 0304 	and.w	r3, r3, #4
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d016      	beq.n	80178d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	68db      	ldr	r3, [r3, #12]
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7ff fad9 	bl	8016e60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80178ae:	f7fd fdc7 	bl	8015440 <HAL_GetTick>
 80178b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80178b4:	e008      	b.n	80178c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80178b6:	f7fd fdc3 	bl	8015440 <HAL_GetTick>
 80178ba:	4602      	mov	r2, r0
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	1ad3      	subs	r3, r2, r3
 80178c0:	2b02      	cmp	r3, #2
 80178c2:	d901      	bls.n	80178c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80178c4:	2303      	movs	r3, #3
 80178c6:	e09b      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80178c8:	f7ff fbca 	bl	8017060 <LL_RCC_IsActiveFlag_PPRE1>
 80178cc:	4603      	mov	r3, r0
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d0f1      	beq.n	80178b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	f003 0308 	and.w	r3, r3, #8
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d017      	beq.n	801790e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	691b      	ldr	r3, [r3, #16]
 80178e2:	00db      	lsls	r3, r3, #3
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7ff facf 	bl	8016e88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80178ea:	f7fd fda9 	bl	8015440 <HAL_GetTick>
 80178ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80178f0:	e008      	b.n	8017904 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80178f2:	f7fd fda5 	bl	8015440 <HAL_GetTick>
 80178f6:	4602      	mov	r2, r0
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	1ad3      	subs	r3, r2, r3
 80178fc:	2b02      	cmp	r3, #2
 80178fe:	d901      	bls.n	8017904 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017900:	2303      	movs	r3, #3
 8017902:	e07d      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017904:	f7ff fbbe 	bl	8017084 <LL_RCC_IsActiveFlag_PPRE2>
 8017908:	4603      	mov	r3, r0
 801790a:	2b00      	cmp	r3, #0
 801790c:	d0f1      	beq.n	80178f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	f003 0301 	and.w	r3, r3, #1
 8017916:	2b00      	cmp	r3, #0
 8017918:	d043      	beq.n	80179a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	2b02      	cmp	r3, #2
 8017920:	d106      	bne.n	8017930 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8017922:	f7ff f86f 	bl	8016a04 <LL_RCC_HSE_IsReady>
 8017926:	4603      	mov	r3, r0
 8017928:	2b00      	cmp	r3, #0
 801792a:	d11e      	bne.n	801796a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 801792c:	2301      	movs	r3, #1
 801792e:	e067      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	2b03      	cmp	r3, #3
 8017936:	d106      	bne.n	8017946 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8017938:	f7ff fb17 	bl	8016f6a <LL_RCC_PLL_IsReady>
 801793c:	4603      	mov	r3, r0
 801793e:	2b00      	cmp	r3, #0
 8017940:	d113      	bne.n	801796a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017942:	2301      	movs	r3, #1
 8017944:	e05c      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	685b      	ldr	r3, [r3, #4]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d106      	bne.n	801795c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 801794e:	f7ff f9d7 	bl	8016d00 <LL_RCC_MSI_IsReady>
 8017952:	4603      	mov	r3, r0
 8017954:	2b00      	cmp	r3, #0
 8017956:	d108      	bne.n	801796a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017958:	2301      	movs	r3, #1
 801795a:	e051      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 801795c:	f7ff f882 	bl	8016a64 <LL_RCC_HSI_IsReady>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d101      	bne.n	801796a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8017966:	2301      	movs	r3, #1
 8017968:	e04a      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	4618      	mov	r0, r3
 8017970:	f7ff fa15 	bl	8016d9e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017974:	f7fd fd64 	bl	8015440 <HAL_GetTick>
 8017978:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801797a:	e00a      	b.n	8017992 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801797c:	f7fd fd60 	bl	8015440 <HAL_GetTick>
 8017980:	4602      	mov	r2, r0
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	1ad3      	subs	r3, r2, r3
 8017986:	f241 3288 	movw	r2, #5000	; 0x1388
 801798a:	4293      	cmp	r3, r2
 801798c:	d901      	bls.n	8017992 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 801798e:	2303      	movs	r3, #3
 8017990:	e036      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017992:	f7ff fa18 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 8017996:	4602      	mov	r2, r0
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	685b      	ldr	r3, [r3, #4]
 801799c:	009b      	lsls	r3, r3, #2
 801799e:	429a      	cmp	r2, r3
 80179a0:	d1ec      	bne.n	801797c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80179a2:	4b19      	ldr	r3, [pc, #100]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	f003 0307 	and.w	r3, r3, #7
 80179aa:	683a      	ldr	r2, [r7, #0]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d21b      	bcs.n	80179e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80179b0:	4b15      	ldr	r3, [pc, #84]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	f023 0207 	bic.w	r2, r3, #7
 80179b8:	4913      	ldr	r1, [pc, #76]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	4313      	orrs	r3, r2
 80179be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80179c0:	f7fd fd3e 	bl	8015440 <HAL_GetTick>
 80179c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80179c6:	e008      	b.n	80179da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80179c8:	f7fd fd3a 	bl	8015440 <HAL_GetTick>
 80179cc:	4602      	mov	r2, r0
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	1ad3      	subs	r3, r2, r3
 80179d2:	2b02      	cmp	r3, #2
 80179d4:	d901      	bls.n	80179da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80179d6:	2303      	movs	r3, #3
 80179d8:	e012      	b.n	8017a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80179da:	4b0b      	ldr	r3, [pc, #44]	; (8017a08 <HAL_RCC_ClockConfig+0x278>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	f003 0307 	and.w	r3, r3, #7
 80179e2:	683a      	ldr	r2, [r7, #0]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d1ef      	bne.n	80179c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80179e8:	f000 f87e 	bl	8017ae8 <HAL_RCC_GetHCLKFreq>
 80179ec:	4603      	mov	r3, r0
 80179ee:	4a07      	ldr	r2, [pc, #28]	; (8017a0c <HAL_RCC_ClockConfig+0x27c>)
 80179f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80179f2:	f7fd fd31 	bl	8015458 <HAL_GetTickPrio>
 80179f6:	4603      	mov	r3, r0
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7e9 fa09 	bl	8000e10 <HAL_InitTick>
 80179fe:	4603      	mov	r3, r0
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3710      	adds	r7, #16
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}
 8017a08:	58004000 	.word	0x58004000
 8017a0c:	20000004 	.word	0x20000004

08017a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017a10:	b590      	push	{r4, r7, lr}
 8017a12:	b085      	sub	sp, #20
 8017a14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017a16:	f7ff f9d6 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 8017a1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d10a      	bne.n	8017a38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017a22:	f7ff f992 	bl	8016d4a <LL_RCC_MSI_GetRange>
 8017a26:	4603      	mov	r3, r0
 8017a28:	091b      	lsrs	r3, r3, #4
 8017a2a:	f003 030f 	and.w	r3, r3, #15
 8017a2e:	4a2b      	ldr	r2, [pc, #172]	; (8017adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8017a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a34:	60fb      	str	r3, [r7, #12]
 8017a36:	e04b      	b.n	8017ad0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2b04      	cmp	r3, #4
 8017a3c:	d102      	bne.n	8017a44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017a3e:	4b28      	ldr	r3, [pc, #160]	; (8017ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	e045      	b.n	8017ad0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	2b08      	cmp	r3, #8
 8017a48:	d10a      	bne.n	8017a60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017a4a:	f7fe ffab 	bl	80169a4 <LL_RCC_HSE_IsEnabledDiv2>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	d102      	bne.n	8017a5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8017a54:	4b22      	ldr	r3, [pc, #136]	; (8017ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a56:	60fb      	str	r3, [r7, #12]
 8017a58:	e03a      	b.n	8017ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8017a5a:	4b22      	ldr	r3, [pc, #136]	; (8017ae4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017a5c:	60fb      	str	r3, [r7, #12]
 8017a5e:	e037      	b.n	8017ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8017a60:	f7ff faba 	bl	8016fd8 <LL_RCC_PLL_GetMainSource>
 8017a64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	2b02      	cmp	r3, #2
 8017a6a:	d003      	beq.n	8017a74 <HAL_RCC_GetSysClockFreq+0x64>
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	2b03      	cmp	r3, #3
 8017a70:	d003      	beq.n	8017a7a <HAL_RCC_GetSysClockFreq+0x6a>
 8017a72:	e00d      	b.n	8017a90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8017a74:	4b1a      	ldr	r3, [pc, #104]	; (8017ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a76:	60bb      	str	r3, [r7, #8]
        break;
 8017a78:	e015      	b.n	8017aa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8017a7a:	f7fe ff93 	bl	80169a4 <LL_RCC_HSE_IsEnabledDiv2>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d102      	bne.n	8017a8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8017a84:	4b16      	ldr	r3, [pc, #88]	; (8017ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8017a86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017a88:	e00d      	b.n	8017aa6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017a8a:	4b16      	ldr	r3, [pc, #88]	; (8017ae4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8017a8c:	60bb      	str	r3, [r7, #8]
        break;
 8017a8e:	e00a      	b.n	8017aa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017a90:	f7ff f95b 	bl	8016d4a <LL_RCC_MSI_GetRange>
 8017a94:	4603      	mov	r3, r0
 8017a96:	091b      	lsrs	r3, r3, #4
 8017a98:	f003 030f 	and.w	r3, r3, #15
 8017a9c:	4a0f      	ldr	r2, [pc, #60]	; (8017adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8017a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017aa2:	60bb      	str	r3, [r7, #8]
        break;
 8017aa4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8017aa6:	f7ff fa72 	bl	8016f8e <LL_RCC_PLL_GetN>
 8017aaa:	4602      	mov	r2, r0
 8017aac:	68bb      	ldr	r3, [r7, #8]
 8017aae:	fb03 f402 	mul.w	r4, r3, r2
 8017ab2:	f7ff fa85 	bl	8016fc0 <LL_RCC_PLL_GetDivider>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	091b      	lsrs	r3, r3, #4
 8017aba:	3301      	adds	r3, #1
 8017abc:	fbb4 f4f3 	udiv	r4, r4, r3
 8017ac0:	f7ff fa72 	bl	8016fa8 <LL_RCC_PLL_GetR>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	0f5b      	lsrs	r3, r3, #29
 8017ac8:	3301      	adds	r3, #1
 8017aca:	fbb4 f3f3 	udiv	r3, r4, r3
 8017ace:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	3714      	adds	r7, #20
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd90      	pop	{r4, r7, pc}
 8017ada:	bf00      	nop
 8017adc:	0801a8fc 	.word	0x0801a8fc
 8017ae0:	00f42400 	.word	0x00f42400
 8017ae4:	01e84800 	.word	0x01e84800

08017ae8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017ae8:	b598      	push	{r3, r4, r7, lr}
 8017aea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017aec:	f7ff ff90 	bl	8017a10 <HAL_RCC_GetSysClockFreq>
 8017af0:	4604      	mov	r4, r0
 8017af2:	f7ff f9dd 	bl	8016eb0 <LL_RCC_GetAHBPrescaler>
 8017af6:	4603      	mov	r3, r0
 8017af8:	091b      	lsrs	r3, r3, #4
 8017afa:	f003 030f 	and.w	r3, r3, #15
 8017afe:	4a03      	ldr	r2, [pc, #12]	; (8017b0c <HAL_RCC_GetHCLKFreq+0x24>)
 8017b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	bd98      	pop	{r3, r4, r7, pc}
 8017b0c:	0801a89c 	.word	0x0801a89c

08017b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017b10:	b598      	push	{r3, r4, r7, lr}
 8017b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8017b14:	f7ff ffe8 	bl	8017ae8 <HAL_RCC_GetHCLKFreq>
 8017b18:	4604      	mov	r4, r0
 8017b1a:	f7ff f9f0 	bl	8016efe <LL_RCC_GetAPB1Prescaler>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	0a1b      	lsrs	r3, r3, #8
 8017b22:	f003 0307 	and.w	r3, r3, #7
 8017b26:	4a04      	ldr	r2, [pc, #16]	; (8017b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b2c:	f003 031f 	and.w	r3, r3, #31
 8017b30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	bd98      	pop	{r3, r4, r7, pc}
 8017b38:	0801a8dc 	.word	0x0801a8dc

08017b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017b3c:	b598      	push	{r3, r4, r7, lr}
 8017b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8017b40:	f7ff ffd2 	bl	8017ae8 <HAL_RCC_GetHCLKFreq>
 8017b44:	4604      	mov	r4, r0
 8017b46:	f7ff f9e6 	bl	8016f16 <LL_RCC_GetAPB2Prescaler>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	0adb      	lsrs	r3, r3, #11
 8017b4e:	f003 0307 	and.w	r3, r3, #7
 8017b52:	4a04      	ldr	r2, [pc, #16]	; (8017b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017b58:	f003 031f 	and.w	r3, r3, #31
 8017b5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	bd98      	pop	{r3, r4, r7, pc}
 8017b64:	0801a8dc 	.word	0x0801a8dc

08017b68 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b082      	sub	sp, #8
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	226f      	movs	r2, #111	; 0x6f
 8017b76:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8017b78:	f7ff f925 	bl	8016dc6 <LL_RCC_GetSysClkSource>
 8017b7c:	4602      	mov	r2, r0
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8017b82:	f7ff f995 	bl	8016eb0 <LL_RCC_GetAHBPrescaler>
 8017b86:	4602      	mov	r2, r0
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8017b8c:	f7ff f9b7 	bl	8016efe <LL_RCC_GetAPB1Prescaler>
 8017b90:	4602      	mov	r2, r0
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8017b96:	f7ff f9be 	bl	8016f16 <LL_RCC_GetAPB2Prescaler>
 8017b9a:	4602      	mov	r2, r0
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8017ba0:	f7ff f992 	bl	8016ec8 <LL_C2_RCC_GetAHBPrescaler>
 8017ba4:	4602      	mov	r2, r0
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8017baa:	f7ff f99a 	bl	8016ee2 <LL_RCC_GetAHB4Prescaler>
 8017bae:	4602      	mov	r2, r0
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8017bb4:	4b04      	ldr	r3, [pc, #16]	; (8017bc8 <HAL_RCC_GetClockConfig+0x60>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f003 0207 	and.w	r2, r3, #7
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	601a      	str	r2, [r3, #0]
}
 8017bc0:	bf00      	nop
 8017bc2:	3708      	adds	r7, #8
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	58004000 	.word	0x58004000

08017bcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8017bcc:	b590      	push	{r4, r7, lr}
 8017bce:	b085      	sub	sp, #20
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2bb0      	cmp	r3, #176	; 0xb0
 8017bd8:	d903      	bls.n	8017be2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8017bda:	4b15      	ldr	r3, [pc, #84]	; (8017c30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bde:	60fb      	str	r3, [r7, #12]
 8017be0:	e007      	b.n	8017bf2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	091b      	lsrs	r3, r3, #4
 8017be6:	f003 030f 	and.w	r3, r3, #15
 8017bea:	4a11      	ldr	r2, [pc, #68]	; (8017c30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bf0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017bf2:	f7ff f976 	bl	8016ee2 <LL_RCC_GetAHB4Prescaler>
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	091b      	lsrs	r3, r3, #4
 8017bfa:	f003 030f 	and.w	r3, r3, #15
 8017bfe:	4a0d      	ldr	r2, [pc, #52]	; (8017c34 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c0a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017c0c:	68bb      	ldr	r3, [r7, #8]
 8017c0e:	4a0a      	ldr	r2, [pc, #40]	; (8017c38 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017c10:	fba2 2303 	umull	r2, r3, r2, r3
 8017c14:	0c9c      	lsrs	r4, r3, #18
 8017c16:	f7fe feb7 	bl	8016988 <HAL_PWREx_GetVoltageRange>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	4620      	mov	r0, r4
 8017c20:	f000 f80c 	bl	8017c3c <RCC_SetFlashLatency>
 8017c24:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	3714      	adds	r7, #20
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd90      	pop	{r4, r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	0801a8fc 	.word	0x0801a8fc
 8017c34:	0801a89c 	.word	0x0801a89c
 8017c38:	431bde83 	.word	0x431bde83

08017c3c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017c3c:	b590      	push	{r4, r7, lr}
 8017c3e:	b093      	sub	sp, #76	; 0x4c
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
 8017c44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8017c46:	4b37      	ldr	r3, [pc, #220]	; (8017d24 <RCC_SetFlashLatency+0xe8>)
 8017c48:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017c52:	4a35      	ldr	r2, [pc, #212]	; (8017d28 <RCC_SetFlashLatency+0xec>)
 8017c54:	f107 031c 	add.w	r3, r7, #28
 8017c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017c5e:	4b33      	ldr	r3, [pc, #204]	; (8017d2c <RCC_SetFlashLatency+0xf0>)
 8017c60:	f107 040c 	add.w	r4, r7, #12
 8017c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c74:	d11a      	bne.n	8017cac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017c76:	2300      	movs	r3, #0
 8017c78:	643b      	str	r3, [r7, #64]	; 0x40
 8017c7a:	e013      	b.n	8017ca4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c7e:	009b      	lsls	r3, r3, #2
 8017c80:	3348      	adds	r3, #72	; 0x48
 8017c82:	443b      	add	r3, r7
 8017c84:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d807      	bhi.n	8017c9e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c90:	009b      	lsls	r3, r3, #2
 8017c92:	3348      	adds	r3, #72	; 0x48
 8017c94:	443b      	add	r3, r7
 8017c96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017c9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017c9c:	e020      	b.n	8017ce0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8017c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8017ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ca6:	2b03      	cmp	r3, #3
 8017ca8:	d9e8      	bls.n	8017c7c <RCC_SetFlashLatency+0x40>
 8017caa:	e019      	b.n	8017ce0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017cac:	2300      	movs	r3, #0
 8017cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cb0:	e013      	b.n	8017cda <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8017cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	3348      	adds	r3, #72	; 0x48
 8017cb8:	443b      	add	r3, r7
 8017cba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d807      	bhi.n	8017cd4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8017cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	3348      	adds	r3, #72	; 0x48
 8017cca:	443b      	add	r3, r7
 8017ccc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8017cd0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8017cd2:	e005      	b.n	8017ce0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8017cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cdc:	2b02      	cmp	r3, #2
 8017cde:	d9e8      	bls.n	8017cb2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8017ce0:	4b13      	ldr	r3, [pc, #76]	; (8017d30 <RCC_SetFlashLatency+0xf4>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	f023 0207 	bic.w	r2, r3, #7
 8017ce8:	4911      	ldr	r1, [pc, #68]	; (8017d30 <RCC_SetFlashLatency+0xf4>)
 8017cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cec:	4313      	orrs	r3, r2
 8017cee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017cf0:	f7fd fba6 	bl	8015440 <HAL_GetTick>
 8017cf4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017cf6:	e008      	b.n	8017d0a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017cf8:	f7fd fba2 	bl	8015440 <HAL_GetTick>
 8017cfc:	4602      	mov	r2, r0
 8017cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d00:	1ad3      	subs	r3, r2, r3
 8017d02:	2b02      	cmp	r3, #2
 8017d04:	d901      	bls.n	8017d0a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017d06:	2303      	movs	r3, #3
 8017d08:	e007      	b.n	8017d1a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017d0a:	4b09      	ldr	r3, [pc, #36]	; (8017d30 <RCC_SetFlashLatency+0xf4>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f003 0307 	and.w	r3, r3, #7
 8017d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d14:	429a      	cmp	r2, r3
 8017d16:	d1ef      	bne.n	8017cf8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017d18:	2300      	movs	r3, #0
}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	374c      	adds	r7, #76	; 0x4c
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd90      	pop	{r4, r7, pc}
 8017d22:	bf00      	nop
 8017d24:	0801a870 	.word	0x0801a870
 8017d28:	0801a880 	.word	0x0801a880
 8017d2c:	0801a88c 	.word	0x0801a88c
 8017d30:	58004000 	.word	0x58004000

08017d34 <LL_RCC_LSE_IsEnabled>:
{
 8017d34:	b480      	push	{r7}
 8017d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d40:	f003 0301 	and.w	r3, r3, #1
 8017d44:	2b01      	cmp	r3, #1
 8017d46:	d101      	bne.n	8017d4c <LL_RCC_LSE_IsEnabled+0x18>
 8017d48:	2301      	movs	r3, #1
 8017d4a:	e000      	b.n	8017d4e <LL_RCC_LSE_IsEnabled+0x1a>
 8017d4c:	2300      	movs	r3, #0
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	46bd      	mov	sp, r7
 8017d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d56:	4770      	bx	lr

08017d58 <LL_RCC_LSE_IsReady>:
{
 8017d58:	b480      	push	{r7}
 8017d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d64:	f003 0302 	and.w	r3, r3, #2
 8017d68:	2b02      	cmp	r3, #2
 8017d6a:	d101      	bne.n	8017d70 <LL_RCC_LSE_IsReady+0x18>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e000      	b.n	8017d72 <LL_RCC_LSE_IsReady+0x1a>
 8017d70:	2300      	movs	r3, #0
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <LL_RCC_MSI_EnablePLLMode>:
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d8a:	f043 0304 	orr.w	r3, r3, #4
 8017d8e:	6013      	str	r3, [r2, #0]
}
 8017d90:	bf00      	nop
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr

08017d9a <LL_RCC_SetRFWKPClockSource>:
{
 8017d9a:	b480      	push	{r7}
 8017d9c:	b083      	sub	sp, #12
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017daa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	4313      	orrs	r3, r2
 8017db6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017dba:	bf00      	nop
 8017dbc:	370c      	adds	r7, #12
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc4:	4770      	bx	lr

08017dc6 <LL_RCC_SetSMPSClockSource>:
{
 8017dc6:	b480      	push	{r7}
 8017dc8:	b083      	sub	sp, #12
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd4:	f023 0203 	bic.w	r2, r3, #3
 8017dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	4313      	orrs	r3, r2
 8017de0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017de2:	bf00      	nop
 8017de4:	370c      	adds	r7, #12
 8017de6:	46bd      	mov	sp, r7
 8017de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dec:	4770      	bx	lr

08017dee <LL_RCC_SetSMPSPrescaler>:
{
 8017dee:	b480      	push	{r7}
 8017df0:	b083      	sub	sp, #12
 8017df2:	af00      	add	r7, sp, #0
 8017df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	4313      	orrs	r3, r2
 8017e08:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017e0a:	bf00      	nop
 8017e0c:	370c      	adds	r7, #12
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e14:	4770      	bx	lr

08017e16 <LL_RCC_SetUSARTClockSource>:
{
 8017e16:	b480      	push	{r7}
 8017e18:	b083      	sub	sp, #12
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e26:	f023 0203 	bic.w	r2, r3, #3
 8017e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	4313      	orrs	r3, r2
 8017e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e36:	bf00      	nop
 8017e38:	370c      	adds	r7, #12
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e40:	4770      	bx	lr

08017e42 <LL_RCC_SetLPUARTClockSource>:
{
 8017e42:	b480      	push	{r7}
 8017e44:	b083      	sub	sp, #12
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	4313      	orrs	r3, r2
 8017e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e62:	bf00      	nop
 8017e64:	370c      	adds	r7, #12
 8017e66:	46bd      	mov	sp, r7
 8017e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6c:	4770      	bx	lr

08017e6e <LL_RCC_SetI2CClockSource>:
{
 8017e6e:	b480      	push	{r7}
 8017e70:	b083      	sub	sp, #12
 8017e72:	af00      	add	r7, sp, #0
 8017e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	091b      	lsrs	r3, r3, #4
 8017e82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017e86:	43db      	mvns	r3, r3
 8017e88:	401a      	ands	r2, r3
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	011b      	lsls	r3, r3, #4
 8017e8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017e96:	4313      	orrs	r3, r2
 8017e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017e9c:	bf00      	nop
 8017e9e:	370c      	adds	r7, #12
 8017ea0:	46bd      	mov	sp, r7
 8017ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ea6:	4770      	bx	lr

08017ea8 <LL_RCC_SetLPTIMClockSource>:
{
 8017ea8:	b480      	push	{r7}
 8017eaa:	b083      	sub	sp, #12
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017eb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	0c1b      	lsrs	r3, r3, #16
 8017ebc:	041b      	lsls	r3, r3, #16
 8017ebe:	43db      	mvns	r3, r3
 8017ec0:	401a      	ands	r2, r3
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	041b      	lsls	r3, r3, #16
 8017ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017eca:	4313      	orrs	r3, r2
 8017ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017ed0:	bf00      	nop
 8017ed2:	370c      	adds	r7, #12
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eda:	4770      	bx	lr

08017edc <LL_RCC_SetSAIClockSource>:
{
 8017edc:	b480      	push	{r7}
 8017ede:	b083      	sub	sp, #12
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	4313      	orrs	r3, r2
 8017ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017efc:	bf00      	nop
 8017efe:	370c      	adds	r7, #12
 8017f00:	46bd      	mov	sp, r7
 8017f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f06:	4770      	bx	lr

08017f08 <LL_RCC_SetRNGClockSource>:
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b083      	sub	sp, #12
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f18:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	4313      	orrs	r3, r2
 8017f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f28:	bf00      	nop
 8017f2a:	370c      	adds	r7, #12
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr

08017f34 <LL_RCC_SetCLK48ClockSource>:
{
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	4313      	orrs	r3, r2
 8017f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f54:	bf00      	nop
 8017f56:	370c      	adds	r7, #12
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5e:	4770      	bx	lr

08017f60 <LL_RCC_SetUSBClockSource>:
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017f68:	6878      	ldr	r0, [r7, #4]
 8017f6a:	f7ff ffe3 	bl	8017f34 <LL_RCC_SetCLK48ClockSource>
}
 8017f6e:	bf00      	nop
 8017f70:	3708      	adds	r7, #8
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd80      	pop	{r7, pc}

08017f76 <LL_RCC_SetADCClockSource>:
{
 8017f76:	b480      	push	{r7}
 8017f78:	b083      	sub	sp, #12
 8017f7a:	af00      	add	r7, sp, #0
 8017f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	4313      	orrs	r3, r2
 8017f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017f96:	bf00      	nop
 8017f98:	370c      	adds	r7, #12
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa0:	4770      	bx	lr

08017fa2 <LL_RCC_SetRTCClockSource>:
{
 8017fa2:	b480      	push	{r7}
 8017fa4:	b083      	sub	sp, #12
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	4313      	orrs	r3, r2
 8017fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017fc2:	bf00      	nop
 8017fc4:	370c      	adds	r7, #12
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fcc:	4770      	bx	lr

08017fce <LL_RCC_GetRTCClockSource>:
{
 8017fce:	b480      	push	{r7}
 8017fd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8017fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe6:	4770      	bx	lr

08017fe8 <LL_RCC_ForceBackupDomainReset>:
{
 8017fe8:	b480      	push	{r7}
 8017fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018000:	bf00      	nop
 8018002:	46bd      	mov	sp, r7
 8018004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018008:	4770      	bx	lr

0801800a <LL_RCC_ReleaseBackupDomainReset>:
{
 801800a:	b480      	push	{r7}
 801800c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801800e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801801a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801801e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8018022:	bf00      	nop
 8018024:	46bd      	mov	sp, r7
 8018026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802a:	4770      	bx	lr

0801802c <LL_RCC_PLLSAI1_Enable>:
{
 801802c:	b480      	push	{r7}
 801802e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8018030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801803a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801803e:	6013      	str	r3, [r2, #0]
}
 8018040:	bf00      	nop
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr

0801804a <LL_RCC_PLLSAI1_Disable>:
{
 801804a:	b480      	push	{r7}
 801804c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 801804e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801805c:	6013      	str	r3, [r2, #0]
}
 801805e:	bf00      	nop
 8018060:	46bd      	mov	sp, r7
 8018062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018066:	4770      	bx	lr

08018068 <LL_RCC_PLLSAI1_IsReady>:
{
 8018068:	b480      	push	{r7}
 801806a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 801806c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801807a:	d101      	bne.n	8018080 <LL_RCC_PLLSAI1_IsReady+0x18>
 801807c:	2301      	movs	r3, #1
 801807e:	e000      	b.n	8018082 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8018080:	2300      	movs	r3, #0
}
 8018082:	4618      	mov	r0, r3
 8018084:	46bd      	mov	sp, r7
 8018086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808a:	4770      	bx	lr

0801808c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b088      	sub	sp, #32
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8018094:	2300      	movs	r3, #0
 8018096:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8018098:	2300      	movs	r3, #0
 801809a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d034      	beq.n	8018112 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80180b0:	d021      	beq.n	80180f6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80180b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80180b6:	d81b      	bhi.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80180b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80180bc:	d01d      	beq.n	80180fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80180be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80180c2:	d815      	bhi.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d00b      	beq.n	80180e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80180c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80180cc:	d110      	bne.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80180ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180d2:	68db      	ldr	r3, [r3, #12]
 80180d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80180d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80180dc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80180de:	e00d      	b.n	80180fc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	3304      	adds	r3, #4
 80180e4:	4618      	mov	r0, r3
 80180e6:	f000 f94d 	bl	8018384 <RCCEx_PLLSAI1_ConfigNP>
 80180ea:	4603      	mov	r3, r0
 80180ec:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80180ee:	e005      	b.n	80180fc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80180f0:	2301      	movs	r3, #1
 80180f2:	77fb      	strb	r3, [r7, #31]
        break;
 80180f4:	e002      	b.n	80180fc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80180f6:	bf00      	nop
 80180f8:	e000      	b.n	80180fc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80180fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80180fc:	7ffb      	ldrb	r3, [r7, #31]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d105      	bne.n	801810e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018106:	4618      	mov	r0, r3
 8018108:	f7ff fee8 	bl	8017edc <LL_RCC_SetSAIClockSource>
 801810c:	e001      	b.n	8018112 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801810e:	7ffb      	ldrb	r3, [r7, #31]
 8018110:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801811a:	2b00      	cmp	r3, #0
 801811c:	d046      	beq.n	80181ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 801811e:	f7ff ff56 	bl	8017fce <LL_RCC_GetRTCClockSource>
 8018122:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018128:	69ba      	ldr	r2, [r7, #24]
 801812a:	429a      	cmp	r2, r3
 801812c:	d03c      	beq.n	80181a8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 801812e:	f7fe fc1b 	bl	8016968 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d105      	bne.n	8018144 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801813c:	4618      	mov	r0, r3
 801813e:	f7ff ff30 	bl	8017fa2 <LL_RCC_SetRTCClockSource>
 8018142:	e02e      	b.n	80181a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8018144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801814c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 801814e:	f7ff ff4b 	bl	8017fe8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8018152:	f7ff ff5a 	bl	801800a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018160:	4313      	orrs	r3, r2
 8018162:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8018164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 801816e:	f7ff fde1 	bl	8017d34 <LL_RCC_LSE_IsEnabled>
 8018172:	4603      	mov	r3, r0
 8018174:	2b01      	cmp	r3, #1
 8018176:	d114      	bne.n	80181a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8018178:	f7fd f962 	bl	8015440 <HAL_GetTick>
 801817c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 801817e:	e00b      	b.n	8018198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018180:	f7fd f95e 	bl	8015440 <HAL_GetTick>
 8018184:	4602      	mov	r2, r0
 8018186:	693b      	ldr	r3, [r7, #16]
 8018188:	1ad3      	subs	r3, r2, r3
 801818a:	f241 3288 	movw	r2, #5000	; 0x1388
 801818e:	4293      	cmp	r3, r2
 8018190:	d902      	bls.n	8018198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8018192:	2303      	movs	r3, #3
 8018194:	77fb      	strb	r3, [r7, #31]
              break;
 8018196:	e004      	b.n	80181a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8018198:	f7ff fdde 	bl	8017d58 <LL_RCC_LSE_IsReady>
 801819c:	4603      	mov	r3, r0
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d1ee      	bne.n	8018180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80181a2:	7ffb      	ldrb	r3, [r7, #31]
 80181a4:	77bb      	strb	r3, [r7, #30]
 80181a6:	e001      	b.n	80181ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80181a8:	7ffb      	ldrb	r3, [r7, #31]
 80181aa:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	f003 0301 	and.w	r3, r3, #1
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d004      	beq.n	80181c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	699b      	ldr	r3, [r3, #24]
 80181bc:	4618      	mov	r0, r3
 80181be:	f7ff fe2a 	bl	8017e16 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	f003 0302 	and.w	r3, r3, #2
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d004      	beq.n	80181d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	69db      	ldr	r3, [r3, #28]
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7ff fe35 	bl	8017e42 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	f003 0310 	and.w	r3, r3, #16
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d004      	beq.n	80181ee <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7ff fe5d 	bl	8017ea8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f003 0320 	and.w	r3, r3, #32
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d004      	beq.n	8018204 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181fe:	4618      	mov	r0, r3
 8018200:	f7ff fe52 	bl	8017ea8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	f003 0304 	and.w	r3, r3, #4
 801820c:	2b00      	cmp	r3, #0
 801820e:	d004      	beq.n	801821a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6a1b      	ldr	r3, [r3, #32]
 8018214:	4618      	mov	r0, r3
 8018216:	f7ff fe2a 	bl	8017e6e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	f003 0308 	and.w	r3, r3, #8
 8018222:	2b00      	cmp	r3, #0
 8018224:	d004      	beq.n	8018230 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822a:	4618      	mov	r0, r3
 801822c:	f7ff fe1f 	bl	8017e6e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018238:	2b00      	cmp	r3, #0
 801823a:	d022      	beq.n	8018282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018240:	4618      	mov	r0, r3
 8018242:	f7ff fe8d 	bl	8017f60 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801824a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801824e:	d107      	bne.n	8018260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8018250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801825a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801825e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018268:	d10b      	bne.n	8018282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	3304      	adds	r3, #4
 801826e:	4618      	mov	r0, r3
 8018270:	f000 f8e3 	bl	801843a <RCCEx_PLLSAI1_ConfigNQ>
 8018274:	4603      	mov	r3, r0
 8018276:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018278:	7ffb      	ldrb	r3, [r7, #31]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d001      	beq.n	8018282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 801827e:	7ffb      	ldrb	r3, [r7, #31]
 8018280:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801828a:	2b00      	cmp	r3, #0
 801828c:	d02b      	beq.n	80182e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018296:	d008      	beq.n	80182aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801829c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80182a0:	d003      	beq.n	80182aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d105      	bne.n	80182b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7ff fe2a 	bl	8017f08 <LL_RCC_SetRNGClockSource>
 80182b4:	e00a      	b.n	80182cc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80182be:	60fb      	str	r3, [r7, #12]
 80182c0:	2000      	movs	r0, #0
 80182c2:	f7ff fe21 	bl	8017f08 <LL_RCC_SetRNGClockSource>
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f7ff fe34 	bl	8017f34 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80182d4:	d107      	bne.n	80182e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80182d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80182e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80182e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d022      	beq.n	8018338 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7ff fe3d 	bl	8017f76 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018304:	d107      	bne.n	8018316 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8018306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801830a:	68db      	ldr	r3, [r3, #12]
 801830c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018314:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801831a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801831e:	d10b      	bne.n	8018338 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	3304      	adds	r3, #4
 8018324:	4618      	mov	r0, r3
 8018326:	f000 f8e3 	bl	80184f0 <RCCEx_PLLSAI1_ConfigNR>
 801832a:	4603      	mov	r3, r0
 801832c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801832e:	7ffb      	ldrb	r3, [r7, #31]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d001      	beq.n	8018338 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8018334:	7ffb      	ldrb	r3, [r7, #31]
 8018336:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018340:	2b00      	cmp	r3, #0
 8018342:	d004      	beq.n	801834e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018348:	4618      	mov	r0, r3
 801834a:	f7ff fd26 	bl	8017d9a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018356:	2b00      	cmp	r3, #0
 8018358:	d009      	beq.n	801836e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801835e:	4618      	mov	r0, r3
 8018360:	f7ff fd45 	bl	8017dee <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018368:	4618      	mov	r0, r3
 801836a:	f7ff fd2c 	bl	8017dc6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 801836e:	7fbb      	ldrb	r3, [r7, #30]
}
 8018370:	4618      	mov	r0, r3
 8018372:	3720      	adds	r7, #32
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}

08018378 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 801837c:	f7ff fcfe 	bl	8017d7c <LL_RCC_MSI_EnablePLLMode>
}
 8018380:	bf00      	nop
 8018382:	bd80      	pop	{r7, pc}

08018384 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b084      	sub	sp, #16
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801838c:	2300      	movs	r3, #0
 801838e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018390:	f7ff fe5b 	bl	801804a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018394:	f7fd f854 	bl	8015440 <HAL_GetTick>
 8018398:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801839a:	e009      	b.n	80183b0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801839c:	f7fd f850 	bl	8015440 <HAL_GetTick>
 80183a0:	4602      	mov	r2, r0
 80183a2:	68bb      	ldr	r3, [r7, #8]
 80183a4:	1ad3      	subs	r3, r2, r3
 80183a6:	2b02      	cmp	r3, #2
 80183a8:	d902      	bls.n	80183b0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80183aa:	2303      	movs	r3, #3
 80183ac:	73fb      	strb	r3, [r7, #15]
      break;
 80183ae:	e004      	b.n	80183ba <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80183b0:	f7ff fe5a 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d1f0      	bne.n	801839c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80183ba:	7bfb      	ldrb	r3, [r7, #15]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d137      	bne.n	8018430 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80183c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183c4:	691b      	ldr	r3, [r3, #16]
 80183c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	021b      	lsls	r3, r3, #8
 80183d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183d4:	4313      	orrs	r3, r2
 80183d6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80183d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80183dc:	691b      	ldr	r3, [r3, #16]
 80183de:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	685b      	ldr	r3, [r3, #4]
 80183e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80183ea:	4313      	orrs	r3, r2
 80183ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80183ee:	f7ff fe1d 	bl	801802c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80183f2:	f7fd f825 	bl	8015440 <HAL_GetTick>
 80183f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80183f8:	e009      	b.n	801840e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80183fa:	f7fd f821 	bl	8015440 <HAL_GetTick>
 80183fe:	4602      	mov	r2, r0
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	1ad3      	subs	r3, r2, r3
 8018404:	2b02      	cmp	r3, #2
 8018406:	d902      	bls.n	801840e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8018408:	2303      	movs	r3, #3
 801840a:	73fb      	strb	r3, [r7, #15]
        break;
 801840c:	e004      	b.n	8018418 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801840e:	f7ff fe2b 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 8018412:	4603      	mov	r3, r0
 8018414:	2b01      	cmp	r3, #1
 8018416:	d1f0      	bne.n	80183fa <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8018418:	7bfb      	ldrb	r3, [r7, #15]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d108      	bne.n	8018430 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801841e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018422:	691a      	ldr	r2, [r3, #16]
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	691b      	ldr	r3, [r3, #16]
 8018428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801842c:	4313      	orrs	r3, r2
 801842e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018430:	7bfb      	ldrb	r3, [r7, #15]
}
 8018432:	4618      	mov	r0, r3
 8018434:	3710      	adds	r7, #16
 8018436:	46bd      	mov	sp, r7
 8018438:	bd80      	pop	{r7, pc}

0801843a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801843a:	b580      	push	{r7, lr}
 801843c:	b084      	sub	sp, #16
 801843e:	af00      	add	r7, sp, #0
 8018440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018442:	2300      	movs	r3, #0
 8018444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018446:	f7ff fe00 	bl	801804a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801844a:	f7fc fff9 	bl	8015440 <HAL_GetTick>
 801844e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018450:	e009      	b.n	8018466 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018452:	f7fc fff5 	bl	8015440 <HAL_GetTick>
 8018456:	4602      	mov	r2, r0
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	1ad3      	subs	r3, r2, r3
 801845c:	2b02      	cmp	r3, #2
 801845e:	d902      	bls.n	8018466 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8018460:	2303      	movs	r3, #3
 8018462:	73fb      	strb	r3, [r7, #15]
      break;
 8018464:	e004      	b.n	8018470 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018466:	f7ff fdff 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d1f0      	bne.n	8018452 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8018470:	7bfb      	ldrb	r3, [r7, #15]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d137      	bne.n	80184e6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	021b      	lsls	r3, r3, #8
 8018486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801848a:	4313      	orrs	r3, r2
 801848c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 801848e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018492:	691b      	ldr	r3, [r3, #16]
 8018494:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	689b      	ldr	r3, [r3, #8]
 801849c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80184a0:	4313      	orrs	r3, r2
 80184a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80184a4:	f7ff fdc2 	bl	801802c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80184a8:	f7fc ffca 	bl	8015440 <HAL_GetTick>
 80184ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80184ae:	e009      	b.n	80184c4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80184b0:	f7fc ffc6 	bl	8015440 <HAL_GetTick>
 80184b4:	4602      	mov	r2, r0
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	1ad3      	subs	r3, r2, r3
 80184ba:	2b02      	cmp	r3, #2
 80184bc:	d902      	bls.n	80184c4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80184be:	2303      	movs	r3, #3
 80184c0:	73fb      	strb	r3, [r7, #15]
        break;
 80184c2:	e004      	b.n	80184ce <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80184c4:	f7ff fdd0 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 80184c8:	4603      	mov	r3, r0
 80184ca:	2b01      	cmp	r3, #1
 80184cc:	d1f0      	bne.n	80184b0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80184ce:	7bfb      	ldrb	r3, [r7, #15]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d108      	bne.n	80184e6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80184d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80184d8:	691a      	ldr	r2, [r3, #16]
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	691b      	ldr	r3, [r3, #16]
 80184de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80184e2:	4313      	orrs	r3, r2
 80184e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80184e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3710      	adds	r7, #16
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80184f8:	2300      	movs	r3, #0
 80184fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80184fc:	f7ff fda5 	bl	801804a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018500:	f7fc ff9e 	bl	8015440 <HAL_GetTick>
 8018504:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018506:	e009      	b.n	801851c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018508:	f7fc ff9a 	bl	8015440 <HAL_GetTick>
 801850c:	4602      	mov	r2, r0
 801850e:	68bb      	ldr	r3, [r7, #8]
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	2b02      	cmp	r3, #2
 8018514:	d902      	bls.n	801851c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8018516:	2303      	movs	r3, #3
 8018518:	73fb      	strb	r3, [r7, #15]
      break;
 801851a:	e004      	b.n	8018526 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801851c:	f7ff fda4 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 8018520:	4603      	mov	r3, r0
 8018522:	2b00      	cmp	r3, #0
 8018524:	d1f0      	bne.n	8018508 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8018526:	7bfb      	ldrb	r3, [r7, #15]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d137      	bne.n	801859c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801852c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018530:	691b      	ldr	r3, [r3, #16]
 8018532:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	021b      	lsls	r3, r3, #8
 801853c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018540:	4313      	orrs	r3, r2
 8018542:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018548:	691b      	ldr	r3, [r3, #16]
 801854a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018556:	4313      	orrs	r3, r2
 8018558:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801855a:	f7ff fd67 	bl	801802c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801855e:	f7fc ff6f 	bl	8015440 <HAL_GetTick>
 8018562:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018564:	e009      	b.n	801857a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018566:	f7fc ff6b 	bl	8015440 <HAL_GetTick>
 801856a:	4602      	mov	r2, r0
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	1ad3      	subs	r3, r2, r3
 8018570:	2b02      	cmp	r3, #2
 8018572:	d902      	bls.n	801857a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018574:	2303      	movs	r3, #3
 8018576:	73fb      	strb	r3, [r7, #15]
        break;
 8018578:	e004      	b.n	8018584 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801857a:	f7ff fd75 	bl	8018068 <LL_RCC_PLLSAI1_IsReady>
 801857e:	4603      	mov	r3, r0
 8018580:	2b01      	cmp	r3, #1
 8018582:	d1f0      	bne.n	8018566 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018584:	7bfb      	ldrb	r3, [r7, #15]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d108      	bne.n	801859c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801858a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801858e:	691a      	ldr	r2, [r3, #16]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	691b      	ldr	r3, [r3, #16]
 8018594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018598:	4313      	orrs	r3, r2
 801859a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 801859c:	7bfb      	ldrb	r3, [r7, #15]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3710      	adds	r7, #16
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80185a6:	b580      	push	{r7, lr}
 80185a8:	b082      	sub	sp, #8
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d101      	bne.n	80185b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80185b4:	2301      	movs	r3, #1
 80185b6:	e049      	b.n	801864c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d106      	bne.n	80185d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f000 f841 	bl	8018654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	2202      	movs	r2, #2
 80185d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	3304      	adds	r3, #4
 80185e2:	4619      	mov	r1, r3
 80185e4:	4610      	mov	r0, r2
 80185e6:	f000 f9d5 	bl	8018994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2201      	movs	r2, #1
 80185ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	2201      	movs	r2, #1
 80185f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2201      	movs	r2, #1
 80185fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2201      	movs	r2, #1
 8018606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2201      	movs	r2, #1
 801860e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2201      	movs	r2, #1
 8018616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2201      	movs	r2, #1
 801861e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	2201      	movs	r2, #1
 8018626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	2201      	movs	r2, #1
 801862e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2201      	movs	r2, #1
 8018636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	2201      	movs	r2, #1
 801863e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	2201      	movs	r2, #1
 8018646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801864a:	2300      	movs	r3, #0
}
 801864c:	4618      	mov	r0, r3
 801864e:	3708      	adds	r7, #8
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}

08018654 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801865c:	bf00      	nop
 801865e:	370c      	adds	r7, #12
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr

08018668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018668:	b480      	push	{r7}
 801866a:	b085      	sub	sp, #20
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018676:	b2db      	uxtb	r3, r3
 8018678:	2b01      	cmp	r3, #1
 801867a:	d001      	beq.n	8018680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801867c:	2301      	movs	r3, #1
 801867e:	e036      	b.n	80186ee <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	2202      	movs	r2, #2
 8018684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	68da      	ldr	r2, [r3, #12]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	f042 0201 	orr.w	r2, r2, #1
 8018696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	4a17      	ldr	r2, [pc, #92]	; (80186fc <HAL_TIM_Base_Start_IT+0x94>)
 801869e:	4293      	cmp	r3, r2
 80186a0:	d004      	beq.n	80186ac <HAL_TIM_Base_Start_IT+0x44>
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80186aa:	d115      	bne.n	80186d8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	689a      	ldr	r2, [r3, #8]
 80186b2:	4b13      	ldr	r3, [pc, #76]	; (8018700 <HAL_TIM_Base_Start_IT+0x98>)
 80186b4:	4013      	ands	r3, r2
 80186b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	2b06      	cmp	r3, #6
 80186bc:	d015      	beq.n	80186ea <HAL_TIM_Base_Start_IT+0x82>
 80186be:	68fb      	ldr	r3, [r7, #12]
 80186c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186c4:	d011      	beq.n	80186ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f042 0201 	orr.w	r2, r2, #1
 80186d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186d6:	e008      	b.n	80186ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	681a      	ldr	r2, [r3, #0]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f042 0201 	orr.w	r2, r2, #1
 80186e6:	601a      	str	r2, [r3, #0]
 80186e8:	e000      	b.n	80186ec <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80186ec:	2300      	movs	r3, #0
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3714      	adds	r7, #20
 80186f2:	46bd      	mov	sp, r7
 80186f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f8:	4770      	bx	lr
 80186fa:	bf00      	nop
 80186fc:	40012c00 	.word	0x40012c00
 8018700:	00010007 	.word	0x00010007

08018704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	691b      	ldr	r3, [r3, #16]
 8018712:	f003 0302 	and.w	r3, r3, #2
 8018716:	2b02      	cmp	r3, #2
 8018718:	d122      	bne.n	8018760 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	68db      	ldr	r3, [r3, #12]
 8018720:	f003 0302 	and.w	r3, r3, #2
 8018724:	2b02      	cmp	r3, #2
 8018726:	d11b      	bne.n	8018760 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	f06f 0202 	mvn.w	r2, #2
 8018730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2201      	movs	r2, #1
 8018736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	699b      	ldr	r3, [r3, #24]
 801873e:	f003 0303 	and.w	r3, r3, #3
 8018742:	2b00      	cmp	r3, #0
 8018744:	d003      	beq.n	801874e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f000 f905 	bl	8018956 <HAL_TIM_IC_CaptureCallback>
 801874c:	e005      	b.n	801875a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f000 f8f7 	bl	8018942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	f000 f908 	bl	801896a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	2200      	movs	r2, #0
 801875e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	691b      	ldr	r3, [r3, #16]
 8018766:	f003 0304 	and.w	r3, r3, #4
 801876a:	2b04      	cmp	r3, #4
 801876c:	d122      	bne.n	80187b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	f003 0304 	and.w	r3, r3, #4
 8018778:	2b04      	cmp	r3, #4
 801877a:	d11b      	bne.n	80187b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	f06f 0204 	mvn.w	r2, #4
 8018784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	2202      	movs	r2, #2
 801878a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	699b      	ldr	r3, [r3, #24]
 8018792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018796:	2b00      	cmp	r3, #0
 8018798:	d003      	beq.n	80187a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801879a:	6878      	ldr	r0, [r7, #4]
 801879c:	f000 f8db 	bl	8018956 <HAL_TIM_IC_CaptureCallback>
 80187a0:	e005      	b.n	80187ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80187a2:	6878      	ldr	r0, [r7, #4]
 80187a4:	f000 f8cd 	bl	8018942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f000 f8de 	bl	801896a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2200      	movs	r2, #0
 80187b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	691b      	ldr	r3, [r3, #16]
 80187ba:	f003 0308 	and.w	r3, r3, #8
 80187be:	2b08      	cmp	r3, #8
 80187c0:	d122      	bne.n	8018808 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	68db      	ldr	r3, [r3, #12]
 80187c8:	f003 0308 	and.w	r3, r3, #8
 80187cc:	2b08      	cmp	r3, #8
 80187ce:	d11b      	bne.n	8018808 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	f06f 0208 	mvn.w	r2, #8
 80187d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	2204      	movs	r2, #4
 80187de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	69db      	ldr	r3, [r3, #28]
 80187e6:	f003 0303 	and.w	r3, r3, #3
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d003      	beq.n	80187f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f000 f8b1 	bl	8018956 <HAL_TIM_IC_CaptureCallback>
 80187f4:	e005      	b.n	8018802 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80187f6:	6878      	ldr	r0, [r7, #4]
 80187f8:	f000 f8a3 	bl	8018942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	f000 f8b4 	bl	801896a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2200      	movs	r2, #0
 8018806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	691b      	ldr	r3, [r3, #16]
 801880e:	f003 0310 	and.w	r3, r3, #16
 8018812:	2b10      	cmp	r3, #16
 8018814:	d122      	bne.n	801885c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	f003 0310 	and.w	r3, r3, #16
 8018820:	2b10      	cmp	r3, #16
 8018822:	d11b      	bne.n	801885c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	f06f 0210 	mvn.w	r2, #16
 801882c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	2208      	movs	r2, #8
 8018832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	69db      	ldr	r3, [r3, #28]
 801883a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801883e:	2b00      	cmp	r3, #0
 8018840:	d003      	beq.n	801884a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f000 f887 	bl	8018956 <HAL_TIM_IC_CaptureCallback>
 8018848:	e005      	b.n	8018856 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f000 f879 	bl	8018942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f000 f88a 	bl	801896a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2200      	movs	r2, #0
 801885a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	691b      	ldr	r3, [r3, #16]
 8018862:	f003 0301 	and.w	r3, r3, #1
 8018866:	2b01      	cmp	r3, #1
 8018868:	d10e      	bne.n	8018888 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	f003 0301 	and.w	r3, r3, #1
 8018874:	2b01      	cmp	r3, #1
 8018876:	d107      	bne.n	8018888 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	f06f 0201 	mvn.w	r2, #1
 8018880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018882:	6878      	ldr	r0, [r7, #4]
 8018884:	f7e8 f9a4 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	691b      	ldr	r3, [r3, #16]
 801888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018892:	2b80      	cmp	r3, #128	; 0x80
 8018894:	d10e      	bne.n	80188b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	68db      	ldr	r3, [r3, #12]
 801889c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188a0:	2b80      	cmp	r3, #128	; 0x80
 80188a2:	d107      	bne.n	80188b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80188ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80188ae:	6878      	ldr	r0, [r7, #4]
 80188b0:	f000 f8de 	bl	8018a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	691b      	ldr	r3, [r3, #16]
 80188ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80188c2:	d10e      	bne.n	80188e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	68db      	ldr	r3, [r3, #12]
 80188ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80188ce:	2b80      	cmp	r3, #128	; 0x80
 80188d0:	d107      	bne.n	80188e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80188da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f000 f8d1 	bl	8018a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	691b      	ldr	r3, [r3, #16]
 80188e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188ec:	2b40      	cmp	r3, #64	; 0x40
 80188ee:	d10e      	bne.n	801890e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188fa:	2b40      	cmp	r3, #64	; 0x40
 80188fc:	d107      	bne.n	801890e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f000 f838 	bl	801897e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	691b      	ldr	r3, [r3, #16]
 8018914:	f003 0320 	and.w	r3, r3, #32
 8018918:	2b20      	cmp	r3, #32
 801891a:	d10e      	bne.n	801893a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	68db      	ldr	r3, [r3, #12]
 8018922:	f003 0320 	and.w	r3, r3, #32
 8018926:	2b20      	cmp	r3, #32
 8018928:	d107      	bne.n	801893a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	f06f 0220 	mvn.w	r2, #32
 8018932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018934:	6878      	ldr	r0, [r7, #4]
 8018936:	f000 f891 	bl	8018a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801893a:	bf00      	nop
 801893c:	3708      	adds	r7, #8
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}

08018942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018942:	b480      	push	{r7}
 8018944:	b083      	sub	sp, #12
 8018946:	af00      	add	r7, sp, #0
 8018948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801894a:	bf00      	nop
 801894c:	370c      	adds	r7, #12
 801894e:	46bd      	mov	sp, r7
 8018950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018954:	4770      	bx	lr

08018956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018956:	b480      	push	{r7}
 8018958:	b083      	sub	sp, #12
 801895a:	af00      	add	r7, sp, #0
 801895c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801895e:	bf00      	nop
 8018960:	370c      	adds	r7, #12
 8018962:	46bd      	mov	sp, r7
 8018964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018968:	4770      	bx	lr

0801896a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801896a:	b480      	push	{r7}
 801896c:	b083      	sub	sp, #12
 801896e:	af00      	add	r7, sp, #0
 8018970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018972:	bf00      	nop
 8018974:	370c      	adds	r7, #12
 8018976:	46bd      	mov	sp, r7
 8018978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897c:	4770      	bx	lr

0801897e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801897e:	b480      	push	{r7}
 8018980:	b083      	sub	sp, #12
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018986:	bf00      	nop
 8018988:	370c      	adds	r7, #12
 801898a:	46bd      	mov	sp, r7
 801898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018990:	4770      	bx	lr
	...

08018994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8018994:	b480      	push	{r7}
 8018996:	b085      	sub	sp, #20
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	4a2a      	ldr	r2, [pc, #168]	; (8018a50 <TIM_Base_SetConfig+0xbc>)
 80189a8:	4293      	cmp	r3, r2
 80189aa:	d003      	beq.n	80189b4 <TIM_Base_SetConfig+0x20>
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80189b2:	d108      	bne.n	80189c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80189ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	685b      	ldr	r3, [r3, #4]
 80189c0:	68fa      	ldr	r2, [r7, #12]
 80189c2:	4313      	orrs	r3, r2
 80189c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4a21      	ldr	r2, [pc, #132]	; (8018a50 <TIM_Base_SetConfig+0xbc>)
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d00b      	beq.n	80189e6 <TIM_Base_SetConfig+0x52>
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80189d4:	d007      	beq.n	80189e6 <TIM_Base_SetConfig+0x52>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4a1e      	ldr	r2, [pc, #120]	; (8018a54 <TIM_Base_SetConfig+0xc0>)
 80189da:	4293      	cmp	r3, r2
 80189dc:	d003      	beq.n	80189e6 <TIM_Base_SetConfig+0x52>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4a1d      	ldr	r2, [pc, #116]	; (8018a58 <TIM_Base_SetConfig+0xc4>)
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d108      	bne.n	80189f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80189ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	68fa      	ldr	r2, [r7, #12]
 80189f4:	4313      	orrs	r3, r2
 80189f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	695b      	ldr	r3, [r3, #20]
 8018a02:	4313      	orrs	r3, r2
 8018a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	68fa      	ldr	r2, [r7, #12]
 8018a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	689a      	ldr	r2, [r3, #8]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	681a      	ldr	r2, [r3, #0]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	4a0c      	ldr	r2, [pc, #48]	; (8018a50 <TIM_Base_SetConfig+0xbc>)
 8018a20:	4293      	cmp	r3, r2
 8018a22:	d007      	beq.n	8018a34 <TIM_Base_SetConfig+0xa0>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	4a0b      	ldr	r2, [pc, #44]	; (8018a54 <TIM_Base_SetConfig+0xc0>)
 8018a28:	4293      	cmp	r3, r2
 8018a2a:	d003      	beq.n	8018a34 <TIM_Base_SetConfig+0xa0>
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	4a0a      	ldr	r2, [pc, #40]	; (8018a58 <TIM_Base_SetConfig+0xc4>)
 8018a30:	4293      	cmp	r3, r2
 8018a32:	d103      	bne.n	8018a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	691a      	ldr	r2, [r3, #16]
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2201      	movs	r2, #1
 8018a40:	615a      	str	r2, [r3, #20]
}
 8018a42:	bf00      	nop
 8018a44:	3714      	adds	r7, #20
 8018a46:	46bd      	mov	sp, r7
 8018a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4c:	4770      	bx	lr
 8018a4e:	bf00      	nop
 8018a50:	40012c00 	.word	0x40012c00
 8018a54:	40014400 	.word	0x40014400
 8018a58:	40014800 	.word	0x40014800

08018a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018a5c:	b480      	push	{r7}
 8018a5e:	b083      	sub	sp, #12
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018a64:	bf00      	nop
 8018a66:	370c      	adds	r7, #12
 8018a68:	46bd      	mov	sp, r7
 8018a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6e:	4770      	bx	lr

08018a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018a70:	b480      	push	{r7}
 8018a72:	b083      	sub	sp, #12
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018a78:	bf00      	nop
 8018a7a:	370c      	adds	r7, #12
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a82:	4770      	bx	lr

08018a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018a84:	b480      	push	{r7}
 8018a86:	b083      	sub	sp, #12
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018a8c:	bf00      	nop
 8018a8e:	370c      	adds	r7, #12
 8018a90:	46bd      	mov	sp, r7
 8018a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a96:	4770      	bx	lr

08018a98 <LL_RCC_GetUSARTClockSource>:
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b083      	sub	sp, #12
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8018aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018aa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	4013      	ands	r3, r2
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	370c      	adds	r7, #12
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab6:	4770      	bx	lr

08018ab8 <LL_RCC_GetLPUARTClockSource>:
{
 8018ab8:	b480      	push	{r7}
 8018aba:	b083      	sub	sp, #12
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8018ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018ac4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	4013      	ands	r3, r2
}
 8018acc:	4618      	mov	r0, r3
 8018ace:	370c      	adds	r7, #12
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad6:	4770      	bx	lr

08018ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d101      	bne.n	8018aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018ae6:	2301      	movs	r3, #1
 8018ae8:	e042      	b.n	8018b70 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d106      	bne.n	8018b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	2200      	movs	r2, #0
 8018af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018afc:	6878      	ldr	r0, [r7, #4]
 8018afe:	f7e8 f8d1 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2224      	movs	r2, #36	; 0x24
 8018b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	681a      	ldr	r2, [r3, #0]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f022 0201 	bic.w	r2, r2, #1
 8018b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f000 f82c 	bl	8018b78 <UART_SetConfig>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d101      	bne.n	8018b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018b26:	2301      	movs	r3, #1
 8018b28:	e022      	b.n	8018b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d002      	beq.n	8018b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f000 fa46 	bl	8018fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	685a      	ldr	r2, [r3, #4]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	689a      	ldr	r2, [r3, #8]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	681a      	ldr	r2, [r3, #0]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f042 0201 	orr.w	r2, r2, #1
 8018b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f000 facd 	bl	8019108 <UART_CheckIdleState>
 8018b6e:	4603      	mov	r3, r0
}
 8018b70:	4618      	mov	r0, r3
 8018b72:	3708      	adds	r7, #8
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bd80      	pop	{r7, pc}

08018b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018b7c:	b08c      	sub	sp, #48	; 0x30
 8018b7e:	af00      	add	r7, sp, #0
 8018b80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018b82:	2300      	movs	r3, #0
 8018b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	689a      	ldr	r2, [r3, #8]
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	691b      	ldr	r3, [r3, #16]
 8018b90:	431a      	orrs	r2, r3
 8018b92:	697b      	ldr	r3, [r7, #20]
 8018b94:	695b      	ldr	r3, [r3, #20]
 8018b96:	431a      	orrs	r2, r3
 8018b98:	697b      	ldr	r3, [r7, #20]
 8018b9a:	69db      	ldr	r3, [r3, #28]
 8018b9c:	4313      	orrs	r3, r2
 8018b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	681a      	ldr	r2, [r3, #0]
 8018ba6:	4baf      	ldr	r3, [pc, #700]	; (8018e64 <UART_SetConfig+0x2ec>)
 8018ba8:	4013      	ands	r3, r2
 8018baa:	697a      	ldr	r2, [r7, #20]
 8018bac:	6812      	ldr	r2, [r2, #0]
 8018bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018bb0:	430b      	orrs	r3, r1
 8018bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	685b      	ldr	r3, [r3, #4]
 8018bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018bbe:	697b      	ldr	r3, [r7, #20]
 8018bc0:	68da      	ldr	r2, [r3, #12]
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	430a      	orrs	r2, r1
 8018bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	699b      	ldr	r3, [r3, #24]
 8018bce:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4aa4      	ldr	r2, [pc, #656]	; (8018e68 <UART_SetConfig+0x2f0>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d004      	beq.n	8018be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018bda:	697b      	ldr	r3, [r7, #20]
 8018bdc:	6a1b      	ldr	r3, [r3, #32]
 8018bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018be0:	4313      	orrs	r3, r2
 8018be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018be4:	697b      	ldr	r3, [r7, #20]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	689b      	ldr	r3, [r3, #8]
 8018bea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018bee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8018bf2:	697a      	ldr	r2, [r7, #20]
 8018bf4:	6812      	ldr	r2, [r2, #0]
 8018bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018bf8:	430b      	orrs	r3, r1
 8018bfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018bfc:	697b      	ldr	r3, [r7, #20]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c02:	f023 010f 	bic.w	r1, r3, #15
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	430a      	orrs	r2, r1
 8018c10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018c12:	697b      	ldr	r3, [r7, #20]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	4a95      	ldr	r2, [pc, #596]	; (8018e6c <UART_SetConfig+0x2f4>)
 8018c18:	4293      	cmp	r3, r2
 8018c1a:	d125      	bne.n	8018c68 <UART_SetConfig+0xf0>
 8018c1c:	2003      	movs	r0, #3
 8018c1e:	f7ff ff3b 	bl	8018a98 <LL_RCC_GetUSARTClockSource>
 8018c22:	4603      	mov	r3, r0
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	d81b      	bhi.n	8018c60 <UART_SetConfig+0xe8>
 8018c28:	a201      	add	r2, pc, #4	; (adr r2, 8018c30 <UART_SetConfig+0xb8>)
 8018c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c2e:	bf00      	nop
 8018c30:	08018c41 	.word	0x08018c41
 8018c34:	08018c51 	.word	0x08018c51
 8018c38:	08018c49 	.word	0x08018c49
 8018c3c:	08018c59 	.word	0x08018c59
 8018c40:	2301      	movs	r3, #1
 8018c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c46:	e042      	b.n	8018cce <UART_SetConfig+0x156>
 8018c48:	2302      	movs	r3, #2
 8018c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c4e:	e03e      	b.n	8018cce <UART_SetConfig+0x156>
 8018c50:	2304      	movs	r3, #4
 8018c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c56:	e03a      	b.n	8018cce <UART_SetConfig+0x156>
 8018c58:	2308      	movs	r3, #8
 8018c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c5e:	e036      	b.n	8018cce <UART_SetConfig+0x156>
 8018c60:	2310      	movs	r3, #16
 8018c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018c66:	e032      	b.n	8018cce <UART_SetConfig+0x156>
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	4a7e      	ldr	r2, [pc, #504]	; (8018e68 <UART_SetConfig+0x2f0>)
 8018c6e:	4293      	cmp	r3, r2
 8018c70:	d12a      	bne.n	8018cc8 <UART_SetConfig+0x150>
 8018c72:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8018c76:	f7ff ff1f 	bl	8018ab8 <LL_RCC_GetLPUARTClockSource>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018c80:	d01a      	beq.n	8018cb8 <UART_SetConfig+0x140>
 8018c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8018c86:	d81b      	bhi.n	8018cc0 <UART_SetConfig+0x148>
 8018c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c8c:	d00c      	beq.n	8018ca8 <UART_SetConfig+0x130>
 8018c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c92:	d815      	bhi.n	8018cc0 <UART_SetConfig+0x148>
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d003      	beq.n	8018ca0 <UART_SetConfig+0x128>
 8018c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018c9c:	d008      	beq.n	8018cb0 <UART_SetConfig+0x138>
 8018c9e:	e00f      	b.n	8018cc0 <UART_SetConfig+0x148>
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018ca6:	e012      	b.n	8018cce <UART_SetConfig+0x156>
 8018ca8:	2302      	movs	r3, #2
 8018caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cae:	e00e      	b.n	8018cce <UART_SetConfig+0x156>
 8018cb0:	2304      	movs	r3, #4
 8018cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cb6:	e00a      	b.n	8018cce <UART_SetConfig+0x156>
 8018cb8:	2308      	movs	r3, #8
 8018cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cbe:	e006      	b.n	8018cce <UART_SetConfig+0x156>
 8018cc0:	2310      	movs	r3, #16
 8018cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018cc6:	e002      	b.n	8018cce <UART_SetConfig+0x156>
 8018cc8:	2310      	movs	r3, #16
 8018cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018cce:	697b      	ldr	r3, [r7, #20]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a65      	ldr	r2, [pc, #404]	; (8018e68 <UART_SetConfig+0x2f0>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	f040 8097 	bne.w	8018e08 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018cda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018cde:	2b08      	cmp	r3, #8
 8018ce0:	d823      	bhi.n	8018d2a <UART_SetConfig+0x1b2>
 8018ce2:	a201      	add	r2, pc, #4	; (adr r2, 8018ce8 <UART_SetConfig+0x170>)
 8018ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce8:	08018d0d 	.word	0x08018d0d
 8018cec:	08018d2b 	.word	0x08018d2b
 8018cf0:	08018d15 	.word	0x08018d15
 8018cf4:	08018d2b 	.word	0x08018d2b
 8018cf8:	08018d1b 	.word	0x08018d1b
 8018cfc:	08018d2b 	.word	0x08018d2b
 8018d00:	08018d2b 	.word	0x08018d2b
 8018d04:	08018d2b 	.word	0x08018d2b
 8018d08:	08018d23 	.word	0x08018d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018d0c:	f7fe ff00 	bl	8017b10 <HAL_RCC_GetPCLK1Freq>
 8018d10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d12:	e010      	b.n	8018d36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018d14:	4b56      	ldr	r3, [pc, #344]	; (8018e70 <UART_SetConfig+0x2f8>)
 8018d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d18:	e00d      	b.n	8018d36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018d1a:	f7fe fe79 	bl	8017a10 <HAL_RCC_GetSysClockFreq>
 8018d1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018d20:	e009      	b.n	8018d36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018d28:	e005      	b.n	8018d36 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018d2e:	2301      	movs	r3, #1
 8018d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018d34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	f000 812a 	beq.w	8018f92 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018d3e:	697b      	ldr	r3, [r7, #20]
 8018d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d42:	4a4c      	ldr	r2, [pc, #304]	; (8018e74 <UART_SetConfig+0x2fc>)
 8018d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d48:	461a      	mov	r2, r3
 8018d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018d50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018d52:	697b      	ldr	r3, [r7, #20]
 8018d54:	685a      	ldr	r2, [r3, #4]
 8018d56:	4613      	mov	r3, r2
 8018d58:	005b      	lsls	r3, r3, #1
 8018d5a:	4413      	add	r3, r2
 8018d5c:	69ba      	ldr	r2, [r7, #24]
 8018d5e:	429a      	cmp	r2, r3
 8018d60:	d305      	bcc.n	8018d6e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018d68:	69ba      	ldr	r2, [r7, #24]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d903      	bls.n	8018d76 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8018d6e:	2301      	movs	r3, #1
 8018d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018d74:	e10d      	b.n	8018f92 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d78:	2200      	movs	r2, #0
 8018d7a:	60bb      	str	r3, [r7, #8]
 8018d7c:	60fa      	str	r2, [r7, #12]
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d82:	4a3c      	ldr	r2, [pc, #240]	; (8018e74 <UART_SetConfig+0x2fc>)
 8018d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018d88:	b29b      	uxth	r3, r3
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	603b      	str	r3, [r7, #0]
 8018d8e:	607a      	str	r2, [r7, #4]
 8018d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018d98:	f7e7 fa92 	bl	80002c0 <__aeabi_uldivmod>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	4610      	mov	r0, r2
 8018da2:	4619      	mov	r1, r3
 8018da4:	f04f 0200 	mov.w	r2, #0
 8018da8:	f04f 0300 	mov.w	r3, #0
 8018dac:	020b      	lsls	r3, r1, #8
 8018dae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018db2:	0202      	lsls	r2, r0, #8
 8018db4:	6979      	ldr	r1, [r7, #20]
 8018db6:	6849      	ldr	r1, [r1, #4]
 8018db8:	0849      	lsrs	r1, r1, #1
 8018dba:	2000      	movs	r0, #0
 8018dbc:	460c      	mov	r4, r1
 8018dbe:	4605      	mov	r5, r0
 8018dc0:	eb12 0804 	adds.w	r8, r2, r4
 8018dc4:	eb43 0905 	adc.w	r9, r3, r5
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	685b      	ldr	r3, [r3, #4]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	469a      	mov	sl, r3
 8018dd0:	4693      	mov	fp, r2
 8018dd2:	4652      	mov	r2, sl
 8018dd4:	465b      	mov	r3, fp
 8018dd6:	4640      	mov	r0, r8
 8018dd8:	4649      	mov	r1, r9
 8018dda:	f7e7 fa71 	bl	80002c0 <__aeabi_uldivmod>
 8018dde:	4602      	mov	r2, r0
 8018de0:	460b      	mov	r3, r1
 8018de2:	4613      	mov	r3, r2
 8018de4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018de6:	6a3b      	ldr	r3, [r7, #32]
 8018de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018dec:	d308      	bcc.n	8018e00 <UART_SetConfig+0x288>
 8018dee:	6a3b      	ldr	r3, [r7, #32]
 8018df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018df4:	d204      	bcs.n	8018e00 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8018df6:	697b      	ldr	r3, [r7, #20]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	6a3a      	ldr	r2, [r7, #32]
 8018dfc:	60da      	str	r2, [r3, #12]
 8018dfe:	e0c8      	b.n	8018f92 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8018e00:	2301      	movs	r3, #1
 8018e02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018e06:	e0c4      	b.n	8018f92 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	69db      	ldr	r3, [r3, #28]
 8018e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018e10:	d16d      	bne.n	8018eee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8018e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018e16:	3b01      	subs	r3, #1
 8018e18:	2b07      	cmp	r3, #7
 8018e1a:	d82d      	bhi.n	8018e78 <UART_SetConfig+0x300>
 8018e1c:	a201      	add	r2, pc, #4	; (adr r2, 8018e24 <UART_SetConfig+0x2ac>)
 8018e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e22:	bf00      	nop
 8018e24:	08018e45 	.word	0x08018e45
 8018e28:	08018e4d 	.word	0x08018e4d
 8018e2c:	08018e79 	.word	0x08018e79
 8018e30:	08018e53 	.word	0x08018e53
 8018e34:	08018e79 	.word	0x08018e79
 8018e38:	08018e79 	.word	0x08018e79
 8018e3c:	08018e79 	.word	0x08018e79
 8018e40:	08018e5b 	.word	0x08018e5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018e44:	f7fe fe7a 	bl	8017b3c <HAL_RCC_GetPCLK2Freq>
 8018e48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e4a:	e01b      	b.n	8018e84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018e4c:	4b08      	ldr	r3, [pc, #32]	; (8018e70 <UART_SetConfig+0x2f8>)
 8018e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e50:	e018      	b.n	8018e84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018e52:	f7fe fddd 	bl	8017a10 <HAL_RCC_GetSysClockFreq>
 8018e56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018e58:	e014      	b.n	8018e84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018e60:	e010      	b.n	8018e84 <UART_SetConfig+0x30c>
 8018e62:	bf00      	nop
 8018e64:	cfff69f3 	.word	0xcfff69f3
 8018e68:	40008000 	.word	0x40008000
 8018e6c:	40013800 	.word	0x40013800
 8018e70:	00f42400 	.word	0x00f42400
 8018e74:	0801a93c 	.word	0x0801a93c
      default:
        pclk = 0U;
 8018e78:	2300      	movs	r3, #0
 8018e7a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018e82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	f000 8083 	beq.w	8018f92 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e90:	4a4a      	ldr	r2, [pc, #296]	; (8018fbc <UART_SetConfig+0x444>)
 8018e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e96:	461a      	mov	r2, r3
 8018e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e9e:	005a      	lsls	r2, r3, #1
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	085b      	lsrs	r3, r3, #1
 8018ea6:	441a      	add	r2, r3
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	685b      	ldr	r3, [r3, #4]
 8018eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8018eb0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018eb2:	6a3b      	ldr	r3, [r7, #32]
 8018eb4:	2b0f      	cmp	r3, #15
 8018eb6:	d916      	bls.n	8018ee6 <UART_SetConfig+0x36e>
 8018eb8:	6a3b      	ldr	r3, [r7, #32]
 8018eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ebe:	d212      	bcs.n	8018ee6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018ec0:	6a3b      	ldr	r3, [r7, #32]
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	f023 030f 	bic.w	r3, r3, #15
 8018ec8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018eca:	6a3b      	ldr	r3, [r7, #32]
 8018ecc:	085b      	lsrs	r3, r3, #1
 8018ece:	b29b      	uxth	r3, r3
 8018ed0:	f003 0307 	and.w	r3, r3, #7
 8018ed4:	b29a      	uxth	r2, r3
 8018ed6:	8bfb      	ldrh	r3, [r7, #30]
 8018ed8:	4313      	orrs	r3, r2
 8018eda:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	8bfa      	ldrh	r2, [r7, #30]
 8018ee2:	60da      	str	r2, [r3, #12]
 8018ee4:	e055      	b.n	8018f92 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018eec:	e051      	b.n	8018f92 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018ef2:	3b01      	subs	r3, #1
 8018ef4:	2b07      	cmp	r3, #7
 8018ef6:	d822      	bhi.n	8018f3e <UART_SetConfig+0x3c6>
 8018ef8:	a201      	add	r2, pc, #4	; (adr r2, 8018f00 <UART_SetConfig+0x388>)
 8018efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018efe:	bf00      	nop
 8018f00:	08018f21 	.word	0x08018f21
 8018f04:	08018f29 	.word	0x08018f29
 8018f08:	08018f3f 	.word	0x08018f3f
 8018f0c:	08018f2f 	.word	0x08018f2f
 8018f10:	08018f3f 	.word	0x08018f3f
 8018f14:	08018f3f 	.word	0x08018f3f
 8018f18:	08018f3f 	.word	0x08018f3f
 8018f1c:	08018f37 	.word	0x08018f37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018f20:	f7fe fe0c 	bl	8017b3c <HAL_RCC_GetPCLK2Freq>
 8018f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f26:	e010      	b.n	8018f4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018f28:	4b25      	ldr	r3, [pc, #148]	; (8018fc0 <UART_SetConfig+0x448>)
 8018f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018f2c:	e00d      	b.n	8018f4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018f2e:	f7fe fd6f 	bl	8017a10 <HAL_RCC_GetSysClockFreq>
 8018f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018f34:	e009      	b.n	8018f4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018f3c:	e005      	b.n	8018f4a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8018f3e:	2300      	movs	r3, #0
 8018f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018f42:	2301      	movs	r3, #1
 8018f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018f48:	bf00      	nop
    }

    if (pclk != 0U)
 8018f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d020      	beq.n	8018f92 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f54:	4a19      	ldr	r2, [pc, #100]	; (8018fbc <UART_SetConfig+0x444>)
 8018f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	685b      	ldr	r3, [r3, #4]
 8018f66:	085b      	lsrs	r3, r3, #1
 8018f68:	441a      	add	r2, r3
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018f74:	6a3b      	ldr	r3, [r7, #32]
 8018f76:	2b0f      	cmp	r3, #15
 8018f78:	d908      	bls.n	8018f8c <UART_SetConfig+0x414>
 8018f7a:	6a3b      	ldr	r3, [r7, #32]
 8018f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f80:	d204      	bcs.n	8018f8c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8018f82:	697b      	ldr	r3, [r7, #20]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	6a3a      	ldr	r2, [r7, #32]
 8018f88:	60da      	str	r2, [r3, #12]
 8018f8a:	e002      	b.n	8018f92 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018f92:	697b      	ldr	r3, [r7, #20]
 8018f94:	2201      	movs	r2, #1
 8018f96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018f9a:	697b      	ldr	r3, [r7, #20]
 8018f9c:	2201      	movs	r2, #1
 8018f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018fa2:	697b      	ldr	r3, [r7, #20]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	2200      	movs	r2, #0
 8018fac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8018fae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	3730      	adds	r7, #48	; 0x30
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018fbc:	0801a93c 	.word	0x0801a93c
 8018fc0:	00f42400 	.word	0x00f42400

08018fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018fc4:	b480      	push	{r7}
 8018fc6:	b083      	sub	sp, #12
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fd0:	f003 0301 	and.w	r3, r3, #1
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d00a      	beq.n	8018fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	685b      	ldr	r3, [r3, #4]
 8018fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	430a      	orrs	r2, r1
 8018fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ff2:	f003 0302 	and.w	r3, r3, #2
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d00a      	beq.n	8019010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	685b      	ldr	r3, [r3, #4]
 8019000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	430a      	orrs	r2, r1
 801900e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019014:	f003 0304 	and.w	r3, r3, #4
 8019018:	2b00      	cmp	r3, #0
 801901a:	d00a      	beq.n	8019032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	685b      	ldr	r3, [r3, #4]
 8019022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	430a      	orrs	r2, r1
 8019030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019036:	f003 0308 	and.w	r3, r3, #8
 801903a:	2b00      	cmp	r3, #0
 801903c:	d00a      	beq.n	8019054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	685b      	ldr	r3, [r3, #4]
 8019044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	430a      	orrs	r2, r1
 8019052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019058:	f003 0310 	and.w	r3, r3, #16
 801905c:	2b00      	cmp	r3, #0
 801905e:	d00a      	beq.n	8019076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	689b      	ldr	r3, [r3, #8]
 8019066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	430a      	orrs	r2, r1
 8019074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801907a:	f003 0320 	and.w	r3, r3, #32
 801907e:	2b00      	cmp	r3, #0
 8019080:	d00a      	beq.n	8019098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	689b      	ldr	r3, [r3, #8]
 8019088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	430a      	orrs	r2, r1
 8019096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d01a      	beq.n	80190da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	430a      	orrs	r2, r1
 80190b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80190c2:	d10a      	bne.n	80190da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	685b      	ldr	r3, [r3, #4]
 80190ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	430a      	orrs	r2, r1
 80190d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d00a      	beq.n	80190fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	685b      	ldr	r3, [r3, #4]
 80190ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	430a      	orrs	r2, r1
 80190fa:	605a      	str	r2, [r3, #4]
  }
}
 80190fc:	bf00      	nop
 80190fe:	370c      	adds	r7, #12
 8019100:	46bd      	mov	sp, r7
 8019102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019106:	4770      	bx	lr

08019108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b086      	sub	sp, #24
 801910c:	af02      	add	r7, sp, #8
 801910e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2200      	movs	r2, #0
 8019114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019118:	f7fc f992 	bl	8015440 <HAL_GetTick>
 801911c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	f003 0308 	and.w	r3, r3, #8
 8019128:	2b08      	cmp	r3, #8
 801912a:	d10e      	bne.n	801914a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801912c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8019130:	9300      	str	r3, [sp, #0]
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	2200      	movs	r2, #0
 8019136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f000 f82f 	bl	801919e <UART_WaitOnFlagUntilTimeout>
 8019140:	4603      	mov	r3, r0
 8019142:	2b00      	cmp	r3, #0
 8019144:	d001      	beq.n	801914a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019146:	2303      	movs	r3, #3
 8019148:	e025      	b.n	8019196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f003 0304 	and.w	r3, r3, #4
 8019154:	2b04      	cmp	r3, #4
 8019156:	d10e      	bne.n	8019176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801915c:	9300      	str	r3, [sp, #0]
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	2200      	movs	r2, #0
 8019162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8019166:	6878      	ldr	r0, [r7, #4]
 8019168:	f000 f819 	bl	801919e <UART_WaitOnFlagUntilTimeout>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d001      	beq.n	8019176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019172:	2303      	movs	r3, #3
 8019174:	e00f      	b.n	8019196 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2220      	movs	r2, #32
 801917a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2220      	movs	r2, #32
 8019182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2200      	movs	r2, #0
 801918a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2200      	movs	r2, #0
 8019190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8019194:	2300      	movs	r3, #0
}
 8019196:	4618      	mov	r0, r3
 8019198:	3710      	adds	r7, #16
 801919a:	46bd      	mov	sp, r7
 801919c:	bd80      	pop	{r7, pc}

0801919e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801919e:	b580      	push	{r7, lr}
 80191a0:	b09c      	sub	sp, #112	; 0x70
 80191a2:	af00      	add	r7, sp, #0
 80191a4:	60f8      	str	r0, [r7, #12]
 80191a6:	60b9      	str	r1, [r7, #8]
 80191a8:	603b      	str	r3, [r7, #0]
 80191aa:	4613      	mov	r3, r2
 80191ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191ae:	e0a9      	b.n	8019304 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80191b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191b6:	f000 80a5 	beq.w	8019304 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80191ba:	f7fc f941 	bl	8015440 <HAL_GetTick>
 80191be:	4602      	mov	r2, r0
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d302      	bcc.n	80191d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80191ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d140      	bne.n	8019252 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191d8:	e853 3f00 	ldrex	r3, [r3]
 80191dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80191de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80191e4:	667b      	str	r3, [r7, #100]	; 0x64
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	461a      	mov	r2, r3
 80191ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80191ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80191f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80191f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80191f6:	e841 2300 	strex	r3, r2, [r1]
 80191fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80191fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d1e6      	bne.n	80191d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	3308      	adds	r3, #8
 8019208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801920a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801920c:	e853 3f00 	ldrex	r3, [r3]
 8019210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019214:	f023 0301 	bic.w	r3, r3, #1
 8019218:	663b      	str	r3, [r7, #96]	; 0x60
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	3308      	adds	r3, #8
 8019220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019222:	64ba      	str	r2, [r7, #72]	; 0x48
 8019224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8019228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801922a:	e841 2300 	strex	r3, r2, [r1]
 801922e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8019230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019232:	2b00      	cmp	r3, #0
 8019234:	d1e5      	bne.n	8019202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	2220      	movs	r2, #32
 801923a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	2220      	movs	r2, #32
 8019242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	2200      	movs	r2, #0
 801924a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801924e:	2303      	movs	r3, #3
 8019250:	e069      	b.n	8019326 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f003 0304 	and.w	r3, r3, #4
 801925c:	2b00      	cmp	r3, #0
 801925e:	d051      	beq.n	8019304 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	69db      	ldr	r3, [r3, #28]
 8019266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801926a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801926e:	d149      	bne.n	8019304 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019278:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019282:	e853 3f00 	ldrex	r3, [r3]
 8019286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8019288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801928a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801928e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	461a      	mov	r2, r3
 8019296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019298:	637b      	str	r3, [r7, #52]	; 0x34
 801929a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801929c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801929e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80192a0:	e841 2300 	strex	r3, r2, [r1]
 80192a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80192a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d1e6      	bne.n	801927a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	3308      	adds	r3, #8
 80192b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	e853 3f00 	ldrex	r3, [r3]
 80192ba:	613b      	str	r3, [r7, #16]
   return(result);
 80192bc:	693b      	ldr	r3, [r7, #16]
 80192be:	f023 0301 	bic.w	r3, r3, #1
 80192c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	3308      	adds	r3, #8
 80192ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80192cc:	623a      	str	r2, [r7, #32]
 80192ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192d0:	69f9      	ldr	r1, [r7, #28]
 80192d2:	6a3a      	ldr	r2, [r7, #32]
 80192d4:	e841 2300 	strex	r3, r2, [r1]
 80192d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80192da:	69bb      	ldr	r3, [r7, #24]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d1e5      	bne.n	80192ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	2220      	movs	r2, #32
 80192e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2220      	movs	r2, #32
 80192ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	2220      	movs	r2, #32
 80192f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	2200      	movs	r2, #0
 80192fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8019300:	2303      	movs	r3, #3
 8019302:	e010      	b.n	8019326 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	69da      	ldr	r2, [r3, #28]
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	4013      	ands	r3, r2
 801930e:	68ba      	ldr	r2, [r7, #8]
 8019310:	429a      	cmp	r2, r3
 8019312:	bf0c      	ite	eq
 8019314:	2301      	moveq	r3, #1
 8019316:	2300      	movne	r3, #0
 8019318:	b2db      	uxtb	r3, r3
 801931a:	461a      	mov	r2, r3
 801931c:	79fb      	ldrb	r3, [r7, #7]
 801931e:	429a      	cmp	r2, r3
 8019320:	f43f af46 	beq.w	80191b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019324:	2300      	movs	r3, #0
}
 8019326:	4618      	mov	r0, r3
 8019328:	3770      	adds	r7, #112	; 0x70
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801932e:	b480      	push	{r7}
 8019330:	b085      	sub	sp, #20
 8019332:	af00      	add	r7, sp, #0
 8019334:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801933c:	2b01      	cmp	r3, #1
 801933e:	d101      	bne.n	8019344 <HAL_UARTEx_DisableFifoMode+0x16>
 8019340:	2302      	movs	r3, #2
 8019342:	e027      	b.n	8019394 <HAL_UARTEx_DisableFifoMode+0x66>
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	2201      	movs	r2, #1
 8019348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	2224      	movs	r2, #36	; 0x24
 8019350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f022 0201 	bic.w	r2, r2, #1
 801936a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8019372:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2200      	movs	r2, #0
 8019378:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	68fa      	ldr	r2, [r7, #12]
 8019380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2220      	movs	r2, #32
 8019386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2200      	movs	r2, #0
 801938e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8019392:	2300      	movs	r3, #0
}
 8019394:	4618      	mov	r0, r3
 8019396:	3714      	adds	r7, #20
 8019398:	46bd      	mov	sp, r7
 801939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939e:	4770      	bx	lr

080193a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b084      	sub	sp, #16
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80193b0:	2b01      	cmp	r3, #1
 80193b2:	d101      	bne.n	80193b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80193b4:	2302      	movs	r3, #2
 80193b6:	e02d      	b.n	8019414 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2201      	movs	r2, #1
 80193bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2224      	movs	r2, #36	; 0x24
 80193c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f022 0201 	bic.w	r2, r2, #1
 80193de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	689b      	ldr	r3, [r3, #8]
 80193e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	683a      	ldr	r2, [r7, #0]
 80193f0:	430a      	orrs	r2, r1
 80193f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f000 f84f 	bl	8019498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	68fa      	ldr	r2, [r7, #12]
 8019400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	2220      	movs	r2, #32
 8019406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	2200      	movs	r2, #0
 801940e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8019412:	2300      	movs	r3, #0
}
 8019414:	4618      	mov	r0, r3
 8019416:	3710      	adds	r7, #16
 8019418:	46bd      	mov	sp, r7
 801941a:	bd80      	pop	{r7, pc}

0801941c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	6078      	str	r0, [r7, #4]
 8019424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801942c:	2b01      	cmp	r3, #1
 801942e:	d101      	bne.n	8019434 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8019430:	2302      	movs	r3, #2
 8019432:	e02d      	b.n	8019490 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2201      	movs	r2, #1
 8019438:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2224      	movs	r2, #36	; 0x24
 8019440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	681a      	ldr	r2, [r3, #0]
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	f022 0201 	bic.w	r2, r2, #1
 801945a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	689b      	ldr	r3, [r3, #8]
 8019462:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	683a      	ldr	r2, [r7, #0]
 801946c:	430a      	orrs	r2, r1
 801946e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019470:	6878      	ldr	r0, [r7, #4]
 8019472:	f000 f811 	bl	8019498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	68fa      	ldr	r2, [r7, #12]
 801947c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2220      	movs	r2, #32
 8019482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2200      	movs	r2, #0
 801948a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801948e:	2300      	movs	r3, #0
}
 8019490:	4618      	mov	r0, r3
 8019492:	3710      	adds	r7, #16
 8019494:	46bd      	mov	sp, r7
 8019496:	bd80      	pop	{r7, pc}

08019498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8019498:	b480      	push	{r7}
 801949a:	b085      	sub	sp, #20
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d108      	bne.n	80194ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	2201      	movs	r2, #1
 80194ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2201      	movs	r2, #1
 80194b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80194b8:	e031      	b.n	801951e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80194ba:	2308      	movs	r3, #8
 80194bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80194be:	2308      	movs	r3, #8
 80194c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	689b      	ldr	r3, [r3, #8]
 80194c8:	0e5b      	lsrs	r3, r3, #25
 80194ca:	b2db      	uxtb	r3, r3
 80194cc:	f003 0307 	and.w	r3, r3, #7
 80194d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	689b      	ldr	r3, [r3, #8]
 80194d8:	0f5b      	lsrs	r3, r3, #29
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	f003 0307 	and.w	r3, r3, #7
 80194e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80194e2:	7bbb      	ldrb	r3, [r7, #14]
 80194e4:	7b3a      	ldrb	r2, [r7, #12]
 80194e6:	4911      	ldr	r1, [pc, #68]	; (801952c <UARTEx_SetNbDataToProcess+0x94>)
 80194e8:	5c8a      	ldrb	r2, [r1, r2]
 80194ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80194ee:	7b3a      	ldrb	r2, [r7, #12]
 80194f0:	490f      	ldr	r1, [pc, #60]	; (8019530 <UARTEx_SetNbDataToProcess+0x98>)
 80194f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80194f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019500:	7bfb      	ldrb	r3, [r7, #15]
 8019502:	7b7a      	ldrb	r2, [r7, #13]
 8019504:	4909      	ldr	r1, [pc, #36]	; (801952c <UARTEx_SetNbDataToProcess+0x94>)
 8019506:	5c8a      	ldrb	r2, [r1, r2]
 8019508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801950c:	7b7a      	ldrb	r2, [r7, #13]
 801950e:	4908      	ldr	r1, [pc, #32]	; (8019530 <UARTEx_SetNbDataToProcess+0x98>)
 8019510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8019512:	fb93 f3f2 	sdiv	r3, r3, r2
 8019516:	b29a      	uxth	r2, r3
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801951e:	bf00      	nop
 8019520:	3714      	adds	r7, #20
 8019522:	46bd      	mov	sp, r7
 8019524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	0801a954 	.word	0x0801a954
 8019530:	0801a95c 	.word	0x0801a95c

08019534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019534:	b480      	push	{r7}
 8019536:	b085      	sub	sp, #20
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801953c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8019540:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8019548:	b29a      	uxth	r2, r3
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	b29b      	uxth	r3, r3
 801954e:	43db      	mvns	r3, r3
 8019550:	b29b      	uxth	r3, r3
 8019552:	4013      	ands	r3, r2
 8019554:	b29a      	uxth	r2, r3
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801955c:	2300      	movs	r3, #0
}
 801955e:	4618      	mov	r0, r3
 8019560:	3714      	adds	r7, #20
 8019562:	46bd      	mov	sp, r7
 8019564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019568:	4770      	bx	lr

0801956a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801956a:	b084      	sub	sp, #16
 801956c:	b480      	push	{r7}
 801956e:	b083      	sub	sp, #12
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
 8019574:	f107 0014 	add.w	r0, r7, #20
 8019578:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	2201      	movs	r2, #1
 8019580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2200      	movs	r2, #0
 8019588:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2200      	movs	r2, #0
 8019590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	2200      	movs	r2, #0
 8019598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801959c:	2300      	movs	r3, #0
}
 801959e:	4618      	mov	r0, r3
 80195a0:	370c      	adds	r7, #12
 80195a2:	46bd      	mov	sp, r7
 80195a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a8:	b004      	add	sp, #16
 80195aa:	4770      	bx	lr

080195ac <__errno>:
 80195ac:	4b01      	ldr	r3, [pc, #4]	; (80195b4 <__errno+0x8>)
 80195ae:	6818      	ldr	r0, [r3, #0]
 80195b0:	4770      	bx	lr
 80195b2:	bf00      	nop
 80195b4:	20000074 	.word	0x20000074

080195b8 <__libc_init_array>:
 80195b8:	b570      	push	{r4, r5, r6, lr}
 80195ba:	4d0d      	ldr	r5, [pc, #52]	; (80195f0 <__libc_init_array+0x38>)
 80195bc:	4c0d      	ldr	r4, [pc, #52]	; (80195f4 <__libc_init_array+0x3c>)
 80195be:	1b64      	subs	r4, r4, r5
 80195c0:	10a4      	asrs	r4, r4, #2
 80195c2:	2600      	movs	r6, #0
 80195c4:	42a6      	cmp	r6, r4
 80195c6:	d109      	bne.n	80195dc <__libc_init_array+0x24>
 80195c8:	4d0b      	ldr	r5, [pc, #44]	; (80195f8 <__libc_init_array+0x40>)
 80195ca:	4c0c      	ldr	r4, [pc, #48]	; (80195fc <__libc_init_array+0x44>)
 80195cc:	f001 f8a4 	bl	801a718 <_init>
 80195d0:	1b64      	subs	r4, r4, r5
 80195d2:	10a4      	asrs	r4, r4, #2
 80195d4:	2600      	movs	r6, #0
 80195d6:	42a6      	cmp	r6, r4
 80195d8:	d105      	bne.n	80195e6 <__libc_init_array+0x2e>
 80195da:	bd70      	pop	{r4, r5, r6, pc}
 80195dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80195e0:	4798      	blx	r3
 80195e2:	3601      	adds	r6, #1
 80195e4:	e7ee      	b.n	80195c4 <__libc_init_array+0xc>
 80195e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80195ea:	4798      	blx	r3
 80195ec:	3601      	adds	r6, #1
 80195ee:	e7f2      	b.n	80195d6 <__libc_init_array+0x1e>
 80195f0:	0801aa04 	.word	0x0801aa04
 80195f4:	0801aa04 	.word	0x0801aa04
 80195f8:	0801aa04 	.word	0x0801aa04
 80195fc:	0801aa08 	.word	0x0801aa08

08019600 <memcpy>:
 8019600:	440a      	add	r2, r1
 8019602:	4291      	cmp	r1, r2
 8019604:	f100 33ff 	add.w	r3, r0, #4294967295
 8019608:	d100      	bne.n	801960c <memcpy+0xc>
 801960a:	4770      	bx	lr
 801960c:	b510      	push	{r4, lr}
 801960e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019616:	4291      	cmp	r1, r2
 8019618:	d1f9      	bne.n	801960e <memcpy+0xe>
 801961a:	bd10      	pop	{r4, pc}

0801961c <memset>:
 801961c:	4402      	add	r2, r0
 801961e:	4603      	mov	r3, r0
 8019620:	4293      	cmp	r3, r2
 8019622:	d100      	bne.n	8019626 <memset+0xa>
 8019624:	4770      	bx	lr
 8019626:	f803 1b01 	strb.w	r1, [r3], #1
 801962a:	e7f9      	b.n	8019620 <memset+0x4>

0801962c <iprintf>:
 801962c:	b40f      	push	{r0, r1, r2, r3}
 801962e:	4b0a      	ldr	r3, [pc, #40]	; (8019658 <iprintf+0x2c>)
 8019630:	b513      	push	{r0, r1, r4, lr}
 8019632:	681c      	ldr	r4, [r3, #0]
 8019634:	b124      	cbz	r4, 8019640 <iprintf+0x14>
 8019636:	69a3      	ldr	r3, [r4, #24]
 8019638:	b913      	cbnz	r3, 8019640 <iprintf+0x14>
 801963a:	4620      	mov	r0, r4
 801963c:	f000 fa88 	bl	8019b50 <__sinit>
 8019640:	ab05      	add	r3, sp, #20
 8019642:	9a04      	ldr	r2, [sp, #16]
 8019644:	68a1      	ldr	r1, [r4, #8]
 8019646:	9301      	str	r3, [sp, #4]
 8019648:	4620      	mov	r0, r4
 801964a:	f000 fc91 	bl	8019f70 <_vfiprintf_r>
 801964e:	b002      	add	sp, #8
 8019650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019654:	b004      	add	sp, #16
 8019656:	4770      	bx	lr
 8019658:	20000074 	.word	0x20000074

0801965c <putchar>:
 801965c:	4b09      	ldr	r3, [pc, #36]	; (8019684 <putchar+0x28>)
 801965e:	b513      	push	{r0, r1, r4, lr}
 8019660:	681c      	ldr	r4, [r3, #0]
 8019662:	4601      	mov	r1, r0
 8019664:	b134      	cbz	r4, 8019674 <putchar+0x18>
 8019666:	69a3      	ldr	r3, [r4, #24]
 8019668:	b923      	cbnz	r3, 8019674 <putchar+0x18>
 801966a:	9001      	str	r0, [sp, #4]
 801966c:	4620      	mov	r0, r4
 801966e:	f000 fa6f 	bl	8019b50 <__sinit>
 8019672:	9901      	ldr	r1, [sp, #4]
 8019674:	68a2      	ldr	r2, [r4, #8]
 8019676:	4620      	mov	r0, r4
 8019678:	b002      	add	sp, #8
 801967a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801967e:	f000 bf3b 	b.w	801a4f8 <_putc_r>
 8019682:	bf00      	nop
 8019684:	20000074 	.word	0x20000074

08019688 <_puts_r>:
 8019688:	b570      	push	{r4, r5, r6, lr}
 801968a:	460e      	mov	r6, r1
 801968c:	4605      	mov	r5, r0
 801968e:	b118      	cbz	r0, 8019698 <_puts_r+0x10>
 8019690:	6983      	ldr	r3, [r0, #24]
 8019692:	b90b      	cbnz	r3, 8019698 <_puts_r+0x10>
 8019694:	f000 fa5c 	bl	8019b50 <__sinit>
 8019698:	69ab      	ldr	r3, [r5, #24]
 801969a:	68ac      	ldr	r4, [r5, #8]
 801969c:	b913      	cbnz	r3, 80196a4 <_puts_r+0x1c>
 801969e:	4628      	mov	r0, r5
 80196a0:	f000 fa56 	bl	8019b50 <__sinit>
 80196a4:	4b2c      	ldr	r3, [pc, #176]	; (8019758 <_puts_r+0xd0>)
 80196a6:	429c      	cmp	r4, r3
 80196a8:	d120      	bne.n	80196ec <_puts_r+0x64>
 80196aa:	686c      	ldr	r4, [r5, #4]
 80196ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196ae:	07db      	lsls	r3, r3, #31
 80196b0:	d405      	bmi.n	80196be <_puts_r+0x36>
 80196b2:	89a3      	ldrh	r3, [r4, #12]
 80196b4:	0598      	lsls	r0, r3, #22
 80196b6:	d402      	bmi.n	80196be <_puts_r+0x36>
 80196b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196ba:	f000 fae7 	bl	8019c8c <__retarget_lock_acquire_recursive>
 80196be:	89a3      	ldrh	r3, [r4, #12]
 80196c0:	0719      	lsls	r1, r3, #28
 80196c2:	d51d      	bpl.n	8019700 <_puts_r+0x78>
 80196c4:	6923      	ldr	r3, [r4, #16]
 80196c6:	b1db      	cbz	r3, 8019700 <_puts_r+0x78>
 80196c8:	3e01      	subs	r6, #1
 80196ca:	68a3      	ldr	r3, [r4, #8]
 80196cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80196d0:	3b01      	subs	r3, #1
 80196d2:	60a3      	str	r3, [r4, #8]
 80196d4:	bb39      	cbnz	r1, 8019726 <_puts_r+0x9e>
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	da38      	bge.n	801974c <_puts_r+0xc4>
 80196da:	4622      	mov	r2, r4
 80196dc:	210a      	movs	r1, #10
 80196de:	4628      	mov	r0, r5
 80196e0:	f000 f85c 	bl	801979c <__swbuf_r>
 80196e4:	3001      	adds	r0, #1
 80196e6:	d011      	beq.n	801970c <_puts_r+0x84>
 80196e8:	250a      	movs	r5, #10
 80196ea:	e011      	b.n	8019710 <_puts_r+0x88>
 80196ec:	4b1b      	ldr	r3, [pc, #108]	; (801975c <_puts_r+0xd4>)
 80196ee:	429c      	cmp	r4, r3
 80196f0:	d101      	bne.n	80196f6 <_puts_r+0x6e>
 80196f2:	68ac      	ldr	r4, [r5, #8]
 80196f4:	e7da      	b.n	80196ac <_puts_r+0x24>
 80196f6:	4b1a      	ldr	r3, [pc, #104]	; (8019760 <_puts_r+0xd8>)
 80196f8:	429c      	cmp	r4, r3
 80196fa:	bf08      	it	eq
 80196fc:	68ec      	ldreq	r4, [r5, #12]
 80196fe:	e7d5      	b.n	80196ac <_puts_r+0x24>
 8019700:	4621      	mov	r1, r4
 8019702:	4628      	mov	r0, r5
 8019704:	f000 f89c 	bl	8019840 <__swsetup_r>
 8019708:	2800      	cmp	r0, #0
 801970a:	d0dd      	beq.n	80196c8 <_puts_r+0x40>
 801970c:	f04f 35ff 	mov.w	r5, #4294967295
 8019710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019712:	07da      	lsls	r2, r3, #31
 8019714:	d405      	bmi.n	8019722 <_puts_r+0x9a>
 8019716:	89a3      	ldrh	r3, [r4, #12]
 8019718:	059b      	lsls	r3, r3, #22
 801971a:	d402      	bmi.n	8019722 <_puts_r+0x9a>
 801971c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801971e:	f000 fab6 	bl	8019c8e <__retarget_lock_release_recursive>
 8019722:	4628      	mov	r0, r5
 8019724:	bd70      	pop	{r4, r5, r6, pc}
 8019726:	2b00      	cmp	r3, #0
 8019728:	da04      	bge.n	8019734 <_puts_r+0xac>
 801972a:	69a2      	ldr	r2, [r4, #24]
 801972c:	429a      	cmp	r2, r3
 801972e:	dc06      	bgt.n	801973e <_puts_r+0xb6>
 8019730:	290a      	cmp	r1, #10
 8019732:	d004      	beq.n	801973e <_puts_r+0xb6>
 8019734:	6823      	ldr	r3, [r4, #0]
 8019736:	1c5a      	adds	r2, r3, #1
 8019738:	6022      	str	r2, [r4, #0]
 801973a:	7019      	strb	r1, [r3, #0]
 801973c:	e7c5      	b.n	80196ca <_puts_r+0x42>
 801973e:	4622      	mov	r2, r4
 8019740:	4628      	mov	r0, r5
 8019742:	f000 f82b 	bl	801979c <__swbuf_r>
 8019746:	3001      	adds	r0, #1
 8019748:	d1bf      	bne.n	80196ca <_puts_r+0x42>
 801974a:	e7df      	b.n	801970c <_puts_r+0x84>
 801974c:	6823      	ldr	r3, [r4, #0]
 801974e:	250a      	movs	r5, #10
 8019750:	1c5a      	adds	r2, r3, #1
 8019752:	6022      	str	r2, [r4, #0]
 8019754:	701d      	strb	r5, [r3, #0]
 8019756:	e7db      	b.n	8019710 <_puts_r+0x88>
 8019758:	0801a988 	.word	0x0801a988
 801975c:	0801a9a8 	.word	0x0801a9a8
 8019760:	0801a968 	.word	0x0801a968

08019764 <puts>:
 8019764:	4b02      	ldr	r3, [pc, #8]	; (8019770 <puts+0xc>)
 8019766:	4601      	mov	r1, r0
 8019768:	6818      	ldr	r0, [r3, #0]
 801976a:	f7ff bf8d 	b.w	8019688 <_puts_r>
 801976e:	bf00      	nop
 8019770:	20000074 	.word	0x20000074

08019774 <strncpy>:
 8019774:	b510      	push	{r4, lr}
 8019776:	3901      	subs	r1, #1
 8019778:	4603      	mov	r3, r0
 801977a:	b132      	cbz	r2, 801978a <strncpy+0x16>
 801977c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019780:	f803 4b01 	strb.w	r4, [r3], #1
 8019784:	3a01      	subs	r2, #1
 8019786:	2c00      	cmp	r4, #0
 8019788:	d1f7      	bne.n	801977a <strncpy+0x6>
 801978a:	441a      	add	r2, r3
 801978c:	2100      	movs	r1, #0
 801978e:	4293      	cmp	r3, r2
 8019790:	d100      	bne.n	8019794 <strncpy+0x20>
 8019792:	bd10      	pop	{r4, pc}
 8019794:	f803 1b01 	strb.w	r1, [r3], #1
 8019798:	e7f9      	b.n	801978e <strncpy+0x1a>
	...

0801979c <__swbuf_r>:
 801979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979e:	460e      	mov	r6, r1
 80197a0:	4614      	mov	r4, r2
 80197a2:	4605      	mov	r5, r0
 80197a4:	b118      	cbz	r0, 80197ae <__swbuf_r+0x12>
 80197a6:	6983      	ldr	r3, [r0, #24]
 80197a8:	b90b      	cbnz	r3, 80197ae <__swbuf_r+0x12>
 80197aa:	f000 f9d1 	bl	8019b50 <__sinit>
 80197ae:	4b21      	ldr	r3, [pc, #132]	; (8019834 <__swbuf_r+0x98>)
 80197b0:	429c      	cmp	r4, r3
 80197b2:	d12b      	bne.n	801980c <__swbuf_r+0x70>
 80197b4:	686c      	ldr	r4, [r5, #4]
 80197b6:	69a3      	ldr	r3, [r4, #24]
 80197b8:	60a3      	str	r3, [r4, #8]
 80197ba:	89a3      	ldrh	r3, [r4, #12]
 80197bc:	071a      	lsls	r2, r3, #28
 80197be:	d52f      	bpl.n	8019820 <__swbuf_r+0x84>
 80197c0:	6923      	ldr	r3, [r4, #16]
 80197c2:	b36b      	cbz	r3, 8019820 <__swbuf_r+0x84>
 80197c4:	6923      	ldr	r3, [r4, #16]
 80197c6:	6820      	ldr	r0, [r4, #0]
 80197c8:	1ac0      	subs	r0, r0, r3
 80197ca:	6963      	ldr	r3, [r4, #20]
 80197cc:	b2f6      	uxtb	r6, r6
 80197ce:	4283      	cmp	r3, r0
 80197d0:	4637      	mov	r7, r6
 80197d2:	dc04      	bgt.n	80197de <__swbuf_r+0x42>
 80197d4:	4621      	mov	r1, r4
 80197d6:	4628      	mov	r0, r5
 80197d8:	f000 f926 	bl	8019a28 <_fflush_r>
 80197dc:	bb30      	cbnz	r0, 801982c <__swbuf_r+0x90>
 80197de:	68a3      	ldr	r3, [r4, #8]
 80197e0:	3b01      	subs	r3, #1
 80197e2:	60a3      	str	r3, [r4, #8]
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	6022      	str	r2, [r4, #0]
 80197ea:	701e      	strb	r6, [r3, #0]
 80197ec:	6963      	ldr	r3, [r4, #20]
 80197ee:	3001      	adds	r0, #1
 80197f0:	4283      	cmp	r3, r0
 80197f2:	d004      	beq.n	80197fe <__swbuf_r+0x62>
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	07db      	lsls	r3, r3, #31
 80197f8:	d506      	bpl.n	8019808 <__swbuf_r+0x6c>
 80197fa:	2e0a      	cmp	r6, #10
 80197fc:	d104      	bne.n	8019808 <__swbuf_r+0x6c>
 80197fe:	4621      	mov	r1, r4
 8019800:	4628      	mov	r0, r5
 8019802:	f000 f911 	bl	8019a28 <_fflush_r>
 8019806:	b988      	cbnz	r0, 801982c <__swbuf_r+0x90>
 8019808:	4638      	mov	r0, r7
 801980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801980c:	4b0a      	ldr	r3, [pc, #40]	; (8019838 <__swbuf_r+0x9c>)
 801980e:	429c      	cmp	r4, r3
 8019810:	d101      	bne.n	8019816 <__swbuf_r+0x7a>
 8019812:	68ac      	ldr	r4, [r5, #8]
 8019814:	e7cf      	b.n	80197b6 <__swbuf_r+0x1a>
 8019816:	4b09      	ldr	r3, [pc, #36]	; (801983c <__swbuf_r+0xa0>)
 8019818:	429c      	cmp	r4, r3
 801981a:	bf08      	it	eq
 801981c:	68ec      	ldreq	r4, [r5, #12]
 801981e:	e7ca      	b.n	80197b6 <__swbuf_r+0x1a>
 8019820:	4621      	mov	r1, r4
 8019822:	4628      	mov	r0, r5
 8019824:	f000 f80c 	bl	8019840 <__swsetup_r>
 8019828:	2800      	cmp	r0, #0
 801982a:	d0cb      	beq.n	80197c4 <__swbuf_r+0x28>
 801982c:	f04f 37ff 	mov.w	r7, #4294967295
 8019830:	e7ea      	b.n	8019808 <__swbuf_r+0x6c>
 8019832:	bf00      	nop
 8019834:	0801a988 	.word	0x0801a988
 8019838:	0801a9a8 	.word	0x0801a9a8
 801983c:	0801a968 	.word	0x0801a968

08019840 <__swsetup_r>:
 8019840:	4b32      	ldr	r3, [pc, #200]	; (801990c <__swsetup_r+0xcc>)
 8019842:	b570      	push	{r4, r5, r6, lr}
 8019844:	681d      	ldr	r5, [r3, #0]
 8019846:	4606      	mov	r6, r0
 8019848:	460c      	mov	r4, r1
 801984a:	b125      	cbz	r5, 8019856 <__swsetup_r+0x16>
 801984c:	69ab      	ldr	r3, [r5, #24]
 801984e:	b913      	cbnz	r3, 8019856 <__swsetup_r+0x16>
 8019850:	4628      	mov	r0, r5
 8019852:	f000 f97d 	bl	8019b50 <__sinit>
 8019856:	4b2e      	ldr	r3, [pc, #184]	; (8019910 <__swsetup_r+0xd0>)
 8019858:	429c      	cmp	r4, r3
 801985a:	d10f      	bne.n	801987c <__swsetup_r+0x3c>
 801985c:	686c      	ldr	r4, [r5, #4]
 801985e:	89a3      	ldrh	r3, [r4, #12]
 8019860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019864:	0719      	lsls	r1, r3, #28
 8019866:	d42c      	bmi.n	80198c2 <__swsetup_r+0x82>
 8019868:	06dd      	lsls	r5, r3, #27
 801986a:	d411      	bmi.n	8019890 <__swsetup_r+0x50>
 801986c:	2309      	movs	r3, #9
 801986e:	6033      	str	r3, [r6, #0]
 8019870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019874:	81a3      	strh	r3, [r4, #12]
 8019876:	f04f 30ff 	mov.w	r0, #4294967295
 801987a:	e03e      	b.n	80198fa <__swsetup_r+0xba>
 801987c:	4b25      	ldr	r3, [pc, #148]	; (8019914 <__swsetup_r+0xd4>)
 801987e:	429c      	cmp	r4, r3
 8019880:	d101      	bne.n	8019886 <__swsetup_r+0x46>
 8019882:	68ac      	ldr	r4, [r5, #8]
 8019884:	e7eb      	b.n	801985e <__swsetup_r+0x1e>
 8019886:	4b24      	ldr	r3, [pc, #144]	; (8019918 <__swsetup_r+0xd8>)
 8019888:	429c      	cmp	r4, r3
 801988a:	bf08      	it	eq
 801988c:	68ec      	ldreq	r4, [r5, #12]
 801988e:	e7e6      	b.n	801985e <__swsetup_r+0x1e>
 8019890:	0758      	lsls	r0, r3, #29
 8019892:	d512      	bpl.n	80198ba <__swsetup_r+0x7a>
 8019894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019896:	b141      	cbz	r1, 80198aa <__swsetup_r+0x6a>
 8019898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801989c:	4299      	cmp	r1, r3
 801989e:	d002      	beq.n	80198a6 <__swsetup_r+0x66>
 80198a0:	4630      	mov	r0, r6
 80198a2:	f000 fa5b 	bl	8019d5c <_free_r>
 80198a6:	2300      	movs	r3, #0
 80198a8:	6363      	str	r3, [r4, #52]	; 0x34
 80198aa:	89a3      	ldrh	r3, [r4, #12]
 80198ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198b0:	81a3      	strh	r3, [r4, #12]
 80198b2:	2300      	movs	r3, #0
 80198b4:	6063      	str	r3, [r4, #4]
 80198b6:	6923      	ldr	r3, [r4, #16]
 80198b8:	6023      	str	r3, [r4, #0]
 80198ba:	89a3      	ldrh	r3, [r4, #12]
 80198bc:	f043 0308 	orr.w	r3, r3, #8
 80198c0:	81a3      	strh	r3, [r4, #12]
 80198c2:	6923      	ldr	r3, [r4, #16]
 80198c4:	b94b      	cbnz	r3, 80198da <__swsetup_r+0x9a>
 80198c6:	89a3      	ldrh	r3, [r4, #12]
 80198c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80198cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198d0:	d003      	beq.n	80198da <__swsetup_r+0x9a>
 80198d2:	4621      	mov	r1, r4
 80198d4:	4630      	mov	r0, r6
 80198d6:	f000 fa01 	bl	8019cdc <__smakebuf_r>
 80198da:	89a0      	ldrh	r0, [r4, #12]
 80198dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198e0:	f010 0301 	ands.w	r3, r0, #1
 80198e4:	d00a      	beq.n	80198fc <__swsetup_r+0xbc>
 80198e6:	2300      	movs	r3, #0
 80198e8:	60a3      	str	r3, [r4, #8]
 80198ea:	6963      	ldr	r3, [r4, #20]
 80198ec:	425b      	negs	r3, r3
 80198ee:	61a3      	str	r3, [r4, #24]
 80198f0:	6923      	ldr	r3, [r4, #16]
 80198f2:	b943      	cbnz	r3, 8019906 <__swsetup_r+0xc6>
 80198f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80198f8:	d1ba      	bne.n	8019870 <__swsetup_r+0x30>
 80198fa:	bd70      	pop	{r4, r5, r6, pc}
 80198fc:	0781      	lsls	r1, r0, #30
 80198fe:	bf58      	it	pl
 8019900:	6963      	ldrpl	r3, [r4, #20]
 8019902:	60a3      	str	r3, [r4, #8]
 8019904:	e7f4      	b.n	80198f0 <__swsetup_r+0xb0>
 8019906:	2000      	movs	r0, #0
 8019908:	e7f7      	b.n	80198fa <__swsetup_r+0xba>
 801990a:	bf00      	nop
 801990c:	20000074 	.word	0x20000074
 8019910:	0801a988 	.word	0x0801a988
 8019914:	0801a9a8 	.word	0x0801a9a8
 8019918:	0801a968 	.word	0x0801a968

0801991c <__sflush_r>:
 801991c:	898a      	ldrh	r2, [r1, #12]
 801991e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019922:	4605      	mov	r5, r0
 8019924:	0710      	lsls	r0, r2, #28
 8019926:	460c      	mov	r4, r1
 8019928:	d458      	bmi.n	80199dc <__sflush_r+0xc0>
 801992a:	684b      	ldr	r3, [r1, #4]
 801992c:	2b00      	cmp	r3, #0
 801992e:	dc05      	bgt.n	801993c <__sflush_r+0x20>
 8019930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019932:	2b00      	cmp	r3, #0
 8019934:	dc02      	bgt.n	801993c <__sflush_r+0x20>
 8019936:	2000      	movs	r0, #0
 8019938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801993c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801993e:	2e00      	cmp	r6, #0
 8019940:	d0f9      	beq.n	8019936 <__sflush_r+0x1a>
 8019942:	2300      	movs	r3, #0
 8019944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019948:	682f      	ldr	r7, [r5, #0]
 801994a:	602b      	str	r3, [r5, #0]
 801994c:	d032      	beq.n	80199b4 <__sflush_r+0x98>
 801994e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019950:	89a3      	ldrh	r3, [r4, #12]
 8019952:	075a      	lsls	r2, r3, #29
 8019954:	d505      	bpl.n	8019962 <__sflush_r+0x46>
 8019956:	6863      	ldr	r3, [r4, #4]
 8019958:	1ac0      	subs	r0, r0, r3
 801995a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801995c:	b10b      	cbz	r3, 8019962 <__sflush_r+0x46>
 801995e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019960:	1ac0      	subs	r0, r0, r3
 8019962:	2300      	movs	r3, #0
 8019964:	4602      	mov	r2, r0
 8019966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019968:	6a21      	ldr	r1, [r4, #32]
 801996a:	4628      	mov	r0, r5
 801996c:	47b0      	blx	r6
 801996e:	1c43      	adds	r3, r0, #1
 8019970:	89a3      	ldrh	r3, [r4, #12]
 8019972:	d106      	bne.n	8019982 <__sflush_r+0x66>
 8019974:	6829      	ldr	r1, [r5, #0]
 8019976:	291d      	cmp	r1, #29
 8019978:	d82c      	bhi.n	80199d4 <__sflush_r+0xb8>
 801997a:	4a2a      	ldr	r2, [pc, #168]	; (8019a24 <__sflush_r+0x108>)
 801997c:	40ca      	lsrs	r2, r1
 801997e:	07d6      	lsls	r6, r2, #31
 8019980:	d528      	bpl.n	80199d4 <__sflush_r+0xb8>
 8019982:	2200      	movs	r2, #0
 8019984:	6062      	str	r2, [r4, #4]
 8019986:	04d9      	lsls	r1, r3, #19
 8019988:	6922      	ldr	r2, [r4, #16]
 801998a:	6022      	str	r2, [r4, #0]
 801998c:	d504      	bpl.n	8019998 <__sflush_r+0x7c>
 801998e:	1c42      	adds	r2, r0, #1
 8019990:	d101      	bne.n	8019996 <__sflush_r+0x7a>
 8019992:	682b      	ldr	r3, [r5, #0]
 8019994:	b903      	cbnz	r3, 8019998 <__sflush_r+0x7c>
 8019996:	6560      	str	r0, [r4, #84]	; 0x54
 8019998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801999a:	602f      	str	r7, [r5, #0]
 801999c:	2900      	cmp	r1, #0
 801999e:	d0ca      	beq.n	8019936 <__sflush_r+0x1a>
 80199a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199a4:	4299      	cmp	r1, r3
 80199a6:	d002      	beq.n	80199ae <__sflush_r+0x92>
 80199a8:	4628      	mov	r0, r5
 80199aa:	f000 f9d7 	bl	8019d5c <_free_r>
 80199ae:	2000      	movs	r0, #0
 80199b0:	6360      	str	r0, [r4, #52]	; 0x34
 80199b2:	e7c1      	b.n	8019938 <__sflush_r+0x1c>
 80199b4:	6a21      	ldr	r1, [r4, #32]
 80199b6:	2301      	movs	r3, #1
 80199b8:	4628      	mov	r0, r5
 80199ba:	47b0      	blx	r6
 80199bc:	1c41      	adds	r1, r0, #1
 80199be:	d1c7      	bne.n	8019950 <__sflush_r+0x34>
 80199c0:	682b      	ldr	r3, [r5, #0]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d0c4      	beq.n	8019950 <__sflush_r+0x34>
 80199c6:	2b1d      	cmp	r3, #29
 80199c8:	d001      	beq.n	80199ce <__sflush_r+0xb2>
 80199ca:	2b16      	cmp	r3, #22
 80199cc:	d101      	bne.n	80199d2 <__sflush_r+0xb6>
 80199ce:	602f      	str	r7, [r5, #0]
 80199d0:	e7b1      	b.n	8019936 <__sflush_r+0x1a>
 80199d2:	89a3      	ldrh	r3, [r4, #12]
 80199d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199d8:	81a3      	strh	r3, [r4, #12]
 80199da:	e7ad      	b.n	8019938 <__sflush_r+0x1c>
 80199dc:	690f      	ldr	r7, [r1, #16]
 80199de:	2f00      	cmp	r7, #0
 80199e0:	d0a9      	beq.n	8019936 <__sflush_r+0x1a>
 80199e2:	0793      	lsls	r3, r2, #30
 80199e4:	680e      	ldr	r6, [r1, #0]
 80199e6:	bf08      	it	eq
 80199e8:	694b      	ldreq	r3, [r1, #20]
 80199ea:	600f      	str	r7, [r1, #0]
 80199ec:	bf18      	it	ne
 80199ee:	2300      	movne	r3, #0
 80199f0:	eba6 0807 	sub.w	r8, r6, r7
 80199f4:	608b      	str	r3, [r1, #8]
 80199f6:	f1b8 0f00 	cmp.w	r8, #0
 80199fa:	dd9c      	ble.n	8019936 <__sflush_r+0x1a>
 80199fc:	6a21      	ldr	r1, [r4, #32]
 80199fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a00:	4643      	mov	r3, r8
 8019a02:	463a      	mov	r2, r7
 8019a04:	4628      	mov	r0, r5
 8019a06:	47b0      	blx	r6
 8019a08:	2800      	cmp	r0, #0
 8019a0a:	dc06      	bgt.n	8019a1a <__sflush_r+0xfe>
 8019a0c:	89a3      	ldrh	r3, [r4, #12]
 8019a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a12:	81a3      	strh	r3, [r4, #12]
 8019a14:	f04f 30ff 	mov.w	r0, #4294967295
 8019a18:	e78e      	b.n	8019938 <__sflush_r+0x1c>
 8019a1a:	4407      	add	r7, r0
 8019a1c:	eba8 0800 	sub.w	r8, r8, r0
 8019a20:	e7e9      	b.n	80199f6 <__sflush_r+0xda>
 8019a22:	bf00      	nop
 8019a24:	20400001 	.word	0x20400001

08019a28 <_fflush_r>:
 8019a28:	b538      	push	{r3, r4, r5, lr}
 8019a2a:	690b      	ldr	r3, [r1, #16]
 8019a2c:	4605      	mov	r5, r0
 8019a2e:	460c      	mov	r4, r1
 8019a30:	b913      	cbnz	r3, 8019a38 <_fflush_r+0x10>
 8019a32:	2500      	movs	r5, #0
 8019a34:	4628      	mov	r0, r5
 8019a36:	bd38      	pop	{r3, r4, r5, pc}
 8019a38:	b118      	cbz	r0, 8019a42 <_fflush_r+0x1a>
 8019a3a:	6983      	ldr	r3, [r0, #24]
 8019a3c:	b90b      	cbnz	r3, 8019a42 <_fflush_r+0x1a>
 8019a3e:	f000 f887 	bl	8019b50 <__sinit>
 8019a42:	4b14      	ldr	r3, [pc, #80]	; (8019a94 <_fflush_r+0x6c>)
 8019a44:	429c      	cmp	r4, r3
 8019a46:	d11b      	bne.n	8019a80 <_fflush_r+0x58>
 8019a48:	686c      	ldr	r4, [r5, #4]
 8019a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d0ef      	beq.n	8019a32 <_fflush_r+0xa>
 8019a52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a54:	07d0      	lsls	r0, r2, #31
 8019a56:	d404      	bmi.n	8019a62 <_fflush_r+0x3a>
 8019a58:	0599      	lsls	r1, r3, #22
 8019a5a:	d402      	bmi.n	8019a62 <_fflush_r+0x3a>
 8019a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a5e:	f000 f915 	bl	8019c8c <__retarget_lock_acquire_recursive>
 8019a62:	4628      	mov	r0, r5
 8019a64:	4621      	mov	r1, r4
 8019a66:	f7ff ff59 	bl	801991c <__sflush_r>
 8019a6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a6c:	07da      	lsls	r2, r3, #31
 8019a6e:	4605      	mov	r5, r0
 8019a70:	d4e0      	bmi.n	8019a34 <_fflush_r+0xc>
 8019a72:	89a3      	ldrh	r3, [r4, #12]
 8019a74:	059b      	lsls	r3, r3, #22
 8019a76:	d4dd      	bmi.n	8019a34 <_fflush_r+0xc>
 8019a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a7a:	f000 f908 	bl	8019c8e <__retarget_lock_release_recursive>
 8019a7e:	e7d9      	b.n	8019a34 <_fflush_r+0xc>
 8019a80:	4b05      	ldr	r3, [pc, #20]	; (8019a98 <_fflush_r+0x70>)
 8019a82:	429c      	cmp	r4, r3
 8019a84:	d101      	bne.n	8019a8a <_fflush_r+0x62>
 8019a86:	68ac      	ldr	r4, [r5, #8]
 8019a88:	e7df      	b.n	8019a4a <_fflush_r+0x22>
 8019a8a:	4b04      	ldr	r3, [pc, #16]	; (8019a9c <_fflush_r+0x74>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	bf08      	it	eq
 8019a90:	68ec      	ldreq	r4, [r5, #12]
 8019a92:	e7da      	b.n	8019a4a <_fflush_r+0x22>
 8019a94:	0801a988 	.word	0x0801a988
 8019a98:	0801a9a8 	.word	0x0801a9a8
 8019a9c:	0801a968 	.word	0x0801a968

08019aa0 <std>:
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	b510      	push	{r4, lr}
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8019aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019aae:	6083      	str	r3, [r0, #8]
 8019ab0:	8181      	strh	r1, [r0, #12]
 8019ab2:	6643      	str	r3, [r0, #100]	; 0x64
 8019ab4:	81c2      	strh	r2, [r0, #14]
 8019ab6:	6183      	str	r3, [r0, #24]
 8019ab8:	4619      	mov	r1, r3
 8019aba:	2208      	movs	r2, #8
 8019abc:	305c      	adds	r0, #92	; 0x5c
 8019abe:	f7ff fdad 	bl	801961c <memset>
 8019ac2:	4b05      	ldr	r3, [pc, #20]	; (8019ad8 <std+0x38>)
 8019ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8019ac6:	4b05      	ldr	r3, [pc, #20]	; (8019adc <std+0x3c>)
 8019ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019aca:	4b05      	ldr	r3, [pc, #20]	; (8019ae0 <std+0x40>)
 8019acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ace:	4b05      	ldr	r3, [pc, #20]	; (8019ae4 <std+0x44>)
 8019ad0:	6224      	str	r4, [r4, #32]
 8019ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8019ad4:	bd10      	pop	{r4, pc}
 8019ad6:	bf00      	nop
 8019ad8:	0801a5a9 	.word	0x0801a5a9
 8019adc:	0801a5cb 	.word	0x0801a5cb
 8019ae0:	0801a603 	.word	0x0801a603
 8019ae4:	0801a627 	.word	0x0801a627

08019ae8 <_cleanup_r>:
 8019ae8:	4901      	ldr	r1, [pc, #4]	; (8019af0 <_cleanup_r+0x8>)
 8019aea:	f000 b8af 	b.w	8019c4c <_fwalk_reent>
 8019aee:	bf00      	nop
 8019af0:	08019a29 	.word	0x08019a29

08019af4 <__sfmoreglue>:
 8019af4:	b570      	push	{r4, r5, r6, lr}
 8019af6:	2268      	movs	r2, #104	; 0x68
 8019af8:	1e4d      	subs	r5, r1, #1
 8019afa:	4355      	muls	r5, r2
 8019afc:	460e      	mov	r6, r1
 8019afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b02:	f000 f997 	bl	8019e34 <_malloc_r>
 8019b06:	4604      	mov	r4, r0
 8019b08:	b140      	cbz	r0, 8019b1c <__sfmoreglue+0x28>
 8019b0a:	2100      	movs	r1, #0
 8019b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8019b10:	300c      	adds	r0, #12
 8019b12:	60a0      	str	r0, [r4, #8]
 8019b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b18:	f7ff fd80 	bl	801961c <memset>
 8019b1c:	4620      	mov	r0, r4
 8019b1e:	bd70      	pop	{r4, r5, r6, pc}

08019b20 <__sfp_lock_acquire>:
 8019b20:	4801      	ldr	r0, [pc, #4]	; (8019b28 <__sfp_lock_acquire+0x8>)
 8019b22:	f000 b8b3 	b.w	8019c8c <__retarget_lock_acquire_recursive>
 8019b26:	bf00      	nop
 8019b28:	20008635 	.word	0x20008635

08019b2c <__sfp_lock_release>:
 8019b2c:	4801      	ldr	r0, [pc, #4]	; (8019b34 <__sfp_lock_release+0x8>)
 8019b2e:	f000 b8ae 	b.w	8019c8e <__retarget_lock_release_recursive>
 8019b32:	bf00      	nop
 8019b34:	20008635 	.word	0x20008635

08019b38 <__sinit_lock_acquire>:
 8019b38:	4801      	ldr	r0, [pc, #4]	; (8019b40 <__sinit_lock_acquire+0x8>)
 8019b3a:	f000 b8a7 	b.w	8019c8c <__retarget_lock_acquire_recursive>
 8019b3e:	bf00      	nop
 8019b40:	20008636 	.word	0x20008636

08019b44 <__sinit_lock_release>:
 8019b44:	4801      	ldr	r0, [pc, #4]	; (8019b4c <__sinit_lock_release+0x8>)
 8019b46:	f000 b8a2 	b.w	8019c8e <__retarget_lock_release_recursive>
 8019b4a:	bf00      	nop
 8019b4c:	20008636 	.word	0x20008636

08019b50 <__sinit>:
 8019b50:	b510      	push	{r4, lr}
 8019b52:	4604      	mov	r4, r0
 8019b54:	f7ff fff0 	bl	8019b38 <__sinit_lock_acquire>
 8019b58:	69a3      	ldr	r3, [r4, #24]
 8019b5a:	b11b      	cbz	r3, 8019b64 <__sinit+0x14>
 8019b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b60:	f7ff bff0 	b.w	8019b44 <__sinit_lock_release>
 8019b64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019b68:	6523      	str	r3, [r4, #80]	; 0x50
 8019b6a:	4b13      	ldr	r3, [pc, #76]	; (8019bb8 <__sinit+0x68>)
 8019b6c:	4a13      	ldr	r2, [pc, #76]	; (8019bbc <__sinit+0x6c>)
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	62a2      	str	r2, [r4, #40]	; 0x28
 8019b72:	42a3      	cmp	r3, r4
 8019b74:	bf04      	itt	eq
 8019b76:	2301      	moveq	r3, #1
 8019b78:	61a3      	streq	r3, [r4, #24]
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	f000 f820 	bl	8019bc0 <__sfp>
 8019b80:	6060      	str	r0, [r4, #4]
 8019b82:	4620      	mov	r0, r4
 8019b84:	f000 f81c 	bl	8019bc0 <__sfp>
 8019b88:	60a0      	str	r0, [r4, #8]
 8019b8a:	4620      	mov	r0, r4
 8019b8c:	f000 f818 	bl	8019bc0 <__sfp>
 8019b90:	2200      	movs	r2, #0
 8019b92:	60e0      	str	r0, [r4, #12]
 8019b94:	2104      	movs	r1, #4
 8019b96:	6860      	ldr	r0, [r4, #4]
 8019b98:	f7ff ff82 	bl	8019aa0 <std>
 8019b9c:	68a0      	ldr	r0, [r4, #8]
 8019b9e:	2201      	movs	r2, #1
 8019ba0:	2109      	movs	r1, #9
 8019ba2:	f7ff ff7d 	bl	8019aa0 <std>
 8019ba6:	68e0      	ldr	r0, [r4, #12]
 8019ba8:	2202      	movs	r2, #2
 8019baa:	2112      	movs	r1, #18
 8019bac:	f7ff ff78 	bl	8019aa0 <std>
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	61a3      	str	r3, [r4, #24]
 8019bb4:	e7d2      	b.n	8019b5c <__sinit+0xc>
 8019bb6:	bf00      	nop
 8019bb8:	0801a964 	.word	0x0801a964
 8019bbc:	08019ae9 	.word	0x08019ae9

08019bc0 <__sfp>:
 8019bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bc2:	4607      	mov	r7, r0
 8019bc4:	f7ff ffac 	bl	8019b20 <__sfp_lock_acquire>
 8019bc8:	4b1e      	ldr	r3, [pc, #120]	; (8019c44 <__sfp+0x84>)
 8019bca:	681e      	ldr	r6, [r3, #0]
 8019bcc:	69b3      	ldr	r3, [r6, #24]
 8019bce:	b913      	cbnz	r3, 8019bd6 <__sfp+0x16>
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	f7ff ffbd 	bl	8019b50 <__sinit>
 8019bd6:	3648      	adds	r6, #72	; 0x48
 8019bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019bdc:	3b01      	subs	r3, #1
 8019bde:	d503      	bpl.n	8019be8 <__sfp+0x28>
 8019be0:	6833      	ldr	r3, [r6, #0]
 8019be2:	b30b      	cbz	r3, 8019c28 <__sfp+0x68>
 8019be4:	6836      	ldr	r6, [r6, #0]
 8019be6:	e7f7      	b.n	8019bd8 <__sfp+0x18>
 8019be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019bec:	b9d5      	cbnz	r5, 8019c24 <__sfp+0x64>
 8019bee:	4b16      	ldr	r3, [pc, #88]	; (8019c48 <__sfp+0x88>)
 8019bf0:	60e3      	str	r3, [r4, #12]
 8019bf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019bf6:	6665      	str	r5, [r4, #100]	; 0x64
 8019bf8:	f000 f847 	bl	8019c8a <__retarget_lock_init_recursive>
 8019bfc:	f7ff ff96 	bl	8019b2c <__sfp_lock_release>
 8019c00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019c04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019c08:	6025      	str	r5, [r4, #0]
 8019c0a:	61a5      	str	r5, [r4, #24]
 8019c0c:	2208      	movs	r2, #8
 8019c0e:	4629      	mov	r1, r5
 8019c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c14:	f7ff fd02 	bl	801961c <memset>
 8019c18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c20:	4620      	mov	r0, r4
 8019c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c24:	3468      	adds	r4, #104	; 0x68
 8019c26:	e7d9      	b.n	8019bdc <__sfp+0x1c>
 8019c28:	2104      	movs	r1, #4
 8019c2a:	4638      	mov	r0, r7
 8019c2c:	f7ff ff62 	bl	8019af4 <__sfmoreglue>
 8019c30:	4604      	mov	r4, r0
 8019c32:	6030      	str	r0, [r6, #0]
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d1d5      	bne.n	8019be4 <__sfp+0x24>
 8019c38:	f7ff ff78 	bl	8019b2c <__sfp_lock_release>
 8019c3c:	230c      	movs	r3, #12
 8019c3e:	603b      	str	r3, [r7, #0]
 8019c40:	e7ee      	b.n	8019c20 <__sfp+0x60>
 8019c42:	bf00      	nop
 8019c44:	0801a964 	.word	0x0801a964
 8019c48:	ffff0001 	.word	0xffff0001

08019c4c <_fwalk_reent>:
 8019c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c50:	4606      	mov	r6, r0
 8019c52:	4688      	mov	r8, r1
 8019c54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c58:	2700      	movs	r7, #0
 8019c5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c5e:	f1b9 0901 	subs.w	r9, r9, #1
 8019c62:	d505      	bpl.n	8019c70 <_fwalk_reent+0x24>
 8019c64:	6824      	ldr	r4, [r4, #0]
 8019c66:	2c00      	cmp	r4, #0
 8019c68:	d1f7      	bne.n	8019c5a <_fwalk_reent+0xe>
 8019c6a:	4638      	mov	r0, r7
 8019c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c70:	89ab      	ldrh	r3, [r5, #12]
 8019c72:	2b01      	cmp	r3, #1
 8019c74:	d907      	bls.n	8019c86 <_fwalk_reent+0x3a>
 8019c76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	d003      	beq.n	8019c86 <_fwalk_reent+0x3a>
 8019c7e:	4629      	mov	r1, r5
 8019c80:	4630      	mov	r0, r6
 8019c82:	47c0      	blx	r8
 8019c84:	4307      	orrs	r7, r0
 8019c86:	3568      	adds	r5, #104	; 0x68
 8019c88:	e7e9      	b.n	8019c5e <_fwalk_reent+0x12>

08019c8a <__retarget_lock_init_recursive>:
 8019c8a:	4770      	bx	lr

08019c8c <__retarget_lock_acquire_recursive>:
 8019c8c:	4770      	bx	lr

08019c8e <__retarget_lock_release_recursive>:
 8019c8e:	4770      	bx	lr

08019c90 <__swhatbuf_r>:
 8019c90:	b570      	push	{r4, r5, r6, lr}
 8019c92:	460e      	mov	r6, r1
 8019c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c98:	2900      	cmp	r1, #0
 8019c9a:	b096      	sub	sp, #88	; 0x58
 8019c9c:	4614      	mov	r4, r2
 8019c9e:	461d      	mov	r5, r3
 8019ca0:	da08      	bge.n	8019cb4 <__swhatbuf_r+0x24>
 8019ca2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	602a      	str	r2, [r5, #0]
 8019caa:	061a      	lsls	r2, r3, #24
 8019cac:	d410      	bmi.n	8019cd0 <__swhatbuf_r+0x40>
 8019cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019cb2:	e00e      	b.n	8019cd2 <__swhatbuf_r+0x42>
 8019cb4:	466a      	mov	r2, sp
 8019cb6:	f000 fcdd 	bl	801a674 <_fstat_r>
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	dbf1      	blt.n	8019ca2 <__swhatbuf_r+0x12>
 8019cbe:	9a01      	ldr	r2, [sp, #4]
 8019cc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019cc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019cc8:	425a      	negs	r2, r3
 8019cca:	415a      	adcs	r2, r3
 8019ccc:	602a      	str	r2, [r5, #0]
 8019cce:	e7ee      	b.n	8019cae <__swhatbuf_r+0x1e>
 8019cd0:	2340      	movs	r3, #64	; 0x40
 8019cd2:	2000      	movs	r0, #0
 8019cd4:	6023      	str	r3, [r4, #0]
 8019cd6:	b016      	add	sp, #88	; 0x58
 8019cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08019cdc <__smakebuf_r>:
 8019cdc:	898b      	ldrh	r3, [r1, #12]
 8019cde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ce0:	079d      	lsls	r5, r3, #30
 8019ce2:	4606      	mov	r6, r0
 8019ce4:	460c      	mov	r4, r1
 8019ce6:	d507      	bpl.n	8019cf8 <__smakebuf_r+0x1c>
 8019ce8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019cec:	6023      	str	r3, [r4, #0]
 8019cee:	6123      	str	r3, [r4, #16]
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	6163      	str	r3, [r4, #20]
 8019cf4:	b002      	add	sp, #8
 8019cf6:	bd70      	pop	{r4, r5, r6, pc}
 8019cf8:	ab01      	add	r3, sp, #4
 8019cfa:	466a      	mov	r2, sp
 8019cfc:	f7ff ffc8 	bl	8019c90 <__swhatbuf_r>
 8019d00:	9900      	ldr	r1, [sp, #0]
 8019d02:	4605      	mov	r5, r0
 8019d04:	4630      	mov	r0, r6
 8019d06:	f000 f895 	bl	8019e34 <_malloc_r>
 8019d0a:	b948      	cbnz	r0, 8019d20 <__smakebuf_r+0x44>
 8019d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d10:	059a      	lsls	r2, r3, #22
 8019d12:	d4ef      	bmi.n	8019cf4 <__smakebuf_r+0x18>
 8019d14:	f023 0303 	bic.w	r3, r3, #3
 8019d18:	f043 0302 	orr.w	r3, r3, #2
 8019d1c:	81a3      	strh	r3, [r4, #12]
 8019d1e:	e7e3      	b.n	8019ce8 <__smakebuf_r+0xc>
 8019d20:	4b0d      	ldr	r3, [pc, #52]	; (8019d58 <__smakebuf_r+0x7c>)
 8019d22:	62b3      	str	r3, [r6, #40]	; 0x28
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	6020      	str	r0, [r4, #0]
 8019d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d2c:	81a3      	strh	r3, [r4, #12]
 8019d2e:	9b00      	ldr	r3, [sp, #0]
 8019d30:	6163      	str	r3, [r4, #20]
 8019d32:	9b01      	ldr	r3, [sp, #4]
 8019d34:	6120      	str	r0, [r4, #16]
 8019d36:	b15b      	cbz	r3, 8019d50 <__smakebuf_r+0x74>
 8019d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d3c:	4630      	mov	r0, r6
 8019d3e:	f000 fcab 	bl	801a698 <_isatty_r>
 8019d42:	b128      	cbz	r0, 8019d50 <__smakebuf_r+0x74>
 8019d44:	89a3      	ldrh	r3, [r4, #12]
 8019d46:	f023 0303 	bic.w	r3, r3, #3
 8019d4a:	f043 0301 	orr.w	r3, r3, #1
 8019d4e:	81a3      	strh	r3, [r4, #12]
 8019d50:	89a0      	ldrh	r0, [r4, #12]
 8019d52:	4305      	orrs	r5, r0
 8019d54:	81a5      	strh	r5, [r4, #12]
 8019d56:	e7cd      	b.n	8019cf4 <__smakebuf_r+0x18>
 8019d58:	08019ae9 	.word	0x08019ae9

08019d5c <_free_r>:
 8019d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d5e:	2900      	cmp	r1, #0
 8019d60:	d044      	beq.n	8019dec <_free_r+0x90>
 8019d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d66:	9001      	str	r0, [sp, #4]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8019d6e:	bfb8      	it	lt
 8019d70:	18e4      	addlt	r4, r4, r3
 8019d72:	f000 fcb3 	bl	801a6dc <__malloc_lock>
 8019d76:	4a1e      	ldr	r2, [pc, #120]	; (8019df0 <_free_r+0x94>)
 8019d78:	9801      	ldr	r0, [sp, #4]
 8019d7a:	6813      	ldr	r3, [r2, #0]
 8019d7c:	b933      	cbnz	r3, 8019d8c <_free_r+0x30>
 8019d7e:	6063      	str	r3, [r4, #4]
 8019d80:	6014      	str	r4, [r2, #0]
 8019d82:	b003      	add	sp, #12
 8019d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d88:	f000 bcae 	b.w	801a6e8 <__malloc_unlock>
 8019d8c:	42a3      	cmp	r3, r4
 8019d8e:	d908      	bls.n	8019da2 <_free_r+0x46>
 8019d90:	6825      	ldr	r5, [r4, #0]
 8019d92:	1961      	adds	r1, r4, r5
 8019d94:	428b      	cmp	r3, r1
 8019d96:	bf01      	itttt	eq
 8019d98:	6819      	ldreq	r1, [r3, #0]
 8019d9a:	685b      	ldreq	r3, [r3, #4]
 8019d9c:	1949      	addeq	r1, r1, r5
 8019d9e:	6021      	streq	r1, [r4, #0]
 8019da0:	e7ed      	b.n	8019d7e <_free_r+0x22>
 8019da2:	461a      	mov	r2, r3
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	b10b      	cbz	r3, 8019dac <_free_r+0x50>
 8019da8:	42a3      	cmp	r3, r4
 8019daa:	d9fa      	bls.n	8019da2 <_free_r+0x46>
 8019dac:	6811      	ldr	r1, [r2, #0]
 8019dae:	1855      	adds	r5, r2, r1
 8019db0:	42a5      	cmp	r5, r4
 8019db2:	d10b      	bne.n	8019dcc <_free_r+0x70>
 8019db4:	6824      	ldr	r4, [r4, #0]
 8019db6:	4421      	add	r1, r4
 8019db8:	1854      	adds	r4, r2, r1
 8019dba:	42a3      	cmp	r3, r4
 8019dbc:	6011      	str	r1, [r2, #0]
 8019dbe:	d1e0      	bne.n	8019d82 <_free_r+0x26>
 8019dc0:	681c      	ldr	r4, [r3, #0]
 8019dc2:	685b      	ldr	r3, [r3, #4]
 8019dc4:	6053      	str	r3, [r2, #4]
 8019dc6:	4421      	add	r1, r4
 8019dc8:	6011      	str	r1, [r2, #0]
 8019dca:	e7da      	b.n	8019d82 <_free_r+0x26>
 8019dcc:	d902      	bls.n	8019dd4 <_free_r+0x78>
 8019dce:	230c      	movs	r3, #12
 8019dd0:	6003      	str	r3, [r0, #0]
 8019dd2:	e7d6      	b.n	8019d82 <_free_r+0x26>
 8019dd4:	6825      	ldr	r5, [r4, #0]
 8019dd6:	1961      	adds	r1, r4, r5
 8019dd8:	428b      	cmp	r3, r1
 8019dda:	bf04      	itt	eq
 8019ddc:	6819      	ldreq	r1, [r3, #0]
 8019dde:	685b      	ldreq	r3, [r3, #4]
 8019de0:	6063      	str	r3, [r4, #4]
 8019de2:	bf04      	itt	eq
 8019de4:	1949      	addeq	r1, r1, r5
 8019de6:	6021      	streq	r1, [r4, #0]
 8019de8:	6054      	str	r4, [r2, #4]
 8019dea:	e7ca      	b.n	8019d82 <_free_r+0x26>
 8019dec:	b003      	add	sp, #12
 8019dee:	bd30      	pop	{r4, r5, pc}
 8019df0:	20008638 	.word	0x20008638

08019df4 <sbrk_aligned>:
 8019df4:	b570      	push	{r4, r5, r6, lr}
 8019df6:	4e0e      	ldr	r6, [pc, #56]	; (8019e30 <sbrk_aligned+0x3c>)
 8019df8:	460c      	mov	r4, r1
 8019dfa:	6831      	ldr	r1, [r6, #0]
 8019dfc:	4605      	mov	r5, r0
 8019dfe:	b911      	cbnz	r1, 8019e06 <sbrk_aligned+0x12>
 8019e00:	f000 fbc2 	bl	801a588 <_sbrk_r>
 8019e04:	6030      	str	r0, [r6, #0]
 8019e06:	4621      	mov	r1, r4
 8019e08:	4628      	mov	r0, r5
 8019e0a:	f000 fbbd 	bl	801a588 <_sbrk_r>
 8019e0e:	1c43      	adds	r3, r0, #1
 8019e10:	d00a      	beq.n	8019e28 <sbrk_aligned+0x34>
 8019e12:	1cc4      	adds	r4, r0, #3
 8019e14:	f024 0403 	bic.w	r4, r4, #3
 8019e18:	42a0      	cmp	r0, r4
 8019e1a:	d007      	beq.n	8019e2c <sbrk_aligned+0x38>
 8019e1c:	1a21      	subs	r1, r4, r0
 8019e1e:	4628      	mov	r0, r5
 8019e20:	f000 fbb2 	bl	801a588 <_sbrk_r>
 8019e24:	3001      	adds	r0, #1
 8019e26:	d101      	bne.n	8019e2c <sbrk_aligned+0x38>
 8019e28:	f04f 34ff 	mov.w	r4, #4294967295
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	bd70      	pop	{r4, r5, r6, pc}
 8019e30:	2000863c 	.word	0x2000863c

08019e34 <_malloc_r>:
 8019e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e38:	1ccd      	adds	r5, r1, #3
 8019e3a:	f025 0503 	bic.w	r5, r5, #3
 8019e3e:	3508      	adds	r5, #8
 8019e40:	2d0c      	cmp	r5, #12
 8019e42:	bf38      	it	cc
 8019e44:	250c      	movcc	r5, #12
 8019e46:	2d00      	cmp	r5, #0
 8019e48:	4607      	mov	r7, r0
 8019e4a:	db01      	blt.n	8019e50 <_malloc_r+0x1c>
 8019e4c:	42a9      	cmp	r1, r5
 8019e4e:	d905      	bls.n	8019e5c <_malloc_r+0x28>
 8019e50:	230c      	movs	r3, #12
 8019e52:	603b      	str	r3, [r7, #0]
 8019e54:	2600      	movs	r6, #0
 8019e56:	4630      	mov	r0, r6
 8019e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e5c:	4e2e      	ldr	r6, [pc, #184]	; (8019f18 <_malloc_r+0xe4>)
 8019e5e:	f000 fc3d 	bl	801a6dc <__malloc_lock>
 8019e62:	6833      	ldr	r3, [r6, #0]
 8019e64:	461c      	mov	r4, r3
 8019e66:	bb34      	cbnz	r4, 8019eb6 <_malloc_r+0x82>
 8019e68:	4629      	mov	r1, r5
 8019e6a:	4638      	mov	r0, r7
 8019e6c:	f7ff ffc2 	bl	8019df4 <sbrk_aligned>
 8019e70:	1c43      	adds	r3, r0, #1
 8019e72:	4604      	mov	r4, r0
 8019e74:	d14d      	bne.n	8019f12 <_malloc_r+0xde>
 8019e76:	6834      	ldr	r4, [r6, #0]
 8019e78:	4626      	mov	r6, r4
 8019e7a:	2e00      	cmp	r6, #0
 8019e7c:	d140      	bne.n	8019f00 <_malloc_r+0xcc>
 8019e7e:	6823      	ldr	r3, [r4, #0]
 8019e80:	4631      	mov	r1, r6
 8019e82:	4638      	mov	r0, r7
 8019e84:	eb04 0803 	add.w	r8, r4, r3
 8019e88:	f000 fb7e 	bl	801a588 <_sbrk_r>
 8019e8c:	4580      	cmp	r8, r0
 8019e8e:	d13a      	bne.n	8019f06 <_malloc_r+0xd2>
 8019e90:	6821      	ldr	r1, [r4, #0]
 8019e92:	3503      	adds	r5, #3
 8019e94:	1a6d      	subs	r5, r5, r1
 8019e96:	f025 0503 	bic.w	r5, r5, #3
 8019e9a:	3508      	adds	r5, #8
 8019e9c:	2d0c      	cmp	r5, #12
 8019e9e:	bf38      	it	cc
 8019ea0:	250c      	movcc	r5, #12
 8019ea2:	4629      	mov	r1, r5
 8019ea4:	4638      	mov	r0, r7
 8019ea6:	f7ff ffa5 	bl	8019df4 <sbrk_aligned>
 8019eaa:	3001      	adds	r0, #1
 8019eac:	d02b      	beq.n	8019f06 <_malloc_r+0xd2>
 8019eae:	6823      	ldr	r3, [r4, #0]
 8019eb0:	442b      	add	r3, r5
 8019eb2:	6023      	str	r3, [r4, #0]
 8019eb4:	e00e      	b.n	8019ed4 <_malloc_r+0xa0>
 8019eb6:	6822      	ldr	r2, [r4, #0]
 8019eb8:	1b52      	subs	r2, r2, r5
 8019eba:	d41e      	bmi.n	8019efa <_malloc_r+0xc6>
 8019ebc:	2a0b      	cmp	r2, #11
 8019ebe:	d916      	bls.n	8019eee <_malloc_r+0xba>
 8019ec0:	1961      	adds	r1, r4, r5
 8019ec2:	42a3      	cmp	r3, r4
 8019ec4:	6025      	str	r5, [r4, #0]
 8019ec6:	bf18      	it	ne
 8019ec8:	6059      	strne	r1, [r3, #4]
 8019eca:	6863      	ldr	r3, [r4, #4]
 8019ecc:	bf08      	it	eq
 8019ece:	6031      	streq	r1, [r6, #0]
 8019ed0:	5162      	str	r2, [r4, r5]
 8019ed2:	604b      	str	r3, [r1, #4]
 8019ed4:	4638      	mov	r0, r7
 8019ed6:	f104 060b 	add.w	r6, r4, #11
 8019eda:	f000 fc05 	bl	801a6e8 <__malloc_unlock>
 8019ede:	f026 0607 	bic.w	r6, r6, #7
 8019ee2:	1d23      	adds	r3, r4, #4
 8019ee4:	1af2      	subs	r2, r6, r3
 8019ee6:	d0b6      	beq.n	8019e56 <_malloc_r+0x22>
 8019ee8:	1b9b      	subs	r3, r3, r6
 8019eea:	50a3      	str	r3, [r4, r2]
 8019eec:	e7b3      	b.n	8019e56 <_malloc_r+0x22>
 8019eee:	6862      	ldr	r2, [r4, #4]
 8019ef0:	42a3      	cmp	r3, r4
 8019ef2:	bf0c      	ite	eq
 8019ef4:	6032      	streq	r2, [r6, #0]
 8019ef6:	605a      	strne	r2, [r3, #4]
 8019ef8:	e7ec      	b.n	8019ed4 <_malloc_r+0xa0>
 8019efa:	4623      	mov	r3, r4
 8019efc:	6864      	ldr	r4, [r4, #4]
 8019efe:	e7b2      	b.n	8019e66 <_malloc_r+0x32>
 8019f00:	4634      	mov	r4, r6
 8019f02:	6876      	ldr	r6, [r6, #4]
 8019f04:	e7b9      	b.n	8019e7a <_malloc_r+0x46>
 8019f06:	230c      	movs	r3, #12
 8019f08:	603b      	str	r3, [r7, #0]
 8019f0a:	4638      	mov	r0, r7
 8019f0c:	f000 fbec 	bl	801a6e8 <__malloc_unlock>
 8019f10:	e7a1      	b.n	8019e56 <_malloc_r+0x22>
 8019f12:	6025      	str	r5, [r4, #0]
 8019f14:	e7de      	b.n	8019ed4 <_malloc_r+0xa0>
 8019f16:	bf00      	nop
 8019f18:	20008638 	.word	0x20008638

08019f1c <__sfputc_r>:
 8019f1c:	6893      	ldr	r3, [r2, #8]
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	b410      	push	{r4}
 8019f24:	6093      	str	r3, [r2, #8]
 8019f26:	da08      	bge.n	8019f3a <__sfputc_r+0x1e>
 8019f28:	6994      	ldr	r4, [r2, #24]
 8019f2a:	42a3      	cmp	r3, r4
 8019f2c:	db01      	blt.n	8019f32 <__sfputc_r+0x16>
 8019f2e:	290a      	cmp	r1, #10
 8019f30:	d103      	bne.n	8019f3a <__sfputc_r+0x1e>
 8019f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f36:	f7ff bc31 	b.w	801979c <__swbuf_r>
 8019f3a:	6813      	ldr	r3, [r2, #0]
 8019f3c:	1c58      	adds	r0, r3, #1
 8019f3e:	6010      	str	r0, [r2, #0]
 8019f40:	7019      	strb	r1, [r3, #0]
 8019f42:	4608      	mov	r0, r1
 8019f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f48:	4770      	bx	lr

08019f4a <__sfputs_r>:
 8019f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f4c:	4606      	mov	r6, r0
 8019f4e:	460f      	mov	r7, r1
 8019f50:	4614      	mov	r4, r2
 8019f52:	18d5      	adds	r5, r2, r3
 8019f54:	42ac      	cmp	r4, r5
 8019f56:	d101      	bne.n	8019f5c <__sfputs_r+0x12>
 8019f58:	2000      	movs	r0, #0
 8019f5a:	e007      	b.n	8019f6c <__sfputs_r+0x22>
 8019f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f60:	463a      	mov	r2, r7
 8019f62:	4630      	mov	r0, r6
 8019f64:	f7ff ffda 	bl	8019f1c <__sfputc_r>
 8019f68:	1c43      	adds	r3, r0, #1
 8019f6a:	d1f3      	bne.n	8019f54 <__sfputs_r+0xa>
 8019f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f70 <_vfiprintf_r>:
 8019f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f74:	460d      	mov	r5, r1
 8019f76:	b09d      	sub	sp, #116	; 0x74
 8019f78:	4614      	mov	r4, r2
 8019f7a:	4698      	mov	r8, r3
 8019f7c:	4606      	mov	r6, r0
 8019f7e:	b118      	cbz	r0, 8019f88 <_vfiprintf_r+0x18>
 8019f80:	6983      	ldr	r3, [r0, #24]
 8019f82:	b90b      	cbnz	r3, 8019f88 <_vfiprintf_r+0x18>
 8019f84:	f7ff fde4 	bl	8019b50 <__sinit>
 8019f88:	4b89      	ldr	r3, [pc, #548]	; (801a1b0 <_vfiprintf_r+0x240>)
 8019f8a:	429d      	cmp	r5, r3
 8019f8c:	d11b      	bne.n	8019fc6 <_vfiprintf_r+0x56>
 8019f8e:	6875      	ldr	r5, [r6, #4]
 8019f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f92:	07d9      	lsls	r1, r3, #31
 8019f94:	d405      	bmi.n	8019fa2 <_vfiprintf_r+0x32>
 8019f96:	89ab      	ldrh	r3, [r5, #12]
 8019f98:	059a      	lsls	r2, r3, #22
 8019f9a:	d402      	bmi.n	8019fa2 <_vfiprintf_r+0x32>
 8019f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f9e:	f7ff fe75 	bl	8019c8c <__retarget_lock_acquire_recursive>
 8019fa2:	89ab      	ldrh	r3, [r5, #12]
 8019fa4:	071b      	lsls	r3, r3, #28
 8019fa6:	d501      	bpl.n	8019fac <_vfiprintf_r+0x3c>
 8019fa8:	692b      	ldr	r3, [r5, #16]
 8019faa:	b9eb      	cbnz	r3, 8019fe8 <_vfiprintf_r+0x78>
 8019fac:	4629      	mov	r1, r5
 8019fae:	4630      	mov	r0, r6
 8019fb0:	f7ff fc46 	bl	8019840 <__swsetup_r>
 8019fb4:	b1c0      	cbz	r0, 8019fe8 <_vfiprintf_r+0x78>
 8019fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fb8:	07dc      	lsls	r4, r3, #31
 8019fba:	d50e      	bpl.n	8019fda <_vfiprintf_r+0x6a>
 8019fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc0:	b01d      	add	sp, #116	; 0x74
 8019fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc6:	4b7b      	ldr	r3, [pc, #492]	; (801a1b4 <_vfiprintf_r+0x244>)
 8019fc8:	429d      	cmp	r5, r3
 8019fca:	d101      	bne.n	8019fd0 <_vfiprintf_r+0x60>
 8019fcc:	68b5      	ldr	r5, [r6, #8]
 8019fce:	e7df      	b.n	8019f90 <_vfiprintf_r+0x20>
 8019fd0:	4b79      	ldr	r3, [pc, #484]	; (801a1b8 <_vfiprintf_r+0x248>)
 8019fd2:	429d      	cmp	r5, r3
 8019fd4:	bf08      	it	eq
 8019fd6:	68f5      	ldreq	r5, [r6, #12]
 8019fd8:	e7da      	b.n	8019f90 <_vfiprintf_r+0x20>
 8019fda:	89ab      	ldrh	r3, [r5, #12]
 8019fdc:	0598      	lsls	r0, r3, #22
 8019fde:	d4ed      	bmi.n	8019fbc <_vfiprintf_r+0x4c>
 8019fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fe2:	f7ff fe54 	bl	8019c8e <__retarget_lock_release_recursive>
 8019fe6:	e7e9      	b.n	8019fbc <_vfiprintf_r+0x4c>
 8019fe8:	2300      	movs	r3, #0
 8019fea:	9309      	str	r3, [sp, #36]	; 0x24
 8019fec:	2320      	movs	r3, #32
 8019fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ff6:	2330      	movs	r3, #48	; 0x30
 8019ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a1bc <_vfiprintf_r+0x24c>
 8019ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a000:	f04f 0901 	mov.w	r9, #1
 801a004:	4623      	mov	r3, r4
 801a006:	469a      	mov	sl, r3
 801a008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a00c:	b10a      	cbz	r2, 801a012 <_vfiprintf_r+0xa2>
 801a00e:	2a25      	cmp	r2, #37	; 0x25
 801a010:	d1f9      	bne.n	801a006 <_vfiprintf_r+0x96>
 801a012:	ebba 0b04 	subs.w	fp, sl, r4
 801a016:	d00b      	beq.n	801a030 <_vfiprintf_r+0xc0>
 801a018:	465b      	mov	r3, fp
 801a01a:	4622      	mov	r2, r4
 801a01c:	4629      	mov	r1, r5
 801a01e:	4630      	mov	r0, r6
 801a020:	f7ff ff93 	bl	8019f4a <__sfputs_r>
 801a024:	3001      	adds	r0, #1
 801a026:	f000 80aa 	beq.w	801a17e <_vfiprintf_r+0x20e>
 801a02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a02c:	445a      	add	r2, fp
 801a02e:	9209      	str	r2, [sp, #36]	; 0x24
 801a030:	f89a 3000 	ldrb.w	r3, [sl]
 801a034:	2b00      	cmp	r3, #0
 801a036:	f000 80a2 	beq.w	801a17e <_vfiprintf_r+0x20e>
 801a03a:	2300      	movs	r3, #0
 801a03c:	f04f 32ff 	mov.w	r2, #4294967295
 801a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a044:	f10a 0a01 	add.w	sl, sl, #1
 801a048:	9304      	str	r3, [sp, #16]
 801a04a:	9307      	str	r3, [sp, #28]
 801a04c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a050:	931a      	str	r3, [sp, #104]	; 0x68
 801a052:	4654      	mov	r4, sl
 801a054:	2205      	movs	r2, #5
 801a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a05a:	4858      	ldr	r0, [pc, #352]	; (801a1bc <_vfiprintf_r+0x24c>)
 801a05c:	f7e6 f890 	bl	8000180 <memchr>
 801a060:	9a04      	ldr	r2, [sp, #16]
 801a062:	b9d8      	cbnz	r0, 801a09c <_vfiprintf_r+0x12c>
 801a064:	06d1      	lsls	r1, r2, #27
 801a066:	bf44      	itt	mi
 801a068:	2320      	movmi	r3, #32
 801a06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a06e:	0713      	lsls	r3, r2, #28
 801a070:	bf44      	itt	mi
 801a072:	232b      	movmi	r3, #43	; 0x2b
 801a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a078:	f89a 3000 	ldrb.w	r3, [sl]
 801a07c:	2b2a      	cmp	r3, #42	; 0x2a
 801a07e:	d015      	beq.n	801a0ac <_vfiprintf_r+0x13c>
 801a080:	9a07      	ldr	r2, [sp, #28]
 801a082:	4654      	mov	r4, sl
 801a084:	2000      	movs	r0, #0
 801a086:	f04f 0c0a 	mov.w	ip, #10
 801a08a:	4621      	mov	r1, r4
 801a08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a090:	3b30      	subs	r3, #48	; 0x30
 801a092:	2b09      	cmp	r3, #9
 801a094:	d94e      	bls.n	801a134 <_vfiprintf_r+0x1c4>
 801a096:	b1b0      	cbz	r0, 801a0c6 <_vfiprintf_r+0x156>
 801a098:	9207      	str	r2, [sp, #28]
 801a09a:	e014      	b.n	801a0c6 <_vfiprintf_r+0x156>
 801a09c:	eba0 0308 	sub.w	r3, r0, r8
 801a0a0:	fa09 f303 	lsl.w	r3, r9, r3
 801a0a4:	4313      	orrs	r3, r2
 801a0a6:	9304      	str	r3, [sp, #16]
 801a0a8:	46a2      	mov	sl, r4
 801a0aa:	e7d2      	b.n	801a052 <_vfiprintf_r+0xe2>
 801a0ac:	9b03      	ldr	r3, [sp, #12]
 801a0ae:	1d19      	adds	r1, r3, #4
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	9103      	str	r1, [sp, #12]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	bfbb      	ittet	lt
 801a0b8:	425b      	neglt	r3, r3
 801a0ba:	f042 0202 	orrlt.w	r2, r2, #2
 801a0be:	9307      	strge	r3, [sp, #28]
 801a0c0:	9307      	strlt	r3, [sp, #28]
 801a0c2:	bfb8      	it	lt
 801a0c4:	9204      	strlt	r2, [sp, #16]
 801a0c6:	7823      	ldrb	r3, [r4, #0]
 801a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 801a0ca:	d10c      	bne.n	801a0e6 <_vfiprintf_r+0x176>
 801a0cc:	7863      	ldrb	r3, [r4, #1]
 801a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 801a0d0:	d135      	bne.n	801a13e <_vfiprintf_r+0x1ce>
 801a0d2:	9b03      	ldr	r3, [sp, #12]
 801a0d4:	1d1a      	adds	r2, r3, #4
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	9203      	str	r2, [sp, #12]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	bfb8      	it	lt
 801a0de:	f04f 33ff 	movlt.w	r3, #4294967295
 801a0e2:	3402      	adds	r4, #2
 801a0e4:	9305      	str	r3, [sp, #20]
 801a0e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a1cc <_vfiprintf_r+0x25c>
 801a0ea:	7821      	ldrb	r1, [r4, #0]
 801a0ec:	2203      	movs	r2, #3
 801a0ee:	4650      	mov	r0, sl
 801a0f0:	f7e6 f846 	bl	8000180 <memchr>
 801a0f4:	b140      	cbz	r0, 801a108 <_vfiprintf_r+0x198>
 801a0f6:	2340      	movs	r3, #64	; 0x40
 801a0f8:	eba0 000a 	sub.w	r0, r0, sl
 801a0fc:	fa03 f000 	lsl.w	r0, r3, r0
 801a100:	9b04      	ldr	r3, [sp, #16]
 801a102:	4303      	orrs	r3, r0
 801a104:	3401      	adds	r4, #1
 801a106:	9304      	str	r3, [sp, #16]
 801a108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a10c:	482c      	ldr	r0, [pc, #176]	; (801a1c0 <_vfiprintf_r+0x250>)
 801a10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a112:	2206      	movs	r2, #6
 801a114:	f7e6 f834 	bl	8000180 <memchr>
 801a118:	2800      	cmp	r0, #0
 801a11a:	d03f      	beq.n	801a19c <_vfiprintf_r+0x22c>
 801a11c:	4b29      	ldr	r3, [pc, #164]	; (801a1c4 <_vfiprintf_r+0x254>)
 801a11e:	bb1b      	cbnz	r3, 801a168 <_vfiprintf_r+0x1f8>
 801a120:	9b03      	ldr	r3, [sp, #12]
 801a122:	3307      	adds	r3, #7
 801a124:	f023 0307 	bic.w	r3, r3, #7
 801a128:	3308      	adds	r3, #8
 801a12a:	9303      	str	r3, [sp, #12]
 801a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a12e:	443b      	add	r3, r7
 801a130:	9309      	str	r3, [sp, #36]	; 0x24
 801a132:	e767      	b.n	801a004 <_vfiprintf_r+0x94>
 801a134:	fb0c 3202 	mla	r2, ip, r2, r3
 801a138:	460c      	mov	r4, r1
 801a13a:	2001      	movs	r0, #1
 801a13c:	e7a5      	b.n	801a08a <_vfiprintf_r+0x11a>
 801a13e:	2300      	movs	r3, #0
 801a140:	3401      	adds	r4, #1
 801a142:	9305      	str	r3, [sp, #20]
 801a144:	4619      	mov	r1, r3
 801a146:	f04f 0c0a 	mov.w	ip, #10
 801a14a:	4620      	mov	r0, r4
 801a14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a150:	3a30      	subs	r2, #48	; 0x30
 801a152:	2a09      	cmp	r2, #9
 801a154:	d903      	bls.n	801a15e <_vfiprintf_r+0x1ee>
 801a156:	2b00      	cmp	r3, #0
 801a158:	d0c5      	beq.n	801a0e6 <_vfiprintf_r+0x176>
 801a15a:	9105      	str	r1, [sp, #20]
 801a15c:	e7c3      	b.n	801a0e6 <_vfiprintf_r+0x176>
 801a15e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a162:	4604      	mov	r4, r0
 801a164:	2301      	movs	r3, #1
 801a166:	e7f0      	b.n	801a14a <_vfiprintf_r+0x1da>
 801a168:	ab03      	add	r3, sp, #12
 801a16a:	9300      	str	r3, [sp, #0]
 801a16c:	462a      	mov	r2, r5
 801a16e:	4b16      	ldr	r3, [pc, #88]	; (801a1c8 <_vfiprintf_r+0x258>)
 801a170:	a904      	add	r1, sp, #16
 801a172:	4630      	mov	r0, r6
 801a174:	f3af 8000 	nop.w
 801a178:	4607      	mov	r7, r0
 801a17a:	1c78      	adds	r0, r7, #1
 801a17c:	d1d6      	bne.n	801a12c <_vfiprintf_r+0x1bc>
 801a17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a180:	07d9      	lsls	r1, r3, #31
 801a182:	d405      	bmi.n	801a190 <_vfiprintf_r+0x220>
 801a184:	89ab      	ldrh	r3, [r5, #12]
 801a186:	059a      	lsls	r2, r3, #22
 801a188:	d402      	bmi.n	801a190 <_vfiprintf_r+0x220>
 801a18a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a18c:	f7ff fd7f 	bl	8019c8e <__retarget_lock_release_recursive>
 801a190:	89ab      	ldrh	r3, [r5, #12]
 801a192:	065b      	lsls	r3, r3, #25
 801a194:	f53f af12 	bmi.w	8019fbc <_vfiprintf_r+0x4c>
 801a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a19a:	e711      	b.n	8019fc0 <_vfiprintf_r+0x50>
 801a19c:	ab03      	add	r3, sp, #12
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	462a      	mov	r2, r5
 801a1a2:	4b09      	ldr	r3, [pc, #36]	; (801a1c8 <_vfiprintf_r+0x258>)
 801a1a4:	a904      	add	r1, sp, #16
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	f000 f880 	bl	801a2ac <_printf_i>
 801a1ac:	e7e4      	b.n	801a178 <_vfiprintf_r+0x208>
 801a1ae:	bf00      	nop
 801a1b0:	0801a988 	.word	0x0801a988
 801a1b4:	0801a9a8 	.word	0x0801a9a8
 801a1b8:	0801a968 	.word	0x0801a968
 801a1bc:	0801a9c8 	.word	0x0801a9c8
 801a1c0:	0801a9d2 	.word	0x0801a9d2
 801a1c4:	00000000 	.word	0x00000000
 801a1c8:	08019f4b 	.word	0x08019f4b
 801a1cc:	0801a9ce 	.word	0x0801a9ce

0801a1d0 <_printf_common>:
 801a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1d4:	4616      	mov	r6, r2
 801a1d6:	4699      	mov	r9, r3
 801a1d8:	688a      	ldr	r2, [r1, #8]
 801a1da:	690b      	ldr	r3, [r1, #16]
 801a1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	bfb8      	it	lt
 801a1e4:	4613      	movlt	r3, r2
 801a1e6:	6033      	str	r3, [r6, #0]
 801a1e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a1ec:	4607      	mov	r7, r0
 801a1ee:	460c      	mov	r4, r1
 801a1f0:	b10a      	cbz	r2, 801a1f6 <_printf_common+0x26>
 801a1f2:	3301      	adds	r3, #1
 801a1f4:	6033      	str	r3, [r6, #0]
 801a1f6:	6823      	ldr	r3, [r4, #0]
 801a1f8:	0699      	lsls	r1, r3, #26
 801a1fa:	bf42      	ittt	mi
 801a1fc:	6833      	ldrmi	r3, [r6, #0]
 801a1fe:	3302      	addmi	r3, #2
 801a200:	6033      	strmi	r3, [r6, #0]
 801a202:	6825      	ldr	r5, [r4, #0]
 801a204:	f015 0506 	ands.w	r5, r5, #6
 801a208:	d106      	bne.n	801a218 <_printf_common+0x48>
 801a20a:	f104 0a19 	add.w	sl, r4, #25
 801a20e:	68e3      	ldr	r3, [r4, #12]
 801a210:	6832      	ldr	r2, [r6, #0]
 801a212:	1a9b      	subs	r3, r3, r2
 801a214:	42ab      	cmp	r3, r5
 801a216:	dc26      	bgt.n	801a266 <_printf_common+0x96>
 801a218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a21c:	1e13      	subs	r3, r2, #0
 801a21e:	6822      	ldr	r2, [r4, #0]
 801a220:	bf18      	it	ne
 801a222:	2301      	movne	r3, #1
 801a224:	0692      	lsls	r2, r2, #26
 801a226:	d42b      	bmi.n	801a280 <_printf_common+0xb0>
 801a228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a22c:	4649      	mov	r1, r9
 801a22e:	4638      	mov	r0, r7
 801a230:	47c0      	blx	r8
 801a232:	3001      	adds	r0, #1
 801a234:	d01e      	beq.n	801a274 <_printf_common+0xa4>
 801a236:	6823      	ldr	r3, [r4, #0]
 801a238:	68e5      	ldr	r5, [r4, #12]
 801a23a:	6832      	ldr	r2, [r6, #0]
 801a23c:	f003 0306 	and.w	r3, r3, #6
 801a240:	2b04      	cmp	r3, #4
 801a242:	bf08      	it	eq
 801a244:	1aad      	subeq	r5, r5, r2
 801a246:	68a3      	ldr	r3, [r4, #8]
 801a248:	6922      	ldr	r2, [r4, #16]
 801a24a:	bf0c      	ite	eq
 801a24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a250:	2500      	movne	r5, #0
 801a252:	4293      	cmp	r3, r2
 801a254:	bfc4      	itt	gt
 801a256:	1a9b      	subgt	r3, r3, r2
 801a258:	18ed      	addgt	r5, r5, r3
 801a25a:	2600      	movs	r6, #0
 801a25c:	341a      	adds	r4, #26
 801a25e:	42b5      	cmp	r5, r6
 801a260:	d11a      	bne.n	801a298 <_printf_common+0xc8>
 801a262:	2000      	movs	r0, #0
 801a264:	e008      	b.n	801a278 <_printf_common+0xa8>
 801a266:	2301      	movs	r3, #1
 801a268:	4652      	mov	r2, sl
 801a26a:	4649      	mov	r1, r9
 801a26c:	4638      	mov	r0, r7
 801a26e:	47c0      	blx	r8
 801a270:	3001      	adds	r0, #1
 801a272:	d103      	bne.n	801a27c <_printf_common+0xac>
 801a274:	f04f 30ff 	mov.w	r0, #4294967295
 801a278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a27c:	3501      	adds	r5, #1
 801a27e:	e7c6      	b.n	801a20e <_printf_common+0x3e>
 801a280:	18e1      	adds	r1, r4, r3
 801a282:	1c5a      	adds	r2, r3, #1
 801a284:	2030      	movs	r0, #48	; 0x30
 801a286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a28a:	4422      	add	r2, r4
 801a28c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a294:	3302      	adds	r3, #2
 801a296:	e7c7      	b.n	801a228 <_printf_common+0x58>
 801a298:	2301      	movs	r3, #1
 801a29a:	4622      	mov	r2, r4
 801a29c:	4649      	mov	r1, r9
 801a29e:	4638      	mov	r0, r7
 801a2a0:	47c0      	blx	r8
 801a2a2:	3001      	adds	r0, #1
 801a2a4:	d0e6      	beq.n	801a274 <_printf_common+0xa4>
 801a2a6:	3601      	adds	r6, #1
 801a2a8:	e7d9      	b.n	801a25e <_printf_common+0x8e>
	...

0801a2ac <_printf_i>:
 801a2ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a2b0:	7e0f      	ldrb	r7, [r1, #24]
 801a2b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a2b4:	2f78      	cmp	r7, #120	; 0x78
 801a2b6:	4691      	mov	r9, r2
 801a2b8:	4680      	mov	r8, r0
 801a2ba:	460c      	mov	r4, r1
 801a2bc:	469a      	mov	sl, r3
 801a2be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a2c2:	d807      	bhi.n	801a2d4 <_printf_i+0x28>
 801a2c4:	2f62      	cmp	r7, #98	; 0x62
 801a2c6:	d80a      	bhi.n	801a2de <_printf_i+0x32>
 801a2c8:	2f00      	cmp	r7, #0
 801a2ca:	f000 80d8 	beq.w	801a47e <_printf_i+0x1d2>
 801a2ce:	2f58      	cmp	r7, #88	; 0x58
 801a2d0:	f000 80a3 	beq.w	801a41a <_printf_i+0x16e>
 801a2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a2d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a2dc:	e03a      	b.n	801a354 <_printf_i+0xa8>
 801a2de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a2e2:	2b15      	cmp	r3, #21
 801a2e4:	d8f6      	bhi.n	801a2d4 <_printf_i+0x28>
 801a2e6:	a101      	add	r1, pc, #4	; (adr r1, 801a2ec <_printf_i+0x40>)
 801a2e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a2ec:	0801a345 	.word	0x0801a345
 801a2f0:	0801a359 	.word	0x0801a359
 801a2f4:	0801a2d5 	.word	0x0801a2d5
 801a2f8:	0801a2d5 	.word	0x0801a2d5
 801a2fc:	0801a2d5 	.word	0x0801a2d5
 801a300:	0801a2d5 	.word	0x0801a2d5
 801a304:	0801a359 	.word	0x0801a359
 801a308:	0801a2d5 	.word	0x0801a2d5
 801a30c:	0801a2d5 	.word	0x0801a2d5
 801a310:	0801a2d5 	.word	0x0801a2d5
 801a314:	0801a2d5 	.word	0x0801a2d5
 801a318:	0801a465 	.word	0x0801a465
 801a31c:	0801a389 	.word	0x0801a389
 801a320:	0801a447 	.word	0x0801a447
 801a324:	0801a2d5 	.word	0x0801a2d5
 801a328:	0801a2d5 	.word	0x0801a2d5
 801a32c:	0801a487 	.word	0x0801a487
 801a330:	0801a2d5 	.word	0x0801a2d5
 801a334:	0801a389 	.word	0x0801a389
 801a338:	0801a2d5 	.word	0x0801a2d5
 801a33c:	0801a2d5 	.word	0x0801a2d5
 801a340:	0801a44f 	.word	0x0801a44f
 801a344:	682b      	ldr	r3, [r5, #0]
 801a346:	1d1a      	adds	r2, r3, #4
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	602a      	str	r2, [r5, #0]
 801a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a354:	2301      	movs	r3, #1
 801a356:	e0a3      	b.n	801a4a0 <_printf_i+0x1f4>
 801a358:	6820      	ldr	r0, [r4, #0]
 801a35a:	6829      	ldr	r1, [r5, #0]
 801a35c:	0606      	lsls	r6, r0, #24
 801a35e:	f101 0304 	add.w	r3, r1, #4
 801a362:	d50a      	bpl.n	801a37a <_printf_i+0xce>
 801a364:	680e      	ldr	r6, [r1, #0]
 801a366:	602b      	str	r3, [r5, #0]
 801a368:	2e00      	cmp	r6, #0
 801a36a:	da03      	bge.n	801a374 <_printf_i+0xc8>
 801a36c:	232d      	movs	r3, #45	; 0x2d
 801a36e:	4276      	negs	r6, r6
 801a370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a374:	485e      	ldr	r0, [pc, #376]	; (801a4f0 <_printf_i+0x244>)
 801a376:	230a      	movs	r3, #10
 801a378:	e019      	b.n	801a3ae <_printf_i+0x102>
 801a37a:	680e      	ldr	r6, [r1, #0]
 801a37c:	602b      	str	r3, [r5, #0]
 801a37e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a382:	bf18      	it	ne
 801a384:	b236      	sxthne	r6, r6
 801a386:	e7ef      	b.n	801a368 <_printf_i+0xbc>
 801a388:	682b      	ldr	r3, [r5, #0]
 801a38a:	6820      	ldr	r0, [r4, #0]
 801a38c:	1d19      	adds	r1, r3, #4
 801a38e:	6029      	str	r1, [r5, #0]
 801a390:	0601      	lsls	r1, r0, #24
 801a392:	d501      	bpl.n	801a398 <_printf_i+0xec>
 801a394:	681e      	ldr	r6, [r3, #0]
 801a396:	e002      	b.n	801a39e <_printf_i+0xf2>
 801a398:	0646      	lsls	r6, r0, #25
 801a39a:	d5fb      	bpl.n	801a394 <_printf_i+0xe8>
 801a39c:	881e      	ldrh	r6, [r3, #0]
 801a39e:	4854      	ldr	r0, [pc, #336]	; (801a4f0 <_printf_i+0x244>)
 801a3a0:	2f6f      	cmp	r7, #111	; 0x6f
 801a3a2:	bf0c      	ite	eq
 801a3a4:	2308      	moveq	r3, #8
 801a3a6:	230a      	movne	r3, #10
 801a3a8:	2100      	movs	r1, #0
 801a3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3ae:	6865      	ldr	r5, [r4, #4]
 801a3b0:	60a5      	str	r5, [r4, #8]
 801a3b2:	2d00      	cmp	r5, #0
 801a3b4:	bfa2      	ittt	ge
 801a3b6:	6821      	ldrge	r1, [r4, #0]
 801a3b8:	f021 0104 	bicge.w	r1, r1, #4
 801a3bc:	6021      	strge	r1, [r4, #0]
 801a3be:	b90e      	cbnz	r6, 801a3c4 <_printf_i+0x118>
 801a3c0:	2d00      	cmp	r5, #0
 801a3c2:	d04d      	beq.n	801a460 <_printf_i+0x1b4>
 801a3c4:	4615      	mov	r5, r2
 801a3c6:	fbb6 f1f3 	udiv	r1, r6, r3
 801a3ca:	fb03 6711 	mls	r7, r3, r1, r6
 801a3ce:	5dc7      	ldrb	r7, [r0, r7]
 801a3d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a3d4:	4637      	mov	r7, r6
 801a3d6:	42bb      	cmp	r3, r7
 801a3d8:	460e      	mov	r6, r1
 801a3da:	d9f4      	bls.n	801a3c6 <_printf_i+0x11a>
 801a3dc:	2b08      	cmp	r3, #8
 801a3de:	d10b      	bne.n	801a3f8 <_printf_i+0x14c>
 801a3e0:	6823      	ldr	r3, [r4, #0]
 801a3e2:	07de      	lsls	r6, r3, #31
 801a3e4:	d508      	bpl.n	801a3f8 <_printf_i+0x14c>
 801a3e6:	6923      	ldr	r3, [r4, #16]
 801a3e8:	6861      	ldr	r1, [r4, #4]
 801a3ea:	4299      	cmp	r1, r3
 801a3ec:	bfde      	ittt	le
 801a3ee:	2330      	movle	r3, #48	; 0x30
 801a3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a3f8:	1b52      	subs	r2, r2, r5
 801a3fa:	6122      	str	r2, [r4, #16]
 801a3fc:	f8cd a000 	str.w	sl, [sp]
 801a400:	464b      	mov	r3, r9
 801a402:	aa03      	add	r2, sp, #12
 801a404:	4621      	mov	r1, r4
 801a406:	4640      	mov	r0, r8
 801a408:	f7ff fee2 	bl	801a1d0 <_printf_common>
 801a40c:	3001      	adds	r0, #1
 801a40e:	d14c      	bne.n	801a4aa <_printf_i+0x1fe>
 801a410:	f04f 30ff 	mov.w	r0, #4294967295
 801a414:	b004      	add	sp, #16
 801a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a41a:	4835      	ldr	r0, [pc, #212]	; (801a4f0 <_printf_i+0x244>)
 801a41c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a420:	6829      	ldr	r1, [r5, #0]
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	f851 6b04 	ldr.w	r6, [r1], #4
 801a428:	6029      	str	r1, [r5, #0]
 801a42a:	061d      	lsls	r5, r3, #24
 801a42c:	d514      	bpl.n	801a458 <_printf_i+0x1ac>
 801a42e:	07df      	lsls	r7, r3, #31
 801a430:	bf44      	itt	mi
 801a432:	f043 0320 	orrmi.w	r3, r3, #32
 801a436:	6023      	strmi	r3, [r4, #0]
 801a438:	b91e      	cbnz	r6, 801a442 <_printf_i+0x196>
 801a43a:	6823      	ldr	r3, [r4, #0]
 801a43c:	f023 0320 	bic.w	r3, r3, #32
 801a440:	6023      	str	r3, [r4, #0]
 801a442:	2310      	movs	r3, #16
 801a444:	e7b0      	b.n	801a3a8 <_printf_i+0xfc>
 801a446:	6823      	ldr	r3, [r4, #0]
 801a448:	f043 0320 	orr.w	r3, r3, #32
 801a44c:	6023      	str	r3, [r4, #0]
 801a44e:	2378      	movs	r3, #120	; 0x78
 801a450:	4828      	ldr	r0, [pc, #160]	; (801a4f4 <_printf_i+0x248>)
 801a452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a456:	e7e3      	b.n	801a420 <_printf_i+0x174>
 801a458:	0659      	lsls	r1, r3, #25
 801a45a:	bf48      	it	mi
 801a45c:	b2b6      	uxthmi	r6, r6
 801a45e:	e7e6      	b.n	801a42e <_printf_i+0x182>
 801a460:	4615      	mov	r5, r2
 801a462:	e7bb      	b.n	801a3dc <_printf_i+0x130>
 801a464:	682b      	ldr	r3, [r5, #0]
 801a466:	6826      	ldr	r6, [r4, #0]
 801a468:	6961      	ldr	r1, [r4, #20]
 801a46a:	1d18      	adds	r0, r3, #4
 801a46c:	6028      	str	r0, [r5, #0]
 801a46e:	0635      	lsls	r5, r6, #24
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	d501      	bpl.n	801a478 <_printf_i+0x1cc>
 801a474:	6019      	str	r1, [r3, #0]
 801a476:	e002      	b.n	801a47e <_printf_i+0x1d2>
 801a478:	0670      	lsls	r0, r6, #25
 801a47a:	d5fb      	bpl.n	801a474 <_printf_i+0x1c8>
 801a47c:	8019      	strh	r1, [r3, #0]
 801a47e:	2300      	movs	r3, #0
 801a480:	6123      	str	r3, [r4, #16]
 801a482:	4615      	mov	r5, r2
 801a484:	e7ba      	b.n	801a3fc <_printf_i+0x150>
 801a486:	682b      	ldr	r3, [r5, #0]
 801a488:	1d1a      	adds	r2, r3, #4
 801a48a:	602a      	str	r2, [r5, #0]
 801a48c:	681d      	ldr	r5, [r3, #0]
 801a48e:	6862      	ldr	r2, [r4, #4]
 801a490:	2100      	movs	r1, #0
 801a492:	4628      	mov	r0, r5
 801a494:	f7e5 fe74 	bl	8000180 <memchr>
 801a498:	b108      	cbz	r0, 801a49e <_printf_i+0x1f2>
 801a49a:	1b40      	subs	r0, r0, r5
 801a49c:	6060      	str	r0, [r4, #4]
 801a49e:	6863      	ldr	r3, [r4, #4]
 801a4a0:	6123      	str	r3, [r4, #16]
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4a8:	e7a8      	b.n	801a3fc <_printf_i+0x150>
 801a4aa:	6923      	ldr	r3, [r4, #16]
 801a4ac:	462a      	mov	r2, r5
 801a4ae:	4649      	mov	r1, r9
 801a4b0:	4640      	mov	r0, r8
 801a4b2:	47d0      	blx	sl
 801a4b4:	3001      	adds	r0, #1
 801a4b6:	d0ab      	beq.n	801a410 <_printf_i+0x164>
 801a4b8:	6823      	ldr	r3, [r4, #0]
 801a4ba:	079b      	lsls	r3, r3, #30
 801a4bc:	d413      	bmi.n	801a4e6 <_printf_i+0x23a>
 801a4be:	68e0      	ldr	r0, [r4, #12]
 801a4c0:	9b03      	ldr	r3, [sp, #12]
 801a4c2:	4298      	cmp	r0, r3
 801a4c4:	bfb8      	it	lt
 801a4c6:	4618      	movlt	r0, r3
 801a4c8:	e7a4      	b.n	801a414 <_printf_i+0x168>
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	4632      	mov	r2, r6
 801a4ce:	4649      	mov	r1, r9
 801a4d0:	4640      	mov	r0, r8
 801a4d2:	47d0      	blx	sl
 801a4d4:	3001      	adds	r0, #1
 801a4d6:	d09b      	beq.n	801a410 <_printf_i+0x164>
 801a4d8:	3501      	adds	r5, #1
 801a4da:	68e3      	ldr	r3, [r4, #12]
 801a4dc:	9903      	ldr	r1, [sp, #12]
 801a4de:	1a5b      	subs	r3, r3, r1
 801a4e0:	42ab      	cmp	r3, r5
 801a4e2:	dcf2      	bgt.n	801a4ca <_printf_i+0x21e>
 801a4e4:	e7eb      	b.n	801a4be <_printf_i+0x212>
 801a4e6:	2500      	movs	r5, #0
 801a4e8:	f104 0619 	add.w	r6, r4, #25
 801a4ec:	e7f5      	b.n	801a4da <_printf_i+0x22e>
 801a4ee:	bf00      	nop
 801a4f0:	0801a9d9 	.word	0x0801a9d9
 801a4f4:	0801a9ea 	.word	0x0801a9ea

0801a4f8 <_putc_r>:
 801a4f8:	b570      	push	{r4, r5, r6, lr}
 801a4fa:	460d      	mov	r5, r1
 801a4fc:	4614      	mov	r4, r2
 801a4fe:	4606      	mov	r6, r0
 801a500:	b118      	cbz	r0, 801a50a <_putc_r+0x12>
 801a502:	6983      	ldr	r3, [r0, #24]
 801a504:	b90b      	cbnz	r3, 801a50a <_putc_r+0x12>
 801a506:	f7ff fb23 	bl	8019b50 <__sinit>
 801a50a:	4b1c      	ldr	r3, [pc, #112]	; (801a57c <_putc_r+0x84>)
 801a50c:	429c      	cmp	r4, r3
 801a50e:	d124      	bne.n	801a55a <_putc_r+0x62>
 801a510:	6874      	ldr	r4, [r6, #4]
 801a512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a514:	07d8      	lsls	r0, r3, #31
 801a516:	d405      	bmi.n	801a524 <_putc_r+0x2c>
 801a518:	89a3      	ldrh	r3, [r4, #12]
 801a51a:	0599      	lsls	r1, r3, #22
 801a51c:	d402      	bmi.n	801a524 <_putc_r+0x2c>
 801a51e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a520:	f7ff fbb4 	bl	8019c8c <__retarget_lock_acquire_recursive>
 801a524:	68a3      	ldr	r3, [r4, #8]
 801a526:	3b01      	subs	r3, #1
 801a528:	2b00      	cmp	r3, #0
 801a52a:	60a3      	str	r3, [r4, #8]
 801a52c:	da05      	bge.n	801a53a <_putc_r+0x42>
 801a52e:	69a2      	ldr	r2, [r4, #24]
 801a530:	4293      	cmp	r3, r2
 801a532:	db1c      	blt.n	801a56e <_putc_r+0x76>
 801a534:	b2eb      	uxtb	r3, r5
 801a536:	2b0a      	cmp	r3, #10
 801a538:	d019      	beq.n	801a56e <_putc_r+0x76>
 801a53a:	6823      	ldr	r3, [r4, #0]
 801a53c:	1c5a      	adds	r2, r3, #1
 801a53e:	6022      	str	r2, [r4, #0]
 801a540:	701d      	strb	r5, [r3, #0]
 801a542:	b2ed      	uxtb	r5, r5
 801a544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a546:	07da      	lsls	r2, r3, #31
 801a548:	d405      	bmi.n	801a556 <_putc_r+0x5e>
 801a54a:	89a3      	ldrh	r3, [r4, #12]
 801a54c:	059b      	lsls	r3, r3, #22
 801a54e:	d402      	bmi.n	801a556 <_putc_r+0x5e>
 801a550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a552:	f7ff fb9c 	bl	8019c8e <__retarget_lock_release_recursive>
 801a556:	4628      	mov	r0, r5
 801a558:	bd70      	pop	{r4, r5, r6, pc}
 801a55a:	4b09      	ldr	r3, [pc, #36]	; (801a580 <_putc_r+0x88>)
 801a55c:	429c      	cmp	r4, r3
 801a55e:	d101      	bne.n	801a564 <_putc_r+0x6c>
 801a560:	68b4      	ldr	r4, [r6, #8]
 801a562:	e7d6      	b.n	801a512 <_putc_r+0x1a>
 801a564:	4b07      	ldr	r3, [pc, #28]	; (801a584 <_putc_r+0x8c>)
 801a566:	429c      	cmp	r4, r3
 801a568:	bf08      	it	eq
 801a56a:	68f4      	ldreq	r4, [r6, #12]
 801a56c:	e7d1      	b.n	801a512 <_putc_r+0x1a>
 801a56e:	4629      	mov	r1, r5
 801a570:	4622      	mov	r2, r4
 801a572:	4630      	mov	r0, r6
 801a574:	f7ff f912 	bl	801979c <__swbuf_r>
 801a578:	4605      	mov	r5, r0
 801a57a:	e7e3      	b.n	801a544 <_putc_r+0x4c>
 801a57c:	0801a988 	.word	0x0801a988
 801a580:	0801a9a8 	.word	0x0801a9a8
 801a584:	0801a968 	.word	0x0801a968

0801a588 <_sbrk_r>:
 801a588:	b538      	push	{r3, r4, r5, lr}
 801a58a:	4d06      	ldr	r5, [pc, #24]	; (801a5a4 <_sbrk_r+0x1c>)
 801a58c:	2300      	movs	r3, #0
 801a58e:	4604      	mov	r4, r0
 801a590:	4608      	mov	r0, r1
 801a592:	602b      	str	r3, [r5, #0]
 801a594:	f7e6 feb8 	bl	8001308 <_sbrk>
 801a598:	1c43      	adds	r3, r0, #1
 801a59a:	d102      	bne.n	801a5a2 <_sbrk_r+0x1a>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	b103      	cbz	r3, 801a5a2 <_sbrk_r+0x1a>
 801a5a0:	6023      	str	r3, [r4, #0]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	20008640 	.word	0x20008640

0801a5a8 <__sread>:
 801a5a8:	b510      	push	{r4, lr}
 801a5aa:	460c      	mov	r4, r1
 801a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5b0:	f000 f8a0 	bl	801a6f4 <_read_r>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	bfab      	itete	ge
 801a5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a5ba:	89a3      	ldrhlt	r3, [r4, #12]
 801a5bc:	181b      	addge	r3, r3, r0
 801a5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a5c2:	bfac      	ite	ge
 801a5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a5c6:	81a3      	strhlt	r3, [r4, #12]
 801a5c8:	bd10      	pop	{r4, pc}

0801a5ca <__swrite>:
 801a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ce:	461f      	mov	r7, r3
 801a5d0:	898b      	ldrh	r3, [r1, #12]
 801a5d2:	05db      	lsls	r3, r3, #23
 801a5d4:	4605      	mov	r5, r0
 801a5d6:	460c      	mov	r4, r1
 801a5d8:	4616      	mov	r6, r2
 801a5da:	d505      	bpl.n	801a5e8 <__swrite+0x1e>
 801a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5e0:	2302      	movs	r3, #2
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	f000 f868 	bl	801a6b8 <_lseek_r>
 801a5e8:	89a3      	ldrh	r3, [r4, #12]
 801a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5f2:	81a3      	strh	r3, [r4, #12]
 801a5f4:	4632      	mov	r2, r6
 801a5f6:	463b      	mov	r3, r7
 801a5f8:	4628      	mov	r0, r5
 801a5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5fe:	f000 b817 	b.w	801a630 <_write_r>

0801a602 <__sseek>:
 801a602:	b510      	push	{r4, lr}
 801a604:	460c      	mov	r4, r1
 801a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a60a:	f000 f855 	bl	801a6b8 <_lseek_r>
 801a60e:	1c43      	adds	r3, r0, #1
 801a610:	89a3      	ldrh	r3, [r4, #12]
 801a612:	bf15      	itete	ne
 801a614:	6560      	strne	r0, [r4, #84]	; 0x54
 801a616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a61e:	81a3      	strheq	r3, [r4, #12]
 801a620:	bf18      	it	ne
 801a622:	81a3      	strhne	r3, [r4, #12]
 801a624:	bd10      	pop	{r4, pc}

0801a626 <__sclose>:
 801a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a62a:	f000 b813 	b.w	801a654 <_close_r>
	...

0801a630 <_write_r>:
 801a630:	b538      	push	{r3, r4, r5, lr}
 801a632:	4d07      	ldr	r5, [pc, #28]	; (801a650 <_write_r+0x20>)
 801a634:	4604      	mov	r4, r0
 801a636:	4608      	mov	r0, r1
 801a638:	4611      	mov	r1, r2
 801a63a:	2200      	movs	r2, #0
 801a63c:	602a      	str	r2, [r5, #0]
 801a63e:	461a      	mov	r2, r3
 801a640:	f7e6 f944 	bl	80008cc <_write>
 801a644:	1c43      	adds	r3, r0, #1
 801a646:	d102      	bne.n	801a64e <_write_r+0x1e>
 801a648:	682b      	ldr	r3, [r5, #0]
 801a64a:	b103      	cbz	r3, 801a64e <_write_r+0x1e>
 801a64c:	6023      	str	r3, [r4, #0]
 801a64e:	bd38      	pop	{r3, r4, r5, pc}
 801a650:	20008640 	.word	0x20008640

0801a654 <_close_r>:
 801a654:	b538      	push	{r3, r4, r5, lr}
 801a656:	4d06      	ldr	r5, [pc, #24]	; (801a670 <_close_r+0x1c>)
 801a658:	2300      	movs	r3, #0
 801a65a:	4604      	mov	r4, r0
 801a65c:	4608      	mov	r0, r1
 801a65e:	602b      	str	r3, [r5, #0]
 801a660:	f7e6 fe1d 	bl	800129e <_close>
 801a664:	1c43      	adds	r3, r0, #1
 801a666:	d102      	bne.n	801a66e <_close_r+0x1a>
 801a668:	682b      	ldr	r3, [r5, #0]
 801a66a:	b103      	cbz	r3, 801a66e <_close_r+0x1a>
 801a66c:	6023      	str	r3, [r4, #0]
 801a66e:	bd38      	pop	{r3, r4, r5, pc}
 801a670:	20008640 	.word	0x20008640

0801a674 <_fstat_r>:
 801a674:	b538      	push	{r3, r4, r5, lr}
 801a676:	4d07      	ldr	r5, [pc, #28]	; (801a694 <_fstat_r+0x20>)
 801a678:	2300      	movs	r3, #0
 801a67a:	4604      	mov	r4, r0
 801a67c:	4608      	mov	r0, r1
 801a67e:	4611      	mov	r1, r2
 801a680:	602b      	str	r3, [r5, #0]
 801a682:	f7e6 fe18 	bl	80012b6 <_fstat>
 801a686:	1c43      	adds	r3, r0, #1
 801a688:	d102      	bne.n	801a690 <_fstat_r+0x1c>
 801a68a:	682b      	ldr	r3, [r5, #0]
 801a68c:	b103      	cbz	r3, 801a690 <_fstat_r+0x1c>
 801a68e:	6023      	str	r3, [r4, #0]
 801a690:	bd38      	pop	{r3, r4, r5, pc}
 801a692:	bf00      	nop
 801a694:	20008640 	.word	0x20008640

0801a698 <_isatty_r>:
 801a698:	b538      	push	{r3, r4, r5, lr}
 801a69a:	4d06      	ldr	r5, [pc, #24]	; (801a6b4 <_isatty_r+0x1c>)
 801a69c:	2300      	movs	r3, #0
 801a69e:	4604      	mov	r4, r0
 801a6a0:	4608      	mov	r0, r1
 801a6a2:	602b      	str	r3, [r5, #0]
 801a6a4:	f7e6 fe17 	bl	80012d6 <_isatty>
 801a6a8:	1c43      	adds	r3, r0, #1
 801a6aa:	d102      	bne.n	801a6b2 <_isatty_r+0x1a>
 801a6ac:	682b      	ldr	r3, [r5, #0]
 801a6ae:	b103      	cbz	r3, 801a6b2 <_isatty_r+0x1a>
 801a6b0:	6023      	str	r3, [r4, #0]
 801a6b2:	bd38      	pop	{r3, r4, r5, pc}
 801a6b4:	20008640 	.word	0x20008640

0801a6b8 <_lseek_r>:
 801a6b8:	b538      	push	{r3, r4, r5, lr}
 801a6ba:	4d07      	ldr	r5, [pc, #28]	; (801a6d8 <_lseek_r+0x20>)
 801a6bc:	4604      	mov	r4, r0
 801a6be:	4608      	mov	r0, r1
 801a6c0:	4611      	mov	r1, r2
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	602a      	str	r2, [r5, #0]
 801a6c6:	461a      	mov	r2, r3
 801a6c8:	f7e6 fe10 	bl	80012ec <_lseek>
 801a6cc:	1c43      	adds	r3, r0, #1
 801a6ce:	d102      	bne.n	801a6d6 <_lseek_r+0x1e>
 801a6d0:	682b      	ldr	r3, [r5, #0]
 801a6d2:	b103      	cbz	r3, 801a6d6 <_lseek_r+0x1e>
 801a6d4:	6023      	str	r3, [r4, #0]
 801a6d6:	bd38      	pop	{r3, r4, r5, pc}
 801a6d8:	20008640 	.word	0x20008640

0801a6dc <__malloc_lock>:
 801a6dc:	4801      	ldr	r0, [pc, #4]	; (801a6e4 <__malloc_lock+0x8>)
 801a6de:	f7ff bad5 	b.w	8019c8c <__retarget_lock_acquire_recursive>
 801a6e2:	bf00      	nop
 801a6e4:	20008634 	.word	0x20008634

0801a6e8 <__malloc_unlock>:
 801a6e8:	4801      	ldr	r0, [pc, #4]	; (801a6f0 <__malloc_unlock+0x8>)
 801a6ea:	f7ff bad0 	b.w	8019c8e <__retarget_lock_release_recursive>
 801a6ee:	bf00      	nop
 801a6f0:	20008634 	.word	0x20008634

0801a6f4 <_read_r>:
 801a6f4:	b538      	push	{r3, r4, r5, lr}
 801a6f6:	4d07      	ldr	r5, [pc, #28]	; (801a714 <_read_r+0x20>)
 801a6f8:	4604      	mov	r4, r0
 801a6fa:	4608      	mov	r0, r1
 801a6fc:	4611      	mov	r1, r2
 801a6fe:	2200      	movs	r2, #0
 801a700:	602a      	str	r2, [r5, #0]
 801a702:	461a      	mov	r2, r3
 801a704:	f7e6 fdae 	bl	8001264 <_read>
 801a708:	1c43      	adds	r3, r0, #1
 801a70a:	d102      	bne.n	801a712 <_read_r+0x1e>
 801a70c:	682b      	ldr	r3, [r5, #0]
 801a70e:	b103      	cbz	r3, 801a712 <_read_r+0x1e>
 801a710:	6023      	str	r3, [r4, #0]
 801a712:	bd38      	pop	{r3, r4, r5, pc}
 801a714:	20008640 	.word	0x20008640

0801a718 <_init>:
 801a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a71a:	bf00      	nop
 801a71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a71e:	bc08      	pop	{r3}
 801a720:	469e      	mov	lr, r3
 801a722:	4770      	bx	lr

0801a724 <_fini>:
 801a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a726:	bf00      	nop
 801a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a72a:	bc08      	pop	{r3}
 801a72c:	469e      	mov	lr, r3
 801a72e:	4770      	bx	lr
